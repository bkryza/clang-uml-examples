<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="5298px" preserveAspectRatio="none" style="width:7077px;height:5298px;" version="1.1" viewBox="0 0 7077 5298" width="7077px" zoomAndPan="magnify"><defs><filter height="300%" id="f1seo7y2z3kxd6" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacingAndGlyphs" textLength="251" x="3416.5" y="16.708">Godot Node2D class context</text><!--MD5=[5a779d11372386480685e002af2832e5]
class C_0000945411446247634027--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L126" target="_top" title="String" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L126" xlink:show="new" xlink:title="String" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="2391.2578" id="C_0000945411446247634027" style="stroke: #A80036; stroke-width: 1.5;" width="608" x="3227" y="90.9531"/><ellipse cx="3508.25" cy="106.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3511.2188,112.5938 Q3510.6406,112.8906 3510,113.0313 Q3509.3594,113.1875 3508.6563,113.1875 Q3506.1563,113.1875 3504.8281,111.5469 Q3503.5156,109.8906 3503.5156,106.7656 Q3503.5156,103.6406 3504.8281,101.9844 Q3506.1563,100.3281 3508.6563,100.3281 Q3509.3594,100.3281 3510,100.4844 Q3510.6563,100.6406 3511.2188,100.9375 L3511.2188,103.6563 Q3510.5938,103.0781 3510,102.8125 Q3509.4063,102.5313 3508.7813,102.5313 Q3507.4375,102.5313 3506.75,103.6094 Q3506.0625,104.6719 3506.0625,106.7656 Q3506.0625,108.8594 3506.75,109.9375 Q3507.4375,111 3508.7813,111 Q3509.4063,111 3510,110.7344 Q3510.5938,110.4531 3511.2188,109.875 L3511.2188,112.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="3528.75" y="111.1074">String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3228" x2="3834" y1="122.9531" y2="122.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L128" target="_top" title="_cowdata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L128" xlink:show="new" xlink:title="_cowdata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3233" y="128.9531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="130.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L128" target="_top" title="_cowdata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L128" xlink:show="new" xlink:title="_cowdata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="3247" y="137.1636">_cowdata : CowData&lt;CharType&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L129" target="_top" title="_null" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L129" xlink:show="new" xlink:title="_null" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3233" y="141.7578"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="143.7578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L129" target="_top" title="_null" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L129" xlink:show="new" xlink:title="_null" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="127" x="3247" y="149.9683">_null : const CharType</text></a><ellipse cx="3238" cy="159.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3247" y="162.7729">npos : enum</text><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L345" target="_top" title="invalid_node_name_characters" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L345" xlink:show="new" xlink:title="invalid_node_name_characters" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3233" y="167.3672"/><ellipse cx="3238" cy="172.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L345" target="_top" title="invalid_node_name_characters" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L345" xlink:show="new" xlink:title="invalid_node_name_characters" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="256" x="3247" y="175.5776">invalid_node_name_characters : const String</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3228" x2="3834" y1="182.1719" y2="182.1719"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="190.1719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="3247" y="196.3823">copy_from(const char * p_cstr) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="202.9766"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="3247" y="209.187">copy_from(const CharType * p_cstr, const int p_clip_to = -1) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="215.7813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="3247" y="221.9917">copy_from(const CharType &amp; p_char) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="228.5859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="418" x="3247" y="234.7964">copy_from_unchecked(const CharType * p_char, const int p_length) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="241.3906"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="3247" y="247.6011">_base_is_subsequence_of(const String &amp; p_string, bool case_insensitive) const : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3235" y="254.1953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="3247" y="260.4058">_count(const String &amp; p_string, int p_from, int p_to, bool p_case_insensitive) const : int</text><ellipse cx="3238" cy="270" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3247" y="273.2104">ptrw() : CharType *</text><ellipse cx="3238" cy="282.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3247" y="286.0151">ptr() const : const CharType *</text><ellipse cx="3238" cy="295.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3247" y="298.8198">remove(int p_index) : void</text><ellipse cx="3238" cy="308.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3247" y="311.6245">clear() : void</text><ellipse cx="3238" cy="321.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3247" y="324.4292">get(int p_index) const : CharType</text><ellipse cx="3238" cy="334.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="3247" y="337.2339">set(int p_index, const CharType &amp; p_elem) : void</text><ellipse cx="3238" cy="346.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="3247" y="350.0386">size() const : int</text><ellipse cx="3238" cy="359.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3247" y="362.8433">resize(int p_size) : Error</text><ellipse cx="3238" cy="372.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3247" y="375.6479">operator[](int p_index) const : const CharType &amp;</text><ellipse cx="3238" cy="385.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="3247" y="388.4526">operator[](int p_index) : CharProxy&lt;CharType&gt;</text><ellipse cx="3238" cy="398.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="3247" y="401.2573">operator==(const String &amp; p_str) const : bool</text><ellipse cx="3238" cy="410.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="3247" y="414.062">operator!=(const String &amp; p_str) const : bool</text><ellipse cx="3238" cy="423.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="3247" y="426.8667">operator+(const String &amp; p_str) const : String</text><ellipse cx="3238" cy="436.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3247" y="439.6714">operator+=(const String &amp; ) : String &amp;</text><ellipse cx="3238" cy="449.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3247" y="452.4761">operator+=(CharType p_char) : String &amp;</text><ellipse cx="3238" cy="462.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="3247" y="465.2808">operator+=(const char * p_str) : String &amp;</text><ellipse cx="3238" cy="474.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3247" y="478.0854">operator+=(const CharType * p_str) : String &amp;</text><ellipse cx="3238" cy="487.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="3247" y="490.8901">operator=(const char * p_str) : void</text><ellipse cx="3238" cy="500.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3247" y="503.6948">operator=(const CharType * p_str) : void</text><ellipse cx="3238" cy="513.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="3247" y="516.4995">operator==(const char * p_str) const : bool</text><ellipse cx="3238" cy="526.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="3247" y="529.3042">operator==(const CharType * p_str) const : bool</text><ellipse cx="3238" cy="538.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="3247" y="542.1089">operator==(const StrRange &amp; p_str_range) const : bool</text><ellipse cx="3238" cy="551.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="3247" y="554.9136">operator!=(const char * p_str) const : bool</text><ellipse cx="3238" cy="564.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="3247" y="567.7183">operator!=(const CharType * p_str) const : bool</text><ellipse cx="3238" cy="577.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="3247" y="580.5229">operator&lt;(const CharType * p_str) const : bool</text><ellipse cx="3238" cy="590.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3247" y="593.3276">operator&lt;(const char * p_str) const : bool</text><ellipse cx="3238" cy="602.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="3247" y="606.1323">operator&lt;(const String &amp; p_str) const : bool</text><ellipse cx="3238" cy="615.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="3247" y="618.937">operator&lt;=(const String &amp; p_str) const : bool</text><ellipse cx="3238" cy="628.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="3247" y="631.7417">casecmp_to(const String &amp; p_str) const : signed char</text><ellipse cx="3238" cy="641.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="3247" y="644.5464">nocasecmp_to(const String &amp; p_str) const : signed char</text><ellipse cx="3238" cy="654.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="3247" y="657.3511">naturalnocasecmp_to(const String &amp; p_str) const : signed char</text><ellipse cx="3238" cy="666.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="3247" y="670.1558">c_str() const : const CharType *</text><ellipse cx="3238" cy="679.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3247" y="682.9604">length() const : int</text><ellipse cx="3238" cy="692.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="3247" y="695.7651">substr(int p_from, int p_chars = -1) const : String</text><ellipse cx="3238" cy="705.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="3247" y="708.5698">find(const String &amp; p_str, int p_from = 0) const : int</text><ellipse cx="3238" cy="718.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="3247" y="721.3745">find(const char * p_str, int p_from = 0) const : int</text><ellipse cx="3238" cy="730.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="3247" y="734.1792">find_char(const CharType &amp; p_char, int p_from = 0) const : int</text><ellipse cx="3238" cy="743.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3247" y="746.9839">find_last(const String &amp; p_str) const : int</text><ellipse cx="3238" cy="756.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="3247" y="759.7886">findn(const String &amp; p_str, int p_from = 0) const : int</text><ellipse cx="3238" cy="769.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="3247" y="772.5933">rfind(const String &amp; p_str, int p_from = -1) const : int</text><ellipse cx="3238" cy="782.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="3247" y="785.3979">rfindn(const String &amp; p_str, int p_from = -1) const : int</text><ellipse cx="3238" cy="794.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="3247" y="798.2026">findmk(const Vector&lt;String&gt; &amp; p_keys, int p_from = 0, int * r_key = __null) const : int</text><ellipse cx="3238" cy="807.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="3247" y="811.0073">match(const String &amp; p_wildcard) const : bool</text><ellipse cx="3238" cy="820.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="3247" y="823.812">matchn(const String &amp; p_wildcard) const : bool</text><ellipse cx="3238" cy="833.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="3247" y="836.6167">begins_with(const String &amp; p_string) const : bool</text><ellipse cx="3238" cy="846.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="3247" y="849.4214">begins_with(const char * p_string) const : bool</text><ellipse cx="3238" cy="859.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="3247" y="862.2261">ends_with(const String &amp; p_string) const : bool</text><ellipse cx="3238" cy="871.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="3247" y="875.0308">is_enclosed_in(const String &amp; p_string) const : bool</text><ellipse cx="3238" cy="884.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="3247" y="887.8354">is_subsequence_of(const String &amp; p_string) const : bool</text><ellipse cx="3238" cy="897.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="3247" y="900.6401">is_subsequence_ofi(const String &amp; p_string) const : bool</text><ellipse cx="3238" cy="910.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3247" y="913.4448">is_quoted() const : bool</text><ellipse cx="3238" cy="923.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3247" y="926.2495">bigrams() const : Vector&lt;String&gt;</text><ellipse cx="3238" cy="935.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="3247" y="939.0542">similarity(const String &amp; p_string) const : float</text><ellipse cx="3238" cy="948.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="416" x="3247" y="951.8589">format(const Variant &amp; values, String placeholder = "{_}") const : String</text><ellipse cx="3238" cy="961.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="3247" y="964.6636">replace_first(const String &amp; p_key, const String &amp; p_with) const : String</text><ellipse cx="3238" cy="974.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="3247" y="977.4683">replace(const String &amp; p_key, const String &amp; p_with) const : String</text><ellipse cx="3238" cy="987.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="3247" y="990.2729">replace(const char * p_key, const char * p_with) const : String</text><ellipse cx="3238" cy="999.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="3247" y="1003.0776">replacen(const String &amp; p_key, const String &amp; p_with) const : String</text><ellipse cx="3238" cy="1012.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3247" y="1015.8823">repeat(int p_count) const : String</text><ellipse cx="3238" cy="1025.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="3247" y="1028.687">insert(int p_at_pos, const String &amp; p_string) const : String</text><ellipse cx="3238" cy="1038.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="3247" y="1041.4917">pad_decimals(int p_digits) const : String</text><ellipse cx="3238" cy="1051.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="3247" y="1054.2964">pad_zeros(int p_digits) const : String</text><ellipse cx="3238" cy="1063.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3247" y="1067.1011">trim_prefix(const String &amp; p_prefix) const : String</text><ellipse cx="3238" cy="1076.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3247" y="1079.9058">trim_suffix(const String &amp; p_suffix) const : String</text><ellipse cx="3238" cy="1089.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="3247" y="1092.7104">lpad(int min_length, const String &amp; character = " ") const : String</text><ellipse cx="3238" cy="1102.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="3247" y="1105.5151">rpad(int min_length, const String &amp; character = " ") const : String</text><ellipse cx="3238" cy="1115.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="3247" y="1118.3198">sprintf(const Array &amp; values, bool * error) const : String</text><ellipse cx="3238" cy="1127.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="3247" y="1131.1245">quote(String quotechar = "\"") const : String</text><ellipse cx="3238" cy="1140.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3247" y="1143.9292">unquote() const : String</text><ellipse cx="3238" cy="1153.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="3247" y="1156.7339">num(double p_num, int p_decimals = -1) : String</text><ellipse cx="3238" cy="1166.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="3247" y="1169.5386">num_scientific(double p_num) : String</text><ellipse cx="3238" cy="1179.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="3247" y="1182.3433">num_real(double p_num) : String</text><ellipse cx="3238" cy="1191.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="437" x="3247" y="1195.1479">num_int64(int64_t p_num, int base = 10, bool capitalize_hex = false) : String</text><ellipse cx="3238" cy="1204.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="451" x="3247" y="1207.9526">num_uint64(uint64_t p_num, int base = 10, bool capitalize_hex = false) : String</text><ellipse cx="3238" cy="1217.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="168" x="3247" y="1220.7573">chr(CharType p_char) : String</text><ellipse cx="3238" cy="1230.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="204" x="3247" y="1233.562">md5(const uint8_t * p_md5) : String</text><ellipse cx="3238" cy="1243.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="351" x="3247" y="1246.3667">hex_encode_buffer(const uint8_t * p_buffer, int p_len) : String</text><ellipse cx="3238" cy="1255.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3247" y="1259.1714">is_numeric() const : bool</text><ellipse cx="3238" cy="1268.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3247" y="1271.9761">to_double() const : double</text><ellipse cx="3238" cy="1281.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3247" y="1284.7808">to_float() const : float</text><ellipse cx="3238" cy="1294.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="3247" y="1297.5854">hex_to_int(bool p_with_prefix = true) const : int</text><ellipse cx="3238" cy="1307.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3247" y="1310.3901">to_int() const : int</text><ellipse cx="3238" cy="1319.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="3247" y="1323.1948">hex_to_int64(bool p_with_prefix = true) const : int64_t</text><ellipse cx="3238" cy="1332.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="3247" y="1335.9995">bin_to_int64(bool p_with_prefix = true) const : int64_t</text><ellipse cx="3238" cy="1345.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3247" y="1348.8042">to_int64() const : int64_t</text><ellipse cx="3238" cy="1358.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="252" x="3247" y="1361.6089">to_int(const char * p_str, int p_len = -1) : int</text><ellipse cx="3238" cy="1371.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="216" x="3247" y="1374.4136">to_double(const char * p_str) : double</text><ellipse cx="3238" cy="1384.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="443" x="3247" y="1387.2183">to_double(const CharType * p_str, const CharType ** r_end = __null) : double</text><ellipse cx="3238" cy="1396.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="305" x="3247" y="1400.0229">to_int(const CharType * p_str, int p_len = -1) : int64_t</text><ellipse cx="3238" cy="1409.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3247" y="1412.8276">capitalize() const : String</text><ellipse cx="3238" cy="1422.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="3247" y="1425.6323">camelcase_to_underscore(bool lowercase = true) const : String</text><ellipse cx="3238" cy="1435.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="3247" y="1438.437">get_slice_count(String p_splitter) const : int</text><ellipse cx="3238" cy="1448.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="3247" y="1451.2417">get_slice(String p_splitter, int p_slice) const : String</text><ellipse cx="3238" cy="1460.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="3247" y="1464.0464">get_slicec(CharType p_splitter, int p_slice) const : String</text><ellipse cx="3238" cy="1473.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="3247" y="1476.8511">split(const String &amp; p_splitter, bool p_allow_empty = true, int p_maxsplit = 0) const : Vector&lt;String&gt;</text><ellipse cx="3238" cy="1486.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="582" x="3247" y="1489.6558">rsplit(const String &amp; p_splitter, bool p_allow_empty = true, int p_maxsplit = 0) const : Vector&lt;String&gt;</text><ellipse cx="3238" cy="1499.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3247" y="1502.4604">split_spaces() const : Vector&lt;String&gt;</text><ellipse cx="3238" cy="1512.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="3247" y="1515.2651">split_floats(const String &amp; p_splitter, bool p_allow_empty = true) const : Vector&lt;float&gt;</text><ellipse cx="3238" cy="1524.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="579" x="3247" y="1528.0698">split_floats_mk(const Vector&lt;String&gt; &amp; p_splitters, bool p_allow_empty = true) const : Vector&lt;float&gt;</text><ellipse cx="3238" cy="1537.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="3247" y="1540.8745">split_ints(const String &amp; p_splitter, bool p_allow_empty = true) const : Vector&lt;int&gt;</text><ellipse cx="3238" cy="1550.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="3247" y="1553.6792">split_ints_mk(const Vector&lt;String&gt; &amp; p_splitters, bool p_allow_empty = true) const : Vector&lt;int&gt;</text><ellipse cx="3238" cy="1563.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3247" y="1566.4839">join(Vector&lt;String&gt; parts) : String</text><ellipse cx="3238" cy="1576.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="261" x="3247" y="1579.2886">char_uppercase(CharType p_char) : CharType</text><ellipse cx="3238" cy="1588.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="259" x="3247" y="1592.0933">char_lowercase(CharType p_char) : CharType</text><ellipse cx="3238" cy="1601.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3247" y="1604.8979">to_upper() const : String</text><ellipse cx="3238" cy="1614.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3247" y="1617.7026">to_lower() const : String</text><ellipse cx="3238" cy="1627.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="397" x="3247" y="1630.5073">count(const String &amp; p_string, int p_from = 0, int p_to = 0) const : int</text><ellipse cx="3238" cy="1640.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="404" x="3247" y="1643.312">countn(const String &amp; p_string, int p_from = 0, int p_to = 0) const : int</text><ellipse cx="3238" cy="1652.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3247" y="1656.1167">left(int p_pos) const : String</text><ellipse cx="3238" cy="1665.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="3247" y="1668.9214">right(int p_pos) const : String</text><ellipse cx="3238" cy="1678.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3247" y="1681.7261">dedent() const : String</text><ellipse cx="3238" cy="1691.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="3247" y="1694.5308">strip_edges(bool left = true, bool right = true) const : String</text><ellipse cx="3238" cy="1704.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3247" y="1707.3354">strip_escapes() const : String</text><ellipse cx="3238" cy="1716.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3247" y="1720.1401">lstrip(const String &amp; p_chars) const : String</text><ellipse cx="3238" cy="1729.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="3247" y="1732.9448">rstrip(const String &amp; p_chars) const : String</text><ellipse cx="3238" cy="1742.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3247" y="1745.7495">get_extension() const : String</text><ellipse cx="3238" cy="1755.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="3247" y="1758.5542">get_basename() const : String</text><ellipse cx="3238" cy="1768.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="3247" y="1771.3589">plus_file(const String &amp; p_file) const : String</text><ellipse cx="3238" cy="1780.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3247" y="1784.1636">ord_at(int p_idx) const : CharType</text><ellipse cx="3238" cy="1793.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3247" y="1796.9683">erase(int p_pos, int p_chars) : void</text><ellipse cx="3238" cy="1806.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="3247" y="1809.7729">ascii(bool p_allow_extended = false) const : CharString</text><ellipse cx="3238" cy="1819.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3247" y="1822.5776">utf8() const : CharString</text><ellipse cx="3238" cy="1832.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="3247" y="1835.3823">parse_utf8(const char * p_utf8, int p_len = -1) : bool</text><ellipse cx="3238" cy="1844.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="269" x="3247" y="1848.187">utf8(const char * p_utf8, int p_len = -1) : String</text><ellipse cx="3238" cy="1857.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="287" x="3247" y="1860.9917">hash(const CharType * p_cstr, int p_len) : uint32_t</text><ellipse cx="3238" cy="1870.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="231" x="3247" y="1873.7964">hash(const CharType * p_cstr) : uint32_t</text><ellipse cx="3238" cy="1883.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="3247" y="1886.6011">hash(const char * p_cstr, int p_len) : uint32_t</text><ellipse cx="3238" cy="1896.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="202" x="3247" y="1899.4058">hash(const char * p_cstr) : uint32_t</text><ellipse cx="3238" cy="1909" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3247" y="1912.2104">hash() const : uint32_t</text><ellipse cx="3238" cy="1921.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3247" y="1925.0151">hash64() const : uint64_t</text><ellipse cx="3238" cy="1934.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3247" y="1937.8198">md5_text() const : String</text><ellipse cx="3238" cy="1947.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3247" y="1950.6245">sha1_text() const : String</text><ellipse cx="3238" cy="1960.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3247" y="1963.4292">sha256_text() const : String</text><ellipse cx="3238" cy="1973.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3247" y="1976.2339">md5_buffer() const : Vector&lt;uint8_t&gt;</text><ellipse cx="3238" cy="1985.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="3247" y="1989.0386">sha1_buffer() const : Vector&lt;uint8_t&gt;</text><ellipse cx="3238" cy="1998.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="3247" y="2001.8433">sha256_buffer() const : Vector&lt;uint8_t&gt;</text><ellipse cx="3238" cy="2011.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3247" y="2014.6479">empty() const : bool</text><ellipse cx="3238" cy="2024.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3247" y="2027.4526">is_abs_path() const : bool</text><ellipse cx="3238" cy="2037.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3247" y="2040.2573">is_rel_path() const : bool</text><ellipse cx="3238" cy="2049.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3247" y="2053.062">is_resource_file() const : bool</text><ellipse cx="3238" cy="2062.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="3247" y="2065.8667">path_to(const String &amp; p_path) const : String</text><ellipse cx="3238" cy="2075.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="3247" y="2078.6714">path_to_file(const String &amp; p_path) const : String</text><ellipse cx="3238" cy="2088.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="3247" y="2091.4761">get_base_dir() const : String</text><ellipse cx="3238" cy="2101.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3247" y="2104.2808">get_file() const : String</text><ellipse cx="3238" cy="2113.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="220" x="3247" y="2117.0854">humanize_size(uint64_t p_size) : String</text><ellipse cx="3238" cy="2126.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="3247" y="2129.8901">simplify_path() const : String</text><ellipse cx="3238" cy="2139.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="3247" y="2142.6948">xml_escape(bool p_escape_quotes = false) const : String</text><ellipse cx="3238" cy="2152.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3247" y="2155.4995">xml_unescape() const : String</text><ellipse cx="3238" cy="2165.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3247" y="2168.3042">http_escape() const : String</text><ellipse cx="3238" cy="2177.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="3247" y="2181.1089">http_unescape() const : String</text><ellipse cx="3238" cy="2190.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3247" y="2193.9136">c_escape() const : String</text><ellipse cx="3238" cy="2203.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3247" y="2206.7183">c_escape_multiline() const : String</text><ellipse cx="3238" cy="2216.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="3247" y="2219.5229">c_unescape() const : String</text><ellipse cx="3238" cy="2229.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3247" y="2232.3276">json_escape() const : String</text><ellipse cx="3238" cy="2241.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="3247" y="2245.1323">word_wrap(int p_chars_per_line) const : String</text><ellipse cx="3238" cy="2254.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="3247" y="2257.937">parse_url(String &amp; r_scheme, String &amp; r_host, int &amp; r_port, String &amp; r_path) const : Error</text><ellipse cx="3238" cy="2267.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3247" y="2270.7417">percent_encode() const : String</text><ellipse cx="3238" cy="2280.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3247" y="2283.5464">percent_decode() const : String</text><ellipse cx="3238" cy="2293.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3247" y="2296.3511">property_name_encode() const : String</text><ellipse cx="3238" cy="2305.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3247" y="2309.1558">validate_node_name() const : String</text><ellipse cx="3238" cy="2318.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="3247" y="2321.9604">is_valid_identifier() const : bool</text><ellipse cx="3238" cy="2331.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="3247" y="2334.7651">is_valid_integer() const : bool</text><ellipse cx="3238" cy="2344.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3247" y="2347.5698">is_valid_float() const : bool</text><ellipse cx="3238" cy="2357.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="3247" y="2360.3745">is_valid_hex_number(bool p_with_prefix) const : bool</text><ellipse cx="3238" cy="2369.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="3247" y="2373.1792">is_valid_html_color() const : bool</text><ellipse cx="3238" cy="2382.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3247" y="2385.9839">is_valid_ip_address() const : bool</text><ellipse cx="3238" cy="2395.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3247" y="2398.7886">is_valid_filename() const : bool</text><ellipse cx="3238" cy="2408.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="3247" y="2411.5933">String() : void</text><ellipse cx="3238" cy="2421.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3247" y="2424.3979">String(const String &amp; p_str) : void</text><ellipse cx="3238" cy="2433.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="3247" y="2437.2026">operator=(const String &amp; p_str) : String</text><ellipse cx="3238" cy="2446.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="3247" y="2450.0073">String(const char * p_str) : void</text><ellipse cx="3238" cy="2459.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="3247" y="2462.812">String(const CharType * p_str, int p_clip_to_len = -1) : void</text><ellipse cx="3238" cy="2472.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="3247" y="2475.6167">String(const StrRange &amp; p_range) : void</text><!--MD5=[8fa627e1efcccdd4a5cadae89d2de99a]
class C_0000053309527800613276--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L39" target="_top" title="Vector2" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L39" xlink:show="new" xlink:title="Vector2" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="854.6953" id="C_0000053309527800613276" style="stroke: #A80036; stroke-width: 1.5;" width="734" x="6046" y="3908.9531"/><ellipse cx="6384.25" cy="3924.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6387.2188,3930.5938 Q6386.6406,3930.8906 6386,3931.0313 Q6385.3594,3931.1875 6384.6563,3931.1875 Q6382.1563,3931.1875 6380.8281,3929.5469 Q6379.5156,3927.8906 6379.5156,3924.7656 Q6379.5156,3921.6406 6380.8281,3919.9844 Q6382.1563,3918.3281 6384.6563,3918.3281 Q6385.3594,3918.3281 6386,3918.4844 Q6386.6563,3918.6406 6387.2188,3918.9375 L6387.2188,3921.6563 Q6386.5938,3921.0781 6386,3920.8125 Q6385.4063,3920.5313 6384.7813,3920.5313 Q6383.4375,3920.5313 6382.75,3921.6094 Q6382.0625,3922.6719 6382.0625,3924.7656 Q6382.0625,3926.8594 6382.75,3927.9375 Q6383.4375,3929 6384.7813,3929 Q6385.4063,3929 6386,3928.7344 Q6386.5938,3928.4531 6387.2188,3927.875 L6387.2188,3930.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="6404.75" y="3929.1074">Vector2</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6047" x2="6779" y1="3940.9531" y2="3940.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6047" x2="6779" y1="3948.9531" y2="3948.9531"/><ellipse cx="6057" cy="3959.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="6066" y="3963.1636">operator[](int p_idx) : real_t &amp;</text><ellipse cx="6057" cy="3972.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="6066" y="3975.9683">operator[](int p_idx) const : const real_t &amp;</text><ellipse cx="6057" cy="3985.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="6066" y="3988.7729">normalize() : void</text><ellipse cx="6057" cy="3998.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="6066" y="4001.5776">normalized() const : Vector2</text><ellipse cx="6057" cy="4011.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="6066" y="4014.3823">is_normalized() const : bool</text><ellipse cx="6057" cy="4023.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="6066" y="4027.187">length() const : real_t</text><ellipse cx="6057" cy="4036.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="6066" y="4039.9917">length_squared() const : real_t</text><ellipse cx="6057" cy="4049.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="6066" y="4052.7964">distance_to(const Vector2 &amp; p_vector2) const : real_t</text><ellipse cx="6057" cy="4062.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="6066" y="4065.6011">distance_squared_to(const Vector2 &amp; p_vector2) const : real_t</text><ellipse cx="6057" cy="4075.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="6066" y="4078.4058">angle_to(const Vector2 &amp; p_vector2) const : real_t</text><ellipse cx="6057" cy="4088" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="6066" y="4091.2104">angle_to_point(const Vector2 &amp; p_vector2) const : real_t</text><ellipse cx="6057" cy="4100.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="6066" y="4104.0151">direction_to(const Vector2 &amp; p_to) const : Vector2</text><ellipse cx="6057" cy="4113.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="6066" y="4116.8198">dot(const Vector2 &amp; p_other) const : real_t</text><ellipse cx="6057" cy="4126.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="6066" y="4129.6245">cross(const Vector2 &amp; p_other) const : real_t</text><ellipse cx="6057" cy="4139.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="6066" y="4142.4292">posmod(const real_t p_mod) const : Vector2</text><ellipse cx="6057" cy="4152.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="6066" y="4155.2339">posmodv(const Vector2 &amp; p_modv) const : Vector2</text><ellipse cx="6057" cy="4164.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="6066" y="4168.0386">project(const Vector2 &amp; p_to) const : Vector2</text><ellipse cx="6057" cy="4177.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="6066" y="4180.8433">plane_project(real_t p_d, const Vector2 &amp; p_vec) const : Vector2</text><ellipse cx="6057" cy="4190.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="6066" y="4193.6479">clamped(real_t p_len) const : Vector2</text><ellipse cx="6057" cy="4203.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="496" x="6066" y="4206.4526">linear_interpolate(const Vector2 &amp; p_a, const Vector2 &amp; p_b, real_t p_weight) : Vector2</text><ellipse cx="6057" cy="4216.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="6066" y="4219.2573">linear_interpolate(const Vector2 &amp; p_to, real_t p_weight) const : Vector2</text><ellipse cx="6057" cy="4228.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="6066" y="4232.062">slerp(const Vector2 &amp; p_to, real_t p_weight) const : Vector2</text><ellipse cx="6057" cy="4241.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="708" x="6066" y="4244.8667">cubic_interpolate(const Vector2 &amp; p_b, const Vector2 &amp; p_pre_a, const Vector2 &amp; p_post_b, real_t p_weight) const : Vector2</text><ellipse cx="6057" cy="4254.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="6066" y="4257.6714">move_toward(const Vector2 &amp; p_to, const real_t p_delta) const : Vector2</text><ellipse cx="6057" cy="4267.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="6066" y="4270.4761">slide(const Vector2 &amp; p_normal) const : Vector2</text><ellipse cx="6057" cy="4280.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="6066" y="4283.2808">bounce(const Vector2 &amp; p_normal) const : Vector2</text><ellipse cx="6057" cy="4292.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="6066" y="4296.0854">reflect(const Vector2 &amp; p_normal) const : Vector2</text><ellipse cx="6057" cy="4305.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="6066" y="4308.8901">is_equal_approx(const Vector2 &amp; p_v) const : bool</text><ellipse cx="6057" cy="4318.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6066" y="4321.6948">operator+(const Vector2 &amp; p_v) const : Vector2</text><ellipse cx="6057" cy="4331.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="6066" y="4334.4995">operator+=(const Vector2 &amp; p_v) : void</text><ellipse cx="6057" cy="4344.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="6066" y="4347.3042">operator-(const Vector2 &amp; p_v) const : Vector2</text><ellipse cx="6057" cy="4356.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="6066" y="4360.1089">operator-=(const Vector2 &amp; p_v) : void</text><ellipse cx="6057" cy="4369.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6066" y="4372.9136">operator*(const Vector2 &amp; p_v1) const : Vector2</text><ellipse cx="6057" cy="4382.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="6066" y="4385.7183">operator*(const real_t &amp; rvalue) const : Vector2</text><ellipse cx="6057" cy="4395.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="6066" y="4398.5229">operator*=(const real_t &amp; rvalue) : void</text><ellipse cx="6057" cy="4408.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="6066" y="4411.3276">operator*=(const Vector2 &amp; rvalue) : void</text><ellipse cx="6057" cy="4420.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="6066" y="4424.1323">operator/(const Vector2 &amp; p_v1) const : Vector2</text><ellipse cx="6057" cy="4433.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6066" y="4436.937">operator/(const real_t &amp; rvalue) const : Vector2</text><ellipse cx="6057" cy="4446.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="6066" y="4449.7417">operator/=(const real_t &amp; rvalue) : void</text><ellipse cx="6057" cy="4459.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="6066" y="4462.5464">operator/=(const Vector2 &amp; rvalue) : void</text><ellipse cx="6057" cy="4472.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="6066" y="4475.3511">operator-() const : Vector2</text><ellipse cx="6057" cy="4484.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="6066" y="4488.1558">operator==(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4497.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6066" y="4500.9604">operator!=(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4510.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="6066" y="4513.7651">operator&lt;(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4523.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="6066" y="4526.5698">operator&gt;(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4536.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="6066" y="4539.3745">operator&lt;=(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4548.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="6066" y="4552.1792">operator&gt;=(const Vector2 &amp; p_vec2) const : bool</text><ellipse cx="6057" cy="4561.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="6066" y="4564.9839">angle() const : real_t</text><ellipse cx="6057" cy="4574.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="6066" y="4577.7886">set_rotation(real_t p_radians) : void</text><ellipse cx="6057" cy="4587.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="6066" y="4590.5933">abs() const : Vector2</text><ellipse cx="6057" cy="4600.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="6066" y="4603.3979">rotated(real_t p_by) const : Vector2</text><ellipse cx="6057" cy="4612.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="6066" y="4616.2026">tangent() const : Vector2</text><ellipse cx="6057" cy="4625.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="6066" y="4629.0073">sign() const : Vector2</text><ellipse cx="6057" cy="4638.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="6066" y="4641.812">floor() const : Vector2</text><ellipse cx="6057" cy="4651.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="6066" y="4654.6167">ceil() const : Vector2</text><ellipse cx="6057" cy="4664.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="6066" y="4667.4214">round() const : Vector2</text><ellipse cx="6057" cy="4677.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="6066" y="4680.2261">snapped(const Vector2 &amp; p_by) const : Vector2</text><ellipse cx="6057" cy="4689.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="6066" y="4693.0308">aspect() const : real_t</text><ellipse cx="6057" cy="4702.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="6066" y="4705.8354">operator String() const : String</text><ellipse cx="6057" cy="4715.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="6066" y="4718.6401">Vector2(real_t p_x, real_t p_y) : void</text><ellipse cx="6057" cy="4728.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="6066" y="4731.4448">Vector2() : void</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L46" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L46" xlink:show="new" xlink:title="" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6052" y="4736.0391"/><ellipse cx="6057" cy="4741.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L46" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L46" xlink:show="new" xlink:title="" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="6066" y="4744.2495">: Vector2::(anonymous union at ./core/math/vector2.h:46:2)</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L50" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L50" xlink:show="new" xlink:title="" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6052" y="4748.8438"/><ellipse cx="6057" cy="4753.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L50" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L50" xlink:show="new" xlink:title="" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="6066" y="4757.0542">: Vector2::(anonymous union at ./core/math/vector2.h:50:2)</text></a><!--MD5=[95596f2698764ec5ce873d557d6d762a]
class C_0000300688871447362916--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L38" target="_top" title="Rect2" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L38" xlink:show="new" xlink:title="Rect2" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="419.3359" id="C_0000300688871447362916" style="stroke: #A80036; stroke-width: 1.5;" width="761" x="4373.5" y="4069.9531"/><ellipse cx="4731.75" cy="4085.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4734.7188,4091.5938 Q4734.1406,4091.8906 4733.5,4092.0313 Q4732.8594,4092.1875 4732.1563,4092.1875 Q4729.6563,4092.1875 4728.3281,4090.5469 Q4727.0156,4088.8906 4727.0156,4085.7656 Q4727.0156,4082.6406 4728.3281,4080.9844 Q4729.6563,4079.3281 4732.1563,4079.3281 Q4732.8594,4079.3281 4733.5,4079.4844 Q4734.1563,4079.6406 4734.7188,4079.9375 L4734.7188,4082.6563 Q4734.0938,4082.0781 4733.5,4081.8125 Q4732.9063,4081.5313 4732.2813,4081.5313 Q4730.9375,4081.5313 4730.25,4082.6094 Q4729.5625,4083.6719 4729.5625,4085.7656 Q4729.5625,4087.8594 4730.25,4088.9375 Q4730.9375,4090 4732.2813,4090 Q4732.9063,4090 4733.5,4089.7344 Q4734.0938,4089.4531 4734.7188,4088.875 L4734.7188,4091.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="36" x="4752.25" y="4090.1074">Rect2</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4374.5" x2="5133.5" y1="4101.9531" y2="4101.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L40" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L40" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4379.5" y="4107.9531"/><ellipse cx="4384.5" cy="4112.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L40" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L40" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="4393.5" y="4116.1636">position : Point2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L41" target="_top" title="size" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L41" xlink:show="new" xlink:title="size" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4379.5" y="4120.7578"/><ellipse cx="4384.5" cy="4125.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L41" target="_top" title="size" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L41" xlink:show="new" xlink:title="size" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="4393.5" y="4128.9683">size : Size2</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4374.5" x2="5133.5" y1="4135.5625" y2="4135.5625"/><ellipse cx="4384.5" cy="4146.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="4393.5" y="4149.7729">get_position() const : const Vector2 &amp;</text><ellipse cx="4384.5" cy="4159.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="4393.5" y="4162.5776">set_position(const Vector2 &amp; p_pos) : void</text><ellipse cx="4384.5" cy="4172.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="4393.5" y="4175.3823">get_size() const : const Vector2 &amp;</text><ellipse cx="4384.5" cy="4184.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="4393.5" y="4188.187">set_size(const Vector2 &amp; p_size) : void</text><ellipse cx="4384.5" cy="4197.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="4393.5" y="4200.9917">get_area() const : real_t</text><ellipse cx="4384.5" cy="4210.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="475" x="4393.5" y="4213.7964">intersects(const Rect2 &amp; p_rect, const bool p_include_borders = false) const : bool</text><ellipse cx="4384.5" cy="4223.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="4393.5" y="4226.6011">distance_to(const Vector2 &amp; p_point) const : real_t</text><ellipse cx="4384.5" cy="4236.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="4393.5" y="4239.4058">intersects_transformed(const Transform2D &amp; p_xform, const Rect2 &amp; p_rect) const : bool</text><ellipse cx="4384.5" cy="4249" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="735" x="4393.5" y="4252.2104">intersects_segment(const Point2 &amp; p_from, const Point2 &amp; p_to, Point2 * r_pos = __null, Point2 * r_normal = __null) const : bool</text><ellipse cx="4384.5" cy="4261.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="4393.5" y="4265.0151">encloses(const Rect2 &amp; p_rect) const : bool</text><ellipse cx="4384.5" cy="4274.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="4393.5" y="4277.8198">has_no_area() const : bool</text><ellipse cx="4384.5" cy="4287.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="4393.5" y="4290.6245">clip(const Rect2 &amp; p_rect) const : Rect2</text><ellipse cx="4384.5" cy="4300.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="4393.5" y="4303.4292">merge(const Rect2 &amp; p_rect) const : Rect2</text><ellipse cx="4384.5" cy="4313.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="4393.5" y="4316.2339">has_point(const Point2 &amp; p_point) const : bool</text><ellipse cx="4384.5" cy="4325.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="4393.5" y="4329.0386">is_equal_approx(const Rect2 &amp; p_rect) const : bool</text><ellipse cx="4384.5" cy="4338.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="4393.5" y="4341.8433">operator==(const Rect2 &amp; p_rect) const : bool</text><ellipse cx="4384.5" cy="4351.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="4393.5" y="4354.6479">operator!=(const Rect2 &amp; p_rect) const : bool</text><ellipse cx="4384.5" cy="4364.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4393.5" y="4367.4526">grow(real_t p_by) const : Rect2</text><ellipse cx="4384.5" cy="4377.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="4393.5" y="4380.2573">grow_margin(Margin p_margin, real_t p_amount) const : Rect2</text><ellipse cx="4384.5" cy="4389.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="4393.5" y="4393.062">grow_individual(real_t p_left, real_t p_top, real_t p_right, real_t p_bottom) const : Rect2</text><ellipse cx="4384.5" cy="4402.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4393.5" y="4405.8667">expand(const Vector2 &amp; p_vector) const : Rect2</text><ellipse cx="4384.5" cy="4415.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="4393.5" y="4418.6714">expand_to(const Vector2 &amp; p_vector) : void</text><ellipse cx="4384.5" cy="4428.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="4393.5" y="4431.4761">abs() const : Rect2</text><ellipse cx="4384.5" cy="4441.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4393.5" y="4444.2808">operator String() const : String</text><ellipse cx="4384.5" cy="4453.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="4393.5" y="4457.0854">Rect2() : void</text><ellipse cx="4384.5" cy="4466.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="4393.5" y="4469.8901">Rect2(real_t p_x, real_t p_y, real_t p_width, real_t p_height) : void</text><ellipse cx="4384.5" cy="4479.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="4393.5" y="4482.6948">Rect2(const Point2 &amp; p_pos, const Size2 &amp; p_size) : void</text><!--MD5=[ab7e3a949030d623a36ad5df74e79d00]
class C_0001296138246691404804--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L37" target="_top" title="Transform2D" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L37" xlink:show="new" xlink:title="Transform2D" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="675.4297" id="C_0001296138246691404804" style="stroke: #A80036; stroke-width: 1.5;" width="507" x="4500.5" y="4611.9531"/><ellipse cx="4709.75" cy="4627.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4712.7188,4633.5938 Q4712.1406,4633.8906 4711.5,4634.0313 Q4710.8594,4634.1875 4710.1563,4634.1875 Q4707.6563,4634.1875 4706.3281,4632.5469 Q4705.0156,4630.8906 4705.0156,4627.7656 Q4705.0156,4624.6406 4706.3281,4622.9844 Q4707.6563,4621.3281 4710.1563,4621.3281 Q4710.8594,4621.3281 4711.5,4621.4844 Q4712.1563,4621.6406 4712.7188,4621.9375 L4712.7188,4624.6563 Q4712.0938,4624.0781 4711.5,4623.8125 Q4710.9063,4623.5313 4710.2813,4623.5313 Q4708.9375,4623.5313 4708.25,4624.6094 Q4707.5625,4625.6719 4707.5625,4627.7656 Q4707.5625,4629.8594 4708.25,4630.9375 Q4708.9375,4632 4710.2813,4632 Q4710.9063,4632 4711.5,4631.7344 Q4712.0938,4631.4531 4712.7188,4630.875 L4712.7188,4633.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="4730.25" y="4632.1074">Transform2D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4501.5" x2="5006.5" y1="4643.9531" y2="4643.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L49" target="_top" title="elements" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L49" xlink:show="new" xlink:title="elements" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4506.5" y="4649.9531"/><ellipse cx="4511.5" cy="4654.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L49" target="_top" title="elements" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L49" xlink:show="new" xlink:title="elements" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="4520.5" y="4658.1636">elements : Vector2[3]</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4501.5" x2="5006.5" y1="4664.7578" y2="4664.7578"/><ellipse cx="4511.5" cy="4675.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="4520.5" y="4678.9683">tdotx(const Vector2 &amp; v) const : real_t</text><ellipse cx="4511.5" cy="4688.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="4520.5" y="4691.7729">tdoty(const Vector2 &amp; v) const : real_t</text><ellipse cx="4511.5" cy="4701.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="4520.5" y="4704.5776">operator[](int p_idx) const : const Vector2 &amp;</text><ellipse cx="4511.5" cy="4714.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="4520.5" y="4717.3823">operator[](int p_idx) : Vector2 &amp;</text><ellipse cx="4511.5" cy="4726.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="4520.5" y="4730.187">get_axis(int p_axis) const : Vector2</text><ellipse cx="4511.5" cy="4739.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="4520.5" y="4742.9917">set_axis(int p_axis, const Vector2 &amp; p_vec) : void</text><ellipse cx="4511.5" cy="4752.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="4520.5" y="4755.7964">invert() : void</text><ellipse cx="4511.5" cy="4765.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="4520.5" y="4768.6011">inverse() const : Transform2D</text><ellipse cx="4511.5" cy="4778.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="4520.5" y="4781.4058">affine_invert() : void</text><ellipse cx="4511.5" cy="4791" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="4520.5" y="4794.2104">affine_inverse() const : Transform2D</text><ellipse cx="4511.5" cy="4803.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4520.5" y="4807.0151">set_rotation(real_t p_rot) : void</text><ellipse cx="4511.5" cy="4816.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="4520.5" y="4819.8198">get_rotation() const : real_t</text><ellipse cx="4511.5" cy="4829.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="4520.5" y="4832.6245">set_rotation_and_scale(real_t p_rot, const Size2 &amp; p_scale) : void</text><ellipse cx="4511.5" cy="4842.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4520.5" y="4845.4292">rotate(real_t p_phi) : void</text><ellipse cx="4511.5" cy="4855.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="4520.5" y="4858.2339">scale(const Size2 &amp; p_scale) : void</text><ellipse cx="4511.5" cy="4867.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="4520.5" y="4871.0386">scale_basis(const Size2 &amp; p_scale) : void</text><ellipse cx="4511.5" cy="4880.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="4520.5" y="4883.8433">translate(real_t p_tx, real_t p_ty) : void</text><ellipse cx="4511.5" cy="4893.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4520.5" y="4896.6479">translate(const Vector2 &amp; p_translation) : void</text><ellipse cx="4511.5" cy="4906.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="4520.5" y="4909.4526">basis_determinant() const : real_t</text><ellipse cx="4511.5" cy="4919.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="4520.5" y="4922.2573">get_scale() const : Size2</text><ellipse cx="4511.5" cy="4931.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="4520.5" y="4935.062">set_scale(const Size2 &amp; p_scale) : void</text><ellipse cx="4511.5" cy="4944.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4520.5" y="4947.8667">get_origin() const : const Vector2 &amp;</text><ellipse cx="4511.5" cy="4957.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="4520.5" y="4960.6714">set_origin(const Vector2 &amp; p_origin) : void</text><ellipse cx="4511.5" cy="4970.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="4520.5" y="4973.4761">scaled(const Size2 &amp; p_scale) const : Transform2D</text><ellipse cx="4511.5" cy="4983.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="4520.5" y="4986.2808">basis_scaled(const Size2 &amp; p_scale) const : Transform2D</text><ellipse cx="4511.5" cy="4995.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="4520.5" y="4999.0854">translated(const Vector2 &amp; p_offset) const : Transform2D</text><ellipse cx="4511.5" cy="5008.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="4520.5" y="5011.8901">rotated(real_t p_phi) const : Transform2D</text><ellipse cx="4511.5" cy="5021.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="4520.5" y="5024.6948">untranslated() const : Transform2D</text><ellipse cx="4511.5" cy="5034.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="4520.5" y="5037.4995">orthonormalize() : void</text><ellipse cx="4511.5" cy="5047.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="4520.5" y="5050.3042">orthonormalized() const : Transform2D</text><ellipse cx="4511.5" cy="5059.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="4520.5" y="5063.1089">is_equal_approx(const Transform2D &amp; p_transform) const : bool</text><ellipse cx="4511.5" cy="5072.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="4520.5" y="5075.9136">operator==(const Transform2D &amp; p_transform) const : bool</text><ellipse cx="4511.5" cy="5085.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="4520.5" y="5088.7183">operator!=(const Transform2D &amp; p_transform) const : bool</text><ellipse cx="4511.5" cy="5098.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="4520.5" y="5101.5229">operator*=(const Transform2D &amp; p_transform) : void</text><ellipse cx="4511.5" cy="5111.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="383" x="4520.5" y="5114.3276">operator*(const Transform2D &amp; p_transform) const : Transform2D</text><ellipse cx="4511.5" cy="5123.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="481" x="4520.5" y="5127.1323">interpolate_with(const Transform2D &amp; p_transform, real_t p_c) const : Transform2D</text><ellipse cx="4511.5" cy="5136.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="4520.5" y="5139.937">basis_xform(const Vector2 &amp; p_vec) const : Vector2</text><ellipse cx="4511.5" cy="5149.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="4520.5" y="5152.7417">basis_xform_inv(const Vector2 &amp; p_vec) const : Vector2</text><ellipse cx="4511.5" cy="5162.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="4520.5" y="5165.5464">xform(const Vector2 &amp; p_vec) const : Vector2</text><ellipse cx="4511.5" cy="5175.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="4520.5" y="5178.3511">xform_inv(const Vector2 &amp; p_vec) const : Vector2</text><ellipse cx="4511.5" cy="5187.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="4520.5" y="5191.1558">xform(const Rect2 &amp; p_rect) const : Rect2</text><ellipse cx="4511.5" cy="5200.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="4520.5" y="5203.9604">xform_inv(const Rect2 &amp; p_rect) const : Rect2</text><ellipse cx="4511.5" cy="5213.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="4520.5" y="5216.7651">xform(const PoolVector&lt;Vector2&gt; &amp; p_array) const : PoolVector&lt;Vector2&gt;</text><ellipse cx="4511.5" cy="5226.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="4520.5" y="5229.5698">xform_inv(const PoolVector&lt;Vector2&gt; &amp; p_array) const : PoolVector&lt;Vector2&gt;</text><ellipse cx="4511.5" cy="5239.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4520.5" y="5242.3745">operator String() const : String</text><ellipse cx="4511.5" cy="5251.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="4520.5" y="5255.1792">Transform2D(real_t xx, real_t xy, real_t yx, real_t yy, real_t ox, real_t oy) : void</text><ellipse cx="4511.5" cy="5264.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="4520.5" y="5267.9839">Transform2D(real_t p_rot, const Vector2 &amp; p_pos) : void</text><ellipse cx="4511.5" cy="5277.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4520.5" y="5280.7886">Transform2D() : void</text><!--MD5=[c9ab0454be9bc9dd8cd0824f6bdde71d]
class C_0001299121424291583786--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" target="_top" title="Dictionary" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" xlink:show="new" xlink:title="Dictionary" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="432.1406" id="C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="521" y="4681.4531"/><ellipse cx="694.25" cy="4697.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M697.2188,4703.0938 Q696.6406,4703.3906 696,4703.5313 Q695.3594,4703.6875 694.6563,4703.6875 Q692.1563,4703.6875 690.8281,4702.0469 Q689.5156,4700.3906 689.5156,4697.2656 Q689.5156,4694.1406 690.8281,4692.4844 Q692.1563,4690.8281 694.6563,4690.8281 Q695.3594,4690.8281 696,4690.9844 Q696.6563,4691.1406 697.2188,4691.4375 L697.2188,4694.1563 Q696.5938,4693.5781 696,4693.3125 Q695.4063,4693.0313 694.7813,4693.0313 Q693.4375,4693.0313 692.75,4694.1094 Q692.0625,4695.1719 692.0625,4697.2656 Q692.0625,4699.3594 692.75,4700.4375 Q693.4375,4701.5 694.7813,4701.5 Q695.4063,4701.5 696,4701.2344 Q696.5938,4700.9531 697.2188,4700.375 L697.2188,4703.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="714.75" y="4701.6074">Dictionary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="522" x2="937" y1="4713.4531" y2="4713.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L44" target="_top" title="_p" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L44" xlink:show="new" xlink:title="_p" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="527" y="4719.4531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="529" y="4721.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L44" target="_top" title="_p" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L44" xlink:show="new" xlink:title="_p" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="541" y="4727.6636">_p : DictionaryPrivate *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="522" x2="937" y1="4734.2578" y2="4734.2578"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="529" y="4742.2578"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="541" y="4748.4683">_ref(const Dictionary &amp; p_from) const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="529" y="4755.0625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="541" y="4761.2729">_unref() const : void</text><ellipse cx="532" cy="4770.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="541" y="4774.0776">get_key_list(List&lt;Variant&gt; * p_keys) const : void</text><ellipse cx="532" cy="4783.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="541" y="4786.8823">get_key_at_index(int p_index) const : Variant</text><ellipse cx="532" cy="4796.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="541" y="4799.687">get_value_at_index(int p_index) const : Variant</text><ellipse cx="532" cy="4809.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="541" y="4812.4917">operator[](const Variant &amp; p_key) : Variant &amp;</text><ellipse cx="532" cy="4822.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="541" y="4825.2964">operator[](const Variant &amp; p_key) const : const Variant &amp;</text><ellipse cx="532" cy="4834.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="541" y="4838.1011">getptr(const Variant &amp; p_key) const : const Variant *</text><ellipse cx="532" cy="4847.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="541" y="4850.9058">getptr(const Variant &amp; p_key) : Variant *</text><ellipse cx="532" cy="4860.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="541" y="4863.7104">get_valid(const Variant &amp; p_key) const : Variant</text><ellipse cx="532" cy="4873.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="541" y="4876.5151">get(const Variant &amp; p_key, const Variant &amp; p_default) const : Variant</text><ellipse cx="532" cy="4886.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="541" y="4889.3198">size() const : int</text><ellipse cx="532" cy="4898.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="541" y="4902.1245">empty() const : bool</text><ellipse cx="532" cy="4911.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="541" y="4914.9292">clear() : void</text><ellipse cx="532" cy="4924.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="541" y="4927.7339">has(const Variant &amp; p_key) const : bool</text><ellipse cx="532" cy="4937.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="541" y="4940.5386">has_all(const Array &amp; p_keys) const : bool</text><ellipse cx="532" cy="4950.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="541" y="4953.3433">erase(const Variant &amp; p_key) : bool</text><ellipse cx="532" cy="4962.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="541" y="4966.1479">operator==(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="532" cy="4975.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="541" y="4978.9526">operator!=(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="532" cy="4988.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="541" y="4991.7573">hash() const : uint32_t</text><ellipse cx="532" cy="5001.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="541" y="5004.562">operator=(const Dictionary &amp; p_dictionary) : void</text><ellipse cx="532" cy="5014.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="541" y="5017.3667">next(const Variant * p_key = __null) const : const Variant *</text><ellipse cx="532" cy="5026.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="541" y="5030.1714">keys() const : Array</text><ellipse cx="532" cy="5039.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="541" y="5042.9761">values() const : Array</text><ellipse cx="532" cy="5052.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="541" y="5055.7808">duplicate(bool p_deep = false) const : Dictionary</text><ellipse cx="532" cy="5065.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="541" y="5068.5854">id() const : const void *</text><ellipse cx="532" cy="5078.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="541" y="5081.3901">Dictionary(const Dictionary &amp; p_from) : void</text><ellipse cx="532" cy="5090.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="541" y="5094.1948">Dictionary() : void</text><ellipse cx="532" cy="5103.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="541" y="5106.9995">~Dictionary() : void</text><!--MD5=[bdf481e0258441d9ea4c4f618bd16c94]
class C_0001858199404643284193--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" target="_top" title="StringName" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" xlink:show="new" xlink:title="StringName" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="444.9453" id="C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.5;" width="346" x="6240" y="3100.9531"/><ellipse cx="6372.25" cy="3116.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6375.2188,3122.5938 Q6374.6406,3122.8906 6374,3123.0313 Q6373.3594,3123.1875 6372.6563,3123.1875 Q6370.1563,3123.1875 6368.8281,3121.5469 Q6367.5156,3119.8906 6367.5156,3116.7656 Q6367.5156,3113.6406 6368.8281,3111.9844 Q6370.1563,3110.3281 6372.6563,3110.3281 Q6373.3594,3110.3281 6374,3110.4844 Q6374.6563,3110.6406 6375.2188,3110.9375 L6375.2188,3113.6563 Q6374.5938,3113.0781 6374,3112.8125 Q6373.4063,3112.5313 6372.7813,3112.5313 Q6371.4375,3112.5313 6370.75,3113.6094 Q6370.0625,3114.6719 6370.0625,3116.7656 Q6370.0625,3118.8594 6370.75,3119.9375 Q6371.4375,3121 6372.7813,3121 Q6373.4063,3121 6374,3120.7344 Q6374.5938,3120.4531 6375.2188,3119.875 L6375.2188,3122.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="6392.75" y="3121.1074">StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6241" x2="6585" y1="3132.9531" y2="3132.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L73" target="_top" title="_data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L73" xlink:show="new" xlink:title="_data" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6246" y="3138.9531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3140.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L73" target="_top" title="_data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L73" xlink:show="new" xlink:title="_data" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="6260" y="3147.1636">_data : StringName::_Data *</text></a><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3153.7578"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="6260" y="3159.9683">STRING_TABLE_BITS : enum</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3166.5625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="6260" y="3172.7729">STRING_TABLE_LEN : enum</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3179.3672"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="6260" y="3185.5776">STRING_TABLE_MASK : enum</text><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L71" target="_top" title="_table" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L71" xlink:show="new" xlink:title="_table" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6246" y="3190.1719"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3192.1719"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L71" target="_top" title="_table" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L71" xlink:show="new" xlink:title="_table" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="199" x="6260" y="3198.3823">_table : StringName::_Data *[4096]</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L85" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L85" xlink:show="new" xlink:title="lock" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6246" y="3202.9766"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3204.9766"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L85" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L85" xlink:show="new" xlink:title="lock" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="67" x="6260" y="3211.187">lock : Mutex</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L88" target="_top" title="configured" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L88" xlink:show="new" xlink:title="configured" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6246" y="3215.7813"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3217.7813"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L88" target="_top" title="configured" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L88" xlink:show="new" xlink:title="configured" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="96" x="6260" y="3223.9917">configured : bool</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="6241" x2="6585" y1="3230.5859" y2="3230.5859"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3238.5859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="6260" y="3244.7964">unref() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3251.3906"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="75" x="6260" y="3257.6011">setup() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3264.1953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="6260" y="3270.4058">cleanup() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6248" y="3277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="6260" y="3283.2104">StringName(StringName::_Data * p_data) : void</text><ellipse cx="6251" cy="3292.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="6260" y="3296.0151">operator const void *() const : const void *</text><ellipse cx="6251" cy="3305.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="6260" y="3308.8198">operator==(const String &amp; p_name) const : bool</text><ellipse cx="6251" cy="3318.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="6260" y="3321.6245">operator==(const char * p_name) const : bool</text><ellipse cx="6251" cy="3331.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="6260" y="3334.4292">operator!=(const String &amp; p_name) const : bool</text><ellipse cx="6251" cy="3344.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="6260" y="3347.2339">operator&lt;(const StringName &amp; p_name) const : bool</text><ellipse cx="6251" cy="3356.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="6260" y="3360.0386">operator==(const StringName &amp; p_name) const : bool</text><ellipse cx="6251" cy="3369.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="6260" y="3372.8433">hash() const : uint32_t</text><ellipse cx="6251" cy="3382.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="6260" y="3385.6479">data_unique_pointer() const : const void *</text><ellipse cx="6251" cy="3395.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="6260" y="3398.4526">operator!=(const StringName &amp; p_name) const : bool</text><ellipse cx="6251" cy="3408.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="6260" y="3411.2573">operator String() const : String</text><ellipse cx="6251" cy="3420.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="245" x="6260" y="3424.062">search(const char * p_name) : StringName</text><ellipse cx="6251" cy="3433.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="6260" y="3436.8667">search(const CharType * p_name) : StringName</text><ellipse cx="6251" cy="3446.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="6260" y="3449.6714">search(const String &amp; p_name) : StringName</text><ellipse cx="6251" cy="3459.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="6260" y="3462.4761">operator=(const StringName &amp; p_name) : void</text><ellipse cx="6251" cy="3472.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="6260" y="3475.2808">StringName(const char * p_name) : void</text><ellipse cx="6251" cy="3484.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6260" y="3488.0854">StringName(const StringName &amp; p_name) : void</text><ellipse cx="6251" cy="3497.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="6260" y="3500.8901">StringName(const String &amp; p_name) : void</text><ellipse cx="6251" cy="3510.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="6260" y="3513.6948">StringName(const StaticCString &amp; p_static_string) : void</text><ellipse cx="6251" cy="3523.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="6260" y="3526.4995">StringName() : void</text><ellipse cx="6251" cy="3536.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="6260" y="3539.3042">~StringName() : void</text><!--MD5=[a4093d4f9ea5ea0f34ea630196a7906a]
class C_0000788782266645010446--><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="48" id="C_0000788782266645010446" style="stroke: #A80036; stroke-width: 1.5;" width="134" x="662.5" y="5148.4531"/><ellipse cx="677.5" cy="5164.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M680.4688,5170.0938 Q679.8906,5170.3906 679.25,5170.5313 Q678.6094,5170.6875 677.9063,5170.6875 Q675.4063,5170.6875 674.0781,5169.0469 Q672.7656,5167.3906 672.7656,5164.2656 Q672.7656,5161.1406 674.0781,5159.4844 Q675.4063,5157.8281 677.9063,5157.8281 Q678.6094,5157.8281 679.25,5157.9844 Q679.9063,5158.1406 680.4688,5158.4375 L680.4688,5161.1563 Q679.8438,5160.5781 679.25,5160.3125 Q678.6563,5160.0313 678.0313,5160.0313 Q676.6875,5160.0313 676,5161.1094 Q675.3125,5162.1719 675.3125,5164.2656 Q675.3125,5166.3594 676,5167.4375 Q676.6875,5168.5 678.0313,5168.5 Q678.6563,5168.5 679.25,5168.2344 Q679.8438,5167.9531 680.4688,5167.375 L680.4688,5170.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="691.5" y="5168.6074">List</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="79" x="720.5" y="5145.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="721.5" y="5157.5918">PropertyInfo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="663.5" x2="795.5" y1="5180.4531" y2="5180.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="663.5" x2="795.5" y1="5188.4531" y2="5188.4531"/><!--MD5=[81164fdf4de04db55f7d70df92bbb983]
class C_0000210234563198599367--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L93" target="_top" title="Variant" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L93" xlink:show="new" xlink:title="Variant" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="2211.9922" id="C_0000210234563198599367" style="stroke: #A80036; stroke-width: 1.5;" width="1306" x="5760" y="853.4531"/><ellipse cx="6386.25" cy="869.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6389.2188,875.0938 Q6388.6406,875.3906 6388,875.5313 Q6387.3594,875.6875 6386.6563,875.6875 Q6384.1563,875.6875 6382.8281,874.0469 Q6381.5156,872.3906 6381.5156,869.2656 Q6381.5156,866.1406 6382.8281,864.4844 Q6384.1563,862.8281 6386.6563,862.8281 Q6387.3594,862.8281 6388,862.9844 Q6388.6563,863.1406 6389.2188,863.4375 L6389.2188,866.1563 Q6388.5938,865.5781 6388,865.3125 Q6387.4063,865.0313 6386.7813,865.0313 Q6385.4375,865.0313 6384.75,866.1094 Q6384.0625,867.1719 6384.0625,869.2656 Q6384.0625,871.3594 6384.75,872.4375 Q6385.4375,873.5 6386.7813,873.5 Q6387.4063,873.5 6388,873.2344 Q6388.5938,872.9531 6389.2188,872.375 L6389.2188,875.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="45" x="6406.75" y="873.6074">Variant</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5761" x2="7065" y1="885.4531" y2="885.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L144" target="_top" title="type" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L144" xlink:show="new" xlink:title="type" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5766" y="891.4531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="893.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L144" target="_top" title="type" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L144" xlink:show="new" xlink:title="type" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="5780" y="899.6636">type : Variant::Type</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="5761" x2="7065" y1="906.2578" y2="906.2578"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="914.2578"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="5780" y="920.4683">_get_obj() : Variant::ObjData &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="927.0625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="5780" y="933.2729">_get_obj() const : const Variant::ObjData &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="939.8672"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="5780" y="946.0776">reference(const Variant &amp; p_variant) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="952.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="5780" y="958.8823">clear() : void</text><ellipse cx="5771" cy="968.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="5780" y="971.687">get_type() const : Variant::Type</text><ellipse cx="5771" cy="981.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="256" x="5780" y="984.4917">get_type_name(Variant::Type p_type) : String</text><ellipse cx="5771" cy="994.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="402" x="5780" y="997.2964">can_convert(Variant::Type p_type_from, Variant::Type p_type_to) : bool</text><ellipse cx="5771" cy="1006.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="437" x="5780" y="1010.1011">can_convert_strict(Variant::Type p_type_from, Variant::Type p_type_to) : bool</text><ellipse cx="5771" cy="1019.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="5780" y="1022.9058">is_ref() const : bool</text><ellipse cx="5771" cy="1032.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="5780" y="1035.7104">is_num() const : bool</text><ellipse cx="5771" cy="1045.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="5780" y="1048.5151">is_array() const : bool</text><ellipse cx="5771" cy="1058.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="5780" y="1061.3198">is_shared() const : bool</text><ellipse cx="5771" cy="1070.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="5780" y="1074.1245">is_zero() const : bool</text><ellipse cx="5771" cy="1083.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="5780" y="1086.9292">is_one() const : bool</text><ellipse cx="5771" cy="1096.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="5780" y="1099.7339">operator bool() const : bool</text><ellipse cx="5771" cy="1109.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="5780" y="1112.5386">operator int() const : int</text><ellipse cx="5771" cy="1122.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="5780" y="1125.3433">operator unsigned int() const : unsigned int</text><ellipse cx="5771" cy="1134.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="5780" y="1138.1479">operator short() const : short</text><ellipse cx="5771" cy="1147.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="5780" y="1150.9526">operator unsigned short() const : unsigned short</text><ellipse cx="5771" cy="1160.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="5780" y="1163.7573">operator signed char() const : signed char</text><ellipse cx="5771" cy="1173.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="5780" y="1176.562">operator unsigned char() const : unsigned char</text><ellipse cx="5771" cy="1186.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="5780" y="1189.3667">operator long() const : int64_t</text><ellipse cx="5771" cy="1198.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="5780" y="1202.1714">operator unsigned long() const : uint64_t</text><ellipse cx="5771" cy="1211.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="5780" y="1214.9761">operator wchar_t() const : CharType</text><ellipse cx="5771" cy="1224.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="5780" y="1227.7808">operator float() const : float</text><ellipse cx="5771" cy="1237.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="5780" y="1240.5854">operator double() const : double</text><ellipse cx="5771" cy="1250.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="5780" y="1253.3901">operator String() const : String</text><ellipse cx="5771" cy="1262.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="5780" y="1266.1948">operator StringName() const : StringName</text><ellipse cx="5771" cy="1275.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="5780" y="1278.9995">operator Vector2() const : Vector2</text><ellipse cx="5771" cy="1288.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="5780" y="1291.8042">operator Rect2() const : Rect2</text><ellipse cx="5771" cy="1301.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="5780" y="1304.6089">operator Vector3() const : Vector3</text><ellipse cx="5771" cy="1314.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="5780" y="1317.4136">operator Plane() const : Plane</text><ellipse cx="5771" cy="1327.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="5780" y="1330.2183">operator AABB() const : ::AABB</text><ellipse cx="5771" cy="1339.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="5780" y="1343.0229">operator Quat() const : Quat</text><ellipse cx="5771" cy="1352.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="5780" y="1355.8276">operator Basis() const : Basis</text><ellipse cx="5771" cy="1365.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="5780" y="1368.6323">operator Transform() const : Transform</text><ellipse cx="5771" cy="1378.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="5780" y="1381.437">operator Transform2D() const : Transform2D</text><ellipse cx="5771" cy="1391.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="5780" y="1394.2417">operator Color() const : Color</text><ellipse cx="5771" cy="1403.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="5780" y="1407.0464">operator NodePath() const : NodePath</text><ellipse cx="5771" cy="1416.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="5780" y="1419.8511">operator RefPtr() const : RefPtr</text><ellipse cx="5771" cy="1429.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="5780" y="1432.6558">operator RID() const : RID</text><ellipse cx="5771" cy="1442.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="5780" y="1445.4604">operator Object *() const : Object *</text><ellipse cx="5771" cy="1455.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="5780" y="1458.2651">operator Node *() const : Node *</text><ellipse cx="5771" cy="1467.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="5780" y="1471.0698">operator Control *() const : Control *</text><ellipse cx="5771" cy="1480.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="5780" y="1483.8745">operator Dictionary() const : Dictionary</text><ellipse cx="5771" cy="1493.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="5780" y="1496.6792">operator Array() const : Array</text><ellipse cx="5771" cy="1506.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="5780" y="1509.4839">operator PoolVector() const : PoolVector&lt;uint8_t&gt;</text><ellipse cx="5771" cy="1519.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="5780" y="1522.2886">operator PoolVector() const : PoolVector&lt;int&gt;</text><ellipse cx="5771" cy="1531.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="5780" y="1535.0933">operator PoolVector() const : PoolVector&lt;real_t&gt;</text><ellipse cx="5771" cy="1544.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="5780" y="1547.8979">operator PoolVector() const : PoolVector&lt;String&gt;</text><ellipse cx="5771" cy="1557.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="5780" y="1560.7026">operator PoolVector() const : PoolVector&lt;Vector3&gt;</text><ellipse cx="5771" cy="1570.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="5780" y="1573.5073">operator PoolVector() const : PoolVector&lt;Color&gt;</text><ellipse cx="5771" cy="1583.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="5780" y="1586.312">operator PoolVector() const : PoolVector&lt;Plane&gt;</text><ellipse cx="5771" cy="1595.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="5780" y="1599.1167">operator PoolVector() const : PoolVector&lt;Face3&gt;</text><ellipse cx="5771" cy="1608.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="5780" y="1611.9214">operator Vector() const : Vector&lt;Variant&gt;</text><ellipse cx="5771" cy="1621.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="5780" y="1624.7261">operator Vector() const : Vector&lt;uint8_t&gt;</text><ellipse cx="5771" cy="1634.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="5780" y="1637.5308">operator Vector() const : Vector&lt;int&gt;</text><ellipse cx="5771" cy="1647.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="5780" y="1650.3354">operator Vector() const : Vector&lt;real_t&gt;</text><ellipse cx="5771" cy="1659.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="5780" y="1663.1401">operator Vector() const : Vector&lt;String&gt;</text><ellipse cx="5771" cy="1672.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="5780" y="1675.9448">operator Vector() const : Vector&lt;StringName&gt;</text><ellipse cx="5771" cy="1685.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="5780" y="1688.7495">operator Vector() const : Vector&lt;Vector3&gt;</text><ellipse cx="5771" cy="1698.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="5780" y="1701.5542">operator Vector() const : Vector&lt;Color&gt;</text><ellipse cx="5771" cy="1711.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="5780" y="1714.3589">operator Vector() const : Vector&lt;RID&gt;</text><ellipse cx="5771" cy="1723.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="5780" y="1727.1636">operator Vector() const : Vector&lt;Vector2&gt;</text><ellipse cx="5771" cy="1736.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="5780" y="1739.9683">operator PoolVector() const : PoolVector&lt;Vector2&gt;</text><ellipse cx="5771" cy="1749.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="5780" y="1752.7729">operator Vector() const : Vector&lt;Plane&gt;</text><ellipse cx="5771" cy="1762.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="5780" y="1765.5776">operator Margin() const : Margin</text><ellipse cx="5771" cy="1775.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="5780" y="1778.3823">operator Orientation() const : Orientation</text><ellipse cx="5771" cy="1787.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="5780" y="1791.187">operator IP_Address() const : IP_Address</text><ellipse cx="5771" cy="1800.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="5780" y="1803.9917">Variant(bool p_bool) : void</text><ellipse cx="5771" cy="1813.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="5780" y="1816.7964">Variant(int p_int) : void</text><ellipse cx="5771" cy="1826.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="5780" y="1829.6011">Variant(unsigned int p_int) : void</text><ellipse cx="5771" cy="1839.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="5780" y="1842.4058">Variant(short p_short) : void</text><ellipse cx="5771" cy="1852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="5780" y="1855.2104">Variant(unsigned short p_short) : void</text><ellipse cx="5771" cy="1864.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="5780" y="1868.0151">Variant(signed char p_char) : void</text><ellipse cx="5771" cy="1877.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="5780" y="1880.8198">Variant(unsigned char p_char) : void</text><ellipse cx="5771" cy="1890.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="5780" y="1893.6245">Variant(int64_t p_int) : void</text><ellipse cx="5771" cy="1903.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="5780" y="1906.4292">Variant(uint64_t p_int) : void</text><ellipse cx="5771" cy="1916.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="5780" y="1919.2339">Variant(float p_float) : void</text><ellipse cx="5771" cy="1928.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="5780" y="1932.0386">Variant(double p_double) : void</text><ellipse cx="5771" cy="1941.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="5780" y="1944.8433">Variant(const String &amp; p_string) : void</text><ellipse cx="5771" cy="1954.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="5780" y="1957.6479">Variant(const StringName &amp; p_string) : void</text><ellipse cx="5771" cy="1967.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="5780" y="1970.4526">Variant(const char *const p_cstring) : void</text><ellipse cx="5771" cy="1980.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="5780" y="1983.2573">Variant(const CharType * p_wstring) : void</text><ellipse cx="5771" cy="1992.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="5780" y="1996.062">Variant(const Vector2 &amp; p_vector2) : void</text><ellipse cx="5771" cy="2005.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="5780" y="2008.8667">Variant(const Rect2 &amp; p_rect2) : void</text><ellipse cx="5771" cy="2018.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="5780" y="2021.6714">Variant(const Vector3 &amp; p_vector3) : void</text><ellipse cx="5771" cy="2031.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="5780" y="2034.4761">Variant(const Plane &amp; p_plane) : void</text><ellipse cx="5771" cy="2044.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="5780" y="2047.2808">Variant(const ::AABB &amp; p_aabb) : void</text><ellipse cx="5771" cy="2056.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="5780" y="2060.0854">Variant(const Quat &amp; p_quat) : void</text><ellipse cx="5771" cy="2069.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="5780" y="2072.8901">Variant(const Basis &amp; p_matrix) : void</text><ellipse cx="5771" cy="2082.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="5780" y="2085.6948">Variant(const Transform2D &amp; p_transform) : void</text><ellipse cx="5771" cy="2095.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="5780" y="2098.4995">Variant(const Transform &amp; p_transform) : void</text><ellipse cx="5771" cy="2108.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="5780" y="2111.3042">Variant(const Color &amp; p_color) : void</text><ellipse cx="5771" cy="2120.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="5780" y="2124.1089">Variant(const NodePath &amp; p_node_path) : void</text><ellipse cx="5771" cy="2133.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="5780" y="2136.9136">Variant(const RefPtr &amp; p_resource) : void</text><ellipse cx="5771" cy="2146.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="5780" y="2149.7183">Variant(const RID &amp; p_rid) : void</text><ellipse cx="5771" cy="2159.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="5780" y="2162.5229">Variant(const Object * p_object) : void</text><ellipse cx="5771" cy="2172.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="5780" y="2175.3276">Variant(const Dictionary &amp; p_dictionary) : void</text><ellipse cx="5771" cy="2184.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="5780" y="2188.1323">Variant(const Array &amp; p_array) : void</text><ellipse cx="5771" cy="2197.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="5780" y="2200.937">Variant(const PoolVector&lt;Plane&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2210.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="5780" y="2213.7417">Variant(const PoolVector&lt;uint8_t&gt; &amp; p_raw_array) : void</text><ellipse cx="5771" cy="2223.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="5780" y="2226.5464">Variant(const PoolVector&lt;int&gt; &amp; p_int_array) : void</text><ellipse cx="5771" cy="2236.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="5780" y="2239.3511">Variant(const PoolVector&lt;real_t&gt; &amp; p_real_array) : void</text><ellipse cx="5771" cy="2248.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="5780" y="2252.1558">Variant(const PoolVector&lt;String&gt; &amp; p_string_array) : void</text><ellipse cx="5771" cy="2261.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="5780" y="2264.9604">Variant(const PoolVector&lt;Vector3&gt; &amp; p_vector3_array) : void</text><ellipse cx="5771" cy="2274.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="5780" y="2277.7651">Variant(const PoolVector&lt;Color&gt; &amp; p_color_array) : void</text><ellipse cx="5771" cy="2287.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="5780" y="2290.5698">Variant(const PoolVector&lt;Face3&gt; &amp; p_face_array) : void</text><ellipse cx="5771" cy="2300.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="5780" y="2303.3745">Variant(const Vector&lt;Variant&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2312.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="5780" y="2316.1792">Variant(const Vector&lt;uint8_t&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2325.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="5780" y="2328.9839">Variant(const Vector&lt;int&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2338.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="5780" y="2341.7886">Variant(const Vector&lt;real_t&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2351.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="5780" y="2354.5933">Variant(const Vector&lt;String&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2364.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="5780" y="2367.3979">Variant(const Vector&lt;StringName&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2376.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="5780" y="2380.2026">Variant(const Vector&lt;Vector3&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2389.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="5780" y="2393.0073">Variant(const Vector&lt;Color&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2402.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="5780" y="2405.812">Variant(const Vector&lt;Plane&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2415.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="5780" y="2418.6167">Variant(const Vector&lt;RID&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2428.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="5780" y="2431.4214">Variant(const Vector&lt;Vector2&gt; &amp; p_array) : void</text><ellipse cx="5771" cy="2441.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="5780" y="2444.2261">Variant(const PoolVector&lt;Vector2&gt; &amp; p_vector2_array) : void</text><ellipse cx="5771" cy="2453.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="5780" y="2457.0308">Variant(const IP_Address &amp; p_address) : void</text><ellipse cx="5771" cy="2466.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="295" x="5780" y="2469.8354">get_operator_name(Variant::Operator p_op) : String</text><ellipse cx="5771" cy="2479.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="692" x="5780" y="2482.6401">evaluate(const Variant::Operator &amp; p_op, const Variant &amp; p_a, const Variant &amp; p_b, Variant &amp; r_ret, bool &amp; r_valid) : void</text><ellipse cx="5771" cy="2492.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="529" x="5780" y="2495.4448">evaluate(const Variant::Operator &amp; p_op, const Variant &amp; p_a, const Variant &amp; p_b) : Variant</text><ellipse cx="5771" cy="2505.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="5780" y="2508.2495">zero() : void</text><ellipse cx="5771" cy="2517.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="5780" y="2521.0542">duplicate(bool deep = false) const : Variant</text><ellipse cx="5771" cy="2530.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="420" x="5780" y="2533.8589">blend(const Variant &amp; a, const Variant &amp; b, float c, Variant &amp; r_dst) : void</text><ellipse cx="5771" cy="2543.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="450" x="5780" y="2546.6636">interpolate(const Variant &amp; a, const Variant &amp; b, float c, Variant &amp; r_dst) : void</text><ellipse cx="5771" cy="2556.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="744" x="5780" y="2559.4683">call_ptr(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant * r_ret, Variant::CallError &amp; r_error) : void</text><ellipse cx="5771" cy="2569.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="5780" y="2572.2729">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="5771" cy="2581.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="5780" y="2585.0776">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="5771" cy="2594.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="853" x="5780" y="2597.8823">get_call_error_text(Object * p_base, const StringName &amp; p_method, const Variant ** p_argptrs, int p_argcount, const Variant::CallError &amp; ce) : String</text><ellipse cx="5771" cy="2607.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="740" x="5780" y="2610.687">construct(const Variant::Type , const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error, bool p_strict = true) : Variant</text><ellipse cx="5771" cy="2620.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="5780" y="2623.4917">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="5771" cy="2633.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="5780" y="2636.2964">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="5771" cy="2645.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="614" x="5780" y="2649.1011">get_method_argument_types(Variant::Type p_type, const StringName &amp; p_method) : Vector&lt;Variant::Type&gt;</text><ellipse cx="5771" cy="2658.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="594" x="5780" y="2661.9058">get_method_default_arguments(Variant::Type p_type, const StringName &amp; p_method) : Vector&lt;Variant&gt;</text><ellipse cx="5771" cy="2671.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="701" x="5780" y="2674.7104">get_method_return_type(Variant::Type p_type, const StringName &amp; p_method, bool * r_has_return = __null) : Variant::Type</text><ellipse cx="5771" cy="2684.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="614" x="5780" y="2687.5151">get_method_argument_names(Variant::Type p_type, const StringName &amp; p_method) : Vector&lt;StringName&gt;</text><ellipse cx="5771" cy="2697.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="440" x="5780" y="2700.3198">is_method_const(Variant::Type p_type, const StringName &amp; p_method) : bool</text><ellipse cx="5771" cy="2709.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="5780" y="2713.1245">set_named(const StringName &amp; p_index, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="5771" cy="2722.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="5780" y="2725.9292">get_named(const StringName &amp; p_index, bool * r_valid = __null) const : Variant</text><ellipse cx="5771" cy="2735.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="5780" y="2738.7339">set(const Variant &amp; p_index, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="5771" cy="2748.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="5780" y="2751.5386">get(const Variant &amp; p_index, bool * r_valid = __null) const : Variant</text><ellipse cx="5771" cy="2761.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="5780" y="2764.3433">in(const Variant &amp; p_index, bool * r_valid = __null) const : bool</text><ellipse cx="5771" cy="2773.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="5780" y="2777.1479">iter_init(Variant &amp; r_iter, bool &amp; r_valid) const : bool</text><ellipse cx="5771" cy="2786.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="5780" y="2789.9526">iter_next(Variant &amp; r_iter, bool &amp; r_valid) const : bool</text><ellipse cx="5771" cy="2799.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="5780" y="2802.7573">iter_get(const Variant &amp; r_iter, bool &amp; r_valid) const : Variant</text><ellipse cx="5771" cy="2812.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="5780" y="2815.562">get_property_list(List&lt;PropertyInfo&gt; * p_list) const : void</text><ellipse cx="5771" cy="2825.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="5780" y="2828.3667">operator==(const Variant &amp; p_variant) const : bool</text><ellipse cx="5771" cy="2837.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="5780" y="2841.1714">operator!=(const Variant &amp; p_variant) const : bool</text><ellipse cx="5771" cy="2850.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="5780" y="2853.9761">operator&lt;(const Variant &amp; p_variant) const : bool</text><ellipse cx="5771" cy="2863.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="5780" y="2866.7808">hash() const : uint32_t</text><ellipse cx="5771" cy="2876.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="5780" y="2879.5854">hash_compare(const Variant &amp; p_variant) const : bool</text><ellipse cx="5771" cy="2889.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="5780" y="2892.3901">booleanize() const : bool</text><ellipse cx="5771" cy="2901.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="5780" y="2905.1948">stringify(List&lt;const void *&gt; &amp; stack) const : String</text><ellipse cx="5771" cy="2914.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="5780" y="2917.9995">static_assign(const Variant &amp; p_variant) : void</text><ellipse cx="5771" cy="2927.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="423" x="5780" y="2930.8042">get_constructor_list(Variant::Type p_type, List&lt;MethodInfo&gt; * p_list) : void</text><ellipse cx="5771" cy="2940.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="487" x="5780" y="2943.6089">get_constants_for_type(Variant::Type p_type, List&lt;StringName&gt; * p_constants) : void</text><ellipse cx="5771" cy="2953.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="407" x="5780" y="2956.4136">has_constant(Variant::Type p_type, const StringName &amp; p_value) : bool</text><ellipse cx="5771" cy="2966.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="588" x="5780" y="2969.2183">get_constant_value(Variant::Type p_type, const StringName &amp; p_value, bool * r_valid = __null) : Variant</text><ellipse cx="5771" cy="2978.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="5780" y="2982.0229">get_construct_string() const : String</text><ellipse cx="5771" cy="2991.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="877" x="5780" y="2994.8276">construct_from_string(const String &amp; p_string, Variant &amp; r_value, Variant::ObjectConstruct p_obj_construct = __null, void * p_construct_ud = __null) : void</text><ellipse cx="5771" cy="3004.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="5780" y="3007.6323">operator=(const Variant &amp; p_variant) : void</text><ellipse cx="5771" cy="3017.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="5780" y="3020.437">Variant(const Variant &amp; p_variant) : void</text><ellipse cx="5771" cy="3030.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="5780" y="3033.2417">Variant() : void</text><ellipse cx="5771" cy="3042.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="5780" y="3046.0464">~Variant() : void</text><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L173" target="_top" title="_data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L173" xlink:show="new" xlink:title="_data" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5766" y="3050.6406"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5768" y="3052.6406"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L173" target="_top" title="_data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L173" xlink:show="new" xlink:title="_data" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="5780" y="3058.8511">_data : union (unnamed union at ./core/variant.h:163:2)</text></a><!--MD5=[48c1d650122612d88514dc7f32d5a165]
class C_0002153970433534458832--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L144" target="_top" title="PropertyInfo" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L144" xlink:show="new" xlink:title="PropertyInfo" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="227.2656" id="C_0002153970433534458832" style="stroke: #A80036; stroke-width: 1.5;" width="1417" x="1591.5" y="1229.9531"/><ellipse cx="2257.75" cy="1245.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2260.7188,1251.5938 Q2260.1406,1251.8906 2259.5,1252.0313 Q2258.8594,1252.1875 2258.1563,1252.1875 Q2255.6563,1252.1875 2254.3281,1250.5469 Q2253.0156,1248.8906 2253.0156,1245.7656 Q2253.0156,1242.6406 2254.3281,1240.9844 Q2255.6563,1239.3281 2258.1563,1239.3281 Q2258.8594,1239.3281 2259.5,1239.4844 Q2260.1563,1239.6406 2260.7188,1239.9375 L2260.7188,1242.6563 Q2260.0938,1242.0781 2259.5,1241.8125 Q2258.9063,1241.5313 2258.2813,1241.5313 Q2256.9375,1241.5313 2256.25,1242.6094 Q2255.5625,1243.6719 2255.5625,1245.7656 Q2255.5625,1247.8594 2256.25,1248.9375 Q2256.9375,1250 2258.2813,1250 Q2258.9063,1250 2259.5,1249.7344 Q2260.0938,1249.4531 2260.7188,1248.875 L2260.7188,1251.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="2278.25" y="1250.1074">PropertyInfo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1592.5" x2="3007.5" y1="1261.9531" y2="1261.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L146" target="_top" title="type" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L146" xlink:show="new" xlink:title="type" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1267.9531"/><ellipse cx="1602.5" cy="1272.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L146" target="_top" title="type" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L146" xlink:show="new" xlink:title="type" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="1611.5" y="1276.1636">type : Variant::Type</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L147" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L147" xlink:show="new" xlink:title="name" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1280.7578"/><ellipse cx="1602.5" cy="1285.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L147" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L147" xlink:show="new" xlink:title="name" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="1611.5" y="1288.9683">name : String</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L148" target="_top" title="class_name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L148" xlink:show="new" xlink:title="class_name" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1293.5625"/><ellipse cx="1602.5" cy="1298.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L148" target="_top" title="class_name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L148" xlink:show="new" xlink:title="class_name" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1611.5" y="1301.7729">class_name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L149" target="_top" title="hint" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L149" xlink:show="new" xlink:title="hint" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1306.3672"/><ellipse cx="1602.5" cy="1311.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L149" target="_top" title="hint" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L149" xlink:show="new" xlink:title="hint" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1611.5" y="1314.5776">hint : PropertyHint</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L150" target="_top" title="hint_string" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L150" xlink:show="new" xlink:title="hint_string" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1319.1719"/><ellipse cx="1602.5" cy="1324.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L150" target="_top" title="hint_string" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L150" xlink:show="new" xlink:title="hint_string" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="1611.5" y="1327.3823">hint_string : String</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L151" target="_top" title="usage" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L151" xlink:show="new" xlink:title="usage" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1597.5" y="1331.9766"/><ellipse cx="1602.5" cy="1336.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L151" target="_top" title="usage" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L151" xlink:show="new" xlink:title="usage" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1611.5" y="1340.187">usage : uint32_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="1592.5" x2="3007.5" y1="1346.7813" y2="1346.7813"/><ellipse cx="1602.5" cy="1357.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1611.5" y="1360.9917">added_usage(int p_fl) const : PropertyInfo</text><ellipse cx="1602.5" cy="1370.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1611.5" y="1373.7964">operator Dictionary() const : Dictionary</text><ellipse cx="1602.5" cy="1383.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="284" x="1611.5" y="1386.6011">from_dict(const Dictionary &amp; p_dict) : PropertyInfo</text><ellipse cx="1602.5" cy="1396.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1611.5" y="1399.4058">PropertyInfo() : void</text><ellipse cx="1602.5" cy="1409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1391" x="1611.5" y="1412.2104">PropertyInfo(Variant::Type p_type, const String p_name, PropertyHint p_hint = PROPERTY_HINT_NONE, const String &amp; p_hint_string = "", uint32_t p_usage = PROPERTY_USAGE_DEFAULT, const StringName &amp; p_class_name = StringName()) : void</text><ellipse cx="1602.5" cy="1421.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="1611.5" y="1425.0151">PropertyInfo(const StringName &amp; p_class_name) : void</text><ellipse cx="1602.5" cy="1434.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1611.5" y="1437.8198">operator==(const PropertyInfo &amp; p_info) const : bool</text><ellipse cx="1602.5" cy="1447.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="1611.5" y="1450.6245">operator&lt;(const PropertyInfo &amp; p_info) const : bool</text><!--MD5=[e19ea3ddc80c91fbe5870b7030365a5f]
class C_0002063845175027013341--><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="48" id="C_0002063845175027013341" style="stroke: #A80036; stroke-width: 1.5;" width="94" x="2253" y="4873.4531"/><ellipse cx="2268" cy="4889.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2270.9688,4895.0938 Q2270.3906,4895.3906 2269.75,4895.5313 Q2269.1094,4895.6875 2268.4063,4895.6875 Q2265.9063,4895.6875 2264.5781,4894.0469 Q2263.2656,4892.3906 2263.2656,4889.2656 Q2263.2656,4886.1406 2264.5781,4884.4844 Q2265.9063,4882.8281 2268.4063,4882.8281 Q2269.1094,4882.8281 2269.75,4882.9844 Q2270.4063,4883.1406 2270.9688,4883.4375 L2270.9688,4886.1563 Q2270.3438,4885.5781 2269.75,4885.3125 Q2269.1563,4885.0313 2268.5313,4885.0313 Q2267.1875,4885.0313 2266.5,4886.1094 Q2265.8125,4887.1719 2265.8125,4889.2656 Q2265.8125,4891.3594 2266.5,4892.4375 Q2267.1875,4893.5 2268.5313,4893.5 Q2269.1563,4893.5 2269.75,4893.2344 Q2270.3438,4892.9531 2270.9688,4892.375 L2270.9688,4895.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="2282" y="4893.6074">List</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="39" x="2311" y="4870.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="37" x="2312" y="4882.5918">String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2254" x2="2346" y1="4905.4531" y2="4905.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2254" x2="2346" y1="4913.4531" y2="4913.4531"/><!--MD5=[cefc1761acd014682fb46e6592f2db8a]
class C_0000104564426296396960--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" target="_top" title="ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" xlink:show="new" xlink:title="ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="1046.7656" id="C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.5;" width="1524" x="3992" y="2685.9531"/><ellipse cx="4724.75" cy="2701.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4727.7188,2707.5938 Q4727.1406,2707.8906 4726.5,2708.0313 Q4725.8594,2708.1875 4725.1563,2708.1875 Q4722.6563,2708.1875 4721.3281,2706.5469 Q4720.0156,2704.8906 4720.0156,2701.7656 Q4720.0156,2698.6406 4721.3281,2696.9844 Q4722.6563,2695.3281 4725.1563,2695.3281 Q4725.8594,2695.3281 4726.5,2695.4844 Q4727.1563,2695.6406 4727.7188,2695.9375 L4727.7188,2698.6563 Q4727.0938,2698.0781 4726.5,2697.8125 Q4725.9063,2697.5313 4725.2813,2697.5313 Q4723.9375,2697.5313 4723.25,2698.6094 Q4722.5625,2699.6719 4722.5625,2701.7656 Q4722.5625,2703.8594 4723.25,2704.9375 Q4723.9375,2706 4725.2813,2706 Q4725.9063,2706 4726.5,2705.7344 Q4727.0938,2705.4531 4727.7188,2704.875 L4727.7188,2707.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="4745.25" y="2706.1074">ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3993" x2="5515" y1="2717.9531" y2="2717.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2723.9531"/><ellipse cx="4003" cy="2728.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="75" x="4012" y="2732.1636">lock : RWLock</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2736.7578"/><ellipse cx="4003" cy="2741.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="306" x="4012" y="2744.9683">classes : HashMap&lt;StringName,ClassDB::ClassInfo&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2749.5625"/><ellipse cx="4003" cy="2754.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="4012" y="2757.7729">resource_base_extensions : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2762.3672"/><ellipse cx="4003" cy="2767.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="4012" y="2770.5776">compat_classes : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2775.1719"/><ellipse cx="4003" cy="2780.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="4012" y="2783.3823">current_api : ClassDB::APIType</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2787.9766"/><ellipse cx="4003" cy="2792.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="416" x="4012" y="2796.187">default_values : HashMap&lt;StringName,HashMap&lt;StringName,Variant&gt;&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3998" y="2800.7813"/><ellipse cx="4003" cy="2805.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="244" x="4012" y="2808.9917">default_values_cached : Set&lt;StringName&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3993" x2="5515" y1="2815.5859" y2="2815.5859"/><ellipse cx="4003" cy="2826.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="856" x="4012" y="2829.7964">bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition &amp; method_name, const Variant ** p_defs, int p_defcount) : MethodBind *</text><ellipse cx="4003" cy="2839.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="4012" y="2842.6011">_add_class2(const StringName &amp; p_class, const StringName &amp; p_inherits) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4000" y="2849.1953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="353" x="4012" y="2855.4058">_get_parent_class(const StringName &amp; p_class) : StringName</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4000" y="2862"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="486" x="4012" y="2868.2104">_is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) : bool</text><ellipse cx="4003" cy="2877.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="4012" y="2881.0151">get_class_list(List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="4003" cy="2890.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="538" x="4012" y="2893.8198">get_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="4003" cy="2903.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="576" x="4012" y="2906.6245">get_direct_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="4003" cy="2916.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="399" x="4012" y="2919.4292">get_parent_class_nocheck(const StringName &amp; p_class) : StringName</text><ellipse cx="4003" cy="2929.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="347" x="4012" y="2932.2339">get_parent_class(const StringName &amp; p_class) : StringName</text><ellipse cx="4003" cy="2941.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="4012" y="2945.0386">class_exists(const StringName &amp; p_class) : bool</text><ellipse cx="4003" cy="2954.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="480" x="4012" y="2957.8433">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) : bool</text><ellipse cx="4003" cy="2967.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="281" x="4012" y="2970.6479">can_instance(const StringName &amp; p_class) : bool</text><ellipse cx="4003" cy="2980.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="4012" y="2983.4526">instance(const StringName &amp; p_class) : Object *</text><ellipse cx="4003" cy="2993.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="354" x="4012" y="2996.2573">get_api_type(const StringName &amp; p_class) : ClassDB::APIType</text><ellipse cx="4003" cy="3005.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="4012" y="3009.062">get_api_hash(ClassDB::APIType p_api) : uint64_t</text><ellipse cx="4003" cy="3018.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="388" x="4012" y="3021.8667">add_signal(StringName p_class, const MethodInfo &amp; p_signal) : void</text><ellipse cx="4003" cy="3031.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="4012" y="3034.6714">has_signal(StringName p_class, StringName p_signal) : bool</text><ellipse cx="4003" cy="3044.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="471" x="4012" y="3047.4761">get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool</text><ellipse cx="4003" cy="3057.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="591" x="4012" y="3060.2808">get_signal_list(StringName p_class, List&lt;MethodInfo&gt; * p_signals, bool p_no_inheritance = false) : void</text><ellipse cx="4003" cy="3069.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="578" x="4012" y="3073.0854">add_property_group(StringName p_class, const String &amp; p_name, const String &amp; p_prefix = "") : void</text><ellipse cx="4003" cy="3082.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="850" x="4012" y="3085.8901">add_property(StringName p_class, const PropertyInfo &amp; p_pinfo, const StringName &amp; p_setter, const StringName &amp; p_getter, int p_index = -1) : void</text><ellipse cx="4003" cy="3095.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="636" x="4012" y="3098.6948">set_property_default_value(StringName p_class, const StringName &amp; p_name, const Variant &amp; p_default) : void</text><ellipse cx="4003" cy="3108.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="792" x="4012" y="3111.4995">get_property_list(StringName p_class, List&lt;PropertyInfo&gt; * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void</text><ellipse cx="4003" cy="3121.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="678" x="4012" y="3124.3042">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value, bool * r_valid = __null) : bool</text><ellipse cx="4003" cy="3133.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="509" x="4012" y="3137.1089">get_property(Object * p_object, const StringName &amp; p_property, Variant &amp; r_value) : bool</text><ellipse cx="4003" cy="3146.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="648" x="4012" y="3149.9136">has_property(const StringName &amp; p_class, const StringName &amp; p_property, bool p_no_inheritance = false) : bool</text><ellipse cx="4003" cy="3159.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="642" x="4012" y="3162.7183">get_property_index(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : int</text><ellipse cx="4003" cy="3172.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="697" x="4012" y="3175.5229">get_property_type(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : Variant::Type</text><ellipse cx="4003" cy="3185.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="4012" y="3188.3276">get_property_setter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="4003" cy="3197.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="4012" y="3201.1323">get_property_getter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="4003" cy="3210.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="540" x="4012" y="3213.937">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool</text><ellipse cx="4003" cy="3223.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="4012" y="3226.7417">set_method_flags(StringName p_class, StringName p_method, int p_flags) : void</text><ellipse cx="4003" cy="3236.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="844" x="4012" y="3239.5464">get_method_list(StringName p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void</text><ellipse cx="4003" cy="3249.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="401" x="4012" y="3252.3511">get_method(StringName p_class, StringName p_name) : MethodBind *</text><ellipse cx="4003" cy="3261.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="620" x="4012" y="3265.1558">add_virtual_method(const StringName &amp; p_class, const MethodInfo &amp; p_method, bool p_virtual = true) : void</text><ellipse cx="4003" cy="3274.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="683" x="4012" y="3277.9604">get_virtual_methods(const StringName &amp; p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false) : void</text><ellipse cx="4003" cy="3287.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="765" x="4012" y="3290.7651">bind_integer_constant(const StringName &amp; p_class, const StringName &amp; p_enum, const StringName &amp; p_name, int p_constant) : void</text><ellipse cx="4003" cy="3300.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="688" x="4012" y="3303.5698">get_integer_constant_list(const StringName &amp; p_class, List&lt;String&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="4003" cy="3313.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="644" x="4012" y="3316.3745">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name, bool * p_success = __null) : int</text><ellipse cx="4003" cy="3325.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="757" x="4012" y="3329.1792">get_integer_constant_enum(const StringName &amp; p_class, const StringName &amp; p_name, bool p_no_inheritance = false) : StringName</text><ellipse cx="4003" cy="3338.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="641" x="4012" y="3341.9839">get_enum_list(const StringName &amp; p_class, List&lt;StringName&gt; * p_enums, bool p_no_inheritance = false) : void</text><ellipse cx="4003" cy="3351.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="870" x="4012" y="3354.7886">get_enum_constants(const StringName &amp; p_class, const StringName &amp; p_enum, List&lt;StringName&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="4003" cy="3364.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="733" x="4012" y="3367.5933">class_get_default_property_value(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_valid = __null) : Variant</text><ellipse cx="4003" cy="3377.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="321" x="4012" y="3380.3979">get_category(const StringName &amp; p_node) : StringName</text><ellipse cx="4003" cy="3389.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="349" x="4012" y="3393.2026">set_class_enabled(StringName p_class, bool p_enable) : void</text><ellipse cx="4003" cy="3402.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="255" x="4012" y="3406.0073">is_class_enabled(StringName p_class) : bool</text><ellipse cx="4003" cy="3415.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="4012" y="3418.812">is_class_exposed(StringName p_class) : bool</text><ellipse cx="4003" cy="3428.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="575" x="4012" y="3431.6167">add_resource_base_extension(const StringName &amp; p_extension, const StringName &amp; p_class) : void</text><ellipse cx="4003" cy="3441.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="381" x="4012" y="3444.4214">get_resource_base_extensions(List&lt;String&gt; * p_extensions) : void</text><ellipse cx="4003" cy="3454.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="513" x="4012" y="3457.2261">get_extensions_for_type(const StringName &amp; p_class, List&lt;String&gt; * p_extensions) : void</text><ellipse cx="4003" cy="3466.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="524" x="4012" y="3470.0308">add_compatibility_class(const StringName &amp; p_class, const StringName &amp; p_fallback) : void</text><ellipse cx="4003" cy="3479.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="265" x="4012" y="3482.8354">set_current_api(ClassDB::APIType p_api) : void</text><ellipse cx="4003" cy="3492.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="4012" y="3495.6401">get_current_api() : ClassDB::APIType</text><ellipse cx="4003" cy="3505.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="139" x="4012" y="3508.4448">cleanup_defaults() : void</text><ellipse cx="4003" cy="3518.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="4012" y="3521.2495">cleanup() : void</text><ellipse cx="4003" cy="3530.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="141" x="4012" y="3534.0542">creator() : class Object *</text><ellipse cx="4003" cy="3543.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="106" x="4012" y="3546.8589">_add_class() : void</text><ellipse cx="4003" cy="3556.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4012" y="3559.6636">register_class() : void</text><ellipse cx="4003" cy="3569.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="165" x="4012" y="3572.4683">register_virtual_class() : void</text><ellipse cx="4003" cy="3582.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="194" x="4012" y="3585.2729">_create_ptr_func() : class Object *</text><ellipse cx="4003" cy="3594.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="226" x="4012" y="3598.0776">register_custom_instance_class() : void</text><ellipse cx="4003" cy="3607.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="386" x="4012" y="3610.8823">bind_method(N p_method_name, M p_method) : class MethodBind *</text><ellipse cx="4003" cy="3620.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="525" x="4012" y="3623.687">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1) : class MethodBind *</text><ellipse cx="4003" cy="3633.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="664" x="4012" y="3636.4917">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2) : class MethodBind *</text><ellipse cx="4003" cy="3646.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="803" x="4012" y="3649.2964">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3) : class MethodBind *</text><ellipse cx="4003" cy="3658.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="942" x="4012" y="3662.1011">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4) : class MethodBind *</text><ellipse cx="4003" cy="3671.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1081" x="4012" y="3674.9058">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5) : class MethodBind *</text><ellipse cx="4003" cy="3684.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1220" x="4012" y="3687.7104">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6) : class MethodBind *</text><ellipse cx="4003" cy="3697.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1359" x="4012" y="3700.5151">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7) : class MethodBind *</text><ellipse cx="4003" cy="3710.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1498" x="4012" y="3713.3198">bind_method(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7, const Variant &amp; p_def8) : class MethodBind *</text><ellipse cx="4003" cy="3722.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1343" x="4012" y="3726.1245">bind_vararg_method(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo &amp; p_info = MethodInfo(), const Vector&lt;Variant&gt; &amp; p_default_args = Vector&lt;Variant&gt;(), bool p_return_nil_is_variant = true) : class MethodBind *</text><!--MD5=[dd2998d45ec54ba5be719aa7e503205b]
class C_0000218299049716973303--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L44" target="_top" title="Node" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L44" xlink:show="new" xlink:title="Node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="2839.4219" id="C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.5;" width="1447" x="6" y="1300.9531"/><ellipse cx="708.75" cy="1316.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M711.7188,1322.5938 Q711.1406,1322.8906 710.5,1323.0313 Q709.8594,1323.1875 709.1563,1323.1875 Q706.6563,1323.1875 705.3281,1321.5469 Q704.0156,1319.8906 704.0156,1316.7656 Q704.0156,1313.6406 705.3281,1311.9844 Q706.6563,1310.3281 709.1563,1310.3281 Q709.8594,1310.3281 710.5,1310.4844 Q711.1563,1310.6406 711.7188,1310.9375 L711.7188,1313.6563 Q711.0938,1313.0781 710.5,1312.8125 Q709.9063,1312.5313 709.2813,1312.5313 Q707.9375,1312.5313 707.25,1313.6094 Q706.5625,1314.6719 706.5625,1316.7656 Q706.5625,1318.8594 707.25,1319.9375 Q707.9375,1321 709.2813,1321 Q709.9063,1321 710.5,1320.7344 Q711.0938,1320.4531 711.7188,1319.875 L711.7188,1322.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="729.25" y="1321.1074">Node</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="1452" y1="1332.9531" y2="1332.9531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1340.9531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="26" y="1347.1636">_class_name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L144" target="_top" title="data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L144" xlink:show="new" xlink:title="data" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="1351.7578"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1353.7578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L144" target="_top" title="data" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L144" xlink:show="new" xlink:title="data" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="1359.9683">data : struct Data</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L152" target="_top" title="multiplayer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L152" xlink:show="new" xlink:title="multiplayer" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="1364.5625"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1366.5625"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L152" target="_top" title="multiplayer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L152" xlink:show="new" xlink:title="multiplayer" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="26" y="1372.7729">multiplayer : Ref&lt;MultiplayerAPI&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="1377.3672"/><ellipse cx="17" cy="1382.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="137" x="26" y="1385.5776">orphan_node_count : int</text></a><ellipse cx="17" cy="1395.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="26" y="1398.3823">NOTIFICATION_ENTER_TREE : enum</text><ellipse cx="17" cy="1407.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="1411.187">NOTIFICATION_EXIT_TREE : enum</text><ellipse cx="17" cy="1420.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="26" y="1423.9917">NOTIFICATION_MOVED_IN_PARENT : enum</text><ellipse cx="17" cy="1433.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="26" y="1436.7964">NOTIFICATION_READY : enum</text><ellipse cx="17" cy="1446.3906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="26" y="1449.6011">NOTIFICATION_PAUSED : enum</text><ellipse cx="17" cy="1459.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="26" y="1462.4058">NOTIFICATION_UNPAUSED : enum</text><ellipse cx="17" cy="1472" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="26" y="1475.2104">NOTIFICATION_PHYSICS_PROCESS : enum</text><ellipse cx="17" cy="1484.8047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="26" y="1488.0151">NOTIFICATION_PROCESS : enum</text><ellipse cx="17" cy="1497.6094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="1500.8198">NOTIFICATION_PARENTED : enum</text><ellipse cx="17" cy="1510.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="26" y="1513.6245">NOTIFICATION_UNPARENTED : enum</text><ellipse cx="17" cy="1523.2188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="26" y="1526.4292">NOTIFICATION_INSTANCED : enum</text><ellipse cx="17" cy="1536.0234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="26" y="1539.2339">NOTIFICATION_DRAG_BEGIN : enum</text><ellipse cx="17" cy="1548.8281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="26" y="1552.0386">NOTIFICATION_DRAG_END : enum</text><ellipse cx="17" cy="1561.6328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="26" y="1564.8433">NOTIFICATION_PATH_CHANGED : enum</text><ellipse cx="17" cy="1574.4375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="26" y="1577.6479">NOTIFICATION_INTERNAL_PROCESS : enum</text><ellipse cx="17" cy="1587.2422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="26" y="1590.4526">NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum</text><ellipse cx="17" cy="1600.0469" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="26" y="1603.2573">NOTIFICATION_POST_ENTER_TREE : enum</text><ellipse cx="17" cy="1612.8516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="26" y="1616.062">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="17" cy="1625.6563" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="26" y="1628.8667">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="17" cy="1638.4609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="26" y="1641.6714">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="17" cy="1651.2656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="26" y="1654.4761">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="17" cy="1664.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="26" y="1667.2808">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="17" cy="1676.875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="26" y="1680.0854">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="17" cy="1689.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="26" y="1692.8901">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text><ellipse cx="17" cy="1702.4844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="26" y="1705.6948">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="17" cy="1715.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="26" y="1718.4995">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="17" cy="1728.0938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="26" y="1731.3042">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="17" cy="1740.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="26" y="1744.1089">NOTIFICATION_CRASH : enum</text><ellipse cx="17" cy="1753.7031" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="26" y="1756.9136">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="17" cy="1766.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="26" y="1769.7183">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="17" cy="1779.3125" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="26" y="1782.5229">NOTIFICATION_APP_PAUSED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="1452" y1="1789.1172" y2="1789.1172"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1797.1172"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="26" y="1803.3276">operator=(const Node &amp; p_rval) : void</text><ellipse cx="17" cy="1812.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="26" y="1816.1323">get_class() const : String</text><ellipse cx="17" cy="1825.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="26" y="1828.937">_get_class_namev() const : const StringName *</text><ellipse cx="17" cy="1838.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="26" y="1841.7417">get_class_ptr_static() : void *</text><ellipse cx="17" cy="1851.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="26" y="1854.5464">get_class_static() : String</text><ellipse cx="17" cy="1864.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="26" y="1867.3511">get_parent_class_static() : String</text><ellipse cx="17" cy="1876.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="26" y="1880.1558">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="17" cy="1889.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="26" y="1892.9604">get_category_static() : String</text><ellipse cx="17" cy="1902.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="26" y="1905.7651">inherits_static() : String</text><ellipse cx="17" cy="1915.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="26" y="1918.5698">is_class(const String &amp; p_class) const : bool</text><ellipse cx="17" cy="1928.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="26" y="1931.3745">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="17" cy="1940.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="26" y="1944.1792">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><polygon fill="#FFFF44" points="17,1948.7734,21,1952.7734,17,1956.7734,13,1952.7734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="179" x="26" y="1956.9839">_get_bind_methods() : void (*)()</text><ellipse cx="17" cy="1966.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="26" y="1969.7886">initialize_class() : void</text><polygon fill="#FFFF44" points="17,1974.3828,21,1978.3828,17,1982.3828,13,1978.3828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="26" y="1982.5933">_initialize_classv() : void</text><polygon fill="#FFFF44" points="17,1987.1875,21,1991.1875,17,1995.1875,13,1991.1875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="26" y="1995.3979">_get_get() const : bool (Object::*)(const StringName &amp;,Variant &amp;) const</text><polygon fill="#FFFF44" points="17,1999.9922,21,2003.9922,17,2007.9922,13,2003.9922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="26" y="2008.2026">_getv(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><polygon fill="#FFFF44" points="17,2012.7969,21,2016.7969,17,2020.7969,13,2016.7969" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="26" y="2021.0073">_get_set() const : bool (Object::*)(const StringName &amp;,const Variant &amp;)</text><polygon fill="#FFFF44" points="17,2025.6016,21,2029.6016,17,2033.6016,13,2029.6016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="26" y="2033.812">_setv(const StringName &amp; p_name, const Variant &amp; p_property) : bool</text><polygon fill="#FFFF44" points="17,2038.4063,21,2042.4063,17,2046.4063,13,2042.4063" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="425" x="26" y="2046.6167">_get_get_property_list() const : void (Object::*)(List&lt;PropertyInfo&gt; *) const</text><polygon fill="#FFFF44" points="17,2051.2109,21,2055.2109,17,2059.2109,13,2055.2109" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="26" y="2059.4214">_get_property_listv(List&lt;PropertyInfo&gt; * p_list, bool p_reversed) const : void</text><polygon fill="#FFFF44" points="17,2064.0156,21,2068.0156,17,2072.0156,13,2068.0156" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="26" y="2072.2261">_get_notification() const : void (Object::*)(int)</text><polygon fill="#FFFF44" points="17,2076.8203,21,2080.8203,17,2084.8203,13,2080.8203" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="26" y="2085.0308">_notificationv(int p_notification, bool p_reversed) : void</text><polygon fill="#FFFF44" points="17,2089.625,21,2093.625,17,2097.625,13,2093.625" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="133" x="26" y="2097.8354">_get_category() : String</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2104.4297"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="26" y="2110.6401">_print_tree_pretty(const String &amp; prefix, const bool last) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2117.2344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="26" y="2123.4448">_print_tree(const Node * p_node) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2130.0391"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="26" y="2136.2495">_get_child_by_name(const StringName &amp; p_name) const : Node *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2142.8438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="26" y="2149.0542">_replace_connections_target(Node * p_new_target) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2155.6484"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="26" y="2161.8589">_validate_child_name(Node * p_child, bool p_force_human_readable = false) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2168.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="485" x="26" y="2174.6636">_generate_serial_child_name(const Node * p_child, StringName &amp; name) const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2181.2578"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="26" y="2187.4683">_propagate_reverse_notification(int p_notification) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2194.0625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="416" x="26" y="2200.2729">_propagate_deferred_notification(int p_notification, bool p_reverse) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2206.8672"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="26" y="2213.0776">_propagate_enter_tree() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2219.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="26" y="2225.8823">_propagate_ready() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2232.4766"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="26" y="2238.687">_propagate_exit_tree() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2245.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="26" y="2251.4917">_propagate_after_exit_tree() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2258.0859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="26" y="2264.2964">_propagate_validate_owner() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2270.8906"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="26" y="2277.1011">_print_stray_nodes() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2283.6953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="26" y="2289.9058">_propagate_pause_owner(Node * p_owner) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2296.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="26" y="2302.7104">_get_node_and_resource(const NodePath &amp; p_path) : Array</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2309.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="405" x="26" y="2315.5151">_duplicate_signals(const Node * p_original, Node * p_copy) const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2322.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="588" x="26" y="2328.3198">_duplicate_and_reown(Node * p_new_parent, const Map&lt;Node *,Node *&gt; &amp; p_reown_map) const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2334.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="502" x="26" y="2341.1245">_duplicate(int p_flags, Map&lt;const Node *,Node *&gt; * r_duplimap = __null) const : Node *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2347.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="26" y="2353.9292">_get_children() const : Array</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2360.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="26" y="2366.7339">_get_groups() const : Array</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2373.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="501" x="26" y="2379.5386">_rpc_bind(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2386.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="563" x="26" y="2392.3433">_rpc_unreliable_bind(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2398.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="26" y="2405.1479">_rpc_id_bind(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2411.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="579" x="26" y="2417.9526">_rpc_unreliable_id_bind(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="2424.5469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="26" y="2430.7573">_set_tree(SceneTree * p_tree) : void</text><polygon fill="#FFFF44" points="17,2435.3516,21,2439.3516,17,2443.3516,13,2439.3516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="26" y="2443.562">_block() : void</text><polygon fill="#FFFF44" points="17,2448.1563,21,2452.1563,17,2456.1563,13,2452.1563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="26" y="2456.3667">_unblock() : void</text><polygon fill="#FFFF44" points="17,2460.9609,21,2464.9609,17,2468.9609,13,2464.9609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="26" y="2469.1714">_notification(int p_notification) : void</text><polygon fill="#FFFF44" points="17,2473.7656,21,2477.7656,17,2481.7656,13,2477.7656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="26" y="2481.9761">add_child_notify(Node * p_child) : void</text><polygon fill="#FFFF44" points="17,2486.5703,21,2490.5703,17,2494.5703,13,2490.5703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="26" y="2494.7808">remove_child_notify(Node * p_child) : void</text><polygon fill="#FFFF44" points="17,2499.375,21,2503.375,17,2507.375,13,2503.375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="26" y="2507.5854">move_child_notify(Node * p_child) : void</text><polygon fill="#FFFF44" points="17,2512.1797,21,2516.1797,17,2520.1797,13,2516.1797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="405" x="26" y="2520.3901">_propagate_replace_owner(Node * p_owner, Node * p_by_owner) : void</text><polygon fill="#FFFF44" points="17,2524.9844,21,2528.9844,17,2532.9844,13,2528.9844" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="26" y="2533.1948">_bind_methods() : void</text><polygon fill="#FFFF44" points="17,2537.7891,21,2541.7891,17,2545.7891,13,2541.7891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="209" x="26" y="2545.9995">_get_name_num_separator() : String</text><polygon fill="#FFFF44" points="17,2550.5938,21,2554.5938,17,2558.5938,13,2554.5938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="26" y="2558.8042">_add_child_nocheck(Node * p_child, const StringName &amp; p_name) : void</text><polygon fill="#FFFF44" points="17,2563.3984,21,2567.3984,17,2571.3984,13,2567.3984" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="26" y="2571.6089">_set_owner_nocheck(Node * p_owner) : void</text><polygon fill="#FFFF44" points="17,2576.2031,21,2580.2031,17,2584.2031,13,2580.2031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="26" y="2584.4136">_set_name_nocheck(const StringName &amp; p_name) : void</text><ellipse cx="17" cy="2594.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="26" y="2597.2183">get_name() const : StringName</text><ellipse cx="17" cy="2606.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="26" y="2610.0229">set_name(const String &amp; p_name) : void</text><ellipse cx="17" cy="2619.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="26" y="2622.8276">add_child(Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="17" cy="2632.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="26" y="2635.6323">add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="17" cy="2645.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="26" y="2648.437">remove_child(Node * p_child) : void</text><ellipse cx="17" cy="2658.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="26" y="2661.2417">get_child_count() const : int</text><ellipse cx="17" cy="2670.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="26" y="2674.0464">get_child(int p_index) const : Node *</text><ellipse cx="17" cy="2683.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="26" y="2686.8511">has_node(const NodePath &amp; p_path) const : bool</text><ellipse cx="17" cy="2696.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="26" y="2699.6558">get_node(const NodePath &amp; p_path) const : Node *</text><ellipse cx="17" cy="2709.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="26" y="2712.4604">get_node_or_null(const NodePath &amp; p_path) const : Node *</text><ellipse cx="17" cy="2722.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="26" y="2725.2651">find_node(const String &amp; p_mask, bool p_recursive = true, bool p_owned = true) const : Node *</text><ellipse cx="17" cy="2734.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="26" y="2738.0698">has_node_and_resource(const NodePath &amp; p_path) const : bool</text><ellipse cx="17" cy="2747.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="886" x="26" y="2750.8745">get_node_and_resource(const NodePath &amp; p_path, RES &amp; r_res, Vector&lt;StringName&gt; &amp; r_leftover_subpath, bool p_last_is_property = true) const : Node *</text><ellipse cx="17" cy="2760.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="26" y="2763.6792">get_parent() const : Node *</text><ellipse cx="17" cy="2773.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="26" y="2776.4839">find_parent(const String &amp; p_mask) const : Node *</text><ellipse cx="17" cy="2786.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="26" y="2789.2886">get_tree() const : SceneTree *</text><ellipse cx="17" cy="2798.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="2802.0933">is_inside_tree() const : bool</text><ellipse cx="17" cy="2811.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="26" y="2814.8979">is_a_parent_of(const Node * p_node) const : bool</text><ellipse cx="17" cy="2824.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="26" y="2827.7026">is_greater_than(const Node * p_node) const : bool</text><ellipse cx="17" cy="2837.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="2840.5073">get_path() const : NodePath</text><ellipse cx="17" cy="2850.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="26" y="2853.312">get_path_to(const Node * p_node) const : NodePath</text><ellipse cx="17" cy="2862.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="26" y="2866.1167">find_common_parent_with(const Node * p_node) const : Node *</text><ellipse cx="17" cy="2875.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="455" x="26" y="2878.9214">add_to_group(const StringName &amp; p_identifier, bool p_persistent = false) : void</text><ellipse cx="17" cy="2888.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="26" y="2891.7261">remove_from_group(const StringName &amp; p_identifier) : void</text><ellipse cx="17" cy="2901.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="26" y="2904.5308">is_in_group(const StringName &amp; p_identifier) const : bool</text><ellipse cx="17" cy="2914.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="26" y="2917.3354">get_groups(List&lt;Node::GroupInfo&gt; * p_groups) const : void</text><ellipse cx="17" cy="2926.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="26" y="2930.1401">get_persistent_group_count() const : int</text><ellipse cx="17" cy="2939.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="26" y="2942.9448">move_child(Node * p_child, int p_pos) : void</text><ellipse cx="17" cy="2952.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="26" y="2955.7495">raise() : void</text><ellipse cx="17" cy="2965.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="26" y="2968.5542">set_owner(Node * p_owner) : void</text><ellipse cx="17" cy="2978.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="26" y="2981.3589">get_owner() const : Node *</text><ellipse cx="17" cy="2990.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="26" y="2994.1636">get_owned_by(Node * p_by, List&lt;Node *&gt; * p_owned) : void</text><ellipse cx="17" cy="3003.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="26" y="3006.9683">remove_and_skip() : void</text><ellipse cx="17" cy="3016.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="26" y="3019.7729">get_index() const : int</text><ellipse cx="17" cy="3029.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="26" y="3032.5776">print_tree() : void</text><ellipse cx="17" cy="3042.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="26" y="3045.3823">print_tree_pretty() : void</text><ellipse cx="17" cy="3054.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="26" y="3058.187">set_filename(const String &amp; p_filename) : void</text><ellipse cx="17" cy="3067.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="26" y="3070.9917">get_filename() const : String</text><ellipse cx="17" cy="3080.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="26" y="3083.7964">set_editor_description(const String &amp; p_editor_description) : void</text><ellipse cx="17" cy="3093.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="26" y="3096.6011">get_editor_description() const : String</text><ellipse cx="17" cy="3106.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="26" y="3109.4058">set_editable_instance(Node * p_node, bool p_editable) : void</text><ellipse cx="17" cy="3119" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="26" y="3122.2104">is_editable_instance(const Node * p_node) const : bool</text><ellipse cx="17" cy="3131.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="26" y="3135.0151">get_deepest_editable_node(Node * start_node) const : Node *</text><ellipse cx="17" cy="3144.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="26" y="3147.8198">propagate_notification(int p_notification) : void</text><ellipse cx="17" cy="3157.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="26" y="3160.6245">propagate_call(const StringName &amp; p_method, const Array &amp; p_args = Array(), const bool p_parent_first = false) : void</text><ellipse cx="17" cy="3170.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="26" y="3173.4292">set_physics_process(bool p_process) : void</text><ellipse cx="17" cy="3183.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="26" y="3186.2339">get_physics_process_delta_time() const : float</text><ellipse cx="17" cy="3195.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="26" y="3199.0386">is_physics_processing() const : bool</text><ellipse cx="17" cy="3208.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="26" y="3211.8433">set_process(bool p_idle_process) : void</text><ellipse cx="17" cy="3221.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="26" y="3224.6479">get_process_delta_time() const : float</text><ellipse cx="17" cy="3234.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="3237.4526">is_processing() const : bool</text><ellipse cx="17" cy="3247.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="26" y="3250.2573">set_physics_process_internal(bool p_process_internal) : void</text><ellipse cx="17" cy="3259.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="26" y="3263.062">is_physics_processing_internal() const : bool</text><ellipse cx="17" cy="3272.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="26" y="3275.8667">set_process_internal(bool p_idle_process_internal) : void</text><ellipse cx="17" cy="3285.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="26" y="3288.6714">is_processing_internal() const : bool</text><ellipse cx="17" cy="3298.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="26" y="3301.4761">set_process_priority(int p_priority) : void</text><ellipse cx="17" cy="3311.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="26" y="3314.2808">get_process_priority() const : int</text><ellipse cx="17" cy="3323.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="26" y="3327.0854">set_process_input(bool p_enable) : void</text><ellipse cx="17" cy="3336.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="26" y="3339.8901">is_processing_input() const : bool</text><ellipse cx="17" cy="3349.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="26" y="3352.6948">set_process_unhandled_input(bool p_enable) : void</text><ellipse cx="17" cy="3362.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="26" y="3365.4995">is_processing_unhandled_input() const : bool</text><ellipse cx="17" cy="3375.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="26" y="3378.3042">set_process_unhandled_key_input(bool p_enable) : void</text><ellipse cx="17" cy="3387.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="26" y="3391.1089">is_processing_unhandled_key_input() const : bool</text><ellipse cx="17" cy="3400.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="26" y="3403.9136">get_position_in_parent() const : int</text><ellipse cx="17" cy="3413.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="591" x="26" y="3416.7183">duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *</text><ellipse cx="17" cy="3426.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="468" x="26" y="3429.5229">duplicate_and_reown(const Map&lt;Node *,Node *&gt; &amp; p_reown_map) const : Node *</text><ellipse cx="17" cy="3439.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="26" y="3442.3276">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap) const : Node *</text><ellipse cx="17" cy="3451.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="26" y="3455.1323">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : Node *</text><ellipse cx="17" cy="3464.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="26" y="3467.937">remap_node_resources(Node * p_node, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="17" cy="3477.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="571" x="26" y="3480.7417">remap_nested_resources(RES p_resource, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="17" cy="3490.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="26" y="3493.5464">set_scene_instance_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="17" cy="3503.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="26" y="3506.3511">get_scene_instance_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="17" cy="3515.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="26" y="3519.1558">set_scene_inherited_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="17" cy="3528.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="26" y="3531.9604">get_scene_inherited_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="17" cy="3541.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="26" y="3544.7651">set_scene_instance_load_placeholder(bool p_enable) : void</text><ellipse cx="17" cy="3554.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="26" y="3557.5698">get_scene_instance_load_placeholder() const : bool</text><ellipse cx="17" cy="3567.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1199" x="26" y="3570.3745">make_binds(const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Vector&lt;Variant&gt;</text><ellipse cx="17" cy="3579.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="26" y="3583.1792">replace_by(Node * p_node, bool p_keep_data = false) : void</text><ellipse cx="17" cy="3592.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="26" y="3595.9839">set_pause_mode(Node::PauseMode p_mode) : void</text><ellipse cx="17" cy="3605.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="26" y="3608.7886">get_pause_mode() const : Node::PauseMode</text><ellipse cx="17" cy="3618.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="26" y="3621.5933">can_process() const : bool</text><ellipse cx="17" cy="3631.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="26" y="3634.3979">can_process_notification(int p_what) const : bool</text><ellipse cx="17" cy="3643.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="26" y="3647.2026">request_ready() : void</text><ellipse cx="17" cy="3656.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="26" y="3660.0073">print_stray_nodes() : void</text><ellipse cx="17" cy="3669.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="26" y="3672.812">validate_child_name(Node * p_child) : String</text><ellipse cx="17" cy="3682.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="3685.6167">queue_delete() : void</text><ellipse cx="17" cy="3695.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="360" x="26" y="3698.4214">set_human_readable_collision_renaming(bool p_enabled) : void</text><ellipse cx="17" cy="3708.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="123" x="26" y="3711.2261">init_node_hrcr() : void</text><ellipse cx="17" cy="3720.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="3724.0308">force_parent_owned() : void</text><ellipse cx="17" cy="3733.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="26" y="3736.8354">set_import_path(const NodePath &amp; p_import_path) : void</text><ellipse cx="17" cy="3746.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="26" y="3749.6401">get_import_path() const : NodePath</text><ellipse cx="17" cy="3759.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="26" y="3762.4448">is_owned_by_parent() const : bool</text><ellipse cx="17" cy="3772.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="26" y="3775.2495">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="17" cy="3784.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="26" y="3788.0542">clear_internal_tree_resource_paths() : void</text><ellipse cx="17" cy="3797.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="26" y="3800.8589">get_viewport() const : Viewport *</text><ellipse cx="17" cy="3810.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="26" y="3813.6636">get_configuration_warning() const : String</text><ellipse cx="17" cy="3823.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="26" y="3826.4683">update_configuration_warning() : void</text><ellipse cx="17" cy="3836.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="26" y="3839.2729">set_display_folded(bool p_folded) : void</text><ellipse cx="17" cy="3848.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="26" y="3852.0776">is_displayed_folded() const : bool</text><ellipse cx="17" cy="3861.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="26" y="3864.8823">set_network_master(int p_peer_id, bool p_recursive = true) : void</text><ellipse cx="17" cy="3874.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="26" y="3877.687">get_network_master() const : int</text><ellipse cx="17" cy="3887.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="26" y="3890.4917">is_network_master() const : bool</text><ellipse cx="17" cy="3900.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="26" y="3903.2964">rpc_config(const StringName &amp; p_method, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="17" cy="3912.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="26" y="3916.1011">rset_config(const StringName &amp; p_property, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="17" cy="3925.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1262" x="26" y="3928.9058">rpc(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17" cy="3938.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1324" x="26" y="3941.7104">rpc_unreliable(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17" cy="3951.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="26" y="3954.5151">rpc_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17" cy="3964.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1421" x="26" y="3967.3198">rpc_unreliable_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17" cy="3976.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="26" y="3980.1245">rset(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17" cy="3989.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="26" y="3992.9292">rset_unreliable(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17" cy="4002.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="26" y="4005.7339">rset_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17" cy="4015.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="26" y="4018.5386">rset_unreliable_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17" cy="4028.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="654" x="26" y="4031.3433">rpcp(int p_peer_id, bool p_unreliable, const StringName &amp; p_method, const Variant ** p_arg, int p_argcount) : void</text><ellipse cx="17" cy="4040.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="26" y="4044.1479">rsetp(int p_peer_id, bool p_unreliable, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17" cy="4053.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="26" y="4056.9526">get_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="17" cy="4066.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="26" y="4069.7573">get_custom_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="17" cy="4079.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="26" y="4082.562">set_custom_multiplayer(Ref&lt;MultiplayerAPI&gt; p_multiplayer) : void</text><ellipse cx="17" cy="4092.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="659" x="26" y="4095.3667">get_node_rpc_mode(const StringName &amp; p_method) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="17" cy="4104.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="26" y="4108.1714">get_node_rset_mode(const StringName &amp; p_property) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="17" cy="4117.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="26" y="4120.9761">Node() : void</text><ellipse cx="17" cy="4130.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="26" y="4133.7808">~Node() : void</text><!--MD5=[eb192d77dba9a1188ad367651d748528]
class C_0002074383603489565895--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L165" target="_top" title="CanvasItem" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L165" xlink:show="new" xlink:title="CanvasItem" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="2019.9219" id="C_0002074383603489565895" style="stroke: #A80036; stroke-width: 1.5;" width="1572" x="1514" y="2818.4531"/><ellipse cx="2259.75" cy="2834.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2259.8594,2829.7969 L2258.7031,2834.875 L2261.0313,2834.875 L2259.8594,2829.7969 Z M2258.375,2827.5625 L2261.3594,2827.5625 L2264.7188,2839.9531 L2262.2656,2839.9531 L2261.5,2836.8906 L2258.2188,2836.8906 L2257.4688,2839.9531 L2255.0313,2839.9531 L2258.375,2827.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="72" x="2280.25" y="2838.6074">CanvasItem</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1515" x2="3085" y1="2850.4531" y2="2850.4531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2858.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1534" y="2864.6636">_class_name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L181" target="_top" title="xform_change" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L181" xlink:show="new" xlink:title="xform_change" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2869.2578"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2871.2578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L181" target="_top" title="xform_change" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L181" xlink:show="new" xlink:title="xform_change" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="1534" y="2877.4683">xform_change : SelfList&lt;Node&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L183" target="_top" title="canvas_item" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L183" xlink:show="new" xlink:title="canvas_item" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2882.0625"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2884.0625"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L183" target="_top" title="canvas_item" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L183" xlink:show="new" xlink:title="canvas_item" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1534" y="2890.2729">canvas_item : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L184" target="_top" title="group" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L184" xlink:show="new" xlink:title="group" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2894.8672"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2896.8672"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L184" target="_top" title="group" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L184" xlink:show="new" xlink:title="group" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1534" y="2903.0776">group : String</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L186" target="_top" title="canvas_layer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L186" xlink:show="new" xlink:title="canvas_layer" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2907.6719"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2909.6719"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L186" target="_top" title="canvas_layer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L186" xlink:show="new" xlink:title="canvas_layer" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1534" y="2915.8823">canvas_layer : CanvasLayer *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L188" target="_top" title="modulate" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L188" xlink:show="new" xlink:title="modulate" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2920.4766"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2922.4766"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L188" target="_top" title="modulate" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L188" xlink:show="new" xlink:title="modulate" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1534" y="2928.687">modulate : Color</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L189" target="_top" title="self_modulate" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L189" xlink:show="new" xlink:title="self_modulate" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2933.2813"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2935.2813"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L189" target="_top" title="self_modulate" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L189" xlink:show="new" xlink:title="self_modulate" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1534" y="2941.4917">self_modulate : Color</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L191" target="_top" title="children_items" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L191" xlink:show="new" xlink:title="children_items" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2946.0859"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2948.0859"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L191" target="_top" title="children_items" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L191" xlink:show="new" xlink:title="children_items" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="1534" y="2954.2964">children_items : List&lt;CanvasItem *&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L192" target="_top" title="C" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L192" xlink:show="new" xlink:title="C" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2958.8906"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2960.8906"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L192" target="_top" title="C" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L192" xlink:show="new" xlink:title="C" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1534" y="2967.1011">C : List&lt;CanvasItem *&gt;::Element *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L194" target="_top" title="light_mask" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L194" xlink:show="new" xlink:title="light_mask" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2971.6953"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2973.6953"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L194" target="_top" title="light_mask" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L194" xlink:show="new" xlink:title="light_mask" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="1534" y="2979.9058">light_mask : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L196" target="_top" title="first_draw" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L196" xlink:show="new" xlink:title="first_draw" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2984.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2986.5"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L196" target="_top" title="first_draw" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L196" xlink:show="new" xlink:title="first_draw" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="1534" y="2992.7104">first_draw : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L197" target="_top" title="visible" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L197" xlink:show="new" xlink:title="visible" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="2997.3047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="2999.3047"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L197" target="_top" title="visible" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L197" xlink:show="new" xlink:title="visible" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1534" y="3005.5151">visible : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L198" target="_top" title="pending_update" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L198" xlink:show="new" xlink:title="pending_update" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3010.1094"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3012.1094"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L198" target="_top" title="pending_update" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L198" xlink:show="new" xlink:title="pending_update" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="1534" y="3018.3198">pending_update : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L199" target="_top" title="toplevel" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L199" xlink:show="new" xlink:title="toplevel" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3022.9141"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3024.9141"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L199" target="_top" title="toplevel" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L199" xlink:show="new" xlink:title="toplevel" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="1534" y="3031.1245">toplevel : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L200" target="_top" title="drawing" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L200" xlink:show="new" xlink:title="drawing" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3035.7188"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3037.7188"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L200" target="_top" title="drawing" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L200" xlink:show="new" xlink:title="drawing" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1534" y="3043.9292">drawing : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L201" target="_top" title="block_transform_notify" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L201" xlink:show="new" xlink:title="block_transform_notify" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3048.5234"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3050.5234"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L201" target="_top" title="block_transform_notify" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L201" xlink:show="new" xlink:title="block_transform_notify" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1534" y="3056.7339">block_transform_notify : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L202" target="_top" title="behind" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L202" xlink:show="new" xlink:title="behind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3061.3281"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3063.3281"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L202" target="_top" title="behind" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L202" xlink:show="new" xlink:title="behind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1534" y="3069.5386">behind : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L203" target="_top" title="use_parent_material" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L203" xlink:show="new" xlink:title="use_parent_material" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3074.1328"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3076.1328"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L203" target="_top" title="use_parent_material" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L203" xlink:show="new" xlink:title="use_parent_material" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1534" y="3082.3433">use_parent_material : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L204" target="_top" title="notify_local_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L204" xlink:show="new" xlink:title="notify_local_transform" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3086.9375"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3088.9375"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L204" target="_top" title="notify_local_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L204" xlink:show="new" xlink:title="notify_local_transform" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1534" y="3095.1479">notify_local_transform : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L205" target="_top" title="notify_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L205" xlink:show="new" xlink:title="notify_transform" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3099.7422"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3101.7422"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L205" target="_top" title="notify_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L205" xlink:show="new" xlink:title="notify_transform" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1534" y="3107.9526">notify_transform : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L207" target="_top" title="material" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L207" xlink:show="new" xlink:title="material" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3112.5469"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3114.5469"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L207" target="_top" title="material" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L207" xlink:show="new" xlink:title="material" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="1534" y="3120.7573">material : Ref&lt;Material&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L209" target="_top" title="global_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L209" xlink:show="new" xlink:title="global_transform" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3125.3516"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3127.3516"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L209" target="_top" title="global_transform" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L209" xlink:show="new" xlink:title="global_transform" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="1534" y="3133.562">global_transform : Transform2D</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L210" target="_top" title="global_invalid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L210" xlink:show="new" xlink:title="global_invalid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3138.1563"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3140.1563"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L210" target="_top" title="global_invalid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L210" xlink:show="new" xlink:title="global_invalid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1534" y="3146.3667">global_invalid : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L226" target="_top" title="current_item_drawn" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L226" xlink:show="new" xlink:title="current_item_drawn" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1520" y="3150.9609"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3152.9609"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L226" target="_top" title="current_item_drawn" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L226" xlink:show="new" xlink:title="current_item_drawn" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="202" x="1534" y="3159.1714">current_item_drawn : CanvasItem *</text></a><ellipse cx="1525" cy="3168.7656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1534" y="3171.9761">NOTIFICATION_TRANSFORM_CHANGED : enum</text><ellipse cx="1525" cy="3181.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1534" y="3184.7808">NOTIFICATION_DRAW : enum</text><ellipse cx="1525" cy="3194.375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1534" y="3197.5854">NOTIFICATION_VISIBILITY_CHANGED : enum</text><ellipse cx="1525" cy="3207.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1534" y="3210.3901">NOTIFICATION_ENTER_CANVAS : enum</text><ellipse cx="1525" cy="3219.9844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1534" y="3223.1948">NOTIFICATION_EXIT_CANVAS : enum</text><ellipse cx="1525" cy="3232.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1534" y="3235.9995">NOTIFICATION_LOCAL_TRANSFORM_CHANGED : enum</text><ellipse cx="1525" cy="3245.5938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="1534" y="3248.8042">NOTIFICATION_WORLD_2D_CHANGED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1515" x2="3085" y1="3255.3984" y2="3255.3984"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3263.3984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1534" y="3269.6089">operator=(const CanvasItem &amp; p_rval) : void</text><ellipse cx="1525" cy="3279.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1534" y="3282.4136">get_class() const : String</text><ellipse cx="1525" cy="3292.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1534" y="3295.2183">_get_class_namev() const : const StringName *</text><ellipse cx="1525" cy="3304.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="1534" y="3308.0229">get_class_ptr_static() : void *</text><ellipse cx="1525" cy="3317.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="1534" y="3320.8276">get_class_static() : String</text><ellipse cx="1525" cy="3330.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="1534" y="3333.6323">get_parent_class_static() : String</text><ellipse cx="1525" cy="3343.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="1534" y="3346.437">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="1525" cy="3356.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="1534" y="3359.2417">get_category_static() : String</text><ellipse cx="1525" cy="3368.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="1534" y="3372.0464">inherits_static() : String</text><ellipse cx="1525" cy="3381.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1534" y="3384.8511">is_class(const String &amp; p_class) const : bool</text><ellipse cx="1525" cy="3394.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1534" y="3397.6558">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="1525" cy="3407.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1534" y="3410.4604">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><polygon fill="#FFFF44" points="1525,3415.0547,1529,3419.0547,1525,3423.0547,1521,3419.0547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="179" x="1534" y="3423.2651">_get_bind_methods() : void (*)()</text><ellipse cx="1525" cy="3432.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="1534" y="3436.0698">initialize_class() : void</text><polygon fill="#FFFF44" points="1525,3440.6641,1529,3444.6641,1525,3448.6641,1521,3444.6641" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="1534" y="3448.8745">_initialize_classv() : void</text><polygon fill="#FFFF44" points="1525,3453.4688,1529,3457.4688,1525,3461.4688,1521,3457.4688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1534" y="3461.6792">_get_get() const : bool (Object::*)(const StringName &amp;,Variant &amp;) const</text><polygon fill="#FFFF44" points="1525,3466.2734,1529,3470.2734,1525,3474.2734,1521,3470.2734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="1534" y="3474.4839">_getv(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><polygon fill="#FFFF44" points="1525,3479.0781,1529,3483.0781,1525,3487.0781,1521,3483.0781" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1534" y="3487.2886">_get_set() const : bool (Object::*)(const StringName &amp;,const Variant &amp;)</text><polygon fill="#FFFF44" points="1525,3491.8828,1529,3495.8828,1525,3499.8828,1521,3495.8828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="1534" y="3500.0933">_setv(const StringName &amp; p_name, const Variant &amp; p_property) : bool</text><polygon fill="#FFFF44" points="1525,3504.6875,1529,3508.6875,1525,3512.6875,1521,3508.6875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="425" x="1534" y="3512.8979">_get_get_property_list() const : void (Object::*)(List&lt;PropertyInfo&gt; *) const</text><polygon fill="#FFFF44" points="1525,3517.4922,1529,3521.4922,1525,3525.4922,1521,3521.4922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="1534" y="3525.7026">_get_property_listv(List&lt;PropertyInfo&gt; * p_list, bool p_reversed) const : void</text><polygon fill="#FFFF44" points="1525,3530.2969,1529,3534.2969,1525,3538.2969,1521,3534.2969" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1534" y="3538.5073">_get_notification() const : void (Object::*)(int)</text><polygon fill="#FFFF44" points="1525,3543.1016,1529,3547.1016,1525,3551.1016,1521,3547.1016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="1534" y="3551.312">_notificationv(int p_notification, bool p_reversed) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3557.9063"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1534" y="3564.1167">_toplevel_raise_self() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3570.7109"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="1534" y="3576.9214">_propagate_visibility_changed(bool p_visible) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3583.5156"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1534" y="3589.7261">_update_callback() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3596.3203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1534" y="3602.5308">_enter_canvas() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3609.125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1534" y="3615.3354">_exit_canvas() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3621.9297"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="1534" y="3628.1401">_notify_transform(CanvasItem * p_node) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3634.7344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1534" y="3640.9448">_set_on_top(bool p_on_top) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1522" y="3647.5391"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1534" y="3653.7495">_is_on_top() const : bool</text><polygon fill="#FFFF44" points="1525,3658.3438,1529,3662.3438,1525,3666.3438,1521,3662.3438" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1534" y="3666.5542">_notify_transform() : void</text><polygon fill="#FFFF44" points="1525,3671.1484,1529,3675.1484,1525,3679.1484,1521,3675.1484" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="1534" y="3679.3589">item_rect_changed(bool p_size_changed = true) : void</text><polygon fill="#FFFF44" points="1525,3683.9531,1529,3687.9531,1525,3691.9531,1521,3687.9531" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1534" y="3692.1636">_notification(int p_what) : void</text><polygon fill="#FFFF44" points="1525,3696.7578,1529,3700.7578,1525,3704.7578,1521,3700.7578" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1534" y="3704.9683">_bind_methods() : void</text><ellipse cx="1525" cy="3714.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="1534" y="3717.7729">_edit_is_selected_on_click(const Point2 &amp; p_point, double p_tolerance) const : bool</text><ellipse cx="1525" cy="3727.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="1534" y="3730.5776">_edit_set_state(const Dictionary &amp; p_state) : void</text><ellipse cx="1525" cy="3740.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="1534" y="3743.3823">_edit_get_state() const : Dictionary</text><ellipse cx="1525" cy="3752.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="1534" y="3756.187">_edit_set_position(const Point2 &amp; p_position) = 0 : void</text><ellipse cx="1525" cy="3765.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="214" x="1534" y="3768.9917">_edit_get_position() const = 0 : Point2</text><ellipse cx="1525" cy="3778.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="276" x="1534" y="3781.7964">_edit_set_scale(const Size2 &amp; p_scale) = 0 : void</text><ellipse cx="1525" cy="3791.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="1534" y="3794.6011">_edit_get_scale() const = 0 : Size2</text><ellipse cx="1525" cy="3804.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="1534" y="3807.4058">_edit_use_rotation() const : bool</text><ellipse cx="1525" cy="3817" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1534" y="3820.2104">_edit_set_rotation(float p_rotation) : void</text><ellipse cx="1525" cy="3829.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="1534" y="3833.0151">_edit_get_rotation() const : float</text><ellipse cx="1525" cy="3842.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1534" y="3845.8198">_edit_use_rect() const : bool</text><ellipse cx="1525" cy="3855.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="1534" y="3858.6245">_edit_set_rect(const Rect2 &amp; p_rect) : void</text><ellipse cx="1525" cy="3868.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1534" y="3871.4292">_edit_get_rect() const : Rect2</text><ellipse cx="1525" cy="3881.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1534" y="3884.2339">_edit_get_minimum_size() const : Size2</text><ellipse cx="1525" cy="3893.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1534" y="3897.0386">_edit_use_pivot() const : bool</text><ellipse cx="1525" cy="3906.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1534" y="3909.8433">_edit_set_pivot(const Point2 &amp; p_pivot) : void</text><ellipse cx="1525" cy="3919.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1534" y="3922.6479">_edit_get_pivot() const : Point2</text><ellipse cx="1525" cy="3932.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1534" y="3935.4526">_edit_get_transform() const : Transform2D</text><ellipse cx="1525" cy="3945.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1534" y="3948.2573">set_visible(bool p_visible) : void</text><ellipse cx="1525" cy="3957.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="1534" y="3961.062">is_visible() const : bool</text><ellipse cx="1525" cy="3970.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="1534" y="3973.8667">is_visible_in_tree() const : bool</text><ellipse cx="1525" cy="3983.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1534" y="3986.6714">show() : void</text><ellipse cx="1525" cy="3996.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1534" y="3999.4761">hide() : void</text><ellipse cx="1525" cy="4009.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1534" y="4012.2808">update() : void</text><ellipse cx="1525" cy="4021.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1534" y="4025.0854">set_light_mask(int p_light_mask) : void</text><ellipse cx="1525" cy="4034.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1534" y="4037.8901">get_light_mask() const : int</text><ellipse cx="1525" cy="4047.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="1534" y="4050.6948">set_modulate(const Color &amp; p_modulate) : void</text><ellipse cx="1525" cy="4060.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1534" y="4063.4995">get_modulate() const : Color</text><ellipse cx="1525" cy="4073.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="1534" y="4076.3042">set_self_modulate(const Color &amp; p_self_modulate) : void</text><ellipse cx="1525" cy="4085.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1534" y="4089.1089">get_self_modulate() const : Color</text><ellipse cx="1525" cy="4098.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="748" x="1534" y="4101.9136">draw_line(const Point2 &amp; p_from, const Point2 &amp; p_to, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4111.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="1534" y="4114.7183">draw_polyline(const Vector&lt;Point2&gt; &amp; p_points, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4124.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="815" x="1534" y="4127.5229">draw_polyline_colors(const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4137.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1055" x="1534" y="4140.3276">draw_arc(const Vector2 &amp; p_center, float p_radius, float p_start_angle, float p_end_angle, int p_point_count, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4149.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="718" x="1534" y="4153.1323">draw_multiline(const Vector&lt;Point2&gt; &amp; p_points, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4162.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="820" x="1534" y="4165.937">draw_multiline_colors(const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4175.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="737" x="1534" y="4178.7417">draw_rect(const Rect2 &amp; p_rect, const Color &amp; p_color, bool p_filled = true, float p_width = 1.0, bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4188.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="1534" y="4191.5464">draw_circle(const Point2 &amp; p_pos, float p_radius, const Color &amp; p_color) : void</text><ellipse cx="1525" cy="4201.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1024" x="1534" y="4204.3511">draw_texture(const Ref&lt;Texture&gt; &amp; p_texture, const Point2 &amp; p_pos, const Color &amp; p_modulate = Color(1, 1, 1, 1), const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;()) : void</text><ellipse cx="1525" cy="4213.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1297" x="1534" y="4217.1558">draw_texture_rect(const Ref&lt;Texture&gt; &amp; p_texture, const Rect2 &amp; p_rect, bool p_tile = false, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;()) : void</text><ellipse cx="1525" cy="4226.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1511" x="1534" y="4229.9604">draw_texture_rect_region(const Ref&lt;Texture&gt; &amp; p_texture, const Rect2 &amp; p_rect, const Rect2 &amp; p_src_rect, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;(), bool p_clip_uv = false) : void</text><ellipse cx="1525" cy="4239.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="1534" y="4242.7651">draw_style_box(const Ref&lt;StyleBox&gt; &amp; p_style_box, const Rect2 &amp; p_rect) : void</text><ellipse cx="1525" cy="4252.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1385" x="1534" y="4255.5698">draw_primitive(const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs, Ref&lt;Texture&gt; p_texture = = Ref&lt;Texture&gt;(), float p_width = 1, const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;()) : void</text><ellipse cx="1525" cy="4265.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1546" x="1534" y="4268.3745">draw_polygon(const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), Ref&lt;Texture&gt; p_texture = = Ref&lt;Texture&gt;(), const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;(), bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4277.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1533" x="1534" y="4281.1792">draw_colored_polygon(const Vector&lt;Point2&gt; &amp; p_points, const Color &amp; p_color, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), Ref&lt;Texture&gt; p_texture = = Ref&lt;Texture&gt;(), const Ref&lt;Texture&gt; &amp; p_normal_map = Ref&lt;Texture&gt;(), bool p_antialiased = false) : void</text><ellipse cx="1525" cy="4290.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1245" x="1534" y="4293.9839">draw_mesh(const Ref&lt;Mesh&gt; &amp; p_mesh, const Ref&lt;Texture&gt; &amp; p_texture, const Ref&lt;Texture&gt; &amp; p_normal_map, const Transform2D &amp; p_transform = Transform2D(), const Color &amp; p_modulate = Color(1, 1, 1)) : void</text><ellipse cx="1525" cy="4303.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="772" x="1534" y="4306.7886">draw_multimesh(const Ref&lt;MultiMesh&gt; &amp; p_multimesh, const Ref&lt;Texture&gt; &amp; p_texture, const Ref&lt;Texture&gt; &amp; p_normal_map) : void</text><ellipse cx="1525" cy="4316.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="867" x="1534" y="4319.5933">draw_string(const Ref&lt;Font&gt; &amp; p_font, const Point2 &amp; p_pos, const String &amp; p_text, const Color &amp; p_modulate = Color(1, 1, 1), int p_clip_w = -1) : void</text><ellipse cx="1525" cy="4329.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="923" x="1534" y="4332.3979">draw_char(const Ref&lt;Font&gt; &amp; p_font, const Point2 &amp; p_pos, const String &amp; p_char, const String &amp; p_next = "", const Color &amp; p_modulate = Color(1, 1, 1)) : float</text><ellipse cx="1525" cy="4341.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="1534" y="4345.2026">draw_set_transform(const Point2 &amp; p_offset, float p_rot, const Size2 &amp; p_scale) : void</text><ellipse cx="1525" cy="4354.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="1534" y="4358.0073">draw_set_transform_matrix(const Transform2D &amp; p_matrix) : void</text><ellipse cx="1525" cy="4367.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="234" x="1534" y="4370.812">get_current_item_drawn() : CanvasItem *</text><ellipse cx="1525" cy="4380.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1534" y="4383.6167">set_as_toplevel(bool p_toplevel) : void</text><ellipse cx="1525" cy="4393.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="1534" y="4396.4214">is_set_as_toplevel() const : bool</text><ellipse cx="1525" cy="4406.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="1534" y="4409.2261">set_draw_behind_parent(bool p_enable) : void</text><ellipse cx="1525" cy="4418.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="1534" y="4422.0308">is_draw_behind_parent_enabled() const : bool</text><ellipse cx="1525" cy="4431.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="1534" y="4434.8354">get_parent_item() const : CanvasItem *</text><ellipse cx="1525" cy="4444.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="1534" y="4447.6401">get_transform() const = 0 : Transform2D</text><ellipse cx="1525" cy="4457.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="1534" y="4460.4448">get_global_transform() const : Transform2D</text><ellipse cx="1525" cy="4470.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1534" y="4473.2495">get_global_transform_with_canvas() const : Transform2D</text><ellipse cx="1525" cy="4482.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1534" y="4486.0542">get_toplevel() const : CanvasItem *</text><ellipse cx="1525" cy="4495.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1534" y="4498.8589">get_canvas_item() const : RID</text><ellipse cx="1525" cy="4508.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="1534" y="4511.6636">set_block_transform_notify(bool p_enable) : void</text><ellipse cx="1525" cy="4521.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="1534" y="4524.4683">is_block_transform_notify_enabled() const : bool</text><ellipse cx="1525" cy="4534.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="1534" y="4537.2729">get_canvas_transform() const : Transform2D</text><ellipse cx="1525" cy="4546.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="1534" y="4550.0776">get_viewport_transform() const : Transform2D</text><ellipse cx="1525" cy="4559.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1534" y="4562.8823">get_viewport_rect() const : Rect2</text><ellipse cx="1525" cy="4572.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1534" y="4575.687">get_viewport_rid() const : RID</text><ellipse cx="1525" cy="4585.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="1534" y="4588.4917">get_canvas() const : RID</text><ellipse cx="1525" cy="4598.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="1534" y="4601.2964">get_canvas_layer_instance_id() const : ObjectID</text><ellipse cx="1525" cy="4610.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="1534" y="4614.1011">get_world_2d() const : Ref&lt;World2D&gt;</text><ellipse cx="1525" cy="4623.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1534" y="4626.9058">set_material(const Ref&lt;Material&gt; &amp; p_material) : void</text><ellipse cx="1525" cy="4636.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="1534" y="4639.7104">get_material() const : Ref&lt;Material&gt;</text><ellipse cx="1525" cy="4649.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1534" y="4652.5151">set_use_parent_material(bool p_use_parent_material) : void</text><ellipse cx="1525" cy="4662.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1534" y="4665.3198">get_use_parent_material() const : bool</text><ellipse cx="1525" cy="4674.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="1534" y="4678.1245">make_input_local(const Ref&lt;InputEvent&gt; &amp; p_event) const : Ref&lt;InputEvent&gt;</text><ellipse cx="1525" cy="4687.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="1534" y="4690.9292">make_canvas_position_local(const Vector2 &amp; screen_point) const : Vector2</text><ellipse cx="1525" cy="4700.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="1534" y="4703.7339">get_global_mouse_position() const : Vector2</text><ellipse cx="1525" cy="4713.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1534" y="4716.5386">get_local_mouse_position() const : Vector2</text><ellipse cx="1525" cy="4726.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1534" y="4729.3433">set_notify_local_transform(bool p_enable) : void</text><ellipse cx="1525" cy="4738.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1534" y="4742.1479">is_local_transform_notification_enabled() const : bool</text><ellipse cx="1525" cy="4751.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1534" y="4754.9526">set_notify_transform(bool p_enable) : void</text><ellipse cx="1525" cy="4764.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1534" y="4767.7573">is_transform_notification_enabled() const : bool</text><ellipse cx="1525" cy="4777.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1534" y="4780.562">force_update_transform() : void</text><ellipse cx="1525" cy="4790.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1534" y="4793.3667">get_anchorable_rect() const : Rect2</text><ellipse cx="1525" cy="4802.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1534" y="4806.1714">get_canvas_layer() const : int</text><ellipse cx="1525" cy="4815.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1534" y="4818.9761">CanvasItem() : void</text><ellipse cx="1525" cy="4828.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1534" y="4831.7808">~CanvasItem() : void</text><!--MD5=[6819c02738426d8b4a0c51cbdd89c521]
class C_0002289363354048605759--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L36" target="_top" title="Node2D" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L36" xlink:show="new" xlink:title="Node2D" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1seo7y2z3kxd6)" height="1059.5703" id="C_0002289363354048605759" style="stroke: #A80036; stroke-width: 1.5;" width="473" x="3294.5" y="3839.4531"/><ellipse cx="3501.75" cy="3855.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3504.7188,3861.0938 Q3504.1406,3861.3906 3503.5,3861.5313 Q3502.8594,3861.6875 3502.1563,3861.6875 Q3499.6563,3861.6875 3498.3281,3860.0469 Q3497.0156,3858.3906 3497.0156,3855.2656 Q3497.0156,3852.1406 3498.3281,3850.4844 Q3499.6563,3848.8281 3502.1563,3848.8281 Q3502.8594,3848.8281 3503.5,3848.9844 Q3504.1563,3849.1406 3504.7188,3849.4375 L3504.7188,3852.1563 Q3504.0938,3851.5781 3503.5,3851.3125 Q3502.9063,3851.0313 3502.2813,3851.0313 Q3500.9375,3851.0313 3500.25,3852.1094 Q3499.5625,3853.1719 3499.5625,3855.2656 Q3499.5625,3857.3594 3500.25,3858.4375 Q3500.9375,3859.5 3502.2813,3859.5 Q3502.9063,3859.5 3503.5,3859.2344 Q3504.0938,3858.9531 3504.7188,3858.375 L3504.7188,3861.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="3522.25" y="3859.6074">Node2D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3295.5" x2="3766.5" y1="3871.4531" y2="3871.4531"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3879.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3314.5" y="3885.6636">_class_name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L40" target="_top" title="pos" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L40" xlink:show="new" xlink:title="pos" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3890.2578"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3892.2578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L40" target="_top" title="pos" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L40" xlink:show="new" xlink:title="pos" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3314.5" y="3898.4683">pos : Point2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L41" target="_top" title="angle" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L41" xlink:show="new" xlink:title="angle" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3903.0625"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3905.0625"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L41" target="_top" title="angle" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L41" xlink:show="new" xlink:title="angle" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3314.5" y="3911.2729">angle : float</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L42" target="_top" title="_scale" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L42" xlink:show="new" xlink:title="_scale" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3915.8672"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3917.8672"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L42" target="_top" title="_scale" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L42" xlink:show="new" xlink:title="_scale" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3314.5" y="3924.0776">_scale : Size2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L43" target="_top" title="z_index" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L43" xlink:show="new" xlink:title="z_index" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3928.6719"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3930.6719"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L43" target="_top" title="z_index" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L43" xlink:show="new" xlink:title="z_index" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3314.5" y="3936.8823">z_index : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L44" target="_top" title="z_relative" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L44" xlink:show="new" xlink:title="z_relative" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3941.4766"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3943.4766"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L44" target="_top" title="z_relative" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L44" xlink:show="new" xlink:title="z_relative" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3314.5" y="3949.687">z_relative : bool</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L46" target="_top" title="_mat" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L46" xlink:show="new" xlink:title="_mat" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3954.2813"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3956.2813"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L46" target="_top" title="_mat" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L46" xlink:show="new" xlink:title="_mat" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3314.5" y="3962.4917">_mat : Transform2D</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L48" target="_top" title="_xform_dirty" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L48" xlink:show="new" xlink:title="_xform_dirty" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3300.5" y="3967.0859"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3969.0859"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L48" target="_top" title="_xform_dirty" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L48" xlink:show="new" xlink:title="_xform_dirty" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3314.5" y="3975.2964">_xform_dirty : bool</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3295.5" x2="3766.5" y1="3981.8906" y2="3981.8906"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="3989.8906"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="3314.5" y="3996.1011">operator=(const Node2D &amp; p_rval) : void</text><ellipse cx="3305.5" cy="4005.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3314.5" y="4008.9058">get_class() const : String</text><ellipse cx="3305.5" cy="4018.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3314.5" y="4021.7104">_get_class_namev() const : const StringName *</text><ellipse cx="3305.5" cy="4031.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="3314.5" y="4034.5151">get_class_ptr_static() : void *</text><ellipse cx="3305.5" cy="4044.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="3314.5" y="4047.3198">get_class_static() : String</text><ellipse cx="3305.5" cy="4056.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="3314.5" y="4060.1245">get_parent_class_static() : String</text><ellipse cx="3305.5" cy="4069.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="3314.5" y="4072.9292">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="3305.5" cy="4082.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="3314.5" y="4085.7339">get_category_static() : String</text><ellipse cx="3305.5" cy="4095.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="3314.5" y="4098.5386">inherits_static() : String</text><ellipse cx="3305.5" cy="4108.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="3314.5" y="4111.3433">is_class(const String &amp; p_class) const : bool</text><ellipse cx="3305.5" cy="4120.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3314.5" y="4124.1479">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="3305.5" cy="4133.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="3314.5" y="4136.9526">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><polygon fill="#FFFF44" points="3305.5,4141.5469,3309.5,4145.5469,3305.5,4149.5469,3301.5,4145.5469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="179" x="3314.5" y="4149.7573">_get_bind_methods() : void (*)()</text><ellipse cx="3305.5" cy="4159.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="3314.5" y="4162.562">initialize_class() : void</text><polygon fill="#FFFF44" points="3305.5,4167.1563,3309.5,4171.1563,3305.5,4175.1563,3301.5,4171.1563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3314.5" y="4175.3667">_initialize_classv() : void</text><polygon fill="#FFFF44" points="3305.5,4179.9609,3309.5,4183.9609,3305.5,4187.9609,3301.5,4183.9609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="3314.5" y="4188.1714">_get_get() const : bool (Object::*)(const StringName &amp;,Variant &amp;) const</text><polygon fill="#FFFF44" points="3305.5,4192.7656,3309.5,4196.7656,3305.5,4200.7656,3301.5,4196.7656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="3314.5" y="4200.9761">_getv(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><polygon fill="#FFFF44" points="3305.5,4205.5703,3309.5,4209.5703,3305.5,4213.5703,3301.5,4209.5703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="3314.5" y="4213.7808">_get_set() const : bool (Object::*)(const StringName &amp;,const Variant &amp;)</text><polygon fill="#FFFF44" points="3305.5,4218.375,3309.5,4222.375,3305.5,4226.375,3301.5,4222.375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="3314.5" y="4226.5854">_setv(const StringName &amp; p_name, const Variant &amp; p_property) : bool</text><polygon fill="#FFFF44" points="3305.5,4231.1797,3309.5,4235.1797,3305.5,4239.1797,3301.5,4235.1797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="425" x="3314.5" y="4239.3901">_get_get_property_list() const : void (Object::*)(List&lt;PropertyInfo&gt; *) const</text><polygon fill="#FFFF44" points="3305.5,4243.9844,3309.5,4247.9844,3305.5,4251.9844,3301.5,4247.9844" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="3314.5" y="4252.1948">_get_property_listv(List&lt;PropertyInfo&gt; * p_list, bool p_reversed) const : void</text><polygon fill="#FFFF44" points="3305.5,4256.7891,3309.5,4260.7891,3305.5,4264.7891,3301.5,4260.7891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="3314.5" y="4264.9995">_get_notification() const : void (Object::*)(int)</text><polygon fill="#FFFF44" points="3305.5,4269.5938,3309.5,4273.5938,3305.5,4277.5938,3301.5,4273.5938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="3314.5" y="4277.8042">_notificationv(int p_notification, bool p_reversed) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="4284.3984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="3314.5" y="4290.6089">_update_transform() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3302.5" y="4297.2031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3314.5" y="4303.4136">_update_xform_values() : void</text><polygon fill="#FFFF44" points="3305.5,4308.0078,3309.5,4312.0078,3305.5,4316.0078,3301.5,4312.0078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="3314.5" y="4316.2183">_bind_methods() : void</text><ellipse cx="3305.5" cy="4325.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="3314.5" y="4329.0229">_edit_get_state() const : Dictionary</text><ellipse cx="3305.5" cy="4338.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3314.5" y="4341.8276">_edit_set_state(const Dictionary &amp; p_state) : void</text><ellipse cx="3305.5" cy="4351.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="3314.5" y="4354.6323">_edit_set_position(const Point2 &amp; p_position) : void</text><ellipse cx="3305.5" cy="4364.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3314.5" y="4367.437">_edit_get_position() const : Point2</text><ellipse cx="3305.5" cy="4377.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="3314.5" y="4380.2417">_edit_set_scale(const Size2 &amp; p_scale) : void</text><ellipse cx="3305.5" cy="4389.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="3314.5" y="4393.0464">_edit_get_scale() const : Size2</text><ellipse cx="3305.5" cy="4402.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3314.5" y="4405.8511">_edit_set_rotation(float p_rotation) : void</text><ellipse cx="3305.5" cy="4415.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3314.5" y="4418.6558">_edit_get_rotation() const : float</text><ellipse cx="3305.5" cy="4428.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="3314.5" y="4431.4604">_edit_use_rotation() const : bool</text><ellipse cx="3305.5" cy="4441.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="3314.5" y="4444.2651">_edit_set_rect(const Rect2 &amp; p_edit_rect) : void</text><ellipse cx="3305.5" cy="4453.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="3314.5" y="4457.0698">set_position(const Point2 &amp; p_pos) : void</text><ellipse cx="3305.5" cy="4466.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3314.5" y="4469.8745">set_rotation(float p_radians) : void</text><ellipse cx="3305.5" cy="4479.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="3314.5" y="4482.6792">set_rotation_degrees(float p_degrees) : void</text><ellipse cx="3305.5" cy="4492.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="3314.5" y="4495.4839">set_scale(const Size2 &amp; p_scale) : void</text><ellipse cx="3305.5" cy="4505.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="3314.5" y="4508.2886">rotate(float p_radians) : void</text><ellipse cx="3305.5" cy="4517.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="3314.5" y="4521.0933">move_x(float p_delta, bool p_scaled = false) : void</text><ellipse cx="3305.5" cy="4530.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="3314.5" y="4533.8979">move_y(float p_delta, bool p_scaled = false) : void</text><ellipse cx="3305.5" cy="4543.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="3314.5" y="4546.7026">translate(const Vector2 &amp; p_amount) : void</text><ellipse cx="3305.5" cy="4556.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="3314.5" y="4559.5073">global_translate(const Vector2 &amp; p_amount) : void</text><ellipse cx="3305.5" cy="4569.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="3314.5" y="4572.312">apply_scale(const Size2 &amp; p_amount) : void</text><ellipse cx="3305.5" cy="4581.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3314.5" y="4585.1167">get_position() const : Point2</text><ellipse cx="3305.5" cy="4594.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3314.5" y="4597.9214">get_rotation() const : float</text><ellipse cx="3305.5" cy="4607.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3314.5" y="4610.7261">get_rotation_degrees() const : float</text><ellipse cx="3305.5" cy="4620.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3314.5" y="4623.5308">get_scale() const : Size2</text><ellipse cx="3305.5" cy="4633.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3314.5" y="4636.3354">get_global_position() const : Point2</text><ellipse cx="3305.5" cy="4645.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3314.5" y="4649.1401">get_global_rotation() const : float</text><ellipse cx="3305.5" cy="4658.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="3314.5" y="4661.9448">get_global_rotation_degrees() const : float</text><ellipse cx="3305.5" cy="4671.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3314.5" y="4674.7495">get_global_scale() const : Size2</text><ellipse cx="3305.5" cy="4684.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="3314.5" y="4687.5542">set_transform(const Transform2D &amp; p_transform) : void</text><ellipse cx="3305.5" cy="4697.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="3314.5" y="4700.3589">set_global_transform(const Transform2D &amp; p_transform) : void</text><ellipse cx="3305.5" cy="4709.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="3314.5" y="4713.1636">set_global_position(const Point2 &amp; p_pos) : void</text><ellipse cx="3305.5" cy="4722.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3314.5" y="4725.9683">set_global_rotation(float p_radians) : void</text><ellipse cx="3305.5" cy="4735.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="3314.5" y="4738.7729">set_global_rotation_degrees(float p_degrees) : void</text><ellipse cx="3305.5" cy="4748.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="3314.5" y="4751.5776">set_global_scale(const Size2 &amp; p_scale) : void</text><ellipse cx="3305.5" cy="4761.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3314.5" y="4764.3823">set_z_index(int p_z) : void</text><ellipse cx="3305.5" cy="4773.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3314.5" y="4777.187">get_z_index() const : int</text><ellipse cx="3305.5" cy="4786.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3314.5" y="4789.9917">look_at(const Vector2 &amp; p_pos) : void</text><ellipse cx="3305.5" cy="4799.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3314.5" y="4802.7964">get_angle_to(const Vector2 &amp; p_pos) const : float</text><ellipse cx="3305.5" cy="4812.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="3314.5" y="4815.6011">to_local(Point2 p_global) const : Point2</text><ellipse cx="3305.5" cy="4825.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="3314.5" y="4828.4058">to_global(Point2 p_local) const : Point2</text><ellipse cx="3305.5" cy="4838" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="3314.5" y="4841.2104">set_z_as_relative(bool p_enabled) : void</text><ellipse cx="3305.5" cy="4850.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3314.5" y="4854.0151">is_z_relative() const : bool</text><ellipse cx="3305.5" cy="4863.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="3314.5" y="4866.8198">get_relative_transform_to_parent(const Node * p_parent) const : Transform2D</text><ellipse cx="3305.5" cy="4876.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="3314.5" y="4879.6245">get_transform() const : Transform2D</text><ellipse cx="3305.5" cy="4889.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3314.5" y="4892.4292">Node2D() : void</text><!--MD5=[4c9c7e9fa624d339c5be6a15aac515e8]
link C_0000945411446247634027 to C_0000945411446247634027--><path d="M3500.73,90.9231 C3509.41,68.3731 3519.5,55.9531 3531,55.9531 C3541.61,55.9531 3551.01,66.5131 3559.21,85.8231 " fill="none" id="C_0000945411446247634027-&gt;C_0000945411446247634027" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3561.27,90.9231,3561.6153,81.0803,3559.4008,86.2857,3554.1954,84.0711,3561.27,90.9231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3431" cy="43.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="198" x="3438" y="47.02">invalid_node_name_characters</text><!--MD5=[9629988d9e1ee9f80b3cd7e331e1c307]
reverse link C_0000300688871447362916 to C_0000053309527800613276--><path d="M5147.93,4292.9731 C5420.04,4302.3331 5779.75,4314.7031 6045.85,4323.8531 " fill="none" id="C_0000300688871447362916&lt;-C_0000053309527800613276" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5134.63,4292.5131,5140.4902,4296.7153,5146.623,4292.9221,5140.7628,4288.72,5134.63,4292.5131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5612" cy="4299.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="5619" y="4303.52">position</text><!--MD5=[9629988d9e1ee9f80b3cd7e331e1c307]
reverse link C_0000300688871447362916 to C_0000053309527800613276--><path d="M5147.7,4312.6731 C5274.7,4321.9631 5416.23,4330.7931 5546,4335.4531 C5709.96,4341.3431 5891.5,4342.3931 6045.83,4341.6631 " fill="none" id="C_0000300688871447362916&lt;-C_0000053309527800613276-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5134.67,4311.7131,5140.3594,4316.1438,5146.6375,4312.5962,5140.9481,4308.1655,5134.67,4311.7131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5624.5" cy="4327.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="25" x="5631.5" y="4331.52">size</text><!--MD5=[ef8688b7a9f08943ee9e274fdcea5f32]
reverse link C_0001296138246691404804 to C_0000053309527800613276--><path d="M5019.84,4851.4831 C5297.39,4748.7931 5735.46,4586.7331 6045.98,4471.8631 " fill="none" id="C_0001296138246691404804&lt;-C_0000053309527800613276" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5007.56,4856.0231,5014.5759,4857.6897,5018.8127,4851.8545,5011.7968,4850.1879,5007.56,4856.0231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5607" cy="4597.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="60" x="5614" y="4601.52">elements</text><!--MD5=[d934a0270b0ad177cfb5d143cb8bbb45]
reverse link C_0002153970433534458832 to C_0000945411446247634027--><path d="M3022.18,1310.0031 C3093.78,1306.6831 3163.39,1303.4531 3226.95,1300.5131 " fill="none" id="C_0002153970433534458832&lt;-C_0000945411446247634027" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3008.79,1310.6231,3014.9682,1314.3419,3020.7772,1310.0693,3014.599,1306.3505,3008.79,1310.6231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3137" cy="1295.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="3144" y="1299.52">name</text><!--MD5=[d934a0270b0ad177cfb5d143cb8bbb45]
reverse link C_0002153970433534458832 to C_0000945411446247634027--><path d="M3021.76,1340.3331 C3081.08,1337.8431 3140.08,1334.6131 3197,1330.4531 C3206.74,1329.7431 3216.63,1328.9331 3226.62,1328.0431 " fill="none" id="C_0002153970433534458832&lt;-C_0000945411446247634027-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3008.69,1340.8731,3014.8477,1344.6258,3020.6801,1340.3851,3014.5224,1336.6324,3008.69,1340.8731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3122" cy="1322.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="67" x="3129" y="1326.52">hint_string</text><!--MD5=[f7e72b70e63c22ae83a0fc14835e215b]
reverse link C_0002153970433534458832 to C_0001858199404643284193--><path d="M2356.11,1469.1231 C2473.81,1719.7131 2776.23,2276.6231 3227,2499.4531 C3725.76,2746.0031 5329.92,2169.8231 5730,2556.4531 C5772.1,2597.1331 5725.19,3035.3931 5760,3082.4531 C5871.33,3232.9631 6087.14,3289.5531 6239.93,3310.7931 " fill="none" id="C_0002153970433534458832&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2350.48,1457.0531,2349.3959,1464.1823,2355.5597,1467.925,2356.6438,1460.7958,2350.48,1457.0531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3874.5" cy="2535.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="76" x="3881.5" y="2539.52">class_name</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M5516.09,3234.7731 C5588.43,3238.7231 5660.63,3243.2531 5730,3248.4531 C5901.81,3261.3231 6097.19,3283.5931 6234.65,3300.5331 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6239.93,3301.1831,6231.4902,3296.1067,6234.968,3300.5682,6230.5064,3304.046,6239.93,3301.1831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5613.5" cy="3230.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="47" x="5620.5" y="3234.52">classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M5516.17,3271.3631 C5526.17,3272.0731 5536.12,3272.7731 5546,3273.4531 C5784.22,3289.9631 6059.57,3305.2031 6234.66,3314.4131 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6239.81,3314.6831,6231.0273,3310.2262,6234.8166,3314.4263,6230.6164,3318.2156,6239.81,3314.6831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5552" cy="3265.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="170" x="5559" y="3269.52">resource_base_extensions</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M5516.04,3307.2231 C5526.09,3308.0031 5536.08,3308.7431 5546,3309.4531 C5783.82,3326.3531 6059.27,3327.6931 6234.49,3326.2631 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6239.64,3326.2131,6230.6059,3322.2906,6234.6402,3326.2561,6230.6747,3330.2903,6239.64,3326.2131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5585.5" cy="3301.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="103" x="5592.5" y="3305.52">compat_classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M5516.15,3341.7731 C5526.16,3342.7231 5536.11,3343.6131 5546,3344.4531 C5627.49,3351.3531 5648.23,3345.7131 5730,3344.4531 C5901.32,3341.8131 6096.76,3335.4531 6234.37,3330.4231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-3" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6239.65,3330.2231,6230.5077,3326.5599,6234.6534,3330.4087,6230.8047,3334.5544,6239.65,3330.2231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5591" cy="3336.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="92" x="5598" y="3340.52">default_values</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M5516.29,3201.1331 C5588.59,3203.7931 5660.73,3207.7631 5730,3213.4531 C5902.59,3227.6431 6097.46,3260.8131 6234.56,3287.0531 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-4" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6239.82,3288.0631,6231.7379,3282.4346,6234.9101,3287.1184,6230.2263,3290.2905,6239.82,3288.0631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5564.5" cy="3195.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="5571.5" y="3199.52">default_values_cached</text><!--MD5=[ba964ffb66bb1329413fe3c100b0ab0b]
link C_0000104564426296396960 to C_0000210234563198599367--><path d="M5449.02,2685.9031 C5550.54,2609.3131 5654.83,2530.6431 5755.58,2454.6431 " fill="none" id="C_0000104564426296396960-&gt;C_0000210234563198599367" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="5759.76,2451.4831,5750.165,2453.705,5755.7669,2454.4922,5754.9796,2460.0941,5759.76,2451.4831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5591" cy="2502.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="92" x="5598" y="2506.52">default_values</text><!--MD5=[b642425c83424b61917059e5da81b445]
reverse link C_0000218299049716973303 to C_0001858199404643284193--><path d="M1466.37,2659.4131 C1471.94,2659.0931 1477.48,2658.7731 1483,2658.4531 C1845.26,2637.7731 1936.15,2632.4531 2299,2632.4531 C2299,2632.4531 2299,2632.4531 4755,2632.4531 C5093.6,2632.4531 5226.06,2493.5731 5516,2668.4531 C5698.89,2778.7631 5596.12,2945.4931 5760,3082.4531 C5898.67,3198.3431 6098.21,3261.1131 6239.95,3293.2631 " fill="none" id="C_0000218299049716973303&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1453.35,2660.1931,1459.5769,2663.8299,1465.3288,2659.4807,1459.102,2655.844,1453.35,2660.1931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3485.5" y="2621.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="3495.5" y="2628.52">_class_name</text><!--MD5=[b604a94a8074bade127c96b8a1da6977]
reverse link C_0000218299049716973303 to C_0000104564426296396960--><path d="M1458.3,2684.4131 C1925.65,2672.8031 2544.33,2678.9131 3086,2755.4531 C3386.81,2797.9631 3710.52,2877.8931 3991.93,2958.9831 " fill="none" id="C_0000218299049716973303&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1453.16,2684.5431,1462.2598,2688.3105,1458.1583,2684.4146,1462.0542,2680.3131,1453.16,2684.5431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3129.5" cy="2752.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="3136.5" y="2756.52">«friend»</text><!--MD5=[208c0dda235c298627a059cb6fd90643]
reverse link C_0002074383603489565895 to C_0001858199404643284193--><path d="M3099.13,3817.4031 C4013.15,3803.5131 5400.29,3778.0931 5516,3750.4531 C5783.32,3686.5931 6065.35,3536.5531 6239.99,3432.5131 " fill="none" id="C_0002074383603489565895&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3086.05,3817.6031,3092.1066,3821.5169,3098.0488,3817.4315,3091.9922,3813.5177,3086.05,3817.6031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3868" y="3791.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="3878" y="3798.52">_class_name</text><!--MD5=[dc8a101c766364166eef2161871b3f09]
reverse link C_0002074383603489565895 to C_0000945411446247634027--><path d="M2795.23,2806.2131 C2941.31,2504.0631 3096.83,2182.4031 3227,1913.1731 " fill="none" id="C_0002074383603489565895&lt;-C_0000945411446247634027" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2789.38,2818.3131,2795.5912,2814.6497,2794.5985,2807.5072,2788.3873,2811.1707,2789.38,2818.3131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3134" y="2027.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="3144" y="2034.52">group</text><!--MD5=[afd1aea1ec5cee6a64d7dc349dc64f1b]
reverse link C_0002074383603489565895 to C_0001296138246691404804--><path d="M3073.59,4846.0831 C3122.71,4879.5131 3173.88,4909.3231 3227,4934.4531 C3638.65,5129.1531 4185.41,5069.1731 4500.3,5008.7331 " fill="none" id="C_0002074383603489565895&lt;-C_0001296138246691404804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3062.82,4838.6731,3065.5019,4845.3669,3072.7123,4845.4659,3070.0304,4838.772,3062.82,4838.6731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3473" y="4923.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="108" x="3483" y="4930.52">global_transform</text><!--MD5=[a3df4fe4f220f4afa7c7fc465542181b]
link C_0002074383603489565895 to C_0002074383603489565895--><path d="M2229.08,2818.3631 C2249.07,2795.9231 2272.71,2783.4531 2300,2783.4531 C2325.69,2783.4531 2348.15,2794.5031 2367.37,2814.5231 " fill="none" id="C_0002074383603489565895-&gt;C_0002074383603489565895" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2370.92,2818.3631,2367.7592,2809.0352,2367.5304,2814.6875,2361.8782,2814.4586,2370.92,2818.3631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2232.5" y="2767.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="127" x="2242.5" y="2774.52">current_item_drawn</text><!--MD5=[5b551e6b697c4ae3c6c9e93874a3a897]
reverse link C_0002074383603489565895 to C_0000104564426296396960--><path d="M3091.2,3628.9731 C3379.95,3556.0731 3705.76,3473.8231 3991.91,3401.5831 " fill="none" id="C_0002074383603489565895&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3086.1,3630.2531,3095.8061,3631.924,3090.9473,3629.027,3093.8443,3624.1683,3086.1,3630.2531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3504" cy="3439.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="3511" y="3443.52">«friend»</text><!--MD5=[844861f4e9e16f97a73f767c2da5e8f0]
reverse link C_0000218299049716973303 to C_0002074383603489565895--><path d="M1469.64,3242.5831 C1484.33,3252.9631 1499.04,3263.3631 1513.76,3273.7531 " fill="none" id="C_0000218299049716973303&lt;-C_0002074383603489565895" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1465.36,3248.1331,1453.06,3230.8731,1473.43,3236.6931,1465.36,3248.1331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3dc2ca534d90f0fcfb562c5d6ae1ec53]
reverse link C_0002289363354048605759 to C_0001858199404643284193--><path d="M3777.74,4098.2531 C3841.67,4044.9231 3914.55,3996.7631 3992,3968.4531 C4720.43,3702.2331 5003.02,4082.5931 5730,3812.4531 C5922.73,3740.8331 6110.23,3599.5731 6239.69,3487.2131 " fill="none" id="C_0002289363354048605759&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3767.56,4106.8531,3774.7241,4106.0315,3776.7211,4099.1024,3769.557,4099.9241,3767.56,4106.8531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4708.5" y="3856.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="4718.5" y="3863.52">_class_name</text><!--MD5=[e1c81cfbaff1c53a4f32d17cf37c9056]
reverse link C_0002289363354048605759 to C_0000053309527800613276--><path d="M3778.42,4159.9031 C3843.84,4115.8631 3917.22,4075.7231 3992,4052.4531 C4315.37,3951.8231 5181.31,4000.6831 5516,4052.4531 C5694.4,4080.0531 5885.93,4136.8331 6045.93,4192.4131 " fill="none" id="C_0002289363354048605759&lt;-C_0000053309527800613276" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3767.57,4167.2931,3774.7808,4167.2228,3777.4892,4160.5396,3770.2784,4160.61,3767.57,4167.2931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4738.5" y="3982.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="23" x="4748.5" y="3989.52">pos</text><!--MD5=[e1c81cfbaff1c53a4f32d17cf37c9056]
reverse link C_0002289363354048605759 to C_0000053309527800613276--><path d="M3780.19,4468.7931 C3847.79,4491.3431 3921.77,4512.0131 3992,4523.4531 C4660.52,4632.3831 4842.25,4593.0131 5516,4523.4531 C5692.05,4505.2731 5884.5,4467.5231 6045.77,4430.6631 " fill="none" id="C_0002289363354048605759&lt;-C_0000053309527800613276-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3767.64,4464.5631,3772.0454,4470.2721,3779.0096,4468.4014,3774.6042,4462.6924,3767.64,4464.5631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4730" y="4512.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="40" x="4740" y="4519.52">_scale</text><!--MD5=[eca0b1c865317536e8e6656357133ac0]
reverse link C_0002289363354048605759 to C_0001296138246691404804--><path d="M3778.93,4535.8931 C3807.51,4553.0531 3836.6,4569.6031 3865,4584.4531 C4072.36,4692.8431 4319.31,4792.1131 4500.09,4859.6731 " fill="none" id="C_0002289363354048605759&lt;-C_0001296138246691404804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3767.57,4529.0331,3770.641,4535.5576,3777.8448,4535.2323,3774.7738,4528.7078,3767.57,4529.0331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3893" y="4573.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="33" x="3903" y="4580.52">_mat</text><!--MD5=[814e220375a0bfd12a745b29dfae6f13]
reverse link C_0002289363354048605759 to C_0000104564426296396960--><path d="M3771.12,3976.2031 C3800.25,3943.1331 3831.63,3912.1831 3865,3885.4531 C3901.27,3856.4131 3921.91,3869.9431 3962,3846.4531 C4020.66,3812.0731 4079.6,3773.5931 4137.4,3733.0331 " fill="none" id="C_0002289363354048605759&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3767.58,3980.2531,3776.5168,3976.114,3770.8725,3976.4902,3770.4962,3970.8459,3767.58,3980.2531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3886.5" cy="3838.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="3893.5" y="3842.52">«friend»</text><!--MD5=[53255873fd636afdcc2a0189ef9318cd]
reverse link C_0002074383603489565895 to C_0002289363354048605759--><path d="M3105.04,4182.3831 C3172.85,4212.2431 3237.26,4240.5931 3294.47,4265.7731 " fill="none" id="C_0002074383603489565895&lt;-C_0002289363354048605759" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3101.79,4188.6031,3086.3,4174.1431,3107.43,4175.7931,3101.79,4188.6031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[81e721de2d1eb555ff841326008d6e3a]
link C_0001299121424291583786 to C_0000788782266645010446--><!--MD5=[f75099137f58b7131bb9ee0e6a9c92cd]
link C_0001299121424291583786 to C_0002063845175027013341--><!--MD5=[95f3a6faef7c0e8492302c840080618d]
@startuml
title Godot Node2D class context
left to right direction
class "String" as C_0000945411446247634027
class C_0000945411446247634027 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L126{String}]] {
-copy_from(const char * p_cstr) : void
-copy_from(const CharType * p_cstr, const int p_clip_to = -1) : void
-copy_from(const CharType & p_char) : void
-copy_from_unchecked(const CharType * p_char, const int p_length) : void
-_base_is_subsequence_of(const String & p_string, bool case_insensitive) const : bool
-_count(const String & p_string, int p_from, int p_to, bool p_case_insensitive) const : int
+ptrw() : CharType *
+ptr() const : const CharType *
+remove(int p_index) : void
+clear() : void
+get(int p_index) const : CharType
+set(int p_index, const CharType & p_elem) : void
+size() const : int
+resize(int p_size) : Error
+operator[](int p_index) const : const CharType &
+operator[](int p_index) : CharProxy<CharType>
+operator==(const String & p_str) const : bool
+operator!=(const String & p_str) const : bool
+operator+(const String & p_str) const : String
+operator+=(const String & ) : String &
+operator+=(CharType p_char) : String &
+operator+=(const char * p_str) : String &
+operator+=(const CharType * p_str) : String &
+operator=(const char * p_str) : void
+operator=(const CharType * p_str) : void
+operator==(const char * p_str) const : bool
+operator==(const CharType * p_str) const : bool
+operator==(const StrRange & p_str_range) const : bool
+operator!=(const char * p_str) const : bool
+operator!=(const CharType * p_str) const : bool
+operator<(const CharType * p_str) const : bool
+operator<(const char * p_str) const : bool
+operator<(const String & p_str) const : bool
+operator<=(const String & p_str) const : bool
+casecmp_to(const String & p_str) const : signed char
+nocasecmp_to(const String & p_str) const : signed char
+naturalnocasecmp_to(const String & p_str) const : signed char
+c_str() const : const CharType *
+length() const : int
+substr(int p_from, int p_chars = -1) const : String
+find(const String & p_str, int p_from = 0) const : int
+find(const char * p_str, int p_from = 0) const : int
+find_char(const CharType & p_char, int p_from = 0) const : int
+find_last(const String & p_str) const : int
+findn(const String & p_str, int p_from = 0) const : int
+rfind(const String & p_str, int p_from = -1) const : int
+rfindn(const String & p_str, int p_from = -1) const : int
+findmk(const Vector<String> & p_keys, int p_from = 0, int * r_key = __null) const : int
+match(const String & p_wildcard) const : bool
+matchn(const String & p_wildcard) const : bool
+begins_with(const String & p_string) const : bool
+begins_with(const char * p_string) const : bool
+ends_with(const String & p_string) const : bool
+is_enclosed_in(const String & p_string) const : bool
+is_subsequence_of(const String & p_string) const : bool
+is_subsequence_ofi(const String & p_string) const : bool
+is_quoted() const : bool
+bigrams() const : Vector<String>
+similarity(const String & p_string) const : float
+format(const Variant & values, String placeholder = "{_}") const : String
+replace_first(const String & p_key, const String & p_with) const : String
+replace(const String & p_key, const String & p_with) const : String
+replace(const char * p_key, const char * p_with) const : String
+replacen(const String & p_key, const String & p_with) const : String
+repeat(int p_count) const : String
+insert(int p_at_pos, const String & p_string) const : String
+pad_decimals(int p_digits) const : String
+pad_zeros(int p_digits) const : String
+trim_prefix(const String & p_prefix) const : String
+trim_suffix(const String & p_suffix) const : String
+lpad(int min_length, const String & character = " ") const : String
+rpad(int min_length, const String & character = " ") const : String
+sprintf(const Array & values, bool * error) const : String
+quote(String quotechar = "\"") const : String
+unquote() const : String
{static} +num(double p_num, int p_decimals = -1) : String
{static} +num_scientific(double p_num) : String
{static} +num_real(double p_num) : String
{static} +num_int64(int64_t p_num, int base = 10, bool capitalize_hex = false) : String
{static} +num_uint64(uint64_t p_num, int base = 10, bool capitalize_hex = false) : String
{static} +chr(CharType p_char) : String
{static} +md5(const uint8_t * p_md5) : String
{static} +hex_encode_buffer(const uint8_t * p_buffer, int p_len) : String
+is_numeric() const : bool
+to_double() const : double
+to_float() const : float
+hex_to_int(bool p_with_prefix = true) const : int
+to_int() const : int
+hex_to_int64(bool p_with_prefix = true) const : int64_t
+bin_to_int64(bool p_with_prefix = true) const : int64_t
+to_int64() const : int64_t
{static} +to_int(const char * p_str, int p_len = -1) : int
{static} +to_double(const char * p_str) : double
{static} +to_double(const CharType * p_str, const CharType ** r_end = __null) : double
{static} +to_int(const CharType * p_str, int p_len = -1) : int64_t
+capitalize() const : String
+camelcase_to_underscore(bool lowercase = true) const : String
+get_slice_count(String p_splitter) const : int
+get_slice(String p_splitter, int p_slice) const : String
+get_slicec(CharType p_splitter, int p_slice) const : String
+split(const String & p_splitter, bool p_allow_empty = true, int p_maxsplit = 0) const : Vector<String>
+rsplit(const String & p_splitter, bool p_allow_empty = true, int p_maxsplit = 0) const : Vector<String>
+split_spaces() const : Vector<String>
+split_floats(const String & p_splitter, bool p_allow_empty = true) const : Vector<float>
+split_floats_mk(const Vector<String> & p_splitters, bool p_allow_empty = true) const : Vector<float>
+split_ints(const String & p_splitter, bool p_allow_empty = true) const : Vector<int>
+split_ints_mk(const Vector<String> & p_splitters, bool p_allow_empty = true) const : Vector<int>
+join(Vector<String> parts) : String
{static} +char_uppercase(CharType p_char) : CharType
{static} +char_lowercase(CharType p_char) : CharType
+to_upper() const : String
+to_lower() const : String
+count(const String & p_string, int p_from = 0, int p_to = 0) const : int
+countn(const String & p_string, int p_from = 0, int p_to = 0) const : int
+left(int p_pos) const : String
+right(int p_pos) const : String
+dedent() const : String
+strip_edges(bool left = true, bool right = true) const : String
+strip_escapes() const : String
+lstrip(const String & p_chars) const : String
+rstrip(const String & p_chars) const : String
+get_extension() const : String
+get_basename() const : String
+plus_file(const String & p_file) const : String
+ord_at(int p_idx) const : CharType
+erase(int p_pos, int p_chars) : void
+ascii(bool p_allow_extended = false) const : CharString
+utf8() const : CharString
+parse_utf8(const char * p_utf8, int p_len = -1) : bool
{static} +utf8(const char * p_utf8, int p_len = -1) : String
{static} +hash(const CharType * p_cstr, int p_len) : uint32_t
{static} +hash(const CharType * p_cstr) : uint32_t
{static} +hash(const char * p_cstr, int p_len) : uint32_t
{static} +hash(const char * p_cstr) : uint32_t
+hash() const : uint32_t
+hash64() const : uint64_t
+md5_text() const : String
+sha1_text() const : String
+sha256_text() const : String
+md5_buffer() const : Vector<uint8_t>
+sha1_buffer() const : Vector<uint8_t>
+sha256_buffer() const : Vector<uint8_t>
+empty() const : bool
+is_abs_path() const : bool
+is_rel_path() const : bool
+is_resource_file() const : bool
+path_to(const String & p_path) const : String
+path_to_file(const String & p_path) const : String
+get_base_dir() const : String
+get_file() const : String
{static} +humanize_size(uint64_t p_size) : String
+simplify_path() const : String
+xml_escape(bool p_escape_quotes = false) const : String
+xml_unescape() const : String
+http_escape() const : String
+http_unescape() const : String
+c_escape() const : String
+c_escape_multiline() const : String
+c_unescape() const : String
+json_escape() const : String
+word_wrap(int p_chars_per_line) const : String
+parse_url(String & r_scheme, String & r_host, int & r_port, String & r_path) const : Error
+percent_encode() const : String
+percent_decode() const : String
+property_name_encode() const : String
+validate_node_name() const : String
+is_valid_identifier() const : bool
+is_valid_integer() const : bool
+is_valid_float() const : bool
+is_valid_hex_number(bool p_with_prefix) const : bool
+is_valid_html_color() const : bool
+is_valid_ip_address() const : bool
+is_valid_filename() const : bool
+String() : void
+String(const String & p_str) : void
+operator=(const String & p_str) : String
+String(const char * p_str) : void
+String(const CharType * p_str, int p_clip_to_len = -1) : void
+String(const StrRange & p_range) : void
-_cowdata : CowData<CharType> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L128{_cowdata}]]]
{static} -_null : const CharType [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L129{_null}]]]
+npos : enum
{static} +invalid_node_name_characters : const String [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ustring.h#L345{invalid_node_name_characters}]]]
}
class "Vector2" as C_0000053309527800613276
class C_0000053309527800613276 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L39{Vector2}]] {
+operator[](int p_idx) : real_t &
+operator[](int p_idx) const : const real_t &
+normalize() : void
+normalized() const : Vector2
+is_normalized() const : bool
+length() const : real_t
+length_squared() const : real_t
+distance_to(const Vector2 & p_vector2) const : real_t
+distance_squared_to(const Vector2 & p_vector2) const : real_t
+angle_to(const Vector2 & p_vector2) const : real_t
+angle_to_point(const Vector2 & p_vector2) const : real_t
+direction_to(const Vector2 & p_to) const : Vector2
+dot(const Vector2 & p_other) const : real_t
+cross(const Vector2 & p_other) const : real_t
+posmod(const real_t p_mod) const : Vector2
+posmodv(const Vector2 & p_modv) const : Vector2
+project(const Vector2 & p_to) const : Vector2
+plane_project(real_t p_d, const Vector2 & p_vec) const : Vector2
+clamped(real_t p_len) const : Vector2
{static} +linear_interpolate(const Vector2 & p_a, const Vector2 & p_b, real_t p_weight) : Vector2
+linear_interpolate(const Vector2 & p_to, real_t p_weight) const : Vector2
+slerp(const Vector2 & p_to, real_t p_weight) const : Vector2
+cubic_interpolate(const Vector2 & p_b, const Vector2 & p_pre_a, const Vector2 & p_post_b, real_t p_weight) const : Vector2
+move_toward(const Vector2 & p_to, const real_t p_delta) const : Vector2
+slide(const Vector2 & p_normal) const : Vector2
+bounce(const Vector2 & p_normal) const : Vector2
+reflect(const Vector2 & p_normal) const : Vector2
+is_equal_approx(const Vector2 & p_v) const : bool
+operator+(const Vector2 & p_v) const : Vector2
+operator+=(const Vector2 & p_v) : void
+operator-(const Vector2 & p_v) const : Vector2
+operator-=(const Vector2 & p_v) : void
+operator*(const Vector2 & p_v1) const : Vector2
+operator*(const real_t & rvalue) const : Vector2
+operator*=(const real_t & rvalue) : void
+operator*=(const Vector2 & rvalue) : void
+operator/(const Vector2 & p_v1) const : Vector2
+operator/(const real_t & rvalue) const : Vector2
+operator/=(const real_t & rvalue) : void
+operator/=(const Vector2 & rvalue) : void
+operator-() const : Vector2
+operator==(const Vector2 & p_vec2) const : bool
+operator!=(const Vector2 & p_vec2) const : bool
+operator<(const Vector2 & p_vec2) const : bool
+operator>(const Vector2 & p_vec2) const : bool
+operator<=(const Vector2 & p_vec2) const : bool
+operator>=(const Vector2 & p_vec2) const : bool
+angle() const : real_t
+set_rotation(real_t p_radians) : void
+abs() const : Vector2
+rotated(real_t p_by) const : Vector2
+tangent() const : Vector2
+sign() const : Vector2
+floor() const : Vector2
+ceil() const : Vector2
+round() const : Vector2
+snapped(const Vector2 & p_by) const : Vector2
+aspect() const : real_t
+operator String() const : String
+Vector2(real_t p_x, real_t p_y) : void
+Vector2() : void
+ : Vector2::(anonymous union at ./core/math/vector2.h:46:2) [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L46{}]]]
+ : Vector2::(anonymous union at ./core/math/vector2.h:50:2) [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/vector2.h#L50{}]]]
}
class "Rect2" as C_0000300688871447362916
class C_0000300688871447362916 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L38{Rect2}]] {
+get_position() const : const Vector2 &
+set_position(const Vector2 & p_pos) : void
+get_size() const : const Vector2 &
+set_size(const Vector2 & p_size) : void
+get_area() const : real_t
+intersects(const Rect2 & p_rect, const bool p_include_borders = false) const : bool
+distance_to(const Vector2 & p_point) const : real_t
+intersects_transformed(const Transform2D & p_xform, const Rect2 & p_rect) const : bool
+intersects_segment(const Point2 & p_from, const Point2 & p_to, Point2 * r_pos = __null, Point2 * r_normal = __null) const : bool
+encloses(const Rect2 & p_rect) const : bool
+has_no_area() const : bool
+clip(const Rect2 & p_rect) const : Rect2
+merge(const Rect2 & p_rect) const : Rect2
+has_point(const Point2 & p_point) const : bool
+is_equal_approx(const Rect2 & p_rect) const : bool
+operator==(const Rect2 & p_rect) const : bool
+operator!=(const Rect2 & p_rect) const : bool
+grow(real_t p_by) const : Rect2
+grow_margin(Margin p_margin, real_t p_amount) const : Rect2
+grow_individual(real_t p_left, real_t p_top, real_t p_right, real_t p_bottom) const : Rect2
+expand(const Vector2 & p_vector) const : Rect2
+expand_to(const Vector2 & p_vector) : void
+abs() const : Rect2
+operator String() const : String
+Rect2() : void
+Rect2(real_t p_x, real_t p_y, real_t p_width, real_t p_height) : void
+Rect2(const Point2 & p_pos, const Size2 & p_size) : void
+position : Point2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L40{position}]]]
+size : Size2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/rect2.h#L41{size}]]]
}
class "Transform2D" as C_0001296138246691404804
class C_0001296138246691404804 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L37{Transform2D}]] {
+tdotx(const Vector2 & v) const : real_t
+tdoty(const Vector2 & v) const : real_t
+operator[](int p_idx) const : const Vector2 &
+operator[](int p_idx) : Vector2 &
+get_axis(int p_axis) const : Vector2
+set_axis(int p_axis, const Vector2 & p_vec) : void
+invert() : void
+inverse() const : Transform2D
+affine_invert() : void
+affine_inverse() const : Transform2D
+set_rotation(real_t p_rot) : void
+get_rotation() const : real_t
+set_rotation_and_scale(real_t p_rot, const Size2 & p_scale) : void
+rotate(real_t p_phi) : void
+scale(const Size2 & p_scale) : void
+scale_basis(const Size2 & p_scale) : void
+translate(real_t p_tx, real_t p_ty) : void
+translate(const Vector2 & p_translation) : void
+basis_determinant() const : real_t
+get_scale() const : Size2
+set_scale(const Size2 & p_scale) : void
+get_origin() const : const Vector2 &
+set_origin(const Vector2 & p_origin) : void
+scaled(const Size2 & p_scale) const : Transform2D
+basis_scaled(const Size2 & p_scale) const : Transform2D
+translated(const Vector2 & p_offset) const : Transform2D
+rotated(real_t p_phi) const : Transform2D
+untranslated() const : Transform2D
+orthonormalize() : void
+orthonormalized() const : Transform2D
+is_equal_approx(const Transform2D & p_transform) const : bool
+operator==(const Transform2D & p_transform) const : bool
+operator!=(const Transform2D & p_transform) const : bool
+operator*=(const Transform2D & p_transform) : void
+operator*(const Transform2D & p_transform) const : Transform2D
+interpolate_with(const Transform2D & p_transform, real_t p_c) const : Transform2D
+basis_xform(const Vector2 & p_vec) const : Vector2
+basis_xform_inv(const Vector2 & p_vec) const : Vector2
+xform(const Vector2 & p_vec) const : Vector2
+xform_inv(const Vector2 & p_vec) const : Vector2
+xform(const Rect2 & p_rect) const : Rect2
+xform_inv(const Rect2 & p_rect) const : Rect2
+xform(const PoolVector<Vector2> & p_array) const : PoolVector<Vector2>
+xform_inv(const PoolVector<Vector2> & p_array) const : PoolVector<Vector2>
+operator String() const : String
+Transform2D(real_t xx, real_t xy, real_t yx, real_t yy, real_t ox, real_t oy) : void
+Transform2D(real_t p_rot, const Vector2 & p_pos) : void
+Transform2D() : void
+elements : Vector2[3] [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/math/transform_2d.h#L49{elements}]]]
}
class "Dictionary" as C_0001299121424291583786
class C_0001299121424291583786 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42{Dictionary}]] {
-_ref(const Dictionary & p_from) const : void
-_unref() const : void
+get_key_list(List<Variant> * p_keys) const : void
+get_key_at_index(int p_index) const : Variant
+get_value_at_index(int p_index) const : Variant
+operator[](const Variant & p_key) : Variant &
+operator[](const Variant & p_key) const : const Variant &
+getptr(const Variant & p_key) const : const Variant *
+getptr(const Variant & p_key) : Variant *
+get_valid(const Variant & p_key) const : Variant
+get(const Variant & p_key, const Variant & p_default) const : Variant
+size() const : int
+empty() const : bool
+clear() : void
+has(const Variant & p_key) const : bool
+has_all(const Array & p_keys) const : bool
+erase(const Variant & p_key) : bool
+operator==(const Dictionary & p_dictionary) const : bool
+operator!=(const Dictionary & p_dictionary) const : bool
+hash() const : uint32_t
+operator=(const Dictionary & p_dictionary) : void
+next(const Variant * p_key = __null) const : const Variant *
+keys() const : Array
+values() const : Array
+duplicate(bool p_deep = false) const : Dictionary
+id() const : const void *
+Dictionary(const Dictionary & p_from) : void
+Dictionary() : void
+~Dictionary() : void
-_p : DictionaryPrivate * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L44{_p}]]]
}
class "StringName" as C_0001858199404643284193
class C_0001858199404643284193 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44{StringName}]] {
-unref() : void
{static} -setup() : void
{static} -cleanup() : void
-StringName(StringName::_Data * p_data) : void
+operator const void *() const : const void *
+operator==(const String & p_name) const : bool
+operator==(const char * p_name) const : bool
+operator!=(const String & p_name) const : bool
+operator<(const StringName & p_name) const : bool
+operator==(const StringName & p_name) const : bool
+hash() const : uint32_t
+data_unique_pointer() const : const void *
+operator!=(const StringName & p_name) const : bool
+operator String() const : String
{static} +search(const char * p_name) : StringName
{static} +search(const CharType * p_name) : StringName
{static} +search(const String & p_name) : StringName
+operator=(const StringName & p_name) : void
+StringName(const char * p_name) : void
+StringName(const StringName & p_name) : void
+StringName(const String & p_name) : void
+StringName(const StaticCString & p_static_string) : void
+StringName() : void
+~StringName() : void
-_data : StringName::_Data * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L73{_data}]]]
-STRING_TABLE_BITS : enum
-STRING_TABLE_LEN : enum
-STRING_TABLE_MASK : enum
{static} -_table : StringName::_Data *[4096] [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L71{_table}]]]
{static} -lock : Mutex [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L85{lock}]]]
{static} -configured : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L88{configured}]]]
}
class "List<PropertyInfo>" as C_0000788782266645010446
class C_0000788782266645010446 {
}
class "Variant" as C_0000210234563198599367
class C_0000210234563198599367 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L93{Variant}]] {
-_get_obj() : Variant::ObjData &
-_get_obj() const : const Variant::ObjData &
-reference(const Variant & p_variant) : void
-clear() : void
+get_type() const : Variant::Type
{static} +get_type_name(Variant::Type p_type) : String
{static} +can_convert(Variant::Type p_type_from, Variant::Type p_type_to) : bool
{static} +can_convert_strict(Variant::Type p_type_from, Variant::Type p_type_to) : bool
+is_ref() const : bool
+is_num() const : bool
+is_array() const : bool
+is_shared() const : bool
+is_zero() const : bool
+is_one() const : bool
+operator bool() const : bool
+operator int() const : int
+operator unsigned int() const : unsigned int
+operator short() const : short
+operator unsigned short() const : unsigned short
+operator signed char() const : signed char
+operator unsigned char() const : unsigned char
+operator long() const : int64_t
+operator unsigned long() const : uint64_t
+operator wchar_t() const : CharType
+operator float() const : float
+operator double() const : double
+operator String() const : String
+operator StringName() const : StringName
+operator Vector2() const : Vector2
+operator Rect2() const : Rect2
+operator Vector3() const : Vector3
+operator Plane() const : Plane
+operator AABB() const : ::AABB
+operator Quat() const : Quat
+operator Basis() const : Basis
+operator Transform() const : Transform
+operator Transform2D() const : Transform2D
+operator Color() const : Color
+operator NodePath() const : NodePath
+operator RefPtr() const : RefPtr
+operator RID() const : RID
+operator Object *() const : Object *
+operator Node *() const : Node *
+operator Control *() const : Control *
+operator Dictionary() const : Dictionary
+operator Array() const : Array
+operator PoolVector() const : PoolVector<uint8_t>
+operator PoolVector() const : PoolVector<int>
+operator PoolVector() const : PoolVector<real_t>
+operator PoolVector() const : PoolVector<String>
+operator PoolVector() const : PoolVector<Vector3>
+operator PoolVector() const : PoolVector<Color>
+operator PoolVector() const : PoolVector<Plane>
+operator PoolVector() const : PoolVector<Face3>
+operator Vector() const : Vector<Variant>
+operator Vector() const : Vector<uint8_t>
+operator Vector() const : Vector<int>
+operator Vector() const : Vector<real_t>
+operator Vector() const : Vector<String>
+operator Vector() const : Vector<StringName>
+operator Vector() const : Vector<Vector3>
+operator Vector() const : Vector<Color>
+operator Vector() const : Vector<RID>
+operator Vector() const : Vector<Vector2>
+operator PoolVector() const : PoolVector<Vector2>
+operator Vector() const : Vector<Plane>
+operator Margin() const : Margin
+operator Orientation() const : Orientation
+operator IP_Address() const : IP_Address
+Variant(bool p_bool) : void
+Variant(int p_int) : void
+Variant(unsigned int p_int) : void
+Variant(short p_short) : void
+Variant(unsigned short p_short) : void
+Variant(signed char p_char) : void
+Variant(unsigned char p_char) : void
+Variant(int64_t p_int) : void
+Variant(uint64_t p_int) : void
+Variant(float p_float) : void
+Variant(double p_double) : void
+Variant(const String & p_string) : void
+Variant(const StringName & p_string) : void
+Variant(const char *const p_cstring) : void
+Variant(const CharType * p_wstring) : void
+Variant(const Vector2 & p_vector2) : void
+Variant(const Rect2 & p_rect2) : void
+Variant(const Vector3 & p_vector3) : void
+Variant(const Plane & p_plane) : void
+Variant(const ::AABB & p_aabb) : void
+Variant(const Quat & p_quat) : void
+Variant(const Basis & p_matrix) : void
+Variant(const Transform2D & p_transform) : void
+Variant(const Transform & p_transform) : void
+Variant(const Color & p_color) : void
+Variant(const NodePath & p_node_path) : void
+Variant(const RefPtr & p_resource) : void
+Variant(const RID & p_rid) : void
+Variant(const Object * p_object) : void
+Variant(const Dictionary & p_dictionary) : void
+Variant(const Array & p_array) : void
+Variant(const PoolVector<Plane> & p_array) : void
+Variant(const PoolVector<uint8_t> & p_raw_array) : void
+Variant(const PoolVector<int> & p_int_array) : void
+Variant(const PoolVector<real_t> & p_real_array) : void
+Variant(const PoolVector<String> & p_string_array) : void
+Variant(const PoolVector<Vector3> & p_vector3_array) : void
+Variant(const PoolVector<Color> & p_color_array) : void
+Variant(const PoolVector<Face3> & p_face_array) : void
+Variant(const Vector<Variant> & p_array) : void
+Variant(const Vector<uint8_t> & p_array) : void
+Variant(const Vector<int> & p_array) : void
+Variant(const Vector<real_t> & p_array) : void
+Variant(const Vector<String> & p_array) : void
+Variant(const Vector<StringName> & p_array) : void
+Variant(const Vector<Vector3> & p_array) : void
+Variant(const Vector<Color> & p_array) : void
+Variant(const Vector<Plane> & p_array) : void
+Variant(const Vector<RID> & p_array) : void
+Variant(const Vector<Vector2> & p_array) : void
+Variant(const PoolVector<Vector2> & p_vector2_array) : void
+Variant(const IP_Address & p_address) : void
{static} +get_operator_name(Variant::Operator p_op) : String
{static} +evaluate(const Variant::Operator & p_op, const Variant & p_a, const Variant & p_b, Variant & r_ret, bool & r_valid) : void
{static} +evaluate(const Variant::Operator & p_op, const Variant & p_a, const Variant & p_b) : Variant
+zero() : void
+duplicate(bool deep = false) const : Variant
{static} +blend(const Variant & a, const Variant & b, float c, Variant & r_dst) : void
{static} +interpolate(const Variant & a, const Variant & b, float c, Variant & r_dst) : void
+call_ptr(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant * r_ret, Variant::CallError & r_error) : void
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
{static} +get_call_error_text(Object * p_base, const StringName & p_method, const Variant ** p_argptrs, int p_argcount, const Variant::CallError & ce) : String
{static} +construct(const Variant::Type , const Variant ** p_args, int p_argcount, Variant::CallError & r_error, bool p_strict = true) : Variant
+get_method_list(List<MethodInfo> * p_list) const : void
+has_method(const StringName & p_method) const : bool
{static} +get_method_argument_types(Variant::Type p_type, const StringName & p_method) : Vector<Variant::Type>
{static} +get_method_default_arguments(Variant::Type p_type, const StringName & p_method) : Vector<Variant>
{static} +get_method_return_type(Variant::Type p_type, const StringName & p_method, bool * r_has_return = __null) : Variant::Type
{static} +get_method_argument_names(Variant::Type p_type, const StringName & p_method) : Vector<StringName>
{static} +is_method_const(Variant::Type p_type, const StringName & p_method) : bool
+set_named(const StringName & p_index, const Variant & p_value, bool * r_valid = __null) : void
+get_named(const StringName & p_index, bool * r_valid = __null) const : Variant
+set(const Variant & p_index, const Variant & p_value, bool * r_valid = __null) : void
+get(const Variant & p_index, bool * r_valid = __null) const : Variant
+in(const Variant & p_index, bool * r_valid = __null) const : bool
+iter_init(Variant & r_iter, bool & r_valid) const : bool
+iter_next(Variant & r_iter, bool & r_valid) const : bool
+iter_get(const Variant & r_iter, bool & r_valid) const : Variant
+get_property_list(List<PropertyInfo> * p_list) const : void
+operator==(const Variant & p_variant) const : bool
+operator!=(const Variant & p_variant) const : bool
+operator<(const Variant & p_variant) const : bool
+hash() const : uint32_t
+hash_compare(const Variant & p_variant) const : bool
+booleanize() const : bool
+stringify(List<const void *> & stack) const : String
+static_assign(const Variant & p_variant) : void
{static} +get_constructor_list(Variant::Type p_type, List<MethodInfo> * p_list) : void
{static} +get_constants_for_type(Variant::Type p_type, List<StringName> * p_constants) : void
{static} +has_constant(Variant::Type p_type, const StringName & p_value) : bool
{static} +get_constant_value(Variant::Type p_type, const StringName & p_value, bool * r_valid = __null) : Variant
+get_construct_string() const : String
{static} +construct_from_string(const String & p_string, Variant & r_value, Variant::ObjectConstruct p_obj_construct = __null, void * p_construct_ud = __null) : void
+operator=(const Variant & p_variant) : void
+Variant(const Variant & p_variant) : void
+Variant() : void
+~Variant() : void
-type : Variant::Type [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L144{type}]]]
-_data : union (unnamed union at ./core/variant.h:163:2) [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L173{_data}]]]
}
class "PropertyInfo" as C_0002153970433534458832
class C_0002153970433534458832 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L144{PropertyInfo}]] {
+added_usage(int p_fl) const : PropertyInfo
+operator Dictionary() const : Dictionary
{static} +from_dict(const Dictionary & p_dict) : PropertyInfo
+PropertyInfo() : void
+PropertyInfo(Variant::Type p_type, const String p_name, PropertyHint p_hint = PROPERTY_HINT_NONE, const String & p_hint_string = "", uint32_t p_usage = PROPERTY_USAGE_DEFAULT, const StringName & p_class_name = StringName()) : void
+PropertyInfo(const StringName & p_class_name) : void
+operator==(const PropertyInfo & p_info) const : bool
+operator<(const PropertyInfo & p_info) const : bool
+type : Variant::Type [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L146{type}]]]
+name : String [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L147{name}]]]
+class_name : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L148{class_name}]]]
+hint : PropertyHint [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L149{hint}]]]
+hint_string : String [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L150{hint_string}]]]
+usage : uint32_t [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L151{usage}]]]
}
class "List<String>" as C_0002063845175027013341
class C_0002063845175027013341 {
}
class "ClassDB" as C_0000104564426296396960
class C_0000104564426296396960 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94{ClassDB}]] {
{static} +bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition & method_name, const Variant ** p_defs, int p_defcount) : MethodBind *
{static} +_add_class2(const StringName & p_class, const StringName & p_inherits) : void
{static} -_get_parent_class(const StringName & p_class) : StringName
{static} -_is_parent_class(const StringName & p_class, const StringName & p_inherits) : bool
{static} +get_class_list(List<StringName> * p_classes) : void
{static} +get_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_direct_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_parent_class_nocheck(const StringName & p_class) : StringName
{static} +get_parent_class(const StringName & p_class) : StringName
{static} +class_exists(const StringName & p_class) : bool
{static} +is_parent_class(const StringName & p_class, const StringName & p_inherits) : bool
{static} +can_instance(const StringName & p_class) : bool
{static} +instance(const StringName & p_class) : Object *
{static} +get_api_type(const StringName & p_class) : ClassDB::APIType
{static} +get_api_hash(ClassDB::APIType p_api) : uint64_t
{static} +add_signal(StringName p_class, const MethodInfo & p_signal) : void
{static} +has_signal(StringName p_class, StringName p_signal) : bool
{static} +get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool
{static} +get_signal_list(StringName p_class, List<MethodInfo> * p_signals, bool p_no_inheritance = false) : void
{static} +add_property_group(StringName p_class, const String & p_name, const String & p_prefix = "") : void
{static} +add_property(StringName p_class, const PropertyInfo & p_pinfo, const StringName & p_setter, const StringName & p_getter, int p_index = -1) : void
{static} +set_property_default_value(StringName p_class, const StringName & p_name, const Variant & p_default) : void
{static} +get_property_list(StringName p_class, List<PropertyInfo> * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void
{static} +set_property(Object * p_object, const StringName & p_property, const Variant & p_value, bool * r_valid = __null) : bool
{static} +get_property(Object * p_object, const StringName & p_property, Variant & r_value) : bool
{static} +has_property(const StringName & p_class, const StringName & p_property, bool p_no_inheritance = false) : bool
{static} +get_property_index(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : int
{static} +get_property_type(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : Variant::Type
{static} +get_property_setter(StringName p_class, const StringName & p_property) : StringName
{static} +get_property_getter(StringName p_class, const StringName & p_property) : StringName
{static} +has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool
{static} +set_method_flags(StringName p_class, StringName p_method, int p_flags) : void
{static} +get_method_list(StringName p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void
{static} +get_method(StringName p_class, StringName p_name) : MethodBind *
{static} +add_virtual_method(const StringName & p_class, const MethodInfo & p_method, bool p_virtual = true) : void
{static} +get_virtual_methods(const StringName & p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false) : void
{static} +bind_integer_constant(const StringName & p_class, const StringName & p_enum, const StringName & p_name, int p_constant) : void
{static} +get_integer_constant_list(const StringName & p_class, List<String> * p_constants, bool p_no_inheritance = false) : void
{static} +get_integer_constant(const StringName & p_class, const StringName & p_name, bool * p_success = __null) : int
{static} +get_integer_constant_enum(const StringName & p_class, const StringName & p_name, bool p_no_inheritance = false) : StringName
{static} +get_enum_list(const StringName & p_class, List<StringName> * p_enums, bool p_no_inheritance = false) : void
{static} +get_enum_constants(const StringName & p_class, const StringName & p_enum, List<StringName> * p_constants, bool p_no_inheritance = false) : void
{static} +class_get_default_property_value(const StringName & p_class, const StringName & p_property, bool * r_valid = __null) : Variant
{static} +get_category(const StringName & p_node) : StringName
{static} +set_class_enabled(StringName p_class, bool p_enable) : void
{static} +is_class_enabled(StringName p_class) : bool
{static} +is_class_exposed(StringName p_class) : bool
{static} +add_resource_base_extension(const StringName & p_extension, const StringName & p_class) : void
{static} +get_resource_base_extensions(List<String> * p_extensions) : void
{static} +get_extensions_for_type(const StringName & p_class, List<String> * p_extensions) : void
{static} +add_compatibility_class(const StringName & p_class, const StringName & p_fallback) : void
{static} +set_current_api(ClassDB::APIType p_api) : void
{static} +get_current_api() : ClassDB::APIType
{static} +cleanup_defaults() : void
{static} +cleanup() : void
{static} +creator() : class Object *
{static} +_add_class() : void
{static} +register_class() : void
{static} +register_virtual_class() : void
{static} +_create_ptr_func() : class Object *
{static} +register_custom_instance_class() : void
{static} +bind_method(N p_method_name, M p_method) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7) : class MethodBind *
{static} +bind_method(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7, const Variant & p_def8) : class MethodBind *
{static} +bind_vararg_method(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo & p_info = MethodInfo(), const Vector<Variant> & p_default_args = Vector<Variant>(), bool p_return_nil_is_variant = true) : class MethodBind *
{static} +lock : RWLock [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146{lock}]]]
{static} +classes : HashMap<StringName,ClassDB::ClassInfo> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147{classes}]]]
{static} +resource_base_extensions : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148{resource_base_extensions}]]]
{static} +compat_classes : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149{compat_classes}]]]
{static} +current_api : ClassDB::APIType [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157{current_api}]]]
{static} +default_values : HashMap<StringName,HashMap<StringName,Variant>> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161{default_values}]]]
{static} +default_values_cached : Set<StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162{default_values_cached}]]]
}
class "Node" as C_0000218299049716973303
class C_0000218299049716973303 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L44{Node}]] {
-operator=(const Node & p_rval) : void
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} #_get_bind_methods() : void (*)()
{static} +initialize_class() : void
#_initialize_classv() : void
#_get_get() const : bool (Object::*)(const StringName &,Variant &) const
#_getv(const StringName & p_name, Variant & r_ret) const : bool
#_get_set() const : bool (Object::*)(const StringName &,const Variant &)
#_setv(const StringName & p_name, const Variant & p_property) : bool
#_get_get_property_list() const : void (Object::*)(List<PropertyInfo> *) const
#_get_property_listv(List<PropertyInfo> * p_list, bool p_reversed) const : void
#_get_notification() const : void (Object::*)(int)
#_notificationv(int p_notification, bool p_reversed) : void
{static} #_get_category() : String
-_print_tree_pretty(const String & prefix, const bool last) : void
-_print_tree(const Node * p_node) : void
-_get_child_by_name(const StringName & p_name) const : Node *
-_replace_connections_target(Node * p_new_target) : void
-_validate_child_name(Node * p_child, bool p_force_human_readable = false) : void
-_generate_serial_child_name(const Node * p_child, StringName & name) const : void
-_propagate_reverse_notification(int p_notification) : void
-_propagate_deferred_notification(int p_notification, bool p_reverse) : void
-_propagate_enter_tree() : void
-_propagate_ready() : void
-_propagate_exit_tree() : void
-_propagate_after_exit_tree() : void
-_propagate_validate_owner() : void
-_print_stray_nodes() : void
-_propagate_pause_owner(Node * p_owner) : void
-_get_node_and_resource(const NodePath & p_path) : Array
-_duplicate_signals(const Node * p_original, Node * p_copy) const : void
-_duplicate_and_reown(Node * p_new_parent, const Map<Node *,Node *> & p_reown_map) const : void
-_duplicate(int p_flags, Map<const Node *,Node *> * r_duplimap = __null) const : Node *
-_get_children() const : Array
-_get_groups() const : Array
-_rpc_bind(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
-_rpc_unreliable_bind(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
-_rpc_id_bind(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
-_rpc_unreliable_id_bind(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
-_set_tree(SceneTree * p_tree) : void
#_block() : void
#_unblock() : void
#_notification(int p_notification) : void
#add_child_notify(Node * p_child) : void
#remove_child_notify(Node * p_child) : void
#move_child_notify(Node * p_child) : void
#_propagate_replace_owner(Node * p_owner, Node * p_by_owner) : void
{static} #_bind_methods() : void
{static} #_get_name_num_separator() : String
#_add_child_nocheck(Node * p_child, const StringName & p_name) : void
#_set_owner_nocheck(Node * p_owner) : void
#_set_name_nocheck(const StringName & p_name) : void
+get_name() const : StringName
+set_name(const String & p_name) : void
+add_child(Node * p_child, bool p_legible_unique_name = false) : void
+add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void
+remove_child(Node * p_child) : void
+get_child_count() const : int
+get_child(int p_index) const : Node *
+has_node(const NodePath & p_path) const : bool
+get_node(const NodePath & p_path) const : Node *
+get_node_or_null(const NodePath & p_path) const : Node *
+find_node(const String & p_mask, bool p_recursive = true, bool p_owned = true) const : Node *
+has_node_and_resource(const NodePath & p_path) const : bool
+get_node_and_resource(const NodePath & p_path, RES & r_res, Vector<StringName> & r_leftover_subpath, bool p_last_is_property = true) const : Node *
+get_parent() const : Node *
+find_parent(const String & p_mask) const : Node *
+get_tree() const : SceneTree *
+is_inside_tree() const : bool
+is_a_parent_of(const Node * p_node) const : bool
+is_greater_than(const Node * p_node) const : bool
+get_path() const : NodePath
+get_path_to(const Node * p_node) const : NodePath
+find_common_parent_with(const Node * p_node) const : Node *
+add_to_group(const StringName & p_identifier, bool p_persistent = false) : void
+remove_from_group(const StringName & p_identifier) : void
+is_in_group(const StringName & p_identifier) const : bool
+get_groups(List<Node::GroupInfo> * p_groups) const : void
+get_persistent_group_count() const : int
+move_child(Node * p_child, int p_pos) : void
+raise() : void
+set_owner(Node * p_owner) : void
+get_owner() const : Node *
+get_owned_by(Node * p_by, List<Node *> * p_owned) : void
+remove_and_skip() : void
+get_index() const : int
+print_tree() : void
+print_tree_pretty() : void
+set_filename(const String & p_filename) : void
+get_filename() const : String
+set_editor_description(const String & p_editor_description) : void
+get_editor_description() const : String
+set_editable_instance(Node * p_node, bool p_editable) : void
+is_editable_instance(const Node * p_node) const : bool
+get_deepest_editable_node(Node * start_node) const : Node *
+propagate_notification(int p_notification) : void
+propagate_call(const StringName & p_method, const Array & p_args = Array(), const bool p_parent_first = false) : void
+set_physics_process(bool p_process) : void
+get_physics_process_delta_time() const : float
+is_physics_processing() const : bool
+set_process(bool p_idle_process) : void
+get_process_delta_time() const : float
+is_processing() const : bool
+set_physics_process_internal(bool p_process_internal) : void
+is_physics_processing_internal() const : bool
+set_process_internal(bool p_idle_process_internal) : void
+is_processing_internal() const : bool
+set_process_priority(int p_priority) : void
+get_process_priority() const : int
+set_process_input(bool p_enable) : void
+is_processing_input() const : bool
+set_process_unhandled_input(bool p_enable) : void
+is_processing_unhandled_input() const : bool
+set_process_unhandled_key_input(bool p_enable) : void
+is_processing_unhandled_key_input() const : bool
+get_position_in_parent() const : int
+duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *
+duplicate_and_reown(const Map<Node *,Node *> & p_reown_map) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap, const Map<RES,RES> & p_resource_remap) const : Node *
+remap_node_resources(Node * p_node, const Map<RES,RES> & p_resource_remap) const : void
+remap_nested_resources(RES p_resource, const Map<RES,RES> & p_resource_remap) const : void
+set_scene_instance_state(const Ref<SceneState> & p_state) : void
+get_scene_instance_state() const : Ref<SceneState>
+set_scene_inherited_state(const Ref<SceneState> & p_state) : void
+get_scene_inherited_state() const : Ref<SceneState>
+set_scene_instance_load_placeholder(bool p_enable) : void
+get_scene_instance_load_placeholder() const : bool
{static} +make_binds(const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Vector<Variant>
+replace_by(Node * p_node, bool p_keep_data = false) : void
+set_pause_mode(Node::PauseMode p_mode) : void
+get_pause_mode() const : Node::PauseMode
+can_process() const : bool
+can_process_notification(int p_what) const : bool
+request_ready() : void
{static} +print_stray_nodes() : void
+validate_child_name(Node * p_child) : String
+queue_delete() : void
{static} +set_human_readable_collision_renaming(bool p_enabled) : void
{static} +init_node_hrcr() : void
+force_parent_owned() : void
+set_import_path(const NodePath & p_import_path) : void
+get_import_path() const : NodePath
+is_owned_by_parent() const : bool
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
+clear_internal_tree_resource_paths() : void
+get_viewport() const : Viewport *
+get_configuration_warning() const : String
+update_configuration_warning() : void
+set_display_folded(bool p_folded) : void
+is_displayed_folded() const : bool
+set_network_master(int p_peer_id, bool p_recursive = true) : void
+get_network_master() const : int
+is_network_master() const : bool
+rpc_config(const StringName & p_method, MultiplayerAPI::RPCMode p_mode) : void
+rset_config(const StringName & p_property, MultiplayerAPI::RPCMode p_mode) : void
+rpc(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rset(const StringName & p_property, const Variant & p_value) : void
+rset_unreliable(const StringName & p_property, const Variant & p_value) : void
+rset_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rset_unreliable_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rpcp(int p_peer_id, bool p_unreliable, const StringName & p_method, const Variant ** p_arg, int p_argcount) : void
+rsetp(int p_peer_id, bool p_unreliable, const StringName & p_property, const Variant & p_value) : void
+get_multiplayer() const : Ref<MultiplayerAPI>
+get_custom_multiplayer() const : Ref<MultiplayerAPI>
+set_custom_multiplayer(Ref<MultiplayerAPI> p_multiplayer) : void
+get_node_rpc_mode(const StringName & p_method) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+get_node_rset_mode(const StringName & p_property) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+Node() : void
+~Node() : void
-_class_name : StringName
-data : struct Data [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L144{data}]]]
-multiplayer : Ref<MultiplayerAPI> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L152{multiplayer}]]]
{static} +orphan_node_count : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78{orphan_node_count}]]]
+NOTIFICATION_ENTER_TREE : enum
+NOTIFICATION_EXIT_TREE : enum
+NOTIFICATION_MOVED_IN_PARENT : enum
+NOTIFICATION_READY : enum
+NOTIFICATION_PAUSED : enum
+NOTIFICATION_UNPAUSED : enum
+NOTIFICATION_PHYSICS_PROCESS : enum
+NOTIFICATION_PROCESS : enum
+NOTIFICATION_PARENTED : enum
+NOTIFICATION_UNPARENTED : enum
+NOTIFICATION_INSTANCED : enum
+NOTIFICATION_DRAG_BEGIN : enum
+NOTIFICATION_DRAG_END : enum
+NOTIFICATION_PATH_CHANGED : enum
+NOTIFICATION_INTERNAL_PROCESS : enum
+NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum
+NOTIFICATION_POST_ENTER_TREE : enum
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_APP_PAUSED : enum
}
abstract "CanvasItem" as C_0002074383603489565895
abstract C_0002074383603489565895 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L165{CanvasItem}]] {
-operator=(const CanvasItem & p_rval) : void
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} #_get_bind_methods() : void (*)()
{static} +initialize_class() : void
#_initialize_classv() : void
#_get_get() const : bool (Object::*)(const StringName &,Variant &) const
#_getv(const StringName & p_name, Variant & r_ret) const : bool
#_get_set() const : bool (Object::*)(const StringName &,const Variant &)
#_setv(const StringName & p_name, const Variant & p_property) : bool
#_get_get_property_list() const : void (Object::*)(List<PropertyInfo> *) const
#_get_property_listv(List<PropertyInfo> * p_list, bool p_reversed) const : void
#_get_notification() const : void (Object::*)(int)
#_notificationv(int p_notification, bool p_reversed) : void
-_toplevel_raise_self() : void
-_propagate_visibility_changed(bool p_visible) : void
-_update_callback() : void
-_enter_canvas() : void
-_exit_canvas() : void
-_notify_transform(CanvasItem * p_node) : void
-_set_on_top(bool p_on_top) : void
-_is_on_top() const : bool
#_notify_transform() : void
#item_rect_changed(bool p_size_changed = true) : void
#_notification(int p_what) : void
{static} #_bind_methods() : void
+_edit_is_selected_on_click(const Point2 & p_point, double p_tolerance) const : bool
+_edit_set_state(const Dictionary & p_state) : void
+_edit_get_state() const : Dictionary
{abstract} +_edit_set_position(const Point2 & p_position) = 0 : void
{abstract} +_edit_get_position() const = 0 : Point2
{abstract} +_edit_set_scale(const Size2 & p_scale) = 0 : void
{abstract} +_edit_get_scale() const = 0 : Size2
+_edit_use_rotation() const : bool
+_edit_set_rotation(float p_rotation) : void
+_edit_get_rotation() const : float
+_edit_use_rect() const : bool
+_edit_set_rect(const Rect2 & p_rect) : void
+_edit_get_rect() const : Rect2
+_edit_get_minimum_size() const : Size2
+_edit_use_pivot() const : bool
+_edit_set_pivot(const Point2 & p_pivot) : void
+_edit_get_pivot() const : Point2
+_edit_get_transform() const : Transform2D
+set_visible(bool p_visible) : void
+is_visible() const : bool
+is_visible_in_tree() const : bool
+show() : void
+hide() : void
+update() : void
+set_light_mask(int p_light_mask) : void
+get_light_mask() const : int
+set_modulate(const Color & p_modulate) : void
+get_modulate() const : Color
+set_self_modulate(const Color & p_self_modulate) : void
+get_self_modulate() const : Color
+draw_line(const Point2 & p_from, const Point2 & p_to, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) : void
+draw_polyline(const Vector<Point2> & p_points, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) : void
+draw_polyline_colors(const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) : void
+draw_arc(const Vector2 & p_center, float p_radius, float p_start_angle, float p_end_angle, int p_point_count, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) : void
+draw_multiline(const Vector<Point2> & p_points, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) : void
+draw_multiline_colors(const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) : void
+draw_rect(const Rect2 & p_rect, const Color & p_color, bool p_filled = true, float p_width = 1.0, bool p_antialiased = false) : void
+draw_circle(const Point2 & p_pos, float p_radius, const Color & p_color) : void
+draw_texture(const Ref<Texture> & p_texture, const Point2 & p_pos, const Color & p_modulate = Color(1, 1, 1, 1), const Ref<Texture> & p_normal_map = Ref<Texture>()) : void
+draw_texture_rect(const Ref<Texture> & p_texture, const Rect2 & p_rect, bool p_tile = false, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, const Ref<Texture> & p_normal_map = Ref<Texture>()) : void
+draw_texture_rect_region(const Ref<Texture> & p_texture, const Rect2 & p_rect, const Rect2 & p_src_rect, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, const Ref<Texture> & p_normal_map = Ref<Texture>(), bool p_clip_uv = false) : void
+draw_style_box(const Ref<StyleBox> & p_style_box, const Rect2 & p_rect) : void
+draw_primitive(const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, Ref<Texture> p_texture = = Ref<Texture>(), float p_width = 1, const Ref<Texture> & p_normal_map = Ref<Texture>()) : void
+draw_polygon(const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), Ref<Texture> p_texture = = Ref<Texture>(), const Ref<Texture> & p_normal_map = Ref<Texture>(), bool p_antialiased = false) : void
+draw_colored_polygon(const Vector<Point2> & p_points, const Color & p_color, const Vector<Point2> & p_uvs = Vector<Point2>(), Ref<Texture> p_texture = = Ref<Texture>(), const Ref<Texture> & p_normal_map = Ref<Texture>(), bool p_antialiased = false) : void
+draw_mesh(const Ref<Mesh> & p_mesh, const Ref<Texture> & p_texture, const Ref<Texture> & p_normal_map, const Transform2D & p_transform = Transform2D(), const Color & p_modulate = Color(1, 1, 1)) : void
+draw_multimesh(const Ref<MultiMesh> & p_multimesh, const Ref<Texture> & p_texture, const Ref<Texture> & p_normal_map) : void
+draw_string(const Ref<Font> & p_font, const Point2 & p_pos, const String & p_text, const Color & p_modulate = Color(1, 1, 1), int p_clip_w = -1) : void
+draw_char(const Ref<Font> & p_font, const Point2 & p_pos, const String & p_char, const String & p_next = "", const Color & p_modulate = Color(1, 1, 1)) : float
+draw_set_transform(const Point2 & p_offset, float p_rot, const Size2 & p_scale) : void
+draw_set_transform_matrix(const Transform2D & p_matrix) : void
{static} +get_current_item_drawn() : CanvasItem *
+set_as_toplevel(bool p_toplevel) : void
+is_set_as_toplevel() const : bool
+set_draw_behind_parent(bool p_enable) : void
+is_draw_behind_parent_enabled() const : bool
+get_parent_item() const : CanvasItem *
{abstract} +get_transform() const = 0 : Transform2D
+get_global_transform() const : Transform2D
+get_global_transform_with_canvas() const : Transform2D
+get_toplevel() const : CanvasItem *
+get_canvas_item() const : RID
+set_block_transform_notify(bool p_enable) : void
+is_block_transform_notify_enabled() const : bool
+get_canvas_transform() const : Transform2D
+get_viewport_transform() const : Transform2D
+get_viewport_rect() const : Rect2
+get_viewport_rid() const : RID
+get_canvas() const : RID
+get_canvas_layer_instance_id() const : ObjectID
+get_world_2d() const : Ref<World2D>
+set_material(const Ref<Material> & p_material) : void
+get_material() const : Ref<Material>
+set_use_parent_material(bool p_use_parent_material) : void
+get_use_parent_material() const : bool
+make_input_local(const Ref<InputEvent> & p_event) const : Ref<InputEvent>
+make_canvas_position_local(const Vector2 & screen_point) const : Vector2
+get_global_mouse_position() const : Vector2
+get_local_mouse_position() const : Vector2
+set_notify_local_transform(bool p_enable) : void
+is_local_transform_notification_enabled() const : bool
+set_notify_transform(bool p_enable) : void
+is_transform_notification_enabled() const : bool
+force_update_transform() : void
+get_anchorable_rect() const : Rect2
+get_canvas_layer() const : int
+CanvasItem() : void
+~CanvasItem() : void
-_class_name : StringName
-xform_change : SelfList<Node> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L181{xform_change}]]]
-canvas_item : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L183{canvas_item}]]]
-group : String [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L184{group}]]]
-canvas_layer : CanvasLayer * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L186{canvas_layer}]]]
-modulate : Color [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L188{modulate}]]]
-self_modulate : Color [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L189{self_modulate}]]]
-children_items : List<CanvasItem *> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L191{children_items}]]]
-C : List<CanvasItem *>::Element * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L192{C}]]]
-light_mask : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L194{light_mask}]]]
-first_draw : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L196{first_draw}]]]
-visible : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L197{visible}]]]
-pending_update : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L198{pending_update}]]]
-toplevel : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L199{toplevel}]]]
-drawing : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L200{drawing}]]]
-block_transform_notify : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L201{block_transform_notify}]]]
-behind : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L202{behind}]]]
-use_parent_material : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L203{use_parent_material}]]]
-notify_local_transform : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L204{notify_local_transform}]]]
-notify_transform : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L205{notify_transform}]]]
-material : Ref<Material> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L207{material}]]]
-global_transform : Transform2D [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L209{global_transform}]]]
-global_invalid : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L210{global_invalid}]]]
{static} -current_item_drawn : CanvasItem * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/2d/canvas_item.h#L226{current_item_drawn}]]]
+NOTIFICATION_TRANSFORM_CHANGED : enum
+NOTIFICATION_DRAW : enum
+NOTIFICATION_VISIBILITY_CHANGED : enum
+NOTIFICATION_ENTER_CANVAS : enum
+NOTIFICATION_EXIT_CANVAS : enum
+NOTIFICATION_LOCAL_TRANSFORM_CHANGED : enum
+NOTIFICATION_WORLD_2D_CHANGED : enum
}
class "Node2D" as C_0002289363354048605759
class C_0002289363354048605759 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L36{Node2D}]] {
-operator=(const Node2D & p_rval) : void
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} #_get_bind_methods() : void (*)()
{static} +initialize_class() : void
#_initialize_classv() : void
#_get_get() const : bool (Object::*)(const StringName &,Variant &) const
#_getv(const StringName & p_name, Variant & r_ret) const : bool
#_get_set() const : bool (Object::*)(const StringName &,const Variant &)
#_setv(const StringName & p_name, const Variant & p_property) : bool
#_get_get_property_list() const : void (Object::*)(List<PropertyInfo> *) const
#_get_property_listv(List<PropertyInfo> * p_list, bool p_reversed) const : void
#_get_notification() const : void (Object::*)(int)
#_notificationv(int p_notification, bool p_reversed) : void
-_update_transform() : void
-_update_xform_values() : void
{static} #_bind_methods() : void
+_edit_get_state() const : Dictionary
+_edit_set_state(const Dictionary & p_state) : void
+_edit_set_position(const Point2 & p_position) : void
+_edit_get_position() const : Point2
+_edit_set_scale(const Size2 & p_scale) : void
+_edit_get_scale() const : Size2
+_edit_set_rotation(float p_rotation) : void
+_edit_get_rotation() const : float
+_edit_use_rotation() const : bool
+_edit_set_rect(const Rect2 & p_edit_rect) : void
+set_position(const Point2 & p_pos) : void
+set_rotation(float p_radians) : void
+set_rotation_degrees(float p_degrees) : void
+set_scale(const Size2 & p_scale) : void
+rotate(float p_radians) : void
+move_x(float p_delta, bool p_scaled = false) : void
+move_y(float p_delta, bool p_scaled = false) : void
+translate(const Vector2 & p_amount) : void
+global_translate(const Vector2 & p_amount) : void
+apply_scale(const Size2 & p_amount) : void
+get_position() const : Point2
+get_rotation() const : float
+get_rotation_degrees() const : float
+get_scale() const : Size2
+get_global_position() const : Point2
+get_global_rotation() const : float
+get_global_rotation_degrees() const : float
+get_global_scale() const : Size2
+set_transform(const Transform2D & p_transform) : void
+set_global_transform(const Transform2D & p_transform) : void
+set_global_position(const Point2 & p_pos) : void
+set_global_rotation(float p_radians) : void
+set_global_rotation_degrees(float p_degrees) : void
+set_global_scale(const Size2 & p_scale) : void
+set_z_index(int p_z) : void
+get_z_index() const : int
+look_at(const Vector2 & p_pos) : void
+get_angle_to(const Vector2 & p_pos) const : float
+to_local(Point2 p_global) const : Point2
+to_global(Point2 p_local) const : Point2
+set_z_as_relative(bool p_enabled) : void
+is_z_relative() const : bool
+get_relative_transform_to_parent(const Node * p_parent) const : Transform2D
+get_transform() const : Transform2D
+Node2D() : void
-_class_name : StringName
-pos : Point2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L40{pos}]]]
-angle : float [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L41{angle}]]]
-_scale : Size2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L42{_scale}]]]
-z_index : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L43{z_index}]]]
-z_relative : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L44{z_relative}]]]
-_mat : Transform2D [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L46{_mat}]]]
-_xform_dirty : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/scene/2d/node_2d.h#L48{_xform_dirty}]]]
}
C_0000945411446247634027 - -> C_0000945411446247634027 : +invalid_node_name_characters
C_0000300688871447362916 o- - C_0000053309527800613276 : +position
C_0000300688871447362916 o- - C_0000053309527800613276 : +size
C_0001296138246691404804 o- - C_0000053309527800613276 : +elements
C_0002153970433534458832 o- - C_0000945411446247634027 : +name
C_0002153970433534458832 o- - C_0001858199404643284193 : +class_name
C_0002153970433534458832 o- - C_0000945411446247634027 : +hint_string
C_0000104564426296396960 - -> C_0001858199404643284193 : +classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +resource_base_extensions
C_0000104564426296396960 - -> C_0001858199404643284193 : +compat_classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values
C_0000104564426296396960 - -> C_0000210234563198599367 : +default_values
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values_cached
C_0000218299049716973303 o- - C_0001858199404643284193 : -_class_name
C_0000218299049716973303 <.. C_0000104564426296396960 : +<<friend>>
C_0002074383603489565895 o- - C_0001858199404643284193 : -_class_name
C_0002074383603489565895 o- - C_0000945411446247634027 : -group
C_0002074383603489565895 o- - C_0001296138246691404804 : -global_transform
C_0002074383603489565895 - -> C_0002074383603489565895 : -current_item_drawn
C_0002074383603489565895 <.. C_0000104564426296396960 : +<<friend>>
C_0000218299049716973303 <|- - C_0002074383603489565895
C_0002289363354048605759 o- - C_0001858199404643284193 : -_class_name
C_0002289363354048605759 o- - C_0000053309527800613276 : -pos
C_0002289363354048605759 o- - C_0000053309527800613276 : -_scale
C_0002289363354048605759 o- - C_0001296138246691404804 : -_mat
C_0002289363354048605759 <.. C_0000104564426296396960 : +<<friend>>
C_0002074383603489565895 <|- - C_0002289363354048605759
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.16+8-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>