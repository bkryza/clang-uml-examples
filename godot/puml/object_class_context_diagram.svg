<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="9233px" preserveAspectRatio="none" style="width:25796px;height:9233px;" version="1.1" viewBox="0 0 25796 9233" width="25796px" zoomAndPan="magnify"><defs><filter height="300%" id="f1bb34djkekh3p" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacingAndGlyphs" textLength="253" x="12775.5" y="16.708">Godot Object class hierarchy</text><!--MD5=[9ddbd22804041489fb45650d196dcfe6]
class C_0001357046052919104842--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L62" target="_top" title="SafeNumeric" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L62" xlink:show="new" xlink:title="SafeNumeric" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="48" id="C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.5;" width="166" x="25050.5" y="8282.4531"/><ellipse cx="25065.5" cy="8298.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25068.4688,8304.0938 Q25067.8906,8304.3906 25067.25,8304.5313 Q25066.6094,8304.6875 25065.9063,8304.6875 Q25063.4063,8304.6875 25062.0781,8303.0469 Q25060.7656,8301.3906 25060.7656,8298.2656 Q25060.7656,8295.1406 25062.0781,8293.4844 Q25063.4063,8291.8281 25065.9063,8291.8281 Q25066.6094,8291.8281 25067.25,8291.9844 Q25067.9063,8292.1406 25068.4688,8292.4375 L25068.4688,8295.1563 Q25067.8438,8294.5781 25067.25,8294.3125 Q25066.6563,8294.0313 25066.0313,8294.0313 Q25064.6875,8294.0313 25064,8295.1094 Q25063.3125,8296.1719 25063.3125,8298.2656 Q25063.3125,8300.3594 25064,8301.4375 Q25064.6875,8302.5 25066.0313,8302.5 Q25066.6563,8302.5 25067.25,8302.2344 Q25067.8438,8301.9531 25068.4688,8301.375 L25068.4688,8304.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="25079.5" y="8302.6074">SafeNumeric</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="53" x="25166.5" y="8279.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="51" x="25167.5" y="8291.5918">uint32_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25051.5" x2="25215.5" y1="8314.4531" y2="8314.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="25051.5" x2="25215.5" y1="8322.4531" y2="8322.4531"/></a><!--MD5=[0248b83d95ca29d05ff879ba22e97aa0]
class C_0000699772808699382057--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" target="_top" title="SafeRefCount" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" xlink:show="new" xlink:title="SafeRefCount" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="124.8281" id="C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="24968.5" y="4907.4531"/><ellipse cx="25022.75" cy="4923.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25025.7188,4929.0938 Q25025.1406,4929.3906 25024.5,4929.5313 Q25023.8594,4929.6875 25023.1563,4929.6875 Q25020.6563,4929.6875 25019.3281,4928.0469 Q25018.0156,4926.3906 25018.0156,4923.2656 Q25018.0156,4920.1406 25019.3281,4918.4844 Q25020.6563,4916.8281 25023.1563,4916.8281 Q25023.8594,4916.8281 25024.5,4916.9844 Q25025.1563,4917.1406 25025.7188,4917.4375 L25025.7188,4920.1563 Q25025.0938,4919.5781 25024.5,4919.3125 Q25023.9063,4919.0313 25023.2813,4919.0313 Q25021.9375,4919.0313 25021.25,4920.1094 Q25020.5625,4921.1719 25020.5625,4923.2656 Q25020.5625,4925.3594 25021.25,4926.4375 Q25021.9375,4927.5 25023.2813,4927.5 Q25023.9063,4927.5 25024.5,4927.2344 Q25025.0938,4926.9531 25025.7188,4926.375 L25025.7188,4929.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="25043.25" y="4927.6074">SafeRefCount</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24969.5" x2="25169.5" y1="4939.4531" y2="4939.4531"/><ellipse cx="24979.5" cy="4950.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="24988.5" y="4953.6636">get() const : uint32_t</text><ellipse cx="24979.5" cy="4963.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="24988.5" y="4966.4683">init(uint32_t p_value = 1) : void</text><ellipse cx="24979.5" cy="4976.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="24988.5" y="4979.2729">ref() : bool</text><ellipse cx="24979.5" cy="4988.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="24988.5" y="4992.0776">refval() : uint32_t</text><ellipse cx="24979.5" cy="5001.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="24988.5" y="5004.8823">unref() : bool</text><ellipse cx="24979.5" cy="5014.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24988.5" y="5017.687">unrefval() : uint32_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24969.5" x2="25169.5" y1="5024.2813" y2="5024.2813"/></a><!--MD5=[bdf481e0258441d9ea4c4f618bd16c94]
class C_0001858199404643284193--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" target="_top" title="StringName" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" xlink:show="new" xlink:title="StringName" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="328.0938" id="C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.5;" width="346" x="13115.5" y="8893.9531"/><ellipse cx="13247.75" cy="8909.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13250.7188,8915.5938 Q13250.1406,8915.8906 13249.5,8916.0313 Q13248.8594,8916.1875 13248.1563,8916.1875 Q13245.6563,8916.1875 13244.3281,8914.5469 Q13243.0156,8912.8906 13243.0156,8909.7656 Q13243.0156,8906.6406 13244.3281,8904.9844 Q13245.6563,8903.3281 13248.1563,8903.3281 Q13248.8594,8903.3281 13249.5,8903.4844 Q13250.1563,8903.6406 13250.7188,8903.9375 L13250.7188,8906.6563 Q13250.0938,8906.0781 13249.5,8905.8125 Q13248.9063,8905.5313 13248.2813,8905.5313 Q13246.9375,8905.5313 13246.25,8906.6094 Q13245.5625,8907.6719 13245.5625,8909.7656 Q13245.5625,8911.8594 13246.25,8912.9375 Q13246.9375,8914 13248.2813,8914 Q13248.9063,8914 13249.5,8913.7344 Q13250.0938,8913.4531 13250.7188,8912.875 L13250.7188,8915.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="13268.25" y="8914.1074">StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13116.5" x2="13460.5" y1="8925.9531" y2="8925.9531"/><ellipse cx="13126.5" cy="8936.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="13135.5" y="8940.1636">StringName(const char * p_name) : void</text><ellipse cx="13126.5" cy="8949.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="13135.5" y="8952.9683">StringName(const StringName &amp; p_name) : void</text><ellipse cx="13126.5" cy="8962.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="13135.5" y="8965.7729">StringName(const String &amp; p_name) : void</text><ellipse cx="13126.5" cy="8975.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="13135.5" y="8978.5776">StringName(const StaticCString &amp; p_static_string) : void</text><ellipse cx="13126.5" cy="8988.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="13135.5" y="8991.3823">StringName() : void</text><ellipse cx="13126.5" cy="9000.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="13135.5" y="9004.187">~StringName() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13116.5" x2="13460.5" y1="9010.7813" y2="9010.7813"/><ellipse cx="13126.5" cy="9021.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="13135.5" y="9024.9917">operator=(const StringName &amp; p_name) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13116.5" x2="13460.5" y1="9031.5859" y2="9031.5859"/><ellipse cx="13126.5" cy="9042.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="13135.5" y="9045.7964">operator!=(const String &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="9055.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="13135.5" y="9058.6011">operator!=(const StringName &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="9068.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="13135.5" y="9071.4058">operator&lt;(const StringName &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="13135.5" y="9084.2104">operator==(const String &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="9093.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="13135.5" y="9097.0151">operator==(const char * p_name) const : bool</text><ellipse cx="13126.5" cy="9106.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="13135.5" y="9109.8198">operator==(const StringName &amp; p_name) const : bool</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13116.5" x2="13460.5" y1="9116.4141" y2="9116.4141"/><ellipse cx="13126.5" cy="9127.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="13135.5" y="9130.6245">data_unique_pointer() const : const void *</text><ellipse cx="13126.5" cy="9140.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="13135.5" y="9143.4292">hash() const : uint32_t</text><ellipse cx="13126.5" cy="9153.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="13135.5" y="9156.2339">operator String() const : String</text><ellipse cx="13126.5" cy="9165.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="13135.5" y="9169.0386">operator const void *() const : const void *</text><ellipse cx="13126.5" cy="9178.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="245" x="13135.5" y="9181.8433">search(const char * p_name) : StringName</text><ellipse cx="13126.5" cy="9191.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="13135.5" y="9194.6479">search(const CharType * p_name) : StringName</text><ellipse cx="13126.5" cy="9204.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="13135.5" y="9207.4526">search(const String &amp; p_name) : StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13116.5" x2="13460.5" y1="9214.0469" y2="9214.0469"/></a><!--MD5=[c9ab0454be9bc9dd8cd0824f6bdde71d]
class C_0001299121424291583786--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" target="_top" title="Dictionary" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" xlink:show="new" xlink:title="Dictionary" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="417.7266" id="C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="14580" y="1631.4531"/><ellipse cx="14753.25" cy="1647.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14756.2188,1653.0938 Q14755.6406,1653.3906 14755,1653.5313 Q14754.3594,1653.6875 14753.6563,1653.6875 Q14751.1563,1653.6875 14749.8281,1652.0469 Q14748.5156,1650.3906 14748.5156,1647.2656 Q14748.5156,1644.1406 14749.8281,1642.4844 Q14751.1563,1640.8281 14753.6563,1640.8281 Q14754.3594,1640.8281 14755,1640.9844 Q14755.6563,1641.1406 14756.2188,1641.4375 L14756.2188,1644.1563 Q14755.5938,1643.5781 14755,1643.3125 Q14754.4063,1643.0313 14753.7813,1643.0313 Q14752.4375,1643.0313 14751.75,1644.1094 Q14751.0625,1645.1719 14751.0625,1647.2656 Q14751.0625,1649.3594 14751.75,1650.4375 Q14752.4375,1651.5 14753.7813,1651.5 Q14754.4063,1651.5 14755,1651.2344 Q14755.5938,1650.9531 14756.2188,1650.375 L14756.2188,1653.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="14773.75" y="1651.6074">Dictionary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14581" x2="14996" y1="1663.4531" y2="1663.4531"/><ellipse cx="14591" cy="1674.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="14600" y="1677.6636">Dictionary(const Dictionary &amp; p_from) : void</text><ellipse cx="14591" cy="1687.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="14600" y="1690.4683">Dictionary() : void</text><ellipse cx="14591" cy="1700.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="14600" y="1703.2729">~Dictionary() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="14581" x2="14996" y1="1709.8672" y2="1709.8672"/><ellipse cx="14591" cy="1720.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="14600" y="1724.0776">operator=(const Dictionary &amp; p_dictionary) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="14581" x2="14996" y1="1730.6719" y2="1730.6719"/><ellipse cx="14591" cy="1741.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="14600" y="1744.8823">operator!=(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="14591" cy="1754.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="14600" y="1757.687">operator==(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="14591" cy="1767.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="14600" y="1770.4917">operator[](const Variant &amp; p_key) : Variant &amp;</text><ellipse cx="14591" cy="1780.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="14600" y="1783.2964">operator[](const Variant &amp; p_key) const : const Variant &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="14581" x2="14996" y1="1789.8906" y2="1789.8906"/><ellipse cx="14591" cy="1800.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="14600" y="1804.1011">clear() : void</text><ellipse cx="14591" cy="1813.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="14600" y="1816.9058">duplicate(bool p_deep = false) const : Dictionary</text><ellipse cx="14591" cy="1826.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="14600" y="1829.7104">empty() const : bool</text><ellipse cx="14591" cy="1839.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="14600" y="1842.5151">erase(const Variant &amp; p_key) : bool</text><ellipse cx="14591" cy="1852.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="14600" y="1855.3198">get(const Variant &amp; p_key, const Variant &amp; p_default) const : Variant</text><ellipse cx="14591" cy="1864.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="14600" y="1868.1245">get_key_at_index(int p_index) const : Variant</text><ellipse cx="14591" cy="1877.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="14600" y="1880.9292">get_key_list(List&lt;Variant&gt; * p_keys) const : void</text><ellipse cx="14591" cy="1890.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="14600" y="1893.7339">get_valid(const Variant &amp; p_key) const : Variant</text><ellipse cx="14591" cy="1903.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="14600" y="1906.5386">get_value_at_index(int p_index) const : Variant</text><ellipse cx="14591" cy="1916.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="14600" y="1919.3433">getptr(const Variant &amp; p_key) : Variant *</text><ellipse cx="14591" cy="1928.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="14600" y="1932.1479">getptr(const Variant &amp; p_key) const : const Variant *</text><ellipse cx="14591" cy="1941.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="14600" y="1944.9526">has(const Variant &amp; p_key) const : bool</text><ellipse cx="14591" cy="1954.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="14600" y="1957.7573">has_all(const Array &amp; p_keys) const : bool</text><ellipse cx="14591" cy="1967.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="14600" y="1970.562">hash() const : uint32_t</text><ellipse cx="14591" cy="1980.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="14600" y="1983.3667">id() const : const void *</text><ellipse cx="14591" cy="1992.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="14600" y="1996.1714">keys() const : Array</text><ellipse cx="14591" cy="2005.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="14600" y="2008.9761">next(const Variant * p_key = __null) const : const Variant *</text><ellipse cx="14591" cy="2018.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="14600" y="2021.7808">size() const : int</text><ellipse cx="14591" cy="2031.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="14600" y="2034.5854">values() const : Array</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14581" x2="14996" y1="2041.1797" y2="2041.1797"/></a><!--MD5=[5ff974ea4457aef713dc6a6e7de5ffac]
class C_0002025812040042972946--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" target="_top" title="RefPtr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" xlink:show="new" xlink:title="RefPtr" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="200.0469" id="C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.5;" width="302" x="15032.5" y="1740.4531"/><ellipse cx="15160.25" cy="1756.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15163.2188,1762.0938 Q15162.6406,1762.3906 15162,1762.5313 Q15161.3594,1762.6875 15160.6563,1762.6875 Q15158.1563,1762.6875 15156.8281,1761.0469 Q15155.5156,1759.3906 15155.5156,1756.2656 Q15155.5156,1753.1406 15156.8281,1751.4844 Q15158.1563,1749.8281 15160.6563,1749.8281 Q15161.3594,1749.8281 15162,1749.9844 Q15162.6563,1750.1406 15163.2188,1750.4375 L15163.2188,1753.1563 Q15162.5938,1752.5781 15162,1752.3125 Q15161.4063,1752.0313 15160.7813,1752.0313 Q15159.4375,1752.0313 15158.75,1753.1094 Q15158.0625,1754.1719 15158.0625,1756.2656 Q15158.0625,1758.3594 15158.75,1759.4375 Q15159.4375,1760.5 15160.7813,1760.5 Q15161.4063,1760.5 15162,1760.2344 Q15162.5938,1759.9531 15163.2188,1759.375 L15163.2188,1762.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="15180.75" y="1760.6074">RefPtr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15033.5" x2="15333.5" y1="1772.4531" y2="1772.4531"/><ellipse cx="15043.5" cy="1783.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="15052.5" y="1786.6636">RefPtr(const RefPtr &amp; p_other) : void</text><ellipse cx="15043.5" cy="1796.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="15052.5" y="1799.4683">RefPtr() : void</text><ellipse cx="15043.5" cy="1809.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="15052.5" y="1812.2729">~RefPtr() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="15033.5" x2="15333.5" y1="1818.8672" y2="1818.8672"/><ellipse cx="15043.5" cy="1829.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="15052.5" y="1833.0776">operator=(const RefPtr &amp; p_other) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="15033.5" x2="15333.5" y1="1839.6719" y2="1839.6719"/><ellipse cx="15043.5" cy="1850.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="15052.5" y="1853.8823">operator!=(const RefPtr &amp; p_other) const : bool</text><ellipse cx="15043.5" cy="1863.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="15052.5" y="1866.687">operator==(const RefPtr &amp; p_other) const : bool</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="15033.5" x2="15333.5" y1="1873.2813" y2="1873.2813"/><ellipse cx="15043.5" cy="1884.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="15052.5" y="1887.4917">get_data() const : void *</text><ellipse cx="15043.5" cy="1897.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="15052.5" y="1900.2964">get_rid() const : RID</text><ellipse cx="15043.5" cy="1909.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="15052.5" y="1913.1011">is_null() const : bool</text><ellipse cx="15043.5" cy="1922.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="15052.5" y="1925.9058">unref() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15033.5" x2="15333.5" y1="1932.5" y2="1932.5"/></a><!--MD5=[6bf78f0ec114838316d8adbe773b0c0e]
class C_0001682405743486361214--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41" target="_top" title="Set" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41" xlink:show="new" xlink:title="Set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="48" id="C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.5;" width="94" x="8401.5" y="4945.9531"/><ellipse cx="8416.5" cy="4961.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8419.4688,4967.5938 Q8418.8906,4967.8906 8418.25,4968.0313 Q8417.6094,4968.1875 8416.9063,4968.1875 Q8414.4063,4968.1875 8413.0781,4966.5469 Q8411.7656,4964.8906 8411.7656,4961.7656 Q8411.7656,4958.6406 8413.0781,4956.9844 Q8414.4063,4955.3281 8416.9063,4955.3281 Q8417.6094,4955.3281 8418.25,4955.4844 Q8418.9063,4955.6406 8419.4688,4955.9375 L8419.4688,4958.6563 Q8418.8438,4958.0781 8418.25,4957.8125 Q8417.6563,4957.5313 8417.0313,4957.5313 Q8415.6875,4957.5313 8415,4958.6094 Q8414.3125,4959.6719 8414.3125,4961.7656 Q8414.3125,4963.8594 8415,4964.9375 Q8415.6875,4966 8417.0313,4966 Q8417.6563,4966 8418.25,4965.7344 Q8418.8438,4965.4531 8419.4688,4964.875 L8419.4688,4967.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="8430.5" y="4966.1074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="39" x="8459.5" y="4942.9531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="37" x="8460.5" y="4955.0918">String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8402.5" x2="8494.5" y1="4977.9531" y2="4977.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8402.5" x2="8494.5" y1="4985.9531" y2="4985.9531"/></a><!--MD5=[7554e1c91c178cfd46cd5992944992da]
class C_0001578539238208480863--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/hash_map.h#L59" target="_top" title="HashMap" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/hash_map.h#L59" xlink:show="new" xlink:title="HashMap" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="48" id="C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.5;" width="256" x="15369.5" y="1816.4531"/><ellipse cx="15384.5" cy="1832.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15387.4688,1838.0938 Q15386.8906,1838.3906 15386.25,1838.5313 Q15385.6094,1838.6875 15384.9063,1838.6875 Q15382.4063,1838.6875 15381.0781,1837.0469 Q15379.7656,1835.3906 15379.7656,1832.2656 Q15379.7656,1829.1406 15381.0781,1827.4844 Q15382.4063,1825.8281 15384.9063,1825.8281 Q15385.6094,1825.8281 15386.25,1825.9844 Q15386.9063,1826.1406 15387.4688,1826.4375 L15387.4688,1829.1563 Q15386.8438,1828.5781 15386.25,1828.3125 Q15385.6563,1828.0313 15385.0313,1828.0313 Q15383.6875,1828.0313 15383,1829.1094 Q15382.3125,1830.1719 15382.3125,1832.2656 Q15382.3125,1834.3594 15383,1835.4375 Q15383.6875,1836.5 15385.0313,1836.5 Q15385.6563,1836.5 15386.25,1836.2344 Q15386.8438,1835.9531 15387.4688,1835.375 L15387.4688,1838.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="15398.5" y="1836.6074">HashMap</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="164" x="15464.5" y="1813.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="162" x="15465.5" y="1825.5918">StringName,Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15370.5" x2="15624.5" y1="1848.4531" y2="1848.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15370.5" x2="15624.5" y1="1856.4531" y2="1856.4531"/></a><!--MD5=[fcb6dc9edc5e54eb9e8bfa0c33478799]
class C_0000751300156436098886--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/list.h#L47" target="_top" title="List" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/list.h#L47" xlink:show="new" xlink:title="List" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="48" id="C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.5;" width="175" x="15661" y="1816.4531"/><ellipse cx="15676" cy="1832.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15678.9688,1838.0938 Q15678.3906,1838.3906 15677.75,1838.5313 Q15677.1094,1838.6875 15676.4063,1838.6875 Q15673.9063,1838.6875 15672.5781,1837.0469 Q15671.2656,1835.3906 15671.2656,1832.2656 Q15671.2656,1829.1406 15672.5781,1827.4844 Q15673.9063,1825.8281 15676.4063,1825.8281 Q15677.1094,1825.8281 15677.75,1825.9844 Q15678.4063,1826.1406 15678.9688,1826.4375 L15678.9688,1829.1563 Q15678.3438,1828.5781 15677.75,1828.3125 Q15677.1563,1828.0313 15676.5313,1828.0313 Q15675.1875,1828.0313 15674.5,1829.1094 Q15673.8125,1830.1719 15673.8125,1832.2656 Q15673.8125,1834.3594 15674.5,1835.4375 Q15675.1875,1836.5 15676.5313,1836.5 Q15677.1563,1836.5 15677.75,1836.2344 Q15678.3438,1835.9531 15678.9688,1835.375 L15678.9688,1838.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="15690" y="1836.6074">List</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="120" x="15719" y="1813.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="118" x="15720" y="1825.5918">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15662" x2="15835" y1="1848.4531" y2="1848.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15662" x2="15835" y1="1856.4531" y2="1856.4531"/></a><!--MD5=[75bc4a0739afdfacd2c3e3c13cd7e181]
class C_0000051860595756965531--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41" target="_top" title="Set" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41" xlink:show="new" xlink:title="Set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="48" id="C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.5;" width="106" x="15871.5" y="1816.4531"/><ellipse cx="15886.5" cy="1832.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15889.4688,1838.0938 Q15888.8906,1838.3906 15888.25,1838.5313 Q15887.6094,1838.6875 15886.9063,1838.6875 Q15884.4063,1838.6875 15883.0781,1837.0469 Q15881.7656,1835.3906 15881.7656,1832.2656 Q15881.7656,1829.1406 15883.0781,1827.4844 Q15884.4063,1825.8281 15886.9063,1825.8281 Q15887.6094,1825.8281 15888.25,1825.9844 Q15888.9063,1826.1406 15889.4688,1826.4375 L15889.4688,1829.1563 Q15888.8438,1828.5781 15888.25,1828.3125 Q15887.6563,1828.0313 15887.0313,1828.0313 Q15885.6875,1828.0313 15885,1829.1094 Q15884.3125,1830.1719 15884.3125,1832.2656 Q15884.3125,1834.3594 15885,1835.4375 Q15885.6875,1836.5 15887.0313,1836.5 Q15887.6563,1836.5 15888.25,1836.2344 Q15888.8438,1835.9531 15889.4688,1835.375 L15889.4688,1838.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="15900.5" y="1836.6074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="51" x="15929.5" y="1813.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="49" x="15930.5" y="1825.5918">Object *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15872.5" x2="15976.5" y1="1848.4531" y2="1848.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15872.5" x2="15976.5" y1="1856.4531" y2="1856.4531"/></a><!--MD5=[f0802071db4c55ed48c8eca4075aaca6]
class C_0001531814603945772616--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" target="_top" title="Object" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" xlink:show="new" xlink:title="Object" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="1170.0078" id="C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.5;" width="1344" x="13198.5" y="289.9531"/><ellipse cx="13846.25" cy="305.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13849.2188,311.5938 Q13848.6406,311.8906 13848,312.0313 Q13847.3594,312.1875 13846.6563,312.1875 Q13844.1563,312.1875 13842.8281,310.5469 Q13841.5156,308.8906 13841.5156,305.7656 Q13841.5156,302.6406 13842.8281,300.9844 Q13844.1563,299.3281 13846.6563,299.3281 Q13847.3594,299.3281 13848,299.4844 Q13848.6563,299.6406 13849.2188,299.9375 L13849.2188,302.6563 Q13848.5938,302.0781 13848,301.8125 Q13847.4063,301.5313 13846.7813,301.5313 Q13845.4375,301.5313 13844.75,302.6094 Q13844.0625,303.6719 13844.0625,305.7656 Q13844.0625,307.8594 13844.75,308.9375 Q13845.4375,310 13846.7813,310 Q13847.4063,310 13848,309.7344 Q13848.5938,309.4531 13849.2188,308.875 L13849.2188,311.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="13866.75" y="310.1074">Object</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13199.5" x2="14541.5" y1="321.9531" y2="321.9531"/><ellipse cx="13209.5" cy="332.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="13218.5" y="336.1636">Object() : void</text><ellipse cx="13209.5" cy="345.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="13218.5" y="348.9683">~Object() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13199.5" x2="14541.5" y1="355.5625" y2="355.5625"/><ellipse cx="13209.5" cy="366.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="13218.5" y="369.7729">_change_notify(const char * p_property = "") : void</text><ellipse cx="13209.5" cy="379.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="13218.5" y="382.5776">_is_gpl_reversed() const : bool</text><ellipse cx="13209.5" cy="392.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="13218.5" y="395.3823">_use_rc() : ObjectRC *</text><ellipse cx="13209.5" cy="404.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="13218.5" y="408.187">add_change_receptor(Object * p_receptor) : void</text><ellipse cx="13209.5" cy="417.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="13218.5" y="420.9917">add_user_signal(const MethodInfo &amp; p_signal) : void</text><ellipse cx="13209.5" cy="430.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="13218.5" y="433.7964">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="13209.5" cy="443.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1269" x="13218.5" y="446.6011">call(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="13209.5" cy="456.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1318" x="13218.5" y="459.4058">call_deferred(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13209.5" cy="469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="13218.5" y="472.2104">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13209.5" cy="481.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1312" x="13218.5" y="485.0151">call_multilevel(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13209.5" cy="494.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="13218.5" y="497.8198">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13209.5" cy="507.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="13218.5" y="510.6245">callv(const StringName &amp; p_method, const Array &amp; p_args) : Variant</text><ellipse cx="13209.5" cy="520.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="13218.5" y="523.4292">can_translate_messages() const : bool</text><ellipse cx="13209.5" cy="533.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="270" x="13218.5" y="536.2339">cast_to&lt;T&gt;(const Object * p_object) : const T *</text><ellipse cx="13209.5" cy="545.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="200" x="13218.5" y="549.0386">cast_to&lt;T&gt;(Object * p_object) : T *</text><ellipse cx="13209.5" cy="558.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="13218.5" y="561.8433">clear_internal_resource_paths() : void</text><ellipse cx="13209.5" cy="571.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1023" x="13218.5" y="574.6479">connect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method, const Vector&lt;Variant&gt; &amp; p_binds = Vector&lt;Variant&gt;(), uint32_t p_flags = 0) : Error</text><ellipse cx="13209.5" cy="584.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="13218.5" y="587.4526">disconnect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) : void</text><ellipse cx="13209.5" cy="597.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="13218.5" y="600.2573">editor_clear_section_folding() : void</text><ellipse cx="13209.5" cy="609.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="13218.5" y="613.062">editor_get_section_folding() const : const Set&lt;String&gt; &amp;</text><ellipse cx="13209.5" cy="622.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="13218.5" y="625.8667">editor_is_section_unfolded(const String &amp; p_section) : bool</text><ellipse cx="13209.5" cy="635.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="13218.5" y="638.6714">editor_set_section_unfold(const String &amp; p_section, bool p_unfolded) : void</text><ellipse cx="13209.5" cy="648.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="13218.5" y="651.4761">emit_signal(const StringName &amp; p_name, const Variant ** p_args, int p_argcount) : Error</text><ellipse cx="13209.5" cy="661.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1304" x="13218.5" y="664.2808">emit_signal(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Error</text><ellipse cx="13209.5" cy="673.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="13218.5" y="677.0854">get(const StringName &amp; p_name, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="686.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="13218.5" y="689.8901">get_all_signal_connections(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="699.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="13218.5" y="702.6948">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="13209.5" cy="712.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13218.5" y="715.4995">get_category_static() : String</text><ellipse cx="13209.5" cy="725.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13218.5" y="728.3042">get_class() const : String</text><ellipse cx="13209.5" cy="737.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="13218.5" y="741.1089">get_class_name() const : const StringName &amp;</text><ellipse cx="13209.5" cy="750.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13218.5" y="753.9136">get_class_ptr_static() : void *</text><ellipse cx="13209.5" cy="763.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13218.5" y="766.7183">get_class_static() : String</text><ellipse cx="13209.5" cy="776.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="13218.5" y="779.5229">get_edited_version() const : uint32_t</text><ellipse cx="13209.5" cy="789.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="521" x="13218.5" y="792.3276">get_indexed(const Vector&lt;StringName&gt; &amp; p_names, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="801.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13218.5" y="805.1323">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13209.5" cy="814.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="13218.5" y="817.937">get_instance_id() const : ObjectID</text><ellipse cx="13209.5" cy="827.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="13218.5" y="830.7417">get_meta(const String &amp; p_name) const : Variant</text><ellipse cx="13209.5" cy="840.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="13218.5" y="843.5464">get_meta_list(List&lt;String&gt; * p_list) const : void</text><ellipse cx="13209.5" cy="853.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="13218.5" y="856.3511">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="13209.5" cy="865.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13218.5" y="869.1558">get_parent_class_static() : String</text><ellipse cx="13209.5" cy="878.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="13218.5" y="881.9604">get_persistent_signal_connection_count() const : int</text><ellipse cx="13209.5" cy="891.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="13218.5" y="894.7651">get_property_list(List&lt;PropertyInfo&gt; * p_list, bool p_reversed = false) const : void</text><ellipse cx="13209.5" cy="904.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="13218.5" y="907.5698">get_save_class() const : String</text><ellipse cx="13209.5" cy="917.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="13218.5" y="920.3745">get_script() const : RefPtr</text><ellipse cx="13209.5" cy="929.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="13218.5" y="933.1792">get_script_instance() const : ScriptInstance *</text><ellipse cx="13209.5" cy="942.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="13218.5" y="945.9839">get_script_instance_binding(int p_script_language_index) : void *</text><ellipse cx="13209.5" cy="955.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="13218.5" y="958.7886">get_signal_connection_list(const StringName &amp; p_signal, List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="968.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="13218.5" y="971.5933">get_signal_list(List&lt;MethodInfo&gt; * p_signals) const : void</text><ellipse cx="13209.5" cy="981.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="13218.5" y="984.3979">get_signals_connected_to_this(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="993.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="582" x="13218.5" y="997.2026">get_static_property_type(const StringName &amp; p_property, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="13209.5" cy="1006.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="663" x="13218.5" y="1010.0073">get_static_property_type_indexed(const Vector&lt;StringName&gt; &amp; p_path, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="13209.5" cy="1019.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="13218.5" y="1022.812">get_translatable_strings(List&lt;String&gt; * p_strings) const : void</text><ellipse cx="13209.5" cy="1032.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="13218.5" y="1035.6167">getvar(const Variant &amp; p_key, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="1045.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="13218.5" y="1048.4214">has_meta(const String &amp; p_name) const : bool</text><ellipse cx="13209.5" cy="1058.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="13218.5" y="1061.2261">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="13209.5" cy="1070.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="13218.5" y="1074.0308">has_script_instance_binding(int p_script_language_index) : bool</text><ellipse cx="13209.5" cy="1083.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="13218.5" y="1086.8354">has_signal(const StringName &amp; p_name) const : bool</text><ellipse cx="13209.5" cy="1096.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13218.5" y="1099.6401">initialize_class() : void</text><ellipse cx="13209.5" cy="1109.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="13218.5" y="1112.4448">is_blocking_signals() const : bool</text><ellipse cx="13209.5" cy="1122.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13218.5" y="1125.2495">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13209.5" cy="1134.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13218.5" y="1138.0542">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13209.5" cy="1147.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="13218.5" y="1150.8589">is_connected(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) const : bool</text><ellipse cx="13209.5" cy="1160.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="13218.5" y="1163.6636">is_edited() const : bool</text><ellipse cx="13209.5" cy="1173.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="13218.5" y="1176.4683">is_queued_for_deletion() const : bool</text><ellipse cx="13209.5" cy="1186.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="13218.5" y="1189.2729">notification(int p_notification, bool p_reversed = false) : void</text><ellipse cx="13209.5" cy="1198.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="13218.5" y="1202.0776">register_custom_data_to_otdb() : void</text><ellipse cx="13209.5" cy="1211.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="13218.5" y="1214.8823">remove_change_receptor(Object * p_receptor) : void</text><ellipse cx="13209.5" cy="1224.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="13218.5" y="1227.687">remove_meta(const String &amp; p_name) : void</text><ellipse cx="13209.5" cy="1237.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="502" x="13218.5" y="1240.4917">set(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="1250.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13218.5" y="1253.2964">set_block_signals(bool p_block) : void</text><ellipse cx="13209.5" cy="1262.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="13218.5" y="1266.1011">set_deferred(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="13209.5" cy="1275.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="13218.5" y="1278.9058">set_edited(bool p_edited) : void</text><ellipse cx="13209.5" cy="1288.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="613" x="13218.5" y="1291.7104">set_indexed(const Vector&lt;StringName&gt; &amp; p_names, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="1301.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="13218.5" y="1304.5151">set_message_translation(bool p_enable) : void</text><ellipse cx="13209.5" cy="1314.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="13218.5" y="1317.3198">set_meta(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="13209.5" cy="1326.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="13218.5" y="1330.1245">set_script(const RefPtr &amp; p_script) : void</text><ellipse cx="13209.5" cy="1339.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="476" x="13218.5" y="1342.9292">set_script_and_instance(const RefPtr &amp; p_script, ScriptInstance * p_instance) : void</text><ellipse cx="13209.5" cy="1352.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="13218.5" y="1355.7339">set_script_instance(ScriptInstance * p_instance) : void</text><ellipse cx="13209.5" cy="1365.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="13218.5" y="1368.5386">set_script_instance_binding(int p_script_language_index, void * p_data) : void</text><ellipse cx="13209.5" cy="1378.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="13218.5" y="1381.3433">setvar(const Variant &amp; p_key, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="1390.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="13218.5" y="1394.1479">to_string() : String</text><ellipse cx="13209.5" cy="1403.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="13218.5" y="1406.9526">tr(const StringName &amp; p_message) const : StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13199.5" x2="14541.5" y1="1413.5469" y2="1413.5469"/><ellipse cx="13209.5" cy="1424.5469" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="13218.5" y="1427.7573">NOTIFICATION_POSTINITIALIZE : enum</text><ellipse cx="13209.5" cy="1437.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="13218.5" y="1440.562">NOTIFICATION_PREDELETE : enum</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13204.5" y="1445.1563"/><ellipse cx="13209.5" cy="1450.1563" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="13218.5" y="1453.3667">_is_queued_for_deletion : bool</text></a><!--MD5=[8eacd4da8b6a8f3c33abf484b38f77cb]
class C_0000219886141561409828--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" target="_top" title="Object##ConnectFlags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" xlink:show="new" xlink:title="Object##ConnectFlags" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="99.2188" id="C_0000219886141561409828" style="stroke: #A80036; stroke-width: 1.5;" width="198" x="14062.5" y="71.4531"/><ellipse cx="14092.35" cy="87.4531" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14096.4594,93.4531 L14088.7406,93.4531 L14088.7406,81.0625 L14096.4594,81.0625 L14096.4594,83.2188 L14091.1938,83.2188 L14091.1938,85.8906 L14095.9594,85.8906 L14095.9594,88.0469 L14091.1938,88.0469 L14091.1938,91.2969 L14096.4594,91.2969 L14096.4594,93.4531 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="133" x="14109.65" y="91.6074">Object::ConnectFlags</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14063.5" x2="14259.5" y1="103.4531" y2="103.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="14068.5" y="117.6636">CONNECT_DEFERRED</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="14068.5" y="130.4683">CONNECT_PERSIST</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="14068.5" y="143.2729">CONNECT_ONESHOT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="14068.5" y="156.0776">CONNECT_REFERENCE_COUNTED</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14063.5" x2="14259.5" y1="162.6719" y2="162.6719"/></a><!--MD5=[c100d2fcbd7e4572a54d94b4ec867b89]
class C_0001267214583673362755--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" target="_top" title="Object##Connection" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" xlink:show="new" xlink:title="Object##Connection" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="184.0469" id="C_0001267214583673362755" style="stroke: #A80036; stroke-width: 1.5;" width="363" x="5574" y="28.9531"/><ellipse cx="5691.75" cy="44.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5694.7188,50.5938 Q5694.1406,50.8906 5693.5,51.0313 Q5692.8594,51.1875 5692.1563,51.1875 Q5689.6563,51.1875 5688.3281,49.5469 Q5687.0156,47.8906 5687.0156,44.7656 Q5687.0156,41.6406 5688.3281,39.9844 Q5689.6563,38.3281 5692.1563,38.3281 Q5692.8594,38.3281 5693.5,38.4844 Q5694.1563,38.6406 5694.7188,38.9375 L5694.7188,41.6563 Q5694.0938,41.0781 5693.5,40.8125 Q5692.9063,40.5313 5692.2813,40.5313 Q5690.9375,40.5313 5690.25,41.6094 Q5689.5625,42.6719 5689.5625,44.7656 Q5689.5625,46.8594 5690.25,47.9375 Q5690.9375,49 5692.2813,49 Q5692.9063,49 5693.5,48.7344 Q5694.0938,48.4531 5694.7188,47.875 L5694.7188,50.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="5712.25" y="49.1074">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5575" x2="5936" y1="60.9531" y2="60.9531"/><ellipse cx="5585" cy="71.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="5594" y="75.1636">operator&lt;(const Object::Connection &amp; p_conn) const : bool</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="5575" x2="5936" y1="81.7578" y2="81.7578"/><ellipse cx="5585" cy="92.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="5594" y="95.9683">Connection() : void</text><ellipse cx="5585" cy="105.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="5594" y="108.7729">Connection(const Variant &amp; p_variant) : void</text><ellipse cx="5585" cy="118.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="5594" y="121.5776">operator Variant() const : Variant</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5575" x2="5936" y1="128.1719" y2="128.1719"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="134.1719"/><ellipse cx="5585" cy="139.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="5594" y="142.3823">binds : Vector&lt;Variant&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="146.9766"/><ellipse cx="5585" cy="151.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="5594" y="155.187">flags : uint32_t</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="159.7813"/><ellipse cx="5585" cy="164.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="5594" y="167.9917">method : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="172.5859"/><ellipse cx="5585" cy="177.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="5594" y="180.7964">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="185.3906"/><ellipse cx="5585" cy="190.3906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="5594" y="193.6011">source : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="198.1953"/><ellipse cx="5585" cy="203.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="5594" y="206.4058">target : Object *</text></a><!--MD5=[d874fe1d316004bca753fee73a8324d9]
class C_0000250357724807605097--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" target="_top" title="Object##Signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" xlink:show="new" xlink:title="Object##Signal" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="86.4141" id="C_0000250357724807605097" style="stroke: #A80036; stroke-width: 1.5;" width="375" x="13303" y="77.9531"/><ellipse cx="13443.25" cy="93.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13446.2188,99.5938 Q13445.6406,99.8906 13445,100.0313 Q13444.3594,100.1875 13443.6563,100.1875 Q13441.1563,100.1875 13439.8281,98.5469 Q13438.5156,96.8906 13438.5156,93.7656 Q13438.5156,90.6406 13439.8281,88.9844 Q13441.1563,87.3281 13443.6563,87.3281 Q13444.3594,87.3281 13445,87.4844 Q13445.6563,87.6406 13446.2188,87.9375 L13446.2188,90.6563 Q13445.5938,90.0781 13445,89.8125 Q13444.4063,89.5313 13443.7813,89.5313 Q13442.4375,89.5313 13441.75,90.6094 Q13441.0625,91.6719 13441.0625,93.7656 Q13441.0625,95.8594 13441.75,96.9375 Q13442.4375,98 13443.7813,98 Q13444.4063,98 13445,97.7344 Q13445.5938,97.4531 13446.2188,96.875 L13446.2188,99.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="13463.75" y="98.1074">Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13304" x2="13677" y1="109.9531" y2="109.9531"/><ellipse cx="13314" cy="120.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="13323" y="124.1636">Signal() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13304" x2="13677" y1="130.7578" y2="130.7578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13309" y="136.7578"/><ellipse cx="13314" cy="141.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="13323" y="144.9683">slot_map : VMap&lt;Object::Signal::Target,Object::Signal::Slot&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13309" y="149.5625"/><ellipse cx="13314" cy="154.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="13323" y="157.7729">user : MethodInfo</text></a><!--MD5=[4eb60b73893006bfd9288c7c65337e99]
class C_0002064336919270342687--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" target="_top" title="ObjectDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" xlink:show="new" xlink:title="ObjectDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="99.2188" id="C_0002064336919270342687" style="stroke: #A80036; stroke-width: 1.5;" width="314" x="13713.5" y="71.4531"/><ellipse cx="13837.75" cy="87.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13840.7188,93.0938 Q13840.1406,93.3906 13839.5,93.5313 Q13838.8594,93.6875 13838.1563,93.6875 Q13835.6563,93.6875 13834.3281,92.0469 Q13833.0156,90.3906 13833.0156,87.2656 Q13833.0156,84.1406 13834.3281,82.4844 Q13835.6563,80.8281 13838.1563,80.8281 Q13838.8594,80.8281 13839.5,80.9844 Q13840.1563,81.1406 13840.7188,81.4375 L13840.7188,84.1563 Q13840.0938,83.5781 13839.5,83.3125 Q13838.9063,83.0313 13838.2813,83.0313 Q13836.9375,83.0313 13836.25,84.1094 Q13835.5625,85.1719 13835.5625,87.2656 Q13835.5625,89.3594 13836.25,90.4375 Q13836.9375,91.5 13838.2813,91.5 Q13838.9063,91.5 13839.5,91.2344 Q13840.0938,90.9531 13840.7188,90.375 L13840.7188,93.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="13858.25" y="91.6074">ObjectDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13714.5" x2="14026.5" y1="103.4531" y2="103.4531"/><ellipse cx="13724.5" cy="114.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="288" x="13733.5" y="117.6636">debug_objects(ObjectDB::DebugFunc p_func) : void</text><ellipse cx="13724.5" cy="127.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="266" x="13733.5" y="130.4683">get_instance(ObjectID p_instance_id) : Object *</text><ellipse cx="13724.5" cy="140.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="13733.5" y="143.2729">get_object_count() : int</text><ellipse cx="13724.5" cy="152.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="221" x="13733.5" y="156.0776">instance_validate(Object * p_ptr) : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13714.5" x2="14026.5" y1="162.6719" y2="162.6719"/></a><!--MD5=[cefc1761acd014682fb46e6592f2db8a]
class C_0000104564426296396960--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" target="_top" title="ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" xlink:show="new" xlink:title="ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="1021.1563" id="C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.5;" width="1563" x="11837" y="7795.9531"/><ellipse cx="12589.25" cy="7811.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12592.2188,7817.5938 Q12591.6406,7817.8906 12591,7818.0313 Q12590.3594,7818.1875 12589.6563,7818.1875 Q12587.1563,7818.1875 12585.8281,7816.5469 Q12584.5156,7814.8906 12584.5156,7811.7656 Q12584.5156,7808.6406 12585.8281,7806.9844 Q12587.1563,7805.3281 12589.6563,7805.3281 Q12590.3594,7805.3281 12591,7805.4844 Q12591.6563,7805.6406 12592.2188,7805.9375 L12592.2188,7808.6563 Q12591.5938,7808.0781 12591,7807.8125 Q12590.4063,7807.5313 12589.7813,7807.5313 Q12588.4375,7807.5313 12587.75,7808.6094 Q12587.0625,7809.6719 12587.0625,7811.7656 Q12587.0625,7813.8594 12587.75,7814.9375 Q12588.4375,7816 12589.7813,7816 Q12590.4063,7816 12591,7815.7344 Q12591.5938,7815.4531 12592.2188,7814.875 L12592.2188,7817.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="12609.75" y="7816.1074">ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11838" x2="13399" y1="7827.9531" y2="7827.9531"/><ellipse cx="11848" cy="7838.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="131" x="11857" y="7842.1636">_add_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="7851.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="11857" y="7854.9683">_add_class2(const StringName &amp; p_class, const StringName &amp; p_inherits) : void</text><ellipse cx="11848" cy="7864.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="219" x="11857" y="7867.7729">_create_ptr_func&lt;T&gt;() : class Object *</text><ellipse cx="11848" cy="7877.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="524" x="11857" y="7880.5776">add_compatibility_class(const StringName &amp; p_class, const StringName &amp; p_fallback) : void</text><ellipse cx="11848" cy="7890.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="850" x="11857" y="7893.3823">add_property(StringName p_class, const PropertyInfo &amp; p_pinfo, const StringName &amp; p_setter, const StringName &amp; p_getter, int p_index = -1) : void</text><ellipse cx="11848" cy="7902.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="578" x="11857" y="7906.187">add_property_group(StringName p_class, const String &amp; p_name, const String &amp; p_prefix = "") : void</text><ellipse cx="11848" cy="7915.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="575" x="11857" y="7918.9917">add_resource_base_extension(const StringName &amp; p_extension, const StringName &amp; p_class) : void</text><ellipse cx="11848" cy="7928.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="388" x="11857" y="7931.7964">add_signal(StringName p_class, const MethodInfo &amp; p_signal) : void</text><ellipse cx="11848" cy="7941.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="620" x="11857" y="7944.6011">add_virtual_method(const StringName &amp; p_class, const MethodInfo &amp; p_method, bool p_virtual = true) : void</text><ellipse cx="11848" cy="7954.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="765" x="11857" y="7957.4058">bind_integer_constant(const StringName &amp; p_class, const StringName &amp; p_enum, const StringName &amp; p_name, int p_constant) : void</text><ellipse cx="11848" cy="7967" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="425" x="11857" y="7970.2104">bind_method&lt;N,M&gt;(N p_method_name, M p_method) : class MethodBind *</text><ellipse cx="11848" cy="7979.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="564" x="11857" y="7983.0151">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1) : class MethodBind *</text><ellipse cx="11848" cy="7992.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="703" x="11857" y="7995.8198">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2) : class MethodBind *</text><ellipse cx="11848" cy="8005.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1537" x="11857" y="8008.6245">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7, const Variant &amp; p_def8) : class MethodBind *</text><ellipse cx="11848" cy="8018.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1398" x="11857" y="8021.4292">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7) : class MethodBind *</text><ellipse cx="11848" cy="8031.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1259" x="11857" y="8034.2339">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6) : class MethodBind *</text><ellipse cx="11848" cy="8043.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1120" x="11857" y="8047.0386">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5) : class MethodBind *</text><ellipse cx="11848" cy="8056.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="842" x="11857" y="8059.8433">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3) : class MethodBind *</text><ellipse cx="11848" cy="8069.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="981" x="11857" y="8072.6479">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4) : class MethodBind *</text><ellipse cx="11848" cy="8082.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="856" x="11857" y="8085.4526">bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition &amp; method_name, const Variant ** p_defs, int p_defcount) : MethodBind *</text><ellipse cx="11848" cy="8095.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1370" x="11857" y="8098.2573">bind_vararg_method&lt;M&gt;(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo &amp; p_info = MethodInfo(), const Vector&lt;Variant&gt; &amp; p_default_args = Vector&lt;Variant&gt;(), bool p_return_nil_is_variant = true) : class MethodBind *</text><ellipse cx="11848" cy="8107.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="281" x="11857" y="8111.062">can_instance(const StringName &amp; p_class) : bool</text><ellipse cx="11848" cy="8120.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="11857" y="8123.8667">class_exists(const StringName &amp; p_class) : bool</text><ellipse cx="11848" cy="8133.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="733" x="11857" y="8136.6714">class_get_default_property_value(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_valid = __null) : Variant</text><ellipse cx="11848" cy="8146.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="11857" y="8149.4761">cleanup() : void</text><ellipse cx="11848" cy="8159.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="139" x="11857" y="8162.2808">cleanup_defaults() : void</text><ellipse cx="11848" cy="8171.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="11857" y="8175.0854">creator&lt;T&gt;() : class Object *</text><ellipse cx="11848" cy="8184.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="11857" y="8187.8901">get_api_hash(ClassDB::APIType p_api) : uint64_t</text><ellipse cx="11848" cy="8197.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="354" x="11857" y="8200.6948">get_api_type(const StringName &amp; p_class) : ClassDB::APIType</text><ellipse cx="11848" cy="8210.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="321" x="11857" y="8213.4995">get_category(const StringName &amp; p_node) : StringName</text><ellipse cx="11848" cy="8223.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="11857" y="8226.3042">get_class_list(List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="8235.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="11857" y="8239.1089">get_current_api() : ClassDB::APIType</text><ellipse cx="11848" cy="8248.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="576" x="11857" y="8251.9136">get_direct_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="8261.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="870" x="11857" y="8264.7183">get_enum_constants(const StringName &amp; p_class, const StringName &amp; p_enum, List&lt;StringName&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8274.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="641" x="11857" y="8277.5229">get_enum_list(const StringName &amp; p_class, List&lt;StringName&gt; * p_enums, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8287.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="513" x="11857" y="8290.3276">get_extensions_for_type(const StringName &amp; p_class, List&lt;String&gt; * p_extensions) : void</text><ellipse cx="11848" cy="8299.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="538" x="11857" y="8303.1323">get_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="8312.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="644" x="11857" y="8315.937">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name, bool * p_success = __null) : int</text><ellipse cx="11848" cy="8325.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="757" x="11857" y="8328.7417">get_integer_constant_enum(const StringName &amp; p_class, const StringName &amp; p_name, bool p_no_inheritance = false) : StringName</text><ellipse cx="11848" cy="8338.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="688" x="11857" y="8341.5464">get_integer_constant_list(const StringName &amp; p_class, List&lt;String&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8351.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="401" x="11857" y="8354.3511">get_method(StringName p_class, StringName p_name) : MethodBind *</text><ellipse cx="11848" cy="8363.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="844" x="11857" y="8367.1558">get_method_list(StringName p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void</text><ellipse cx="11848" cy="8376.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="347" x="11857" y="8379.9604">get_parent_class(const StringName &amp; p_class) : StringName</text><ellipse cx="11848" cy="8389.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="399" x="11857" y="8392.7651">get_parent_class_nocheck(const StringName &amp; p_class) : StringName</text><ellipse cx="11848" cy="8402.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="509" x="11857" y="8405.5698">get_property(Object * p_object, const StringName &amp; p_property, Variant &amp; r_value) : bool</text><ellipse cx="11848" cy="8415.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="11857" y="8418.3745">get_property_getter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="11848" cy="8427.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="642" x="11857" y="8431.1792">get_property_index(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : int</text><ellipse cx="11848" cy="8440.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="792" x="11857" y="8443.9839">get_property_list(StringName p_class, List&lt;PropertyInfo&gt; * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void</text><ellipse cx="11848" cy="8453.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="11857" y="8456.7886">get_property_setter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="11848" cy="8466.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="697" x="11857" y="8469.5933">get_property_type(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : Variant::Type</text><ellipse cx="11848" cy="8479.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="381" x="11857" y="8482.3979">get_resource_base_extensions(List&lt;String&gt; * p_extensions) : void</text><ellipse cx="11848" cy="8491.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="471" x="11857" y="8495.2026">get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool</text><ellipse cx="11848" cy="8504.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="591" x="11857" y="8508.0073">get_signal_list(StringName p_class, List&lt;MethodInfo&gt; * p_signals, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8517.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="683" x="11857" y="8520.812">get_virtual_methods(const StringName &amp; p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8530.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="540" x="11857" y="8533.6167">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool</text><ellipse cx="11848" cy="8543.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="648" x="11857" y="8546.4214">has_property(const StringName &amp; p_class, const StringName &amp; p_property, bool p_no_inheritance = false) : bool</text><ellipse cx="11848" cy="8556.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="11857" y="8559.2261">has_signal(StringName p_class, StringName p_signal) : bool</text><ellipse cx="11848" cy="8568.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="11857" y="8572.0308">instance(const StringName &amp; p_class) : Object *</text><ellipse cx="11848" cy="8581.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="255" x="11857" y="8584.8354">is_class_enabled(StringName p_class) : bool</text><ellipse cx="11848" cy="8594.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="11857" y="8597.6401">is_class_exposed(StringName p_class) : bool</text><ellipse cx="11848" cy="8607.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="480" x="11857" y="8610.4448">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) : bool</text><ellipse cx="11848" cy="8620.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="11857" y="8623.2495">register_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8632.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="251" x="11857" y="8636.0542">register_custom_instance_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8645.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="11857" y="8648.8589">register_virtual_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8658.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="349" x="11857" y="8661.6636">set_class_enabled(StringName p_class, bool p_enable) : void</text><ellipse cx="11848" cy="8671.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="265" x="11857" y="8674.4683">set_current_api(ClassDB::APIType p_api) : void</text><ellipse cx="11848" cy="8684.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="11857" y="8687.2729">set_method_flags(StringName p_class, StringName p_method, int p_flags) : void</text><ellipse cx="11848" cy="8696.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="678" x="11857" y="8700.0776">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value, bool * r_valid = __null) : bool</text><ellipse cx="11848" cy="8709.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="636" x="11857" y="8712.8823">set_property_default_value(StringName p_class, const StringName &amp; p_name, const Variant &amp; p_default) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11838" x2="13399" y1="8719.4766" y2="8719.4766"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8725.4766"/><ellipse cx="11848" cy="8730.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="306" x="11857" y="8733.687">classes : HashMap&lt;StringName,ClassDB::ClassInfo&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8738.2813"/><ellipse cx="11848" cy="8743.2813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="11857" y="8746.4917">compat_classes : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8751.0859"/><ellipse cx="11848" cy="8756.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="11857" y="8759.2964">current_api : ClassDB::APIType</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8763.8906"/><ellipse cx="11848" cy="8768.8906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="416" x="11857" y="8772.1011">default_values : HashMap&lt;StringName,HashMap&lt;StringName,Variant&gt;&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8776.6953"/><ellipse cx="11848" cy="8781.6953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="244" x="11857" y="8784.9058">default_values_cached : Set&lt;StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8789.5"/><ellipse cx="11848" cy="8794.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="75" x="11857" y="8797.7104">lock : RWLock</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="8802.3047"/><ellipse cx="11848" cy="8807.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="11857" y="8810.5151">resource_base_extensions : HashMap&lt;StringName,StringName&gt;</text></a><!--MD5=[dd2998d45ec54ba5be719aa7e503205b]
class C_0000218299049716973303--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" target="_top" title="Node" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" xlink:show="new" xlink:title="Node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="2168.7734" id="C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.5;" width="1447" x="18185" y="3885.4531"/><ellipse cx="18887.75" cy="3901.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M18890.7188,3907.0938 Q18890.1406,3907.3906 18889.5,3907.5313 Q18888.8594,3907.6875 18888.1563,3907.6875 Q18885.6563,3907.6875 18884.3281,3906.0469 Q18883.0156,3904.3906 18883.0156,3901.2656 Q18883.0156,3898.1406 18884.3281,3896.4844 Q18885.6563,3894.8281 18888.1563,3894.8281 Q18888.8594,3894.8281 18889.5,3894.9844 Q18890.1563,3895.1406 18890.7188,3895.4375 L18890.7188,3898.1563 Q18890.0938,3897.5781 18889.5,3897.3125 Q18888.9063,3897.0313 18888.2813,3897.0313 Q18886.9375,3897.0313 18886.25,3898.1094 Q18885.5625,3899.1719 18885.5625,3901.2656 Q18885.5625,3903.3594 18886.25,3904.4375 Q18886.9375,3905.5 18888.2813,3905.5 Q18888.9063,3905.5 18889.5,3905.2344 Q18890.0938,3904.9531 18890.7188,3904.375 L18890.7188,3907.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="18908.25" y="3905.6074">Node</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18186" x2="19631" y1="3917.4531" y2="3917.4531"/><ellipse cx="18196" cy="3928.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="18205" y="3931.6636">Node() : void</text><ellipse cx="18196" cy="3941.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="18205" y="3944.4683">~Node() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="18186" x2="19631" y1="3951.0625" y2="3951.0625"/><ellipse cx="18196" cy="3962.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="18205" y="3965.2729">_get_class_namev() const : const StringName *</text><ellipse cx="18196" cy="3974.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="18205" y="3978.0776">add_child(Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="18196" cy="3987.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="18205" y="3990.8823">add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="18196" cy="4000.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="455" x="18205" y="4003.687">add_to_group(const StringName &amp; p_identifier, bool p_persistent = false) : void</text><ellipse cx="18196" cy="4013.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="18205" y="4016.4917">can_process() const : bool</text><ellipse cx="18196" cy="4026.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="18205" y="4029.2964">can_process_notification(int p_what) const : bool</text><ellipse cx="18196" cy="4038.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="18205" y="4042.1011">clear_internal_tree_resource_paths() : void</text><ellipse cx="18196" cy="4051.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="591" x="18205" y="4054.9058">duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *</text><ellipse cx="18196" cy="4064.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="468" x="18205" y="4067.7104">duplicate_and_reown(const Map&lt;Node *,Node *&gt; &amp; p_reown_map) const : Node *</text><ellipse cx="18196" cy="4077.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="18205" y="4080.5151">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : Node *</text><ellipse cx="18196" cy="4090.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="18205" y="4093.3198">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap) const : Node *</text><ellipse cx="18196" cy="4102.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="18205" y="4106.1245">find_common_parent_with(const Node * p_node) const : Node *</text><ellipse cx="18196" cy="4115.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="18205" y="4118.9292">find_node(const String &amp; p_mask, bool p_recursive = true, bool p_owned = true) const : Node *</text><ellipse cx="18196" cy="4128.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="18205" y="4131.7339">find_parent(const String &amp; p_mask) const : Node *</text><ellipse cx="18196" cy="4141.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4144.5386">force_parent_owned() : void</text><ellipse cx="18196" cy="4154.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="18205" y="4157.3433">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="18196" cy="4166.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="18205" y="4170.1479">get_category_static() : String</text><ellipse cx="18196" cy="4179.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="18205" y="4182.9526">get_child(int p_index) const : Node *</text><ellipse cx="18196" cy="4192.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="18205" y="4195.7573">get_child_count() const : int</text><ellipse cx="18196" cy="4205.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="18205" y="4208.562">get_class() const : String</text><ellipse cx="18196" cy="4218.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="18205" y="4221.3667">get_class_ptr_static() : void *</text><ellipse cx="18196" cy="4230.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="18205" y="4234.1714">get_class_static() : String</text><ellipse cx="18196" cy="4243.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="18205" y="4246.9761">get_configuration_warning() const : String</text><ellipse cx="18196" cy="4256.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="18205" y="4259.7808">get_custom_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="18196" cy="4269.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="18205" y="4272.5854">get_deepest_editable_node(Node * start_node) const : Node *</text><ellipse cx="18196" cy="4282.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="18205" y="4285.3901">get_editor_description() const : String</text><ellipse cx="18196" cy="4294.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="18205" y="4298.1948">get_filename() const : String</text><ellipse cx="18196" cy="4307.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="18205" y="4310.9995">get_groups(List&lt;Node::GroupInfo&gt; * p_groups) const : void</text><ellipse cx="18196" cy="4320.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="18205" y="4323.8042">get_import_path() const : NodePath</text><ellipse cx="18196" cy="4333.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="18205" y="4336.6089">get_index() const : int</text><ellipse cx="18196" cy="4346.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="18205" y="4349.4136">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="18196" cy="4359.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="4362.2183">get_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="18196" cy="4371.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="18205" y="4375.0229">get_name() const : StringName</text><ellipse cx="18196" cy="4384.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="18205" y="4387.8276">get_network_master() const : int</text><ellipse cx="18196" cy="4397.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="4400.6323">get_node(const NodePath &amp; p_path) const : Node *</text><ellipse cx="18196" cy="4410.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="886" x="18205" y="4413.437">get_node_and_resource(const NodePath &amp; p_path, RES &amp; r_res, Vector&lt;StringName&gt; &amp; r_leftover_subpath, bool p_last_is_property = true) const : Node *</text><ellipse cx="18196" cy="4423.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="18205" y="4426.2417">get_node_or_null(const NodePath &amp; p_path) const : Node *</text><ellipse cx="18196" cy="4435.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="659" x="18205" y="4439.0464">get_node_rpc_mode(const StringName &amp; p_method) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="18196" cy="4448.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="18205" y="4451.8511">get_node_rset_mode(const StringName &amp; p_property) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="18196" cy="4461.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="18205" y="4464.6558">get_owned_by(Node * p_by, List&lt;Node *&gt; * p_owned) : void</text><ellipse cx="18196" cy="4474.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="18205" y="4477.4604">get_owner() const : Node *</text><ellipse cx="18196" cy="4487.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="18205" y="4490.2651">get_parent() const : Node *</text><ellipse cx="18196" cy="4499.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="18205" y="4503.0698">get_parent_class_static() : String</text><ellipse cx="18196" cy="4512.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4515.8745">get_path() const : NodePath</text><ellipse cx="18196" cy="4525.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="18205" y="4528.6792">get_path_to(const Node * p_node) const : NodePath</text><ellipse cx="18196" cy="4538.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="18205" y="4541.4839">get_pause_mode() const : Node::PauseMode</text><ellipse cx="18196" cy="4551.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="18205" y="4554.2886">get_persistent_group_count() const : int</text><ellipse cx="18196" cy="4563.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="18205" y="4567.0933">get_physics_process_delta_time() const : float</text><ellipse cx="18196" cy="4576.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="18205" y="4579.8979">get_position_in_parent() const : int</text><ellipse cx="18196" cy="4589.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="18205" y="4592.7026">get_process_delta_time() const : float</text><ellipse cx="18196" cy="4602.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="18205" y="4605.5073">get_process_priority() const : int</text><ellipse cx="18196" cy="4615.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="18205" y="4618.312">get_scene_inherited_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="18196" cy="4627.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="18205" y="4631.1167">get_scene_instance_load_placeholder() const : bool</text><ellipse cx="18196" cy="4640.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="18205" y="4643.9214">get_scene_instance_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="18196" cy="4653.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="18205" y="4656.7261">get_tree() const : SceneTree *</text><ellipse cx="18196" cy="4666.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="18205" y="4669.5308">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="18196" cy="4679.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="4682.3354">get_viewport() const : Viewport *</text><ellipse cx="18196" cy="4691.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="18205" y="4695.1401">has_node(const NodePath &amp; p_path) const : bool</text><ellipse cx="18196" cy="4704.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="18205" y="4707.9448">has_node_and_resource(const NodePath &amp; p_path) const : bool</text><ellipse cx="18196" cy="4717.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="18205" y="4720.7495">inherits_static() : String</text><ellipse cx="18196" cy="4730.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="123" x="18205" y="4733.5542">init_node_hrcr() : void</text><ellipse cx="18196" cy="4743.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="18205" y="4746.3589">initialize_class() : void</text><ellipse cx="18196" cy="4755.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="18205" y="4759.1636">is_a_parent_of(const Node * p_node) const : bool</text><ellipse cx="18196" cy="4768.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="18205" y="4771.9683">is_class(const String &amp; p_class) const : bool</text><ellipse cx="18196" cy="4781.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="18205" y="4784.7729">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="18196" cy="4794.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="18205" y="4797.5776">is_displayed_folded() const : bool</text><ellipse cx="18196" cy="4807.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="18205" y="4810.3823">is_editable_instance(const Node * p_node) const : bool</text><ellipse cx="18196" cy="4819.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="18205" y="4823.187">is_greater_than(const Node * p_node) const : bool</text><ellipse cx="18196" cy="4832.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="18205" y="4835.9917">is_in_group(const StringName &amp; p_identifier) const : bool</text><ellipse cx="18196" cy="4845.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4848.7964">is_inside_tree() const : bool</text><ellipse cx="18196" cy="4858.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="18205" y="4861.6011">is_network_master() const : bool</text><ellipse cx="18196" cy="4871.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="18205" y="4874.4058">is_owned_by_parent() const : bool</text><ellipse cx="18196" cy="4884" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="18205" y="4887.2104">is_physics_processing() const : bool</text><ellipse cx="18196" cy="4896.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="4900.0151">is_physics_processing_internal() const : bool</text><ellipse cx="18196" cy="4909.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4912.8198">is_processing() const : bool</text><ellipse cx="18196" cy="4922.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="18205" y="4925.6245">is_processing_input() const : bool</text><ellipse cx="18196" cy="4935.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="18205" y="4938.4292">is_processing_internal() const : bool</text><ellipse cx="18196" cy="4948.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="18205" y="4951.2339">is_processing_unhandled_input() const : bool</text><ellipse cx="18196" cy="4960.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="18205" y="4964.0386">is_processing_unhandled_key_input() const : bool</text><ellipse cx="18196" cy="4973.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1199" x="18205" y="4976.8433">make_binds(const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Vector&lt;Variant&gt;</text><ellipse cx="18196" cy="4986.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="18205" y="4989.6479">move_child(Node * p_child, int p_pos) : void</text><ellipse cx="18196" cy="4999.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="18205" y="5002.4526">print_stray_nodes() : void</text><ellipse cx="18196" cy="5012.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="18205" y="5015.2573">print_tree() : void</text><ellipse cx="18196" cy="5024.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="18205" y="5028.062">print_tree_pretty() : void</text><ellipse cx="18196" cy="5037.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="18205" y="5040.8667">propagate_call(const StringName &amp; p_method, const Array &amp; p_args = Array(), const bool p_parent_first = false) : void</text><ellipse cx="18196" cy="5050.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="18205" y="5053.6714">propagate_notification(int p_notification) : void</text><ellipse cx="18196" cy="5063.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="18205" y="5066.4761">queue_delete() : void</text><ellipse cx="18196" cy="5076.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="18205" y="5079.2808">raise() : void</text><ellipse cx="18196" cy="5088.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="571" x="18205" y="5092.0854">remap_nested_resources(RES p_resource, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="18196" cy="5101.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="18205" y="5104.8901">remap_node_resources(Node * p_node, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="18196" cy="5114.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="18205" y="5117.6948">remove_and_skip() : void</text><ellipse cx="18196" cy="5127.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="5130.4995">remove_child(Node * p_child) : void</text><ellipse cx="18196" cy="5140.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="18205" y="5143.3042">remove_from_group(const StringName &amp; p_identifier) : void</text><ellipse cx="18196" cy="5152.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="18205" y="5156.1089">replace_by(Node * p_node, bool p_keep_data = false) : void</text><ellipse cx="18196" cy="5165.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="18205" y="5168.9136">request_ready() : void</text><ellipse cx="18196" cy="5178.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1262" x="18205" y="5181.7183">rpc(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5191.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="18205" y="5194.5229">rpc_config(const StringName &amp; p_method, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="18196" cy="5204.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="18205" y="5207.3276">rpc_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5216.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1324" x="18205" y="5220.1323">rpc_unreliable(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5229.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1421" x="18205" y="5232.937">rpc_unreliable_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5242.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="654" x="18205" y="5245.7417">rpcp(int p_peer_id, bool p_unreliable, const StringName &amp; p_method, const Variant ** p_arg, int p_argcount) : void</text><ellipse cx="18196" cy="5255.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="18205" y="5258.5464">rset(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5268.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="18205" y="5271.3511">rset_config(const StringName &amp; p_property, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="18196" cy="5280.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="18205" y="5284.1558">rset_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5293.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="18205" y="5296.9604">rset_unreliable(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5306.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="18205" y="5309.7651">rset_unreliable_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5319.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="18205" y="5322.5698">rsetp(int p_peer_id, bool p_unreliable, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5332.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="18205" y="5335.3745">set_custom_multiplayer(Ref&lt;MultiplayerAPI&gt; p_multiplayer) : void</text><ellipse cx="18196" cy="5344.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="18205" y="5348.1792">set_display_folded(bool p_folded) : void</text><ellipse cx="18196" cy="5357.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="18205" y="5360.9839">set_editable_instance(Node * p_node, bool p_editable) : void</text><ellipse cx="18196" cy="5370.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="18205" y="5373.7886">set_editor_description(const String &amp; p_editor_description) : void</text><ellipse cx="18196" cy="5383.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="18205" y="5386.5933">set_filename(const String &amp; p_filename) : void</text><ellipse cx="18196" cy="5396.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="360" x="18205" y="5399.3979">set_human_readable_collision_renaming(bool p_enabled) : void</text><ellipse cx="18196" cy="5408.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="18205" y="5412.2026">set_import_path(const NodePath &amp; p_import_path) : void</text><ellipse cx="18196" cy="5421.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="18205" y="5425.0073">set_name(const String &amp; p_name) : void</text><ellipse cx="18196" cy="5434.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="18205" y="5437.812">set_network_master(int p_peer_id, bool p_recursive = true) : void</text><ellipse cx="18196" cy="5447.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="18205" y="5450.6167">set_owner(Node * p_owner) : void</text><ellipse cx="18196" cy="5460.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="5463.4214">set_pause_mode(Node::PauseMode p_mode) : void</text><ellipse cx="18196" cy="5473.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="18205" y="5476.2261">set_physics_process(bool p_process) : void</text><ellipse cx="18196" cy="5485.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="18205" y="5489.0308">set_physics_process_internal(bool p_process_internal) : void</text><ellipse cx="18196" cy="5498.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="18205" y="5501.8354">set_process(bool p_idle_process) : void</text><ellipse cx="18196" cy="5511.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="18205" y="5514.6401">set_process_input(bool p_enable) : void</text><ellipse cx="18196" cy="5524.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="18205" y="5527.4448">set_process_internal(bool p_idle_process_internal) : void</text><ellipse cx="18196" cy="5537.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="18205" y="5540.2495">set_process_priority(int p_priority) : void</text><ellipse cx="18196" cy="5549.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="5553.0542">set_process_unhandled_input(bool p_enable) : void</text><ellipse cx="18196" cy="5562.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="18205" y="5565.8589">set_process_unhandled_key_input(bool p_enable) : void</text><ellipse cx="18196" cy="5575.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="18205" y="5578.6636">set_scene_inherited_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="18196" cy="5588.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="18205" y="5591.4683">set_scene_instance_load_placeholder(bool p_enable) : void</text><ellipse cx="18196" cy="5601.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="18205" y="5604.2729">set_scene_instance_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="18196" cy="5613.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="18205" y="5617.0776">update_configuration_warning() : void</text><ellipse cx="18196" cy="5626.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="18205" y="5629.8823">validate_child_name(Node * p_child) : String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18186" x2="19631" y1="5636.4766" y2="5636.4766"/><ellipse cx="18196" cy="5647.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="5650.687">NOTIFICATION_APP_PAUSED : enum</text><ellipse cx="18196" cy="5660.2813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="18205" y="5663.4917">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="18196" cy="5673.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="18205" y="5676.2964">NOTIFICATION_CRASH : enum</text><ellipse cx="18196" cy="5685.8906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="5689.1011">NOTIFICATION_DRAG_BEGIN : enum</text><ellipse cx="18196" cy="5698.6953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="18205" y="5701.9058">NOTIFICATION_DRAG_END : enum</text><ellipse cx="18196" cy="5711.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="18205" y="5714.7104">NOTIFICATION_ENTER_TREE : enum</text><ellipse cx="18196" cy="5724.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="5727.5151">NOTIFICATION_EXIT_TREE : enum</text><ellipse cx="18196" cy="5737.1094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="18205" y="5740.3198">NOTIFICATION_INSTANCED : enum</text><ellipse cx="18196" cy="5749.9141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="18205" y="5753.1245">NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum</text><ellipse cx="18196" cy="5762.7188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="18205" y="5765.9292">NOTIFICATION_INTERNAL_PROCESS : enum</text><ellipse cx="18196" cy="5775.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="18205" y="5778.7339">NOTIFICATION_MOVED_IN_PARENT : enum</text><ellipse cx="18196" cy="5788.3281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="18205" y="5791.5386">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="18196" cy="5801.1328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="5804.3433">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="18196" cy="5813.9375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="5817.1479">NOTIFICATION_PARENTED : enum</text><ellipse cx="18196" cy="5826.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="18205" y="5829.9526">NOTIFICATION_PATH_CHANGED : enum</text><ellipse cx="18196" cy="5839.5469" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="18205" y="5842.7573">NOTIFICATION_PAUSED : enum</text><ellipse cx="18196" cy="5852.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="18205" y="5855.562">NOTIFICATION_PHYSICS_PROCESS : enum</text><ellipse cx="18196" cy="5865.1563" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="18205" y="5868.3667">NOTIFICATION_POST_ENTER_TREE : enum</text><ellipse cx="18196" cy="5877.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="18205" y="5881.1714">NOTIFICATION_PROCESS : enum</text><ellipse cx="18196" cy="5890.7656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="18205" y="5893.9761">NOTIFICATION_READY : enum</text><ellipse cx="18196" cy="5903.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="18205" y="5906.7808">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="18196" cy="5916.375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="18205" y="5919.5854">NOTIFICATION_UNPARENTED : enum</text><ellipse cx="18196" cy="5929.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="18205" y="5932.3901">NOTIFICATION_UNPAUSED : enum</text><ellipse cx="18196" cy="5941.9844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="18205" y="5945.1948">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="18196" cy="5954.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="18205" y="5957.9995">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="18196" cy="5967.5938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="18205" y="5970.8042">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="18196" cy="5980.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="18205" y="5983.6089">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="18196" cy="5993.2031" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="18205" y="5996.4136">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="18196" cy="6006.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="18205" y="6009.2183">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="18196" cy="6018.8125" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="18205" y="6022.0229">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="18196" cy="6031.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="18205" y="6034.8276">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="18191" y="6039.4219"/><ellipse cx="18196" cy="6044.4219" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="137" x="18205" y="6047.6323">orphan_node_count : int</text></a><!--MD5=[88b426eff1894866fc41c8357e83d201]
class C_0000933379568804427881--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" target="_top" title="ObjectRC" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" xlink:show="new" xlink:title="ObjectRC" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="132.8281" id="C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.5;" width="217" x="16013" y="1773.9531"/><ellipse cx="16089.25" cy="1789.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16092.2188,1795.5938 Q16091.6406,1795.8906 16091,1796.0313 Q16090.3594,1796.1875 16089.6563,1796.1875 Q16087.1563,1796.1875 16085.8281,1794.5469 Q16084.5156,1792.8906 16084.5156,1789.7656 Q16084.5156,1786.6406 16085.8281,1784.9844 Q16087.1563,1783.3281 16089.6563,1783.3281 Q16090.3594,1783.3281 16091,1783.4844 Q16091.6563,1783.6406 16092.2188,1783.9375 L16092.2188,1786.6563 Q16091.5938,1786.0781 16091,1785.8125 Q16090.4063,1785.5313 16089.7813,1785.5313 Q16088.4375,1785.5313 16087.75,1786.6094 Q16087.0625,1787.6719 16087.0625,1789.7656 Q16087.0625,1791.8594 16087.75,1792.9375 Q16088.4375,1794 16089.7813,1794 Q16090.4063,1794 16091,1793.7344 Q16091.5938,1793.4531 16092.2188,1792.875 L16092.2188,1795.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="16109.75" y="1794.1074">ObjectRC</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16014" x2="16229" y1="1805.9531" y2="1805.9531"/><ellipse cx="16024" cy="1816.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="16033" y="1820.1636">ObjectRC(Object * p_object) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="16014" x2="16229" y1="1826.7578" y2="1826.7578"/><ellipse cx="16024" cy="1837.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="16033" y="1840.9683">decrement() : bool</text><ellipse cx="16024" cy="1850.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="16033" y="1853.7729">get_ptr() : Object *</text><ellipse cx="16024" cy="1863.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="16033" y="1866.5776">increment() : void</text><ellipse cx="16024" cy="1876.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="16033" y="1879.3823">invalidate() : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16014" x2="16229" y1="1885.9766" y2="1885.9766"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="16019" y="1891.9766"/><ellipse cx="16024" cy="1896.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="16033" y="1900.187">instance_id : const ObjectID</text></a><!--MD5=[20a137ad8bfb5b27a1303d95d4ed4f68]
class C_0001735438654351294549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" target="_top" title="ScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" xlink:show="new" xlink:title="ScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="376.1172" id="C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.5;" width="1349" x="13196" y="1652.4531"/><ellipse cx="13821.25" cy="1668.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13821.3594,1663.7969 L13820.2031,1668.875 L13822.5313,1668.875 L13821.3594,1663.7969 Z M13819.875,1661.5625 L13822.8594,1661.5625 L13826.2188,1673.9531 L13823.7656,1673.9531 L13823,1670.8906 L13819.7188,1670.8906 L13818.9688,1673.9531 L13816.5313,1673.9531 L13819.875,1661.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="90" x="13841.75" y="1672.6074">ScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13197" x2="14544" y1="1684.4531" y2="1684.4531"/><ellipse cx="13207" cy="1695.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="13216" y="1698.6636">~ScriptInstance() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13197" x2="14544" y1="1705.2578" y2="1705.2578"/><ellipse cx="13207" cy="1716.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="671" x="13216" y="1719.4683">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) = 0 : Variant</text><ellipse cx="13207" cy="1729.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="13216" y="1732.2729">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="13207" cy="1741.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="13216" y="1745.0776">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13207" cy="1754.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1323" x="13216" y="1757.8823">call_multilevel(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13207" cy="1767.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="13216" y="1770.687">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13207" cy="1780.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="13216" y="1783.4917">get(const StringName &amp; p_name, Variant &amp; r_ret) const = 0 : bool</text><ellipse cx="13207" cy="1793.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="13216" y="1796.2964">get_language() = 0 : ScriptLanguage *</text><ellipse cx="13207" cy="1805.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="333" x="13216" y="1809.1011">get_method_list(List&lt;MethodInfo&gt; * p_list) const = 0 : void</text><ellipse cx="13207" cy="1818.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="13216" y="1821.9058">get_owner() : Object *</text><ellipse cx="13207" cy="1831.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="389" x="13216" y="1834.7104">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const = 0 : void</text><ellipse cx="13207" cy="1844.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="13216" y="1847.5151">get_property_state(List&lt;Pair&lt;StringName,Variant&gt;&gt; &amp; state) : void</text><ellipse cx="13207" cy="1857.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="13216" y="1860.3198">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const = 0 : Variant::Type</text><ellipse cx="13207" cy="1869.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="13216" y="1873.1245">get_rpc_mode(const StringName &amp; p_method) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="13207" cy="1882.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="479" x="13216" y="1885.9292">get_rset_mode(const StringName &amp; p_variable) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="13207" cy="1895.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="202" x="13216" y="1898.7339">get_script() const = 0 : Ref&lt;Script&gt;</text><ellipse cx="13207" cy="1908.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="13216" y="1911.5386">has_method(const StringName &amp; p_method) const = 0 : bool</text><ellipse cx="13207" cy="1921.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="13216" y="1924.3433">is_placeholder() const : bool</text><ellipse cx="13207" cy="1933.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="223" x="13216" y="1937.1479">notification(int p_notification) = 0 : void</text><ellipse cx="13207" cy="1946.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="13216" y="1949.9526">property_get_fallback(const StringName &amp; p_name, bool * r_valid) : Variant</text><ellipse cx="13207" cy="1959.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="13216" y="1962.7573">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid) : void</text><ellipse cx="13207" cy="1972.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="13216" y="1975.562">refcount_decremented() : bool</text><ellipse cx="13207" cy="1985.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="13216" y="1988.3667">refcount_incremented() : void</text><ellipse cx="13207" cy="1997.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="13216" y="2001.1714">set(const StringName &amp; p_name, const Variant &amp; p_value) = 0 : bool</text><ellipse cx="13207" cy="2010.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="13216" y="2013.9761">to_string(bool * r_valid) : String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13197" x2="14544" y1="2020.5703" y2="2020.5703"/></a><!--MD5=[fde6ed13e18da825139d9e33a0c6db3f]
class C_0001778859257025660860--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" target="_top" title="Reference" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" xlink:show="new" xlink:title="Reference" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="299.2891" id="C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="23801" y="1690.9531"/><ellipse cx="23965.25" cy="1706.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23968.2188,1712.5938 Q23967.6406,1712.8906 23967,1713.0313 Q23966.3594,1713.1875 23965.6563,1713.1875 Q23963.1563,1713.1875 23961.8281,1711.5469 Q23960.5156,1709.8906 23960.5156,1706.7656 Q23960.5156,1703.6406 23961.8281,1701.9844 Q23963.1563,1700.3281 23965.6563,1700.3281 Q23966.3594,1700.3281 23967,1700.4844 Q23967.6563,1700.6406 23968.2188,1700.9375 L23968.2188,1703.6563 Q23967.5938,1703.0781 23967,1702.8125 Q23966.4063,1702.5313 23965.7813,1702.5313 Q23964.4375,1702.5313 23963.75,1703.6094 Q23963.0625,1704.6719 23963.0625,1706.7656 Q23963.0625,1708.8594 23963.75,1709.9375 Q23964.4375,1711 23965.7813,1711 Q23966.4063,1711 23967,1710.7344 Q23967.5938,1710.4531 23968.2188,1709.875 L23968.2188,1712.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="23985.75" y="1711.1074">Reference</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23802" x2="24201" y1="1722.9531" y2="1722.9531"/><ellipse cx="23812" cy="1733.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="23821" y="1737.1636">Reference() : void</text><ellipse cx="23812" cy="1746.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="23821" y="1749.9683">~Reference() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="23802" x2="24201" y1="1756.5625" y2="1756.5625"/><ellipse cx="23812" cy="1767.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="23821" y="1770.7729">_get_class_namev() const : const StringName *</text><ellipse cx="23812" cy="1780.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="23821" y="1783.5776">get_category_static() : String</text><ellipse cx="23812" cy="1793.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="23821" y="1796.3823">get_class() const : String</text><ellipse cx="23812" cy="1805.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="23821" y="1809.187">get_class_ptr_static() : void *</text><ellipse cx="23812" cy="1818.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="23821" y="1821.9917">get_class_static() : String</text><ellipse cx="23812" cy="1831.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="23821" y="1834.7964">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="23812" cy="1844.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="23821" y="1847.6011">get_parent_class_static() : String</text><ellipse cx="23812" cy="1857.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="23821" y="1860.4058">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="23812" cy="1870" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="23821" y="1873.2104">inherits_static() : String</text><ellipse cx="23812" cy="1882.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="23821" y="1886.0151">init_ref() : bool</text><ellipse cx="23812" cy="1895.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="23821" y="1898.8198">initialize_class() : void</text><ellipse cx="23812" cy="1908.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="23821" y="1911.6245">is_class(const String &amp; p_class) const : bool</text><ellipse cx="23812" cy="1921.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="23821" y="1924.4292">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="23812" cy="1934.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="23821" y="1937.2339">is_referenced() const : bool</text><ellipse cx="23812" cy="1946.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="23821" y="1950.0386">reference() : bool</text><ellipse cx="23812" cy="1959.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="23821" y="1962.8433">reference_get_count() const : int</text><ellipse cx="23812" cy="1972.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="23821" y="1975.6479">unreference() : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23802" x2="24201" y1="1982.2422" y2="1982.2422"/></a><!--MD5=[20209edb2b2a39856a637a9459a4ae92]
class C_0001649884439586022807--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" target="_top" title="PlaceHolderScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" xlink:show="new" xlink:title="PlaceHolderScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="312.0938" id="C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.5;" width="1306" x="16148.5" y="4813.9531"/><ellipse cx="16714.75" cy="4829.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16717.7188,4835.5938 Q16717.1406,4835.8906 16716.5,4836.0313 Q16715.8594,4836.1875 16715.1563,4836.1875 Q16712.6563,4836.1875 16711.3281,4834.5469 Q16710.0156,4832.8906 16710.0156,4829.7656 Q16710.0156,4826.6406 16711.3281,4824.9844 Q16712.6563,4823.3281 16715.1563,4823.3281 Q16715.8594,4823.3281 16716.5,4823.4844 Q16717.1563,4823.6406 16717.7188,4823.9375 L16717.7188,4826.6563 Q16717.0938,4826.0781 16716.5,4825.8125 Q16715.9063,4825.5313 16715.2813,4825.5313 Q16713.9375,4825.5313 16713.25,4826.6094 Q16712.5625,4827.6719 16712.5625,4829.7656 Q16712.5625,4831.8594 16713.25,4832.9375 Q16713.9375,4834 16715.2813,4834 Q16715.9063,4834 16716.5,4833.7344 Q16717.0938,4833.4531 16717.7188,4832.875 L16717.7188,4835.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="165" x="16735.25" y="4834.1074">PlaceHolderScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16149.5" x2="17453.5" y1="4845.9531" y2="4845.9531"/><ellipse cx="16159.5" cy="4856.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="590" x="16168.5" y="4860.1636">PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref&lt;Script&gt; p_script, Object * p_owner) : void</text><ellipse cx="16159.5" cy="4869.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="16168.5" y="4872.9683">~PlaceHolderScriptInstance() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="16149.5" x2="17453.5" y1="4879.5625" y2="4879.5625"/><ellipse cx="16159.5" cy="4890.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="16168.5" y="4893.7729">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="16159.5" cy="4903.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="16168.5" y="4906.5776">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="16159.5" cy="4916.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="16168.5" y="4919.3823">get(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><ellipse cx="16159.5" cy="4928.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="16168.5" y="4932.187">get_language() : ScriptLanguage *</text><ellipse cx="16159.5" cy="4941.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="16168.5" y="4944.9917">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="16159.5" cy="4954.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="16168.5" y="4957.7964">get_owner() : Object *</text><ellipse cx="16159.5" cy="4967.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="16168.5" y="4970.6011">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const : void</text><ellipse cx="16159.5" cy="4980.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="16168.5" y="4983.4058">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const : Variant::Type</text><ellipse cx="16159.5" cy="4993" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="16168.5" y="4996.2104">get_rpc_mode(const StringName &amp; p_method) const : MultiplayerAPI::RPCMode</text><ellipse cx="16159.5" cy="5005.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="16168.5" y="5009.0151">get_rset_mode(const StringName &amp; p_variable) const : MultiplayerAPI::RPCMode</text><ellipse cx="16159.5" cy="5018.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="16168.5" y="5021.8198">get_script() const : Ref&lt;Script&gt;</text><ellipse cx="16159.5" cy="5031.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="16168.5" y="5034.6245">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="16159.5" cy="5044.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="16168.5" y="5047.4292">is_placeholder() const : bool</text><ellipse cx="16159.5" cy="5057.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="16168.5" y="5060.2339">notification(int p_notification) : void</text><ellipse cx="16159.5" cy="5069.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="16168.5" y="5073.0386">property_get_fallback(const StringName &amp; p_name, bool * r_valid = __null) : Variant</text><ellipse cx="16159.5" cy="5082.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="605" x="16168.5" y="5085.8433">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="16159.5" cy="5095.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="16168.5" y="5098.6479">set(const StringName &amp; p_name, const Variant &amp; p_value) : bool</text><ellipse cx="16159.5" cy="5108.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="16168.5" y="5111.4526">update(const List&lt;PropertyInfo&gt; &amp; p_properties, const Map&lt;StringName,Variant&gt; &amp; p_values) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16149.5" x2="17453.5" y1="5118.0469" y2="5118.0469"/></a><!--MD5=[79e27d258fa9a526a1771d31d80b94ef]
class C_0000970940027123558604--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" target="_top" title="MainLoop" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" xlink:show="new" xlink:title="MainLoop" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="529.7734" id="C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.5;" width="440" x="19667.5" y="4704.9531"/><ellipse cx="19853.75" cy="4720.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M19856.7188,4726.5938 Q19856.1406,4726.8906 19855.5,4727.0313 Q19854.8594,4727.1875 19854.1563,4727.1875 Q19851.6563,4727.1875 19850.3281,4725.5469 Q19849.0156,4723.8906 19849.0156,4720.7656 Q19849.0156,4717.6406 19850.3281,4715.9844 Q19851.6563,4714.3281 19854.1563,4714.3281 Q19854.8594,4714.3281 19855.5,4714.4844 Q19856.1563,4714.6406 19856.7188,4714.9375 L19856.7188,4717.6563 Q19856.0938,4717.0781 19855.5,4716.8125 Q19854.9063,4716.5313 19854.2813,4716.5313 Q19852.9375,4716.5313 19852.25,4717.6094 Q19851.5625,4718.6719 19851.5625,4720.7656 Q19851.5625,4722.8594 19852.25,4723.9375 Q19852.9375,4725 19854.2813,4725 Q19854.9063,4725 19855.5,4724.7344 Q19856.0938,4724.4531 19856.7188,4723.875 L19856.7188,4726.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="19874.25" y="4725.1074">MainLoop</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19668.5" x2="20106.5" y1="4736.9531" y2="4736.9531"/><ellipse cx="19678.5" cy="4747.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="19687.5" y="4751.1636">MainLoop() : void</text><ellipse cx="19678.5" cy="4760.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="19687.5" y="4763.9683">~MainLoop() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="19668.5" x2="20106.5" y1="4770.5625" y2="4770.5625"/><ellipse cx="19678.5" cy="4781.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="19687.5" y="4784.7729">_get_class_namev() const : const StringName *</text><ellipse cx="19678.5" cy="4794.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="19687.5" y="4797.5776">drop_files(const Vector&lt;String&gt; &amp; p_files, int p_from_screen = 0) : void</text><ellipse cx="19678.5" cy="4807.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="19687.5" y="4810.3823">finish() : void</text><ellipse cx="19678.5" cy="4819.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="19687.5" y="4823.187">get_category_static() : String</text><ellipse cx="19678.5" cy="4832.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="19687.5" y="4835.9917">get_class() const : String</text><ellipse cx="19678.5" cy="4845.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="19687.5" y="4848.7964">get_class_ptr_static() : void *</text><ellipse cx="19678.5" cy="4858.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="19687.5" y="4861.6011">get_class_static() : String</text><ellipse cx="19678.5" cy="4871.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="19687.5" y="4874.4058">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="19678.5" cy="4884" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="19687.5" y="4887.2104">get_parent_class_static() : String</text><ellipse cx="19678.5" cy="4896.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="19687.5" y="4900.0151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="19678.5" cy="4909.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="19687.5" y="4912.8198">global_menu_action(const Variant &amp; p_id, const Variant &amp; p_meta) : void</text><ellipse cx="19678.5" cy="4922.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="19687.5" y="4925.6245">idle(float p_time) : bool</text><ellipse cx="19678.5" cy="4935.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="19687.5" y="4938.4292">inherits_static() : String</text><ellipse cx="19678.5" cy="4948.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="19687.5" y="4951.2339">init() : void</text><ellipse cx="19678.5" cy="4960.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="19687.5" y="4964.0386">initialize_class() : void</text><ellipse cx="19678.5" cy="4973.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="19687.5" y="4976.8433">input_event(const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="19678.5" cy="4986.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="19687.5" y="4989.6479">input_text(const String &amp; p_text) : void</text><ellipse cx="19678.5" cy="4999.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="19687.5" y="5002.4526">is_class(const String &amp; p_class) const : bool</text><ellipse cx="19678.5" cy="5012.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="19687.5" y="5015.2573">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="19678.5" cy="5024.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19687.5" y="5028.062">iteration(float p_time) : bool</text><ellipse cx="19678.5" cy="5037.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="19687.5" y="5040.8667">set_init_script(const Ref&lt;Script&gt; &amp; p_init_script) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19668.5" x2="20106.5" y1="5047.4609" y2="5047.4609"/><ellipse cx="19678.5" cy="5058.4609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="19687.5" y="5061.6714">NOTIFICATION_APP_PAUSED : enum</text><ellipse cx="19678.5" cy="5071.2656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="19687.5" y="5074.4761">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="19678.5" cy="5084.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="19687.5" y="5087.2808">NOTIFICATION_CRASH : enum</text><ellipse cx="19678.5" cy="5096.875" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="19687.5" y="5100.0854">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="19678.5" cy="5109.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="19687.5" y="5112.8901">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="19678.5" cy="5122.4844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19687.5" y="5125.6948">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="19678.5" cy="5135.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="19687.5" y="5138.4995">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="19678.5" cy="5148.0938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="19687.5" y="5151.3042">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="19678.5" cy="5160.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="19687.5" y="5164.1089">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="19678.5" cy="5173.7031" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="19687.5" y="5176.9136">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="19678.5" cy="5186.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="19687.5" y="5189.7183">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="19678.5" cy="5199.3125" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="19687.5" y="5202.5229">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="19678.5" cy="5212.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="19687.5" y="5215.3276">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="19678.5" cy="5224.9219" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19687.5" y="5228.1323">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text></a><!--MD5=[2ff27342a65908c4b6ff1f7f17075b0e]
class C_0001823345232236209470--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" target="_top" title="Engine##Singleton" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" xlink:show="new" xlink:title="Engine##Singleton" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="86.4141" id="C_0001823345232236209470" style="stroke: #A80036; stroke-width: 1.5;" width="515" x="19445" y="77.9531"/><ellipse cx="19643.25" cy="93.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M19646.2188,99.5938 Q19645.6406,99.8906 19645,100.0313 Q19644.3594,100.1875 19643.6563,100.1875 Q19641.1563,100.1875 19639.8281,98.5469 Q19638.5156,96.8906 19638.5156,93.7656 Q19638.5156,90.6406 19639.8281,88.9844 Q19641.1563,87.3281 19643.6563,87.3281 Q19644.3594,87.3281 19645,87.4844 Q19645.6563,87.6406 19646.2188,87.9375 L19646.2188,90.6563 Q19645.5938,90.0781 19645,89.8125 Q19644.4063,89.5313 19643.7813,89.5313 Q19642.4375,89.5313 19641.75,90.6094 Q19641.0625,91.6719 19641.0625,93.7656 Q19641.0625,95.8594 19641.75,96.9375 Q19642.4375,98 19643.7813,98 Q19644.4063,98 19645,97.7344 Q19645.5938,97.4531 19646.2188,96.875 L19646.2188,99.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="19663.75" y="98.1074">Engine::Singleton</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19446" x2="19959" y1="109.9531" y2="109.9531"/><ellipse cx="19456" cy="120.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="489" x="19465" y="124.1636">Singleton(const StringName &amp; p_name = StringName(), Object * p_ptr = __null) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19446" x2="19959" y1="130.7578" y2="130.7578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19451" y="136.7578"/><ellipse cx="19456" cy="141.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="19465" y="144.9683">name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19451" y="149.5625"/><ellipse cx="19456" cy="154.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="19465" y="157.7729">ptr : Object *</text></a><!--MD5=[3066cc904e29be9ea26e95834396af6e]
class C_0001191393512042218074--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" target="_top" title="IP" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" xlink:show="new" xlink:title="IP" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="388.9219" id="C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.5;" width="625" x="21735" y="4775.4531"/><ellipse cx="22037.75" cy="4791.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M22037.8594,4786.7969 L22036.7031,4791.875 L22039.0313,4791.875 L22037.8594,4786.7969 Z M22036.375,4784.5625 L22039.3594,4784.5625 L22042.7188,4796.9531 L22040.2656,4796.9531 L22039.5,4793.8906 L22036.2188,4793.8906 L22035.4688,4796.9531 L22033.0313,4796.9531 L22036.375,4784.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="11" x="22058.25" y="4795.6074">IP</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21736" x2="22359" y1="4807.4531" y2="4807.4531"/><ellipse cx="21746" cy="4818.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="21755" y="4821.6636">IP() : void</text><ellipse cx="21746" cy="4831.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="21755" y="4834.4683">~IP() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="21736" x2="22359" y1="4841.0625" y2="4841.0625"/><ellipse cx="21746" cy="4852.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="21755" y="4855.2729">_get_class_namev() const : const StringName *</text><ellipse cx="21746" cy="4864.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="21755" y="4868.0776">clear_cache(const String &amp; p_hostname = "") : void</text><ellipse cx="21746" cy="4877.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="76" x="21755" y="4880.8823">create() : IP *</text><ellipse cx="21746" cy="4890.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="21755" y="4893.687">erase_resolve_item(IP::ResolverID p_id) : void</text><ellipse cx="21746" cy="4903.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="21755" y="4906.4917">get_category_static() : String</text><ellipse cx="21746" cy="4916.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="21755" y="4919.2964">get_class() const : String</text><ellipse cx="21746" cy="4928.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="21755" y="4932.1011">get_class_ptr_static() : void *</text><ellipse cx="21746" cy="4941.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="21755" y="4944.9058">get_class_static() : String</text><ellipse cx="21746" cy="4954.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="21755" y="4957.7104">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="21746" cy="4967.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="21755" y="4970.5151">get_local_addresses(List&lt;IP_Address&gt; * r_addresses) const : void</text><ellipse cx="21746" cy="4980.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="21755" y="4983.3198">get_local_interfaces(Map&lt;String,IP::Interface_Info&gt; * r_interfaces) const = 0 : void</text><ellipse cx="21746" cy="4992.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="21755" y="4996.1245">get_parent_class_static() : String</text><ellipse cx="21746" cy="5005.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="21755" y="5008.9292">get_resolve_item_address(IP::ResolverID p_id) const : IP_Address</text><ellipse cx="21746" cy="5018.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="21755" y="5021.7339">get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus</text><ellipse cx="21746" cy="5031.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="21755" y="5034.5386">get_singleton() : IP *</text><ellipse cx="21746" cy="5044.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="21755" y="5047.3433">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="21746" cy="5056.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="21755" y="5060.1479">inherits_static() : String</text><ellipse cx="21746" cy="5069.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="21755" y="5072.9526">initialize_class() : void</text><ellipse cx="21746" cy="5082.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="21755" y="5085.7573">is_class(const String &amp; p_class) const : bool</text><ellipse cx="21746" cy="5095.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="21755" y="5098.562">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="21746" cy="5108.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="21755" y="5111.3667">resolve_hostname(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address</text><ellipse cx="21746" cy="5120.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="599" x="21755" y="5124.1714">resolve_hostname_queue_item(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21736" x2="22359" y1="5130.7656" y2="5130.7656"/><ellipse cx="21746" cy="5141.7656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="21755" y="5144.9761">RESOLVER_INVALID_ID : enum</text><ellipse cx="21746" cy="5154.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="21755" y="5157.7808">RESOLVER_MAX_QUERIES : enum</text></a><!--MD5=[572807c339726b4650e58d5aced39533]
class C_0000066148521405667716--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" target="_top" title="ProjectSettings" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" xlink:show="new" xlink:title="ProjectSettings" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="606.6016" id="C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.5;" width="1244" x="7730.5" y="1536.9531"/><ellipse cx="8300.25" cy="1552.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8303.2188,1558.5938 Q8302.6406,1558.8906 8302,1559.0313 Q8301.3594,1559.1875 8300.6563,1559.1875 Q8298.1563,1559.1875 8296.8281,1557.5469 Q8295.5156,1555.8906 8295.5156,1552.7656 Q8295.5156,1549.6406 8296.8281,1547.9844 Q8298.1563,1546.3281 8300.6563,1546.3281 Q8301.3594,1546.3281 8302,1546.4844 Q8302.6563,1546.6406 8303.2188,1546.9375 L8303.2188,1549.6563 Q8302.5938,1549.0781 8302,1548.8125 Q8301.4063,1548.5313 8300.7813,1548.5313 Q8299.4375,1548.5313 8298.75,1549.6094 Q8298.0625,1550.6719 8298.0625,1552.7656 Q8298.0625,1554.8594 8298.75,1555.9375 Q8299.4375,1557 8300.7813,1557 Q8301.4063,1557 8302,1556.7344 Q8302.5938,1556.4531 8303.2188,1555.875 L8303.2188,1558.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="8320.75" y="1557.1074">ProjectSettings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7731.5" x2="8973.5" y1="1568.9531" y2="1568.9531"/><ellipse cx="7741.5" cy="1579.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="7750.5" y="1583.1636">ProjectSettings() : void</text><ellipse cx="7741.5" cy="1592.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="7750.5" y="1595.9683">~ProjectSettings() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="7731.5" x2="8973.5" y1="1602.5625" y2="1602.5625"/><ellipse cx="7741.5" cy="1613.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="7750.5" y="1616.7729">_get_class_namev() const : const StringName *</text><ellipse cx="7741.5" cy="1626.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="7750.5" y="1629.5776">clear(const String &amp; p_name) : void</text><ellipse cx="7741.5" cy="1639.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="7750.5" y="1642.3823">get_category_static() : String</text><ellipse cx="7741.5" cy="1651.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="7750.5" y="1655.187">get_class() const : String</text><ellipse cx="7741.5" cy="1664.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="7750.5" y="1667.9917">get_class_ptr_static() : void *</text><ellipse cx="7741.5" cy="1677.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="7750.5" y="1680.7964">get_class_static() : String</text><ellipse cx="7741.5" cy="1690.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="7750.5" y="1693.6011">get_custom_property_info() const : const Map&lt;StringName,PropertyInfo&gt; &amp;</text><ellipse cx="7741.5" cy="1703.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="7750.5" y="1706.4058">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="7741.5" cy="1716" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="7750.5" y="1719.2104">get_input_presets() const : List&lt;String&gt;</text><ellipse cx="7741.5" cy="1728.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="7750.5" y="1732.0151">get_last_saved_time() : uint64_t</text><ellipse cx="7741.5" cy="1741.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="7750.5" y="1744.8198">get_optimizer_presets() const : Vector&lt;String&gt;</text><ellipse cx="7741.5" cy="1754.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="7750.5" y="1757.6245">get_order(const String &amp; p_name) const : int</text><ellipse cx="7741.5" cy="1767.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="7750.5" y="1770.4292">get_parent_class_static() : String</text><ellipse cx="7741.5" cy="1780.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="7750.5" y="1783.2339">get_resource_path() const : String</text><ellipse cx="7741.5" cy="1792.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="7750.5" y="1796.0386">get_setting(const String &amp; p_setting) const : Variant</text><ellipse cx="7741.5" cy="1805.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="192" x="7750.5" y="1808.8433">get_singleton() : ProjectSettings *</text><ellipse cx="7741.5" cy="1818.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="7750.5" y="1821.6479">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="7741.5" cy="1831.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="7750.5" y="1834.4526">globalize_path(const String &amp; p_path) const : String</text><ellipse cx="7741.5" cy="1844.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="7750.5" y="1847.2573">has_custom_feature(const String &amp; p_feature) const : bool</text><ellipse cx="7741.5" cy="1856.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="7750.5" y="1860.062">has_setting(String p_var) const : bool</text><ellipse cx="7741.5" cy="1869.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="7750.5" y="1872.8667">inherits_static() : String</text><ellipse cx="7741.5" cy="1882.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="7750.5" y="1885.6714">initialize_class() : void</text><ellipse cx="7741.5" cy="1895.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="7750.5" y="1898.4761">is_class(const String &amp; p_class) const : bool</text><ellipse cx="7741.5" cy="1908.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="7750.5" y="1911.2808">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="7741.5" cy="1920.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="7750.5" y="1924.0854">is_using_datapack() const : bool</text><ellipse cx="7741.5" cy="1933.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="7750.5" y="1936.8901">localize_path(const String &amp; p_path) const : String</text><ellipse cx="7741.5" cy="1946.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="7750.5" y="1949.6948">property_can_revert(const String &amp; p_name) : bool</text><ellipse cx="7741.5" cy="1959.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="7750.5" y="1962.4995">property_get_revert(const String &amp; p_name) : Variant</text><ellipse cx="7741.5" cy="1972.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="7750.5" y="1975.3042">save() : Error</text><ellipse cx="7741.5" cy="1984.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1218" x="7750.5" y="1988.1089">save_custom(const String &amp; p_path = "", const ProjectSettings::CustomMap &amp; p_custom = CustomMap(), const Vector&lt;String&gt; &amp; p_custom_features = Vector&lt;String&gt;(), bool p_merge_with_current = true) : Error</text><ellipse cx="7741.5" cy="1997.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="7750.5" y="2000.9136">set_builtin_order(const String &amp; p_name) : void</text><ellipse cx="7741.5" cy="2010.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="7750.5" y="2013.7183">set_custom_property_info(const String &amp; p_prop, const PropertyInfo &amp; p_info) : void</text><ellipse cx="7741.5" cy="2023.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="7750.5" y="2026.5229">set_disable_feature_overrides(bool p_disable) : void</text><ellipse cx="7741.5" cy="2036.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="7750.5" y="2039.3276">set_initial_value(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="7741.5" cy="2048.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="7750.5" y="2052.1323">set_order(const String &amp; p_name, int p_order) : void</text><ellipse cx="7741.5" cy="2061.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="7750.5" y="2064.937">set_registering_order(bool p_enable) : void</text><ellipse cx="7741.5" cy="2074.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="7750.5" y="2077.7417">set_restart_if_changed(const String &amp; p_name, bool p_restart) : void</text><ellipse cx="7741.5" cy="2087.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="7750.5" y="2090.5464">set_setting(const String &amp; p_setting, const Variant &amp; p_value) : void</text><ellipse cx="7741.5" cy="2100.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="7750.5" y="2103.3511">setup(const String &amp; p_path, const String &amp; p_main_pack, bool p_upwards = false) : Error</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7731.5" x2="8973.5" y1="2109.9453" y2="2109.9453"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7736.5" y="2115.9453"/><ellipse cx="7741.5" cy="2120.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="159" x="7750.5" y="2124.1558">CONFIG_VERSION : const int</text></a><ellipse cx="7741.5" cy="2133.75" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="7750.5" y="2136.9604">NO_BUILTIN_ORDER_BASE : enum</text><!--MD5=[3306ef7474ee8a0f7d63514abbcbe3b8]
class C_0000535376932101028371--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" target="_top" title="Input" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" xlink:show="new" xlink:title="Input" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="862.6953" id="C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.5;" width="876" x="22495.5" y="4538.4531"/><ellipse cx="22912.75" cy="4554.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M22912.8594,4549.7969 L22911.7031,4554.875 L22914.0313,4554.875 L22912.8594,4549.7969 Z M22911.375,4547.5625 L22914.3594,4547.5625 L22917.7188,4559.9531 L22915.2656,4559.9531 L22914.5,4556.8906 L22911.2188,4556.8906 L22910.4688,4559.9531 L22908.0313,4559.9531 L22911.375,4547.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="33" x="22933.25" y="4558.6074">Input</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="22496.5" x2="23370.5" y1="4570.4531" y2="4570.4531"/><ellipse cx="22506.5" cy="4581.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="22515.5" y="4584.6636">Input() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="22496.5" x2="23370.5" y1="4591.2578" y2="4591.2578"/><ellipse cx="22506.5" cy="4602.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="22515.5" y="4605.4683">_get_class_namev() const : const StringName *</text><ellipse cx="22506.5" cy="4615.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="22515.5" y="4618.2729">accumulate_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="22506.5" cy="4627.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="22515.5" y="4631.0776">action_press(const StringName &amp; p_action, float p_strength = 1.f) = 0 : void</text><ellipse cx="22506.5" cy="4640.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="314" x="22515.5" y="4643.8823">action_release(const StringName &amp; p_action) = 0 : void</text><ellipse cx="22506.5" cy="4653.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="448" x="22515.5" y="4656.687">add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void</text><ellipse cx="22506.5" cy="4666.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="22515.5" y="4669.4917">flush_accumulated_events() = 0 : void</text><ellipse cx="22506.5" cy="4679.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="22515.5" y="4682.2964">get_accelerometer() const = 0 : Vector3</text><ellipse cx="22506.5" cy="4691.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="378" x="22515.5" y="4695.1011">get_action_strength(const StringName &amp; p_action) const = 0 : float</text><ellipse cx="22506.5" cy="4704.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="22515.5" y="4707.9058">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="22506.5" cy="4717.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="22515.5" y="4720.7104">get_category_static() : String</text><ellipse cx="22506.5" cy="4730.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="22515.5" y="4733.5151">get_class() const : String</text><ellipse cx="22506.5" cy="4743.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="22515.5" y="4746.3198">get_class_ptr_static() : void *</text><ellipse cx="22506.5" cy="4755.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="22515.5" y="4759.1245">get_class_static() : String</text><ellipse cx="22506.5" cy="4768.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="208" x="22515.5" y="4771.9292">get_connected_joypads() = 0 : Array</text><ellipse cx="22506.5" cy="4781.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="22515.5" y="4784.7339">get_current_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="22506.5" cy="4794.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="22515.5" y="4797.5386">get_default_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="22506.5" cy="4807.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="186" x="22515.5" y="4810.3433">get_gravity() const = 0 : Vector3</text><ellipse cx="22506.5" cy="4819.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="22515.5" y="4823.1479">get_gyroscope() const = 0 : Vector3</text><ellipse cx="22506.5" cy="4832.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="22515.5" y="4835.9526">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="22506.5" cy="4845.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="22515.5" y="4848.7573">get_joy_axis(int p_device, int p_axis) const = 0 : float</text><ellipse cx="22506.5" cy="4858.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="22515.5" y="4861.562">get_joy_axis_index_from_string(String p_axis) = 0 : int</text><ellipse cx="22506.5" cy="4871.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="22515.5" y="4874.3667">get_joy_axis_string(int p_axis) = 0 : String</text><ellipse cx="22506.5" cy="4883.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="22515.5" y="4887.1714">get_joy_button_index_from_string(String p_button) = 0 : int</text><ellipse cx="22506.5" cy="4896.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="22515.5" y="4899.9761">get_joy_button_string(int p_button) = 0 : String</text><ellipse cx="22506.5" cy="4909.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="22515.5" y="4912.7808">get_joy_guid(int p_device) const = 0 : String</text><ellipse cx="22506.5" cy="4922.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="204" x="22515.5" y="4925.5854">get_joy_name(int p_idx) = 0 : String</text><ellipse cx="22506.5" cy="4935.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="4938.3901">get_joy_vibration_duration(int p_device) = 0 : float</text><ellipse cx="22506.5" cy="4947.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="22515.5" y="4951.1948">get_joy_vibration_strength(int p_device) = 0 : Vector2</text><ellipse cx="22506.5" cy="4960.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="22515.5" y="4963.9995">get_joy_vibration_timestamp(int p_device) = 0 : uint64_t</text><ellipse cx="22506.5" cy="4973.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="241" x="22515.5" y="4976.8042">get_last_mouse_speed() const = 0 : Point2</text><ellipse cx="22506.5" cy="4986.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="22515.5" y="4989.6089">get_magnetometer() const = 0 : Vector3</text><ellipse cx="22506.5" cy="4999.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="22515.5" y="5002.4136">get_mouse_button_mask() const = 0 : int</text><ellipse cx="22506.5" cy="5012.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="22515.5" y="5015.2183">get_mouse_mode() const : Input::MouseMode</text><ellipse cx="22506.5" cy="5024.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="225" x="22515.5" y="5028.0229">get_mouse_position() const = 0 : Point2</text><ellipse cx="22506.5" cy="5037.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="22515.5" y="5040.8276">get_parent_class_static() : String</text><ellipse cx="22506.5" cy="5050.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="22515.5" y="5053.6323">get_singleton() : Input *</text><ellipse cx="22506.5" cy="5063.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="22515.5" y="5066.437">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="22506.5" cy="5076.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="22515.5" y="5079.2417">inherits_static() : String</text><ellipse cx="22506.5" cy="5088.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="22515.5" y="5092.0464">initialize_class() : void</text><ellipse cx="22506.5" cy="5101.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="22515.5" y="5104.8511">is_action_just_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="5114.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="22515.5" y="5117.6558">is_action_just_released(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="5127.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="22515.5" y="5130.4604">is_action_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="5140.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="22515.5" y="5143.2651">is_class(const String &amp; p_class) const : bool</text><ellipse cx="22506.5" cy="5152.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="22515.5" y="5156.0698">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="22506.5" cy="5165.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="5168.8745">is_emulating_mouse_from_touch() const = 0 : bool</text><ellipse cx="22506.5" cy="5178.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="5181.6792">is_emulating_touch_from_mouse() const = 0 : bool</text><ellipse cx="22506.5" cy="5191.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="22515.5" y="5194.4839">is_joy_button_pressed(int p_device, int p_button) const = 0 : bool</text><ellipse cx="22506.5" cy="5204.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="210" x="22515.5" y="5207.2886">is_joy_known(int p_device) = 0 : bool</text><ellipse cx="22506.5" cy="5216.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="22515.5" y="5220.0933">is_key_pressed(int p_scancode) const = 0 : bool</text><ellipse cx="22506.5" cy="5229.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="22515.5" y="5232.8979">is_mouse_button_pressed(int p_button) const = 0 : bool</text><ellipse cx="22506.5" cy="5242.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="22515.5" y="5245.7026">joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void</text><ellipse cx="22506.5" cy="5255.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="365" x="22515.5" y="5258.5073">parse_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="22506.5" cy="5268.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="22515.5" y="5271.312">remove_joy_mapping(String p_guid) = 0 : void</text><ellipse cx="22506.5" cy="5280.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="850" x="22515.5" y="5284.1167">set_custom_mouse_cursor(const RES &amp; p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 &amp; p_hotspot = Vector2()) = 0 : void</text><ellipse cx="22506.5" cy="5293.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="22515.5" y="5296.9214">set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void</text><ellipse cx="22506.5" cy="5306.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="22515.5" y="5309.7261">set_mouse_mode(Input::MouseMode p_mode) : void</text><ellipse cx="22506.5" cy="5319.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="22515.5" y="5322.5308">set_use_accumulated_input(bool p_enable) = 0 : void</text><ellipse cx="22506.5" cy="5332.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="659" x="22515.5" y="5335.3354">start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void</text><ellipse cx="22506.5" cy="5344.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="22515.5" y="5348.1401">stop_joy_vibration(int p_device) = 0 : void</text><ellipse cx="22506.5" cy="5357.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="22515.5" y="5360.9448">vibrate_handheld(int p_duration_ms = 500) = 0 : void</text><ellipse cx="22506.5" cy="5370.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="598" x="22515.5" y="5373.7495">warp_mouse_motion(const Ref&lt;InputEventMouseMotion&gt; &amp; p_motion, const Rect2 &amp; p_rect) = 0 : Point2i</text><ellipse cx="22506.5" cy="5383.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="22515.5" y="5386.5542">warp_mouse_position(const Vector2 &amp; p_to) = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="22496.5" x2="23370.5" y1="5393.1484" y2="5393.1484"/></a><!--MD5=[e6941b9b1ee3163b45cd73ecd30a9f2c]
class C_0001370497546359815893--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" target="_top" title="AudioServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" xlink:show="new" xlink:title="AudioServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="1093.1797" id="C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.5;" width="560" x="17489.5" y="4423.4531"/><ellipse cx="17727.75" cy="4439.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M17730.7188,4445.0938 Q17730.1406,4445.3906 17729.5,4445.5313 Q17728.8594,4445.6875 17728.1563,4445.6875 Q17725.6563,4445.6875 17724.3281,4444.0469 Q17723.0156,4442.3906 17723.0156,4439.2656 Q17723.0156,4436.1406 17724.3281,4434.4844 Q17725.6563,4432.8281 17728.1563,4432.8281 Q17728.8594,4432.8281 17729.5,4432.9844 Q17730.1563,4433.1406 17730.7188,4433.4375 L17730.7188,4436.1563 Q17730.0938,4435.5781 17729.5,4435.3125 Q17728.9063,4435.0313 17728.2813,4435.0313 Q17726.9375,4435.0313 17726.25,4436.1094 Q17725.5625,4437.1719 17725.5625,4439.2656 Q17725.5625,4441.3594 17726.25,4442.4375 Q17726.9375,4443.5 17728.2813,4443.5 Q17728.9063,4443.5 17729.5,4443.2344 Q17730.0938,4442.9531 17730.7188,4442.375 L17730.7188,4445.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="17748.25" y="4443.6074">AudioServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="17490.5" x2="18048.5" y1="4455.4531" y2="4455.4531"/><ellipse cx="17500.5" cy="4466.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="17509.5" y="4469.6636">AudioServer() : void</text><ellipse cx="17500.5" cy="4479.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="17509.5" y="4482.4683">~AudioServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="17490.5" x2="18048.5" y1="4489.0625" y2="4489.0625"/><ellipse cx="17500.5" cy="4500.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="17509.5" y="4503.2729">_get_class_namev() const : const StringName *</text><ellipse cx="17500.5" cy="4512.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="17509.5" y="4516.0776">add_bus(int p_at_pos = -1) : void</text><ellipse cx="17500.5" cy="4525.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="17509.5" y="4528.8823">add_bus_effect(int p_bus, const Ref&lt;AudioEffect&gt; &amp; p_effect, int p_at_pos = -1) : void</text><ellipse cx="17500.5" cy="4538.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="17509.5" y="4541.687">add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="4551.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="486" x="17509.5" y="4554.4917">add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="4564.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="17509.5" y="4567.2964">audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *</text><ellipse cx="17500.5" cy="4576.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="17509.5" y="4580.1011">audio_data_free(void * p_data) : void</text><ellipse cx="17500.5" cy="4589.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="17509.5" y="4592.9058">audio_data_get_max_memory_usage() const : size_t</text><ellipse cx="17500.5" cy="4602.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="17509.5" y="4605.7104">audio_data_get_total_memory_usage() const : size_t</text><ellipse cx="17500.5" cy="4615.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="17509.5" y="4618.5151">capture_get_device() : String</text><ellipse cx="17500.5" cy="4628.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="17509.5" y="4631.3198">capture_get_device_list() : Array</text><ellipse cx="17500.5" cy="4640.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="17509.5" y="4644.1245">capture_set_device(const String &amp; p_name) : void</text><ellipse cx="17500.5" cy="4653.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="17509.5" y="4656.9292">finish() : void</text><ellipse cx="17500.5" cy="4666.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="17509.5" y="4669.7339">generate_bus_layout() const : Ref&lt;AudioBusLayout&gt;</text><ellipse cx="17500.5" cy="4679.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="17509.5" y="4682.5386">get_bus_channels(int p_bus) const : int</text><ellipse cx="17500.5" cy="4692.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="17509.5" y="4695.3433">get_bus_count() const : int</text><ellipse cx="17500.5" cy="4704.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="17509.5" y="4708.1479">get_bus_effect(int p_bus, int p_effect) : Ref&lt;AudioEffect&gt;</text><ellipse cx="17500.5" cy="4717.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="17509.5" y="4720.9526">get_bus_effect_count(int p_bus) : int</text><ellipse cx="17500.5" cy="4730.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="534" x="17509.5" y="4733.7573">get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref&lt;AudioEffectInstance&gt;</text><ellipse cx="17500.5" cy="4743.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="17509.5" y="4746.562">get_bus_index(const StringName &amp; p_bus_name) const : int</text><ellipse cx="17500.5" cy="4756.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="17509.5" y="4759.3667">get_bus_name(int p_bus) const : String</text><ellipse cx="17500.5" cy="4768.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="17509.5" y="4772.1714">get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float</text><ellipse cx="17500.5" cy="4781.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="17509.5" y="4784.9761">get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float</text><ellipse cx="17500.5" cy="4794.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="17509.5" y="4797.7808">get_bus_send(int p_bus) const : StringName</text><ellipse cx="17500.5" cy="4807.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="17509.5" y="4810.5854">get_bus_volume_db(int p_bus) const : float</text><ellipse cx="17500.5" cy="4820.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="17509.5" y="4823.3901">get_category_static() : String</text><ellipse cx="17500.5" cy="4832.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="17509.5" y="4836.1948">get_channel_count() const : int</text><ellipse cx="17500.5" cy="4845.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="17509.5" y="4848.9995">get_class() const : String</text><ellipse cx="17500.5" cy="4858.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="17509.5" y="4861.8042">get_class_ptr_static() : void *</text><ellipse cx="17500.5" cy="4871.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="17509.5" y="4874.6089">get_class_static() : String</text><ellipse cx="17500.5" cy="4884.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="17509.5" y="4887.4136">get_device() : String</text><ellipse cx="17500.5" cy="4897.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="17509.5" y="4900.2183">get_device_list() : Array</text><ellipse cx="17500.5" cy="4909.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="17509.5" y="4913.0229">get_global_rate_scale() const : float</text><ellipse cx="17500.5" cy="4922.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="17509.5" y="4925.8276">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="17500.5" cy="4935.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="17509.5" y="4938.6323">get_mix_rate() const : float</text><ellipse cx="17500.5" cy="4948.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="17509.5" y="4951.437">get_output_latency() const : double</text><ellipse cx="17500.5" cy="4961.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="17509.5" y="4964.2417">get_parent_class_static() : String</text><ellipse cx="17500.5" cy="4973.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="175" x="17509.5" y="4977.0464">get_singleton() : AudioServer *</text><ellipse cx="17500.5" cy="4986.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="17509.5" y="4989.8511">get_speaker_mode() const : AudioServer::SpeakerMode</text><ellipse cx="17500.5" cy="4999.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="17509.5" y="5002.6558">get_time_since_last_mix() const : double</text><ellipse cx="17500.5" cy="5012.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="17509.5" y="5015.4604">get_time_to_next_mix() const : double</text><ellipse cx="17500.5" cy="5025.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="17509.5" y="5028.2651">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="17500.5" cy="5037.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="17509.5" y="5041.0698">inherits_static() : String</text><ellipse cx="17500.5" cy="5050.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="17509.5" y="5053.8745">init() : void</text><ellipse cx="17500.5" cy="5063.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="17509.5" y="5066.6792">initialize_class() : void</text><ellipse cx="17500.5" cy="5076.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="17509.5" y="5079.4839">is_bus_bypassing_effects(int p_bus) const : bool</text><ellipse cx="17500.5" cy="5089.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="17509.5" y="5092.2886">is_bus_channel_active(int p_bus, int p_channel) const : bool</text><ellipse cx="17500.5" cy="5101.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="17509.5" y="5105.0933">is_bus_effect_enabled(int p_bus, int p_effect) const : bool</text><ellipse cx="17500.5" cy="5114.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="17509.5" y="5117.8979">is_bus_mute(int p_bus) const : bool</text><ellipse cx="17500.5" cy="5127.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="17509.5" y="5130.7026">is_bus_solo(int p_bus) const : bool</text><ellipse cx="17500.5" cy="5140.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="17509.5" y="5143.5073">is_class(const String &amp; p_class) const : bool</text><ellipse cx="17500.5" cy="5153.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="17509.5" y="5156.312">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="17500.5" cy="5165.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="17509.5" y="5169.1167">load_default_bus_layout() : void</text><ellipse cx="17500.5" cy="5178.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="17509.5" y="5181.9214">lock() : void</text><ellipse cx="17500.5" cy="5191.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="17509.5" y="5194.7261">move_bus(int p_bus, int p_to_pos) : void</text><ellipse cx="17500.5" cy="5204.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="17509.5" y="5207.5308">read_output_peak_db() const : float</text><ellipse cx="17500.5" cy="5217.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="17509.5" y="5220.3354">remove_bus(int p_index) : void</text><ellipse cx="17500.5" cy="5229.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="17509.5" y="5233.1401">remove_bus_effect(int p_bus, int p_effect) : void</text><ellipse cx="17500.5" cy="5242.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="17509.5" y="5245.9448">remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5255.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="17509.5" y="5258.7495">remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5268.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="17509.5" y="5271.5542">set_bus_bypass_effects(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="5281.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="17509.5" y="5284.3589">set_bus_count(int p_count) : void</text><ellipse cx="17500.5" cy="5293.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="17509.5" y="5297.1636">set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void</text><ellipse cx="17500.5" cy="5306.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="17509.5" y="5309.9683">set_bus_layout(const Ref&lt;AudioBusLayout&gt; &amp; p_bus_layout) : void</text><ellipse cx="17500.5" cy="5319.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="17509.5" y="5322.7729">set_bus_mute(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="5332.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="17509.5" y="5335.5776">set_bus_name(int p_bus, const String &amp; p_name) : void</text><ellipse cx="17500.5" cy="5345.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="17509.5" y="5348.3823">set_bus_send(int p_bus, const StringName &amp; p_send) : void</text><ellipse cx="17500.5" cy="5357.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="17509.5" y="5361.187">set_bus_solo(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="5370.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="17509.5" y="5373.9917">set_bus_volume_db(int p_bus, float p_volume_db) : void</text><ellipse cx="17500.5" cy="5383.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="17509.5" y="5386.7964">set_device(String device) : void</text><ellipse cx="17500.5" cy="5396.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="17509.5" y="5399.6011">set_global_rate_scale(float p_scale) : void</text><ellipse cx="17500.5" cy="5409.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="17509.5" y="5412.4058">swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void</text><ellipse cx="17500.5" cy="5422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="17509.5" y="5425.2104">thread_find_bus_index(const StringName &amp; p_name) : int</text><ellipse cx="17500.5" cy="5434.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="17509.5" y="5438.0151">thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *</text><ellipse cx="17500.5" cy="5447.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="17509.5" y="5450.8198">thread_get_mix_buffer_size() const : int</text><ellipse cx="17500.5" cy="5460.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="17509.5" y="5463.6245">thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool</text><ellipse cx="17500.5" cy="5473.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="17509.5" y="5476.4292">unlock() : void</text><ellipse cx="17500.5" cy="5486.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="17509.5" y="5489.2339">update() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="17490.5" x2="18048.5" y1="5495.8281" y2="5495.8281"/><ellipse cx="17500.5" cy="5506.8281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="17509.5" y="5510.0386">AUDIO_DATA_INVALID_ID : enum</text></a><!--MD5=[7f9ee7589f5b66fe26bf327ebbd73d28]
class C_0001701907280759632930--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" target="_top" title="CameraServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" xlink:show="new" xlink:title="CameraServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="388.9219" id="C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="20143" y="4775.4531"/><ellipse cx="20295.25" cy="4791.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M20298.2188,4797.0938 Q20297.6406,4797.3906 20297,4797.5313 Q20296.3594,4797.6875 20295.6563,4797.6875 Q20293.1563,4797.6875 20291.8281,4796.0469 Q20290.5156,4794.3906 20290.5156,4791.2656 Q20290.5156,4788.1406 20291.8281,4786.4844 Q20293.1563,4784.8281 20295.6563,4784.8281 Q20296.3594,4784.8281 20297,4784.9844 Q20297.6563,4785.1406 20298.2188,4785.4375 L20298.2188,4788.1563 Q20297.5938,4787.5781 20297,4787.3125 Q20296.4063,4787.0313 20295.7813,4787.0313 Q20294.4375,4787.0313 20293.75,4788.1094 Q20293.0625,4789.1719 20293.0625,4791.2656 Q20293.0625,4793.3594 20293.75,4794.4375 Q20294.4375,4795.5 20295.7813,4795.5 Q20296.4063,4795.5 20297,4795.2344 Q20297.5938,4794.9531 20298.2188,4794.375 L20298.2188,4797.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="20315.75" y="4795.6074">CameraServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20144" x2="20543" y1="4807.4531" y2="4807.4531"/><ellipse cx="20154" cy="4818.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="20163" y="4821.6636">CameraServer() : void</text><ellipse cx="20154" cy="4831.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="20163" y="4834.4683">~CameraServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="20144" x2="20543" y1="4841.0625" y2="4841.0625"/><ellipse cx="20154" cy="4852.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="20163" y="4855.2729">_get_class_namev() const : const StringName *</text><ellipse cx="20154" cy="4864.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="20163" y="4868.0776">add_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><ellipse cx="20154" cy="4877.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="20163" y="4880.8823">create() : CameraServer *</text><ellipse cx="20154" cy="4890.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="20163" y="4893.687">feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID</text><ellipse cx="20154" cy="4903.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="20163" y="4906.4917">get_category_static() : String</text><ellipse cx="20154" cy="4916.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="20163" y="4919.2964">get_class() const : String</text><ellipse cx="20154" cy="4928.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="20163" y="4932.1011">get_class_ptr_static() : void *</text><ellipse cx="20154" cy="4941.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="20163" y="4944.9058">get_class_static() : String</text><ellipse cx="20154" cy="4954.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="20163" y="4957.7104">get_feed(int p_index) : Ref&lt;CameraFeed&gt;</text><ellipse cx="20154" cy="4967.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="20163" y="4970.5151">get_feed_by_id(int p_id) : Ref&lt;CameraFeed&gt;</text><ellipse cx="20154" cy="4980.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="20163" y="4983.3198">get_feed_count() : int</text><ellipse cx="20154" cy="4992.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="20163" y="4996.1245">get_feed_index(int p_id) : int</text><ellipse cx="20154" cy="5005.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="20163" y="5008.9292">get_feeds() : Array</text><ellipse cx="20154" cy="5018.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="20163" y="5021.7339">get_free_id() : int</text><ellipse cx="20154" cy="5031.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="20163" y="5034.5386">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="20154" cy="5044.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="20163" y="5047.3433">get_parent_class_static() : String</text><ellipse cx="20154" cy="5056.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="20163" y="5060.1479">get_singleton() : CameraServer *</text><ellipse cx="20154" cy="5069.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="20163" y="5072.9526">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="20154" cy="5082.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="20163" y="5085.7573">inherits_static() : String</text><ellipse cx="20154" cy="5095.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="20163" y="5098.562">initialize_class() : void</text><ellipse cx="20154" cy="5108.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="20163" y="5111.3667">is_class(const String &amp; p_class) const : bool</text><ellipse cx="20154" cy="5120.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="20163" y="5124.1714">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="20154" cy="5133.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="144" x="20163" y="5136.9761">make_default&lt;T&gt;() : void</text><ellipse cx="20154" cy="5146.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="20163" y="5149.7808">remove_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20144" x2="20543" y1="5156.375" y2="5156.375"/></a><!--MD5=[5316dbe070bc4024b413849b0399fc2e]
class C_0001589464385186808769--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" target="_top" title="VisualServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" xlink:show="new" xlink:title="VisualServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="5497.9922" id="C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.5;" width="2566" x="1522.5" y="2220.9531"/><ellipse cx="2763.25" cy="2236.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2763.3594,2232.2969 L2762.2031,2237.375 L2764.5313,2237.375 L2763.3594,2232.2969 Z M2761.875,2230.0625 L2764.8594,2230.0625 L2768.2188,2242.4531 L2765.7656,2242.4531 L2765,2239.3906 L2761.7188,2239.3906 L2760.9688,2242.4531 L2758.5313,2242.4531 L2761.875,2230.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="2783.75" y="2241.1074">VisualServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1523.5" x2="4087.5" y1="2252.9531" y2="2252.9531"/><ellipse cx="1533.5" cy="2263.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1542.5" y="2267.1636">VisualServer() : void</text><ellipse cx="1533.5" cy="2276.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1542.5" y="2279.9683">~VisualServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1523.5" x2="4087.5" y1="2286.5625" y2="2286.5625"/><ellipse cx="1533.5" cy="2297.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1542.5" y="2300.7729">_get_class_namev() const : const StringName *</text><ellipse cx="1533.5" cy="2310.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="507" x="1542.5" y="2313.5776">_instances_cull_aabb_bind(const AABB &amp; p_aabb, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="2323.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="1542.5" y="2326.3823">_instances_cull_convex_bind(const Array &amp; p_convex, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="2335.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="637" x="1542.5" y="2339.187">_instances_cull_ray_bind(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="2348.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="1542.5" y="2351.9917">_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="2361.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1542.5" y="2364.7964">_shader_get_param_list_bind(RID p_shader) const : Array</text><ellipse cx="1533.5" cy="2374.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1542.5" y="2377.6011">_texture_debug_usage_bind() : Array</text><ellipse cx="1533.5" cy="2387.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="1542.5" y="2390.4058">black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void</text><ellipse cx="1533.5" cy="2400" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="1542.5" y="2403.2104">black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void</text><ellipse cx="1533.5" cy="2412.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="1542.5" y="2416.0151">call_set_use_vsync(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2425.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="148" x="1542.5" y="2428.8198">camera_create() = 0 : RID</text><ellipse cx="1533.5" cy="2438.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="2441.6245">camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void</text><ellipse cx="1533.5" cy="2451.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="2454.4292">camera_set_environment(RID p_camera, RID p_env) = 0 : void</text><ellipse cx="1533.5" cy="2464.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="602" x="1542.5" y="2467.2339">camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="2476.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="1542.5" y="2480.0386">camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="2489.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="1542.5" y="2492.8433">camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="2502.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="1542.5" y="2505.6479">camera_set_transform(RID p_camera, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="2515.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="2518.4526">camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2528.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="145" x="1542.5" y="2531.2573">canvas_create() = 0 : RID</text><ellipse cx="1533.5" cy="2540.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="605" x="1542.5" y="2544.062">canvas_item_add_circle(RID p_item, const Point2 &amp; p_pos, float p_radius, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="2553.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="2556.8667">canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void</text><ellipse cx="1533.5" cy="2566.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="904" x="1542.5" y="2569.6714">canvas_item_add_line(RID p_item, const Point2 &amp; p_from, const Point2 &amp; p_to, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="2579.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1248" x="1542.5" y="2582.4761">canvas_item_add_mesh(RID p_item, const RID &amp; p_mesh, const Transform2D &amp; p_transform = Transform2D(), const Color &amp; p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="2592.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="937" x="1542.5" y="2595.2808">canvas_item_add_multiline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="2604.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="681" x="1542.5" y="2608.0854">canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="2617.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2427" x="1542.5" y="2620.8901">canvas_item_add_nine_patch(RID p_item, const Rect2 &amp; p_rect, const Rect2 &amp; p_source, RID p_texture, const Vector2 &amp; p_topleft, const Vector2 &amp; p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color &amp; p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="2630.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="573" x="1542.5" y="2633.6948">canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void</text><ellipse cx="1533.5" cy="2643.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1430" x="1542.5" y="2646.4995">canvas_item_add_polygon(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="2656.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="933" x="1542.5" y="2659.3042">canvas_item_add_polyline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="2668.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1224" x="1542.5" y="2672.1089">canvas_item_add_primitive(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="2681.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="1542.5" y="2684.9136">canvas_item_add_rect(RID p_item, const Rect2 &amp; p_rect, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="2694.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="514" x="1542.5" y="2697.7183">canvas_item_add_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="2707.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1191" x="1542.5" y="2710.5229">canvas_item_add_texture_rect(RID p_item, const Rect2 &amp; p_rect, RID p_texture, bool p_tile = false, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="2720.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1404" x="1542.5" y="2723.3276">canvas_item_add_texture_rect_region(RID p_item, const Rect2 &amp; p_rect, RID p_texture, const Rect2 &amp; p_src_rect, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void</text><ellipse cx="1533.5" cy="2732.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2540" x="1542.5" y="2736.1323">canvas_item_add_triangle_array(RID p_item, const Vector&lt;int&gt; &amp; p_indices, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), const Vector&lt;int&gt; &amp; p_bones = Vector&lt;int&gt;(), const Vector&lt;float&gt; &amp; p_weights = Vector&lt;float&gt;(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void</text><ellipse cx="1533.5" cy="2745.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="2748.937">canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void</text><ellipse cx="1533.5" cy="2758.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="1542.5" y="2761.7417">canvas_item_clear(RID p_item) = 0 : void</text><ellipse cx="1533.5" cy="2771.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="1542.5" y="2774.5464">canvas_item_create() = 0 : RID</text><ellipse cx="1533.5" cy="2784.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="1542.5" y="2787.3511">canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void</text><ellipse cx="1533.5" cy="2796.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="1542.5" y="2800.1558">canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 &amp; p_rect) = 0 : void</text><ellipse cx="1533.5" cy="2809.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="1542.5" y="2812.9604">canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 &amp; p_rect = Rect2()) = 0 : void</text><ellipse cx="1533.5" cy="2822.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="2825.7651">canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2835.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="2838.5698">canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2848.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="1542.5" y="2851.3745">canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void</text><ellipse cx="1533.5" cy="2860.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="2864.1792">canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="2873.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="2876.9839">canvas_item_set_material(RID p_item, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="2886.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="1542.5" y="2889.7886">canvas_item_set_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="2899.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="2902.5933">canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void</text><ellipse cx="1533.5" cy="2912.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="2915.3979">canvas_item_set_self_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="2924.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="422" x="1542.5" y="2928.2026">canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2937.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="2941.0073">canvas_item_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="2950.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="2953.812">canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void</text><ellipse cx="1533.5" cy="2963.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="1542.5" y="2966.6167">canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2976.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="1542.5" y="2979.4214">canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void</text><ellipse cx="1533.5" cy="2989.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="1542.5" y="2992.2261">canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="3001.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="3005.0308">canvas_item_set_z_index(RID p_item, int p_z) = 0 : void</text><ellipse cx="1533.5" cy="3014.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="386" x="1542.5" y="3017.8354">canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="3027.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="1542.5" y="3030.6401">canvas_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="3040.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="1542.5" y="3043.4448">canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="3053.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="229" x="1542.5" y="3056.2495">canvas_light_occluder_create() = 0 : RID</text><ellipse cx="1533.5" cy="3065.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="444" x="1542.5" y="3069.0542">canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="3078.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="3081.8589">canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="3091.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="439" x="1542.5" y="3094.6636">canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void</text><ellipse cx="1533.5" cy="3104.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="541" x="1542.5" y="3107.4683">canvas_light_occluder_set_transform(RID p_occluder, const Transform2D &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="3117.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="3120.2729">canvas_light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3129.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="3133.0776">canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="3142.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="3145.8823">canvas_light_set_energy(RID p_light, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="3155.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="3158.687">canvas_light_set_height(RID p_light, float p_height) = 0 : void</text><ellipse cx="1533.5" cy="3168.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="3171.4917">canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="3181.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="3184.2964">canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="3193.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="3197.1011">canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void</text><ellipse cx="1533.5" cy="3206.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="1542.5" y="3209.9058">canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="3219.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="1542.5" y="3222.7104">canvas_light_set_scale(RID p_light, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="3232.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="1542.5" y="3235.5151">canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void</text><ellipse cx="1533.5" cy="3245.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="3248.3198">canvas_light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3257.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="1542.5" y="3261.1245">canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="3270.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="1542.5" y="3273.9292">canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void</text><ellipse cx="1533.5" cy="3283.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="1542.5" y="3286.7339">canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void</text><ellipse cx="1533.5" cy="3296.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="1542.5" y="3299.5386">canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void</text><ellipse cx="1533.5" cy="3309.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="1542.5" y="3312.3433">canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="3321.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="3325.1479">canvas_light_set_texture_offset(RID p_light, const Vector2 &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="3334.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="1542.5" y="3337.9526">canvas_light_set_transform(RID p_light, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="3347.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="1542.5" y="3350.7573">canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void</text><ellipse cx="1533.5" cy="3360.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="1542.5" y="3363.562">canvas_occluder_polygon_create() = 0 : RID</text><ellipse cx="1533.5" cy="3373.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="759" x="1542.5" y="3376.3667">canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="3385.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="725" x="1542.5" y="3389.1714">canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape, bool p_closed) = 0 : void</text><ellipse cx="1533.5" cy="3398.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="691" x="1542.5" y="3401.9761">canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape) = 0 : void</text><ellipse cx="1533.5" cy="3411.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="293" x="1542.5" y="3414.7808">canvas_set_disable_scale(bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="3424.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="1542.5" y="3427.5854">canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 &amp; p_mirroring) = 0 : void</text><ellipse cx="1533.5" cy="3437.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="3440.3901">canvas_set_modulate(RID p_canvas, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3449.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="1542.5" y="3453.1948">canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="3462.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="138" x="1542.5" y="3465.9995">create() : VisualServer *</text><ellipse cx="1533.5" cy="3475.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="1542.5" y="3478.8042">directional_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="3488.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="3491.6089">draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void</text><ellipse cx="1533.5" cy="3501.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="177" x="1542.5" y="3504.4136">environment_create() = 0 : RID</text><ellipse cx="1533.5" cy="3514.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="762" x="1542.5" y="3517.2183">environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void</text><ellipse cx="1533.5" cy="3526.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="734" x="1542.5" y="3530.0229">environment_set_ambient_light(RID p_env, const Color &amp; p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void</text><ellipse cx="1533.5" cy="3539.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="1542.5" y="3542.8276">environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void</text><ellipse cx="1533.5" cy="3552.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="3555.6323">environment_set_bg_color(RID p_env, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3565.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="376" x="1542.5" y="3568.437">environment_set_bg_energy(RID p_env, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="3578.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="1542.5" y="3581.2417">environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void</text><ellipse cx="1533.5" cy="3590.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="3594.0464">environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void</text><ellipse cx="1533.5" cy="3603.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="997" x="1542.5" y="3606.8511">environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="1533.5" cy="3616.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1007" x="1542.5" y="3619.6558">environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="1533.5" cy="3629.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="736" x="1542.5" y="3632.4604">environment_set_fog(RID p_env, bool p_enable, const Color &amp; p_color, const Color &amp; p_sun_color, float p_sun_amount) = 0 : void</text><ellipse cx="1533.5" cy="3642.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="948" x="1542.5" y="3645.2651">environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void</text><ellipse cx="1533.5" cy="3654.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="723" x="1542.5" y="3658.0698">environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void</text><ellipse cx="1533.5" cy="3667.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1715" x="1542.5" y="3670.8745">environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void</text><ellipse cx="1533.5" cy="3680.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="1542.5" y="3683.6792">environment_set_sky(RID p_env, RID p_sky) = 0 : void</text><ellipse cx="1533.5" cy="3693.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="1542.5" y="3696.4839">environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="3706.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="1542.5" y="3709.2886">environment_set_sky_orientation(RID p_env, const Basis &amp; p_orientation) = 0 : void</text><ellipse cx="1533.5" cy="3718.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1885" x="1542.5" y="3722.0933">environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color &amp; p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void</text><ellipse cx="1533.5" cy="3731.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="869" x="1542.5" y="3734.8979">environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void</text><ellipse cx="1533.5" cy="3744.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1464" x="1542.5" y="3747.7026">environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void</text><ellipse cx="1533.5" cy="3757.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="1542.5" y="3760.5073">finish() = 0 : void</text><ellipse cx="1533.5" cy="3770.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="1542.5" y="3773.312">free(RID p_rid) = 0 : void</text><ellipse cx="1533.5" cy="3782.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="1542.5" y="3786.1167">get_category_static() : String</text><ellipse cx="1533.5" cy="3795.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1542.5" y="3798.9214">get_class() const : String</text><ellipse cx="1533.5" cy="3808.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="1542.5" y="3811.7261">get_class_ptr_static() : void *</text><ellipse cx="1533.5" cy="3821.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="1542.5" y="3824.5308">get_class_static() : String</text><ellipse cx="1533.5" cy="3834.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="1542.5" y="3837.3354">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="1533.5" cy="3846.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="1542.5" y="3850.1401">get_parent_class_static() : String</text><ellipse cx="1533.5" cy="3859.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="3862.9448">get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t</text><ellipse cx="1533.5" cy="3872.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="178" x="1542.5" y="3875.7495">get_singleton() : VisualServer *</text><ellipse cx="1533.5" cy="3885.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="141" x="1542.5" y="3888.5542">get_test_cube() = 0 : RID</text><ellipse cx="1533.5" cy="3898.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1542.5" y="3901.3589">get_test_texture() : RID</text><ellipse cx="1533.5" cy="3910.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1542.5" y="3914.1636">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="1533.5" cy="3923.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="1542.5" y="3926.9683">get_video_adapter_name() const = 0 : String</text><ellipse cx="1533.5" cy="3936.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="262" x="1542.5" y="3939.7729">get_video_adapter_vendor() const = 0 : String</text><ellipse cx="1533.5" cy="3949.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1542.5" y="3952.5776">get_white_texture() : RID</text><ellipse cx="1533.5" cy="3962.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1542.5" y="3965.3823">gi_probe_create() = 0 : RID</text><ellipse cx="1533.5" cy="3974.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="1542.5" y="3978.187">gi_probe_get_bias(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="3987.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="3990.9917">gi_probe_get_bounds(RID p_probe) const = 0 : AABB</text><ellipse cx="1533.5" cy="4000.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="1542.5" y="4003.7964">gi_probe_get_cell_size(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4013.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="1542.5" y="4016.6011">gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector&lt;int&gt;</text><ellipse cx="1533.5" cy="4026.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="327" x="1542.5" y="4029.4058">gi_probe_get_dynamic_range(RID p_probe) const = 0 : int</text><ellipse cx="1533.5" cy="4039" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="291" x="1542.5" y="4042.2104">gi_probe_get_energy(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4051.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="1542.5" y="4055.0151">gi_probe_get_normal_bias(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4064.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="319" x="1542.5" y="4067.8198">gi_probe_get_propagation(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4077.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="361" x="1542.5" y="4080.6245">gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform</text><ellipse cx="1533.5" cy="4090.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="1542.5" y="4093.4292">gi_probe_is_compressed(RID p_probe) const = 0 : bool</text><ellipse cx="1533.5" cy="4103.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="1542.5" y="4106.2339">gi_probe_is_interior(RID p_probe) const = 0 : bool</text><ellipse cx="1533.5" cy="4115.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="321" x="1542.5" y="4119.0386">gi_probe_set_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4128.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="4131.8433">gi_probe_set_bounds(RID p_probe, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="1533.5" cy="4141.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="1542.5" y="4144.6479">gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4154.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="4157.4526">gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4167.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="484" x="1542.5" y="4170.2573">gi_probe_set_dynamic_data(RID p_probe, const PoolVector&lt;int&gt; &amp; p_data) = 0 : void</text><ellipse cx="1533.5" cy="4179.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="4183.062">gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void</text><ellipse cx="1533.5" cy="4192.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="1542.5" y="4195.8667">gi_probe_set_energy(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4205.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="1542.5" y="4208.6714">gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4218.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="4221.4761">gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4231.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="4234.2808">gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4243.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="456" x="1542.5" y="4247.0854">gi_probe_set_to_cell_xform(RID p_probe, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="4256.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="1542.5" y="4259.8901">has_changed() const = 0 : bool</text><ellipse cx="1533.5" cy="4269.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="4272.6948">has_feature(VisualServer::Features p_feature) const = 0 : bool</text><ellipse cx="1533.5" cy="4282.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="1542.5" y="4285.4995">has_os_feature(const String &amp; p_feature) const = 0 : bool</text><ellipse cx="1533.5" cy="4295.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="629" x="1542.5" y="4298.3042">immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="4307.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="1542.5" y="4311.1089">immediate_clear(RID p_immediate) = 0 : void</text><ellipse cx="1533.5" cy="4320.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="1542.5" y="4323.9136">immediate_color(RID p_immediate, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="4333.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="1542.5" y="4336.7183">immediate_create() = 0 : RID</text><ellipse cx="1533.5" cy="4346.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="251" x="1542.5" y="4349.5229">immediate_end(RID p_immediate) = 0 : void</text><ellipse cx="1533.5" cy="4359.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="1542.5" y="4362.3276">immediate_get_material(RID p_immediate) const = 0 : RID</text><ellipse cx="1533.5" cy="4371.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="1542.5" y="4375.1323">immediate_normal(RID p_immediate, const Vector3 &amp; p_normal) = 0 : void</text><ellipse cx="1533.5" cy="4384.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="1542.5" y="4387.937">immediate_set_material(RID p_immediate, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="4397.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="419" x="1542.5" y="4400.7417">immediate_tangent(RID p_immediate, const Plane &amp; p_tangent) = 0 : void</text><ellipse cx="1533.5" cy="4410.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="4413.5464">immediate_uv(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="1533.5" cy="4423.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="1542.5" y="4426.3511">immediate_uv2(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="1533.5" cy="4435.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="1542.5" y="4439.1558">immediate_vertex(RID p_immediate, const Vector3 &amp; p_vertex) = 0 : void</text><ellipse cx="1533.5" cy="4448.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="1542.5" y="4451.9604">immediate_vertex_2d(RID p_immediate, const Vector2 &amp; p_vertex) : void</text><ellipse cx="1533.5" cy="4461.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="1542.5" y="4464.7651">inherits_static() : String</text><ellipse cx="1533.5" cy="4474.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="1542.5" y="4477.5698">init() = 0 : void</text><ellipse cx="1533.5" cy="4487.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="1542.5" y="4490.3745">initialize_class() : void</text><ellipse cx="1533.5" cy="4499.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="1542.5" y="4503.1792">instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void</text><ellipse cx="1533.5" cy="4512.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="1542.5" y="4515.9839">instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void</text><ellipse cx="1533.5" cy="4525.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="4528.7886">instance_create() = 0 : RID</text><ellipse cx="1533.5" cy="4538.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="1542.5" y="4541.5933">instance_create2(RID p_base, RID p_scenario) : RID</text><ellipse cx="1533.5" cy="4551.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="1542.5" y="4554.3979">instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void</text><ellipse cx="1533.5" cy="4563.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="773" x="1542.5" y="4567.2026">instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void</text><ellipse cx="1533.5" cy="4576.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="739" x="1542.5" y="4580.0073">instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void</text><ellipse cx="1533.5" cy="4589.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="1542.5" y="4592.812">instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="4602.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="4605.6167">instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="4615.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="1542.5" y="4618.4214">instance_set_base(RID p_instance, RID p_base) = 0 : void</text><ellipse cx="1533.5" cy="4628.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="1542.5" y="4631.2261">instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void</text><ellipse cx="1533.5" cy="4640.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="4644.0308">instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void</text><ellipse cx="1533.5" cy="4653.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="4656.8354">instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="4666.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="1542.5" y="4669.6401">instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void</text><ellipse cx="1533.5" cy="4679.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="1542.5" y="4682.4448">instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void</text><ellipse cx="1533.5" cy="4692.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="4695.2495">instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void</text><ellipse cx="1533.5" cy="4704.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="494" x="1542.5" y="4708.0542">instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="4717.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="470" x="1542.5" y="4720.8589">instance_set_transform(RID p_instance, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="4730.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="861" x="1542.5" y="4733.6636">instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 &amp; p_lightmap_uv_rect) = 0 : void</text><ellipse cx="1533.5" cy="4743.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="1542.5" y="4746.4683">instance_set_visible(RID p_instance, bool p_visible) = 0 : void</text><ellipse cx="1533.5" cy="4756.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="1542.5" y="4759.2729">instances_cull_aabb(const AABB &amp; p_aabb, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="4768.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="645" x="1542.5" y="4772.0776">instances_cull_convex(const Vector&lt;Plane&gt; &amp; p_convex, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="4781.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="694" x="1542.5" y="4784.8823">instances_cull_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="4794.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1542.5" y="4797.687">is_class(const String &amp; p_class) const : bool</text><ellipse cx="1533.5" cy="4807.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1542.5" y="4810.4917">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="1533.5" cy="4820.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="1542.5" y="4823.2964">is_low_end() const = 0 : bool</text><ellipse cx="1533.5" cy="4832.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="1542.5" y="4836.1011">is_render_loop_enabled() const : bool</text><ellipse cx="1533.5" cy="4845.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="1542.5" y="4848.9058">light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4858.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="810" x="1542.5" y="4861.7104">light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void</text><ellipse cx="1533.5" cy="4871.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="625" x="1542.5" y="4874.5151">light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="4884.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="1542.5" y="4887.3198">light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void</text><ellipse cx="1533.5" cy="4896.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="1542.5" y="4900.1245">light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="4909.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="1542.5" y="4912.9292">light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void</text><ellipse cx="1533.5" cy="4922.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="1542.5" y="4925.7339">light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="4935.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="1542.5" y="4938.5386">light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void</text><ellipse cx="1533.5" cy="4948.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="4951.3433">light_set_negative(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4960.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="1542.5" y="4964.1479">light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void</text><ellipse cx="1533.5" cy="4973.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="4976.9526">light_set_projector(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="4986.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="1542.5" y="4989.7573">light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="4999.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="318" x="1542.5" y="5002.562">light_set_shadow(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="5012.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="1542.5" y="5015.3667">light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="5024.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="1542.5" y="5028.1714">light_set_use_gi(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5037.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="203" x="1542.5" y="5040.9761">lightmap_capture_create() = 0 : RID</text><ellipse cx="1533.5" cy="5050.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="5053.7808">lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB</text><ellipse cx="1533.5" cy="5063.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="1542.5" y="5066.5854">lightmap_capture_get_energy(RID p_capture) const = 0 : float</text><ellipse cx="1533.5" cy="5076.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="5079.3901">lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="5088.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="5092.1948">lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int</text><ellipse cx="1533.5" cy="5101.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="467" x="1542.5" y="5104.9995">lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform</text><ellipse cx="1533.5" cy="5114.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="1542.5" y="5117.8042">lightmap_capture_is_interior(RID p_capture) const = 0 : bool</text><ellipse cx="1533.5" cy="5127.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="5130.6089">lightmap_capture_set_bounds(RID p_capture, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="1533.5" cy="5140.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="5143.4136">lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="5153.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="5156.2183">lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void</text><ellipse cx="1533.5" cy="5165.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="1542.5" y="5169.0229">lightmap_capture_set_octree(RID p_capture, const PoolVector&lt;uint8_t&gt; &amp; p_octree) = 0 : void</text><ellipse cx="1533.5" cy="5178.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="5181.8276">lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="5191.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="562" x="1542.5" y="5194.6323">lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="5204.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1542.5" y="5207.437">make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID</text><ellipse cx="1533.5" cy="5217.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="5220.2417">material_create() = 0 : RID</text><ellipse cx="1533.5" cy="5229.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="1542.5" y="5233.0464">material_get_param(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="1533.5" cy="5242.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="536" x="1542.5" y="5245.8511">material_get_param_default(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="1533.5" cy="5255.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="1542.5" y="5258.6558">material_get_shader(RID p_shader_material) const = 0 : RID</text><ellipse cx="1533.5" cy="5268.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="1542.5" y="5271.4604">material_set_line_width(RID p_material, float p_width) = 0 : void</text><ellipse cx="1533.5" cy="5281.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="406" x="1542.5" y="5284.2651">material_set_next_pass(RID p_material, RID p_next_material) = 0 : void</text><ellipse cx="1533.5" cy="5293.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="1542.5" y="5297.0698">material_set_param(RID p_material, const StringName &amp; p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="1533.5" cy="5306.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="5309.8745">material_set_render_priority(RID p_material, int priority) = 0 : void</text><ellipse cx="1533.5" cy="5319.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="1542.5" y="5322.6792">material_set_shader(RID p_shader_material, RID p_shader) = 0 : void</text><ellipse cx="1533.5" cy="5332.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2272" x="1542.5" y="5335.4839">mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector&lt;uint8_t&gt; &amp; p_array, int p_vertex_count, const PoolVector&lt;uint8_t&gt; &amp; p_index_array, int p_index_count, const AABB &amp; p_aabb, const Vector&lt;PoolVector&lt;uint8_t&gt;&gt; &amp; p_blend_shapes = Vector&lt;PoolVector&lt;uint8_t&gt; &gt;(), const Vector&lt;AABB&gt; &amp; p_bone_aabbs = Vector&lt;AABB&gt;()) = 0 : void</text><ellipse cx="1533.5" cy="5345.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1250" x="1542.5" y="5348.2886">mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array &amp; p_arrays, const Array &amp; p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void</text><ellipse cx="1533.5" cy="5357.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="1542.5" y="5361.0933">mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData &amp; p_mesh_data) : void</text><ellipse cx="1533.5" cy="5370.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="1542.5" y="5373.8979">mesh_add_surface_from_planes(RID p_mesh, const PoolVector&lt;Plane&gt; &amp; p_planes) : void</text><ellipse cx="1533.5" cy="5383.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="1542.5" y="5386.7026">mesh_clear(RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="5396.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="136" x="1542.5" y="5399.5073">mesh_create() = 0 : RID</text><ellipse cx="1533.5" cy="5409.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="1542.5" y="5412.312">mesh_get_blend_shape_count(RID p_mesh) const = 0 : int</text><ellipse cx="1533.5" cy="5421.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="492" x="1542.5" y="5425.1167">mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode</text><ellipse cx="1533.5" cy="5434.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="1542.5" y="5437.9214">mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB</text><ellipse cx="1533.5" cy="5447.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="5450.7261">mesh_get_surface_count(RID p_mesh) const = 0 : int</text><ellipse cx="1533.5" cy="5460.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="1542.5" y="5463.5308">mesh_remove_surface(RID p_mesh, int p_index) = 0 : void</text><ellipse cx="1533.5" cy="5473.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="5476.3354">mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void</text><ellipse cx="1533.5" cy="5485.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="1542.5" y="5489.1401">mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="5498.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="402" x="1542.5" y="5501.9448">mesh_set_custom_aabb(RID p_mesh, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="1533.5" cy="5511.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="1542.5" y="5514.7495">mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB</text><ellipse cx="1533.5" cy="5524.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="1542.5" y="5527.5542">mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="5537.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="1542.5" y="5540.3589">mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="1533.5" cy="5549.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="5553.1636">mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="1533.5" cy="5562.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="5565.9683">mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="5575.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="5578.7729">mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="5588.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="1542.5" y="5591.5776">mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector&lt;PoolVector&lt;uint8_t&gt;&gt;</text><ellipse cx="1533.5" cy="5601.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="5604.3823">mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="5613.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="1542.5" y="5617.187">mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t</text><ellipse cx="1533.5" cy="5626.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="1542.5" y="5629.9917">mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t</text><ellipse cx="1533.5" cy="5639.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="520" x="1542.5" y="5642.7964">mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="5652.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="5655.6011">mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID</text><ellipse cx="1533.5" cy="5665.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="1542.5" y="5668.4058">mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType</text><ellipse cx="1533.5" cy="5678" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="1542.5" y="5681.2104">mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector&lt;AABB&gt;</text><ellipse cx="1533.5" cy="5690.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="748" x="1542.5" y="5694.0151">mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t</text><ellipse cx="1533.5" cy="5703.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="1542.5" y="5706.8198">mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="5716.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="667" x="1542.5" y="5719.6245">mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector&lt;uint8_t&gt; &amp; p_data) = 0 : void</text><ellipse cx="1533.5" cy="5729.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1579" x="1542.5" y="5732.4292">multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void</text><ellipse cx="1533.5" cy="5742.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="1542.5" y="5745.2339">multimesh_create() = 0 : RID</text><ellipse cx="1533.5" cy="5754.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="1542.5" y="5758.0386">multimesh_get_aabb(RID p_multimesh) const = 0 : AABB</text><ellipse cx="1533.5" cy="5767.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="1542.5" y="5770.8433">multimesh_get_instance_count(RID p_multimesh) const = 0 : int</text><ellipse cx="1533.5" cy="5780.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="312" x="1542.5" y="5783.6479">multimesh_get_mesh(RID p_multimesh) const = 0 : RID</text><ellipse cx="1533.5" cy="5793.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="1542.5" y="5796.4526">multimesh_get_visible_instances(RID p_multimesh) const = 0 : int</text><ellipse cx="1533.5" cy="5806.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="1542.5" y="5809.2573">multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="1533.5" cy="5818.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="5822.062">multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="1533.5" cy="5831.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="1542.5" y="5834.8667">multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform</text><ellipse cx="1533.5" cy="5844.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="1542.5" y="5847.6714">multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D</text><ellipse cx="1533.5" cy="5857.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="1542.5" y="5860.4761">multimesh_instance_set_color(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="5870.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="576" x="1542.5" y="5873.2808">multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="5882.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="1542.5" y="5886.0854">multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="5895.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="652" x="1542.5" y="5898.8901">multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="5908.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="537" x="1542.5" y="5911.6948">multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector&lt;float&gt; &amp; p_array) = 0 : void</text><ellipse cx="1533.5" cy="5921.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="5924.4995">multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="5934.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="421" x="1542.5" y="5937.3042">multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void</text><ellipse cx="1533.5" cy="5946.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="1542.5" y="5950.1089">omni_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="5959.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="5962.9136">particles_create() = 0 : RID</text><ellipse cx="1533.5" cy="5972.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="1542.5" y="5975.7183">particles_get_current_aabb(RID p_particles) = 0 : AABB</text><ellipse cx="1533.5" cy="5985.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="276" x="1542.5" y="5988.5229">particles_get_emitting(RID p_particles) = 0 : bool</text><ellipse cx="1533.5" cy="5998.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="1542.5" y="6001.3276">particles_is_inactive(RID p_particles) = 0 : bool</text><ellipse cx="1533.5" cy="6010.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="6014.1323">particles_request_process(RID p_particles) = 0 : void</text><ellipse cx="1533.5" cy="6023.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="244" x="1542.5" y="6026.937">particles_restart(RID p_particles) = 0 : void</text><ellipse cx="1533.5" cy="6036.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="1542.5" y="6039.7417">particles_set_amount(RID p_particles, int p_amount) = 0 : void</text><ellipse cx="1533.5" cy="6049.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="1542.5" y="6052.5464">particles_set_custom_aabb(RID p_particles, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="1533.5" cy="6062.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="1542.5" y="6065.3511">particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void</text><ellipse cx="1533.5" cy="6074.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="1542.5" y="6078.1558">particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="6087.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="1542.5" y="6090.9604">particles_set_draw_passes(RID p_particles, int p_count) = 0 : void</text><ellipse cx="1533.5" cy="6100.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="528" x="1542.5" y="6103.7651">particles_set_emission_transform(RID p_particles, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6113.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="6116.5698">particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void</text><ellipse cx="1533.5" cy="6126.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="6129.3745">particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="1533.5" cy="6138.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="1542.5" y="6142.1792">particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void</text><ellipse cx="1533.5" cy="6151.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="6154.9839">particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6164.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="1542.5" y="6167.7886">particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void</text><ellipse cx="1533.5" cy="6177.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="6180.5933">particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void</text><ellipse cx="1533.5" cy="6190.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="6193.3979">particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void</text><ellipse cx="1533.5" cy="6202.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="6206.2026">particles_set_process_material(RID p_particles, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="6215.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="1542.5" y="6219.0073">particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="1533.5" cy="6228.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="1542.5" y="6231.812">particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="6241.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="1542.5" y="6244.6167">particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6254.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="197" x="1542.5" y="6257.4214">reflection_probe_create() = 0 : RID</text><ellipse cx="1533.5" cy="6267.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="6270.2261">reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6279.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="6283.0308">reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void</text><ellipse cx="1533.5" cy="6292.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="1542.5" y="6295.8354">reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6305.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="6308.6401">reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6318.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="1542.5" y="6321.4448">reflection_probe_set_extents(RID p_probe, const Vector3 &amp; p_extents) = 0 : void</text><ellipse cx="1533.5" cy="6331.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="6334.2495">reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void</text><ellipse cx="1533.5" cy="6343.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="1542.5" y="6347.0542">reflection_probe_set_interior_ambient(RID p_probe, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6356.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="6359.8589">reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="6369.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="1542.5" y="6372.6636">reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void</text><ellipse cx="1533.5" cy="6382.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="433" x="1542.5" y="6385.4683">reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void</text><ellipse cx="1533.5" cy="6395.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="476" x="1542.5" y="6398.2729">reflection_probe_set_origin_offset(RID p_probe, const Vector3 &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="6407.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="1542.5" y="6411.0776">reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void</text><ellipse cx="1533.5" cy="6420.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="631" x="1542.5" y="6423.8823">reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="6433.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="685" x="1542.5" y="6436.687">request_frame_drawn_callback(Object * p_where, const StringName &amp; p_method, const Variant &amp; p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="6446.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="6449.4917">scenario_create() = 0 : RID</text><ellipse cx="1533.5" cy="6459.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="557" x="1542.5" y="6462.2964">scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void</text><ellipse cx="1533.5" cy="6471.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="6475.1011">scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="1533.5" cy="6484.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="1542.5" y="6487.9058">scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="1533.5" cy="6497.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="6500.7104">scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="6510.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="677" x="1542.5" y="6513.5151">set_boot_image(const Ref&lt;Image&gt; &amp; p_image, const Color &amp; p_color, bool p_scale, bool p_use_filter = true) = 0 : void</text><ellipse cx="1533.5" cy="6523.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="1542.5" y="6526.3198">set_debug_generate_wireframes(bool p_generate) = 0 : void</text><ellipse cx="1533.5" cy="6535.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="1542.5" y="6539.1245">set_default_clear_color(const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6548.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1542.5" y="6551.9292">set_render_loop_enabled(bool p_enabled) : void</text><ellipse cx="1533.5" cy="6561.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="267" x="1542.5" y="6564.7339">set_shader_time_scale(float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="6574.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="437" x="1542.5" y="6577.5386">shader_add_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="1533.5" cy="6587.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="144" x="1542.5" y="6590.3433">shader_create() = 0 : RID</text><ellipse cx="1533.5" cy="6599.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="1542.5" y="6603.1479">shader_get_code(RID p_shader) const = 0 : String</text><ellipse cx="1533.5" cy="6612.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="498" x="1542.5" y="6615.9526">shader_get_custom_defines(RID p_shader, Vector&lt;String&gt; * p_defines) const = 0 : void</text><ellipse cx="1533.5" cy="6625.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="1542.5" y="6628.7573">shader_get_default_texture_param(RID p_shader, const StringName &amp; p_name) const = 0 : RID</text><ellipse cx="1533.5" cy="6638.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="506" x="1542.5" y="6641.562">shader_get_param_list(RID p_shader, List&lt;PropertyInfo&gt; * p_param_list) const = 0 : void</text><ellipse cx="1533.5" cy="6651.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="6654.3667">shader_remove_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="1533.5" cy="6663.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="6667.1714">shader_set_code(RID p_shader, const String &amp; p_code) = 0 : void</text><ellipse cx="1533.5" cy="6676.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="1542.5" y="6679.9761">shader_set_default_texture_param(RID p_shader, const StringName &amp; p_name, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="6689.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="1542.5" y="6692.7808">skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void</text><ellipse cx="1533.5" cy="6702.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="6705.5854">skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform</text><ellipse cx="1533.5" cy="6715.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="6718.3901">skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D</text><ellipse cx="1533.5" cy="6727.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="1542.5" y="6731.1948">skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6740.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="606" x="1542.5" y="6743.9995">skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6753.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="6756.8042">skeleton_create() = 0 : RID</text><ellipse cx="1533.5" cy="6766.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="6769.6089">skeleton_get_bone_count(RID p_skeleton) const = 0 : int</text><ellipse cx="1533.5" cy="6779.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="1542.5" y="6782.4136">skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D &amp; p_base_transform) = 0 : void</text><ellipse cx="1533.5" cy="6792.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="124" x="1542.5" y="6795.2183">sky_create() = 0 : RID</text><ellipse cx="1533.5" cy="6804.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="1542.5" y="6808.0229">sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void</text><ellipse cx="1533.5" cy="6817.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="159" x="1542.5" y="6820.8276">spot_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="6830.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="1542.5" y="6833.6323">sync() = 0 : void</text><ellipse cx="1533.5" cy="6843.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1082" x="1542.5" y="6846.437">texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void</text><ellipse cx="1533.5" cy="6856.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="6859.2417">texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void</text><ellipse cx="1533.5" cy="6868.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="1542.5" y="6872.0464">texture_create() = 0 : RID</text><ellipse cx="1533.5" cy="6881.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="628" x="1542.5" y="6884.8511">texture_create_from_image(const Ref&lt;Image&gt; &amp; p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID</text><ellipse cx="1533.5" cy="6894.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="6897.6558">texture_debug_usage(List&lt;VisualServer::TextureInfo&gt; * r_info) = 0 : void</text><ellipse cx="1533.5" cy="6907.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="1542.5" y="6910.4604">texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref&lt;Image&gt;</text><ellipse cx="1533.5" cy="6920.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="1542.5" y="6923.2651">texture_get_depth(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="6932.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="1542.5" y="6936.0698">texture_get_flags(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="6945.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="6948.8745">texture_get_format(RID p_texture) const = 0 : Image::Format</text><ellipse cx="1533.5" cy="6958.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="1542.5" y="6961.6792">texture_get_height(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="6971.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="1542.5" y="6974.4839">texture_get_path(RID p_texture) const = 0 : String</text><ellipse cx="1533.5" cy="6984.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="6987.2886">texture_get_texid(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="6996.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="7000.0933">texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType</text><ellipse cx="1533.5" cy="7009.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="301" x="1542.5" y="7012.8979">texture_get_width(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="7022.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="1542.5" y="7025.7026">texture_set_data(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int p_layer = 0) = 0 : void</text><ellipse cx="1533.5" cy="7035.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="974" x="1542.5" y="7038.5073">texture_set_data_partial(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void</text><ellipse cx="1533.5" cy="7048.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="707" x="1542.5" y="7051.312">texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="7060.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="733" x="1542.5" y="7064.1167">texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="7073.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="718" x="1542.5" y="7076.9214">texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="7086.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="1542.5" y="7089.7261">texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void</text><ellipse cx="1533.5" cy="7099.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="1542.5" y="7102.5308">texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="7112.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="7115.3354">texture_set_path(RID p_texture, const String &amp; p_path) = 0 : void</text><ellipse cx="1533.5" cy="7124.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="1542.5" y="7128.1401">texture_set_proxy(RID p_proxy, RID p_base) = 0 : void</text><ellipse cx="1533.5" cy="7137.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="1542.5" y="7140.9448">texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="7150.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="1542.5" y="7153.7495">texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void</text><ellipse cx="1533.5" cy="7163.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="275" x="1542.5" y="7166.5542">textures_keep_original(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="7176.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="7179.3589">viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void</text><ellipse cx="1533.5" cy="7188.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="373" x="1542.5" y="7192.1636">viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="7201.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="1542.5" y="7204.9683">viewport_attach_to_screen(RID p_viewport, const Rect2 &amp; p_rect = Rect2(), int p_screen = 0) = 0 : void</text><ellipse cx="1533.5" cy="7214.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1542.5" y="7217.7729">viewport_create() = 0 : RID</text><ellipse cx="1533.5" cy="7227.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="246" x="1542.5" y="7230.5776">viewport_detach(RID p_viewport) = 0 : void</text><ellipse cx="1533.5" cy="7240.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="1542.5" y="7243.3823">viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int</text><ellipse cx="1533.5" cy="7252.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="1542.5" y="7256.187">viewport_get_texture(RID p_viewport) const = 0 : RID</text><ellipse cx="1533.5" cy="7265.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="7268.9917">viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="7278.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="1542.5" y="7281.7964">viewport_set_active(RID p_viewport, bool p_active) = 0 : void</text><ellipse cx="1533.5" cy="7291.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="1542.5" y="7294.6011">viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void</text><ellipse cx="1533.5" cy="7304.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="1542.5" y="7307.4058">viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="7317" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="1542.5" y="7320.2104">viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void</text><ellipse cx="1533.5" cy="7329.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="548" x="1542.5" y="7333.0151">viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void</text><ellipse cx="1533.5" cy="7342.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="7345.8198">viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="7355.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="7358.6245">viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="7368.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="575" x="1542.5" y="7371.4292">viewport_set_global_canvas_transform(RID p_viewport, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="7381.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="1542.5" y="7384.2339">viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="7393.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="7397.0386">viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="1533.5" cy="7406.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="7409.8433">viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="1533.5" cy="7419.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="7422.6479">viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="7432.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="7435.4526">viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void</text><ellipse cx="1533.5" cy="7445.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="1542.5" y="7448.2573">viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void</text><ellipse cx="1533.5" cy="7457.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="455" x="1542.5" y="7461.062">viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="7470.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="1542.5" y="7473.8667">viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void</text><ellipse cx="1533.5" cy="7483.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="1542.5" y="7486.6714">viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="7496.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="7499.4761">viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void</text><ellipse cx="1533.5" cy="7509.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="7512.2808">viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void</text><ellipse cx="1533.5" cy="7521.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="463" x="1542.5" y="7525.0854">viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="7534.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="1542.5" y="7537.8901">viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="7547.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="7550.6948">viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void</text><ellipse cx="1533.5" cy="7560.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="7563.4995">viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void</text><ellipse cx="1533.5" cy="7573.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="1542.5" y="7576.3042">viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void</text><ellipse cx="1533.5" cy="7585.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="7589.1089">viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void</text><ellipse cx="1533.5" cy="7598.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="1542.5" y="7601.9136">viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1523.5" x2="4087.5" y1="7608.5078" y2="7608.5078"/><ellipse cx="1533.5" cy="7619.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1542.5" y="7622.7183">ARRAY_WEIGHTS_SIZE : enum</text><ellipse cx="1533.5" cy="7632.3125" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1542.5" y="7635.5229">CANVAS_ITEM_Z_MAX : enum</text><ellipse cx="1533.5" cy="7645.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1542.5" y="7648.3276">CANVAS_ITEM_Z_MIN : enum</text><ellipse cx="1533.5" cy="7657.9219" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="1542.5" y="7661.1323">MATERIAL_RENDER_PRIORITY_MAX : enum</text><ellipse cx="1533.5" cy="7670.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="1542.5" y="7673.937">MATERIAL_RENDER_PRIORITY_MIN : enum</text><ellipse cx="1533.5" cy="7683.5313" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="1542.5" y="7686.7417">MAX_CURSORS : enum</text><ellipse cx="1533.5" cy="7696.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="7699.5464">MAX_GLOW_LEVELS : enum</text><ellipse cx="1533.5" cy="7709.1406" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1542.5" y="7712.3511">NO_INDEX_ARRAY : enum</text></a><!--MD5=[8bd677d40488ae3737ee9bebc9a74ec6]
class C_0001559146041463814963--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" target="_top" title="PhysicsDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" xlink:show="new" xlink:title="PhysicsDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="683.4297" id="C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.5;" width="472" x="4223.5" y="4628.4531"/><ellipse cx="4382.25" cy="4644.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4382.3594,4639.7969 L4381.2031,4644.875 L4383.5313,4644.875 L4382.3594,4639.7969 Z M4380.875,4637.5625 L4383.8594,4637.5625 L4387.2188,4649.9531 L4384.7656,4649.9531 L4384,4646.8906 L4380.7188,4646.8906 L4379.9688,4649.9531 L4377.5313,4649.9531 L4380.875,4637.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="4402.75" y="4648.6074">PhysicsDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4224.5" x2="4694.5" y1="4660.4531" y2="4660.4531"/><ellipse cx="4234.5" cy="4671.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4243.5" y="4674.6636">PhysicsDirectBodyState() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4224.5" x2="4694.5" y1="4681.2578" y2="4681.2578"/><ellipse cx="4234.5" cy="4692.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4243.5" y="4695.4683">_get_class_namev() const : const StringName *</text><ellipse cx="4234.5" cy="4705.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="4243.5" y="4708.2729">add_central_force(const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4234.5" cy="4717.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4243.5" y="4721.0776">add_force(const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="4234.5" cy="4730.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="4243.5" y="4733.8823">add_torque(const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4234.5" cy="4743.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="4243.5" y="4746.687">apply_central_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="4756.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="4243.5" y="4759.4917">apply_impulse(const Vector3 &amp; p_pos, const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="4769.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="4243.5" y="4772.2964">apply_torque_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="4781.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="4243.5" y="4785.1011">get_angular_velocity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4794.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4243.5" y="4797.9058">get_category_static() : String</text><ellipse cx="4234.5" cy="4807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="235" x="4243.5" y="4810.7104">get_center_of_mass() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4820.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4243.5" y="4823.5151">get_class() const : String</text><ellipse cx="4234.5" cy="4833.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4243.5" y="4836.3198">get_class_ptr_static() : void *</text><ellipse cx="4234.5" cy="4845.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4243.5" y="4849.1245">get_class_static() : String</text><ellipse cx="4234.5" cy="4858.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="4243.5" y="4861.9292">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="4234.5" cy="4871.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4243.5" y="4874.7339">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="4234.5" cy="4884.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="4243.5" y="4887.5386">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="4234.5" cy="4897.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="4243.5" y="4900.3433">get_contact_collider_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="4909.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="4243.5" y="4913.1479">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="4234.5" cy="4922.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="4243.5" y="4925.9526">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="4935.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="4243.5" y="4938.7573">get_contact_count() const = 0 : int</text><ellipse cx="4234.5" cy="4948.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="4243.5" y="4951.562">get_contact_impulse(int p_contact_idx) const = 0 : float</text><ellipse cx="4234.5" cy="4961.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="4243.5" y="4964.3667">get_contact_local_normal(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="4973.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4243.5" y="4977.1714">get_contact_local_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="4986.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="4243.5" y="4989.9761">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="4234.5" cy="4999.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4243.5" y="5002.7808">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4234.5" cy="5012.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="4243.5" y="5015.5854">get_inverse_inertia() const = 0 : Vector3</text><ellipse cx="4234.5" cy="5025.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="4243.5" y="5028.3901">get_inverse_inertia_tensor() const = 0 : Basis</text><ellipse cx="4234.5" cy="5037.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="4243.5" y="5041.1948">get_inverse_mass() const = 0 : float</text><ellipse cx="4234.5" cy="5050.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="4243.5" y="5053.9995">get_linear_velocity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="5063.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4243.5" y="5066.8042">get_parent_class_static() : String</text><ellipse cx="4234.5" cy="5076.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="255" x="4243.5" y="5079.6089">get_principal_inertia_axes() const = 0 : Basis</text><ellipse cx="4234.5" cy="5089.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="283" x="4243.5" y="5092.4136">get_space_state() = 0 : PhysicsDirectSpaceState *</text><ellipse cx="4234.5" cy="5102.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="4243.5" y="5105.2183">get_step() const = 0 : real_t</text><ellipse cx="4234.5" cy="5114.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="4243.5" y="5118.0229">get_total_angular_damp() const = 0 : float</text><ellipse cx="4234.5" cy="5127.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="4243.5" y="5130.8276">get_total_gravity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="5140.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="4243.5" y="5143.6323">get_total_linear_damp() const = 0 : float</text><ellipse cx="4234.5" cy="5153.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="4243.5" y="5156.437">get_transform() const = 0 : Transform</text><ellipse cx="4234.5" cy="5166.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4243.5" y="5169.2417">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4234.5" cy="5178.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4243.5" y="5182.0464">inherits_static() : String</text><ellipse cx="4234.5" cy="5191.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4243.5" y="5194.8511">initialize_class() : void</text><ellipse cx="4234.5" cy="5204.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="4243.5" y="5207.6558">integrate_forces() : void</text><ellipse cx="4234.5" cy="5217.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4243.5" y="5220.4604">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4234.5" cy="5230.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4243.5" y="5233.2651">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4234.5" cy="5242.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="4243.5" y="5246.0698">is_sleeping() const = 0 : bool</text><ellipse cx="4234.5" cy="5255.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="4243.5" y="5258.8745">set_angular_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="4234.5" cy="5268.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="4243.5" y="5271.6792">set_linear_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="4234.5" cy="5281.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="4243.5" y="5284.4839">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="4234.5" cy="5294.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4243.5" y="5297.2886">set_transform(const Transform &amp; p_transform) = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4224.5" x2="4694.5" y1="5303.8828" y2="5303.8828"/></a><!--MD5=[123a6318eb7c3f47a6d4372e2b561658]
class C_0000503002593685351124--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" target="_top" title="PhysicsDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" xlink:show="new" xlink:title="PhysicsDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="312.0938" id="C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.5;" width="2171" x="340" y="1684.4531"/><ellipse cx="1344.25" cy="1700.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1344.3594,1695.7969 L1343.2031,1700.875 L1345.5313,1700.875 L1344.3594,1695.7969 Z M1342.875,1693.5625 L1345.8594,1693.5625 L1349.2188,1705.9531 L1346.7656,1705.9531 L1346,1702.8906 L1342.7188,1702.8906 L1341.9688,1705.9531 L1339.5313,1705.9531 L1342.875,1693.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1364.75" y="1704.6074">PhysicsDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="341" x2="2510" y1="1716.4531" y2="1716.4531"/><ellipse cx="351" cy="1727.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="360" y="1730.6636">PhysicsDirectSpaceState() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="341" x2="2510" y1="1737.2578" y2="1737.2578"/><ellipse cx="351" cy="1748.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="360" y="1751.4683">_get_class_namev() const : const StringName *</text><ellipse cx="351" cy="1761.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2145" x="360" y="1764.2729">cast_motion(const RID &amp; p_shape, const Transform &amp; p_xform, const Vector3 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool</text><ellipse cx="351" cy="1773.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1719" x="360" y="1777.0776">collide_shape(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="351" cy="1786.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="360" y="1789.8823">get_category_static() : String</text><ellipse cx="351" cy="1799.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="360" y="1802.687">get_class() const : String</text><ellipse cx="351" cy="1812.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="360" y="1815.4917">get_class_ptr_static() : void *</text><ellipse cx="351" cy="1825.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="360" y="1828.2964">get_class_static() : String</text><ellipse cx="351" cy="1837.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="360" y="1841.1011">get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3</text><ellipse cx="351" cy="1850.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="360" y="1853.9058">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="351" cy="1863.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="360" y="1866.7104">get_parent_class_static() : String</text><ellipse cx="351" cy="1876.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="360" y="1879.5151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="351" cy="1889.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="360" y="1892.3198">inherits_static() : String</text><ellipse cx="351" cy="1901.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="360" y="1905.1245">initialize_class() : void</text><ellipse cx="351" cy="1914.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1540" x="360" y="1917.9292">intersect_point(const Vector3 &amp; p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="351" cy="1927.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1689" x="360" y="1930.7339">intersect_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, PhysicsDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool</text><ellipse cx="351" cy="1940.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1782" x="360" y="1943.5386">intersect_shape(const RID &amp; p_shape, const Transform &amp; p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="351" cy="1953.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="360" y="1956.3433">is_class(const String &amp; p_class) const : bool</text><ellipse cx="351" cy="1965.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="360" y="1969.1479">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="351" cy="1978.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1637" x="360" y="1981.9526">rest_info(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="341" x2="2510" y1="1988.5469" y2="1988.5469"/></a><!--MD5=[c66ec037f9beb318ec4ceea904716941]
class C_0000493041171271776846--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" target="_top" title="PhysicsDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" xlink:show="new" xlink:title="PhysicsDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="99.2188" id="C_0000493041171271776846" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="5972" y="71.4531"/><ellipse cx="5987" cy="87.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5989.9688,93.0938 Q5989.3906,93.3906 5988.75,93.5313 Q5988.1094,93.6875 5987.4063,93.6875 Q5984.9063,93.6875 5983.5781,92.0469 Q5982.2656,90.3906 5982.2656,87.2656 Q5982.2656,84.1406 5983.5781,82.4844 Q5984.9063,80.8281 5987.4063,80.8281 Q5988.1094,80.8281 5988.75,80.9844 Q5989.4063,81.1406 5989.9688,81.4375 L5989.9688,84.1563 Q5989.3438,83.5781 5988.75,83.3125 Q5988.1563,83.0313 5987.5313,83.0313 Q5986.1875,83.0313 5985.5,84.1094 Q5984.8125,85.1719 5984.8125,87.2656 Q5984.8125,89.3594 5985.5,90.4375 Q5986.1875,91.5 5987.5313,91.5 Q5988.1563,91.5 5988.75,91.2344 Q5989.3438,90.9531 5989.9688,90.375 L5989.9688,93.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="243" x="6001" y="91.6074">PhysicsDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5973" x2="6246" y1="103.4531" y2="103.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5973" x2="6246" y1="111.4531" y2="111.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="117.4531"/><ellipse cx="5983" cy="122.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="5992" y="125.6636">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="130.2578"/><ellipse cx="5983" cy="135.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="5992" y="138.4683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="143.0625"/><ellipse cx="5983" cy="148.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="5992" y="151.2729">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="155.8672"/><ellipse cx="5983" cy="160.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="5992" y="164.0776">shape : int</text></a><!--MD5=[22d525dd8ab5843672eb9a446d1ac0b7]
class C_0000461609734144368587--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" target="_top" title="PhysicsDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" xlink:show="new" xlink:title="PhysicsDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="124.8281" id="C_0000461609734144368587" style="stroke: #A80036; stroke-width: 1.5;" width="257" x="6" y="58.4531"/><ellipse cx="21" cy="74.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23.9688,80.0938 Q23.3906,80.3906 22.75,80.5313 Q22.1094,80.6875 21.4063,80.6875 Q18.9063,80.6875 17.5781,79.0469 Q16.2656,77.3906 16.2656,74.2656 Q16.2656,71.1406 17.5781,69.4844 Q18.9063,67.8281 21.4063,67.8281 Q22.1094,67.8281 22.75,67.9844 Q23.4063,68.1406 23.9688,68.4375 L23.9688,71.1563 Q23.3438,70.5781 22.75,70.3125 Q22.1563,70.0313 21.5313,70.0313 Q20.1875,70.0313 19.5,71.1094 Q18.8125,72.1719 18.8125,74.2656 Q18.8125,76.3594 19.5,77.4375 Q20.1875,78.5 21.5313,78.5 Q22.1563,78.5 22.75,78.2344 Q23.3438,77.9531 23.9688,77.375 L23.9688,80.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="225" x="35" y="78.6074">PhysicsDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="262" y1="90.4531" y2="90.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="262" y1="98.4531" y2="98.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="104.4531"/><ellipse cx="17" cy="109.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="26" y="112.6636">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="117.2578"/><ellipse cx="17" cy="122.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="26" y="125.4683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="130.0625"/><ellipse cx="17" cy="135.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="26" y="138.2729">normal : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="142.8672"/><ellipse cx="17" cy="147.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="151.0776">position : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="155.6719"/><ellipse cx="17" cy="160.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="26" y="163.8823">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="168.4766"/><ellipse cx="17" cy="173.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="26" y="176.687">shape : int</text></a><!--MD5=[a29f7384437247e0f26d2b1ff51d7842]
class C_0001034902024938599899--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" target="_top" title="PhysicsServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" xlink:show="new" xlink:title="PhysicsServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="2565.7188" id="C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.5;" width="1275" x="4731" y="3686.9531"/><ellipse cx="5322.25" cy="3702.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5322.3594,3698.2969 L5321.2031,3703.375 L5323.5313,3703.375 L5322.3594,3698.2969 Z M5320.875,3696.0625 L5323.8594,3696.0625 L5327.2188,3708.4531 L5324.7656,3708.4531 L5324,3705.3906 L5320.7188,3705.3906 L5319.9688,3708.4531 L5317.5313,3708.4531 L5320.875,3696.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="84" x="5342.75" y="3707.1074">PhysicsServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4732" x2="6005" y1="3718.9531" y2="3718.9531"/><ellipse cx="4742" cy="3729.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="4751" y="3733.1636">PhysicsServer() : void</text><ellipse cx="4742" cy="3742.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="4751" y="3745.9683">~PhysicsServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4732" x2="6005" y1="3752.5625" y2="3752.5625"/><ellipse cx="4742" cy="3763.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4751" y="3766.7729">_get_class_namev() const : const StringName *</text><ellipse cx="4742" cy="3776.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="712" x="4751" y="3779.5776">area_add_shape(RID p_area, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="4742" cy="3789.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="4751" y="3792.3823">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="4742" cy="3801.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="4751" y="3805.187">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="4742" cy="3814.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="4751" y="3817.9917">area_create() = 0 : RID</text><ellipse cx="4742" cy="3827.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="4751" y="3830.7964">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="4742" cy="3840.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="4751" y="3843.6011">area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="4742" cy="3853.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="4751" y="3856.4058">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="4742" cy="3866" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="4751" y="3869.2104">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="4742" cy="3878.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="447" x="4751" y="3882.0151">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform</text><ellipse cx="4742" cy="3891.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="4751" y="3894.8198">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="4742" cy="3904.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="4751" y="3907.6245">area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode</text><ellipse cx="4742" cy="3917.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="4751" y="3920.4292">area_get_transform(RID p_area) const = 0 : Transform</text><ellipse cx="4742" cy="3930.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="4751" y="3933.2339">area_is_ray_pickable(RID p_area) const = 0 : bool</text><ellipse cx="4742" cy="3942.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="4751" y="3946.0386">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="4742" cy="3955.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="4751" y="3958.8433">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="4742" cy="3968.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4751" y="3971.6479">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="3981.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="4751" y="3984.4526">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="3994.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="3997.2573">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="4742" cy="4006.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="4751" y="4010.062">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="4742" cy="4019.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="603" x="4751" y="4022.8667">area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="4742" cy="4032.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="4751" y="4035.6714">area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4045.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="4751" y="4048.4761">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="4742" cy="4058.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="4751" y="4061.2808">area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="4742" cy="4070.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="4751" y="4074.0854">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4083.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="4751" y="4086.8901">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="4742" cy="4096.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="4751" y="4099.6948">area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="4742" cy="4109.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="428" x="4751" y="4112.4995">area_set_transform(RID p_area, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4122.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="4751" y="4125.3042">body_add_central_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4742" cy="4134.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="4751" y="4138.1089">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="4147.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="4751" y="4150.9136">body_add_force(RID p_body, const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="4742" cy="4160.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="716" x="4751" y="4163.7183">body_add_shape(RID p_body, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="4742" cy="4173.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="4751" y="4176.5229">body_add_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4742" cy="4186.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="4751" y="4189.3276">body_apply_central_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4198.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="543" x="4751" y="4202.1323">body_apply_impulse(RID p_body, const Vector3 &amp; p_pos, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4211.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="4751" y="4214.937">body_apply_torque_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4224.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="4227.7417">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="4742" cy="4237.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="4751" y="4240.5464">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="4742" cy="4250.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="4751" y="4253.3511">body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="4742" cy="4262.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="4751" y="4266.1558">body_get_applied_force(RID p_body) const = 0 : Vector3</text><ellipse cx="4742" cy="4275.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="4751" y="4278.9604">body_get_applied_torque(RID p_body) const = 0 : Vector3</text><ellipse cx="4742" cy="4288.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="4751" y="4291.7651">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="4742" cy="4301.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="4751" y="4304.5698">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4314.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4751" y="4317.3745">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4326.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="4751" y="4330.1792">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="4742" cy="4339.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="4751" y="4342.9839">body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *</text><ellipse cx="4742" cy="4352.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="362" x="4751" y="4355.7886">body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t</text><ellipse cx="4742" cy="4365.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="4751" y="4368.5933">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="4742" cy="4378.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="4751" y="4381.3979">body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode</text><ellipse cx="4742" cy="4390.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4751" y="4394.2026">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4403.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="4751" y="4407.0073">body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="4742" cy="4416.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="4751" y="4419.812">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="4742" cy="4429.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="4751" y="4432.6167">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="4742" cy="4442.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="4751" y="4445.4214">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform</text><ellipse cx="4742" cy="4455.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="4751" y="4458.2261">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="4742" cy="4467.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="4751" y="4471.0308">body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="4742" cy="4480.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="4751" y="4483.8354">body_get_user_flags(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4493.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="469" x="4751" y="4496.6401">body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool</text><ellipse cx="4742" cy="4506.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="4751" y="4509.4448">body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="4519.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="4751" y="4522.2495">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="4531.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="4751" y="4535.0542">body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="4544.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="4751" y="4547.8589">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="4557.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="4751" y="4560.6636">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="4742" cy="4570.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="4751" y="4573.4683">body_set_applied_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4742" cy="4583.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="4751" y="4586.2729">body_set_applied_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4742" cy="4595.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="4751" y="4599.0776">body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void</text><ellipse cx="4742" cy="4608.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="4751" y="4611.8823">body_set_axis_velocity(RID p_body, const Vector3 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="4742" cy="4621.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="4751" y="4624.687">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="4634.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="4751" y="4637.4917">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="4647.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="4751" y="4650.2964">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="4742" cy="4659.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="490" x="4751" y="4663.1011">body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4672.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="4751" y="4675.9058">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="4742" cy="4685.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="416" x="4751" y="4688.7104">body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void</text><ellipse cx="4742" cy="4698.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="4751" y="4701.5151">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="4742" cy="4711.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="425" x="4751" y="4714.3198">body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void</text><ellipse cx="4742" cy="4723.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="4727.1245">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="4742" cy="4736.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="4751" y="4739.9292">body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="4749.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="4751" y="4752.7339">body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4762.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4751" y="4765.5386">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="4742" cy="4775.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="4751" y="4778.3433">body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="4742" cy="4787.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="4751" y="4791.1479">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4800.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="4751" y="4803.9526">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="4742" cy="4813.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="4751" y="4816.7573">body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="4742" cy="4826.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="4751" y="4829.562">body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void</text><ellipse cx="4742" cy="4839.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4751" y="4842.3667">body_test_motion(RID p_body, const Transform &amp; p_from, const Vector3 &amp; p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="4742" cy="4851.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1249" x="4751" y="4855.1714">body_test_ray_separation(RID p_body, const Transform &amp; p_transform, bool p_infinite_inertia, Vector3 &amp; r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="4742" cy="4864.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="4751" y="4867.9761">cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="4877.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="4751" y="4880.7808">cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="4890.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="4751" y="4893.5854">finish() = 0 : void</text><ellipse cx="4742" cy="4903.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="4751" y="4906.3901">flush_queries() = 0 : void</text><ellipse cx="4742" cy="4915.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="4751" y="4919.1948">free(RID p_rid) = 0 : void</text><ellipse cx="4742" cy="4928.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="610" x="4751" y="4931.9995">generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool</text><ellipse cx="4742" cy="4941.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="657" x="4751" y="4944.8042">generic_6dof_joint_get_param(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float</text><ellipse cx="4742" cy="4954.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="696" x="4751" y="4957.6089">generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4967.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="736" x="4751" y="4970.4136">generic_6dof_joint_set_param(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="4980.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4751" y="4983.2183">get_category_static() : String</text><ellipse cx="4742" cy="4992.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4751" y="4996.0229">get_class() const : String</text><ellipse cx="4742" cy="5005.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4751" y="5008.8276">get_class_ptr_static() : void *</text><ellipse cx="4742" cy="5018.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4751" y="5021.6323">get_class_static() : String</text><ellipse cx="4742" cy="5031.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4751" y="5034.437">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4742" cy="5044.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4751" y="5047.2417">get_parent_class_static() : String</text><ellipse cx="4742" cy="5056.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="4751" y="5060.0464">get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="4742" cy="5069.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="4751" y="5072.8511">get_singleton() : PhysicsServer *</text><ellipse cx="4742" cy="5082.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4751" y="5085.6558">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4742" cy="5095.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="4751" y="5098.4604">hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool</text><ellipse cx="4742" cy="5108.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="4751" y="5111.2651">hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5120.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="4751" y="5124.0698">hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void</text><ellipse cx="4742" cy="5133.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="5136.8745">hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5146.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4751" y="5149.6792">inherits_static() : String</text><ellipse cx="4742" cy="5159.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="4751" y="5162.4839">init() = 0 : void</text><ellipse cx="4742" cy="5172.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4751" y="5175.2886">initialize_class() : void</text><ellipse cx="4742" cy="5184.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4751" y="5188.0933">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4742" cy="5197.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4751" y="5200.8979">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4742" cy="5210.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="4751" y="5213.7026">is_flushing_queries() const = 0 : bool</text><ellipse cx="4742" cy="5223.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="780" x="4751" y="5226.5073">joint_create_cone_twist(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="5236.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="794" x="4751" y="5239.312">joint_create_generic_6dof(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="5248.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="682" x="4751" y="5252.1167">joint_create_hinge(RID p_body_A, const Transform &amp; p_hinge_A, RID p_body_B, const Transform &amp; p_hinge_B) = 0 : RID</text><ellipse cx="4742" cy="5261.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="995" x="4751" y="5264.9214">joint_create_hinge_simple(RID p_body_A, const Vector3 &amp; p_pivot_A, const Vector3 &amp; p_axis_A, RID p_body_B, const Vector3 &amp; p_pivot_B, const Vector3 &amp; p_axis_B) = 0 : RID</text><ellipse cx="4742" cy="5274.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="628" x="4751" y="5277.7261">joint_create_pin(RID p_body_A, const Vector3 &amp; p_local_A, RID p_body_B, const Vector3 &amp; p_local_B) = 0 : RID</text><ellipse cx="4742" cy="5287.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="752" x="4751" y="5290.5308">joint_create_slider(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="5300.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="4751" y="5303.3354">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="4742" cy="5312.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="288" x="4751" y="5316.1401">joint_get_solver_priority(RID p_joint) const = 0 : int</text><ellipse cx="4742" cy="5325.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="4751" y="5328.9448">joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType</text><ellipse cx="4742" cy="5338.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="4751" y="5341.7495">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="4742" cy="5351.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="4751" y="5354.5542">joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void</text><ellipse cx="4742" cy="5364.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="4751" y="5367.3589">pin_joint_get_local_a(RID p_joint) const = 0 : Vector3</text><ellipse cx="4742" cy="5376.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="4751" y="5380.1636">pin_joint_get_local_b(RID p_joint) const = 0 : Vector3</text><ellipse cx="4742" cy="5389.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="4751" y="5392.9683">pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5402.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="4751" y="5405.7729">pin_joint_set_local_a(RID p_joint, const Vector3 &amp; p_A) = 0 : void</text><ellipse cx="4742" cy="5415.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="4751" y="5418.5776">pin_joint_set_local_b(RID p_joint, const Vector3 &amp; p_B) = 0 : void</text><ellipse cx="4742" cy="5428.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="4751" y="5431.3823">pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5440.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="4751" y="5444.187">set_active(bool p_active) = 0 : void</text><ellipse cx="4742" cy="5453.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="4751" y="5456.9917">shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID</text><ellipse cx="4742" cy="5466.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="4751" y="5469.7964">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="4742" cy="5479.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="4751" y="5482.6011">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="4742" cy="5492.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="4751" y="5495.4058">shape_get_margin(RID p_shape) const = 0 : real_t</text><ellipse cx="4742" cy="5505" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="4751" y="5508.2104">shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType</text><ellipse cx="4742" cy="5517.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="4751" y="5521.0151">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="4742" cy="5530.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4751" y="5533.8198">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="4742" cy="5543.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="4751" y="5546.6245">shape_set_margin(RID p_shape, real_t p_margin) = 0 : void</text><ellipse cx="4742" cy="5556.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="4751" y="5559.4292">slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5569.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="5572.2339">slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5581.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="411" x="4751" y="5585.0386">soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5594.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="4751" y="5597.8433">soft_body_create(bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="4742" cy="5607.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4751" y="5610.6479">soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5620.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="4751" y="5623.4526">soft_body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="4742" cy="5633.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="4751" y="5636.2573">soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="5645.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="4751" y="5649.062">soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="5658.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="4751" y="5661.8667">soft_body_get_damping_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5671.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="4751" y="5674.6714">soft_body_get_drag_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5684.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="4751" y="5687.4761">soft_body_get_linear_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5697.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="4751" y="5700.2808">soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3</text><ellipse cx="4742" cy="5709.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="4751" y="5713.0854">soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3</text><ellipse cx="4742" cy="5722.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="4751" y="5725.8901">soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5735.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="4751" y="5738.6948">soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5748.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="4751" y="5751.4995">soft_body_get_simulation_precision(RID p_body) = 0 : int</text><ellipse cx="4742" cy="5761.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="279" x="4751" y="5764.3042">soft_body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="4742" cy="5773.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="4751" y="5777.1089">soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="4742" cy="5786.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="4751" y="5789.9136">soft_body_get_total_mass(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5799.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="4751" y="5802.7183">soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3</text><ellipse cx="4742" cy="5812.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="4751" y="5815.5229">soft_body_get_volume_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5825.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="4751" y="5828.3276">soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool</text><ellipse cx="4742" cy="5837.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="4751" y="5841.1323">soft_body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="5850.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="4751" y="5853.937">soft_body_move_point(RID p_body, int p_point_index, const Vector3 &amp; p_global_position) = 0 : void</text><ellipse cx="4742" cy="5863.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="414" x="4751" y="5866.7417">soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void</text><ellipse cx="4742" cy="5876.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="340" x="4751" y="5879.5464">soft_body_remove_all_pinned_points(RID p_body) = 0 : void</text><ellipse cx="4742" cy="5889.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="4751" y="5892.3511">soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5901.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="4751" y="5905.1558">soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="5914.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="4751" y="5917.9604">soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="5927.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4751" y="5930.7651">soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="5940.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="499" x="4751" y="5943.5698">soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void</text><ellipse cx="4742" cy="5953.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="4751" y="5956.3745">soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void</text><ellipse cx="4742" cy="5965.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="4751" y="5969.1792">soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="5978.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="4751" y="5981.9839">soft_body_set_mesh(RID p_body, const REF &amp; p_mesh) = 0 : void</text><ellipse cx="4742" cy="5991.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="4751" y="5994.7886">soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void</text><ellipse cx="4742" cy="6004.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="4751" y="6007.5933">soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void</text><ellipse cx="4742" cy="6017.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="4751" y="6020.3979">soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="6029.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="4751" y="6033.2026">soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void</text><ellipse cx="4742" cy="6042.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4751" y="6046.0073">soft_body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="4742" cy="6055.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="4751" y="6058.812">soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="4742" cy="6068.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="4751" y="6071.6167">soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void</text><ellipse cx="4742" cy="6081.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="4751" y="6084.4214">soft_body_set_transform(RID p_body, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="6094.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="4751" y="6097.2261">soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="6106.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="673" x="4751" y="6110.0308">soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void</text><ellipse cx="4742" cy="6119.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="4751" y="6122.8354">space_create() = 0 : RID</text><ellipse cx="4742" cy="6132.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="4751" y="6135.6401">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="4742" cy="6145.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="4751" y="6148.4448">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector3&gt;</text><ellipse cx="4742" cy="6158.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="6161.2495">space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *</text><ellipse cx="4742" cy="6170.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="523" x="4751" y="6174.0542">space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="4742" cy="6183.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="4751" y="6186.8589">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="4742" cy="6196.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="4751" y="6199.6636">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="4742" cy="6209.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="4751" y="6212.4683">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="4742" cy="6222.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="4751" y="6225.2729">space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="4742" cy="6234.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="4751" y="6238.0776">step(float p_step) = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4732" x2="6005" y1="6244.6719" y2="6244.6719"/></a><!--MD5=[15ab565944242ceeac87f602c1eae9a8]
class C_0002302096389852429221--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" target="_top" title="Physics2DDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" xlink:show="new" xlink:title="Physics2DDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="645.0156" id="C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.5;" width="475" x="6141" y="4647.4531"/><ellipse cx="6292.75" cy="4663.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6292.8594,4658.7969 L6291.7031,4663.875 L6294.0313,4663.875 L6292.8594,4658.7969 Z M6291.375,4656.5625 L6294.3594,4656.5625 L6297.7188,4668.9531 L6295.2656,4668.9531 L6294.5,4665.8906 L6291.2188,4665.8906 L6290.4688,4668.9531 L6288.0313,4668.9531 L6291.375,4656.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="6313.25" y="4667.6074">Physics2DDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6142" x2="6615" y1="4679.4531" y2="4679.4531"/><ellipse cx="6152" cy="4690.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="6161" y="4693.6636">Physics2DDirectBodyState() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="6142" x2="6615" y1="4700.2578" y2="4700.2578"/><ellipse cx="6152" cy="4711.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6161" y="4714.4683">_get_class_namev() const : const StringName *</text><ellipse cx="6152" cy="4724.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="6161" y="4727.2729">add_central_force(const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6152" cy="4736.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="6161" y="4740.0776">add_force(const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6152" cy="4749.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="6161" y="4752.8823">add_torque(real_t p_torque) = 0 : void</text><ellipse cx="6152" cy="4762.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6161" y="4765.687">apply_central_impulse(const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6152" cy="4775.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="6161" y="4778.4917">apply_impulse(const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6152" cy="4788.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="6161" y="4791.2964">apply_torque_impulse(real_t p_torque) = 0 : void</text><ellipse cx="6152" cy="4800.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="227" x="6161" y="4804.1011">get_angular_velocity() const = 0 : real_t</text><ellipse cx="6152" cy="4813.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="6161" y="4816.9058">get_category_static() : String</text><ellipse cx="6152" cy="4826.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="6161" y="4829.7104">get_class() const : String</text><ellipse cx="6152" cy="4839.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="6161" y="4842.5151">get_class_ptr_static() : void *</text><ellipse cx="6152" cy="4852.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="6161" y="4855.3198">get_class_static() : String</text><ellipse cx="6152" cy="4864.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="6161" y="4868.1245">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="6152" cy="4877.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="6161" y="4880.9292">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="6152" cy="4890.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="6161" y="4893.7339">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="6152" cy="4903.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="6161" y="4906.5386">get_contact_collider_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="4916.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="6161" y="4919.3433">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="6152" cy="4928.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="6161" y="4932.1479">get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant</text><ellipse cx="6152" cy="4941.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="6161" y="4944.9526">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="4954.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="6161" y="4957.7573">get_contact_count() const = 0 : int</text><ellipse cx="6152" cy="4967.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="6161" y="4970.562">get_contact_local_normal(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="4980.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6161" y="4983.3667">get_contact_local_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="4992.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="6161" y="4996.1714">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="6152" cy="5005.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="6161" y="5008.9761">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="6152" cy="5018.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="6161" y="5021.7808">get_inverse_inertia() const = 0 : real_t</text><ellipse cx="6152" cy="5031.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="6161" y="5034.5854">get_inverse_mass() const = 0 : float</text><ellipse cx="6152" cy="5044.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="6161" y="5047.3901">get_linear_velocity() const = 0 : Vector2</text><ellipse cx="6152" cy="5056.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="6161" y="5060.1948">get_parent_class_static() : String</text><ellipse cx="6152" cy="5069.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="6161" y="5072.9995">get_space_state() = 0 : Physics2DDirectSpaceState *</text><ellipse cx="6152" cy="5082.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="6161" y="5085.8042">get_step() const = 0 : real_t</text><ellipse cx="6152" cy="5095.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="6161" y="5098.6089">get_total_angular_damp() const = 0 : float</text><ellipse cx="6152" cy="5108.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="6161" y="5111.4136">get_total_gravity() const = 0 : Vector2</text><ellipse cx="6152" cy="5121.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="6161" y="5124.2183">get_total_linear_damp() const = 0 : float</text><ellipse cx="6152" cy="5133.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="6161" y="5137.0229">get_transform() const = 0 : Transform2D</text><ellipse cx="6152" cy="5146.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="6161" y="5149.8276">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="6152" cy="5159.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="6161" y="5162.6323">inherits_static() : String</text><ellipse cx="6152" cy="5172.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="6161" y="5175.437">initialize_class() : void</text><ellipse cx="6152" cy="5185.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6161" y="5188.2417">integrate_forces() : void</text><ellipse cx="6152" cy="5197.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="6161" y="5201.0464">is_class(const String &amp; p_class) const : bool</text><ellipse cx="6152" cy="5210.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="6161" y="5213.8511">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="6152" cy="5223.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="6161" y="5226.6558">is_sleeping() const = 0 : bool</text><ellipse cx="6152" cy="5236.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="6161" y="5239.4604">set_angular_velocity(real_t p_velocity) = 0 : void</text><ellipse cx="6152" cy="5249.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="6161" y="5252.2651">set_linear_velocity(const Vector2 &amp; p_velocity) = 0 : void</text><ellipse cx="6152" cy="5261.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="6161" y="5265.0698">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="6152" cy="5274.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="6161" y="5277.8745">set_transform(const Transform2D &amp; p_transform) = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6142" x2="6615" y1="5284.4688" y2="5284.4688"/></a><!--MD5=[ca40d70d705a3e45bf51321044ec5376]
class C_0000236996062289735257--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" target="_top" title="Physics2DDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" xlink:show="new" xlink:title="Physics2DDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="312.0938" id="C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.5;" width="1992" x="4299.5" y="1684.4531"/><ellipse cx="5205.75" cy="1700.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5205.8594,1695.7969 L5204.7031,1700.875 L5207.0313,1700.875 L5205.8594,1695.7969 Z M5204.375,1693.5625 L5207.3594,1693.5625 L5210.7188,1705.9531 L5208.2656,1705.9531 L5207.5,1702.8906 L5204.2188,1702.8906 L5203.4688,1705.9531 L5201.0313,1705.9531 L5204.375,1693.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="171" x="5226.25" y="1704.6074">Physics2DDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4300.5" x2="6290.5" y1="1716.4531" y2="1716.4531"/><ellipse cx="4310.5" cy="1727.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="4319.5" y="1730.6636">Physics2DDirectSpaceState() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4300.5" x2="6290.5" y1="1737.2578" y2="1737.2578"/><ellipse cx="4310.5" cy="1748.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4319.5" y="1751.4683">_get_class_namev() const : const StringName *</text><ellipse cx="4310.5" cy="1761.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1829" x="4319.5" y="1764.2729">cast_motion(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1773.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1888" x="4319.5" y="1777.0776">collide_shape(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Vector2 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1786.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4319.5" y="1789.8823">get_category_static() : String</text><ellipse cx="4310.5" cy="1799.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4319.5" y="1802.687">get_class() const : String</text><ellipse cx="4310.5" cy="1812.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4319.5" y="1815.4917">get_class_ptr_static() : void *</text><ellipse cx="4310.5" cy="1825.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4319.5" y="1828.2964">get_class_static() : String</text><ellipse cx="4310.5" cy="1837.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4319.5" y="1841.1011">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4310.5" cy="1850.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4319.5" y="1853.9058">get_parent_class_static() : String</text><ellipse cx="4310.5" cy="1863.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4319.5" y="1866.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4310.5" cy="1876.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4319.5" y="1879.5151">inherits_static() : String</text><ellipse cx="4310.5" cy="1889.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4319.5" y="1892.3198">initialize_class() : void</text><ellipse cx="4310.5" cy="1901.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1703" x="4319.5" y="1905.1245">intersect_point(const Vector2 &amp; p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="4310.5" cy="1914.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1950" x="4319.5" y="1917.9292">intersect_point_on_canvas(const Vector2 &amp; p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="4310.5" cy="1927.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1563" x="4319.5" y="1930.7339">intersect_ray(const Vector2 &amp; p_from, const Vector2 &amp; p_to, Physics2DDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1940.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1966" x="4319.5" y="1943.5386">intersect_shape(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="4310.5" cy="1953.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4319.5" y="1956.3433">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4310.5" cy="1965.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4319.5" y="1969.1479">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4310.5" cy="1978.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1821" x="4319.5" y="1981.9526">rest_info(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4300.5" x2="6290.5" y1="1988.5469" y2="1988.5469"/></a><!--MD5=[9eb4616909927b8afaeaff475656c5e3]
class C_0001801355352189289676--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" target="_top" title="Physics2DDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" xlink:show="new" xlink:title="Physics2DDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="137.6328" id="C_0001801355352189289676" style="stroke: #A80036; stroke-width: 1.5;" width="274" x="7878.5" y="51.9531"/><ellipse cx="7893.5" cy="67.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7896.4688,73.5938 Q7895.8906,73.8906 7895.25,74.0313 Q7894.6094,74.1875 7893.9063,74.1875 Q7891.4063,74.1875 7890.0781,72.5469 Q7888.7656,70.8906 7888.7656,67.7656 Q7888.7656,64.6406 7890.0781,62.9844 Q7891.4063,61.3281 7893.9063,61.3281 Q7894.6094,61.3281 7895.25,61.4844 Q7895.9063,61.6406 7896.4688,61.9375 L7896.4688,64.6563 Q7895.8438,64.0781 7895.25,63.8125 Q7894.6563,63.5313 7894.0313,63.5313 Q7892.6875,63.5313 7892,64.6094 Q7891.3125,65.6719 7891.3125,67.7656 Q7891.3125,69.8594 7892,70.9375 Q7892.6875,72 7894.0313,72 Q7894.6563,72 7895.25,71.7344 Q7895.8438,71.4531 7896.4688,70.875 L7896.4688,73.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="242" x="7907.5" y="72.1074">Physics2DDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7879.5" x2="8151.5" y1="83.9531" y2="83.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7879.5" x2="8151.5" y1="91.9531" y2="91.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="97.9531"/><ellipse cx="7889.5" cy="102.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="7898.5" y="106.1636">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="110.7578"/><ellipse cx="7889.5" cy="115.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="7898.5" y="118.9683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="123.5625"/><ellipse cx="7889.5" cy="128.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="7898.5" y="131.7729">metadata : Variant</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="136.3672"/><ellipse cx="7889.5" cy="141.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7898.5" y="144.5776">normal : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="149.1719"/><ellipse cx="7889.5" cy="154.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="7898.5" y="157.3823">position : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="161.9766"/><ellipse cx="7889.5" cy="166.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="7898.5" y="170.187">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="174.7813"/><ellipse cx="7889.5" cy="179.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="7898.5" y="182.9917">shape : int</text></a><!--MD5=[833071aa6dd5b089efecfc256c21fee2]
class C_0001771770302499309898--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" target="_top" title="Physics2DDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" xlink:show="new" xlink:title="Physics2DDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="112.0234" id="C_0001771770302499309898" style="stroke: #A80036; stroke-width: 1.5;" width="292" x="11379.5" y="64.9531"/><ellipse cx="11394.5" cy="80.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11397.4688,86.5938 Q11396.8906,86.8906 11396.25,87.0313 Q11395.6094,87.1875 11394.9063,87.1875 Q11392.4063,87.1875 11391.0781,85.5469 Q11389.7656,83.8906 11389.7656,80.7656 Q11389.7656,77.6406 11391.0781,75.9844 Q11392.4063,74.3281 11394.9063,74.3281 Q11395.6094,74.3281 11396.25,74.4844 Q11396.9063,74.6406 11397.4688,74.9375 L11397.4688,77.6563 Q11396.8438,77.0781 11396.25,76.8125 Q11395.6563,76.5313 11395.0313,76.5313 Q11393.6875,76.5313 11393,77.6094 Q11392.3125,78.6719 11392.3125,80.7656 Q11392.3125,82.8594 11393,83.9375 Q11393.6875,85 11395.0313,85 Q11395.6563,85 11396.25,84.7344 Q11396.8438,84.4531 11397.4688,83.875 L11397.4688,86.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="260" x="11408.5" y="85.1074">Physics2DDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11380.5" x2="11670.5" y1="96.9531" y2="96.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="11380.5" x2="11670.5" y1="104.9531" y2="104.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="110.9531"/><ellipse cx="11390.5" cy="115.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="11399.5" y="119.1636">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="123.7578"/><ellipse cx="11390.5" cy="128.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="11399.5" y="131.9683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="136.5625"/><ellipse cx="11390.5" cy="141.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="11399.5" y="144.7729">metadata : Variant</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="149.3672"/><ellipse cx="11390.5" cy="154.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="11399.5" y="157.5776">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="162.1719"/><ellipse cx="11390.5" cy="167.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="11399.5" y="170.3823">shape : int</text></a><!--MD5=[75170794dfa38b97f308a928ae46e341]
class C_0001561529841391244418--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" target="_top" title="Physics2DServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" xlink:show="new" xlink:title="Physics2DServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="1912.6797" id="C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.5;" width="1408" x="6722.5" y="4013.4531"/><ellipse cx="7371.75" cy="4029.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7371.8594,4024.7969 L7370.7031,4029.875 L7373.0313,4029.875 L7371.8594,4024.7969 Z M7370.375,4022.5625 L7373.3594,4022.5625 L7376.7188,4034.9531 L7374.2656,4034.9531 L7373.5,4031.8906 L7370.2188,4031.8906 L7369.4688,4034.9531 L7367.0313,4034.9531 L7370.375,4022.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="7392.25" y="4033.6074">Physics2DServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6723.5" x2="8129.5" y1="4045.4531" y2="4045.4531"/><ellipse cx="6733.5" cy="4056.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="6742.5" y="4059.6636">Physics2DServer() : void</text><ellipse cx="6733.5" cy="4069.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="6742.5" y="4072.4683">~Physics2DServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="6723.5" x2="8129.5" y1="4079.0625" y2="4079.0625"/><ellipse cx="6733.5" cy="4090.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6742.5" y="4093.2729">_get_class_namev() const : const StringName *</text><ellipse cx="6733.5" cy="4102.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="742" x="6742.5" y="4106.0776">area_add_shape(RID p_area, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="6733.5" cy="4115.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="6742.5" y="4118.8823">area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="6733.5" cy="4128.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="6742.5" y="4131.687">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="6733.5" cy="4141.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="6742.5" y="4144.4917">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="6733.5" cy="4154.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="6742.5" y="4157.2964">area_create() = 0 : RID</text><ellipse cx="6733.5" cy="4166.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="6742.5" y="4170.1011">area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="6733.5" cy="4179.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6742.5" y="4182.9058">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="6733.5" cy="4192.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="6742.5" y="4195.7104">area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="6733.5" cy="4205.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="6742.5" y="4208.5151">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="6733.5" cy="4218.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="6742.5" y="4221.3198">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="6733.5" cy="4230.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="6742.5" y="4234.1245">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="4243.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="6742.5" y="4246.9292">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="6733.5" cy="4256.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="6742.5" y="4259.7339">area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode</text><ellipse cx="6733.5" cy="4269.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="4272.5386">area_get_transform(RID p_area) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="4282.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="6742.5" y="4285.3433">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="6733.5" cy="4294.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="4298.1479">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="6733.5" cy="4307.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6742.5" y="4310.9526">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="6733.5" cy="4320.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="6742.5" y="4323.7573">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="6733.5" cy="4333.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="6742.5" y="4336.562">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="6733.5" cy="4346.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="6742.5" y="4349.3667">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="6733.5" cy="4358.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="618" x="6742.5" y="4362.1714">area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="6733.5" cy="4371.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="4374.9761">area_set_pickable(RID p_area, bool p_pickable) = 0 : void</text><ellipse cx="6733.5" cy="4384.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="6742.5" y="4387.7808">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="6733.5" cy="4397.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="6742.5" y="4400.5854">area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="6733.5" cy="4410.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="6742.5" y="4413.3901">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="4422.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="6742.5" y="4426.1948">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="6733.5" cy="4435.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="4438.9995">area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="4448.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="6742.5" y="4451.8042">area_set_transform(RID p_area, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="4461.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="6742.5" y="4464.6089">body_add_central_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="4474.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="6742.5" y="4477.4136">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="6733.5" cy="4487.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="515" x="6742.5" y="4490.2183">body_add_force(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="4499.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="746" x="6742.5" y="4503.0229">body_add_shape(RID p_body, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="6733.5" cy="4512.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="6742.5" y="4515.8276">body_add_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="4525.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="6742.5" y="4528.6323">body_apply_central_impulse(RID p_body, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6733.5" cy="4538.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="555" x="6742.5" y="4541.437">body_apply_impulse(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6733.5" cy="4551.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="6742.5" y="4554.2417">body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="4563.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="6742.5" y="4567.0464">body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="6733.5" cy="4576.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="4579.8511">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="6733.5" cy="4589.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="6742.5" y="4592.6558">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="6733.5" cy="4602.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1138" x="6742.5" y="4605.4604">body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="6733.5" cy="4615.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="133" x="6742.5" y="4618.2651">body_create() = 0 : RID</text><ellipse cx="6733.5" cy="4627.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="6742.5" y="4631.0698">body_get_applied_force(RID p_body) const = 0 : Vector2</text><ellipse cx="6733.5" cy="4640.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="6742.5" y="4643.8745">body_get_applied_torque(RID p_body) const = 0 : float</text><ellipse cx="6733.5" cy="4653.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="6742.5" y="4656.6792">body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="4666.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="6742.5" y="4669.4839">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="6733.5" cy="4679.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="6742.5" y="4682.2886">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="4691.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="4695.0933">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="4704.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="6742.5" y="4707.8979">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="6733.5" cy="4717.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="6742.5" y="4720.7026">body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode</text><ellipse cx="6733.5" cy="4730.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="4733.5073">body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *</text><ellipse cx="6733.5" cy="4743.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="6742.5" y="4746.312">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="6733.5" cy="4755.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="6742.5" y="4759.1167">body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode</text><ellipse cx="6733.5" cy="4768.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="6742.5" y="4771.9214">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="4781.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="516" x="6742.5" y="4784.7261">body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="6733.5" cy="4794.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="6742.5" y="4797.5308">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="6733.5" cy="4807.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="6742.5" y="4810.3354">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="6733.5" cy="4819.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="6742.5" y="4823.1401">body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant</text><ellipse cx="6733.5" cy="4832.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="6742.5" y="4835.9448">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="4845.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="6742.5" y="4848.7495">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="6733.5" cy="4858.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="6742.5" y="4861.5542">body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="6733.5" cy="4871.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="6742.5" y="4874.3589">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="6733.5" cy="4883.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="6742.5" y="4887.1636">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="6733.5" cy="4896.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6742.5" y="4899.9683">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="6733.5" cy="4909.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="6742.5" y="4912.7729">body_set_applied_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="4922.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="6742.5" y="4925.5776">body_set_applied_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="4935.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="6742.5" y="4938.3823">body_set_axis_velocity(RID p_body, const Vector2 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="6733.5" cy="4947.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="6742.5" y="4951.187">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="6733.5" cy="4960.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="6742.5" y="4963.9917">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="6733.5" cy="4973.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="6742.5" y="4976.7964">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="6733.5" cy="4986.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="4989.6011">body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="4999.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="6742.5" y="5002.4058">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="6733.5" cy="5012" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="6742.5" y="5015.2104">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="6733.5" cy="5024.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="6742.5" y="5028.0151">body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="5037.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="5040.8198">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="6733.5" cy="5050.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="561" x="6742.5" y="5053.6245">body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="6733.5" cy="5063.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="6742.5" y="5066.4292">body_set_pickable(RID p_body, bool p_pickable) = 0 : void</text><ellipse cx="6733.5" cy="5076.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="6742.5" y="5079.2339">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="6733.5" cy="5088.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="6742.5" y="5092.0386">body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void</text><ellipse cx="6733.5" cy="5101.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="6742.5" y="5104.8433">body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="6733.5" cy="5114.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="6742.5" y="5117.6479">body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant &amp; p_metadata) = 0 : void</text><ellipse cx="6733.5" cy="5127.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="6742.5" y="5130.4526">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="5140.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="6742.5" y="5143.2573">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="6733.5" cy="5152.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="6742.5" y="5156.062">body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="6733.5" cy="5165.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1344" x="6742.5" y="5168.8667">body_test_motion(RID p_body, const Transform2D &amp; p_from, const Vector2 &amp; p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="6733.5" cy="5178.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1279" x="6742.5" y="5181.6714">body_test_ray_separation(RID p_body, const Transform2D &amp; p_transform, bool p_infinite_inertia, Vector2 &amp; r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="6733.5" cy="5191.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="6742.5" y="5194.4761">capsule_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5204.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="6742.5" y="5207.2808">circle_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5216.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="243" x="6742.5" y="5220.0854">concave_polygon_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5229.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="237" x="6742.5" y="5232.8901">convex_polygon_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5242.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="777" x="6742.5" y="5245.6948">damped_spring_joint_create(const Vector2 &amp; p_anchor_a, const Vector2 &amp; p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="6733.5" cy="5255.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="6742.5" y="5258.4995">damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5268.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="678" x="6742.5" y="5271.3042">damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5280.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="121" x="6742.5" y="5284.1089">end_sync() = 0 : void</text><ellipse cx="6733.5" cy="5293.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="6742.5" y="5296.9136">finish() = 0 : void</text><ellipse cx="6733.5" cy="5306.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="6742.5" y="5309.7183">flush_queries() = 0 : void</text><ellipse cx="6733.5" cy="5319.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="6742.5" y="5322.5229">free(RID p_rid) = 0 : void</text><ellipse cx="6733.5" cy="5332.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="6742.5" y="5335.3276">get_category_static() : String</text><ellipse cx="6733.5" cy="5344.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="6742.5" y="5348.1323">get_class() const : String</text><ellipse cx="6733.5" cy="5357.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="6742.5" y="5360.937">get_class_ptr_static() : void *</text><ellipse cx="6733.5" cy="5370.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="6742.5" y="5373.7417">get_class_static() : String</text><ellipse cx="6733.5" cy="5383.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="6742.5" y="5386.5464">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="6733.5" cy="5396.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="6742.5" y="5399.3511">get_parent_class_static() : String</text><ellipse cx="6733.5" cy="5408.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="359" x="6742.5" y="5412.1558">get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="6733.5" cy="5421.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="202" x="6742.5" y="5424.9604">get_singleton() : Physics2DServer *</text><ellipse cx="6733.5" cy="5434.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="6742.5" y="5437.7651">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="6733.5" cy="5447.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="857" x="6742.5" y="5450.5698">groove_joint_create(const Vector2 &amp; p_a_groove1, const Vector2 &amp; p_a_groove2, const Vector2 &amp; p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID</text><ellipse cx="6733.5" cy="5460.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="6742.5" y="5463.3745">inherits_static() : String</text><ellipse cx="6733.5" cy="5472.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="6742.5" y="5476.1792">init() = 0 : void</text><ellipse cx="6733.5" cy="5485.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="6742.5" y="5488.9839">initialize_class() : void</text><ellipse cx="6733.5" cy="5498.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="6742.5" y="5501.7886">is_class(const String &amp; p_class) const : bool</text><ellipse cx="6733.5" cy="5511.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="6742.5" y="5514.5933">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="6733.5" cy="5524.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="6742.5" y="5527.3979">is_flushing_queries() const = 0 : bool</text><ellipse cx="6733.5" cy="5536.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="6742.5" y="5540.2026">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="6733.5" cy="5549.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="6742.5" y="5553.0073">joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5562.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="6742.5" y="5565.812">joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType</text><ellipse cx="6733.5" cy="5575.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="6742.5" y="5578.6167">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="6733.5" cy="5588.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="6742.5" y="5591.4214">joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5601.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="6742.5" y="5604.2261">line_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5613.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="6742.5" y="5617.0308">pin_joint_create(const Vector2 &amp; p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="6733.5" cy="5626.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="6742.5" y="5629.8354">pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5639.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="572" x="6742.5" y="5642.6401">pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5652.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="6742.5" y="5655.4448">ray_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5665.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="198" x="6742.5" y="5668.2495">rectangle_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5677.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="6742.5" y="5681.0542">segment_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="5690.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="6742.5" y="5693.8589">set_active(bool p_active) = 0 : void</text><ellipse cx="6733.5" cy="5703.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1382" x="6742.5" y="5706.6636">shape_collide(RID p_shape_A, const Transform2D &amp; p_xform_A, const Vector2 &amp; p_motion_A, RID p_shape_B, const Transform2D &amp; p_xform_B, const Vector2 &amp; p_motion_B, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="6733.5" cy="5716.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="6742.5" y="5719.4683">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="6733.5" cy="5729.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="6742.5" y="5732.2729">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="6733.5" cy="5741.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="6742.5" y="5745.0776">shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType</text><ellipse cx="6733.5" cy="5754.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="6742.5" y="5757.8823">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="6733.5" cy="5767.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6742.5" y="5770.687">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="6733.5" cy="5780.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="6742.5" y="5783.4917">space_create() = 0 : RID</text><ellipse cx="6733.5" cy="5793.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="6742.5" y="5796.2964">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="6733.5" cy="5805.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="6742.5" y="5809.1011">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector2&gt;</text><ellipse cx="6733.5" cy="5818.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="6742.5" y="5821.9058">space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *</text><ellipse cx="6733.5" cy="5831.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="6742.5" y="5834.7104">space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5844.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="6742.5" y="5847.5151">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="6733.5" cy="5857.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="6742.5" y="5860.3198">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="6733.5" cy="5869.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="6742.5" y="5873.1245">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="6733.5" cy="5882.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="6742.5" y="5885.9292">space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5895.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="6742.5" y="5898.7339">step(float p_step) = 0 : void</text><ellipse cx="6733.5" cy="5908.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="6742.5" y="5911.5386">sync() = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6723.5" x2="8129.5" y1="5918.1328" y2="5918.1328"/></a><!--MD5=[3d4aa6b0ee5484ffc25bead94ef18955]
class C_0001485048025194488343--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" target="_top" title="TranslationServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" xlink:show="new" xlink:title="TranslationServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="478.5547" id="C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.5;" width="412" x="8530.5" y="4730.4531"/><ellipse cx="8677.25" cy="4746.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8680.2188,4752.0938 Q8679.6406,4752.3906 8679,4752.5313 Q8678.3594,4752.6875 8677.6563,4752.6875 Q8675.1563,4752.6875 8673.8281,4751.0469 Q8672.5156,4749.3906 8672.5156,4746.2656 Q8672.5156,4743.1406 8673.8281,4741.4844 Q8675.1563,4739.8281 8677.6563,4739.8281 Q8678.3594,4739.8281 8679,4739.9844 Q8679.6563,4740.1406 8680.2188,4740.4375 L8680.2188,4743.1563 Q8679.5938,4742.5781 8679,4742.3125 Q8678.4063,4742.0313 8677.7813,4742.0313 Q8676.4375,4742.0313 8675.75,4743.1094 Q8675.0625,4744.1719 8675.0625,4746.2656 Q8675.0625,4748.3594 8675.75,4749.4375 Q8676.4375,4750.5 8677.7813,4750.5 Q8678.4063,4750.5 8679,4750.2344 Q8679.5938,4749.9531 8680.2188,4749.375 L8680.2188,4752.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="8697.75" y="4750.6074">TranslationServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8531.5" x2="8941.5" y1="4762.4531" y2="4762.4531"/><ellipse cx="8541.5" cy="4773.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="8550.5" y="4776.6636">TranslationServer() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="8531.5" x2="8941.5" y1="4783.2578" y2="4783.2578"/><ellipse cx="8541.5" cy="4794.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="8550.5" y="4797.4683">_get_class_namev() const : const StringName *</text><ellipse cx="8541.5" cy="4807.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="8550.5" y="4810.2729">add_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="4819.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="8550.5" y="4823.0776">clear() : void</text><ellipse cx="8541.5" cy="4832.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="229" x="8550.5" y="4835.8823">get_all_locale_names() : Vector&lt;String&gt;</text><ellipse cx="8541.5" cy="4845.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="191" x="8550.5" y="4848.687">get_all_locales() : Vector&lt;String&gt;</text><ellipse cx="8541.5" cy="4858.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="8550.5" y="4861.4917">get_category_static() : String</text><ellipse cx="8541.5" cy="4871.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="8550.5" y="4874.2964">get_class() const : String</text><ellipse cx="8541.5" cy="4883.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="8550.5" y="4887.1011">get_class_ptr_static() : void *</text><ellipse cx="8541.5" cy="4896.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="8550.5" y="4899.9058">get_class_static() : String</text><ellipse cx="8541.5" cy="4909.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="8550.5" y="4912.7104">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="8541.5" cy="4922.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="8550.5" y="4925.5151">get_language_code(const String &amp; p_locale) : String</text><ellipse cx="8541.5" cy="4935.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="8550.5" y="4938.3198">get_loaded_locales() const : Array</text><ellipse cx="8541.5" cy="4947.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="8550.5" y="4951.1245">get_locale() const : String</text><ellipse cx="8541.5" cy="4960.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="8550.5" y="4963.9292">get_locale_name(const String &amp; p_locale) const : String</text><ellipse cx="8541.5" cy="4973.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="8550.5" y="4976.7339">get_parent_class_static() : String</text><ellipse cx="8541.5" cy="4986.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="8550.5" y="4989.5386">get_singleton() : TranslationServer *</text><ellipse cx="8541.5" cy="4999.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="8550.5" y="5002.3433">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="8541.5" cy="5011.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="8550.5" y="5015.1479">inherits_static() : String</text><ellipse cx="8541.5" cy="5024.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="8550.5" y="5027.9526">initialize_class() : void</text><ellipse cx="8541.5" cy="5037.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="8550.5" y="5040.7573">is_class(const String &amp; p_class) const : bool</text><ellipse cx="8541.5" cy="5050.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="8550.5" y="5053.562">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="8541.5" cy="5063.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="8550.5" y="5066.3667">is_enabled() const : bool</text><ellipse cx="8541.5" cy="5075.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="8550.5" y="5079.1714">is_locale_valid(const String &amp; p_locale) : bool</text><ellipse cx="8541.5" cy="5088.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="8550.5" y="5091.9761">load_translations() : void</text><ellipse cx="8541.5" cy="5101.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="8550.5" y="5104.7808">remove_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="5114.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="8550.5" y="5117.5854">set_enabled(bool p_enabled) : void</text><ellipse cx="8541.5" cy="5127.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="8550.5" y="5130.3901">set_locale(const String &amp; p_locale) : void</text><ellipse cx="8541.5" cy="5139.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="8550.5" y="5143.1948">set_tool_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="5152.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="8550.5" y="5155.9995">setup() : void</text><ellipse cx="8541.5" cy="5165.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="8550.5" y="5168.8042">standardize_locale(const String &amp; p_locale) : String</text><ellipse cx="8541.5" cy="5178.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="8550.5" y="5181.6089">tool_translate(const StringName &amp; p_message) const : StringName</text><ellipse cx="8541.5" cy="5191.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="8550.5" y="5194.4136">translate(const StringName &amp; p_message) const : StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8531.5" x2="8941.5" y1="5201.0078" y2="5201.0078"/></a><!--MD5=[6de3aa3d86b19b8e0f1ee230f1ebf3bf]
class C_0000314051240057057851--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" target="_top" title="InputMap" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" xlink:show="new" xlink:title="InputMap" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="452.9453" id="C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.5;" width="921" x="20679" y="4743.4531"/><ellipse cx="21106.25" cy="4759.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M21109.2188,4765.0938 Q21108.6406,4765.3906 21108,4765.5313 Q21107.3594,4765.6875 21106.6563,4765.6875 Q21104.1563,4765.6875 21102.8281,4764.0469 Q21101.5156,4762.3906 21101.5156,4759.2656 Q21101.5156,4756.1406 21102.8281,4754.4844 Q21104.1563,4752.8281 21106.6563,4752.8281 Q21107.3594,4752.8281 21108,4752.9844 Q21108.6563,4753.1406 21109.2188,4753.4375 L21109.2188,4756.1563 Q21108.5938,4755.5781 21108,4755.3125 Q21107.4063,4755.0313 21106.7813,4755.0313 Q21105.4375,4755.0313 21104.75,4756.1094 Q21104.0625,4757.1719 21104.0625,4759.2656 Q21104.0625,4761.3594 21104.75,4762.4375 Q21105.4375,4763.5 21106.7813,4763.5 Q21107.4063,4763.5 21108,4763.2344 Q21108.5938,4762.9531 21109.2188,4762.375 L21109.2188,4765.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="21126.75" y="4763.6074">InputMap</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20680" x2="21599" y1="4775.4531" y2="4775.4531"/><ellipse cx="20690" cy="4786.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="20699" y="4789.6636">InputMap() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="20680" x2="21599" y1="4796.2578" y2="4796.2578"/><ellipse cx="20690" cy="4807.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="20699" y="4810.4683">_get_class_namev() const : const StringName *</text><ellipse cx="20690" cy="4820.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="20699" y="4823.2729">action_add_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="20690" cy="4832.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="20699" y="4836.0776">action_erase_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="20690" cy="4845.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="20699" y="4848.8823">action_erase_events(const StringName &amp; p_action) : void</text><ellipse cx="20690" cy="4858.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="20699" y="4861.687">action_get_deadzone(const StringName &amp; p_action) : float</text><ellipse cx="20690" cy="4871.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="509" x="20699" y="4874.4917">action_has_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : bool</text><ellipse cx="20690" cy="4884.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="20699" y="4887.2964">action_set_deadzone(const StringName &amp; p_action, float p_deadzone) : void</text><ellipse cx="20690" cy="4896.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="20699" y="4900.1011">add_action(const StringName &amp; p_action, float p_deadzone = 0.5) : void</text><ellipse cx="20690" cy="4909.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="20699" y="4912.9058">erase_action(const StringName &amp; p_action) : void</text><ellipse cx="20690" cy="4922.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="895" x="20699" y="4925.7104">event_get_action_status(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool</text><ellipse cx="20690" cy="4935.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="533" x="20699" y="4938.5151">event_is_action(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action) const : bool</text><ellipse cx="20690" cy="4948.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="20699" y="4951.3198">get_action_list(const StringName &amp; p_action) : const List&lt;Ref&lt;InputEvent&gt;&gt; *</text><ellipse cx="20690" cy="4960.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="20699" y="4964.1245">get_action_map() const : const Map&lt;StringName,InputMap::Action&gt; &amp;</text><ellipse cx="20690" cy="4973.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="20699" y="4976.9292">get_actions() const : List&lt;StringName&gt;</text><ellipse cx="20690" cy="4986.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="20699" y="4989.7339">get_category_static() : String</text><ellipse cx="20690" cy="4999.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="20699" y="5002.5386">get_class() const : String</text><ellipse cx="20690" cy="5012.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="20699" y="5015.3433">get_class_ptr_static() : void *</text><ellipse cx="20690" cy="5024.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="20699" y="5028.1479">get_class_static() : String</text><ellipse cx="20690" cy="5037.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="20699" y="5040.9526">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="20690" cy="5050.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="20699" y="5053.7573">get_parent_class_static() : String</text><ellipse cx="20690" cy="5063.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="157" x="20699" y="5066.562">get_singleton() : InputMap *</text><ellipse cx="20690" cy="5076.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="20699" y="5079.3667">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="20690" cy="5088.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="20699" y="5092.1714">has_action(const StringName &amp; p_action) const : bool</text><ellipse cx="20690" cy="5101.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="20699" y="5104.9761">inherits_static() : String</text><ellipse cx="20690" cy="5114.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="20699" y="5117.7808">initialize_class() : void</text><ellipse cx="20690" cy="5127.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="20699" y="5130.5854">is_class(const String &amp; p_class) const : bool</text><ellipse cx="20690" cy="5140.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="20699" y="5143.3901">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="20690" cy="5152.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="20699" y="5156.1948">load_default() : void</text><ellipse cx="20690" cy="5165.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="20699" y="5168.9995">load_from_globals() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20680" x2="21599" y1="5175.5938" y2="5175.5938"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="20685" y="5181.5938"/><ellipse cx="20690" cy="5186.5938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="99" x="20699" y="5189.8042">ALL_DEVICES : int</text></a><!--MD5=[c256f191a1f4c63b2807fd5478edf736]
class C_0001197720528033242618--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" target="_top" title="_ResourceLoader" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" xlink:show="new" xlink:title="_ResourceLoader" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="337.7031" id="C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.5;" width="633" x="754" y="4800.9531"/><ellipse cx="1012.25" cy="4816.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1015.2188,4822.5938 Q1014.6406,4822.8906 1014,4823.0313 Q1013.3594,4823.1875 1012.6563,4823.1875 Q1010.1563,4823.1875 1008.8281,4821.5469 Q1007.5156,4819.8906 1007.5156,4816.7656 Q1007.5156,4813.6406 1008.8281,4811.9844 Q1010.1563,4810.3281 1012.6563,4810.3281 Q1013.3594,4810.3281 1014,4810.4844 Q1014.6563,4810.6406 1015.2188,4810.9375 L1015.2188,4813.6563 Q1014.5938,4813.0781 1014,4812.8125 Q1013.4063,4812.5313 1012.7813,4812.5313 Q1011.4375,4812.5313 1010.75,4813.6094 Q1010.0625,4814.6719 1010.0625,4816.7656 Q1010.0625,4818.8594 1010.75,4819.9375 Q1011.4375,4821 1012.7813,4821 Q1013.4063,4821 1014,4820.7344 Q1014.5938,4820.4531 1015.2188,4819.875 L1015.2188,4822.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="108" x="1032.75" y="4821.1074">_ResourceLoader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="755" x2="1386" y1="4832.9531" y2="4832.9531"/><ellipse cx="765" cy="4843.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="774" y="4847.1636">_ResourceLoader() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="755" x2="1386" y1="4853.7578" y2="4853.7578"/><ellipse cx="765" cy="4864.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="774" y="4867.9683">_get_class_namev() const : const StringName *</text><ellipse cx="765" cy="4877.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="774" y="4880.7729">exists(const String &amp; p_path, const String &amp; p_type_hint = "") : bool</text><ellipse cx="765" cy="4890.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="774" y="4893.5776">get_category_static() : String</text><ellipse cx="765" cy="4903.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="774" y="4906.3823">get_class() const : String</text><ellipse cx="765" cy="4915.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="774" y="4919.187">get_class_ptr_static() : void *</text><ellipse cx="765" cy="4928.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="774" y="4931.9917">get_class_static() : String</text><ellipse cx="765" cy="4941.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="774" y="4944.7964">get_dependencies(const String &amp; p_path) : PoolStringArray</text><ellipse cx="765" cy="4954.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="774" y="4957.6011">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="765" cy="4967.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="774" y="4970.4058">get_parent_class_static() : String</text><ellipse cx="765" cy="4980" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="774" y="4983.2104">get_recognized_extensions_for_type(const String &amp; p_type) : PoolVector&lt;String&gt;</text><ellipse cx="765" cy="4992.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="204" x="774" y="4996.0151">get_singleton() : _ResourceLoader *</text><ellipse cx="765" cy="5005.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="774" y="5008.8198">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="765" cy="5018.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="774" y="5021.6245">has(const String &amp; p_path) : bool</text><ellipse cx="765" cy="5031.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="774" y="5034.4292">has_cached(const String &amp; p_path) : bool</text><ellipse cx="765" cy="5044.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="774" y="5047.2339">inherits_static() : String</text><ellipse cx="765" cy="5056.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="774" y="5060.0386">initialize_class() : void</text><ellipse cx="765" cy="5069.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="774" y="5072.8433">is_class(const String &amp; p_class) const : bool</text><ellipse cx="765" cy="5082.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="774" y="5085.6479">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="765" cy="5095.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="774" y="5098.4526">load(const String &amp; p_path, const String &amp; p_type_hint = "", bool p_no_cache = false) : RES</text><ellipse cx="765" cy="5108.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="607" x="774" y="5111.2573">load_interactive(const String &amp; p_path, const String &amp; p_type_hint = "") : Ref&lt;ResourceInteractiveLoader&gt;</text><ellipse cx="765" cy="5120.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="774" y="5124.062">set_abort_on_missing_resources(bool p_abort) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="755" x2="1386" y1="5130.6563" y2="5130.6563"/></a><!--MD5=[8320b79068f24653412391a69e41cea5]
class C_0001130773750498288283--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" target="_top" title="_ResourceSaver" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" xlink:show="new" xlink:title="_ResourceSaver" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="260.875" id="C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.5;" width="590" x="9077.5" y="4839.4531"/><ellipse cx="9318.25" cy="4855.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9321.2188,4861.0938 Q9320.6406,4861.3906 9320,4861.5313 Q9319.3594,4861.6875 9318.6563,4861.6875 Q9316.1563,4861.6875 9314.8281,4860.0469 Q9313.5156,4858.3906 9313.5156,4855.2656 Q9313.5156,4852.1406 9314.8281,4850.4844 Q9316.1563,4848.8281 9318.6563,4848.8281 Q9319.3594,4848.8281 9320,4848.9844 Q9320.6563,4849.1406 9321.2188,4849.4375 L9321.2188,4852.1563 Q9320.5938,4851.5781 9320,4851.3125 Q9319.4063,4851.0313 9318.7813,4851.0313 Q9317.4375,4851.0313 9316.75,4852.1094 Q9316.0625,4853.1719 9316.0625,4855.2656 Q9316.0625,4857.3594 9316.75,4858.4375 Q9317.4375,4859.5 9318.7813,4859.5 Q9319.4063,4859.5 9320,4859.2344 Q9320.5938,4858.9531 9321.2188,4858.375 L9321.2188,4861.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="9338.75" y="4859.6074">_ResourceSaver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9078.5" x2="9666.5" y1="4871.4531" y2="4871.4531"/><ellipse cx="9088.5" cy="4882.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="9097.5" y="4885.6636">_ResourceSaver() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="9078.5" x2="9666.5" y1="4892.2578" y2="4892.2578"/><ellipse cx="9088.5" cy="4903.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9097.5" y="4906.4683">_get_class_namev() const : const StringName *</text><ellipse cx="9088.5" cy="4916.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="9097.5" y="4919.2729">get_category_static() : String</text><ellipse cx="9088.5" cy="4928.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9097.5" y="4932.0776">get_class() const : String</text><ellipse cx="9088.5" cy="4941.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="9097.5" y="4944.8823">get_class_ptr_static() : void *</text><ellipse cx="9088.5" cy="4954.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="9097.5" y="4957.687">get_class_static() : String</text><ellipse cx="9088.5" cy="4967.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="9097.5" y="4970.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="9088.5" cy="4980.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="9097.5" y="4983.2964">get_parent_class_static() : String</text><ellipse cx="9088.5" cy="4992.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="9097.5" y="4996.1011">get_recognized_extensions(const RES &amp; p_resource) : PoolVector&lt;String&gt;</text><ellipse cx="9088.5" cy="5005.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="9097.5" y="5008.9058">get_singleton() : _ResourceSaver *</text><ellipse cx="9088.5" cy="5018.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="9097.5" y="5021.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="9088.5" cy="5031.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="9097.5" y="5034.5151">inherits_static() : String</text><ellipse cx="9088.5" cy="5044.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="9097.5" y="5047.3198">initialize_class() : void</text><ellipse cx="9088.5" cy="5056.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9097.5" y="5060.1245">is_class(const String &amp; p_class) const : bool</text><ellipse cx="9088.5" cy="5069.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9097.5" y="5072.9292">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="9088.5" cy="5082.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="9097.5" y="5085.7339">save(const String &amp; p_path, const RES &amp; p_resource, _ResourceSaver::SaverFlags p_flags) : Error</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9078.5" x2="9666.5" y1="5092.3281" y2="5092.3281"/></a><!--MD5=[4791f32a7532edb6976f97ebd5eb02c0]
class C_0000790752023609648644--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" target="_top" title="_OS" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" xlink:show="new" xlink:title="_OS" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="2271.2109" id="C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.5;" width="908" x="9802.5" y="3834.4531"/><ellipse cx="10240.75" cy="3850.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M10243.7188,3856.0938 Q10243.1406,3856.3906 10242.5,3856.5313 Q10241.8594,3856.6875 10241.1563,3856.6875 Q10238.6563,3856.6875 10237.3281,3855.0469 Q10236.0156,3853.3906 10236.0156,3850.2656 Q10236.0156,3847.1406 10237.3281,3845.4844 Q10238.6563,3843.8281 10241.1563,3843.8281 Q10241.8594,3843.8281 10242.5,3843.9844 Q10243.1563,3844.1406 10243.7188,3844.4375 L10243.7188,3847.1563 Q10243.0938,3846.5781 10242.5,3846.3125 Q10241.9063,3846.0313 10241.2813,3846.0313 Q10239.9375,3846.0313 10239.25,3847.1094 Q10238.5625,3848.1719 10238.5625,3850.2656 Q10238.5625,3852.3594 10239.25,3853.4375 Q10239.9375,3854.5 10241.2813,3854.5 Q10241.9063,3854.5 10242.5,3854.2344 Q10243.0938,3853.9531 10243.7188,3853.375 L10243.7188,3856.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="10261.25" y="3854.6074">_OS</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9803.5" x2="10709.5" y1="3866.4531" y2="3866.4531"/><ellipse cx="9813.5" cy="3877.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="9822.5" y="3880.6636">_OS() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="9803.5" x2="10709.5" y1="3887.2578" y2="3887.2578"/><ellipse cx="9813.5" cy="3898.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9822.5" y="3901.4683">_get_class_namev() const : const StringName *</text><ellipse cx="9813.5" cy="3911.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="9822.5" y="3914.2729">alert(const String &amp; p_alert, const String &amp; p_title = "ALERT!") : void</text><ellipse cx="9813.5" cy="3923.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="9822.5" y="3927.0776">can_draw() const : bool</text><ellipse cx="9813.5" cy="3936.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="3939.8823">can_use_threads() const : bool</text><ellipse cx="9813.5" cy="3949.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="9822.5" y="3952.687">center_window() : void</text><ellipse cx="9813.5" cy="3962.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="9822.5" y="3965.4917">close_midi_inputs() : void</text><ellipse cx="9813.5" cy="3975.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="3978.2964">delay_msec(int p_msec) const : void</text><ellipse cx="9813.5" cy="3987.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="3991.1011">delay_usec(int p_usec) const : void</text><ellipse cx="9813.5" cy="4000.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="4003.9058">dump_memory_to_file(const String &amp; p_file) : void</text><ellipse cx="9813.5" cy="4013.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="9822.5" y="4016.7104">dump_resources_to_file(const String &amp; p_file) : void</text><ellipse cx="9813.5" cy="4026.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="882" x="9822.5" y="4029.5151">execute(const String &amp; p_path, const Vector&lt;String&gt; &amp; p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int</text><ellipse cx="9813.5" cy="4039.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="9822.5" y="4042.3198">find_scancode_from_string(const String &amp; p_code) const : int</text><ellipse cx="9813.5" cy="4051.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="9822.5" y="4055.1245">get_audio_driver_count() const : int</text><ellipse cx="9813.5" cy="4064.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="4067.9292">get_audio_driver_name(int p_driver) const : String</text><ellipse cx="9813.5" cy="4077.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9822.5" y="4080.7339">get_borderless_window() const : bool</text><ellipse cx="9813.5" cy="4090.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="9822.5" y="4093.5386">get_category_static() : String</text><ellipse cx="9813.5" cy="4103.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9822.5" y="4106.3433">get_class() const : String</text><ellipse cx="9813.5" cy="4115.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="9822.5" y="4119.1479">get_class_ptr_static() : void *</text><ellipse cx="9813.5" cy="4128.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="9822.5" y="4131.9526">get_class_static() : String</text><ellipse cx="9813.5" cy="4141.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="9822.5" y="4144.7573">get_clipboard() const : String</text><ellipse cx="9813.5" cy="4154.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="9822.5" y="4157.562">get_cmdline_args() : Vector&lt;String&gt;</text><ellipse cx="9813.5" cy="4167.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="4170.3667">get_connected_midi_inputs() : PoolStringArray</text><ellipse cx="9813.5" cy="4179.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="9822.5" y="4183.1714">get_current_screen() const : int</text><ellipse cx="9813.5" cy="4192.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="9822.5" y="4195.9761">get_current_tablet_driver() const : String</text><ellipse cx="9813.5" cy="4205.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="9822.5" y="4208.7808">get_current_video_driver() const : _OS::VideoDriver</text><ellipse cx="9813.5" cy="4218.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="4221.5854">get_date(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="4231.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="9822.5" y="4234.3901">get_datetime(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="4243.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="9822.5" y="4247.1948">get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary</text><ellipse cx="9813.5" cy="4256.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="9822.5" y="4259.9995">get_dynamic_memory_usage() const : uint64_t</text><ellipse cx="9813.5" cy="4269.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="9822.5" y="4272.8042">get_environment(const String &amp; p_var) const : String</text><ellipse cx="9813.5" cy="4282.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="4285.6089">get_executable_path() const : String</text><ellipse cx="9813.5" cy="4295.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="9822.5" y="4298.4136">get_exit_code() const : int</text><ellipse cx="9813.5" cy="4308.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="9822.5" y="4311.2183">get_fullscreen_mode_list(int p_screen = 0) const : Array</text><ellipse cx="9813.5" cy="4320.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="9822.5" y="4324.0229">get_granted_permissions() const : Vector&lt;String&gt;</text><ellipse cx="9813.5" cy="4333.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="9822.5" y="4336.8276">get_ime_selection() const : Point2</text><ellipse cx="9813.5" cy="4346.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="9822.5" y="4349.6323">get_ime_text() const : String</text><ellipse cx="9813.5" cy="4359.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="9822.5" y="4362.437">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="9813.5" cy="4372.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="9822.5" y="4375.2417">get_latin_keyboard_variant() const : String</text><ellipse cx="9813.5" cy="4384.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="9822.5" y="4388.0464">get_locale() const : String</text><ellipse cx="9813.5" cy="4397.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="9822.5" y="4400.8511">get_low_processor_usage_mode_sleep_usec() const : int</text><ellipse cx="9813.5" cy="4410.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4413.6558">get_max_window_size() const : Size2</text><ellipse cx="9813.5" cy="4423.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="9822.5" y="4426.4604">get_min_window_size() const : Size2</text><ellipse cx="9813.5" cy="4436.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="9822.5" y="4439.2651">get_model_name() const : String</text><ellipse cx="9813.5" cy="4448.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4452.0698">get_mouse_button_state() const : int</text><ellipse cx="9813.5" cy="4461.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="9822.5" y="4464.8745">get_mouse_position() const : Point2</text><ellipse cx="9813.5" cy="4474.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="9822.5" y="4477.6792">get_name() const : String</text><ellipse cx="9813.5" cy="4487.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="9822.5" y="4490.4839">get_native_handle(_OS::HandleType p_handle_type) : int64_t</text><ellipse cx="9813.5" cy="4500.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="9822.5" y="4503.2886">get_parent_class_static() : String</text><ellipse cx="9813.5" cy="4512.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="9822.5" y="4516.0933">get_power_percent_left() : int</text><ellipse cx="9813.5" cy="4525.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="9822.5" y="4528.8979">get_power_seconds_left() : int</text><ellipse cx="9813.5" cy="4538.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="9822.5" y="4541.7026">get_power_state() : _OS::PowerState</text><ellipse cx="9813.5" cy="4551.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="9822.5" y="4554.5073">get_process_id() const : int</text><ellipse cx="9813.5" cy="4564.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="4567.312">get_processor_count() const : int</text><ellipse cx="9813.5" cy="4576.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="4580.1167">get_real_window_size() const : Size2</text><ellipse cx="9813.5" cy="4589.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="9822.5" y="4592.9214">get_scancode_string(uint32_t p_code) const : String</text><ellipse cx="9813.5" cy="4602.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="9822.5" y="4605.7261">get_screen_count() const : int</text><ellipse cx="9813.5" cy="4615.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="9822.5" y="4618.5308">get_screen_dpi(int p_screen = -1) const : int</text><ellipse cx="9813.5" cy="4628.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4631.3354">get_screen_max_scale() const : float</text><ellipse cx="9813.5" cy="4640.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="9822.5" y="4644.1401">get_screen_orientation() const : _OS::ScreenOrientation</text><ellipse cx="9813.5" cy="4653.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="9822.5" y="4656.9448">get_screen_position(int p_screen = -1) const : Point2</text><ellipse cx="9813.5" cy="4666.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="9822.5" y="4669.7495">get_screen_scale(int p_screen = -1) const : float</text><ellipse cx="9813.5" cy="4679.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="9822.5" y="4682.5542">get_screen_size(int p_screen = -1) const : Size2</text><ellipse cx="9813.5" cy="4692.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="9822.5" y="4695.3589">get_singleton() : _OS *</text><ellipse cx="9813.5" cy="4704.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="9822.5" y="4708.1636">get_splash_tick_msec() const : uint32_t</text><ellipse cx="9813.5" cy="4717.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="9822.5" y="4720.9683">get_static_memory_peak_usage() const : uint64_t</text><ellipse cx="9813.5" cy="4730.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="9822.5" y="4733.7729">get_static_memory_usage() const : uint64_t</text><ellipse cx="9813.5" cy="4743.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="477" x="9822.5" y="4746.5776">get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String</text><ellipse cx="9813.5" cy="4756.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="9822.5" y="4759.3823">get_system_time_msecs() const : uint64_t</text><ellipse cx="9813.5" cy="4768.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="9822.5" y="4772.187">get_system_time_secs() const : uint64_t</text><ellipse cx="9813.5" cy="4781.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="9822.5" y="4784.9917">get_tablet_driver_count() const : int</text><ellipse cx="9813.5" cy="4794.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="9822.5" y="4797.7964">get_tablet_driver_name(int p_driver) const : String</text><ellipse cx="9813.5" cy="4807.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="9822.5" y="4810.6011">get_thread_caller_id() const : Thread::ID</text><ellipse cx="9813.5" cy="4820.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="9822.5" y="4823.4058">get_ticks_msec() const : uint32_t</text><ellipse cx="9813.5" cy="4833" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="9822.5" y="4836.2104">get_ticks_usec() const : uint64_t</text><ellipse cx="9813.5" cy="4845.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="4849.0151">get_time(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="4858.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="9822.5" y="4861.8198">get_time_zone_info() const : Dictionary</text><ellipse cx="9813.5" cy="4871.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="9822.5" y="4874.6245">get_unique_id() const : String</text><ellipse cx="9813.5" cy="4884.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="4887.4292">get_unix_time() const : uint64_t</text><ellipse cx="9813.5" cy="4897.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="9822.5" y="4900.2339">get_unix_time_from_datetime(Dictionary datetime) const : int64_t</text><ellipse cx="9813.5" cy="4909.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="9822.5" y="4913.0386">get_user_data_dir() const : String</text><ellipse cx="9813.5" cy="4922.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="9822.5" y="4925.8433">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="9813.5" cy="4935.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="4938.6479">get_video_driver_count() const : int</text><ellipse cx="9813.5" cy="4948.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="9822.5" y="4951.4526">get_video_driver_name(_OS::VideoDriver p_driver) const : String</text><ellipse cx="9813.5" cy="4961.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9822.5" y="4964.2573">get_video_mode(int p_screen = 0) const : Size2</text><ellipse cx="9813.5" cy="4973.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="9822.5" y="4977.062">get_virtual_keyboard_height() : int</text><ellipse cx="9813.5" cy="4986.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="9822.5" y="4989.8667">get_window_per_pixel_transparency_enabled() const : bool</text><ellipse cx="9813.5" cy="4999.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="5002.6714">get_window_position() const : Point2</text><ellipse cx="9813.5" cy="5012.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="9822.5" y="5015.4761">get_window_safe_area() const : Rect2</text><ellipse cx="9813.5" cy="5025.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="9822.5" y="5028.2808">get_window_size() const : Size2</text><ellipse cx="9813.5" cy="5037.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="731" x="9822.5" y="5041.0854">global_menu_add_item(const String &amp; p_menu, const String &amp; p_label, const Variant &amp; p_signal, const Variant &amp; p_meta) : void</text><ellipse cx="9813.5" cy="5050.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="9822.5" y="5053.8901">global_menu_add_separator(const String &amp; p_menu) : void</text><ellipse cx="9813.5" cy="5063.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="9822.5" y="5066.6948">global_menu_clear(const String &amp; p_menu) : void</text><ellipse cx="9813.5" cy="5076.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="9822.5" y="5079.4995">global_menu_remove_item(const String &amp; p_menu, int p_idx) : void</text><ellipse cx="9813.5" cy="5089.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="9822.5" y="5092.3042">has_environment(const String &amp; p_var) const : bool</text><ellipse cx="9813.5" cy="5101.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="9822.5" y="5105.1089">has_feature(const String &amp; p_feature) const : bool</text><ellipse cx="9813.5" cy="5114.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="9822.5" y="5117.9136">has_touchscreen_ui_hint() const : bool</text><ellipse cx="9813.5" cy="5127.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="5130.7183">has_virtual_keyboard() const : bool</text><ellipse cx="9813.5" cy="5140.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="9822.5" y="5143.5229">hide_virtual_keyboard() : void</text><ellipse cx="9813.5" cy="5153.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="9822.5" y="5156.3276">inherits_static() : String</text><ellipse cx="9813.5" cy="5165.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="9822.5" y="5169.1323">initialize_class() : void</text><ellipse cx="9813.5" cy="5178.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9822.5" y="5181.937">is_class(const String &amp; p_class) const : bool</text><ellipse cx="9813.5" cy="5191.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9822.5" y="5194.7417">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="9813.5" cy="5204.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="9822.5" y="5207.5464">is_debug_build() const : bool</text><ellipse cx="9813.5" cy="5217.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="9822.5" y="5220.3511">is_in_low_processor_usage_mode() const : bool</text><ellipse cx="9813.5" cy="5229.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="9822.5" y="5233.1558">is_keep_screen_on() const : bool</text><ellipse cx="9813.5" cy="5242.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="9822.5" y="5245.9604">is_ok_left_and_cancel_right() const : bool</text><ellipse cx="9813.5" cy="5255.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="9822.5" y="5258.7651">is_scancode_unicode(uint32_t p_unicode) const : bool</text><ellipse cx="9813.5" cy="5268.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="9822.5" y="5271.5698">is_stdout_verbose() const : bool</text><ellipse cx="9813.5" cy="5281.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="9822.5" y="5284.3745">is_userfs_persistent() const : bool</text><ellipse cx="9813.5" cy="5293.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="9822.5" y="5297.1792">is_video_mode_fullscreen(int p_screen = 0) const : bool</text><ellipse cx="9813.5" cy="5306.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="9822.5" y="5309.9839">is_video_mode_resizable(int p_screen = 0) const : bool</text><ellipse cx="9813.5" cy="5319.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="5322.7886">is_vsync_enabled() const : bool</text><ellipse cx="9813.5" cy="5332.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="9822.5" y="5335.5933">is_vsync_via_compositor_enabled() const : bool</text><ellipse cx="9813.5" cy="5345.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="9822.5" y="5348.3979">is_window_always_on_top() const : bool</text><ellipse cx="9813.5" cy="5357.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="5361.2026">is_window_focused() const : bool</text><ellipse cx="9813.5" cy="5370.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="5374.0073">is_window_fullscreen() const : bool</text><ellipse cx="9813.5" cy="5383.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="9822.5" y="5386.812">is_window_maximized() const : bool</text><ellipse cx="9813.5" cy="5396.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="9822.5" y="5399.6167">is_window_minimized() const : bool</text><ellipse cx="9813.5" cy="5409.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="9822.5" y="5412.4214">is_window_resizable() const : bool</text><ellipse cx="9813.5" cy="5422.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="9822.5" y="5425.2261">keyboard_get_current_layout() const : int</text><ellipse cx="9813.5" cy="5434.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="9822.5" y="5438.0308">keyboard_get_layout_count() const : int</text><ellipse cx="9813.5" cy="5447.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="9822.5" y="5450.8354">keyboard_get_layout_language(int p_index) const : String</text><ellipse cx="9813.5" cy="5460.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="9822.5" y="5463.6401">keyboard_get_layout_name(int p_index) const : String</text><ellipse cx="9813.5" cy="5473.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="9822.5" y="5476.4448">keyboard_set_current_layout(int p_index) : void</text><ellipse cx="9813.5" cy="5486.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="9822.5" y="5489.2495">kill(int p_pid) : Error</text><ellipse cx="9813.5" cy="5498.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="9822.5" y="5502.0542">move_window_to_foreground() : void</text><ellipse cx="9813.5" cy="5511.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="5514.8589">native_video_is_playing() : bool</text><ellipse cx="9813.5" cy="5524.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="9822.5" y="5527.6636">native_video_pause() : void</text><ellipse cx="9813.5" cy="5537.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="9822.5" y="5540.4683">native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error</text><ellipse cx="9813.5" cy="5550.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="9822.5" y="5553.2729">native_video_stop() : void</text><ellipse cx="9813.5" cy="5562.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9822.5" y="5566.0776">native_video_unpause() : void</text><ellipse cx="9813.5" cy="5575.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="9822.5" y="5578.8823">open_midi_inputs() : void</text><ellipse cx="9813.5" cy="5588.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="9822.5" y="5591.687">print_all_resources(const String &amp; p_to_file) : void</text><ellipse cx="9813.5" cy="5601.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="5604.4917">print_all_textures_by_size() : void</text><ellipse cx="9813.5" cy="5614.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="9822.5" y="5617.2964">print_resources_by_type(const Vector&lt;String&gt; &amp; p_types) : void</text><ellipse cx="9813.5" cy="5626.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="9822.5" y="5630.1011">print_resources_in_use(bool p_short = false) : void</text><ellipse cx="9813.5" cy="5639.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9822.5" y="5642.9058">request_attention() : void</text><ellipse cx="9813.5" cy="5652.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="9822.5" y="5655.7104">request_permission(const String &amp; p_name) : bool</text><ellipse cx="9813.5" cy="5665.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="9822.5" y="5668.5151">request_permissions() : bool</text><ellipse cx="9813.5" cy="5678.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="9822.5" y="5681.3198">set_borderless_window(bool p_borderless) : void</text><ellipse cx="9813.5" cy="5690.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="9822.5" y="5694.1245">set_clipboard(const String &amp; p_text) : void</text><ellipse cx="9813.5" cy="5703.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="9822.5" y="5706.9292">set_current_screen(int p_screen) : void</text><ellipse cx="9813.5" cy="5716.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="9822.5" y="5719.7339">set_current_tablet_driver(const String &amp; p_driver) : void</text><ellipse cx="9813.5" cy="5729.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="9822.5" y="5732.5386">set_environment(const String &amp; p_var, const String &amp; p_value) const : bool</text><ellipse cx="9813.5" cy="5742.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="5745.3433">set_exit_code(int p_code) : void</text><ellipse cx="9813.5" cy="5754.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="9822.5" y="5758.1479">set_icon(const Ref&lt;Image&gt; &amp; p_icon) : void</text><ellipse cx="9813.5" cy="5767.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="9822.5" y="5770.9526">set_ime_active(const bool p_active) : void</text><ellipse cx="9813.5" cy="5780.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="5783.7573">set_ime_position(const Point2 &amp; p_pos) : void</text><ellipse cx="9813.5" cy="5793.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="9822.5" y="5796.562">set_keep_screen_on(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5806.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="9822.5" y="5809.3667">set_low_processor_usage_mode(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5818.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="9822.5" y="5822.1714">set_low_processor_usage_mode_sleep_usec(int p_usec) : void</text><ellipse cx="9813.5" cy="5831.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="5834.9761">set_max_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="5844.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="9822.5" y="5847.7808">set_min_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="5857.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="9822.5" y="5860.5854">set_native_icon(const String &amp; p_filename) : void</text><ellipse cx="9813.5" cy="5870.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="385" x="9822.5" y="5873.3901">set_screen_orientation(_OS::ScreenOrientation p_orientation) : void</text><ellipse cx="9813.5" cy="5882.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="9822.5" y="5886.1948">set_thread_name(const String &amp; p_name) : Error</text><ellipse cx="9813.5" cy="5895.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="9822.5" y="5898.9995">set_use_file_access_save_and_swap(bool p_enable) : void</text><ellipse cx="9813.5" cy="5908.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="5911.8042">set_use_vsync(bool p_enable) : void</text><ellipse cx="9813.5" cy="5921.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="9822.5" y="5924.6089">set_video_mode(const Size2 &amp; p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void</text><ellipse cx="9813.5" cy="5934.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="9822.5" y="5937.4136">set_vsync_via_compositor(bool p_enable) : void</text><ellipse cx="9813.5" cy="5947.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="9822.5" y="5950.2183">set_window_always_on_top(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5959.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="9822.5" y="5963.0229">set_window_fullscreen(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5972.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="5975.8276">set_window_maximized(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5985.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="9822.5" y="5988.6323">set_window_minimized(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5998.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="431" x="9822.5" y="6001.437">set_window_mouse_passthrough(const PoolVector2Array &amp; p_region) : void</text><ellipse cx="9813.5" cy="6011.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="9822.5" y="6014.2417">set_window_per_pixel_transparency_enabled(bool p_enabled) : void</text><ellipse cx="9813.5" cy="6023.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="9822.5" y="6027.0464">set_window_position(const Point2 &amp; p_position) : void</text><ellipse cx="9813.5" cy="6036.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="9822.5" y="6039.8511">set_window_resizable(bool p_enabled) : void</text><ellipse cx="9813.5" cy="6049.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9822.5" y="6052.6558">set_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="6062.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="9822.5" y="6065.4604">set_window_title(const String &amp; p_title) : void</text><ellipse cx="9813.5" cy="6075.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="6078.2651">shell_open(String p_uri) : Error</text><ellipse cx="9813.5" cy="6087.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="9822.5" y="6091.0698">show_virtual_keyboard(const String &amp; p_existing_text = "", bool p_multiline = false) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9803.5" x2="10709.5" y1="6097.6641" y2="6097.6641"/></a><!--MD5=[9cd91452c1d17095030b673b85aa269f]
class C_0000897221634691489964--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" target="_top" title="_Geometry" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" xlink:show="new" xlink:title="_Geometry" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="683.4297" id="C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.5;" width="1086" x="10845.5" y="4628.4531"/><ellipse cx="11351.25" cy="4644.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11354.2188,4650.0938 Q11353.6406,4650.3906 11353,4650.5313 Q11352.3594,4650.6875 11351.6563,4650.6875 Q11349.1563,4650.6875 11347.8281,4649.0469 Q11346.5156,4647.3906 11346.5156,4644.2656 Q11346.5156,4641.1406 11347.8281,4639.4844 Q11349.1563,4637.8281 11351.6563,4637.8281 Q11352.3594,4637.8281 11353,4637.9844 Q11353.6563,4638.1406 11354.2188,4638.4375 L11354.2188,4641.1563 Q11353.5938,4640.5781 11353,4640.3125 Q11352.4063,4640.0313 11351.7813,4640.0313 Q11350.4375,4640.0313 11349.75,4641.1094 Q11349.0625,4642.1719 11349.0625,4644.2656 Q11349.0625,4646.3594 11349.75,4647.4375 Q11350.4375,4648.5 11351.7813,4648.5 Q11352.4063,4648.5 11353,4648.2344 Q11353.5938,4647.9531 11354.2188,4647.375 L11354.2188,4650.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="11371.75" y="4648.6074">_Geometry</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10846.5" x2="11930.5" y1="4660.4531" y2="4660.4531"/><ellipse cx="10856.5" cy="4671.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="10865.5" y="4674.6636">_Geometry() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="10846.5" x2="11930.5" y1="4681.2578" y2="4681.2578"/><ellipse cx="10856.5" cy="4692.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="10865.5" y="4695.4683">_get_class_namev() const : const StringName *</text><ellipse cx="10856.5" cy="4705.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="10865.5" y="4708.2729">build_box_planes(const Vector3 &amp; p_extents) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4717.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="773" x="10865.5" y="4721.0776">build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4730.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="10865.5" y="4733.8823">build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4743.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="10865.5" y="4746.687">clip_polygon(const Vector&lt;Vector3&gt; &amp; p_points, const Plane &amp; p_plane) : Vector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="4756.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="10865.5" y="4759.4917">clip_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="4769.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="638" x="10865.5" y="4772.2964">clip_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="10856.5" cy="4781.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="10865.5" y="4785.1011">convex_hull_2d(const Vector&lt;Point2&gt; &amp; p_points) : Vector&lt;Point2&gt;</text><ellipse cx="10856.5" cy="4794.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="618" x="10865.5" y="4797.9058">exclude_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="4807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="10865.5" y="4810.7104">get_category_static() : String</text><ellipse cx="10856.5" cy="4820.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="10865.5" y="4823.5151">get_class() const : String</text><ellipse cx="10856.5" cy="4833.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="10865.5" y="4836.3198">get_class_ptr_static() : void *</text><ellipse cx="10856.5" cy="4845.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="10865.5" y="4849.1245">get_class_static() : String</text><ellipse cx="10856.5" cy="4858.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="620" x="10865.5" y="4861.9292">get_closest_point_to_segment(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="10856.5" cy="4871.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="10865.5" y="4874.7339">get_closest_point_to_segment_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="10856.5" cy="4884.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="681" x="10865.5" y="4887.5386">get_closest_point_to_segment_uncapped(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="10856.5" cy="4897.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="701" x="10865.5" y="4900.3433">get_closest_point_to_segment_uncapped_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="10856.5" cy="4909.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="828" x="10865.5" y="4913.1479">get_closest_points_between_segments(const Vector3 &amp; p1, const Vector3 &amp; p2, const Vector3 &amp; q1, const Vector3 &amp; q2) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="4922.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="10865.5" y="4925.9526">get_closest_points_between_segments_2d(const Vector2 &amp; p1, const Vector2 &amp; q1, const Vector2 &amp; p2, const Vector2 &amp; q2) : PoolVector&lt;Vector2&gt;</text><ellipse cx="10856.5" cy="4935.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="10865.5" y="4938.7573">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="10856.5" cy="4948.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="10865.5" y="4951.562">get_parent_class_static() : String</text><ellipse cx="10856.5" cy="4961.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="168" x="10865.5" y="4964.3667">get_singleton() : _Geometry *</text><ellipse cx="10856.5" cy="4973.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="10865.5" y="4977.1714">get_uv84_normal_bit(const Vector3 &amp; p_vector) : int</text><ellipse cx="10856.5" cy="4986.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="10865.5" y="4989.9761">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="10856.5" cy="4999.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="10865.5" y="5002.7808">inherits_static() : String</text><ellipse cx="10856.5" cy="5012.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="10865.5" y="5015.5854">initialize_class() : void</text><ellipse cx="10856.5" cy="5025.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="10865.5" y="5028.3901">intersect_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5037.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="10865.5" y="5041.1948">intersect_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="10856.5" cy="5050.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="10865.5" y="5053.9995">is_class(const String &amp; p_class) const : bool</text><ellipse cx="10856.5" cy="5063.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="10865.5" y="5066.8042">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="10856.5" cy="5076.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="580" x="10865.5" y="5079.6089">is_point_in_circle(const Vector2 &amp; p_point, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : bool</text><ellipse cx="10856.5" cy="5089.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="10865.5" y="5092.4136">is_point_in_polygon(const Point2 &amp; p_point, const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="10856.5" cy="5102.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="10865.5" y="5105.2183">is_polygon_clockwise(const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="10856.5" cy="5114.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="785" x="10865.5" y="5118.0229">line_intersects_line_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_dir_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_dir_b) : Variant</text><ellipse cx="10856.5" cy="5127.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="10865.5" y="5130.8276">make_atlas(const Vector&lt;Size2&gt; &amp; p_rects) : Dictionary</text><ellipse cx="10856.5" cy="5140.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="612" x="10865.5" y="5143.6323">merge_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5153.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="752" x="10865.5" y="5156.437">offset_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array</text><ellipse cx="10856.5" cy="5166.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1060" x="10865.5" y="5169.2417">offset_polyline_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array</text><ellipse cx="10856.5" cy="5178.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="647" x="10865.5" y="5182.0464">point_is_inside_triangle(const Vector2 &amp; s, const Vector2 &amp; a, const Vector2 &amp; b, const Vector2 &amp; c) const : bool</text><ellipse cx="10856.5" cy="5191.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="10865.5" y="5194.8511">ray_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_dir, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="10856.5" cy="5204.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="768" x="10865.5" y="5207.6558">segment_intersects_circle(const Vector2 &amp; p_from, const Vector2 &amp; p_to, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : real_t</text><ellipse cx="10856.5" cy="5217.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="760" x="10865.5" y="5220.4604">segment_intersects_convex(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector&lt;Plane&gt; &amp; p_planes) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5230.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="739" x="10865.5" y="5233.2651">segment_intersects_cylinder(const Vector3 &amp; p_from, const Vector3 &amp; p_to, float p_height, float p_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5242.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="837" x="10865.5" y="5246.0698">segment_intersects_segment_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_to_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_to_b) : Variant</text><ellipse cx="10856.5" cy="5255.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="887" x="10865.5" y="5258.8745">segment_intersects_sphere(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_sphere_pos, real_t p_sphere_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5268.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="876" x="10865.5" y="5271.6792">segment_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="10856.5" cy="5281.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="10865.5" y="5284.4839">triangulate_delaunay_2d(const Vector&lt;Vector2&gt; &amp; p_points) : Vector&lt;int&gt;</text><ellipse cx="10856.5" cy="5294.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="10865.5" y="5297.2886">triangulate_polygon(const Vector&lt;Vector2&gt; &amp; p_polygon) : Vector&lt;int&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10846.5" x2="11930.5" y1="5303.8828" y2="5303.8828"/></a><!--MD5=[4dcc2a5e5ca6c256ca3086aa64be2a49]
class C_0000135188690773659020--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" target="_top" title="_Marshalls" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" xlink:show="new" xlink:title="_Marshalls" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="324.8984" id="C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.5;" width="476" x="12066.5" y="4807.4531"/><ellipse cx="12267.75" cy="4823.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12270.7188,4829.0938 Q12270.1406,4829.3906 12269.5,4829.5313 Q12268.8594,4829.6875 12268.1563,4829.6875 Q12265.6563,4829.6875 12264.3281,4828.0469 Q12263.0156,4826.3906 12263.0156,4823.2656 Q12263.0156,4820.1406 12264.3281,4818.4844 Q12265.6563,4816.8281 12268.1563,4816.8281 Q12268.8594,4816.8281 12269.5,4816.9844 Q12270.1563,4817.1406 12270.7188,4817.4375 L12270.7188,4820.1563 Q12270.0938,4819.5781 12269.5,4819.3125 Q12268.9063,4819.0313 12268.2813,4819.0313 Q12266.9375,4819.0313 12266.25,4820.1094 Q12265.5625,4821.1719 12265.5625,4823.2656 Q12265.5625,4825.3594 12266.25,4826.4375 Q12266.9375,4827.5 12268.2813,4827.5 Q12268.9063,4827.5 12269.5,4827.2344 Q12270.0938,4826.9531 12270.7188,4826.375 L12270.7188,4829.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="12288.25" y="4827.6074">_Marshalls</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12067.5" x2="12541.5" y1="4839.4531" y2="4839.4531"/><ellipse cx="12077.5" cy="4850.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="12086.5" y="4853.6636">_Marshalls() : void</text><ellipse cx="12077.5" cy="4863.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="12086.5" y="4866.4683">_Marshalls() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="12067.5" x2="12541.5" y1="4873.0625" y2="4873.0625"/><ellipse cx="12077.5" cy="4884.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="12086.5" y="4887.2729">_get_class_namev() const : const StringName *</text><ellipse cx="12077.5" cy="4896.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="12086.5" y="4900.0776">base64_to_raw(const String &amp; p_str) : PoolVector&lt;uint8_t&gt;</text><ellipse cx="12077.5" cy="4909.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="12086.5" y="4912.8823">base64_to_utf8(const String &amp; p_str) : String</text><ellipse cx="12077.5" cy="4922.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="12086.5" y="4925.687">base64_to_variant(const String &amp; p_str, bool p_allow_objects = false) : Variant</text><ellipse cx="12077.5" cy="4935.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="12086.5" y="4938.4917">get_category_static() : String</text><ellipse cx="12077.5" cy="4948.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="12086.5" y="4951.2964">get_class() const : String</text><ellipse cx="12077.5" cy="4960.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="12086.5" y="4964.1011">get_class_ptr_static() : void *</text><ellipse cx="12077.5" cy="4973.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="12086.5" y="4976.9058">get_class_static() : String</text><ellipse cx="12077.5" cy="4986.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="12086.5" y="4989.7104">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="12077.5" cy="4999.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="12086.5" y="5002.5151">get_parent_class_static() : String</text><ellipse cx="12077.5" cy="5012.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="12086.5" y="5015.3198">get_singleton() : _Marshalls *</text><ellipse cx="12077.5" cy="5024.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="12086.5" y="5028.1245">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="12077.5" cy="5037.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="12086.5" y="5040.9292">inherits_static() : String</text><ellipse cx="12077.5" cy="5050.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="12086.5" y="5053.7339">initialize_class() : void</text><ellipse cx="12077.5" cy="5063.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="12086.5" y="5066.5386">is_class(const String &amp; p_class) const : bool</text><ellipse cx="12077.5" cy="5076.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="12086.5" y="5079.3433">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="12077.5" cy="5088.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="12086.5" y="5092.1479">raw_to_base64(const PoolVector&lt;uint8_t&gt; &amp; p_arr) : String</text><ellipse cx="12077.5" cy="5101.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="12086.5" y="5104.9526">utf8_to_base64(const String &amp; p_str) : String</text><ellipse cx="12077.5" cy="5114.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="12086.5" y="5117.7573">variant_to_base64(const Variant &amp; p_var, bool p_full_objects = false) : String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12067.5" x2="12541.5" y1="5124.3516" y2="5124.3516"/></a><!--MD5=[bec2467cb88707ae9252054f6d93a9ae]
class C_0001150621116588802549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" target="_top" title="_Thread" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" xlink:show="new" xlink:title="_Thread" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="286.4844" id="C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.5;" width="905" x="24028" y="4826.9531"/><ellipse cx="24451.25" cy="4842.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M24454.2188,4848.5938 Q24453.6406,4848.8906 24453,4849.0313 Q24452.3594,4849.1875 24451.6563,4849.1875 Q24449.1563,4849.1875 24447.8281,4847.5469 Q24446.5156,4845.8906 24446.5156,4842.7656 Q24446.5156,4839.6406 24447.8281,4837.9844 Q24449.1563,4836.3281 24451.6563,4836.3281 Q24452.3594,4836.3281 24453,4836.4844 Q24453.6563,4836.6406 24454.2188,4836.9375 L24454.2188,4839.6563 Q24453.5938,4839.0781 24453,4838.8125 Q24452.4063,4838.5313 24451.7813,4838.5313 Q24450.4375,4838.5313 24449.75,4839.6094 Q24449.0625,4840.6719 24449.0625,4842.7656 Q24449.0625,4844.8594 24449.75,4845.9375 Q24450.4375,4847 24451.7813,4847 Q24452.4063,4847 24453,4846.7344 Q24453.5938,4846.4531 24454.2188,4845.875 L24454.2188,4848.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="24471.75" y="4847.1074">_Thread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24029" x2="24932" y1="4858.9531" y2="4858.9531"/><ellipse cx="24039" cy="4869.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="24048" y="4873.1636">_Thread() : void</text><ellipse cx="24039" cy="4882.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="24048" y="4885.9683">_Thread() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="24029" x2="24932" y1="4892.5625" y2="4892.5625"/><ellipse cx="24039" cy="4903.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="24048" y="4906.7729">_get_class_namev() const : const StringName *</text><ellipse cx="24039" cy="4916.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="24048" y="4919.5776">get_category_static() : String</text><ellipse cx="24039" cy="4929.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="24048" y="4932.3823">get_class() const : String</text><ellipse cx="24039" cy="4941.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="24048" y="4945.187">get_class_ptr_static() : void *</text><ellipse cx="24039" cy="4954.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="24048" y="4957.9917">get_class_static() : String</text><ellipse cx="24039" cy="4967.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="24048" y="4970.7964">get_id() const : String</text><ellipse cx="24039" cy="4980.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="24048" y="4983.6011">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="24039" cy="4993.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="24048" y="4996.4058">get_parent_class_static() : String</text><ellipse cx="24039" cy="5006" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="24048" y="5009.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="24039" cy="5018.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="24048" y="5022.0151">inherits_static() : String</text><ellipse cx="24039" cy="5031.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="24048" y="5034.8198">initialize_class() : void</text><ellipse cx="24039" cy="5044.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="24048" y="5047.6245">is_active() const : bool</text><ellipse cx="24039" cy="5057.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="24048" y="5060.4292">is_class(const String &amp; p_class) const : bool</text><ellipse cx="24039" cy="5070.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="24048" y="5073.2339">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="24039" cy="5082.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="879" x="24048" y="5086.0386">start(Object * p_instance, const StringName &amp; p_method, const Variant &amp; p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error</text><ellipse cx="24039" cy="5095.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="24048" y="5098.8433">wait_to_finish() : Variant</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24029" x2="24932" y1="5105.4375" y2="5105.4375"/></a><!--MD5=[aee0a6e401a1fbb7c861b56a21d0daf4]
class C_0001186331261774827872--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" target="_top" title="_ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" xlink:show="new" xlink:title="_ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="491.3594" id="C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.5;" width="651" x="12749" y="4724.4531"/><ellipse cx="13042.25" cy="4740.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13045.2188,4746.0938 Q13044.6406,4746.3906 13044,4746.5313 Q13043.3594,4746.6875 13042.6563,4746.6875 Q13040.1563,4746.6875 13038.8281,4745.0469 Q13037.5156,4743.3906 13037.5156,4740.2656 Q13037.5156,4737.1406 13038.8281,4735.4844 Q13040.1563,4733.8281 13042.6563,4733.8281 Q13043.3594,4733.8281 13044,4733.9844 Q13044.6563,4734.1406 13045.2188,4734.4375 L13045.2188,4737.1563 Q13044.5938,4736.5781 13044,4736.3125 Q13043.4063,4736.0313 13042.7813,4736.0313 Q13041.4375,4736.0313 13040.75,4737.1094 Q13040.0625,4738.1719 13040.0625,4740.2656 Q13040.0625,4742.3594 13040.75,4743.4375 Q13041.4375,4744.5 13042.7813,4744.5 Q13043.4063,4744.5 13044,4744.2344 Q13044.5938,4743.9531 13045.2188,4743.375 L13045.2188,4746.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="13062.75" y="4744.6074">_ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12750" x2="13399" y1="4756.4531" y2="4756.4531"/><ellipse cx="12760" cy="4767.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="12769" y="4770.6636">_ClassDB() : void</text><ellipse cx="12760" cy="4780.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="12769" y="4783.4683">_ClassDB() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="12750" x2="13399" y1="4790.0625" y2="4790.0625"/><ellipse cx="12760" cy="4801.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="12769" y="4804.2729">_get_class_namev() const : const StringName *</text><ellipse cx="12760" cy="4813.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="12769" y="4817.0776">can_instance(const StringName &amp; p_class) const : bool</text><ellipse cx="12760" cy="4826.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="12769" y="4829.8823">class_exists(const StringName &amp; p_class) const : bool</text><ellipse cx="12760" cy="4839.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="12769" y="4842.687">get_category(const StringName &amp; p_node) const : StringName</text><ellipse cx="12760" cy="4852.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="12769" y="4855.4917">get_category_static() : String</text><ellipse cx="12760" cy="4865.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="12769" y="4868.2964">get_class() const : String</text><ellipse cx="12760" cy="4877.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="12769" y="4881.1011">get_class_list() const : PoolStringArray</text><ellipse cx="12760" cy="4890.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="12769" y="4893.9058">get_class_ptr_static() : void *</text><ellipse cx="12760" cy="4903.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="12769" y="4906.7104">get_class_static() : String</text><ellipse cx="12760" cy="4916.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="12769" y="4919.5151">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="12760" cy="4929.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="12769" y="4932.3198">get_inheriters_from_class(const StringName &amp; p_class) const : PoolStringArray</text><ellipse cx="12760" cy="4941.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="12769" y="4945.1245">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : int</text><ellipse cx="12760" cy="4954.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="12769" y="4957.9292">get_integer_constant_list(const StringName &amp; p_class, bool p_no_inheritance = false) const : PoolStringArray</text><ellipse cx="12760" cy="4967.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="466" x="12769" y="4970.7339">get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="4980.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="12769" y="4983.5386">get_parent_class(const StringName &amp; p_class) const : StringName</text><ellipse cx="12760" cy="4993.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="12769" y="4996.3433">get_parent_class_static() : String</text><ellipse cx="12760" cy="5005.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="12769" y="5009.1479">get_property(Object * p_object, const StringName &amp; p_property) const : Variant</text><ellipse cx="12760" cy="5018.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="12769" y="5021.9526">get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="5031.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="12769" y="5034.7573">get_signal(StringName p_class, StringName p_signal) const : Dictionary</text><ellipse cx="12760" cy="5044.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="12769" y="5047.562">get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="5057.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="12769" y="5060.3667">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="12760" cy="5069.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="12769" y="5073.1714">has_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : bool</text><ellipse cx="12760" cy="5082.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="575" x="12769" y="5085.9761">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool</text><ellipse cx="12760" cy="5095.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="12769" y="5098.7808">has_signal(StringName p_class, StringName p_signal) const : bool</text><ellipse cx="12760" cy="5108.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="12769" y="5111.5854">inherits_static() : String</text><ellipse cx="12760" cy="5121.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="12769" y="5124.3901">initialize_class() : void</text><ellipse cx="12760" cy="5133.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="12769" y="5137.1948">instance(const StringName &amp; p_class) const : Variant</text><ellipse cx="12760" cy="5146.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="12769" y="5149.9995">is_class(const String &amp; p_class) const : bool</text><ellipse cx="12760" cy="5159.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="12769" y="5162.8042">is_class_enabled(StringName p_class) const : bool</text><ellipse cx="12760" cy="5172.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="12769" y="5175.6089">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="12760" cy="5185.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="515" x="12769" y="5188.4136">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) const : bool</text><ellipse cx="12760" cy="5198.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="12769" y="5201.2183">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value) const : Error</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12750" x2="13399" y1="5207.8125" y2="5207.8125"/></a><!--MD5=[05b7e85f3dbac3be88f6744cbcc1427a]
class C_0001895218672297528471--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" target="_top" title="_Engine" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" xlink:show="new" xlink:title="_Engine" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="555.3828" id="C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="13435" y="4692.4531"/><ellipse cx="13606.75" cy="4708.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13609.7188,4714.0938 Q13609.1406,4714.3906 13608.5,4714.5313 Q13607.8594,4714.6875 13607.1563,4714.6875 Q13604.6563,4714.6875 13603.3281,4713.0469 Q13602.0156,4711.3906 13602.0156,4708.2656 Q13602.0156,4705.1406 13603.3281,4703.4844 Q13604.6563,4701.8281 13607.1563,4701.8281 Q13607.8594,4701.8281 13608.5,4701.9844 Q13609.1563,4702.1406 13609.7188,4702.4375 L13609.7188,4705.1563 Q13609.0938,4704.5781 13608.5,4704.3125 Q13607.9063,4704.0313 13607.2813,4704.0313 Q13605.9375,4704.0313 13605.25,4705.1094 Q13604.5625,4706.1719 13604.5625,4708.2656 Q13604.5625,4710.3594 13605.25,4711.4375 Q13605.9375,4712.5 13607.2813,4712.5 Q13607.9063,4712.5 13608.5,4712.2344 Q13609.0938,4711.9531 13609.7188,4711.375 L13609.7188,4714.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="13627.25" y="4712.6074">_Engine</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13436" x2="13835" y1="4724.4531" y2="4724.4531"/><ellipse cx="13446" cy="4735.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="13455" y="4738.6636">_Engine() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13436" x2="13835" y1="4745.2578" y2="4745.2578"/><ellipse cx="13446" cy="4756.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="13455" y="4759.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13446" cy="4769.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="13455" y="4772.2729">get_author_info() const : Dictionary</text><ellipse cx="13446" cy="4781.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13455" y="4785.0776">get_category_static() : String</text><ellipse cx="13446" cy="4794.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13455" y="4797.8823">get_class() const : String</text><ellipse cx="13446" cy="4807.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13455" y="4810.687">get_class_ptr_static() : void *</text><ellipse cx="13446" cy="4820.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13455" y="4823.4917">get_class_static() : String</text><ellipse cx="13446" cy="4833.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="13455" y="4836.2964">get_copyright_info() const : Array</text><ellipse cx="13446" cy="4845.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="13455" y="4849.1011">get_donor_info() const : Dictionary</text><ellipse cx="13446" cy="4858.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="13455" y="4861.9058">get_frames_drawn() : int</text><ellipse cx="13446" cy="4871.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="13455" y="4874.7104">get_frames_per_second() const : float</text><ellipse cx="13446" cy="4884.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="13455" y="4887.5151">get_idle_frames() const : uint64_t</text><ellipse cx="13446" cy="4897.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13455" y="4900.3198">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13446" cy="4909.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="13455" y="4913.1245">get_iterations_per_second() const : int</text><ellipse cx="13446" cy="4922.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="13455" y="4925.9292">get_license_info() const : Dictionary</text><ellipse cx="13446" cy="4935.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="13455" y="4938.7339">get_license_text() const : String</text><ellipse cx="13446" cy="4948.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="13455" y="4951.5386">get_main_loop() const : MainLoop *</text><ellipse cx="13446" cy="4961.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13455" y="4964.3433">get_parent_class_static() : String</text><ellipse cx="13446" cy="4973.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="13455" y="4977.1479">get_physics_frames() const : uint64_t</text><ellipse cx="13446" cy="4986.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="13455" y="4989.9526">get_physics_interpolation_fraction() const : float</text><ellipse cx="13446" cy="4999.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="13455" y="5002.7573">get_physics_jitter_fix() const : float</text><ellipse cx="13446" cy="5012.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="150" x="13455" y="5015.562">get_singleton() : _Engine *</text><ellipse cx="13446" cy="5025.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="13455" y="5028.3667">get_singleton_object(const String &amp; p_name) const : Object *</text><ellipse cx="13446" cy="5037.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="13455" y="5041.1714">get_target_fps() const : int</text><ellipse cx="13446" cy="5050.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="13455" y="5053.9761">get_time_scale() : float</text><ellipse cx="13446" cy="5063.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="13455" y="5066.7808">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13446" cy="5076.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="13455" y="5079.5854">get_version_info() const : Dictionary</text><ellipse cx="13446" cy="5089.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="13455" y="5092.3901">has_singleton(const String &amp; p_name) const : bool</text><ellipse cx="13446" cy="5101.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="13455" y="5105.1948">inherits_static() : String</text><ellipse cx="13446" cy="5114.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13455" y="5117.9995">initialize_class() : void</text><ellipse cx="13446" cy="5127.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13455" y="5130.8042">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13446" cy="5140.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13455" y="5143.6089">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13446" cy="5153.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="13455" y="5156.4136">is_editor_hint() const : bool</text><ellipse cx="13446" cy="5166.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="13455" y="5169.2183">is_in_physics_frame() const : bool</text><ellipse cx="13446" cy="5178.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13455" y="5182.0229">set_editor_hint(bool p_enabled) : void</text><ellipse cx="13446" cy="5191.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="13455" y="5194.8276">set_iterations_per_second(int p_ips) : void</text><ellipse cx="13446" cy="5204.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="13455" y="5207.6323">set_physics_jitter_fix(float p_threshold) : void</text><ellipse cx="13446" cy="5217.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="13455" y="5220.437">set_target_fps(int p_fps) : void</text><ellipse cx="13446" cy="5230.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="13455" y="5233.2417">set_time_scale(float p_scale) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13436" x2="13835" y1="5239.8359" y2="5239.8359"/></a><!--MD5=[c754248bd0e8ccbf585ab49c3c72bce4]
class C_0000979065355535690103--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" target="_top" title="_JSON" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" xlink:show="new" xlink:title="_JSON" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="260.875" id="C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.5;" width="561" x="13971" y="4839.4531"/><ellipse cx="14229.75" cy="4855.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14232.7188,4861.0938 Q14232.1406,4861.3906 14231.5,4861.5313 Q14230.8594,4861.6875 14230.1563,4861.6875 Q14227.6563,4861.6875 14226.3281,4860.0469 Q14225.0156,4858.3906 14225.0156,4855.2656 Q14225.0156,4852.1406 14226.3281,4850.4844 Q14227.6563,4848.8281 14230.1563,4848.8281 Q14230.8594,4848.8281 14231.5,4848.9844 Q14232.1563,4849.1406 14232.7188,4849.4375 L14232.7188,4852.1563 Q14232.0938,4851.5781 14231.5,4851.3125 Q14230.9063,4851.0313 14230.2813,4851.0313 Q14228.9375,4851.0313 14228.25,4852.1094 Q14227.5625,4853.1719 14227.5625,4855.2656 Q14227.5625,4857.3594 14228.25,4858.4375 Q14228.9375,4859.5 14230.2813,4859.5 Q14230.9063,4859.5 14231.5,4859.2344 Q14232.0938,4858.9531 14232.7188,4858.375 L14232.7188,4861.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="14250.25" y="4859.6074">_JSON</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13972" x2="14531" y1="4871.4531" y2="4871.4531"/><ellipse cx="13982" cy="4882.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="13991" y="4885.6636">_JSON() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="13972" x2="14531" y1="4892.2578" y2="4892.2578"/><ellipse cx="13982" cy="4903.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="13991" y="4906.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13982" cy="4916.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13991" y="4919.2729">get_category_static() : String</text><ellipse cx="13982" cy="4928.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13991" y="4932.0776">get_class() const : String</text><ellipse cx="13982" cy="4941.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13991" y="4944.8823">get_class_ptr_static() : void *</text><ellipse cx="13982" cy="4954.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13991" y="4957.687">get_class_static() : String</text><ellipse cx="13982" cy="4967.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13991" y="4970.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13982" cy="4980.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13991" y="4983.2964">get_parent_class_static() : String</text><ellipse cx="13982" cy="4992.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="140" x="13991" y="4996.1011">get_singleton() : _JSON *</text><ellipse cx="13982" cy="5005.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="13991" y="5008.9058">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13982" cy="5018.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="13991" y="5021.7104">inherits_static() : String</text><ellipse cx="13982" cy="5031.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13991" y="5034.5151">initialize_class() : void</text><ellipse cx="13982" cy="5044.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13991" y="5047.3198">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13982" cy="5056.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13991" y="5060.1245">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13982" cy="5069.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="13991" y="5072.9292">parse(const String &amp; p_json) : Ref&lt;JSONParseResult&gt;</text><ellipse cx="13982" cy="5082.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="13991" y="5085.7339">print(const Variant &amp; p_value, const String &amp; p_indent = "", bool p_sort_keys = false) : String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13972" x2="14531" y1="5092.3281" y2="5092.3281"/></a><!--MD5=[2e1804fc10b971ae34ea328508bc0a5b]
class C_0000132048052014479231--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" target="_top" title="_ObjectDebugLock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" xlink:show="new" xlink:title="_ObjectDebugLock" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="86.4141" id="C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.5;" width="252" x="16458.5" y="1797.4531"/><ellipse cx="16522.75" cy="1813.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16525.7188,1819.0938 Q16525.1406,1819.3906 16524.5,1819.5313 Q16523.8594,1819.6875 16523.1563,1819.6875 Q16520.6563,1819.6875 16519.3281,1818.0469 Q16518.0156,1816.3906 16518.0156,1813.2656 Q16518.0156,1810.1406 16519.3281,1808.4844 Q16520.6563,1806.8281 16523.1563,1806.8281 Q16523.8594,1806.8281 16524.5,1806.9844 Q16525.1563,1807.1406 16525.7188,1807.4375 L16525.7188,1810.1563 Q16525.0938,1809.5781 16524.5,1809.3125 Q16523.9063,1809.0313 16523.2813,1809.0313 Q16521.9375,1809.0313 16521.25,1810.1094 Q16520.5625,1811.1719 16520.5625,1813.2656 Q16520.5625,1815.3594 16521.25,1816.4375 Q16521.9375,1817.5 16523.2813,1817.5 Q16523.9063,1817.5 16524.5,1817.2344 Q16525.0938,1816.9531 16525.7188,1816.375 L16525.7188,1819.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="16543.25" y="1817.6074">_ObjectDebugLock</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16459.5" x2="16709.5" y1="1829.4531" y2="1829.4531"/><ellipse cx="16469.5" cy="1840.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="16478.5" y="1843.6636">_ObjectDebugLock(Object * p_obj) : void</text><ellipse cx="16469.5" cy="1853.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="16478.5" y="1856.4683">_ObjectDebugLock() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16459.5" x2="16709.5" y1="1863.0625" y2="1863.0625"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="16464.5" y="1869.0625"/><ellipse cx="16469.5" cy="1874.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="16478.5" y="1877.2729">obj : Object *</text></a><!--MD5=[4e04dc62cf4bb361958a89934798b4f1]
class C_0000115801560197752094--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" target="_top" title="_ObjectSignalDisconnectData" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" xlink:show="new" xlink:title="_ObjectSignalDisconnectData" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="86.4141" id="C_0000115801560197752094" style="stroke: #A80036; stroke-width: 1.5;" width="216" x="25144.5" y="77.9531"/><ellipse cx="25159.5" cy="93.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25162.4688,99.5938 Q25161.8906,99.8906 25161.25,100.0313 Q25160.6094,100.1875 25159.9063,100.1875 Q25157.4063,100.1875 25156.0781,98.5469 Q25154.7656,96.8906 25154.7656,93.7656 Q25154.7656,90.6406 25156.0781,88.9844 Q25157.4063,87.3281 25159.9063,87.3281 Q25160.6094,87.3281 25161.25,87.4844 Q25161.9063,87.6406 25162.4688,87.9375 L25162.4688,90.6563 Q25161.8438,90.0781 25161.25,89.8125 Q25160.6563,89.5313 25160.0313,89.5313 Q25158.6875,89.5313 25158,90.6094 Q25157.3125,91.6719 25157.3125,93.7656 Q25157.3125,95.8594 25158,96.9375 Q25158.6875,98 25160.0313,98 Q25160.6563,98 25161.25,97.7344 Q25161.8438,97.4531 25162.4688,96.875 L25162.4688,99.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="184" x="25173.5" y="98.1074">_ObjectSignalDisconnectData</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25145.5" x2="25359.5" y1="109.9531" y2="109.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="25145.5" x2="25359.5" y1="117.9531" y2="117.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="123.9531"/><ellipse cx="25155.5" cy="128.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="25164.5" y="132.1636">method : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="136.7578"/><ellipse cx="25155.5" cy="141.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="25164.5" y="144.9683">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="149.5625"/><ellipse cx="25155.5" cy="154.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="25164.5" y="157.7729">target : Object *</text></a><!--MD5=[6f2b8bf6de67278d3387148d256017be]
class C_0000096380574950611570--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" target="_top" title="UndoRedo" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" xlink:show="new" xlink:title="UndoRedo" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="516.9688" id="C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.5;" width="1446" x="14667.5" y="4711.4531"/><ellipse cx="15353.75" cy="4727.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15356.7188,4733.0938 Q15356.1406,4733.3906 15355.5,4733.5313 Q15354.8594,4733.6875 15354.1563,4733.6875 Q15351.6563,4733.6875 15350.3281,4732.0469 Q15349.0156,4730.3906 15349.0156,4727.2656 Q15349.0156,4724.1406 15350.3281,4722.4844 Q15351.6563,4720.8281 15354.1563,4720.8281 Q15354.8594,4720.8281 15355.5,4720.9844 Q15356.1563,4721.1406 15356.7188,4721.4375 L15356.7188,4724.1563 Q15356.0938,4723.5781 15355.5,4723.3125 Q15354.9063,4723.0313 15354.2813,4723.0313 Q15352.9375,4723.0313 15352.25,4724.1094 Q15351.5625,4725.1719 15351.5625,4727.2656 Q15351.5625,4729.3594 15352.25,4730.4375 Q15352.9375,4731.5 15354.2813,4731.5 Q15354.9063,4731.5 15355.5,4731.2344 Q15356.0938,4730.9531 15356.7188,4730.375 L15356.7188,4733.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="15374.25" y="4731.6074">UndoRedo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14668.5" x2="16112.5" y1="4743.4531" y2="4743.4531"/><ellipse cx="14678.5" cy="4754.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="14687.5" y="4757.6636">UndoRedo() : void</text><ellipse cx="14678.5" cy="4767.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="14687.5" y="4770.4683">~UndoRedo() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="14668.5" x2="16112.5" y1="4777.0625" y2="4777.0625"/><ellipse cx="14678.5" cy="4788.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="14687.5" y="4791.2729">_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="14678.5" cy="4800.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="14687.5" y="4804.0776">_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="14678.5" cy="4813.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="14687.5" y="4816.8823">_get_class_namev() const : const StringName *</text><ellipse cx="14678.5" cy="4826.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1406" x="14687.5" y="4829.687">add_do_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="14678.5" cy="4839.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="14687.5" y="4842.4917">add_do_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="14678.5" cy="4852.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="14687.5" y="4855.2964">add_do_reference(Object * p_object) : void</text><ellipse cx="14678.5" cy="4864.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1420" x="14687.5" y="4868.1011">add_undo_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="14678.5" cy="4877.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="549" x="14687.5" y="4880.9058">add_undo_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="14678.5" cy="4890.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="14687.5" y="4893.7104">add_undo_reference(Object * p_object) : void</text><ellipse cx="14678.5" cy="4903.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="14687.5" y="4906.5151">clear_history(bool p_increase_version = true) : void</text><ellipse cx="14678.5" cy="4916.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="14687.5" y="4919.3198">commit_action() : void</text><ellipse cx="14678.5" cy="4928.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="14687.5" y="4932.1245">create_action(const String &amp; p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void</text><ellipse cx="14678.5" cy="4941.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="14687.5" y="4944.9292">get_category_static() : String</text><ellipse cx="14678.5" cy="4954.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="14687.5" y="4957.7339">get_class() const : String</text><ellipse cx="14678.5" cy="4967.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="14687.5" y="4970.5386">get_class_ptr_static() : void *</text><ellipse cx="14678.5" cy="4980.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="14687.5" y="4983.3433">get_class_static() : String</text><ellipse cx="14678.5" cy="4992.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="14687.5" y="4996.1479">get_current_action_name() const : String</text><ellipse cx="14678.5" cy="5005.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="14687.5" y="5008.9526">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="14678.5" cy="5018.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="14687.5" y="5021.7573">get_parent_class_static() : String</text><ellipse cx="14678.5" cy="5031.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="14687.5" y="5034.562">get_save_class() const : String</text><ellipse cx="14678.5" cy="5044.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="14687.5" y="5047.3667">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="14678.5" cy="5056.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="14687.5" y="5060.1714">get_version() const : uint64_t</text><ellipse cx="14678.5" cy="5069.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="14687.5" y="5072.9761">has_redo() : bool</text><ellipse cx="14678.5" cy="5082.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="14687.5" y="5085.7808">has_undo() : bool</text><ellipse cx="14678.5" cy="5095.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="14687.5" y="5098.5854">inherits_static() : String</text><ellipse cx="14678.5" cy="5108.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="14687.5" y="5111.3901">initialize_class() : void</text><ellipse cx="14678.5" cy="5120.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="14687.5" y="5124.1948">is_class(const String &amp; p_class) const : bool</text><ellipse cx="14678.5" cy="5133.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="14687.5" y="5136.9995">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="14678.5" cy="5146.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="14687.5" y="5149.8042">is_committing_action() const : bool</text><ellipse cx="14678.5" cy="5159.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="14687.5" y="5162.6089">redo() : bool</text><ellipse cx="14678.5" cy="5172.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="519" x="14687.5" y="5175.4136">set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5185.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="566" x="14687.5" y="5188.2183">set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5197.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="583" x="14687.5" y="5201.0229">set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5210.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="14687.5" y="5213.8276">undo() : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14668.5" x2="16112.5" y1="5220.4219" y2="5220.4219"/></a><!--MD5=[9ad247f9a1f402d5bcd303a8e9ade6db]
class C_0000762417759113755306--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" target="_top" title="_ArrayVariantSortCustom" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" xlink:show="new" xlink:title="_ArrayVariantSortCustom" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1bb34djkekh3p)" height="86.4141" id="C_0000762417759113755306" style="stroke: #A80036; stroke-width: 1.5;" width="390" x="25395.5" y="77.9531"/><ellipse cx="25508.25" cy="93.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25511.2188,99.5938 Q25510.6406,99.8906 25510,100.0313 Q25509.3594,100.1875 25508.6563,100.1875 Q25506.1563,100.1875 25504.8281,98.5469 Q25503.5156,96.8906 25503.5156,93.7656 Q25503.5156,90.6406 25504.8281,88.9844 Q25506.1563,87.3281 25508.6563,87.3281 Q25509.3594,87.3281 25510,87.4844 Q25510.6563,87.6406 25511.2188,87.9375 L25511.2188,90.6563 Q25510.5938,90.0781 25510,89.8125 Q25509.4063,89.5313 25508.7813,89.5313 Q25507.4375,89.5313 25506.75,90.6094 Q25506.0625,91.6719 25506.0625,93.7656 Q25506.0625,95.8594 25506.75,96.9375 Q25507.4375,98 25508.7813,98 Q25509.4063,98 25510,97.7344 Q25510.5938,97.4531 25511.2188,96.875 L25511.2188,99.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="156" x="25528.75" y="98.1074">_ArrayVariantSortCustom</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25396.5" x2="25784.5" y1="109.9531" y2="109.9531"/><ellipse cx="25406.5" cy="120.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="25415.5" y="124.1636">operator()(const Variant &amp; p_l, const Variant &amp; p_r) const : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25396.5" x2="25784.5" y1="130.7578" y2="130.7578"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25401.5" y="136.7578"/><ellipse cx="25406.5" cy="141.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="25415.5" y="144.9683">func : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25401.5" y="149.5625"/><ellipse cx="25406.5" cy="154.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="25415.5" y="157.7729">obj : Object *</text></a><!--MD5=[67369f02025bab145a8745314f1215ba]
reverse link C_0000699772808699382057 to C_0001357046052919104842--><path d="M25070.94,5045.9931 C25079.91,5513.4231 25127.92,8014.8831 25133.06,8282.2931 " fill="none" id="C_0000699772808699382057&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25070.69,5032.7631,25066.8028,5038.8368,25070.9141,5044.761,25074.8014,5038.6874,25070.69,5032.7631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="25125.5" y="7755.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="36" x="25135.5" y="7762.02">count</text><!--MD5=[2ffeeed3545e7b157c0ce9e8e5104c4e]
reverse link C_0001531814603945772616 to C_0001578539238208480863--><path d="M14554.75,1066.6131 C14828.99,1170.1531 15131.65,1322.0831 15352.5,1536.9531 C15437.03,1619.1931 15478.56,1760.6031 15492.22,1816.1131 " fill="none" id="C_0001531814603945772616&lt;-C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.53,1062.0331,14546.7465,1067.883,14553.7681,1066.2408,14549.5516,1060.3909,14542.53,1062.0331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15307.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="15317.5" y="1503.02">signal_map</text><!--MD5=[72f037eff370e80d2cbcf7aa189b1853]
reverse link C_0001531814603945772616 to C_0000751300156436098886--><path d="M14555.23,985.5331 C14921.16,1076.5931 15354.5,1241.3031 15643.5,1536.9531 C15722.38,1617.6531 15742.19,1760.5831 15747.01,1816.3031 " fill="none" id="C_0001531814603945772616&lt;-C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.52,982.3931,14547.3863,987.7147,14554.1702,985.2694,14549.3039,979.9479,14542.52,982.3931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15610.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="77" x="15620.5" y="1503.02">connections</text><!--MD5=[24eeaa45737871c41c3c567256e955dc]
reverse link C_0001531814603945772616 to C_0000699772808699382057--><path d="M14555.72,877.9631 C16789.43,890.0131 23764.25,972.8831 24590.5,1536.9531 C24874.22,1730.6431 24860.9,1889.3131 24950.5,2220.9531 C25231.91,3262.5231 25109.29,4606.0731 25076.6,4907.2531 " fill="none" id="C_0001531814603945772616&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.67,877.8931,14548.6479,881.926,14554.6698,877.9591,14548.6919,873.9262,14542.67,877.8931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24931.5" y="1838.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="24941.5" y="1845.02">_lock_index</text><!--MD5=[28ef588d9e338ac6e5c120423ba24700]
reverse link C_0001531814603945772616 to C_0000051860595756965531--><path d="M14555.76,936.2231 C14986.83,1010.1531 15522.31,1174.0831 15853.5,1536.9531 C15927.32,1617.8331 15928.71,1760.6531 15926.12,1816.3231 " fill="none" id="C_0001531814603945772616&lt;-C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.71,934.0131,14547.9574,938.9593,14554.5413,936.018,14549.294,931.0718,14542.71,934.0131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15817.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="115" x="15827.5" y="1503.02">change_receptors</text><!--MD5=[ed9dc36b2f21e467e266d4389da6816d]
link C_0001531814603945772616 to C_0000933379568804427881--><path d="M14542.72,977.4931 C15118.8,1079.0931 15886.27,1254.1431 16085.5,1489.9531 C16150.79,1567.2331 16146.59,1691.0831 16135.54,1768.7131 " fill="none" id="C_0001531814603945772616-&gt;C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="16134.8,1773.7631,16140.0427,1765.4256,16135.5131,1768.8142,16132.1245,1764.2846,16134.8,1773.7631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16099.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="16109.5" y="1503.02">_rc</text><!--MD5=[465ae2a41eb5396ad803817584c492e2]
link C_0000933379568804427881 to C_0001531814603945772616--><path d="M16111.11,1773.8231 C16094.05,1690.8931 16051.43,1551.5831 15951.5,1489.9531 C15522.76,1225.5331 14974.1,1069.8231 14547.8,981.4031 " fill="none" id="C_0000933379568804427881-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.79,980.3631,14550.7924,986.1044,14547.6862,981.3766,14552.414,978.2705,14542.79,980.3631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15971.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="25" x="15981.5" y="1503.02">_ptr</text><!--MD5=[a69d5e275dd95acce759534bd27bf2c9]
reverse link C_0001531814603945772616 to C_0001682405743486361214--><path d="M13185.18,888.1031 C12053.66,921.9931 9862.27,1050.4231 9286.5,1536.9531 C9070.07,1719.8431 9308.94,1962.2631 9091.5,2143.9531 C8892.29,2310.4131 8685.8,2027.6731 8512.5,2220.9531 C8320.16,2435.4731 8433.76,4690.7731 8447.24,4945.5731 " fill="none" id="C_0001531814603945772616&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13198.44,887.7031,13192.324,883.8828,13186.4453,888.059,13192.5613,891.8793,13198.44,887.7031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9289.5" y="1838.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="139" x="9299.5" y="1845.02">editor_section_folding</text><!--MD5=[e890cc5c6d0e6bb285e3e89ed5d4bd98]
link C_0001531814603945772616 to C_0001735438654351294549--><path d="M13870.5,1460.0331 C13870.5,1526.9731 13870.5,1591.1531 13870.5,1647.0631 " fill="none" id="C_0001531814603945772616-&gt;C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13870.5,1652.1031,13874.5,1643.1031,13870.5,1647.1031,13866.5,1643.1031,13870.5,1652.1031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13873.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="13883.5" y="1503.02">script_instance</text><!--MD5=[c5e4261359ae37cd97c8a7ca8ed3d9da]
reverse link C_0001531814603945772616 to C_0002025812040042972946--><path d="M14553.9,1190.8931 C14717.18,1286.7131 14882.28,1402.8131 15014.5,1536.9531 C15071.83,1595.1131 15115.88,1676.6531 15144.61,1740.4231 " fill="none" id="C_0001531814603945772616&lt;-C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.65,1184.3131,14545.8141,1190.793,14553.0125,1190.3645,14549.8484,1183.8847,14542.65,1184.3131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14979.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="14989.5" y="1503.02">script</text><!--MD5=[c05e40dce802254568c704f572fe66ef]
reverse link C_0001531814603945772616 to C_0001299121424291583786--><path d="M14501.52,1469.8031 C14522.35,1492.2231 14542.74,1514.6431 14562.5,1536.9531 C14588.69,1566.5131 14615.07,1598.9231 14640.1,1631.1931 " fill="none" id="C_0001531814603945772616&lt;-C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14492.56,1460.1931,14493.7259,1467.3094,14500.7431,1468.9702,14499.5772,1461.8539,14492.56,1460.1931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14530.5" y="1496.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="14540.5" y="1503.02">metadata</text><!--MD5=[67cf5364a880881dbfa9463a33b38abe]
reverse link C_0001531814603945772616 to C_0001858199404643284193--><path d="M14555.67,907.3331 C16783.24,1013.8131 23677.5,1380.4431 23677.5,1839.4531 C23677.5,1839.4531 23677.5,1839.4531 23677.5,8307.4531 C23677.5,9159.6931 22694.26,8835.4131 21842.5,8863.9531 C18470.57,8976.9431 14348.68,9041.3631 13461.73,9054.4531 " fill="none" id="C_0001531814603945772616&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.64,906.7031,14548.4396,910.9885,14554.626,907.2833,14548.8264,902.9979,14542.64,906.7031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23680.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="23690.5" y="4974.52">_class_name</text><!--MD5=[9f9c127cde67f8af23da46dde2ce4ce8]
link C_0001531814603945772616 to C_0001858199404643284193--><path d="M14542.69,890.5931 C16568.74,939.2131 22523.87,1116.7031 23283.5,1536.9531 C23612.77,1719.1131 23665.87,1863.1831 23782.5,2220.9531 C23877.17,2511.3531 23793.47,7413.7031 23782.5,7718.9531 C23764.93,8207.9031 24054.46,8476.0631 23703.5,8816.9531 C23512.2,9002.7631 14828.47,9049.9231 13467.2,9056.1831 " fill="none" id="C_0001531814603945772616-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13461.75,9056.2131,13470.7727,9060.1616,13466.7499,9056.1846,13470.727,9052.1618,13461.75,9056.2131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23829.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="64" x="23839.5" y="4974.52">_class_ptr</text><!--MD5=[d327e113621300c939a9250d421ffcd5]
reverse link C_0001531814603945772616 to C_0001357046052919104842--><path d="M14555.93,891.7431 C16926.29,949.5531 24651.97,1165.8431 25023.5,1536.9531 C25230.13,1743.3531 24901.64,1965.6731 25087.5,2190.9531 C25117.3,2227.0731 25160.5,2183.4231 25188.5,2220.9531 C25279.83,2343.3531 25195.64,7566.3931 25188.5,7718.9531 C25178.21,7938.8431 25146.34,8203.6031 25136.46,8282.3131 " fill="none" id="C_0001531814603945772616&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.51,891.4231,14548.4116,895.567,14554.5065,891.7132,14548.6049,887.5693,14542.51,891.4231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="25090.5" y="2180.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="150" x="25100.5" y="2187.02">instance_binding_count</text><!--MD5=[9f6312e8f49fb01007aa82352e3e18a3]
reverse link C_0001531814603945772616 to C_0000104564426296396960--><path d="M13193.89,1198.9131 C13060.93,1290.9331 12935.54,1403.3231 12847.5,1536.9531 C12677.86,1794.4331 12759.38,1913.8731 12731.5,2220.9531 C12621.02,3437.8331 12710.12,6498.1231 12659.5,7718.9531 C12658.46,7744.0631 12657.24,7769.7731 12655.88,7795.7331 " fill="none" id="C_0001531814603945772616&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13198.22,1195.9231,13188.5418,1197.7485,13194.1065,1198.7655,13193.0895,1204.3302,13198.22,1195.9231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12741.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12748.5" y="2187.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M14547.77,882.9631 C16651.88,909.5431 22982.22,1027.5031 23774.5,1489.9531 C23851.36,1534.8131 23906.76,1617.2531 23943.59,1690.7931 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14542.77,882.8931,14551.7119,887.0213,14547.7695,882.9645,14551.8262,879.0221,14542.77,882.8931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23798.5" cy="1499.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23805.5" y="1503.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M14563,875.8331 C16704.35,881.2931 23119.87,943.5531 23866.5,1489.9531 C23930.54,1536.8231 23964.2,1618.3931 23981.9,1690.9431 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.66,882.8331,14542.68,875.7831,14562.69,868.8331,14562.66,882.8331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bfb0bd8a69f4f74c042f91302129fecd]
reverse link C_0001531814603945772616 to C_0000132048052014479231--><path d="M14547.82,969.6031 C15205.74,1072.5031 16145.55,1254.8631 16428.5,1489.9531 C16525.35,1570.4231 16564.3,1723.2631 16577.99,1797.2431 " fill="none" id="C_0001531814603945772616&lt;-C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14542.52,968.7831,14550.7955,974.1231,14547.4602,969.5541,14552.0292,966.2188,14542.52,968.7831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16449.5" cy="1499.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16456.5" y="1503.02">«friend»</text><!--MD5=[b349530a27aaee85f524a15949be3331]
link C_0000132048052014479231 to C_0001531814603945772616--><path d="M16589.8,1797.1631 C16596.4,1724.0931 16598.35,1573.9831 16517.5,1489.9531 C16249.48,1211.4031 15239.87,1037.8731 14547.97,949.0431 " fill="none" id="C_0000132048052014479231-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.89,948.3931,14551.3008,953.5174,14547.8485,949.0362,14552.3297,945.5838,14542.89,948.3931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16535.5" cy="1499.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="16542.5" y="1503.02">obj</text><!--MD5=[ffb696d15bc654aa90b9653d940ba57b]
link C_0000219886141561409828 to C_0001531814603945772616--><path d="M14142.63,170.7131 C14132.28,197.4531 14118.25,233.7231 14101.98,275.7731 " fill="none" id="C_0000219886141561409828-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14099.3856" cy="282.4717" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="14102.2712" x2="14096.5" y1="275.0102" y2="289.9331"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="14106.8471" x2="14091.9241" y1="285.3573" y2="279.5861"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5865,213.0231 C5892.67,231.6331 5923.41,248.8931 5954.5,259.9531 C7278.03,730.9231 11512.27,841.1531 13183.12,866.5231 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13190.3909" cy="866.6312" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13182.3919" x2="13198.39" y1="866.5093" y2="866.7531"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13190.5128" x2="13190.269" y1="858.6322" y2="874.6303"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5937.04,207.9531 C5942.88,209.7631 5948.71,211.4331 5954.5,212.9531 C7315.65,569.3731 11536.28,777.5631 13193.1,847.3731 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.25,847.5931,13189.4295,843.2114,13193.2546,847.379,13189.087,851.2041,13198.25,847.5931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6126.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="6133.5" y="256.02">source</text><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5805.37,213.0131 C5819.76,231.4931 5837.17,248.7031 5857.5,259.9531 C6491.75,610.8931 11376.57,796.6731 13193.06,854.1831 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.38,854.3531,13189.5101,850.0724,13193.3825,854.1961,13189.2588,858.0684,13198.38,854.3531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5863.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="5870.5" y="256.02">target</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M5560.86,125.0831 C4921.65,136.3131 2890.95,179.9731 2245.5,289.9531 C1349.88,442.5631 286.5,-34.5769 286.5,873.9531 C286.5,873.9531 286.5,873.9531 286.5,8307.4531 C286.5,8535.1631 187.04,8648.7131 340.5,8816.9531 C412.28,8895.6431 469.59,8852.6531 575.5,8863.9531 C1877.53,9002.8631 11687.73,9050.0731 13115.41,9056.2331 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5573.86,124.8531,5567.7905,120.9593,5561.8619,125.0643,5567.9313,128.9581,5573.86,124.8531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="292.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="299.5" y="2187.02">signal</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M5560.39,124.3431 C4595.34,136.6331 374.84,195.6931 278.5,289.9531 C117.82,447.1631 -162.04,8185.3431 260.5,8816.9531 C290.06,8861.1431 318.5,8852.9031 370.5,8863.9531 C1023.17,9002.6331 11626.17,9050.2631 13115.27,9056.2831 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5573.67,124.1831,5567.6178,120.2626,5561.671,124.3414,5567.7233,128.2619,5573.67,124.1831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="125.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="132.5" y="2187.02">method</text><!--MD5=[823a143a71700de2dee8f67b9b5676a1]
link C_0000250357724807605097 to C_0001531814603945772616--><path d="M13511.74,163.9931 C13525.57,191.3631 13545.34,230.4731 13568.57,276.4431 " fill="none" id="C_0000250357724807605097-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13571.7688" cy="282.7845" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13568.1576" x2="13575.38" y1="275.646" y2="289.9231"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13578.9074" x2="13564.6302" y1="279.1734" y2="286.3957"/><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13869.02,170.5231 C13868.42,192.6231 13867.8,219.1031 13867.5,242.9531 C13867.41,250.5031 13867.48,252.3931 13867.5,259.9531 C13867.52,268.1231 13867.54,276.3431 13867.56,284.6231 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13867.58,289.7831,13871.5543,280.7717,13867.5657,284.7831,13863.5543,280.7946,13867.58,289.7831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13870.5" y="249.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="13880.5" y="256.02">instances</text><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13909.9,170.7031 C13924.4,191.6531 13939.09,217.2031 13946.5,242.9531 C13948.59,250.2131 13946.96,252.4131 13946.5,259.9531 C13945.99,268.1631 13945.45,276.4331 13944.87,284.7531 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13944.51,289.9431,13949.118,281.2388,13944.853,284.9549,13941.1369,280.6899,13944.51,289.9431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13950.5" y="249.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="105" x="13960.5" y="256.02">instance_checks</text><!--MD5=[8b696ada1a164533cee31d9d01e1d4f0]
reverse link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13827.66,174.8631 C13813.95,194.9631 13800.52,218.8531 13793.5,242.9531 C13791.39,250.2031 13793.03,252.4131 13793.5,259.9531 C13794.12,269.8731 13794.79,279.8731 13795.52,289.9431 " fill="none" id="C_0002064336919270342687&lt;-C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13830.59,170.6331,13822.183,175.7636,13827.7477,174.7467,13828.7646,180.3113,13830.59,170.6331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13799.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13806.5" y="256.02">«friend»</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12916.16,8817.0731 C12930.53,8833.3731 12945.32,8849.0631 12960.5,8863.9531 C13003.97,8906.5931 13058.65,8943.5431 13110.83,8973.3831 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.23,8975.8831,13109.3863,8967.9553,13110.8844,8973.4101,13105.4295,8974.9082,13115.23,8975.8831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12966.5" cy="8856.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="47" x="12973.5" y="8860.02">classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13017.39,8817.1331 C13032.07,8833.1131 13046.79,8848.7631 13061.5,8863.9531 C13077.22,8880.1931 13094.19,8896.5131 13111.52,8912.4031 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.46,8916.0031,13111.519,8906.9771,13111.7707,8912.6284,13106.1194,8912.8801,13115.46,8916.0031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13067.5" cy="8856.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="170" x="13074.5" y="8860.02">resource_base_extensions</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13231.46,8817.2931 C13237.72,8827.0731 13243.74,8836.9631 13249.5,8846.9531 C13257.04,8860.0131 13263.16,8874.2131 13268.14,8888.8731 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13269.78,8893.8631,13270.7552,8884.0627,13268.2117,8889.1154,13263.1589,8886.5719,13269.78,8893.8631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13263.5" cy="8856.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="103" x="13270.5" y="8860.02">compat_classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12586.99,8817.1931 C12594.94,8833.5331 12604.38,8849.1931 12615.5,8863.9531 C12675.15,8943.1131 12931.96,8999.7431 13110.5,9030.4231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-3" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.5,9031.2831,13107.3031,9025.8233,13110.5715,9030.4403,13105.9545,9033.7088,13115.5,9031.2831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12621.5" cy="8856.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="92" x="12628.5" y="8860.02">default_values</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12744.26,8817.2231 C12755.62,8833.6931 12768.01,8849.3531 12781.5,8863.9531 C12866.92,8956.3831 13001.31,9004.9031 13110.26,9030.1731 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-4" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.43,9031.3631,13107.5485,9025.457,13110.5559,9030.2482,13105.7647,9033.2556,13115.43,9031.3631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12787.5" cy="8856.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="12794.5" y="8860.02">default_values_cached</text><!--MD5=[b642425c83424b61917059e5da81b445]
reverse link C_0000218299049716973303 to C_0001858199404643284193--><path d="M18860.46,6067.8431 C18780.39,6628.3031 18592.91,7282.3131 18167.5,7718.9531 C17479.78,8424.8331 14248.71,8921.3031 13461.67,9033.1031 " fill="none" id="C_0000218299049716973303&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="18862.33,6054.6231,18857.5317,6060.0061,18860.6551,6066.5057,18865.4534,6061.1227,18862.33,6054.6231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="18080.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="18090.5" y="8311.02">_class_name</text><!--MD5=[b604a94a8074bade127c96b8a1da6977]
reverse link C_0000218299049716973303 to C_0000104564426296396960--><path d="M18912.54,6059.7431 C18851.76,6648.7731 18666.14,7332.8831 18167.5,7718.9531 C18135.43,7743.7831 15288.05,7748.2231 15247.5,7748.9531 C15196.94,7749.8631 13475.9,7781.3031 13427.5,7795.9531 C13418.37,7798.7231 13409.23,7801.6131 13400.11,7804.6431 " fill="none" id="C_0000218299049716973303&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="18913.08,6054.5531,18908.1776,6063.0952,18912.567,6059.5267,18916.1354,6063.9161,18913.08,6054.5531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15253.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15260.5" y="7762.02">«friend»</text><!--MD5=[70070708faa8146b449b4995936967c8]
reverse link C_0001531814603945772616 to C_0000218299049716973303--><path d="M14562.7,999.0531 C15655.15,1208.0131 17703.03,1664.1531 18167.5,2220.9531 C18555.14,2685.6531 18741.47,3334.6331 18830.4,3885.2431 " fill="none" id="C_0001531814603945772616&lt;-C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.01,1005.8631,14542.68,995.2331,14563.64,992.1131,14561.01,1005.8631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f728ac2c311f9c9f533bae5aa126394c]
reverse link C_0001778859257025660860 to C_0001858199404643284193--><path d="M24001.61,2003.3031 C24001.95,3042.7431 23997.98,8740.7431 23870.5,8863.9531 C23675.28,9052.6231 14816.48,9057.4231 13461.55,9057.0531 " fill="none" id="C_0001778859257025660860&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24001.61,1990.1731,23997.6166,1996.1775,24001.6232,2002.1731,24005.6166,1996.1687,24001.61,1990.1731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23951.5" y="7755.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="23961.5" y="7762.02">_class_name</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M24132.69,1999.6531 C24209.01,2077.1831 24312.69,2160.3531 24427.5,2190.9531 C24483.74,2205.9431 24909.63,2179.5031 24950.5,2220.9531 C25337.97,2613.8931 25122.8,4537.2231 25077.32,4907.2931 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24123.52,1990.2231,24124.8407,1997.3123,24131.8925,1998.8197,24130.5718,1991.7306,24123.52,1990.2231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24430.5" y="2180.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="53" x="24440.5" y="2187.02">refcount</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M24138.2,1999.6031 C24193.42,2053.7531 24261.19,2109.3431 24333.5,2143.9531 C24364.23,2158.6631 24602.69,2186.7231 24636.5,2190.9531 C24671.28,2195.3031 24926.37,2195.5331 24950.5,2220.9531 C25330.34,2621.0631 25121.45,4537.6031 25077.15,4907.1931 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24128.75,1990.2231,24130.1917,1997.2886,24137.2682,1998.6754,24135.8265,1991.6099,24128.75,1990.2231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24639.5" y="2180.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="79" x="24649.5" y="2187.02">refcount_init</text><!--MD5=[0a2b60ba7d2c96e1d65f8bc42ff8af0b]
reverse link C_0001778859257025660860 to C_0000104564426296396960--><path d="M23796.67,1964.5431 C23709.46,2028.9731 23616.83,2116.3331 23568.5,2220.9531 C23504.45,2359.6131 23597.62,7611.0731 23489.5,7718.9531 C23470.48,7737.9231 19648.36,7765.7231 19621.5,7765.9531 C19535.22,7766.6831 13492.21,7771.4031 13409.5,7795.9531 C13406.37,7796.8831 13403.24,7797.8331 13400.11,7798.7931 " fill="none" id="C_0001778859257025660860&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="23800.82,1961.4931,23791.1979,1963.5942,23796.7893,1964.4518,23795.9318,1970.0433,23800.82,1961.4931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23574.5" cy="4970.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23581.5" y="4974.52">«friend»</text><!--MD5=[2cf028d42d6a2db252d6d720b88d2c11]
link C_0001649884439586022807 to C_0001531814603945772616--><path d="M16773.5,4813.8431 C16697.08,4388.1031 16480.41,3165.1031 16327.5,2143.9531 C16307.35,2009.3931 16329.73,1645.3431 16247.5,1536.9531 C16041.75,1265.7531 15175.16,1076.5131 14547.66,971.9931 " fill="none" id="C_0001649884439586022807-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.6,971.1531,14550.8149,976.586,14547.5312,971.9797,14552.1374,968.6961,14542.6,971.1531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16330.5" y="1838.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="16340.5" y="1845.02">owner</text><!--MD5=[9db7a3eb346815fb65d8e4265bbdc5b6]
reverse link C_0001735438654351294549 to C_0001649884439586022807--><path d="M14249.85,2036.6431 C14349.16,2079.4931 14457.8,2119.3731 14562.5,2143.9531 C14732.42,2183.8431 15996.92,2109.8031 16131.5,2220.9531 C16935.12,2884.6731 16866.74,4336.8131 16819.9,4813.7631 " fill="none" id="C_0001735438654351294549&lt;-C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14246.95,2043.0131,14231.42,2028.6031,14252.55,2030.1831,14246.95,2043.0131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2191a2c55081528738a9601d975d7e81]
reverse link C_0000970940027123558604 to C_0001858199404643284193--><path d="M19933.84,5247.9931 C20006.54,5768.9631 20096.68,6914.4831 19649.5,7718.9531 C19253.82,8430.7731 18948.7,8540.9431 18182.5,8816.9531 C17731.44,8979.4431 14279.59,9041.8631 13461.82,9054.4531 " fill="none" id="C_0000970940027123558604&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="19932.02,5235.0431,19928.8895,5241.5393,19933.682,5246.9275,19936.8124,5240.4313,19932.02,5235.0431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="19599.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="19609.5" y="8311.02">_class_name</text><!--MD5=[d541019a02b5abc817eac1d3ff5a0498]
reverse link C_0000970940027123558604 to C_0000104564426296396960--><path d="M19965.89,5239.9231 C20109.85,5797.0831 20342.05,7078.7231 19649.5,7718.9531 C19610.91,7754.6331 15918.05,7747.9331 15865.5,7748.9531 C15621.87,7753.6931 15561.11,7760.2431 15317.5,7765.9531 C15212.52,7768.4131 13528.16,7766.0331 13427.5,7795.9531 C13418.35,7798.6731 13409.21,7801.5231 13400.07,7804.5131 " fill="none" id="C_0000970940027123558604&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="19964.62,5235.0231,19962.9828,5244.7349,19965.8629,5239.8662,19970.7317,5242.7463,19964.62,5235.0231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15871.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15878.5" y="7762.02">«friend»</text><!--MD5=[af31877db6ec92759d70e67f8199ce9a]
reverse link C_0001531814603945772616 to C_0000970940027123558604--><path d="M14562.62,977.5731 C15290.45,1090.4031 16466.48,1289.6431 17465.5,1536.9531 C17588.92,1567.5031 19569.87,2121.8331 19649.5,2220.9531 C20236.43,2951.4631 20065.12,4170.8631 19951.83,4704.8831 " fill="none" id="C_0001531814603945772616&lt;-C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.52,984.4831,14542.83,974.5131,14563.66,970.6531,14561.52,984.4831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f972d27a027a57bd8d2a6ea69d3db7f2]
reverse link C_0001823345232236209470 to C_0001858199404643284193--><path d="M19973.2,126.2831 C20769.71,139.6531 23070.43,183.0431 23404.5,242.9531 C24276.17,399.2731 25294.5,-11.6269 25294.5,873.9531 C25294.5,873.9531 25294.5,873.9531 25294.5,8307.4531 C25294.5,8535.4631 25401.51,8661.7231 25234.5,8816.9531 C24887.46,9139.5031 24643.07,8849.3031 24169.5,8863.9531 C19817.2,8998.5631 14482.51,9047.2231 13461.72,9055.5931 " fill="none" id="C_0001823345232236209470&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="19960.14,126.0631,19966.0733,130.1615,19972.1384,126.2609,19966.2051,122.1626,19960.14,126.0631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25300.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25307.5" y="2187.02">name</text><!--MD5=[d03f40f4e0550f14d97c47cc13da68a0]
link C_0001823345232236209470 to C_0001531814603945772616--><path d="M19444.85,155.1731 C18591.27,265.2431 15837.01,620.3831 14547.8,786.6231 " fill="none" id="C_0001823345232236209470-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.61,787.2931,14552.0497,790.1025,14547.5685,786.6501,14551.0208,782.1689,14542.61,787.2931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="18730.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="18" x="18737.5" y="256.02">ptr</text><!--MD5=[defcce9c8f425e144c84d1e88f84777b]
reverse link C_0001191393512042218074 to C_0001858199404643284193--><path d="M22086.53,5177.7431 C22199.74,5848.9431 22448.92,7971.9731 21258.5,8816.9531 C20929.68,9050.3531 14595.5,9057.7031 13461.52,9057.1431 " fill="none" id="C_0001191393512042218074&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="22084.3,5164.5731,22081.3587,5171.1571,22086.3049,5176.4045,22089.2462,5169.8205,22084.3,5164.5731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21975.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="21985.5" y="8311.02">_class_name</text><!--MD5=[b77e23c3a90867c3de8e35bacb429255]
link C_0001191393512042218074 to C_0001191393512042218074--><path d="M22087.01,4775.2431 C22209.02,4280.9831 22395,4345.8931 22395,4969.9531 C22395,5591.8831 22210.29,5658.4731 22088.26,5169.7131 " fill="none" id="C_0001191393512042218074-&gt;C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="22087.01,5164.6631,22085.292,5174.361,22088.2126,5169.5164,22093.0572,5172.4369,22087.01,5164.6631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="22406,4965.5195,22410,4969.5195,22406,4973.5195,22402,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="22413" y="4974.52">singleton</text><!--MD5=[f80c7ee04ef556cee553628e7a65d3d1]
reverse link C_0001191393512042218074 to C_0000104564426296396960--><path d="M22099.33,5169.7631 C22219.89,5683.3631 22455.71,7060.1931 21717.5,7718.9531 C21691.15,7742.4731 16666.69,7745.8831 16631.5,7748.9531 C16586.59,7752.8731 16576.4,7761.9431 16531.5,7765.9531 C16359.73,7781.2831 13592.95,7747.3231 13427.5,7795.9531 C13418.34,7798.6431 13409.19,7801.4731 13400.04,7804.4231 " fill="none" id="C_0001191393512042218074&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="22098.19,5164.8831,22096.3782,5174.5639,22099.3455,5169.7478,22104.1617,5172.7151,22098.19,5164.8831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16637.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16644.5" y="7762.02">«friend»</text><!--MD5=[ab8fd2992e044c54f6cd905a344680fd]
reverse link C_0001531814603945772616 to C_0001191393512042218074--><path d="M14562.97,880.2131 C16317.27,907.7631 20858.33,1089.1331 21717.5,2220.9531 C22311.64,3003.6331 22167.13,4289.4331 22084.94,4775.0931 " fill="none" id="C_0001531814603945772616&lt;-C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.66,887.2131,14542.78,879.9031,14562.88,873.2131,14562.66,887.2131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[105b5b587ddf98014e1a550a5acdc50e]
reverse link C_0000066148521405667716 to C_0001858199404643284193--><path d="M7717.26,1985.4031 C7254.89,2090.5431 6708.71,2215.6631 6704.5,2220.9531 C6609.39,2340.4531 6644.64,7578.4531 6704.5,7718.9531 C6980.59,8367.0131 7201.5,8536.0631 7847.5,8816.9531 C8339.86,9031.0331 12241.38,9054.1631 13115.24,9056.6531 " fill="none" id="C_0000066148521405667716&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7730.23,1982.4531,7723.4916,1979.8853,7718.5296,1985.1177,7725.268,1987.6856,7730.23,1982.4531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6727.5" y="7755.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6737.5" y="7762.02">_class_name</text><!--MD5=[2dc6087e93f271bd3bd7602f5b86331c]
reverse link C_0000066148521405667716 to C_0001682405743486361214--><path d="M8371.55,2157.1831 C8372.62,2178.7631 8373.62,2200.1731 8374.5,2220.9531 C8422.56,3353.4131 8445.14,4749.8131 8448.15,4945.7131 " fill="none" id="C_0000066148521405667716&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="8370.89,2144.1031,8367.1984,2150.2976,8371.4965,2156.0878,8375.1881,2149.8933,8370.89,2144.1031" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8379.5,2178.0195,8383.5,2182.0195,8379.5,2186.0195,8375.5,2182.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="108" x="8386.5" y="2187.02">custom_features</text><!--MD5=[b1cdeb5c1d2293693591756cb414570e]
link C_0000066148521405667716 to C_0000066148521405667716--><path d="M8974.78,1804.2731 C8996.85,1813.8631 9009.5,1825.9231 9009.5,1840.4531 C9009.5,1853.8431 8998.75,1865.1431 8979.78,1874.3431 " fill="none" id="C_0000066148521405667716-&gt;C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8974.78,1876.6331,8984.6281,1876.5131,8979.324,1874.5469,8981.2902,1869.2427,8974.78,1876.6331" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9020.5,1836.0195,9024.5,1840.0195,9020.5,1844.0195,9016.5,1840.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="9027.5" y="1845.02">singleton</text><!--MD5=[3549a9a1546b9f3f927ae4be5a497360]
reverse link C_0000066148521405667716 to C_0000104564426296396960--><path d="M8321.72,2149.1531 C8320.02,2173.4231 8318.58,2197.5831 8317.5,2220.9531 C8310.48,2373.5131 8209.98,7610.4931 8317.5,7718.9531 C8351.39,7753.1431 11737.48,7734.8031 11783.5,7748.9531 C11812.02,7757.7231 11847.85,7774.1031 11888.53,7795.9031 " fill="none" id="C_0000066148521405667716&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="8322.08,2143.9731,8317.4472,2152.6643,8321.7227,2148.9603,8325.4267,2153.2359,8322.08,2143.9731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="8323.5" cy="4970.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="8330.5" y="4974.52">«friend»</text><!--MD5=[5f66742971e8c9e8cae80ea28ed781f8]
reverse link C_0001531814603945772616 to C_0000066148521405667716--><path d="M13178.37,917.2831 C12268.06,983.1431 10624.16,1141.8731 9260.5,1489.9531 C9166.6,1513.9231 9069.18,1544.7031 8974.53,1578.0431 " fill="none" id="C_0001531814603945772616&lt;-C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.95,910.2931,13198.4,915.8431,13178.95,924.2631,13177.95,910.2931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbb6989faf4ed278e5063ce8d06d64a7]
reverse link C_0000535376932101028371 to C_0001858199404643284193--><path d="M22996.63,5414.7531 C23086.66,6247.9631 23138.22,8032.9231 22077.5,8816.9531 C21897.66,8949.8831 14678.34,9040.5931 13461.71,9054.9531 " fill="none" id="C_0000535376932101028371&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="22995.2,5401.6431,22991.8762,5408.0425,22996.5049,5413.572,22999.8287,5407.1726,22995.2,5401.6431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="22797.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="22807.5" y="8311.02">_class_name</text><!--MD5=[491d9ca8506983be5dd6ad346fa76ecd]
link C_0000535376932101028371 to C_0000535376932101028371--><path d="M23099.86,4538.4131 C23248.21,4332.6331 23406.5,4476.4831 23406.5,4969.9531 C23406.5,5460.0431 23250.37,5605.2831 23102.9,5405.6631 " fill="none" id="C_0000535376932101028371-&gt;C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="23099.86,5401.4931,23101.9226,5411.1236,23102.8026,5405.5356,23108.3906,5406.4155,23099.86,5401.4931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23414.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="23424.5" y="4974.52">singleton</text><!--MD5=[aeb94eee531eb6d8f9e0dab2a65178b2]
reverse link C_0000535376932101028371 to C_0000104564426296396960--><path d="M23012.05,5406.5731 C23095.88,6027.4231 23138.24,7153.9731 22477.5,7718.9531 C22453.62,7739.3731 13457.65,7787.1131 13427.5,7795.9531 C13418.34,7798.6431 13409.19,7801.4631 13400.04,7804.4131 " fill="none" id="C_0000535376932101028371&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="23011.37,5401.5731,23008.6142,5411.0286,23012.0411,5406.5279,23016.5418,5409.9548,23011.37,5401.5731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="19553.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="19560.5" y="7762.02">«friend»</text><!--MD5=[ccb0f2e105ae37379c60a8eaf42ab781]
reverse link C_0001531814603945772616 to C_0000535376932101028371--><path d="M14563.08,907.1131 C16123.63,982.5231 19873.27,1194.3331 21089.5,1536.9531 C21751.46,1723.4331 22067.52,1668.7931 22477.5,2220.9531 C22986.8,2906.8731 23010.34,3954.7031 22976.01,4538.3331 " fill="none" id="C_0001531814603945772616&lt;-C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.47,914.0931,14542.83,906.1331,14563.15,900.1031,14562.47,914.0931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ee47356e384c9a8586af688e36c84f71]
reverse link C_0001370497546359815893 to C_0001858199404643284193--><path d="M17899.99,5529.5431 C18010.98,6162.8331 18069.84,7177.3531 17472.5,7718.9531 C17409.98,7775.6431 14501.66,7697.8531 14434.5,7748.9531 C14041.44,8047.9931 14476.96,8467.9431 14127.5,8816.9531 C14034.1,8910.2331 13679.14,8987.7231 13461.96,9027.6931 " fill="none" id="C_0001370497546359815893&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="17897.7,5516.5231,17894.8015,5523.126,17899.7817,5528.3412,17902.6802,5521.7383,17897.7,5516.5231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14378.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14388.5" y="8311.02">_class_name</text><!--MD5=[3adf581e5c7850b91ef14b43d83cd267]
link C_0001370497546359815893 to C_0001370497546359815893--><path d="M18049.55,4576.1431 C18071.17,4663.1931 18084.5,4794.4631 18084.5,4969.9531 C18084.5,5142.1831 18071.66,5271.8231 18050.74,5358.8731 " fill="none" id="C_0001370497546359815893-&gt;C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="18049.55,5363.7631,18055.5703,5355.9685,18050.7358,5358.9058,18047.7985,5354.0713,18049.55,5363.7631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="18092.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="18102.5" y="4974.52">singleton</text><!--MD5=[f0c11157ea1c302f0338a5d98b865e3f]
reverse link C_0001370497546359815893 to C_0000104564426296396960--><path d="M17898.7,5521.7331 C18010.67,6154.5531 18072.62,7175.4031 17472.5,7718.9531 C17437.52,7750.6331 14121.66,7747.0331 14074.5,7748.9531 C13786.43,7760.6731 13701.42,7706.0031 13427.5,7795.9531 C13418.33,7798.9631 13409.17,7802.1031 13400,7805.3531 " fill="none" id="C_0001370497546359815893&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="17897.79,5516.6331,17895.4181,5526.1921,17898.6606,5521.5568,17903.2959,5524.7992,17897.79,5516.6331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14080.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="14087.5" y="7762.02">«friend»</text><!--MD5=[fcb1dceefea1281ea342b1a8ab9dedf3]
reverse link C_0001531814603945772616 to C_0001370497546359815893--><path d="M14562.84,965.3231 C15225.34,1066.4231 16156.48,1254.6731 16383.5,1536.9531 C16468.42,1642.5431 16344.7,2049.1331 16441.5,2143.9531 C16605.63,2304.7231 17307.38,2061.2031 17472.5,2220.9531 C18053.95,2783.4631 17998.37,3796.9131 17892.62,4423.3831 " fill="none" id="C_0001531814603945772616&lt;-C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.55,972.2131,14542.82,962.2831,14563.65,958.3631,14561.55,972.2131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[afd78d936730b2a5d2a27c3ca7ae5858]
reverse link C_0001701907280759632930 to C_0001858199404643284193--><path d="M20395.44,5177.3831 C20554.54,5864.2831 20951.96,8071.4331 19701.5,8816.9531 C19426.07,8981.1631 14458.32,9044.1331 13461.74,9055.1431 " fill="none" id="C_0001701907280759632930&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="20392.48,5164.6531,20389.9499,5171.4058,20395.2101,5176.3384,20397.7402,5169.5858,20392.48,5164.6531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="20440.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="20450.5" y="8311.02">_class_name</text><!--MD5=[5f60c9416fe2cf317930fcaaeb87688d]
link C_0001701907280759632930 to C_0001701907280759632930--><path d="M20370.28,4775.2431 C20452.96,4280.9831 20579,4345.8931 20579,4969.9531 C20579,5591.8831 20453.82,5658.4731 20371.12,5169.7131 " fill="none" id="C_0001701907280759632930-&gt;C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="20370.28,5164.6631,20367.8543,5174.2086,20371.1228,5169.5916,20375.7399,5172.8601,20370.28,5164.6631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="20590,4965.5195,20594,4969.5195,20590,4973.5195,20586,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="20597" y="4974.52">singleton</text><!--MD5=[88b42ccf7d3beb4b42ddd913181f42f8]
reverse link C_0001701907280759632930 to C_0000104564426296396960--><path d="M20404.97,5169.6931 C20549.34,5680.8731 20846.1,7048.0931 20125.5,7718.9531 C20085.87,7755.8431 16281.61,7747.1731 16227.5,7748.9531 C16097.57,7753.2331 16065.42,7761.3931 15935.5,7765.9531 C15796.24,7770.8331 13561.14,7756.5131 13427.5,7795.9531 C13418.35,7798.6531 13409.2,7801.4931 13400.05,7804.4531 " fill="none" id="C_0001701907280759632930&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="20403.59,5164.8331,20402.182,5174.5808,20404.9466,5169.6456,20409.8819,5172.4102,20403.59,5164.8331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16233.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16240.5" y="7762.02">«friend»</text><!--MD5=[27a7e43ab26a99a3f421aa78b5d844cd]
reverse link C_0001531814603945772616 to C_0001701907280759632930--><path d="M14562.74,912.9231 C16051.75,1009.0631 19476.85,1325.0231 20125.5,2220.9531 C20699.09,3013.2131 20495.78,4291.9131 20390.46,4775.4231 " fill="none" id="C_0001531814603945772616&lt;-C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.1,919.9031,14542.59,911.6331,14563,905.9231,14562.1,919.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[91b59d0d2b46b114de331f37d45c6fea]
reverse link C_0001589464385186808769 to C_0001858199404643284193--><path d="M2184.74,7732.0131 C2228.35,8132.4531 2360.76,8511.7431 2633.5,8816.9531 C2815.73,9020.8731 11753.68,9052.8431 13115.35,9056.5331 " fill="none" id="C_0001589464385186808769&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2183.35,7718.9531,2180.0052,7725.3416,2184.6158,7730.8862,2187.9606,7724.4977,2183.35,7718.9531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2636.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2646.5" y="8311.02">_class_name</text><!--MD5=[04ea438e6be471aabf4ca3b13070cdc4]
link C_0001589464385186808769 to C_0001589464385186808769--><path d="M4088.59,4751.4431 C4111.13,4814.4731 4123.5,4887.3131 4123.5,4969.9531 C4123.5,5050.4931 4111.75,5121.7231 4090.29,5183.6431 " fill="none" id="C_0001589464385186808769-&gt;C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4088.59,5188.4631,4095.3483,5181.2989,4090.2481,5183.7461,4087.801,5178.6459,4088.59,5188.4631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4131.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="4141.5" y="4974.52">singleton</text><!--MD5=[427f4b2a588f733610b23579090a59fb]
reverse link C_0001589464385186808769 to C_0000104564426296396960--><path d="M4092.58,7638.1531 C4129.23,7666.4131 4166.86,7693.3931 4205.5,7718.9531 C4331.46,7802.2731 4732.57,7760.3931 4883.5,7765.9531 C5071.62,7772.8831 11477.94,7749.9931 11660.5,7795.9531 C11719.3,7810.7531 11778.46,7829.8931 11836.96,7852.0331 " fill="none" id="C_0001589464385186808769&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4088.58,7635.0631,4093.2567,7643.7308,4092.5367,7638.12,4098.1476,7637.4,4088.58,7635.0631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4889.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="4896.5" y="7762.02">«friend»</text><!--MD5=[4ddd664f6ccf290832a36f79f3862090]
reverse link C_0001531814603945772616 to C_0001589464385186808769--><path d="M13178.52,949.7831 C11994.64,1073.5331 9503.78,1322.7031 7392.5,1459.9531 C7059.16,1481.6231 6971.62,1438.9331 6641.5,1489.9531 C6563.18,1502.0531 6522.18,1477.7531 6469.5,1536.9531 C6274.08,1756.5731 6592.05,1997.7231 6370.5,2190.9531 C6279.84,2270.0131 4307.62,2157.3931 4205.5,2220.9531 C4165.44,2245.8831 4126.48,2272.3631 4088.59,2300.2331 " fill="none" id="C_0001531814603945772616&lt;-C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.83,942.8131,13198.45,947.7031,13179.28,956.7431,13177.83,942.8131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2cf4dc3403b3f63884c534491eb99b5f]
reverse link C_0001559146041463814963 to C_0001858199404643284193--><path d="M4555.72,5324.5131 C4693.02,5917.0031 4861.61,7105.5931 4205.5,7718.9531 C4156.5,7764.7631 3061.89,7727.0331 2998.5,7748.9531 C2965.48,7760.3731 2951.16,7764.7231 2935.5,7795.9531 C2732.05,8201.5631 2618.37,8492.3831 2935.5,8816.9531 C3120.98,9006.7831 11776.73,9050.6231 13115.4,9056.2731 " fill="none" id="C_0001559146041463814963&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4552.68,5311.4931,4550.1483,5318.2452,4555.4072,5323.1791,4557.9389,5316.4271,4552.68,5311.4931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2938.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2948.5" y="8311.02">_class_name</text><!--MD5=[8b9b48228f1f4eaa16d2eda56805776c]
reverse link C_0001559146041463814963 to C_0000104564426296396960--><path d="M4365.56,5316.6331 C4228.88,5905.6531 4057.55,7100.0631 4713.5,7718.9531 C4769.3,7771.5931 6016.8,7764.4431 6093.5,7765.9531 C6248.11,7769.0031 11510.56,7758.1331 11660.5,7795.9531 C11719.29,7810.7831 11778.45,7829.9431 11836.94,7852.0931 " fill="none" id="C_0001559146041463814963&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4366.77,5311.4531,4360.842,5319.3181,4365.6415,5316.3241,4368.6355,5321.1237,4366.77,5311.4531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6099.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="6106.5" y="7762.02">«friend»</text><!--MD5=[4af771cf0c6fabd07b7b07fb51de9469]
reverse link C_0001531814603945772616 to C_0001559146041463814963--><path d="M13178.34,943.2131 C11993.87,1057.2131 9501.76,1292.3331 7392.5,1459.9531 C7299.18,1467.3731 6621.44,1472.5531 6553.5,1536.9531 C6339.47,1739.8231 6665.28,1998.8931 6441.5,2190.9531 C6368.64,2253.4831 4783.88,2155.6431 4713.5,2220.9531 C4050.13,2836.4631 4227.36,4039.5731 4365.91,4628.1931 " fill="none" id="C_0001531814603945772616&lt;-C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.7,936.2331,13198.28,941.2931,13179.04,950.1731,13177.7,936.2331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[487a8427ca85592aeea29c0764de0754]
reverse link C_0000503002593685351124 to C_0001858199404643284193--><path d="M646.13,2002.6131 C543.82,2055.9431 451.7,2126.8031 385.5,2220.9531 C297.18,2346.5731 359.86,7595.3931 359.5,7748.9531 C358.94,7987.5631 296.79,8653.3631 470.5,8816.9531 C711.76,9044.1631 11604.66,9056.3331 13115.36,9056.9331 " fill="none" id="C_0000503002593685351124&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="658.01,1996.5231,650.8461,1995.6991,647.3301,2001.9949,654.494,2002.819,658.01,1996.5231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="362.5" y="7755.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="372.5" y="7762.02">_class_name</text><!--MD5=[489f5a7a7e59ee03221596499549568c]
reverse link C_0000503002593685351124 to C_0000104564426296396960--><path d="M778.95,1998.8531 C675.6,2052.5631 581.71,2124.5231 517.5,2220.9531 C432.85,2348.0731 410.69,7609.7931 517.5,7718.9531 C601.72,7805.0231 2564.09,7764.4531 2684.5,7765.9531 C2811.48,7767.5431 11705.73,7759.9131 11827.5,7795.9531 C11830.63,7796.8831 11833.76,7797.8231 11836.9,7798.7831 " fill="none" id="C_0000503002593685351124&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="783.56,1996.4731,773.7271,1997.0335,779.1139,1998.7605,777.3869,2004.1473,783.56,1996.4731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="523.5" cy="4970.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="530.5" y="4974.52">«friend»</text><!--MD5=[c24c628f808045c87231a65882d87e6c]
reverse link C_0001531814603945772616 to C_0000503002593685351124--><path d="M13178.28,914.9331 C11599.32,1005.7531 7610.66,1246.0031 4281.5,1536.9531 C3696,1588.1231 3044.17,1656.3031 2511.24,1714.9831 " fill="none" id="C_0001531814603945772616&lt;-C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.1,907.9331,13198.47,913.7731,13178.91,921.9031,13178.1,907.9331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c0fc8be268a4058cfc901a3bfe23dfe6]
link C_0000493041171271776846 to C_0000503002593685351124--><path d="M6040.19,170.4831 C6014.37,186.4131 5984.12,202.6531 5954.5,212.9531 C5837.52,253.6431 5522.35,258.7031 5402.5,289.9531 C4006.72,653.8831 2434.14,1360.2731 1760.66,1677.8831 " fill="none" id="C_0000493041171271776846-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1754.1144" cy="1680.9779" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1761.3488" x2="1746.88" y1="1677.5628" y2="1684.3931"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1757.5296" x2="1750.6992" y1="1688.2123" y2="1673.7435"/><!--MD5=[f9e2d358c0077ba50b9cdc90935a7cd8]
link C_0000493041171271776846 to C_0001531814603945772616--><path d="M6247.09,135.2831 C7081.56,216.1431 11485.58,642.8631 13193.14,808.3231 " fill="none" id="C_0000493041171271776846-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.14,808.8031,13189.5716,803.9469,13193.1637,808.3169,13188.7937,811.909,13198.14,808.8031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="7417.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="7424.5" y="256.02">collider</text><!--MD5=[408dbe512b8935ec69e129fbaa9ad1d8]
link C_0000461609734144368587 to C_0000503002593685351124--><path d="M180.83,183.5831 C361.27,423.6331 1020.78,1301.0231 1299.65,1672.0231 " fill="none" id="C_0000461609734144368587-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1303.9915" cy="1677.7995" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1299.1829" x2="1308.8" y1="1671.4059" y2="1684.1931"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1310.3851" x2="1297.5979" y1="1672.991" y2="1682.6081"/><!--MD5=[a4acf2a0a8f086b9008d5a97b35ead67]
link C_0000461609734144368587 to C_0001531814603945772616--><path d="M263.06,128.9931 C1456.13,194.3031 10609.08,695.4031 13193.14,836.8731 " fill="none" id="C_0000461609734144368587-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.34,837.1531,13189.5701,832.6712,13193.3474,836.8821,13189.1364,840.6594,13198.34,837.1531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="2443.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="2450.5" y="256.02">collider</text><!--MD5=[acb73802bd90075711fdfa2eb81ba4e2]
reverse link C_0001034902024938599899 to C_0001858199404643284193--><path d="M5386.78,6266.2231 C5321.63,6799.8331 5142.92,7372.9931 4712.5,7718.9531 C4638.75,7778.2331 3075.82,7681.4531 3009.5,7748.9531 C3004.2,7754.3431 3005.03,7759.8631 3009.5,7765.9531 C3929.75,9020.3831 4843.73,8421.8231 6348.5,8816.9531 C6446.05,8842.5631 6470.36,8852.0131 6570.5,8863.9531 C7892.75,9021.6131 12197.66,9051.5631 13115.41,9056.2031 " fill="none" id="C_0001034902024938599899&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5388.35,6253.2331,5383.6605,6258.7111,5386.9135,6265.1468,5391.603,6259.6688,5388.35,6253.2331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6351.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6361.5" y="8311.02">_class_name</text><!--MD5=[b5cd0ac589986cb9ed90f22c5fd42456]
link C_0001034902024938599899 to C_0001034902024938599899--><path d="M6006.05,4677.2531 C6028.28,4755.0531 6041,4852.6231 6041,4969.9531 C6041,5084.7631 6028.82,5180.6431 6007.47,5257.6031 " fill="none" id="C_0001034902024938599899-&gt;C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6006.05,5262.6531,6012.3419,5255.076,6007.4066,5257.8407,6004.642,5252.9054,6006.05,5262.6531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6049" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="6059" y="4974.52">singleton</text><!--MD5=[5e0ea8049b7e63b70aa4577072912f6a]
reverse link C_0001034902024938599899 to C_0000104564426296396960--><path d="M5415.44,6258.3931 C5503.66,6787.5731 5700.89,7359.4431 6123.5,7718.9531 C6272.29,7845.5231 6365.47,7754.9231 6560.5,7765.9531 C6701.94,7773.9531 11523.14,7761.2731 11660.5,7795.9531 C11719.29,7810.7931 11778.44,7829.9631 11836.93,7852.1331 " fill="none" id="C_0001034902024938599899&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="5414.6,6253.3331,5412.1161,6262.8636,5415.4127,6258.2666,5420.0097,6261.5632,5414.6,6253.3331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6566.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="6573.5" y="7762.02">«friend»</text><!--MD5=[2a21d702013630b9a2bb4ab014f806e3]
reverse link C_0001531814603945772616 to C_0001034902024938599899--><path d="M13178.31,938.1031 C11376.17,1100.0631 6676.78,1523.5731 6661.5,1536.9531 C6437.2,1733.3231 6738.21,1996.2031 6512.5,2190.9531 C6446.86,2247.5931 6190.38,2165.7731 6123.5,2220.9531 C5692.48,2576.5531 5494.82,3153.2231 5408.51,3686.7031 " fill="none" id="C_0001531814603945772616&lt;-C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.84,931.1131,13198.39,936.2931,13179.1,945.0531,13177.84,931.1131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[890a5f3a9ab4b2f75c35c9d8b993635e]
reverse link C_0002302096389852429221 to C_0001858199404643284193--><path d="M6383.85,5305.9331 C6399.62,6215.2331 6450.87,8671.5131 6546.5,8816.9531 C6572.82,8856.9831 6596.97,8852.5631 6643.5,8863.9531 C7287.74,9021.6931 12132.94,9051.7631 13115.14,9056.2631 " fill="none" id="C_0002302096389852429221&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6383.63,5292.6631,6379.7361,5298.7325,6383.841,5304.6613,6387.7349,5298.5919,6383.63,5292.6631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6549.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6559.5" y="8311.02">_class_name</text><!--MD5=[1c64f5bce8010bf6b825f4da2fbeefb2]
reverse link C_0002302096389852429221 to C_0000104564426296396960--><path d="M6298.23,5297.8531 C6176.33,5883.0731 6024.91,7105.7031 6704.5,7718.9531 C6806.72,7811.1931 11527.17,7761.6031 11660.5,7795.9531 C11719.22,7811.0831 11778.31,7830.4631 11836.76,7852.7831 " fill="none" id="C_0002302096389852429221&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6299.3,5292.7131,6293.5587,5300.7155,6298.2865,5297.6093,6301.3927,5302.3371,6299.3,5292.7131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="7455.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="7462.5" y="7762.02">«friend»</text><!--MD5=[664b2e106c93f0f6277b4a445906c078]
reverse link C_0001531814603945772616 to C_0002302096389852429221--><path d="M13178.25,889.0031 C11713.86,925.7331 8352.56,1060.8531 7325.5,1536.9531 C6951.26,1710.4331 6841.38,1808.2831 6650.5,2173.9531 C6228.12,2983.1031 6278.06,4103.6131 6335.38,4647.3131 " fill="none" id="C_0001531814603945772616&lt;-C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.16,882.0031,13198.33,888.5031,13178.51,896.0031,13178.16,882.0031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d7ce68193d44632dd4e25c66ffbbce4c]
reverse link C_0000236996062289735257 to C_0001858199404643284193--><path d="M4286.11,1974.2031 C3762.66,2037.3531 3112.3,2107.0031 2528.5,2143.9531 C2413.21,2151.2531 526.84,2134.2431 450.5,2220.9531 C349.58,2335.5831 401.18,7574.4131 450.5,7718.9531 C649.61,8302.5131 751.98,8531.4731 1298.5,8816.9531 C1572.52,8960.0931 11664.41,9044.2531 13115.43,9055.6231 " fill="none" id="C_0000236996062289735257&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4299.23,1972.6231,4292.7903,1969.378,4287.3181,1974.0742,4293.7577,1977.3193,4299.23,1972.6231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="467.5" y="7755.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="477.5" y="7762.02">_class_name</text><!--MD5=[6f8680ec89f27b3fc0455684d508cc80]
reverse link C_0000236996062289735257 to C_0000104564426296396960--><path d="M4294.22,1967.3931 C3769.21,2029.2531 3114.98,2099.7931 2528.5,2143.9531 C2425.48,2151.7131 742.02,2146.4031 670.5,2220.9531 C564.77,2331.1531 563.32,7610.1631 670.5,7718.9531 C690.1,7738.8531 2653.58,7748.0231 2681.5,7748.9531 C2827.39,7753.8231 2863.58,7761.9231 3009.5,7765.9531 C3131.93,7769.3331 11710.06,7761.1831 11827.5,7795.9531 C11830.63,7796.8831 11833.76,7797.8231 11836.9,7798.7831 " fill="none" id="C_0000236996062289735257&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4299.23,1966.8031,4289.8228,1963.8868,4294.2645,1967.3898,4290.7615,1971.8315,4299.23,1966.8031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="676.5" cy="4970.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="683.5" y="4974.52">«friend»</text><!--MD5=[3f2e423855117caec285a310b19c1bbc]
reverse link C_0001531814603945772616 to C_0000236996062289735257--><path d="M13178.5,906.8231 C11570.33,982.6931 7619.64,1193.8331 6325.5,1489.9531 C6305.06,1494.6331 6301.22,1499.8231 6281.5,1506.9531 C6115.22,1567.0831 5931.97,1629.8331 5769.01,1684.4131 " fill="none" id="C_0001531814603945772616&lt;-C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.18,899.8331,13198.48,905.8831,13178.84,913.8231,13178.18,899.8331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9a7eb49f1533d167fe82948ecfcf8f82]
link C_0001801355352189289676 to C_0000236996062289735257--><path d="M7878.27,123.9831 C7485.29,130.8031 6374.92,157.5031 6236.5,242.9531 C5701.23,573.3831 5434.69,1330.3231 5338.62,1669.5531 " fill="none" id="C_0001801355352189289676-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5336.6835" cy="1676.4512" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5338.8471" x2="5334.52" y1="1668.7493" y2="1684.1531"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5344.3854" x2="5328.9816" y1="1678.6148" y2="1674.2877"/><!--MD5=[94135747fba5deb4c607347f1e06518f]
link C_0001801355352189289676 to C_0001531814603945772616--><path d="M8152.67,139.5731 C8829.02,226.4431 11830.73,611.9731 13193.47,786.9931 " fill="none" id="C_0001801355352189289676-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.45,787.6331,13190.0392,782.5089,13193.4915,786.9901,13189.0103,790.4425,13198.45,787.6331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="9003.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="9010.5" y="256.02">collider</text><!--MD5=[327ec61c802d4b8bc89d445f02ff7678]
link C_0001771770302499309898 to C_0000236996062289735257--><path d="M11379.4,122.0531 C10910.68,123.4631 9448.68,136.5031 8989.5,242.9531 C7644.39,554.7931 6174.52,1336.6631 5574.22,1676.9731 " fill="none" id="C_0001771770302499309898-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5568.0381" cy="1680.4854" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5574.9962" x2="5561.08" y1="1676.5376" y2="1684.4331"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5571.9859" x2="5564.0904" y1="1687.4435" y2="1673.5273"/><!--MD5=[dddc2f9d809445d4a2bacef7d4a58738]
link C_0001771770302499309898 to C_0001531814603945772616--><path d="M11671.75,168.8531 C11969.79,264.4331 12664.03,487.0631 13193.3,656.7831 " fill="none" id="C_0001771770302499309898-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.35,658.4031,13191.0051,651.8416,13193.5897,656.8735,13188.5578,659.4581,13198.35,658.4031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11925.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="11932.5" y="256.02">collider</text><!--MD5=[eed6ab08d8c501b6208d9f4ac11f9b83]
reverse link C_0001561529841391244418 to C_0001858199404643284193--><path d="M7431.39,5939.9331 C7493.41,6841.4031 7741.62,8143.7831 8613.5,8816.9531 C8795,8957.0831 12290.87,9036.6831 13115.36,9053.5531 " fill="none" id="C_0001561529841391244418&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7430.5,5926.6931,7426.918,5932.9517,7431.3175,5938.6652,7434.8994,5932.4067,7430.5,5926.6931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8616.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="8626.5" y="8311.02">_class_name</text><!--MD5=[23ceac23f6c6826b07cc87ed3906ae98]
link C_0001561529841391244418 to C_0001561529841391244418--><path d="M8130.52,4688.5531 C8152.82,4764.4331 8165.5,4858.2331 8165.5,4969.9531 C8165.5,5079.2731 8153.36,5171.4331 8131.95,5246.4331 " fill="none" id="C_0001561529841391244418-&gt;C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8130.52,5251.3531,8136.8534,5243.8107,8131.903,5246.5482,8129.1655,5241.5979,8130.52,5251.3531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8173.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="8183.5" y="4974.52">singleton</text><!--MD5=[a7f38b71b0c412aea9feb929bf57c436]
reverse link C_0001561529841391244418 to C_0000104564426296396960--><path d="M7443.62,5931.4431 C7510.7,6548.5031 7709.99,7308.7931 8257.5,7718.9531 C8333.6,7775.9631 11588.91,7723.3931 11680.5,7748.9531 C11694.28,7752.7931 11753.83,7785.8431 11836.78,7834.0931 " fill="none" id="C_0001561529841391244418&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="7443.08,5926.4631,7440.0806,5935.8441,7443.6228,5931.4336,7448.0333,5934.9757,7443.08,5926.4631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11715.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11722.5" y="7762.02">«friend»</text><!--MD5=[a58d0cd78cca24a1b417e2c7091ad184]
reverse link C_0001531814603945772616 to C_0001561529841391244418--><path d="M13178.08,901.4231 C11648.9,964.5131 8088.82,1151.5731 7712.5,1536.9531 C7088.01,2176.4831 7095.37,3239.5031 7209.57,4013.2831 " fill="none" id="C_0001531814603945772616&lt;-C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.94,894.4231,13198.21,900.5931,13178.51,908.4131,13177.94,894.4231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[61db9f2a674de4dd20c1e8d6466365f6]
reverse link C_0001485048025194488343 to C_0001858199404643284193--><path d="M8681.32,5222.5331 C8543.26,5927.6731 8268.38,7929.4331 9369.5,8816.9531 C9517.32,8936.0931 12376.58,9029.6531 13115.44,9051.9031 " fill="none" id="C_0001485048025194488343&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="8683.85,5209.6931,8678.7697,5214.8108,8681.5398,5221.4686,8686.6201,5216.351,8683.85,5209.6931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9372.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="9382.5" y="8311.02">_class_name</text><!--MD5=[f95868a4bcc46beaa6866e3b4ea59e8f]
link C_0001485048025194488343 to C_0001485048025194488343--><path d="M8771.98,4730.4231 C8856.47,4285.6031 8977.5,4365.4431 8977.5,4969.9531 C8977.5,5572.0931 8857.42,5653.6731 8772.97,5214.6731 " fill="none" id="C_0001485048025194488343-&gt;C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8771.98,5209.4831,8769.7475,5219.0756,8772.9221,5214.3936,8777.6042,5217.5682,8771.98,5209.4831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8985.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="8995.5" y="4974.52">singleton</text><!--MD5=[7c58e4f37afb0d5a6a6c8a0d7e05a07b]
reverse link C_0001485048025194488343 to C_0000104564426296396960--><path d="M8673.75,5214.7831 C8550.02,5759.2031 8344.66,7076.2631 9059.5,7718.9531 C9116.83,7770.4931 11761.18,7725.1431 11834.5,7748.9531 C11842.96,7751.7031 11870.34,7768.9631 11910.1,7795.8231 " fill="none" id="C_0001485048025194488343&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="8674.93,5209.6031,8669.0459,5217.5011,8673.8287,5214.4803,8676.8494,5219.2631,8674.93,5209.6031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11865.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11872.5" y="7762.02">«friend»</text><!--MD5=[575bdde0c40cde995e5d193ed3ac9a95]
reverse link C_0001531814603945772616 to C_0001485048025194488343--><path d="M13178.74,1015.0131 C12610.3,1135.1931 11786.59,1322.9731 11080.5,1536.9531 C10339.48,1761.5231 10176.05,1881.7631 9447.5,2143.9531 C9387.72,2165.4631 9374.41,2176.6831 9312.5,2190.9531 C9257.33,2203.6731 9099.51,2180.9031 9059.5,2220.9531 C8380.29,2900.8531 8565.41,4196.3731 8678.74,4730.0631 " fill="none" id="C_0001531814603945772616&lt;-C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.42,1008.1331,13198.44,1010.8531,13180.31,1021.8331,13177.42,1008.1331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5ecf1269ba038493d7a188869314b523]
reverse link C_0000314051240057057851 to C_0001858199404643284193--><path d="M21191.33,5209.6631 C21324.15,5893.1931 21596.26,7869.4331 20542.5,8816.9531 C20270.85,9061.2131 14537.01,9059.8731 13461.52,9057.4631 " fill="none" id="C_0000314051240057057851&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="21188.8,5196.7231,21186.0213,5203.3774,21191.095,5208.5016,21193.8737,5201.8474,21188.8,5196.7231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21156.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="21166.5" y="8311.02">_class_name</text><!--MD5=[c8cd5ec3f4799bfb98fee18601ebcdfe]
link C_0000314051240057057851 to C_0000314051240057057851--><path d="M21207.48,4743.3331 C21381.38,4284.1231 21635,4359.6631 21635,4969.9531 C21635,5578.1531 21383.11,5655.2631 21209.27,5201.2631 " fill="none" id="C_0000314051240057057851-&gt;C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="21207.48,5196.5731,21206.9573,5206.4081,21209.2653,5201.2435,21214.4299,5203.5516,21207.48,5196.5731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21643" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="21653" y="4974.52">singleton</text><!--MD5=[1a5c4e57827c1ce3cfed75acbd29db82]
reverse link C_0000314051240057057851 to C_0000104564426296396960--><path d="M21184.32,5201.9231 C21274,5741.4831 21407.78,7086.7131 20661.5,7718.9531 C20616.99,7756.6631 16519.75,7745.7331 16461.5,7748.9531 C16388.33,7752.9931 16370.66,7761.7831 16297.5,7765.9531 C16138.3,7775.0131 13580.47,7750.9331 13427.5,7795.9531 C13418.34,7798.6431 13409.19,7801.4831 13400.05,7804.4331 " fill="none" id="C_0000314051240057057851&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="21183.46,5196.7931,21180.9806,5206.3248,21184.275,5201.7262,21188.8736,5205.0207,21183.46,5196.7931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16467.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16474.5" y="7762.02">«friend»</text><!--MD5=[d5123be137e691922de774dbcf9f522d]
reverse link C_0001531814603945772616 to C_0000314051240057057851--><path d="M14563.01,922.9531 C15852.55,1016.1831 18572.14,1241.3431 19467.5,1536.9531 C20048.24,1728.6931 20310.45,1720.1631 20661.5,2220.9531 C21216.38,3012.5131 21196.54,4240.5431 21160.89,4743.0131 " fill="none" id="C_0001531814603945772616&lt;-C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.16,929.9031,14542.72,921.4831,14563.17,915.9431,14562.16,929.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0f51a88240f615cca582e7a0121c3766]
reverse link C_0001197720528033242618 to C_0001858199404643284193--><path d="M1047.08,5152.3231 C975.15,5799.2231 832.68,7998.2731 2090.5,8816.9531 C2331.84,8974.0331 11718.86,9045.9331 13115.49,9055.7731 " fill="none" id="C_0001197720528033242618&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1048.56,5139.1831,1043.9125,5144.6968,1047.2146,5151.1075,1051.8621,5145.5938,1048.56,5139.1831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2093.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2103.5" y="8311.02">_class_name</text><!--MD5=[ee3ac7328ce85f190ffde4073aa3ab2d]
link C_0001197720528033242618 to C_0001197720528033242618--><path d="M1104.27,4800.7631 C1227.47,4278.9531 1422,4335.3531 1422,4969.9531 C1422,5602.5431 1228.7,5660.5931 1105.44,5144.0931 " fill="none" id="C_0001197720528033242618-&gt;C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1104.27,5139.1431,1102.4646,5148.8251,1105.4287,5144.007,1110.2468,5146.9711,1104.27,5139.1431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1433,4965.5195,1437,4969.5195,1433,4973.5195,1429,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="1440" y="4974.52">singleton</text><!--MD5=[d5273b688c2cbc8d25291921feeb727a]
reverse link C_0001197720528033242618 to C_0000104564426296396960--><path d="M1032.72,5144.0731 C936.52,5636.9431 740.83,7054.8731 1504.5,7718.9531 C1518.69,7731.2931 4192.7,7765.7531 4211.5,7765.9531 C4314.95,7767.0631 11560.17,7770.7131 11660.5,7795.9531 C11719.3,7810.7431 11778.46,7829.8731 11836.96,7852.0031 " fill="none" id="C_0001197720528033242618&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1033.71,5139.0331,1028.0588,5147.0993,1032.7514,5143.9404,1035.9104,5148.633,1033.71,5139.0331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4217.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="4224.5" y="7762.02">«friend»</text><!--MD5=[30e625aae1c06fb81ca2c0a65c06b825]
reverse link C_0001531814603945772616 to C_0001197720528033242618--><path d="M13178.31,951.2631 C11994.45,1077.1631 9504.03,1329.4131 7392.5,1459.9531 C7194.32,1472.2031 6692.87,1444.8731 6499.5,1489.9531 C6450.1,1501.4731 6425.97,1496.4031 6395.5,1536.9531 C6231.79,1754.8431 6512.99,1963.7931 6308.5,2143.9531 C6108.22,2320.4031 1706.04,2045.9331 1504.5,2220.9531 C737.76,2886.8031 937.71,4312.5131 1033.67,4800.8231 " fill="none" id="C_0001531814603945772616&lt;-C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.62,944.2931,13198.24,949.1431,13179.1,958.2131,13177.62,944.2931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2f8780ed64ed38ffe1cf4ca2575b2709]
reverse link C_0001130773750498288283 to C_0001858199404643284193--><path d="M9346.12,5113.7731 C9248.01,5694.8531 8968.35,7894.1531 10160.5,8816.9531 C10394.93,8998.4131 12493.06,9044.8131 13115.31,9054.6331 " fill="none" id="C_0001130773750498288283&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="9348.33,5100.7631,9343.3791,5106.0061,9346.3145,5112.5927,9351.2654,5107.3497,9348.33,5100.7631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10163.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10173.5" y="8311.02">_class_name</text><!--MD5=[f88684864f83bcfca48b3287b5bf4bf4]
link C_0001130773750498288283 to C_0001130773750498288283--><path d="M9396.04,4839.0831 C9511.05,4276.5931 9702.5,4320.2131 9702.5,4969.9531 C9702.5,5617.7831 9512.17,5663.0531 9397.06,5105.7531 " fill="none" id="C_0001130773750498288283-&gt;C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="9396.04,5100.8231,9393.9529,5110.4483,9397.0563,5105.7187,9401.7859,5108.8222,9396.04,5100.8231" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9713.5,4965.5195,9717.5,4969.5195,9713.5,4973.5195,9709.5,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="9720.5" y="4974.52">singleton</text><!--MD5=[3e73bcbd9daf28c3d368d37c56cc0e9c]
reverse link C_0001130773750498288283 to C_0000104564426296396960--><path d="M9341.07,5105.6131 C9244.29,5558.4131 9002.34,7035.7931 9784.5,7718.9531 C9829.63,7758.3731 11885.23,7728.3531 11941.5,7748.9531 C11965.79,7757.8431 11995.57,7774.1931 12028.95,7795.8531 " fill="none" id="C_0001130773750498288283&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="9342.13,5100.6631,9336.3171,5108.6136,9341.0726,5105.55,9344.1362,5110.3055,9342.13,5100.6631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11984.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11991.5" y="7762.02">«friend»</text><!--MD5=[c2fcb52a4859165f7fca92f209480c5e]
reverse link C_0001531814603945772616 to C_0001130773750498288283--><path d="M13178.68,1037.2731 C12771.48,1147.2731 12254.14,1313.6731 11826.5,1536.9531 C11400.53,1759.3631 11418.93,2031.8331 10965.5,2190.9531 C10903.57,2212.6831 9833.68,2177.4931 9784.5,2220.9531 C9003.64,2910.9231 9247.17,4392.9131 9342.34,4839.1831 " fill="none" id="C_0001531814603945772616&lt;-C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.16,1030.4331,13198.29,1031.9931,13180.8,1043.9531,13177.16,1030.4331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8c3000aebde2149cc2be64412041baff]
reverse link C_0000790752023609648644 to C_0001858199404643284193--><path d="M10100.04,6118.6831 C10051.8,6986.5331 10150.1,8140.5031 10867.5,8816.9531 C11030.61,8970.7531 12588.37,9034.5231 13115.3,9051.8031 " fill="none" id="C_0000790752023609648644&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="10100.78,6105.6131,10096.4439,6111.3749,10100.0947,6117.5935,10104.4308,6111.8318,10100.78,6105.6131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10870.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10880.5" y="8311.02">_class_name</text><!--MD5=[ef5671d32f6987d56ec842457947c9ac]
link C_0000790752023609648644 to C_0000790752023609648644--><path d="M10710.55,4636.6131 C10732.56,4720.0831 10745.5,4831.1931 10745.5,4969.9531 C10745.5,5106.0031 10733.06,5215.4731 10711.83,5298.3731 " fill="none" id="C_0000790752023609648644-&gt;C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="10710.55,5303.2931,10716.6886,5295.5913,10711.8098,5298.4544,10708.9466,5293.5757,10710.55,5303.2931" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="10756.5,4965.5195,10760.5,4969.5195,10756.5,4973.5195,10752.5,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="10763.5" y="4974.52">singleton</text><!--MD5=[5d43d9f033ddff753a837836cd050d9b]
reverse link C_0000790752023609648644 to C_0000104564426296396960--><path d="M10185.83,6110.9031 C10216.81,6682.9031 10366.26,7334.2331 10827.5,7718.9531 C10879.86,7762.6331 11991.74,7722.3031 12054.5,7748.9531 C12085.68,7762.1931 12116.08,7778.0331 12145.56,7795.8531 " fill="none" id="C_0000790752023609648644&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="10185.56,6105.8631,10182.0537,6115.0667,10185.831,6110.8558,10190.042,6114.6331,10185.56,6105.8631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12080.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12087.5" y="7762.02">«friend»</text><!--MD5=[26a39b7fc31ced5e0167cdc73077bc9d]
reverse link C_0001531814603945772616 to C_0000790752023609648644--><path d="M13179.38,1059.3731 C12868.89,1164.7231 12510.84,1320.0631 12233.5,1536.9531 C11950.72,1758.1031 12076.59,2022.6731 11759.5,2190.9531 C11667.98,2239.5231 10906.81,2154.2831 10827.5,2220.9531 C10366.75,2608.2931 10217.7,3261.6831 10186.83,3834.1731 " fill="none" id="C_0001531814603945772616&lt;-C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.16,1052.7331,13198.35,1052.9731,13181.63,1066.0031,13177.16,1052.7331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a6755319c82a581eac8987a926ca1aa6]
reverse link C_0000897221634691489964 to C_0001858199404643284193--><path d="M11258.8,5324.3031 C11009.79,6071.2931 10562.42,7823.5431 11431.5,8816.9531 C11541.67,8942.8831 12675.63,9021.4831 13115.47,9047.4331 " fill="none" id="C_0000897221634691489964&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11263,5311.7431,11257.3064,5316.1683,11259.2013,5323.126,11264.8949,5318.7008,11263,5311.7431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11434.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11444.5" y="8311.02">_class_name</text><!--MD5=[588807cb7a44356f49494dcdc443a06c]
link C_0000897221634691489964 to C_0000897221634691489964--><path d="M11526.9,4628.4231 C11723.46,4302.9531 11966.5,4416.8031 11966.5,4969.9531 C11966.5,5520.4031 11725.82,5635.8331 11529.79,5316.2231 " fill="none" id="C_0000897221634691489964-&gt;C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11526.9,5311.4831,11528.1627,5321.2507,11529.4997,5315.7541,11534.9963,5317.0911,11526.9,5311.4831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11974.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="11984.5" y="4974.52">singleton</text><!--MD5=[b2579420d2152b5e55fe92957e16071b]
reverse link C_0000897221634691489964 to C_0000104564426296396960--><path d="M11357.5,5316.8231 C11325.64,5907.4931 11356.76,7106.1231 12048.5,7718.9531 C12135.57,7796.0931 12211.76,7684.3631 12308.5,7748.9531 C12329.31,7762.8431 12348.86,7778.6331 12367.22,7795.8631 " fill="none" id="C_0000897221634691489964&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="11357.78,5311.6231,11353.2967,5320.3924,11357.5082,5316.6157,11361.2848,5320.8273,11357.78,5311.6231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12328.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12335.5" y="7762.02">«friend»</text><!--MD5=[eb044c62a1c7a56ece172b94356c22f4]
reverse link C_0001531814603945772616 to C_0000897221634691489964--><path d="M13179.16,1074.2231 C12921.42,1177.1131 12643.84,1326.5331 12446.5,1536.9531 C12233.19,1764.4031 12430.41,1989.3931 12192.5,2190.9531 C12142.62,2233.2131 12095.42,2175.4331 12048.5,2220.9531 C11385.67,2863.9931 11340.73,4046.9331 11363.4,4628.2731 " fill="none" id="C_0001531814603945772616&lt;-C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13176.9,1067.5931,13198.07,1066.7431,13182.05,1080.6131,13176.9,1067.5931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ff6a4cd457cb05befae3532e64a2ade2]
reverse link C_0000135188690773659020 to C_0001858199404643284193--><path d="M12354.73,5145.4231 C12483.36,5633.3631 12766.34,7021.8331 12048.5,7718.9531 C11973.26,7792.0231 11649.26,7672.4731 11577.5,7748.9531 C11572.33,7754.4631 11576.98,7758.4131 11577.5,7765.9531 C11609.8,8236.3831 11391.58,8481.0431 11722.5,8816.9531 C11913.96,9011.3031 12749.04,9048.5631 13115.28,9055.4931 " fill="none" id="C_0000135188690773659020&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12351.35,5132.6531,12349.0209,5139.4777,12354.4247,5144.2525,12356.7538,5137.4279,12351.35,5132.6531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11725.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11735.5" y="8311.02">_class_name</text><!--MD5=[b9e190a0b6f3b1ed5b4efd3465fe9397]
link C_0000135188690773659020 to C_0000135188690773659020--><path d="M12329.57,4807.0831 C12425.19,4278.5131 12577.5,4332.8031 12577.5,4969.9531 C12577.5,5605.0831 12426.16,5661.0431 12330.49,5137.8331 " fill="none" id="C_0000135188690773659020-&gt;C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12329.57,5132.8231,12327.2567,5142.3965,12330.4707,5137.7413,12335.1259,5140.9553,12329.57,5132.8231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="12585.5" y="4967.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="12595.5" y="4974.52">singleton</text><!--MD5=[690fea73cee7ce9a9e7a660e160b4514]
reverse link C_0000135188690773659020 to C_0000104564426296396960--><path d="M12320.22,5137.9131 C12365.64,5620.2131 12498.38,7029.8031 12570.5,7795.7631 " fill="none" id="C_0000135188690773659020&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12319.72,5132.6231,12316.585,5141.9597,12320.1907,5137.6009,12324.5495,5141.2066,12319.72,5132.6231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12574.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12581.5" y="7762.02">«friend»</text><!--MD5=[17445eda0668e3f315ac88fffdbd1807]
reverse link C_0001531814603945772616 to C_0000135188690773659020--><path d="M13179.91,1087.2231 C12985.04,1180.1531 12792.76,1310.3131 12669.5,1489.9531 C12293.05,2038.6031 12293.63,4196.9431 12301.61,4807.3531 " fill="none" id="C_0001531814603945772616&lt;-C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.08,1080.8231,13198.16,1078.6331,13183.05,1093.4831,13177.08,1080.8231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24467.08,5126.2931 C24405.11,5835.3731 24143.57,8735.9931 24001.5,8863.9531 C23797.18,9047.9831 14826.09,9056.7031 13461.68,9056.9631 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24468.22,5113.2231,24463.7139,5118.853,24467.1776,5125.1778,24471.6837,5119.5479,24468.22,5113.2231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24196.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="24206.5" y="8311.02">_class_name</text><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24532.63,5125.6131 C24714.93,5698.3031 25262.3,7721.6031 24298.5,8816.9531 C24111.57,9029.4031 14849.05,9054.1731 13461.63,9056.6931 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24528.65,5113.1731,24526.6658,5120.1059,24532.302,5124.6039,24534.2863,5117.6712,24528.65,5113.1731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24782.5,8302.0195,24786.5,8306.0195,24782.5,8310.0195,24778.5,8306.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="24789.5" y="8311.02">target_method</text><!--MD5=[6ec94f72a6ef3ec7ace433902892bd7e]
link C_0001150621116588802549 to C_0001531814603945772616--><path d="M24493.54,4826.9431 C24544.31,4237.1931 24702.92,1990.8331 24219.5,1536.9531 C23866.43,1205.4531 16793.56,964.1831 14548.28,895.7031 " fill="none" id="C_0001150621116588802549-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.94,895.5431,14551.8099,899.8239,14547.9375,895.7002,14552.0612,891.8278,14542.94,895.5431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24474.5,1836.0195,24478.5,1840.0195,24474.5,1844.0195,24470.5,1840.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="100" x="24481.5" y="1845.02">target_instance</text><!--MD5=[927cfeb52f41859ab2973f5dadce2f60]
reverse link C_0001150621116588802549 to C_0000104564426296396960--><path d="M24506.18,5118.3831 C24578.47,5587.8031 24729.62,7055.5531 23930.5,7718.9531 C23818.26,7812.1331 13567.57,7755.1831 13427.5,7795.9531 C13418.34,7798.6231 13409.18,7801.4231 13400.02,7804.3631 " fill="none" id="C_0001150621116588802549&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="24505.38,5113.2531,24502.8157,5122.7623,24506.151,5118.1933,24510.72,5121.5287,24505.38,5113.2531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23348.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23355.5" y="7762.02">«friend»</text><!--MD5=[d6a6ec8d3380d1482b36a055e886b7ee]
reverse link C_0001778859257025660860 to C_0001150621116588802549--><path d="M24027.33,2010.1331 C24112,2562.9331 24380.15,4313.7331 24458.69,4826.5231 " fill="none" id="C_0001778859257025660860&lt;-C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24020.39,2011.0231,24024.28,1990.1931,24034.23,2008.9031,24020.39,2011.0231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[98d31de51765da68085e856073ce4122]
reverse link C_0001186331261774827872 to C_0001858199404643284193--><path d="M13051.86,5228.8631 C13018.76,5735.5231 13000.73,6884.0331 13417.5,7718.9531 C13426.06,7736.1031 13441.02,7731.3031 13448.5,7748.9531 C13451.45,7755.9131 13448.61,7758.4031 13448.5,7765.9531 C13441.61,8233.2131 13538.24,8365.5031 13417.5,8816.9531 C13410.59,8842.7731 13400.45,8868.8831 13388.84,8893.9031 " fill="none" id="C_0001186331261774827872&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13052.74,5215.5431,13048.3531,5221.2663,13051.9488,5227.517,13056.3357,5221.7938,13052.74,5215.5431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13482.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13492.5" y="8311.02">_class_name</text><!--MD5=[1dc07f46a8f623d4dfac70da7186de42]
reverse link C_0001186331261774827872 to C_0000104564426296396960--><path d="M13048.31,5220.6531 C12995.77,5710.2531 12869.77,6830.1931 12721.5,7765.9531 C12719.93,7775.8431 12718.32,7785.8231 12716.67,7795.8831 " fill="none" id="C_0001186331261774827872&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13048.85,5215.6331,13043.8967,5224.1457,13048.3072,5220.6036,13051.8494,5225.0141,13048.85,5215.6331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12727.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12734.5" y="7762.02">«friend»</text><!--MD5=[b77ea624b2b728023d518baa273d3067]
reverse link C_0001531814603945772616 to C_0001186331261774827872--><path d="M13183.28,1263.7431 C13097.22,1342.5331 13021.86,1433.5331 12971.5,1536.9531 C12698.33,2097.9331 12940.81,4036.4531 13038.26,4724.4131 " fill="none" id="C_0001531814603945772616&lt;-C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.78,1258.3831,13198.32,1250.1931,13188.15,1268.7831,13178.78,1258.3831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[64510270a9d4c68a897134b90e8a959c]
reverse link C_0001895218672297528471 to C_0001858199404643284193--><path d="M13645.72,5260.9931 C13673.41,6101.7431 13737.87,8500.5731 13584.5,8816.9531 C13557.44,8872.7631 13510.51,8919.8831 13461.88,8957.1931 " fill="none" id="C_0001895218672297528471&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13645.29,5247.8131,13641.4899,5253.9417,13645.6854,5259.8066,13649.4855,5253.6781,13645.29,5247.8131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13681.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13691.5" y="8311.02">_class_name</text><!--MD5=[d0af4a0fe845fc378a64240482e48309]
link C_0001895218672297528471 to C_0001895218672297528471--><path d="M13677.58,4692.3831 C13759.62,4290.7731 13871,4383.3031 13871,4969.9531 C13871,5554.1731 13760.54,5648.3531 13678.6,5252.5031 " fill="none" id="C_0001895218672297528471-&gt;C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13677.58,5247.5231,13675.4604,5257.1412,13678.5798,5252.4221,13683.2989,5255.5415,13677.58,5247.5231" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13882,4965.5195,13886,4969.5195,13882,4973.5195,13878,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="13889" y="4974.52">singleton</text><!--MD5=[20437a7e41890d7ee60ce7b7515fc40c]
reverse link C_0001895218672297528471 to C_0000104564426296396960--><path d="M13716.94,5252.6131 C13859.2,5810.8831 14078.84,7060.5731 13417.5,7718.9531 C13354.17,7782.0031 13094.39,7705.1531 13016.5,7748.9531 C12992.3,7762.5631 12969.2,7778.3231 12947.2,7795.7431 " fill="none" id="C_0001895218672297528471&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13715.69,5247.7131,13714.0528,5257.4249,13716.9329,5252.5562,13721.8017,5255.4363,13715.69,5247.7131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13022.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13029.5" y="7762.02">«friend»</text><!--MD5=[e168ed7c7ccb452307da64f4f0e17e44]
reverse link C_0001531814603945772616 to C_0001895218672297528471--><path d="M13184.14,1295.8931 C13129.06,1354.4831 13081.06,1419.1731 13045.5,1489.9531 C12975.58,1629.1531 12939.87,2076.4631 13045.5,2190.9531 C13101.74,2251.9131 13358.89,2162.2731 13417.5,2220.9531 C14078.76,2883.0831 13857.07,4136.8831 13715.44,4692.2531 " fill="none" id="C_0001531814603945772616&lt;-C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13179.4,1290.7331,13198.3,1281.1331,13189.51,1300.4131,13179.4,1290.7331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0ede8bff03eb35b50071265c451248f5]
reverse link C_0000979065355535690103 to C_0001858199404643284193--><path d="M14272.64,5113.7431 C14328.61,5540.8231 14444.64,6833.4931 13953.5,7718.9531 C13926.63,7767.3931 13881.5,7747.0431 13855.5,7795.9531 C13748.72,7996.8231 13909.02,8628.5731 13781.5,8816.9531 C13708.4,8924.9531 13572.34,8986.0931 13461.66,9019.5931 " fill="none" id="C_0000979065355535690103&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14270.92,5100.7531,14267.7382,5107.2243,14272.4878,5112.6503,14275.6696,5106.1791,14270.92,5100.7531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13858.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13868.5" y="8311.02">_class_name</text><!--MD5=[80721d2d59c4e03b4d092514cb916805]
link C_0000979065355535690103 to C_0000979065355535690103--><path d="M14274.01,4839.0831 C14383.96,4276.5931 14567,4320.2131 14567,4969.9531 C14567,5617.7831 14385.03,5663.0531 14274.98,5105.7531 " fill="none" id="C_0000979065355535690103-&gt;C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14274.01,5100.8231,14271.8096,5110.423,14274.9686,5105.7304,14279.6612,5108.8893,14274.01,5100.8231" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14578,4965.5195,14582,4969.5195,14578,4973.5195,14574,4969.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="14585" y="4974.52">singleton</text><!--MD5=[c41fcfd5ef56e0f0da68aff980d3f176]
reverse link C_0000979065355535690103 to C_0000104564426296396960--><path d="M14289.07,5105.5831 C14405.44,5555.1231 14708.5,7015.6131 13953.5,7718.9531 C13887.93,7780.0431 13229.18,7712.0831 13147.5,7748.9531 C13118.04,7762.2531 13089.41,7778.0231 13061.72,7795.6831 " fill="none" id="C_0000979065355535690103&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14287.8,5100.6631,14286.1897,5110.3794,14289.0563,5105.5027,14293.933,5108.3694,14287.8,5100.6631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13153.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13160.5" y="7762.02">«friend»</text><!--MD5=[46b7366d08aa74c8bf64b6674b2b20fb]
reverse link C_0001531814603945772616 to C_0000979065355535690103--><path d="M13186.57,1372.4931 C13159.72,1409.7631 13135.99,1448.9331 13116.5,1489.9531 C13049.63,1630.6431 13008.34,2078.8431 13116.5,2190.9531 C13181.11,2257.9231 13885.36,2157.5631 13953.5,2220.9531 C14711.76,2926.3531 14403.35,4395.3731 14287.83,4839.2031 " fill="none" id="C_0001531814603945772616&lt;-C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13180.97,1368.2931,13198.47,1356.3531,13192.23,1376.6031,13180.97,1368.2931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25269.09,177.0531 C25304.74,300.5631 25385.5,609.4731 25385.5,873.9531 C25385.5,873.9531 25385.5,873.9531 25385.5,8307.4531 C25385.5,8535.7331 25485.94,8659.6631 25320.5,8816.9531 C25122.15,9005.5331 24979.89,8851.1931 24706.5,8863.9531 C22381.06,8972.5131 14713.37,9044.3131 13461.91,9055.4431 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25265.37,164.3031,25263.2106,171.1833,25268.731,175.8228,25270.8904,168.9426,25265.37,164.3031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25391.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25398.5" y="2187.02">signal</text><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25297.86,174.4331 C25322.74,205.9431 25352,247.9531 25369.5,289.9531 C25470.98,533.5331 25476.5,610.0731 25476.5,873.9531 C25476.5,873.9531 25476.5,873.9531 25476.5,8307.4531 C25476.5,8535.7331 25573.48,8656.0931 25411.5,8816.9531 C25287.62,8939.9731 25195.68,8852.0531 25021.5,8863.9531 C22631.7,9027.1731 14732.18,9053.3831 13461.65,9056.5731 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25289.62,164.1731,25290.262,171.3556,25297.1388,173.5255,25296.4969,166.343,25289.62,164.1731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25482.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="25489.5" y="2187.02">method</text><!--MD5=[54ac8f63d86bc4e03834512bd61d98ef]
link C_0000115801560197752094 to C_0001531814603945772616--><path d="M25144.4,129.0931 C24166.6,193.6931 16832.69,678.2431 14547.96,829.1931 " fill="none" id="C_0000115801560197752094-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.94,829.5231,14552.1836,832.9226,14547.9292,829.1943,14551.6575,824.9399,14542.94,829.5231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23349.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="23356.5" y="256.02">target</text><!--MD5=[5b171c69af600bc12977795a2bb103e4]
reverse link C_0000096380574950611570 to C_0001858199404643284193--><path d="M15410.78,5241.6931 C15436.38,5805.4131 15405.36,7103.7831 14649.5,7718.9531 C14605.56,7754.7131 14195.73,7736.3131 14140.5,7748.9531 C14087.08,7761.1731 14058.53,7751.4831 14026.5,7795.9531 C13893.6,7980.5031 14093.62,8635.5131 13956.5,8816.9531 C13840.59,8970.3231 13617.89,9025.8931 13461.6,9045.9031 " fill="none" id="C_0000096380574950611570&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="15410.17,5228.5131,15406.4512,5234.6914,15410.7239,5240.5003,15414.4427,5234.3221,15410.17,5228.5131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14029.5" y="8304.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14039.5" y="8311.02">_class_name</text><!--MD5=[7d4e19f5f1e549348290eead97de4c50]
reverse link C_0000096380574950611570 to C_0000104564426296396960--><path d="M15412.05,5233.8831 C15441.84,5796.3831 15421.22,7114.3731 14649.5,7718.9531 C14589,7766.3431 13338.27,7721.4731 13266.5,7748.9531 C13232.05,7762.1431 13198.18,7778.0231 13165.09,7795.9431 " fill="none" id="C_0000096380574950611570&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="15411.76,5228.5331,15408.2537,5237.7367,15412.031,5233.5258,15416.242,5237.3031,15411.76,5228.5331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13272.5" cy="7758.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13279.5" y="7762.02">«friend»</text><!--MD5=[d80b17199b730d4efec0c676d67f0184]
reverse link C_0001531814603945772616 to C_0000096380574950611570--><path d="M13206.89,1477.8431 C13196.57,1497.2131 13187.07,1516.9231 13178.5,1536.9531 C13125.46,1660.9731 13085.65,2046.1131 13178.5,2143.9531 C13291.17,2262.6731 14522.22,2118.0631 14649.5,2220.9531 C15413.46,2838.5531 15437.74,4154.2731 15410.46,4711.2831 " fill="none" id="C_0001531814603945772616&lt;-C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13200.84,1474.3131,13216.6,1460.1431,13213.12,1481.0431,13200.84,1474.3131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4e0b6cbd5b03f80ab3eba4fe2dcbf948]
link C_0000762417759113755306 to C_0001531814603945772616--><path d="M25510.71,164.0331 C25471.9,182.4431 25423.92,202.2531 25378.5,212.9531 C23300.2,702.6831 16690.56,835.2531 14548,865.8131 " fill="none" id="C_0000762417759113755306-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.91,865.8831,14551.9662,869.7542,14547.9095,865.8117,14551.8519,861.755,14542.91,865.8831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25226.5" cy="252.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="25233.5" y="256.02">obj</text><!--MD5=[8bda8e308cc1dbbbc74088973fe49d83]
reverse link C_0000762417759113755306 to C_0001858199404643284193--><path d="M25590.5,177.5731 C25590.5,302.2331 25590.5,613.4631 25590.5,873.9531 C25590.5,873.9531 25590.5,873.9531 25590.5,8307.4531 C25590.5,8537.2531 25665.33,8654.8031 25502.5,8816.9531 C25413.4,8905.6831 25348.72,8852.4631 25223.5,8863.9531 C24002.56,8976.0231 14839.5,9045.8231 13461.72,9055.7331 " fill="none" id="C_0000762417759113755306&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25590.5,164.3531,25586.5,170.3531,25590.5,176.3531,25594.5,170.3531,25590.5,164.3531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25596.5" cy="2183.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="27" x="25603.5" y="2187.02">func</text><!--MD5=[b5ce75b5595f78f52cac055be842f7ab]
@startuml
title Godot Object class hierarchy
class "SafeNumeric<uint32_t>" as C_0001357046052919104842
class C_0001357046052919104842 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L62{SafeNumeric}]] {
__
}
class "SafeRefCount" as C_0000699772808699382057
class C_0000699772808699382057 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164{SafeRefCount}]] {
+get() const : uint32_t
+init(uint32_t p_value = 1) : void
+ref() : bool
+refval() : uint32_t
+unref() : bool
+unrefval() : uint32_t
__
}
class "StringName" as C_0001858199404643284193
class C_0001858199404643284193 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44{StringName}]] {
+StringName(const char * p_name) : void
+StringName(const StringName & p_name) : void
+StringName(const String & p_name) : void
+StringName(const StaticCString & p_static_string) : void
+StringName() : void
+~StringName() : void
..
+operator=(const StringName & p_name) : void
..
+operator!=(const String & p_name) const : bool
+operator!=(const StringName & p_name) const : bool
+operator<(const StringName & p_name) const : bool
+operator==(const String & p_name) const : bool
+operator==(const char * p_name) const : bool
+operator==(const StringName & p_name) const : bool
..
+data_unique_pointer() const : const void *
+hash() const : uint32_t
+operator String() const : String
+operator const void *() const : const void *
{static} +search(const char * p_name) : StringName
{static} +search(const CharType * p_name) : StringName
{static} +search(const String & p_name) : StringName
__
}
class "Dictionary" as C_0001299121424291583786
class C_0001299121424291583786 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42{Dictionary}]] {
+Dictionary(const Dictionary & p_from) : void
+Dictionary() : void
+~Dictionary() : void
..
+operator=(const Dictionary & p_dictionary) : void
..
+operator!=(const Dictionary & p_dictionary) const : bool
+operator==(const Dictionary & p_dictionary) const : bool
+operator[](const Variant & p_key) : Variant &
+operator[](const Variant & p_key) const : const Variant &
..
+clear() : void
+duplicate(bool p_deep = false) const : Dictionary
+empty() const : bool
+erase(const Variant & p_key) : bool
+get(const Variant & p_key, const Variant & p_default) const : Variant
+get_key_at_index(int p_index) const : Variant
+get_key_list(List<Variant> * p_keys) const : void
+get_valid(const Variant & p_key) const : Variant
+get_value_at_index(int p_index) const : Variant
+getptr(const Variant & p_key) : Variant *
+getptr(const Variant & p_key) const : const Variant *
+has(const Variant & p_key) const : bool
+has_all(const Array & p_keys) const : bool
+hash() const : uint32_t
+id() const : const void *
+keys() const : Array
+next(const Variant * p_key = __null) const : const Variant *
+size() const : int
+values() const : Array
__
}
class "RefPtr" as C_0002025812040042972946
class C_0002025812040042972946 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41{RefPtr}]] {
+RefPtr(const RefPtr & p_other) : void
+RefPtr() : void
+~RefPtr() : void
..
+operator=(const RefPtr & p_other) : void
..
+operator!=(const RefPtr & p_other) const : bool
+operator==(const RefPtr & p_other) const : bool
..
+get_data() const : void *
+get_rid() const : RID
+is_null() const : bool
+unref() : void
__
}
class "Set<String>" as C_0001682405743486361214
class C_0001682405743486361214 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41{Set}]] {
__
}
class "HashMap<StringName,Object::Signal>" as C_0001578539238208480863
class C_0001578539238208480863 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/hash_map.h#L59{HashMap}]] {
__
}
class "List<Object::Connection>" as C_0000751300156436098886
class C_0000751300156436098886 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/list.h#L47{List}]] {
__
}
class "Set<Object *>" as C_0000051860595756965531
class C_0000051860595756965531 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/set.h#L41{Set}]] {
__
}
class "Object" as C_0001531814603945772616
class C_0001531814603945772616 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408{Object}]] {
+Object() : void
+~Object() : void
..
+_change_notify(const char * p_property = "") : void
+_is_gpl_reversed() const : bool
+_use_rc() : ObjectRC *
+add_change_receptor(Object * p_receptor) : void
+add_user_signal(const MethodInfo & p_signal) : void
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+call(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call_deferred(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+callv(const StringName & p_method, const Array & p_args) : Variant
+can_translate_messages() const : bool
{static} +cast_to<T>(const Object * p_object) : const T *
{static} +cast_to<T>(Object * p_object) : T *
+clear_internal_resource_paths() : void
+connect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method, const Vector<Variant> & p_binds = Vector<Variant>(), uint32_t p_flags = 0) : Error
+disconnect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) : void
+editor_clear_section_folding() : void
+editor_get_section_folding() const : const Set<String> &
+editor_is_section_unfolded(const String & p_section) : bool
+editor_set_section_unfold(const String & p_section, bool p_unfolded) : void
+emit_signal(const StringName & p_name, const Variant ** p_args, int p_argcount) : Error
+emit_signal(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Error
+get(const StringName & p_name, bool * r_valid = __null) const : Variant
+get_all_signal_connections(List<Object::Connection> * p_connections) const : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
{static} +get_category_static() : String
+get_class() const : String
+get_class_name() const : const StringName &
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_edited_version() const : uint32_t
+get_indexed(const Vector<StringName> & p_names, bool * r_valid = __null) const : Variant
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_instance_id() const : ObjectID
+get_meta(const String & p_name) const : Variant
+get_meta_list(List<String> * p_list) const : void
+get_method_list(List<MethodInfo> * p_list) const : void
{static} +get_parent_class_static() : String
+get_persistent_signal_connection_count() const : int
+get_property_list(List<PropertyInfo> * p_list, bool p_reversed = false) const : void
+get_save_class() const : String
+get_script() const : RefPtr
+get_script_instance() const : ScriptInstance *
+get_script_instance_binding(int p_script_language_index) : void *
+get_signal_connection_list(const StringName & p_signal, List<Object::Connection> * p_connections) const : void
+get_signal_list(List<MethodInfo> * p_signals) const : void
+get_signals_connected_to_this(List<Object::Connection> * p_connections) const : void
+get_static_property_type(const StringName & p_property, bool * r_valid = __null) const : Variant::Type
+get_static_property_type_indexed(const Vector<StringName> & p_path, bool * r_valid = __null) const : Variant::Type
+get_translatable_strings(List<String> * p_strings) const : void
+getvar(const Variant & p_key, bool * r_valid = __null) const : Variant
+has_meta(const String & p_name) const : bool
+has_method(const StringName & p_method) const : bool
+has_script_instance_binding(int p_script_language_index) : bool
+has_signal(const StringName & p_name) const : bool
{static} +initialize_class() : void
+is_blocking_signals() const : bool
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_connected(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) const : bool
+is_edited() const : bool
+is_queued_for_deletion() const : bool
+notification(int p_notification, bool p_reversed = false) : void
{static} +register_custom_data_to_otdb() : void
+remove_change_receptor(Object * p_receptor) : void
+remove_meta(const String & p_name) : void
+set(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+set_block_signals(bool p_block) : void
+set_deferred(const StringName & p_property, const Variant & p_value) : void
+set_edited(bool p_edited) : void
+set_indexed(const Vector<StringName> & p_names, const Variant & p_value, bool * r_valid = __null) : void
+set_message_translation(bool p_enable) : void
+set_meta(const String & p_name, const Variant & p_value) : void
+set_script(const RefPtr & p_script) : void
+set_script_and_instance(const RefPtr & p_script, ScriptInstance * p_instance) : void
+set_script_instance(ScriptInstance * p_instance) : void
+set_script_instance_binding(int p_script_language_index, void * p_data) : void
+setvar(const Variant & p_key, const Variant & p_value, bool * r_valid = __null) : void
+to_string() : String
+tr(const StringName & p_message) const : StringName
__
+NOTIFICATION_POSTINITIALIZE : enum
+NOTIFICATION_PREDELETE : enum
+_is_queued_for_deletion : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745{_is_queued_for_deletion}]]]
}
enum "Object::ConnectFlags" as C_0000219886141561409828
enum C_0000219886141561409828 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410{Object##ConnectFlags}]] {
CONNECT_DEFERRED
CONNECT_PERSIST
CONNECT_ONESHOT
CONNECT_REFERENCE_COUNTED
}
class "Object::Connection" as C_0001267214583673362755
class C_0001267214583673362755 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418{Object##Connection}]] {
+operator<(const Object::Connection & p_conn) const : bool
..
+Connection() : void
+Connection(const Variant & p_variant) : void
+operator Variant() const : Variant
__
+binds : Vector<Variant> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425{binds}]]]
+flags : uint32_t [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424{flags}]]]
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423{method}]]]
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421{signal}]]]
+source : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420{source}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422{target}]]]
}
class "Object::Signal" as C_0000250357724807605097
class C_0000250357724807605097 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448{Object##Signal}]] {
+Signal() : void
__
+slot_map : VMap<Object::Signal::Target,Object::Signal::Slot> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473{slot_map}]]]
+user : MethodInfo [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472{user}]]]
}
class "ObjectDB" as C_0002064336919270342687
class C_0002064336919270342687 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773{ObjectDB}]] {
{static} +debug_objects(ObjectDB::DebugFunc p_func) : void
{static} +get_instance(ObjectID p_instance_id) : Object *
{static} +get_object_count() : int
{static} +instance_validate(Object * p_ptr) : bool
__
}
class "ClassDB" as C_0000104564426296396960
class C_0000104564426296396960 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94{ClassDB}]] {
{static} +_add_class<T>() : void
{static} +_add_class2(const StringName & p_class, const StringName & p_inherits) : void
{static} +_create_ptr_func<T>() : class Object *
{static} +add_compatibility_class(const StringName & p_class, const StringName & p_fallback) : void
{static} +add_property(StringName p_class, const PropertyInfo & p_pinfo, const StringName & p_setter, const StringName & p_getter, int p_index = -1) : void
{static} +add_property_group(StringName p_class, const String & p_name, const String & p_prefix = "") : void
{static} +add_resource_base_extension(const StringName & p_extension, const StringName & p_class) : void
{static} +add_signal(StringName p_class, const MethodInfo & p_signal) : void
{static} +add_virtual_method(const StringName & p_class, const MethodInfo & p_method, bool p_virtual = true) : void
{static} +bind_integer_constant(const StringName & p_class, const StringName & p_enum, const StringName & p_name, int p_constant) : void
{static} +bind_method<N,M>(N p_method_name, M p_method) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7, const Variant & p_def8) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4) : class MethodBind *
{static} +bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition & method_name, const Variant ** p_defs, int p_defcount) : MethodBind *
{static} +bind_vararg_method<M>(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo & p_info = MethodInfo(), const Vector<Variant> & p_default_args = Vector<Variant>(), bool p_return_nil_is_variant = true) : class MethodBind *
{static} +can_instance(const StringName & p_class) : bool
{static} +class_exists(const StringName & p_class) : bool
{static} +class_get_default_property_value(const StringName & p_class, const StringName & p_property, bool * r_valid = __null) : Variant
{static} +cleanup() : void
{static} +cleanup_defaults() : void
{static} +creator<T>() : class Object *
{static} +get_api_hash(ClassDB::APIType p_api) : uint64_t
{static} +get_api_type(const StringName & p_class) : ClassDB::APIType
{static} +get_category(const StringName & p_node) : StringName
{static} +get_class_list(List<StringName> * p_classes) : void
{static} +get_current_api() : ClassDB::APIType
{static} +get_direct_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_enum_constants(const StringName & p_class, const StringName & p_enum, List<StringName> * p_constants, bool p_no_inheritance = false) : void
{static} +get_enum_list(const StringName & p_class, List<StringName> * p_enums, bool p_no_inheritance = false) : void
{static} +get_extensions_for_type(const StringName & p_class, List<String> * p_extensions) : void
{static} +get_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_integer_constant(const StringName & p_class, const StringName & p_name, bool * p_success = __null) : int
{static} +get_integer_constant_enum(const StringName & p_class, const StringName & p_name, bool p_no_inheritance = false) : StringName
{static} +get_integer_constant_list(const StringName & p_class, List<String> * p_constants, bool p_no_inheritance = false) : void
{static} +get_method(StringName p_class, StringName p_name) : MethodBind *
{static} +get_method_list(StringName p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void
{static} +get_parent_class(const StringName & p_class) : StringName
{static} +get_parent_class_nocheck(const StringName & p_class) : StringName
{static} +get_property(Object * p_object, const StringName & p_property, Variant & r_value) : bool
{static} +get_property_getter(StringName p_class, const StringName & p_property) : StringName
{static} +get_property_index(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : int
{static} +get_property_list(StringName p_class, List<PropertyInfo> * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void
{static} +get_property_setter(StringName p_class, const StringName & p_property) : StringName
{static} +get_property_type(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : Variant::Type
{static} +get_resource_base_extensions(List<String> * p_extensions) : void
{static} +get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool
{static} +get_signal_list(StringName p_class, List<MethodInfo> * p_signals, bool p_no_inheritance = false) : void
{static} +get_virtual_methods(const StringName & p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false) : void
{static} +has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool
{static} +has_property(const StringName & p_class, const StringName & p_property, bool p_no_inheritance = false) : bool
{static} +has_signal(StringName p_class, StringName p_signal) : bool
{static} +instance(const StringName & p_class) : Object *
{static} +is_class_enabled(StringName p_class) : bool
{static} +is_class_exposed(StringName p_class) : bool
{static} +is_parent_class(const StringName & p_class, const StringName & p_inherits) : bool
{static} +register_class<T>() : void
{static} +register_custom_instance_class<T>() : void
{static} +register_virtual_class<T>() : void
{static} +set_class_enabled(StringName p_class, bool p_enable) : void
{static} +set_current_api(ClassDB::APIType p_api) : void
{static} +set_method_flags(StringName p_class, StringName p_method, int p_flags) : void
{static} +set_property(Object * p_object, const StringName & p_property, const Variant & p_value, bool * r_valid = __null) : bool
{static} +set_property_default_value(StringName p_class, const StringName & p_name, const Variant & p_default) : void
__
{static} +classes : HashMap<StringName,ClassDB::ClassInfo> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147{classes}]]]
{static} +compat_classes : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149{compat_classes}]]]
{static} +current_api : ClassDB::APIType [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157{current_api}]]]
{static} +default_values : HashMap<StringName,HashMap<StringName,Variant>> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161{default_values}]]]
{static} +default_values_cached : Set<StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162{default_values_cached}]]]
{static} +lock : RWLock [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146{lock}]]]
{static} +resource_base_extensions : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148{resource_base_extensions}]]]
}
class "Node" as C_0000218299049716973303
class C_0000218299049716973303 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55{Node}]] {
+Node() : void
+~Node() : void
..
+_get_class_namev() const : const StringName *
+add_child(Node * p_child, bool p_legible_unique_name = false) : void
+add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void
+add_to_group(const StringName & p_identifier, bool p_persistent = false) : void
+can_process() const : bool
+can_process_notification(int p_what) const : bool
+clear_internal_tree_resource_paths() : void
+duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *
+duplicate_and_reown(const Map<Node *,Node *> & p_reown_map) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap, const Map<RES,RES> & p_resource_remap) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap) const : Node *
+find_common_parent_with(const Node * p_node) const : Node *
+find_node(const String & p_mask, bool p_recursive = true, bool p_owned = true) const : Node *
+find_parent(const String & p_mask) const : Node *
+force_parent_owned() : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
{static} +get_category_static() : String
+get_child(int p_index) const : Node *
+get_child_count() const : int
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_configuration_warning() const : String
+get_custom_multiplayer() const : Ref<MultiplayerAPI>
+get_deepest_editable_node(Node * start_node) const : Node *
+get_editor_description() const : String
+get_filename() const : String
+get_groups(List<Node::GroupInfo> * p_groups) const : void
+get_import_path() const : NodePath
+get_index() const : int
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_multiplayer() const : Ref<MultiplayerAPI>
+get_name() const : StringName
+get_network_master() const : int
+get_node(const NodePath & p_path) const : Node *
+get_node_and_resource(const NodePath & p_path, RES & r_res, Vector<StringName> & r_leftover_subpath, bool p_last_is_property = true) const : Node *
+get_node_or_null(const NodePath & p_path) const : Node *
+get_node_rpc_mode(const StringName & p_method) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+get_node_rset_mode(const StringName & p_property) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+get_owned_by(Node * p_by, List<Node *> * p_owned) : void
+get_owner() const : Node *
+get_parent() const : Node *
{static} +get_parent_class_static() : String
+get_path() const : NodePath
+get_path_to(const Node * p_node) const : NodePath
+get_pause_mode() const : Node::PauseMode
+get_persistent_group_count() const : int
+get_physics_process_delta_time() const : float
+get_position_in_parent() const : int
+get_process_delta_time() const : float
+get_process_priority() const : int
+get_scene_inherited_state() const : Ref<SceneState>
+get_scene_instance_load_placeholder() const : bool
+get_scene_instance_state() const : Ref<SceneState>
+get_tree() const : SceneTree *
{static} +get_valid_parents_static(List<String> * p_parents) : void
+get_viewport() const : Viewport *
+has_node(const NodePath & p_path) const : bool
+has_node_and_resource(const NodePath & p_path) const : bool
{static} +inherits_static() : String
{static} +init_node_hrcr() : void
{static} +initialize_class() : void
+is_a_parent_of(const Node * p_node) const : bool
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_displayed_folded() const : bool
+is_editable_instance(const Node * p_node) const : bool
+is_greater_than(const Node * p_node) const : bool
+is_in_group(const StringName & p_identifier) const : bool
+is_inside_tree() const : bool
+is_network_master() const : bool
+is_owned_by_parent() const : bool
+is_physics_processing() const : bool
+is_physics_processing_internal() const : bool
+is_processing() const : bool
+is_processing_input() const : bool
+is_processing_internal() const : bool
+is_processing_unhandled_input() const : bool
+is_processing_unhandled_key_input() const : bool
{static} +make_binds(const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Vector<Variant>
+move_child(Node * p_child, int p_pos) : void
{static} +print_stray_nodes() : void
+print_tree() : void
+print_tree_pretty() : void
+propagate_call(const StringName & p_method, const Array & p_args = Array(), const bool p_parent_first = false) : void
+propagate_notification(int p_notification) : void
+queue_delete() : void
+raise() : void
+remap_nested_resources(RES p_resource, const Map<RES,RES> & p_resource_remap) const : void
+remap_node_resources(Node * p_node, const Map<RES,RES> & p_resource_remap) const : void
+remove_and_skip() : void
+remove_child(Node * p_child) : void
+remove_from_group(const StringName & p_identifier) : void
+replace_by(Node * p_node, bool p_keep_data = false) : void
+request_ready() : void
+rpc(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_config(const StringName & p_method, MultiplayerAPI::RPCMode p_mode) : void
+rpc_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpcp(int p_peer_id, bool p_unreliable, const StringName & p_method, const Variant ** p_arg, int p_argcount) : void
+rset(const StringName & p_property, const Variant & p_value) : void
+rset_config(const StringName & p_property, MultiplayerAPI::RPCMode p_mode) : void
+rset_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rset_unreliable(const StringName & p_property, const Variant & p_value) : void
+rset_unreliable_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rsetp(int p_peer_id, bool p_unreliable, const StringName & p_property, const Variant & p_value) : void
+set_custom_multiplayer(Ref<MultiplayerAPI> p_multiplayer) : void
+set_display_folded(bool p_folded) : void
+set_editable_instance(Node * p_node, bool p_editable) : void
+set_editor_description(const String & p_editor_description) : void
+set_filename(const String & p_filename) : void
{static} +set_human_readable_collision_renaming(bool p_enabled) : void
+set_import_path(const NodePath & p_import_path) : void
+set_name(const String & p_name) : void
+set_network_master(int p_peer_id, bool p_recursive = true) : void
+set_owner(Node * p_owner) : void
+set_pause_mode(Node::PauseMode p_mode) : void
+set_physics_process(bool p_process) : void
+set_physics_process_internal(bool p_process_internal) : void
+set_process(bool p_idle_process) : void
+set_process_input(bool p_enable) : void
+set_process_internal(bool p_idle_process_internal) : void
+set_process_priority(int p_priority) : void
+set_process_unhandled_input(bool p_enable) : void
+set_process_unhandled_key_input(bool p_enable) : void
+set_scene_inherited_state(const Ref<SceneState> & p_state) : void
+set_scene_instance_load_placeholder(bool p_enable) : void
+set_scene_instance_state(const Ref<SceneState> & p_state) : void
+update_configuration_warning() : void
+validate_child_name(Node * p_child) : String
__
+NOTIFICATION_APP_PAUSED : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_DRAG_BEGIN : enum
+NOTIFICATION_DRAG_END : enum
+NOTIFICATION_ENTER_TREE : enum
+NOTIFICATION_EXIT_TREE : enum
+NOTIFICATION_INSTANCED : enum
+NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum
+NOTIFICATION_INTERNAL_PROCESS : enum
+NOTIFICATION_MOVED_IN_PARENT : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_PARENTED : enum
+NOTIFICATION_PATH_CHANGED : enum
+NOTIFICATION_PAUSED : enum
+NOTIFICATION_PHYSICS_PROCESS : enum
+NOTIFICATION_POST_ENTER_TREE : enum
+NOTIFICATION_PROCESS : enum
+NOTIFICATION_READY : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_UNPARENTED : enum
+NOTIFICATION_UNPAUSED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
{static} +orphan_node_count : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78{orphan_node_count}]]]
}
class "ObjectRC" as C_0000933379568804427881
class C_0000933379568804427881 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54{ObjectRC}]] {
+ObjectRC(Object * p_object) : void
..
+decrement() : bool
+get_ptr() : Object *
+increment() : void
+invalidate() : bool
__
+instance_id : const ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52{instance_id}]]]
}
abstract "ScriptInstance" as C_0001735438654351294549
abstract C_0001735438654351294549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405{ScriptInstance}]] {
+~ScriptInstance() : void
..
{abstract} +call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) = 0 : Variant
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
{abstract} +get(const StringName & p_name, Variant & r_ret) const = 0 : bool
{abstract} +get_language() = 0 : ScriptLanguage *
{abstract} +get_method_list(List<MethodInfo> * p_list) const = 0 : void
+get_owner() : Object *
{abstract} +get_property_list(List<PropertyInfo> * p_properties) const = 0 : void
+get_property_state(List<Pair<StringName,Variant>> & state) : void
{abstract} +get_property_type(const StringName & p_name, bool * r_is_valid = __null) const = 0 : Variant::Type
{abstract} +get_rpc_mode(const StringName & p_method) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_rset_mode(const StringName & p_variable) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_script() const = 0 : Ref<Script>
{abstract} +has_method(const StringName & p_method) const = 0 : bool
+is_placeholder() const : bool
{abstract} +notification(int p_notification) = 0 : void
+property_get_fallback(const StringName & p_name, bool * r_valid) : Variant
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid) : void
+refcount_decremented() : bool
+refcount_incremented() : void
{abstract} +set(const StringName & p_name, const Variant & p_value) = 0 : bool
+to_string(bool * r_valid) : String
__
}
class "Reference" as C_0001778859257025660860
class C_0001778859257025660860 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39{Reference}]] {
+Reference() : void
+~Reference() : void
..
+_get_class_namev() const : const StringName *
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
+init_ref() : bool
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_referenced() const : bool
+reference() : bool
+reference_get_count() const : int
+unreference() : bool
__
}
class "PlaceHolderScriptInstance" as C_0001649884439586022807
class C_0001649884439586022807 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374{PlaceHolderScriptInstance}]] {
+PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref<Script> p_script, Object * p_owner) : void
+~PlaceHolderScriptInstance() : void
..
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+get(const StringName & p_name, Variant & r_ret) const : bool
+get_language() : ScriptLanguage *
+get_method_list(List<MethodInfo> * p_list) const : void
+get_owner() : Object *
+get_property_list(List<PropertyInfo> * p_properties) const : void
+get_property_type(const StringName & p_name, bool * r_is_valid = __null) const : Variant::Type
+get_rpc_mode(const StringName & p_method) const : MultiplayerAPI::RPCMode
+get_rset_mode(const StringName & p_variable) const : MultiplayerAPI::RPCMode
+get_script() const : Ref<Script>
+has_method(const StringName & p_method) const : bool
+is_placeholder() const : bool
+notification(int p_notification) : void
+property_get_fallback(const StringName & p_name, bool * r_valid = __null) : Variant
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+set(const StringName & p_name, const Variant & p_value) : bool
+update(const List<PropertyInfo> & p_properties, const Map<StringName,Variant> & p_values) : void
__
}
class "MainLoop" as C_0000970940027123558604
class C_0000970940027123558604 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38{MainLoop}]] {
+MainLoop() : void
+~MainLoop() : void
..
+_get_class_namev() const : const StringName *
+drop_files(const Vector<String> & p_files, int p_from_screen = 0) : void
+finish() : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
+global_menu_action(const Variant & p_id, const Variant & p_meta) : void
+idle(float p_time) : bool
{static} +inherits_static() : String
+init() : void
{static} +initialize_class() : void
+input_event(const Ref<InputEvent> & p_event) : void
+input_text(const String & p_text) : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+iteration(float p_time) : bool
+set_init_script(const Ref<Script> & p_init_script) : void
__
+NOTIFICATION_APP_PAUSED : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
}
class "Engine::Singleton" as C_0001823345232236209470
class C_0001823345232236209470 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42{Engine##Singleton}]] {
+Singleton(const StringName & p_name = StringName(), Object * p_ptr = __null) : void
__
+name : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43{name}]]]
+ptr : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44{ptr}]]]
}
abstract "IP" as C_0001191393512042218074
abstract C_0001191393512042218074 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39{IP}]] {
+IP() : void
+~IP() : void
..
+_get_class_namev() const : const StringName *
+clear_cache(const String & p_hostname = "") : void
{static} +create() : IP *
+erase_resolve_item(IP::ResolverID p_id) : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_local_addresses(List<IP_Address> * r_addresses) const : void
{abstract} +get_local_interfaces(Map<String,IP::Interface_Info> * r_interfaces) const = 0 : void
{static} +get_parent_class_static() : String
+get_resolve_item_address(IP::ResolverID p_id) const : IP_Address
+get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus
{static} +get_singleton() : IP *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+resolve_hostname(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address
+resolve_hostname_queue_item(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID
__
+RESOLVER_INVALID_ID : enum
+RESOLVER_MAX_QUERIES : enum
}
class "ProjectSettings" as C_0000066148521405667716
class C_0000066148521405667716 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38{ProjectSettings}]] {
+ProjectSettings() : void
+~ProjectSettings() : void
..
+_get_class_namev() const : const StringName *
+clear(const String & p_name) : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_custom_property_info() const : const Map<StringName,PropertyInfo> &
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_input_presets() const : List<String>
+get_last_saved_time() : uint64_t
+get_optimizer_presets() const : Vector<String>
+get_order(const String & p_name) const : int
{static} +get_parent_class_static() : String
+get_resource_path() const : String
+get_setting(const String & p_setting) const : Variant
{static} +get_singleton() : ProjectSettings *
{static} +get_valid_parents_static(List<String> * p_parents) : void
+globalize_path(const String & p_path) const : String
+has_custom_feature(const String & p_feature) const : bool
+has_setting(String p_var) const : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_using_datapack() const : bool
+localize_path(const String & p_path) const : String
+property_can_revert(const String & p_name) : bool
+property_get_revert(const String & p_name) : Variant
+save() : Error
+save_custom(const String & p_path = "", const ProjectSettings::CustomMap & p_custom = CustomMap(), const Vector<String> & p_custom_features = Vector<String>(), bool p_merge_with_current = true) : Error
+set_builtin_order(const String & p_name) : void
+set_custom_property_info(const String & p_prop, const PropertyInfo & p_info) : void
+set_disable_feature_overrides(bool p_disable) : void
+set_initial_value(const String & p_name, const Variant & p_value) : void
+set_order(const String & p_name, int p_order) : void
+set_registering_order(bool p_enable) : void
+set_restart_if_changed(const String & p_name, bool p_restart) : void
+set_setting(const String & p_setting, const Variant & p_value) : void
+setup(const String & p_path, const String & p_main_pack, bool p_upwards = false) : Error
__
{static} +CONFIG_VERSION : const int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117{CONFIG_VERSION}]]]
+NO_BUILTIN_ORDER_BASE : enum
}
abstract "Input" as C_0000535376932101028371
abstract C_0000535376932101028371 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38{Input}]] {
+Input() : void
..
+_get_class_namev() const : const StringName *
{abstract} +accumulate_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +action_press(const StringName & p_action, float p_strength = 1.f) = 0 : void
{abstract} +action_release(const StringName & p_action) = 0 : void
{abstract} +add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void
{abstract} +flush_accumulated_events() = 0 : void
{abstract} +get_accelerometer() const = 0 : Vector3
{abstract} +get_action_strength(const StringName & p_action) const = 0 : float
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{abstract} +get_connected_joypads() = 0 : Array
{abstract} +get_current_cursor_shape() const = 0 : Input::CursorShape
{abstract} +get_default_cursor_shape() const = 0 : Input::CursorShape
{abstract} +get_gravity() const = 0 : Vector3
{abstract} +get_gyroscope() const = 0 : Vector3
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{abstract} +get_joy_axis(int p_device, int p_axis) const = 0 : float
{abstract} +get_joy_axis_index_from_string(String p_axis) = 0 : int
{abstract} +get_joy_axis_string(int p_axis) = 0 : String
{abstract} +get_joy_button_index_from_string(String p_button) = 0 : int
{abstract} +get_joy_button_string(int p_button) = 0 : String
{abstract} +get_joy_guid(int p_device) const = 0 : String
{abstract} +get_joy_name(int p_idx) = 0 : String
{abstract} +get_joy_vibration_duration(int p_device) = 0 : float
{abstract} +get_joy_vibration_strength(int p_device) = 0 : Vector2
{abstract} +get_joy_vibration_timestamp(int p_device) = 0 : uint64_t
{abstract} +get_last_mouse_speed() const = 0 : Point2
{abstract} +get_magnetometer() const = 0 : Vector3
{abstract} +get_mouse_button_mask() const = 0 : int
+get_mouse_mode() const : Input::MouseMode
{abstract} +get_mouse_position() const = 0 : Point2
{static} +get_parent_class_static() : String
{static} +get_singleton() : Input *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
{abstract} +is_action_just_pressed(const StringName & p_action) const = 0 : bool
{abstract} +is_action_just_released(const StringName & p_action) const = 0 : bool
{abstract} +is_action_pressed(const StringName & p_action) const = 0 : bool
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_emulating_mouse_from_touch() const = 0 : bool
{abstract} +is_emulating_touch_from_mouse() const = 0 : bool
{abstract} +is_joy_button_pressed(int p_device, int p_button) const = 0 : bool
{abstract} +is_joy_known(int p_device) = 0 : bool
{abstract} +is_key_pressed(int p_scancode) const = 0 : bool
{abstract} +is_mouse_button_pressed(int p_button) const = 0 : bool
{abstract} +joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void
{abstract} +parse_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +remove_joy_mapping(String p_guid) = 0 : void
{abstract} +set_custom_mouse_cursor(const RES & p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 & p_hotspot = Vector2()) = 0 : void
{abstract} +set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void
+set_mouse_mode(Input::MouseMode p_mode) : void
{abstract} +set_use_accumulated_input(bool p_enable) = 0 : void
{abstract} +start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void
{abstract} +stop_joy_vibration(int p_device) = 0 : void
{abstract} +vibrate_handheld(int p_duration_ms = 500) = 0 : void
{abstract} +warp_mouse_motion(const Ref<InputEventMouseMotion> & p_motion, const Rect2 & p_rect) = 0 : Point2i
{abstract} +warp_mouse_position(const Vector2 & p_to) = 0 : void
__
}
class "AudioServer" as C_0001370497546359815893
class C_0001370497546359815893 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148{AudioServer}]] {
+AudioServer() : void
+~AudioServer() : void
..
+_get_class_namev() const : const StringName *
+add_bus(int p_at_pos = -1) : void
+add_bus_effect(int p_bus, const Ref<AudioEffect> & p_effect, int p_at_pos = -1) : void
+add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *
+audio_data_free(void * p_data) : void
+audio_data_get_max_memory_usage() const : size_t
+audio_data_get_total_memory_usage() const : size_t
+capture_get_device() : String
+capture_get_device_list() : Array
+capture_set_device(const String & p_name) : void
+finish() : void
+generate_bus_layout() const : Ref<AudioBusLayout>
+get_bus_channels(int p_bus) const : int
+get_bus_count() const : int
+get_bus_effect(int p_bus, int p_effect) : Ref<AudioEffect>
+get_bus_effect_count(int p_bus) : int
+get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref<AudioEffectInstance>
+get_bus_index(const StringName & p_bus_name) const : int
+get_bus_name(int p_bus) const : String
+get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float
+get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float
+get_bus_send(int p_bus) const : StringName
+get_bus_volume_db(int p_bus) const : float
{static} +get_category_static() : String
+get_channel_count() const : int
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_device() : String
+get_device_list() : Array
+get_global_rate_scale() const : float
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_mix_rate() const : float
+get_output_latency() const : double
{static} +get_parent_class_static() : String
{static} +get_singleton() : AudioServer *
+get_speaker_mode() const : AudioServer::SpeakerMode
+get_time_since_last_mix() const : double
+get_time_to_next_mix() const : double
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
+init() : void
{static} +initialize_class() : void
+is_bus_bypassing_effects(int p_bus) const : bool
+is_bus_channel_active(int p_bus, int p_channel) const : bool
+is_bus_effect_enabled(int p_bus, int p_effect) const : bool
+is_bus_mute(int p_bus) const : bool
+is_bus_solo(int p_bus) const : bool
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+load_default_bus_layout() : void
+lock() : void
+move_bus(int p_bus, int p_to_pos) : void
+read_output_peak_db() const : float
+remove_bus(int p_index) : void
+remove_bus_effect(int p_bus, int p_effect) : void
+remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+set_bus_bypass_effects(int p_bus, bool p_enable) : void
+set_bus_count(int p_count) : void
+set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void
+set_bus_layout(const Ref<AudioBusLayout> & p_bus_layout) : void
+set_bus_mute(int p_bus, bool p_enable) : void
+set_bus_name(int p_bus, const String & p_name) : void
+set_bus_send(int p_bus, const StringName & p_send) : void
+set_bus_solo(int p_bus, bool p_enable) : void
+set_bus_volume_db(int p_bus, float p_volume_db) : void
+set_device(String device) : void
+set_global_rate_scale(float p_scale) : void
+swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void
+thread_find_bus_index(const StringName & p_name) : int
+thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *
+thread_get_mix_buffer_size() const : int
+thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool
+unlock() : void
+update() : void
__
+AUDIO_DATA_INVALID_ID : enum
}
class "CameraServer" as C_0001701907280759632930
class C_0001701907280759632930 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49{CameraServer}]] {
+CameraServer() : void
+~CameraServer() : void
..
+_get_class_namev() const : const StringName *
+add_feed(const Ref<CameraFeed> & p_feed) : void
{static} +create() : CameraServer *
+feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_feed(int p_index) : Ref<CameraFeed>
+get_feed_by_id(int p_id) : Ref<CameraFeed>
+get_feed_count() : int
+get_feed_index(int p_id) : int
+get_feeds() : Array
+get_free_id() : int
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_singleton() : CameraServer *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +make_default<T>() : void
+remove_feed(const Ref<CameraFeed> & p_feed) : void
__
}
abstract "VisualServer" as C_0001589464385186808769
abstract C_0001589464385186808769 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42{VisualServer}]] {
+VisualServer() : void
+~VisualServer() : void
..
+_get_class_namev() const : const StringName *
+_instances_cull_aabb_bind(const AABB & p_aabb, RID p_scenario = = RID()) const : Array
+_instances_cull_convex_bind(const Array & p_convex, RID p_scenario = = RID()) const : Array
+_instances_cull_ray_bind(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const : Array
+_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array
+_shader_get_param_list_bind(RID p_shader) const : Array
+_texture_debug_usage_bind() : Array
{abstract} +black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void
{abstract} +black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void
{abstract} +call_set_use_vsync(bool p_enable) = 0 : void
{abstract} +camera_create() = 0 : RID
{abstract} +camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void
{abstract} +camera_set_environment(RID p_camera, RID p_env) = 0 : void
{abstract} +camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_transform(RID p_camera, const Transform & p_transform) = 0 : void
{abstract} +camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void
{abstract} +canvas_create() = 0 : RID
{abstract} +canvas_item_add_circle(RID p_item, const Point2 & p_pos, float p_radius, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void
{abstract} +canvas_item_add_line(RID p_item, const Point2 & p_from, const Point2 & p_to, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_mesh(RID p_item, const RID & p_mesh, const Transform2D & p_transform = Transform2D(), const Color & p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_multiline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_nine_patch(RID p_item, const Rect2 & p_rect, const Rect2 & p_source, RID p_texture, const Vector2 & p_topleft, const Vector2 & p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color & p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void
{abstract} +canvas_item_add_polygon(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_polyline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_primitive(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_rect(RID p_item, const Rect2 & p_rect, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_add_texture_rect(RID p_item, const Rect2 & p_rect, RID p_texture, bool p_tile = false, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void
{abstract} +canvas_item_add_triangle_array(RID p_item, const Vector<int> & p_indices, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), const Vector<int> & p_bones = Vector<int>(), const Vector<float> & p_weights = Vector<float>(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void
{abstract} +canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void
{abstract} +canvas_item_clear(RID p_item) = 0 : void
{abstract} +canvas_item_create() = 0 : RID
{abstract} +canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void
{abstract} +canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 & p_rect) = 0 : void
{abstract} +canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 & p_rect = Rect2()) = 0 : void
{abstract} +canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void
{abstract} +canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void
{abstract} +canvas_item_set_material(RID p_item, RID p_material) = 0 : void
{abstract} +canvas_item_set_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void
{abstract} +canvas_item_set_self_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void
{abstract} +canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void
{abstract} +canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_z_index(RID p_item, int p_z) = 0 : void
{abstract} +canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void
{abstract} +canvas_light_create() = 0 : RID
{abstract} +canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void
{abstract} +canvas_light_occluder_create() = 0 : RID
{abstract} +canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void
{abstract} +canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void
{abstract} +canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void
{abstract} +canvas_light_occluder_set_transform(RID p_occluder, const Transform2D & p_xform) = 0 : void
{abstract} +canvas_light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_energy(RID p_light, float p_energy) = 0 : void
{abstract} +canvas_light_set_height(RID p_light, float p_height) = 0 : void
{abstract} +canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void
{abstract} +canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void
{abstract} +canvas_light_set_scale(RID p_light, float p_scale) = 0 : void
{abstract} +canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void
{abstract} +canvas_light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void
{abstract} +canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void
{abstract} +canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void
{abstract} +canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void
{abstract} +canvas_light_set_texture_offset(RID p_light, const Vector2 & p_offset) = 0 : void
{abstract} +canvas_light_set_transform(RID p_light, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void
{abstract} +canvas_occluder_polygon_create() = 0 : RID
{abstract} +canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void
{abstract} +canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape, bool p_closed) = 0 : void
{abstract} +canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape) = 0 : void
{abstract} +canvas_set_disable_scale(bool p_disable) = 0 : void
{abstract} +canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 & p_mirroring) = 0 : void
{abstract} +canvas_set_modulate(RID p_canvas, const Color & p_color) = 0 : void
{abstract} +canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void
{static} +create() : VisualServer *
{abstract} +directional_light_create() = 0 : RID
{abstract} +draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void
{abstract} +environment_create() = 0 : RID
{abstract} +environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void
{abstract} +environment_set_ambient_light(RID p_env, const Color & p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void
{abstract} +environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void
{abstract} +environment_set_bg_color(RID p_env, const Color & p_color) = 0 : void
{abstract} +environment_set_bg_energy(RID p_env, float p_energy) = 0 : void
{abstract} +environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void
{abstract} +environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void
{abstract} +environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_fog(RID p_env, bool p_enable, const Color & p_color, const Color & p_sun_color, float p_sun_amount) = 0 : void
{abstract} +environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void
{abstract} +environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void
{abstract} +environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void
{abstract} +environment_set_sky(RID p_env, RID p_sky) = 0 : void
{abstract} +environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void
{abstract} +environment_set_sky_orientation(RID p_env, const Basis & p_orientation) = 0 : void
{abstract} +environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color & p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void
{abstract} +environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void
{abstract} +environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void
{abstract} +finish() = 0 : void
{abstract} +free(RID p_rid) = 0 : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{abstract} +get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t
{static} +get_singleton() : VisualServer *
{abstract} +get_test_cube() = 0 : RID
+get_test_texture() : RID
{static} +get_valid_parents_static(List<String> * p_parents) : void
{abstract} +get_video_adapter_name() const = 0 : String
{abstract} +get_video_adapter_vendor() const = 0 : String
+get_white_texture() : RID
{abstract} +gi_probe_create() = 0 : RID
{abstract} +gi_probe_get_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_get_bounds(RID p_probe) const = 0 : AABB
{abstract} +gi_probe_get_cell_size(RID p_probe) const = 0 : float
{abstract} +gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector<int>
{abstract} +gi_probe_get_dynamic_range(RID p_probe) const = 0 : int
{abstract} +gi_probe_get_energy(RID p_probe) const = 0 : float
{abstract} +gi_probe_get_normal_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_get_propagation(RID p_probe) const = 0 : float
{abstract} +gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform
{abstract} +gi_probe_is_compressed(RID p_probe) const = 0 : bool
{abstract} +gi_probe_is_interior(RID p_probe) const = 0 : bool
{abstract} +gi_probe_set_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_set_bounds(RID p_probe, const AABB & p_bounds) = 0 : void
{abstract} +gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_set_dynamic_data(RID p_probe, const PoolVector<int> & p_data) = 0 : void
{abstract} +gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void
{abstract} +gi_probe_set_energy(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_set_to_cell_xform(RID p_probe, const Transform & p_xform) = 0 : void
{abstract} +has_changed() const = 0 : bool
{abstract} +has_feature(VisualServer::Features p_feature) const = 0 : bool
{abstract} +has_os_feature(const String & p_feature) const = 0 : bool
{abstract} +immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void
{abstract} +immediate_clear(RID p_immediate) = 0 : void
{abstract} +immediate_color(RID p_immediate, const Color & p_color) = 0 : void
{abstract} +immediate_create() = 0 : RID
{abstract} +immediate_end(RID p_immediate) = 0 : void
{abstract} +immediate_get_material(RID p_immediate) const = 0 : RID
{abstract} +immediate_normal(RID p_immediate, const Vector3 & p_normal) = 0 : void
{abstract} +immediate_set_material(RID p_immediate, RID p_material) = 0 : void
{abstract} +immediate_tangent(RID p_immediate, const Plane & p_tangent) = 0 : void
{abstract} +immediate_uv(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_uv2(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_vertex(RID p_immediate, const Vector3 & p_vertex) = 0 : void
+immediate_vertex_2d(RID p_immediate, const Vector2 & p_vertex) : void
{static} +inherits_static() : String
{abstract} +init() = 0 : void
{static} +initialize_class() : void
{abstract} +instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void
{abstract} +instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void
{abstract} +instance_create() = 0 : RID
+instance_create2(RID p_base, RID p_scenario) : RID
{abstract} +instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void
{abstract} +instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void
{abstract} +instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void
{abstract} +instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void
{abstract} +instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void
{abstract} +instance_set_base(RID p_instance, RID p_base) = 0 : void
{abstract} +instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void
{abstract} +instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void
{abstract} +instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void
{abstract} +instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void
{abstract} +instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void
{abstract} +instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void
{abstract} +instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void
{abstract} +instance_set_transform(RID p_instance, const Transform & p_transform) = 0 : void
{abstract} +instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 & p_lightmap_uv_rect) = 0 : void
{abstract} +instance_set_visible(RID p_instance, bool p_visible) = 0 : void
{abstract} +instances_cull_aabb(const AABB & p_aabb, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_convex(const Vector<Plane> & p_convex, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_ray(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_low_end() const = 0 : bool
+is_render_loop_enabled() const : bool
{abstract} +light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void
{abstract} +light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void
{abstract} +light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void
{abstract} +light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void
{abstract} +light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void
{abstract} +light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void
{abstract} +light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void
{abstract} +light_set_negative(RID p_light, bool p_enable) = 0 : void
{abstract} +light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void
{abstract} +light_set_projector(RID p_light, RID p_texture) = 0 : void
{abstract} +light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_shadow(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_use_gi(RID p_light, bool p_enable) = 0 : void
{abstract} +lightmap_capture_create() = 0 : RID
{abstract} +lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB
{abstract} +lightmap_capture_get_energy(RID p_capture) const = 0 : float
{abstract} +lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector<uint8_t>
{abstract} +lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int
{abstract} +lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform
{abstract} +lightmap_capture_is_interior(RID p_capture) const = 0 : bool
{abstract} +lightmap_capture_set_bounds(RID p_capture, const AABB & p_bounds) = 0 : void
{abstract} +lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void
{abstract} +lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void
{abstract} +lightmap_capture_set_octree(RID p_capture, const PoolVector<uint8_t> & p_octree) = 0 : void
{abstract} +lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void
{abstract} +lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform & p_xform) = 0 : void
+make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID
{abstract} +material_create() = 0 : RID
{abstract} +material_get_param(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_get_param_default(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_get_shader(RID p_shader_material) const = 0 : RID
{abstract} +material_set_line_width(RID p_material, float p_width) = 0 : void
{abstract} +material_set_next_pass(RID p_material, RID p_next_material) = 0 : void
{abstract} +material_set_param(RID p_material, const StringName & p_param, const Variant & p_value) = 0 : void
{abstract} +material_set_render_priority(RID p_material, int priority) = 0 : void
{abstract} +material_set_shader(RID p_shader_material, RID p_shader) = 0 : void
{abstract} +mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector<uint8_t> & p_array, int p_vertex_count, const PoolVector<uint8_t> & p_index_array, int p_index_count, const AABB & p_aabb, const Vector<PoolVector<uint8_t>> & p_blend_shapes = Vector<PoolVector<uint8_t> >(), const Vector<AABB> & p_bone_aabbs = Vector<AABB>()) = 0 : void
+mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array & p_arrays, const Array & p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void
+mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData & p_mesh_data) : void
+mesh_add_surface_from_planes(RID p_mesh, const PoolVector<Plane> & p_planes) : void
{abstract} +mesh_clear(RID p_mesh) = 0 : void
{abstract} +mesh_create() = 0 : RID
{abstract} +mesh_get_blend_shape_count(RID p_mesh) const = 0 : int
{abstract} +mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode
{abstract} +mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB
{abstract} +mesh_get_surface_count(RID p_mesh) const = 0 : int
{abstract} +mesh_remove_surface(RID p_mesh, int p_index) = 0 : void
{abstract} +mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void
{abstract} +mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void
{abstract} +mesh_set_custom_aabb(RID p_mesh, const AABB & p_aabb) = 0 : void
{abstract} +mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB
{abstract} +mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
{abstract} +mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int
{abstract} +mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int
+mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array
+mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array
{abstract} +mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector<PoolVector<uint8_t>>
{abstract} +mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t
+mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t
+mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t
{abstract} +mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
{abstract} +mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID
{abstract} +mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType
{abstract} +mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector<AABB>
+mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t
{abstract} +mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void
{abstract} +mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector<uint8_t> & p_data) = 0 : void
{abstract} +multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void
{abstract} +multimesh_create() = 0 : RID
{abstract} +multimesh_get_aabb(RID p_multimesh) const = 0 : AABB
{abstract} +multimesh_get_instance_count(RID p_multimesh) const = 0 : int
{abstract} +multimesh_get_mesh(RID p_multimesh) const = 0 : RID
{abstract} +multimesh_get_visible_instances(RID p_multimesh) const = 0 : int
{abstract} +multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform
{abstract} +multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D
{abstract} +multimesh_instance_set_color(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform & p_transform) = 0 : void
{abstract} +multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D & p_transform) = 0 : void
{abstract} +multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector<float> & p_array) = 0 : void
{abstract} +multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void
{abstract} +multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void
{abstract} +omni_light_create() = 0 : RID
{abstract} +particles_create() = 0 : RID
{abstract} +particles_get_current_aabb(RID p_particles) = 0 : AABB
{abstract} +particles_get_emitting(RID p_particles) = 0 : bool
{abstract} +particles_is_inactive(RID p_particles) = 0 : bool
{abstract} +particles_request_process(RID p_particles) = 0 : void
{abstract} +particles_restart(RID p_particles) = 0 : void
{abstract} +particles_set_amount(RID p_particles, int p_amount) = 0 : void
{abstract} +particles_set_custom_aabb(RID p_particles, const AABB & p_aabb) = 0 : void
{abstract} +particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void
{abstract} +particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void
{abstract} +particles_set_draw_passes(RID p_particles, int p_count) = 0 : void
{abstract} +particles_set_emission_transform(RID p_particles, const Transform & p_transform) = 0 : void
{abstract} +particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void
{abstract} +particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void
{abstract} +particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void
{abstract} +particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void
{abstract} +particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void
{abstract} +particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void
{abstract} +particles_set_process_material(RID p_particles, RID p_material) = 0 : void
{abstract} +particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void
{abstract} +particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void
{abstract} +reflection_probe_create() = 0 : RID
{abstract} +reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void
{abstract} +reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_extents(RID p_probe, const Vector3 & p_extents) = 0 : void
{abstract} +reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void
{abstract} +reflection_probe_set_interior_ambient(RID p_probe, const Color & p_color) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void
{abstract} +reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void
{abstract} +reflection_probe_set_origin_offset(RID p_probe, const Vector3 & p_offset) = 0 : void
{abstract} +reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void
{abstract} +reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void
{abstract} +request_frame_drawn_callback(Object * p_where, const StringName & p_method, const Variant & p_userdata) = 0 : void
{abstract} +scenario_create() = 0 : RID
{abstract} +scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void
{abstract} +scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void
{abstract} +scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void
{abstract} +scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void
{abstract} +set_boot_image(const Ref<Image> & p_image, const Color & p_color, bool p_scale, bool p_use_filter = true) = 0 : void
{abstract} +set_debug_generate_wireframes(bool p_generate) = 0 : void
{abstract} +set_default_clear_color(const Color & p_color) = 0 : void
+set_render_loop_enabled(bool p_enabled) : void
{abstract} +set_shader_time_scale(float p_scale) = 0 : void
{abstract} +shader_add_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +shader_create() = 0 : RID
{abstract} +shader_get_code(RID p_shader) const = 0 : String
{abstract} +shader_get_custom_defines(RID p_shader, Vector<String> * p_defines) const = 0 : void
{abstract} +shader_get_default_texture_param(RID p_shader, const StringName & p_name) const = 0 : RID
{abstract} +shader_get_param_list(RID p_shader, List<PropertyInfo> * p_param_list) const = 0 : void
{abstract} +shader_remove_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +shader_set_code(RID p_shader, const String & p_code) = 0 : void
{abstract} +shader_set_default_texture_param(RID p_shader, const StringName & p_name, RID p_texture) = 0 : void
{abstract} +skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void
{abstract} +skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform
{abstract} +skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D
{abstract} +skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform & p_transform) = 0 : void
{abstract} +skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D & p_transform) = 0 : void
{abstract} +skeleton_create() = 0 : RID
{abstract} +skeleton_get_bone_count(RID p_skeleton) const = 0 : int
{abstract} +skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D & p_base_transform) = 0 : void
{abstract} +sky_create() = 0 : RID
{abstract} +sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void
{abstract} +spot_light_create() = 0 : RID
{abstract} +sync() = 0 : void
{abstract} +texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void
{abstract} +texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void
{abstract} +texture_create() = 0 : RID
+texture_create_from_image(const Ref<Image> & p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID
{abstract} +texture_debug_usage(List<VisualServer::TextureInfo> * r_info) = 0 : void
{abstract} +texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref<Image>
{abstract} +texture_get_depth(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_flags(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_format(RID p_texture) const = 0 : Image::Format
{abstract} +texture_get_height(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_path(RID p_texture) const = 0 : String
{abstract} +texture_get_texid(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType
{abstract} +texture_get_width(RID p_texture) const = 0 : uint32_t
{abstract} +texture_set_data(RID p_texture, const Ref<Image> & p_image, int p_layer = 0) = 0 : void
{abstract} +texture_set_data_partial(RID p_texture, const Ref<Image> & p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void
{abstract} +texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void
{abstract} +texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void
{abstract} +texture_set_path(RID p_texture, const String & p_path) = 0 : void
{abstract} +texture_set_proxy(RID p_proxy, RID p_base) = 0 : void
{abstract} +texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void
{abstract} +texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void
{abstract} +textures_keep_original(bool p_enable) = 0 : void
{abstract} +viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void
{abstract} +viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_attach_to_screen(RID p_viewport, const Rect2 & p_rect = Rect2(), int p_screen = 0) = 0 : void
{abstract} +viewport_create() = 0 : RID
{abstract} +viewport_detach(RID p_viewport) = 0 : void
{abstract} +viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int
{abstract} +viewport_get_texture(RID p_viewport) const = 0 : RID
{abstract} +viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_set_active(RID p_viewport, bool p_active) = 0 : void
{abstract} +viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void
{abstract} +viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D & p_offset) = 0 : void
{abstract} +viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void
{abstract} +viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void
{abstract} +viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_global_canvas_transform(RID p_viewport, const Transform2D & p_transform) = 0 : void
{abstract} +viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void
{abstract} +viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void
{abstract} +viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void
{abstract} +viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void
{abstract} +viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void
{abstract} +viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void
{abstract} +viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void
{abstract} +viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void
{abstract} +viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void
{abstract} +viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void
{abstract} +viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void
{abstract} +viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void
{abstract} +viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void
__
+ARRAY_WEIGHTS_SIZE : enum
+CANVAS_ITEM_Z_MAX : enum
+CANVAS_ITEM_Z_MIN : enum
+MATERIAL_RENDER_PRIORITY_MAX : enum
+MATERIAL_RENDER_PRIORITY_MIN : enum
+MAX_CURSORS : enum
+MAX_GLOW_LEVELS : enum
+NO_INDEX_ARRAY : enum
}
abstract "PhysicsDirectBodyState" as C_0001559146041463814963
abstract C_0001559146041463814963 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39{PhysicsDirectBodyState}]] {
+PhysicsDirectBodyState() : void
..
+_get_class_namev() const : const StringName *
{abstract} +add_central_force(const Vector3 & p_force) = 0 : void
{abstract} +add_force(const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +add_torque(const Vector3 & p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector3 & p_j) = 0 : void
{abstract} +apply_impulse(const Vector3 & p_pos, const Vector3 & p_j) = 0 : void
{abstract} +apply_torque_impulse(const Vector3 & p_j) = 0 : void
{abstract} +get_angular_velocity() const = 0 : Vector3
{static} +get_category_static() : String
{abstract} +get_center_of_mass() const = 0 : Vector3
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_impulse(int p_contact_idx) const = 0 : float
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{abstract} +get_inverse_inertia() const = 0 : Vector3
{abstract} +get_inverse_inertia_tensor() const = 0 : Basis
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_linear_velocity() const = 0 : Vector3
{static} +get_parent_class_static() : String
{abstract} +get_principal_inertia_axes() const = 0 : Basis
{abstract} +get_space_state() = 0 : PhysicsDirectSpaceState *
{abstract} +get_step() const = 0 : real_t
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_total_gravity() const = 0 : Vector3
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_transform() const = 0 : Transform
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+integrate_forces() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_sleeping() const = 0 : bool
{abstract} +set_angular_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +set_linear_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +set_transform(const Transform & p_transform) = 0 : void
__
}
abstract "PhysicsDirectSpaceState" as C_0000503002593685351124
abstract C_0000503002593685351124 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143{PhysicsDirectSpaceState}]] {
+PhysicsDirectSpaceState() : void
..
+_get_class_namev() const : const StringName *
{abstract} +cast_motion(const RID & p_shape, const Transform & p_xform, const Vector3 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform & p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{abstract} +get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
{abstract} +intersect_point(const Vector3 & p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +intersect_ray(const Vector3 & p_from, const Vector3 & p_to, PhysicsDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool
{abstract} +intersect_shape(const RID & p_shape, const Transform & p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +rest_info(RID p_shape, const Transform & p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
__
}
class "PhysicsDirectSpaceState::ShapeResult" as C_0000493041171271776846
class C_0000493041171271776846 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158{PhysicsDirectSpaceState##ShapeResult}]] {
__
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162{collider}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161{collider_id}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160{rid}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163{shape}]]]
}
class "PhysicsDirectSpaceState::RayResult" as C_0000461609734144368587
class C_0000461609734144368587 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168{PhysicsDirectSpaceState##RayResult}]] {
__
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174{collider}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173{collider_id}]]]
+normal : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171{normal}]]]
+position : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170{position}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172{rid}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175{shape}]]]
}
abstract "PhysicsServer" as C_0001034902024938599899
abstract C_0001034902024938599899 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224{PhysicsServer}]] {
+PhysicsServer() : void
+~PhysicsServer() : void
..
+_get_class_namev() const : const StringName *
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_create() = 0 : RID
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode
{abstract} +area_get_transform(RID p_area) const = 0 : Transform
{abstract} +area_is_ray_pickable(RID p_area) const = 0 : bool
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform & p_transform) = 0 : void
{abstract} +body_add_central_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +body_add_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector3 & p_pos, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector3
{abstract} +body_get_applied_torque(RID p_body) const = 0 : Vector3
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *
{abstract} +body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +body_get_user_flags(RID p_body) const = 0 : uint32_t
{abstract} +body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool
{abstract} +body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_set_applied_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_set_applied_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector3 & p_axis_velocity) = 0 : void
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void
{abstract} +body_test_motion(RID p_body, const Transform & p_from, const Vector3 & p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform & p_transform, bool p_infinite_inertia, Vector3 & r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float
{abstract} +cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void
{abstract} +finish() = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +free(RID p_rid) = 0 : void
{abstract} +generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool
{abstract} +generic_6dof_joint_get_param(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float
{abstract} +generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void
{abstract} +generic_6dof_joint_set_param(RID p_joint, Vector3::Axis, PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{abstract} +get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int
{static} +get_singleton() : PhysicsServer *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{abstract} +hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool
{abstract} +hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float
{abstract} +hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void
{abstract} +hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void
{static} +inherits_static() : String
{abstract} +init() = 0 : void
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +joint_create_cone_twist(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +joint_create_generic_6dof(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +joint_create_hinge(RID p_body_A, const Transform & p_hinge_A, RID p_body_B, const Transform & p_hinge_B) = 0 : RID
{abstract} +joint_create_hinge_simple(RID p_body_A, const Vector3 & p_pivot_A, const Vector3 & p_axis_A, RID p_body_B, const Vector3 & p_pivot_B, const Vector3 & p_axis_B) = 0 : RID
{abstract} +joint_create_pin(RID p_body_A, const Vector3 & p_local_A, RID p_body_B, const Vector3 & p_local_B) = 0 : RID
{abstract} +joint_create_slider(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_get_solver_priority(RID p_joint) const = 0 : int
{abstract} +joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void
{abstract} +pin_joint_get_local_a(RID p_joint) const = 0 : Vector3
{abstract} +pin_joint_get_local_b(RID p_joint) const = 0 : Vector3
{abstract} +pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float
{abstract} +pin_joint_set_local_a(RID p_joint, const Vector3 & p_A) = 0 : void
{abstract} +pin_joint_set_local_b(RID p_joint, const Vector3 & p_B) = 0 : void
{abstract} +pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_get_margin(RID p_shape) const = 0 : real_t
{abstract} +shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +shape_set_margin(RID p_shape, real_t p_margin) = 0 : void
{abstract} +slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float
{abstract} +slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void
{abstract} +soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_create(bool p_init_sleeping = false) = 0 : RID
{abstract} +soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_get_damping_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_get_drag_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_get_linear_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3
{abstract} +soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3
{abstract} +soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_get_simulation_precision(RID p_body) = 0 : int
{abstract} +soft_body_get_space(RID p_body) const = 0 : RID
{abstract} +soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +soft_body_get_total_mass(RID p_body) = 0 : real_t
{abstract} +soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3
{abstract} +soft_body_get_volume_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool
{abstract} +soft_body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +soft_body_move_point(RID p_body, int p_point_index, const Vector3 & p_global_position) = 0 : void
{abstract} +soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void
{abstract} +soft_body_remove_all_pinned_points(RID p_body) = 0 : void
{abstract} +soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void
{abstract} +soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void
{abstract} +soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_set_mesh(RID p_body, const REF & p_mesh) = 0 : void
{abstract} +soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void
{abstract} +soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void
{abstract} +soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void
{abstract} +soft_body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void
{abstract} +soft_body_set_transform(RID p_body, const Transform & p_transform) = 0 : void
{abstract} +soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void
{abstract} +space_create() = 0 : RID
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector3>
{abstract} +space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *
{abstract} +space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +step(float p_step) = 0 : void
__
}
abstract "Physics2DDirectBodyState" as C_0002302096389852429221
abstract C_0002302096389852429221 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40{Physics2DDirectBodyState}]] {
+Physics2DDirectBodyState() : void
..
+_get_class_namev() const : const StringName *
{abstract} +add_central_force(const Vector2 & p_force) = 0 : void
{abstract} +add_force(const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +add_torque(real_t p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector2 & p_impulse) = 0 : void
{abstract} +apply_impulse(const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +apply_torque_impulse(real_t p_torque) = 0 : void
{abstract} +get_angular_velocity() const = 0 : real_t
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{abstract} +get_inverse_inertia() const = 0 : real_t
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_linear_velocity() const = 0 : Vector2
{static} +get_parent_class_static() : String
{abstract} +get_space_state() = 0 : Physics2DDirectSpaceState *
{abstract} +get_step() const = 0 : real_t
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_total_gravity() const = 0 : Vector2
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_transform() const = 0 : Transform2D
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+integrate_forces() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_sleeping() const = 0 : bool
{abstract} +set_angular_velocity(real_t p_velocity) = 0 : void
{abstract} +set_linear_velocity(const Vector2 & p_velocity) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +set_transform(const Transform2D & p_transform) = 0 : void
__
}
abstract "Physics2DDirectSpaceState" as C_0000236996062289735257
abstract C_0000236996062289735257 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145{Physics2DDirectSpaceState}]] {
+Physics2DDirectSpaceState() : void
..
+_get_class_namev() const : const StringName *
{abstract} +cast_motion(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Vector2 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
{abstract} +intersect_point(const Vector2 & p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_point_on_canvas(const Vector2 & p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_ray(const Vector2 & p_from, const Vector2 & p_to, Physics2DDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +intersect_shape(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +rest_info(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
__
}
class "Physics2DDirectSpaceState::RayResult" as C_0001801355352189289676
class C_0001801355352189289676 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162{Physics2DDirectSpaceState##RayResult}]] {
__
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168{collider}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167{collider_id}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170{metadata}]]]
+normal : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165{normal}]]]
+position : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164{position}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166{rid}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169{shape}]]]
}
class "Physics2DDirectSpaceState::ShapeResult" as C_0001771770302499309898
class C_0001771770302499309898 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175{Physics2DDirectSpaceState##ShapeResult}]] {
__
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179{collider}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178{collider_id}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181{metadata}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177{rid}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180{shape}]]]
}
abstract "Physics2DServer" as C_0001561529841391244418
abstract C_0001561529841391244418 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232{Physics2DServer}]] {
+Physics2DServer() : void
+~Physics2DServer() : void
..
+_get_class_namev() const : const StringName *
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_create() = 0 : RID
{abstract} +area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode
{abstract} +area_get_transform(RID p_area) const = 0 : Transform2D
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_pickable(RID p_area, bool p_pickable) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform2D & p_transform) = 0 : void
{abstract} +body_add_central_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +body_add_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector2 & p_impulse) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void
{abstract} +body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +body_create() = 0 : RID
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector2
{abstract} +body_get_applied_torque(RID p_body) const = 0 : float
{abstract} +body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode
{abstract} +body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_set_applied_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_set_applied_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector2 & p_axis_velocity) = 0 : void
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_set_pickable(RID p_body, bool p_pickable) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void
{abstract} +body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void
{abstract} +body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant & p_metadata) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_test_motion(RID p_body, const Transform2D & p_from, const Vector2 & p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform2D & p_transform, bool p_infinite_inertia, Vector2 & r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +capsule_shape_create() = 0 : RID
{abstract} +circle_shape_create() = 0 : RID
{abstract} +concave_polygon_shape_create() = 0 : RID
{abstract} +convex_polygon_shape_create() = 0 : RID
{abstract} +damped_spring_joint_create(const Vector2 & p_anchor_a, const Vector2 & p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t
{abstract} +damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void
{abstract} +end_sync() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +free(RID p_rid) = 0 : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{abstract} +get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int
{static} +get_singleton() : Physics2DServer *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{abstract} +groove_joint_create(const Vector2 & p_a_groove1, const Vector2 & p_a_groove2, const Vector2 & p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID
{static} +inherits_static() : String
{abstract} +init() = 0 : void
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t
{abstract} +joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void
{abstract} +line_shape_create() = 0 : RID
{abstract} +pin_joint_create(const Vector2 & p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t
{abstract} +pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void
{abstract} +ray_shape_create() = 0 : RID
{abstract} +rectangle_shape_create() = 0 : RID
{abstract} +segment_shape_create() = 0 : RID
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +shape_collide(RID p_shape_A, const Transform2D & p_xform_A, const Vector2 & p_motion_A, RID p_shape_B, const Transform2D & p_xform_B, const Vector2 & p_motion_B, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +space_create() = 0 : RID
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector2>
{abstract} +space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *
{abstract} +space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +step(float p_step) = 0 : void
{abstract} +sync() = 0 : void
__
}
class "TranslationServer" as C_0001485048025194488343
class C_0001485048025194488343 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67{TranslationServer}]] {
+TranslationServer() : void
..
+_get_class_namev() const : const StringName *
+add_translation(const Ref<Translation> & p_translation) : void
+clear() : void
{static} +get_all_locale_names() : Vector<String>
{static} +get_all_locales() : Vector<String>
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_language_code(const String & p_locale) : String
+get_loaded_locales() const : Array
+get_locale() const : String
+get_locale_name(const String & p_locale) const : String
{static} +get_parent_class_static() : String
{static} +get_singleton() : TranslationServer *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_enabled() const : bool
{static} +is_locale_valid(const String & p_locale) : bool
+load_translations() : void
+remove_translation(const Ref<Translation> & p_translation) : void
+set_enabled(bool p_enabled) : void
+set_locale(const String & p_locale) : void
+set_tool_translation(const Ref<Translation> & p_translation) : void
+setup() : void
{static} +standardize_locale(const String & p_locale) : String
+tool_translate(const StringName & p_message) const : StringName
+translate(const StringName & p_message) const : StringName
__
}
class "InputMap" as C_0000314051240057057851
class C_0000314051240057057851 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37{InputMap}]] {
+InputMap() : void
..
+_get_class_namev() const : const StringName *
+action_add_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_erase_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_erase_events(const StringName & p_action) : void
+action_get_deadzone(const StringName & p_action) : float
+action_has_event(const StringName & p_action, const Ref<InputEvent> & p_event) : bool
+action_set_deadzone(const StringName & p_action, float p_deadzone) : void
+add_action(const StringName & p_action, float p_deadzone = 0.5) : void
+erase_action(const StringName & p_action) : void
+event_get_action_status(const Ref<InputEvent> & p_event, const StringName & p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool
+event_is_action(const Ref<InputEvent> & p_event, const StringName & p_action) const : bool
+get_action_list(const StringName & p_action) : const List<Ref<InputEvent>> *
+get_action_map() const : const Map<StringName,InputMap::Action> &
+get_actions() const : List<StringName>
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_singleton() : InputMap *
{static} +get_valid_parents_static(List<String> * p_parents) : void
+has_action(const StringName & p_action) const : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+load_default() : void
+load_from_globals() : void
__
{static} +ALL_DEVICES : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45{ALL_DEVICES}]]]
}
class "_ResourceLoader" as C_0001197720528033242618
class C_0001197720528033242618 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45{_ResourceLoader}]] {
+_ResourceLoader() : void
..
+_get_class_namev() const : const StringName *
+exists(const String & p_path, const String & p_type_hint = "") : bool
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_dependencies(const String & p_path) : PoolStringArray
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
+get_recognized_extensions_for_type(const String & p_type) : PoolVector<String>
{static} +get_singleton() : _ResourceLoader *
{static} +get_valid_parents_static(List<String> * p_parents) : void
+has(const String & p_path) : bool
+has_cached(const String & p_path) : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+load(const String & p_path, const String & p_type_hint = "", bool p_no_cache = false) : RES
+load_interactive(const String & p_path, const String & p_type_hint = "") : Ref<ResourceInteractiveLoader>
+set_abort_on_missing_resources(bool p_abort) : void
__
}
class "_ResourceSaver" as C_0001130773750498288283
class C_0001130773750498288283 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68{_ResourceSaver}]] {
+_ResourceSaver() : void
..
+_get_class_namev() const : const StringName *
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
+get_recognized_extensions(const RES & p_resource) : PoolVector<String>
{static} +get_singleton() : _ResourceSaver *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+save(const String & p_path, const RES & p_resource, _ResourceSaver::SaverFlags p_flags) : Error
__
}
class "_OS" as C_0000790752023609648644
class C_0000790752023609648644 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99{_OS}]] {
+_OS() : void
..
+_get_class_namev() const : const StringName *
+alert(const String & p_alert, const String & p_title = "ALERT!") : void
+can_draw() const : bool
+can_use_threads() const : bool
+center_window() : void
+close_midi_inputs() : void
+delay_msec(int p_msec) const : void
+delay_usec(int p_usec) const : void
+dump_memory_to_file(const String & p_file) : void
+dump_resources_to_file(const String & p_file) : void
+execute(const String & p_path, const Vector<String> & p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int
+find_scancode_from_string(const String & p_code) const : int
+get_audio_driver_count() const : int
+get_audio_driver_name(int p_driver) const : String
+get_borderless_window() const : bool
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_clipboard() const : String
+get_cmdline_args() : Vector<String>
+get_connected_midi_inputs() : PoolStringArray
+get_current_screen() const : int
+get_current_tablet_driver() const : String
+get_current_video_driver() const : _OS::VideoDriver
+get_date(bool utc) const : Dictionary
+get_datetime(bool utc) const : Dictionary
+get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary
+get_dynamic_memory_usage() const : uint64_t
+get_environment(const String & p_var) const : String
+get_executable_path() const : String
+get_exit_code() const : int
+get_fullscreen_mode_list(int p_screen = 0) const : Array
+get_granted_permissions() const : Vector<String>
+get_ime_selection() const : Point2
+get_ime_text() const : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_latin_keyboard_variant() const : String
+get_locale() const : String
+get_low_processor_usage_mode_sleep_usec() const : int
+get_max_window_size() const : Size2
+get_min_window_size() const : Size2
+get_model_name() const : String
+get_mouse_button_state() const : int
+get_mouse_position() const : Point2
+get_name() const : String
+get_native_handle(_OS::HandleType p_handle_type) : int64_t
{static} +get_parent_class_static() : String
+get_power_percent_left() : int
+get_power_seconds_left() : int
+get_power_state() : _OS::PowerState
+get_process_id() const : int
+get_processor_count() const : int
+get_real_window_size() const : Size2
+get_scancode_string(uint32_t p_code) const : String
+get_screen_count() const : int
+get_screen_dpi(int p_screen = -1) const : int
+get_screen_max_scale() const : float
+get_screen_orientation() const : _OS::ScreenOrientation
+get_screen_position(int p_screen = -1) const : Point2
+get_screen_scale(int p_screen = -1) const : float
+get_screen_size(int p_screen = -1) const : Size2
{static} +get_singleton() : _OS *
+get_splash_tick_msec() const : uint32_t
+get_static_memory_peak_usage() const : uint64_t
+get_static_memory_usage() const : uint64_t
+get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String
+get_system_time_msecs() const : uint64_t
+get_system_time_secs() const : uint64_t
+get_tablet_driver_count() const : int
+get_tablet_driver_name(int p_driver) const : String
+get_thread_caller_id() const : Thread::ID
+get_ticks_msec() const : uint32_t
+get_ticks_usec() const : uint64_t
+get_time(bool utc) const : Dictionary
+get_time_zone_info() const : Dictionary
+get_unique_id() const : String
+get_unix_time() const : uint64_t
+get_unix_time_from_datetime(Dictionary datetime) const : int64_t
+get_user_data_dir() const : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
+get_video_driver_count() const : int
+get_video_driver_name(_OS::VideoDriver p_driver) const : String
+get_video_mode(int p_screen = 0) const : Size2
+get_virtual_keyboard_height() : int
+get_window_per_pixel_transparency_enabled() const : bool
+get_window_position() const : Point2
+get_window_safe_area() const : Rect2
+get_window_size() const : Size2
+global_menu_add_item(const String & p_menu, const String & p_label, const Variant & p_signal, const Variant & p_meta) : void
+global_menu_add_separator(const String & p_menu) : void
+global_menu_clear(const String & p_menu) : void
+global_menu_remove_item(const String & p_menu, int p_idx) : void
+has_environment(const String & p_var) const : bool
+has_feature(const String & p_feature) const : bool
+has_touchscreen_ui_hint() const : bool
+has_virtual_keyboard() const : bool
+hide_virtual_keyboard() : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_debug_build() const : bool
+is_in_low_processor_usage_mode() const : bool
+is_keep_screen_on() const : bool
+is_ok_left_and_cancel_right() const : bool
+is_scancode_unicode(uint32_t p_unicode) const : bool
+is_stdout_verbose() const : bool
+is_userfs_persistent() const : bool
+is_video_mode_fullscreen(int p_screen = 0) const : bool
+is_video_mode_resizable(int p_screen = 0) const : bool
+is_vsync_enabled() const : bool
+is_vsync_via_compositor_enabled() const : bool
+is_window_always_on_top() const : bool
+is_window_focused() const : bool
+is_window_fullscreen() const : bool
+is_window_maximized() const : bool
+is_window_minimized() const : bool
+is_window_resizable() const : bool
+keyboard_get_current_layout() const : int
+keyboard_get_layout_count() const : int
+keyboard_get_layout_language(int p_index) const : String
+keyboard_get_layout_name(int p_index) const : String
+keyboard_set_current_layout(int p_index) : void
+kill(int p_pid) : Error
+move_window_to_foreground() : void
+native_video_is_playing() : bool
+native_video_pause() : void
+native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error
+native_video_stop() : void
+native_video_unpause() : void
+open_midi_inputs() : void
+print_all_resources(const String & p_to_file) : void
+print_all_textures_by_size() : void
+print_resources_by_type(const Vector<String> & p_types) : void
+print_resources_in_use(bool p_short = false) : void
+request_attention() : void
+request_permission(const String & p_name) : bool
+request_permissions() : bool
+set_borderless_window(bool p_borderless) : void
+set_clipboard(const String & p_text) : void
+set_current_screen(int p_screen) : void
+set_current_tablet_driver(const String & p_driver) : void
+set_environment(const String & p_var, const String & p_value) const : bool
+set_exit_code(int p_code) : void
+set_icon(const Ref<Image> & p_icon) : void
+set_ime_active(const bool p_active) : void
+set_ime_position(const Point2 & p_pos) : void
+set_keep_screen_on(bool p_enabled) : void
+set_low_processor_usage_mode(bool p_enabled) : void
+set_low_processor_usage_mode_sleep_usec(int p_usec) : void
+set_max_window_size(const Size2 & p_size) : void
+set_min_window_size(const Size2 & p_size) : void
+set_native_icon(const String & p_filename) : void
+set_screen_orientation(_OS::ScreenOrientation p_orientation) : void
+set_thread_name(const String & p_name) : Error
+set_use_file_access_save_and_swap(bool p_enable) : void
+set_use_vsync(bool p_enable) : void
+set_video_mode(const Size2 & p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void
+set_vsync_via_compositor(bool p_enable) : void
+set_window_always_on_top(bool p_enabled) : void
+set_window_fullscreen(bool p_enabled) : void
+set_window_maximized(bool p_enabled) : void
+set_window_minimized(bool p_enabled) : void
+set_window_mouse_passthrough(const PoolVector2Array & p_region) : void
+set_window_per_pixel_transparency_enabled(bool p_enabled) : void
+set_window_position(const Point2 & p_position) : void
+set_window_resizable(bool p_enabled) : void
+set_window_size(const Size2 & p_size) : void
+set_window_title(const String & p_title) : void
+shell_open(String p_uri) : Error
+show_virtual_keyboard(const String & p_existing_text = "", bool p_multiline = false) : void
__
}
class "_Geometry" as C_0000897221634691489964
class C_0000897221634691489964 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401{_Geometry}]] {
+_Geometry() : void
..
+_get_class_namev() const : const StringName *
+build_box_planes(const Vector3 & p_extents) : PoolVector<Plane>
+build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+clip_polygon(const Vector<Vector3> & p_points, const Plane & p_plane) : Vector<Vector3>
+clip_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+clip_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+convex_hull_2d(const Vector<Point2> & p_points) : Vector<Point2>
+exclude_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_closest_point_to_segment(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+get_closest_point_to_segment_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_point_to_segment_uncapped(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+get_closest_point_to_segment_uncapped_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_points_between_segments(const Vector3 & p1, const Vector3 & p2, const Vector3 & q1, const Vector3 & q2) : PoolVector<Vector3>
+get_closest_points_between_segments_2d(const Vector2 & p1, const Vector2 & q1, const Vector2 & p2, const Vector2 & q2) : PoolVector<Vector2>
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_singleton() : _Geometry *
+get_uv84_normal_bit(const Vector3 & p_vector) : int
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+intersect_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+intersect_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_point_in_circle(const Vector2 & p_point, const Vector2 & p_circle_pos, real_t p_circle_radius) : bool
+is_point_in_polygon(const Point2 & p_point, const Vector<Vector2> & p_polygon) : bool
+is_polygon_clockwise(const Vector<Vector2> & p_polygon) : bool
+line_intersects_line_2d(const Vector2 & p_from_a, const Vector2 & p_dir_a, const Vector2 & p_from_b, const Vector2 & p_dir_b) : Variant
+make_atlas(const Vector<Size2> & p_rects) : Dictionary
+merge_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+offset_polygon_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array
+offset_polyline_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array
+point_is_inside_triangle(const Vector2 & s, const Vector2 & a, const Vector2 & b, const Vector2 & c) const : bool
+ray_intersects_triangle(const Vector3 & p_from, const Vector3 & p_dir, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+segment_intersects_circle(const Vector2 & p_from, const Vector2 & p_to, const Vector2 & p_circle_pos, real_t p_circle_radius) : real_t
+segment_intersects_convex(const Vector3 & p_from, const Vector3 & p_to, const Vector<Plane> & p_planes) : PoolVector<Vector3>
+segment_intersects_cylinder(const Vector3 & p_from, const Vector3 & p_to, float p_height, float p_radius) : PoolVector<Vector3>
+segment_intersects_segment_2d(const Vector2 & p_from_a, const Vector2 & p_to_a, const Vector2 & p_from_b, const Vector2 & p_to_b) : Variant
+segment_intersects_sphere(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_sphere_pos, real_t p_sphere_radius) : PoolVector<Vector3>
+segment_intersects_triangle(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+triangulate_delaunay_2d(const Vector<Vector2> & p_points) : Vector<int>
+triangulate_polygon(const Vector<Vector2> & p_polygon) : Vector<int>
__
}
class "_Marshalls" as C_0000135188690773659020
class C_0000135188690773659020 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629{_Marshalls}]] {
+_Marshalls() : void
+~_Marshalls() : void
..
+_get_class_namev() const : const StringName *
+base64_to_raw(const String & p_str) : PoolVector<uint8_t>
+base64_to_utf8(const String & p_str) : String
+base64_to_variant(const String & p_str, bool p_allow_objects = false) : Variant
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_singleton() : _Marshalls *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+raw_to_base64(const PoolVector<uint8_t> & p_arr) : String
+utf8_to_base64(const String & p_str) : String
+variant_to_base64(const Variant & p_var, bool p_full_objects = false) : String
__
}
class "_Thread" as C_0001150621116588802549
class C_0001150621116588802549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679{_Thread}]] {
+_Thread() : void
+~_Thread() : void
..
+_get_class_namev() const : const StringName *
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_id() const : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_active() const : bool
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+start(Object * p_instance, const StringName & p_method, const Variant & p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error
+wait_to_finish() : Variant
__
}
class "_ClassDB" as C_0001186331261774827872
class C_0001186331261774827872 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713{_ClassDB}]] {
+_ClassDB() : void
+~_ClassDB() : void
..
+_get_class_namev() const : const StringName *
+can_instance(const StringName & p_class) const : bool
+class_exists(const StringName & p_class) const : bool
+get_category(const StringName & p_node) const : StringName
{static} +get_category_static() : String
+get_class() const : String
+get_class_list() const : PoolStringArray
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_inheriters_from_class(const StringName & p_class) const : PoolStringArray
+get_integer_constant(const StringName & p_class, const StringName & p_name) const : int
+get_integer_constant_list(const StringName & p_class, bool p_no_inheritance = false) const : PoolStringArray
+get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_parent_class(const StringName & p_class) const : StringName
{static} +get_parent_class_static() : String
+get_property(Object * p_object, const StringName & p_property) const : Variant
+get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_signal(StringName p_class, StringName p_signal) const : Dictionary
+get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array
{static} +get_valid_parents_static(List<String> * p_parents) : void
+has_integer_constant(const StringName & p_class, const StringName & p_name) const : bool
+has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool
+has_signal(StringName p_class, StringName p_signal) const : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+instance(const StringName & p_class) const : Variant
+is_class(const String & p_class) const : bool
+is_class_enabled(StringName p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_parent_class(const StringName & p_class, const StringName & p_inherits) const : bool
+set_property(Object * p_object, const StringName & p_property, const Variant & p_value) const : Error
__
}
class "_Engine" as C_0001895218672297528471
class C_0001895218672297528471 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752{_Engine}]] {
+_Engine() : void
..
+_get_class_namev() const : const StringName *
+get_author_info() const : Dictionary
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_copyright_info() const : Array
+get_donor_info() const : Dictionary
+get_frames_drawn() : int
+get_frames_per_second() const : float
+get_idle_frames() const : uint64_t
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
+get_iterations_per_second() const : int
+get_license_info() const : Dictionary
+get_license_text() const : String
+get_main_loop() const : MainLoop *
{static} +get_parent_class_static() : String
+get_physics_frames() const : uint64_t
+get_physics_interpolation_fraction() const : float
+get_physics_jitter_fix() const : float
{static} +get_singleton() : _Engine *
+get_singleton_object(const String & p_name) const : Object *
+get_target_fps() const : int
+get_time_scale() : float
{static} +get_valid_parents_static(List<String> * p_parents) : void
+get_version_info() const : Dictionary
+has_singleton(const String & p_name) const : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_editor_hint() const : bool
+is_in_physics_frame() const : bool
+set_editor_hint(bool p_enabled) : void
+set_iterations_per_second(int p_ips) : void
+set_physics_jitter_fix(float p_threshold) : void
+set_target_fps(int p_fps) : void
+set_time_scale(float p_scale) : void
__
}
class "_JSON" as C_0000979065355535690103
class C_0000979065355535690103 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833{_JSON}]] {
+_JSON() : void
..
+_get_class_namev() const : const StringName *
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
{static} +get_singleton() : _JSON *
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+parse(const String & p_json) : Ref<JSONParseResult>
+print(const Variant & p_value, const String & p_indent = "", bool p_sort_keys = false) : String
__
}
class "_ObjectDebugLock" as C_0000132048052014479231
class C_0000132048052014479231 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45{_ObjectDebugLock}]] {
+_ObjectDebugLock(Object * p_obj) : void
+~_ObjectDebugLock() : void
__
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47{obj}]]]
}
class "_ObjectSignalDisconnectData" as C_0000115801560197752094
class C_0000115801560197752094 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147{_ObjectSignalDisconnectData}]] {
__
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151{method}]]]
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149{signal}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150{target}]]]
}
class "UndoRedo" as C_0000096380574950611570
class C_0000096380574950611570 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37{UndoRedo}]] {
+UndoRedo() : void
+~UndoRedo() : void
..
+_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+_get_class_namev() const : const StringName *
+add_do_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_do_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_do_reference(Object * p_object) : void
+add_undo_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_undo_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_undo_reference(Object * p_object) : void
+clear_history(bool p_increase_version = true) : void
+commit_action() : void
+create_action(const String & p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void
{static} +get_category_static() : String
+get_class() const : String
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
+get_current_action_name() const : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_parent_class_static() : String
+get_save_class() const : String
{static} +get_valid_parents_static(List<String> * p_parents) : void
+get_version() const : uint64_t
+has_redo() : bool
+has_undo() : bool
{static} +inherits_static() : String
{static} +initialize_class() : void
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+is_committing_action() const : bool
+redo() : bool
+set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void
+set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void
+set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void
+undo() : bool
__
}
class "_ArrayVariantSortCustom" as C_0000762417759113755306
class C_0000762417759113755306 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298{_ArrayVariantSortCustom}]] {
+operator()(const Variant & p_l, const Variant & p_r) const : bool
__
+func : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301{func}]]]
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300{obj}]]]
}
C_0000699772808699382057 o- - C_0001357046052919104842 : -count
C_0001531814603945772616 o- - C_0001578539238208480863 : -signal_map
C_0001531814603945772616 o- - C_0000751300156436098886 : -connections
C_0001531814603945772616 o- - C_0000699772808699382057 : -_lock_index
C_0001531814603945772616 o- - C_0000051860595756965531 : -change_receptors
C_0001531814603945772616 - -> C_0000933379568804427881 : -_rc
C_0001531814603945772616 o- - C_0001682405743486361214 : -editor_section_folding
C_0001531814603945772616 - -> C_0001735438654351294549 : -script_instance
C_0001531814603945772616 o- - C_0002025812040042972946 : -script
C_0001531814603945772616 o- - C_0001299121424291583786 : -metadata
C_0001531814603945772616 o- - C_0001858199404643284193 : -_class_name
C_0001531814603945772616 - -> C_0001858199404643284193 : -_class_ptr
C_0001531814603945772616 o- - C_0001357046052919104842 : -instance_binding_count
C_0001531814603945772616 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <.. C_0001778859257025660860 : +<<friend>>
C_0001531814603945772616 <.. C_0000132048052014479231 : +<<friend>>
C_0000219886141561409828 - -+ C_0001531814603945772616
C_0001267214583673362755 - -+ C_0001531814603945772616
C_0001267214583673362755 - -> C_0001531814603945772616 : +source
C_0001267214583673362755 o- - C_0001858199404643284193 : +signal
C_0001267214583673362755 - -> C_0001531814603945772616 : +target
C_0001267214583673362755 o- - C_0001858199404643284193 : +method
C_0000250357724807605097 - -+ C_0001531814603945772616
C_0002064336919270342687 - -> C_0001531814603945772616 : -instances
C_0002064336919270342687 - -> C_0001531814603945772616 : -instance_checks
C_0002064336919270342687 <.. C_0001531814603945772616 : +<<friend>>
C_0000104564426296396960 - -> C_0001858199404643284193 : +classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +resource_base_extensions
C_0000104564426296396960 - -> C_0001858199404643284193 : +compat_classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values_cached
C_0000218299049716973303 o- - C_0001858199404643284193 : -_class_name
C_0000218299049716973303 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000218299049716973303
C_0000933379568804427881 - -> C_0001531814603945772616 : -_ptr
C_0001778859257025660860 o- - C_0001858199404643284193 : -_class_name
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount_init
C_0001778859257025660860 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001778859257025660860
C_0001649884439586022807 - -> C_0001531814603945772616 : -owner
C_0001735438654351294549 <|- - C_0001649884439586022807
C_0000970940027123558604 o- - C_0001858199404643284193 : -_class_name
C_0000970940027123558604 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000970940027123558604
C_0001823345232236209470 o- - C_0001858199404643284193 : +name
C_0001823345232236209470 - -> C_0001531814603945772616 : +ptr
C_0001191393512042218074 o- - C_0001858199404643284193 : -_class_name
C_0001191393512042218074 - -> C_0001191393512042218074 : #singleton
C_0001191393512042218074 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001191393512042218074
C_0000066148521405667716 o- - C_0001858199404643284193 : -_class_name
C_0000066148521405667716 o- - C_0001682405743486361214 : #custom_features
C_0000066148521405667716 - -> C_0000066148521405667716 : #singleton
C_0000066148521405667716 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000066148521405667716
C_0000535376932101028371 o- - C_0001858199404643284193 : -_class_name
C_0000535376932101028371 - -> C_0000535376932101028371 : -singleton
C_0000535376932101028371 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000535376932101028371
C_0001370497546359815893 o- - C_0001858199404643284193 : -_class_name
C_0001370497546359815893 - -> C_0001370497546359815893 : -singleton
C_0001370497546359815893 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001370497546359815893
C_0001701907280759632930 o- - C_0001858199404643284193 : -_class_name
C_0001701907280759632930 - -> C_0001701907280759632930 : #singleton
C_0001701907280759632930 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001701907280759632930
C_0001589464385186808769 o- - C_0001858199404643284193 : -_class_name
C_0001589464385186808769 - -> C_0001589464385186808769 : -singleton
C_0001589464385186808769 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001589464385186808769
C_0001559146041463814963 o- - C_0001858199404643284193 : -_class_name
C_0001559146041463814963 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001559146041463814963
C_0000503002593685351124 o- - C_0001858199404643284193 : -_class_name
C_0000503002593685351124 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000503002593685351124
C_0000493041171271776846 - -+ C_0000503002593685351124
C_0000493041171271776846 - -> C_0001531814603945772616 : +collider
C_0000461609734144368587 - -+ C_0000503002593685351124
C_0000461609734144368587 - -> C_0001531814603945772616 : +collider
C_0001034902024938599899 o- - C_0001858199404643284193 : -_class_name
C_0001034902024938599899 - -> C_0001034902024938599899 : -singleton
C_0001034902024938599899 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001034902024938599899
C_0002302096389852429221 o- - C_0001858199404643284193 : -_class_name
C_0002302096389852429221 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0002302096389852429221
C_0000236996062289735257 o- - C_0001858199404643284193 : -_class_name
C_0000236996062289735257 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000236996062289735257
C_0001801355352189289676 - -+ C_0000236996062289735257
C_0001801355352189289676 - -> C_0001531814603945772616 : +collider
C_0001771770302499309898 - -+ C_0000236996062289735257
C_0001771770302499309898 - -> C_0001531814603945772616 : +collider
C_0001561529841391244418 o- - C_0001858199404643284193 : -_class_name
C_0001561529841391244418 - -> C_0001561529841391244418 : -singleton
C_0001561529841391244418 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001561529841391244418
C_0001485048025194488343 o- - C_0001858199404643284193 : -_class_name
C_0001485048025194488343 - -> C_0001485048025194488343 : -singleton
C_0001485048025194488343 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001485048025194488343
C_0000314051240057057851 o- - C_0001858199404643284193 : -_class_name
C_0000314051240057057851 - -> C_0000314051240057057851 : -singleton
C_0000314051240057057851 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000314051240057057851
C_0001197720528033242618 o- - C_0001858199404643284193 : -_class_name
C_0001197720528033242618 - -> C_0001197720528033242618 : #singleton
C_0001197720528033242618 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001197720528033242618
C_0001130773750498288283 o- - C_0001858199404643284193 : -_class_name
C_0001130773750498288283 - -> C_0001130773750498288283 : #singleton
C_0001130773750498288283 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001130773750498288283
C_0000790752023609648644 o- - C_0001858199404643284193 : -_class_name
C_0000790752023609648644 - -> C_0000790752023609648644 : #singleton
C_0000790752023609648644 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000790752023609648644
C_0000897221634691489964 o- - C_0001858199404643284193 : -_class_name
C_0000897221634691489964 - -> C_0000897221634691489964 : -singleton
C_0000897221634691489964 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000897221634691489964
C_0000135188690773659020 o- - C_0001858199404643284193 : -_class_name
C_0000135188690773659020 - -> C_0000135188690773659020 : -singleton
C_0000135188690773659020 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000135188690773659020
C_0001150621116588802549 o- - C_0001858199404643284193 : -_class_name
C_0001150621116588802549 - -> C_0001531814603945772616 : #target_instance
C_0001150621116588802549 o- - C_0001858199404643284193 : #target_method
C_0001150621116588802549 <.. C_0000104564426296396960 : +<<friend>>
C_0001778859257025660860 <|- - C_0001150621116588802549
C_0001186331261774827872 o- - C_0001858199404643284193 : -_class_name
C_0001186331261774827872 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001186331261774827872
C_0001895218672297528471 o- - C_0001858199404643284193 : -_class_name
C_0001895218672297528471 - -> C_0001895218672297528471 : #singleton
C_0001895218672297528471 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001895218672297528471
C_0000979065355535690103 o- - C_0001858199404643284193 : -_class_name
C_0000979065355535690103 - -> C_0000979065355535690103 : #singleton
C_0000979065355535690103 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000979065355535690103
C_0000132048052014479231 - -> C_0001531814603945772616 : +obj
C_0000115801560197752094 o- - C_0001858199404643284193 : +signal
C_0000115801560197752094 - -> C_0001531814603945772616 : +target
C_0000115801560197752094 o- - C_0001858199404643284193 : +method
C_0000096380574950611570 o- - C_0001858199404643284193 : -_class_name
C_0000096380574950611570 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000096380574950611570
C_0000762417759113755306 - -> C_0001531814603945772616 : +obj
C_0000762417759113755306 o- - C_0001858199404643284193 : +func

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.19+7-post-Ubuntu-0ubuntu122.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>