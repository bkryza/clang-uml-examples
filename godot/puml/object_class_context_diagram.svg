<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="9177px" preserveAspectRatio="none" style="width:25796px;height:9177px;" version="1.1" viewBox="0 0 25796 9177" width="25796px" zoomAndPan="magnify"><defs><filter height="300%" id="f1w51hee8s8zvp" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacingAndGlyphs" textLength="253" x="12775.5" y="16.708">Godot Object class hierarchy</text><!--MD5=[9ddbd22804041489fb45650d196dcfe6]
class C_0001357046052919104842--><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="48" id="C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.5;" width="166" x="25050.5" y="8250.4531"/><ellipse cx="25065.5" cy="8266.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25068.4688,8272.0938 Q25067.8906,8272.3906 25067.25,8272.5313 Q25066.6094,8272.6875 25065.9063,8272.6875 Q25063.4063,8272.6875 25062.0781,8271.0469 Q25060.7656,8269.3906 25060.7656,8266.2656 Q25060.7656,8263.1406 25062.0781,8261.4844 Q25063.4063,8259.8281 25065.9063,8259.8281 Q25066.6094,8259.8281 25067.25,8259.9844 Q25067.9063,8260.1406 25068.4688,8260.4375 L25068.4688,8263.1563 Q25067.8438,8262.5781 25067.25,8262.3125 Q25066.6563,8262.0313 25066.0313,8262.0313 Q25064.6875,8262.0313 25064,8263.1094 Q25063.3125,8264.1719 25063.3125,8266.2656 Q25063.3125,8268.3594 25064,8269.4375 Q25064.6875,8270.5 25066.0313,8270.5 Q25066.6563,8270.5 25067.25,8270.2344 Q25067.8438,8269.9531 25068.4688,8269.375 L25068.4688,8272.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="25079.5" y="8270.6074">SafeNumeric</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="53" x="25166.5" y="8247.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="51" x="25167.5" y="8259.5918">uint32_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25051.5" x2="25215.5" y1="8282.4531" y2="8282.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="25051.5" x2="25215.5" y1="8290.4531" y2="8290.4531"/><!--MD5=[0248b83d95ca29d05ff879ba22e97aa0]
class C_0000699772808699382057--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" target="_top" title="SafeRefCount" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" xlink:show="new" xlink:title="SafeRefCount" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="124.8281" id="C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="24968.5" y="4879.4531"/><ellipse cx="25022.75" cy="4895.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25025.7188,4901.0938 Q25025.1406,4901.3906 25024.5,4901.5313 Q25023.8594,4901.6875 25023.1563,4901.6875 Q25020.6563,4901.6875 25019.3281,4900.0469 Q25018.0156,4898.3906 25018.0156,4895.2656 Q25018.0156,4892.1406 25019.3281,4890.4844 Q25020.6563,4888.8281 25023.1563,4888.8281 Q25023.8594,4888.8281 25024.5,4888.9844 Q25025.1563,4889.1406 25025.7188,4889.4375 L25025.7188,4892.1563 Q25025.0938,4891.5781 25024.5,4891.3125 Q25023.9063,4891.0313 25023.2813,4891.0313 Q25021.9375,4891.0313 25021.25,4892.1094 Q25020.5625,4893.1719 25020.5625,4895.2656 Q25020.5625,4897.3594 25021.25,4898.4375 Q25021.9375,4899.5 25023.2813,4899.5 Q25023.9063,4899.5 25024.5,4899.2344 Q25025.0938,4898.9531 25025.7188,4898.375 L25025.7188,4901.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="25043.25" y="4899.6074">SafeRefCount</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24969.5" x2="25169.5" y1="4911.4531" y2="4911.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="24969.5" x2="25169.5" y1="4919.4531" y2="4919.4531"/><ellipse cx="24979.5" cy="4930.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="24988.5" y="4933.6636">ref() : bool</text><ellipse cx="24979.5" cy="4943.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="24988.5" y="4946.4683">refval() : uint32_t</text><ellipse cx="24979.5" cy="4956.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="24988.5" y="4959.2729">unref() : bool</text><ellipse cx="24979.5" cy="4968.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24988.5" y="4972.0776">unrefval() : uint32_t</text><ellipse cx="24979.5" cy="4981.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="24988.5" y="4984.8823">get() const : uint32_t</text><ellipse cx="24979.5" cy="4994.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="24988.5" y="4997.687">init(uint32_t p_value = 1) : void</text></a><!--MD5=[bdf481e0258441d9ea4c4f618bd16c94]
class C_0001858199404643284193--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" target="_top" title="StringName" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" xlink:show="new" xlink:title="StringName" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="304.0938" id="C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.5;" width="346" x="13115.5" y="8861.9531"/><ellipse cx="13247.75" cy="8877.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13250.7188,8883.5938 Q13250.1406,8883.8906 13249.5,8884.0313 Q13248.8594,8884.1875 13248.1563,8884.1875 Q13245.6563,8884.1875 13244.3281,8882.5469 Q13243.0156,8880.8906 13243.0156,8877.7656 Q13243.0156,8874.6406 13244.3281,8872.9844 Q13245.6563,8871.3281 13248.1563,8871.3281 Q13248.8594,8871.3281 13249.5,8871.4844 Q13250.1563,8871.6406 13250.7188,8871.9375 L13250.7188,8874.6563 Q13250.0938,8874.0781 13249.5,8873.8125 Q13248.9063,8873.5313 13248.2813,8873.5313 Q13246.9375,8873.5313 13246.25,8874.6094 Q13245.5625,8875.6719 13245.5625,8877.7656 Q13245.5625,8879.8594 13246.25,8880.9375 Q13246.9375,8882 13248.2813,8882 Q13248.9063,8882 13249.5,8881.7344 Q13250.0938,8881.4531 13250.7188,8880.875 L13250.7188,8883.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="13268.25" y="8882.1074">StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13116.5" x2="13460.5" y1="8893.9531" y2="8893.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13116.5" x2="13460.5" y1="8901.9531" y2="8901.9531"/><ellipse cx="13126.5" cy="8912.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="13135.5" y="8916.1636">operator const void *() const : const void *</text><ellipse cx="13126.5" cy="8925.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="13135.5" y="8928.9683">operator==(const String &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="8938.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="13135.5" y="8941.7729">operator==(const char * p_name) const : bool</text><ellipse cx="13126.5" cy="8951.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="13135.5" y="8954.5776">operator!=(const String &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="8964.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="13135.5" y="8967.3823">operator&lt;(const StringName &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="8976.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="13135.5" y="8980.187">operator==(const StringName &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="8989.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="13135.5" y="8992.9917">hash() const : uint32_t</text><ellipse cx="13126.5" cy="9002.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="13135.5" y="9005.7964">data_unique_pointer() const : const void *</text><ellipse cx="13126.5" cy="9015.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="13135.5" y="9018.6011">operator!=(const StringName &amp; p_name) const : bool</text><ellipse cx="13126.5" cy="9028.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="13135.5" y="9031.4058">operator String() const : String</text><ellipse cx="13126.5" cy="9041" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="245" x="13135.5" y="9044.2104">search(const char * p_name) : StringName</text><ellipse cx="13126.5" cy="9053.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="13135.5" y="9057.0151">search(const CharType * p_name) : StringName</text><ellipse cx="13126.5" cy="9066.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="13135.5" y="9069.8198">search(const String &amp; p_name) : StringName</text><ellipse cx="13126.5" cy="9079.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="13135.5" y="9082.6245">operator=(const StringName &amp; p_name) : void</text><ellipse cx="13126.5" cy="9092.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="13135.5" y="9095.4292">StringName(const char * p_name) : void</text><ellipse cx="13126.5" cy="9105.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="13135.5" y="9108.2339">StringName(const StringName &amp; p_name) : void</text><ellipse cx="13126.5" cy="9117.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="13135.5" y="9121.0386">StringName(const String &amp; p_name) : void</text><ellipse cx="13126.5" cy="9130.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="13135.5" y="9133.8433">StringName(const StaticCString &amp; p_static_string) : void</text><ellipse cx="13126.5" cy="9143.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="13135.5" y="9146.6479">StringName() : void</text><ellipse cx="13126.5" cy="9156.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="13135.5" y="9159.4526">~StringName() : void</text></a><!--MD5=[c9ab0454be9bc9dd8cd0824f6bdde71d]
class C_0001299121424291583786--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" target="_top" title="Dictionary" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" xlink:show="new" xlink:title="Dictionary" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="393.7266" id="C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="14580" y="1623.4531"/><ellipse cx="14753.25" cy="1639.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14756.2188,1645.0938 Q14755.6406,1645.3906 14755,1645.5313 Q14754.3594,1645.6875 14753.6563,1645.6875 Q14751.1563,1645.6875 14749.8281,1644.0469 Q14748.5156,1642.3906 14748.5156,1639.2656 Q14748.5156,1636.1406 14749.8281,1634.4844 Q14751.1563,1632.8281 14753.6563,1632.8281 Q14754.3594,1632.8281 14755,1632.9844 Q14755.6563,1633.1406 14756.2188,1633.4375 L14756.2188,1636.1563 Q14755.5938,1635.5781 14755,1635.3125 Q14754.4063,1635.0313 14753.7813,1635.0313 Q14752.4375,1635.0313 14751.75,1636.1094 Q14751.0625,1637.1719 14751.0625,1639.2656 Q14751.0625,1641.3594 14751.75,1642.4375 Q14752.4375,1643.5 14753.7813,1643.5 Q14754.4063,1643.5 14755,1643.2344 Q14755.5938,1642.9531 14756.2188,1642.375 L14756.2188,1645.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="14773.75" y="1643.6074">Dictionary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14581" x2="14996" y1="1655.4531" y2="1655.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="14581" x2="14996" y1="1663.4531" y2="1663.4531"/><ellipse cx="14591" cy="1674.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="14600" y="1677.6636">get_key_list(List&lt;Variant&gt; * p_keys) const : void</text><ellipse cx="14591" cy="1687.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="14600" y="1690.4683">get_key_at_index(int p_index) const : Variant</text><ellipse cx="14591" cy="1700.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="14600" y="1703.2729">get_value_at_index(int p_index) const : Variant</text><ellipse cx="14591" cy="1712.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="14600" y="1716.0776">operator[](const Variant &amp; p_key) : Variant &amp;</text><ellipse cx="14591" cy="1725.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="14600" y="1728.8823">operator[](const Variant &amp; p_key) const : const Variant &amp;</text><ellipse cx="14591" cy="1738.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="14600" y="1741.687">getptr(const Variant &amp; p_key) const : const Variant *</text><ellipse cx="14591" cy="1751.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="14600" y="1754.4917">getptr(const Variant &amp; p_key) : Variant *</text><ellipse cx="14591" cy="1764.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="14600" y="1767.2964">get_valid(const Variant &amp; p_key) const : Variant</text><ellipse cx="14591" cy="1776.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="14600" y="1780.1011">get(const Variant &amp; p_key, const Variant &amp; p_default) const : Variant</text><ellipse cx="14591" cy="1789.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="14600" y="1792.9058">size() const : int</text><ellipse cx="14591" cy="1802.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="14600" y="1805.7104">empty() const : bool</text><ellipse cx="14591" cy="1815.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="14600" y="1818.5151">clear() : void</text><ellipse cx="14591" cy="1828.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="14600" y="1831.3198">has(const Variant &amp; p_key) const : bool</text><ellipse cx="14591" cy="1840.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="14600" y="1844.1245">has_all(const Array &amp; p_keys) const : bool</text><ellipse cx="14591" cy="1853.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="14600" y="1856.9292">erase(const Variant &amp; p_key) : bool</text><ellipse cx="14591" cy="1866.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="14600" y="1869.7339">operator==(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="14591" cy="1879.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="14600" y="1882.5386">operator!=(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="14591" cy="1892.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="14600" y="1895.3433">hash() const : uint32_t</text><ellipse cx="14591" cy="1904.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="14600" y="1908.1479">operator=(const Dictionary &amp; p_dictionary) : void</text><ellipse cx="14591" cy="1917.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="14600" y="1920.9526">next(const Variant * p_key = __null) const : const Variant *</text><ellipse cx="14591" cy="1930.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="14600" y="1933.7573">keys() const : Array</text><ellipse cx="14591" cy="1943.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="14600" y="1946.562">values() const : Array</text><ellipse cx="14591" cy="1956.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="14600" y="1959.3667">duplicate(bool p_deep = false) const : Dictionary</text><ellipse cx="14591" cy="1968.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="14600" y="1972.1714">id() const : const void *</text><ellipse cx="14591" cy="1981.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="14600" y="1984.9761">Dictionary(const Dictionary &amp; p_from) : void</text><ellipse cx="14591" cy="1994.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="14600" y="1997.7808">Dictionary() : void</text><ellipse cx="14591" cy="2007.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="14600" y="2010.5854">~Dictionary() : void</text></a><!--MD5=[5ff974ea4457aef713dc6a6e7de5ffac]
class C_0002025812040042972946--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" target="_top" title="RefPtr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" xlink:show="new" xlink:title="RefPtr" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="176.0469" id="C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.5;" width="302" x="15032.5" y="1732.4531"/><ellipse cx="15160.25" cy="1748.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15163.2188,1754.0938 Q15162.6406,1754.3906 15162,1754.5313 Q15161.3594,1754.6875 15160.6563,1754.6875 Q15158.1563,1754.6875 15156.8281,1753.0469 Q15155.5156,1751.3906 15155.5156,1748.2656 Q15155.5156,1745.1406 15156.8281,1743.4844 Q15158.1563,1741.8281 15160.6563,1741.8281 Q15161.3594,1741.8281 15162,1741.9844 Q15162.6563,1742.1406 15163.2188,1742.4375 L15163.2188,1745.1563 Q15162.5938,1744.5781 15162,1744.3125 Q15161.4063,1744.0313 15160.7813,1744.0313 Q15159.4375,1744.0313 15158.75,1745.1094 Q15158.0625,1746.1719 15158.0625,1748.2656 Q15158.0625,1750.3594 15158.75,1751.4375 Q15159.4375,1752.5 15160.7813,1752.5 Q15161.4063,1752.5 15162,1752.2344 Q15162.5938,1751.9531 15163.2188,1751.375 L15163.2188,1754.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="15180.75" y="1752.6074">RefPtr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15033.5" x2="15333.5" y1="1764.4531" y2="1764.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15033.5" x2="15333.5" y1="1772.4531" y2="1772.4531"/><ellipse cx="15043.5" cy="1783.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="15052.5" y="1786.6636">is_null() const : bool</text><ellipse cx="15043.5" cy="1796.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="15052.5" y="1799.4683">operator=(const RefPtr &amp; p_other) : void</text><ellipse cx="15043.5" cy="1809.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="15052.5" y="1812.2729">operator==(const RefPtr &amp; p_other) const : bool</text><ellipse cx="15043.5" cy="1821.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="15052.5" y="1825.0776">operator!=(const RefPtr &amp; p_other) const : bool</text><ellipse cx="15043.5" cy="1834.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="15052.5" y="1837.8823">get_rid() const : RID</text><ellipse cx="15043.5" cy="1847.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="15052.5" y="1850.687">unref() : void</text><ellipse cx="15043.5" cy="1860.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="15052.5" y="1863.4917">get_data() const : void *</text><ellipse cx="15043.5" cy="1873.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="15052.5" y="1876.2964">RefPtr(const RefPtr &amp; p_other) : void</text><ellipse cx="15043.5" cy="1885.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="15052.5" y="1889.1011">RefPtr() : void</text><ellipse cx="15043.5" cy="1898.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="15052.5" y="1901.9058">~RefPtr() : void</text></a><!--MD5=[fcb6dc9edc5e54eb9e8bfa0c33478799]
class C_0000751300156436098886--><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="48" id="C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.5;" width="175" x="15370" y="1796.4531"/><ellipse cx="15385" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15387.9688,1818.0938 Q15387.3906,1818.3906 15386.75,1818.5313 Q15386.1094,1818.6875 15385.4063,1818.6875 Q15382.9063,1818.6875 15381.5781,1817.0469 Q15380.2656,1815.3906 15380.2656,1812.2656 Q15380.2656,1809.1406 15381.5781,1807.4844 Q15382.9063,1805.8281 15385.4063,1805.8281 Q15386.1094,1805.8281 15386.75,1805.9844 Q15387.4063,1806.1406 15387.9688,1806.4375 L15387.9688,1809.1563 Q15387.3438,1808.5781 15386.75,1808.3125 Q15386.1563,1808.0313 15385.5313,1808.0313 Q15384.1875,1808.0313 15383.5,1809.1094 Q15382.8125,1810.1719 15382.8125,1812.2656 Q15382.8125,1814.3594 15383.5,1815.4375 Q15384.1875,1816.5 15385.5313,1816.5 Q15386.1563,1816.5 15386.75,1816.2344 Q15387.3438,1815.9531 15387.9688,1815.375 L15387.9688,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="15399" y="1816.6074">List</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="120" x="15428" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="118" x="15429" y="1805.5918">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15371" x2="15544" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15371" x2="15544" y1="1836.4531" y2="1836.4531"/><!--MD5=[6bf78f0ec114838316d8adbe773b0c0e]
class C_0001682405743486361214--><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="48" id="C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.5;" width="94" x="8401.5" y="4917.9531"/><ellipse cx="8416.5" cy="4933.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8419.4688,4939.5938 Q8418.8906,4939.8906 8418.25,4940.0313 Q8417.6094,4940.1875 8416.9063,4940.1875 Q8414.4063,4940.1875 8413.0781,4938.5469 Q8411.7656,4936.8906 8411.7656,4933.7656 Q8411.7656,4930.6406 8413.0781,4928.9844 Q8414.4063,4927.3281 8416.9063,4927.3281 Q8417.6094,4927.3281 8418.25,4927.4844 Q8418.9063,4927.6406 8419.4688,4927.9375 L8419.4688,4930.6563 Q8418.8438,4930.0781 8418.25,4929.8125 Q8417.6563,4929.5313 8417.0313,4929.5313 Q8415.6875,4929.5313 8415,4930.6094 Q8414.3125,4931.6719 8414.3125,4933.7656 Q8414.3125,4935.8594 8415,4936.9375 Q8415.6875,4938 8417.0313,4938 Q8417.6563,4938 8418.25,4937.7344 Q8418.8438,4937.4531 8419.4688,4936.875 L8419.4688,4939.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="8430.5" y="4938.1074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="39" x="8459.5" y="4914.9531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="37" x="8460.5" y="4927.0918">String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8402.5" x2="8494.5" y1="4949.9531" y2="4949.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8402.5" x2="8494.5" y1="4957.9531" y2="4957.9531"/><!--MD5=[7554e1c91c178cfd46cd5992944992da]
class C_0001578539238208480863--><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="48" id="C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.5;" width="256" x="15580.5" y="1796.4531"/><ellipse cx="15595.5" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15598.4688,1818.0938 Q15597.8906,1818.3906 15597.25,1818.5313 Q15596.6094,1818.6875 15595.9063,1818.6875 Q15593.4063,1818.6875 15592.0781,1817.0469 Q15590.7656,1815.3906 15590.7656,1812.2656 Q15590.7656,1809.1406 15592.0781,1807.4844 Q15593.4063,1805.8281 15595.9063,1805.8281 Q15596.6094,1805.8281 15597.25,1805.9844 Q15597.9063,1806.1406 15598.4688,1806.4375 L15598.4688,1809.1563 Q15597.8438,1808.5781 15597.25,1808.3125 Q15596.6563,1808.0313 15596.0313,1808.0313 Q15594.6875,1808.0313 15594,1809.1094 Q15593.3125,1810.1719 15593.3125,1812.2656 Q15593.3125,1814.3594 15594,1815.4375 Q15594.6875,1816.5 15596.0313,1816.5 Q15596.6563,1816.5 15597.25,1816.2344 Q15597.8438,1815.9531 15598.4688,1815.375 L15598.4688,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="15609.5" y="1816.6074">HashMap</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="164" x="15675.5" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="162" x="15676.5" y="1805.5918">StringName,Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15581.5" x2="15835.5" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15581.5" x2="15835.5" y1="1836.4531" y2="1836.4531"/><!--MD5=[75bc4a0739afdfacd2c3e3c13cd7e181]
class C_0000051860595756965531--><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="48" id="C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.5;" width="106" x="15871.5" y="1796.4531"/><ellipse cx="15886.5" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15889.4688,1818.0938 Q15888.8906,1818.3906 15888.25,1818.5313 Q15887.6094,1818.6875 15886.9063,1818.6875 Q15884.4063,1818.6875 15883.0781,1817.0469 Q15881.7656,1815.3906 15881.7656,1812.2656 Q15881.7656,1809.1406 15883.0781,1807.4844 Q15884.4063,1805.8281 15886.9063,1805.8281 Q15887.6094,1805.8281 15888.25,1805.9844 Q15888.9063,1806.1406 15889.4688,1806.4375 L15889.4688,1809.1563 Q15888.8438,1808.5781 15888.25,1808.3125 Q15887.6563,1808.0313 15887.0313,1808.0313 Q15885.6875,1808.0313 15885,1809.1094 Q15884.3125,1810.1719 15884.3125,1812.2656 Q15884.3125,1814.3594 15885,1815.4375 Q15885.6875,1816.5 15887.0313,1816.5 Q15887.6563,1816.5 15888.25,1816.2344 Q15888.8438,1815.9531 15889.4688,1815.375 L15889.4688,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="15900.5" y="1816.6074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="51" x="15929.5" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="49" x="15930.5" y="1805.5918">Object *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15872.5" x2="15976.5" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15872.5" x2="15976.5" y1="1836.4531" y2="1836.4531"/><!--MD5=[f0802071db4c55ed48c8eca4075aaca6]
class C_0001531814603945772616--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" target="_top" title="Object" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" xlink:show="new" xlink:title="Object" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="1162.0078" id="C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.5;" width="1344" x="13198.5" y="281.9531"/><ellipse cx="13846.25" cy="297.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13849.2188,303.5938 Q13848.6406,303.8906 13848,304.0313 Q13847.3594,304.1875 13846.6563,304.1875 Q13844.1563,304.1875 13842.8281,302.5469 Q13841.5156,300.8906 13841.5156,297.7656 Q13841.5156,294.6406 13842.8281,292.9844 Q13844.1563,291.3281 13846.6563,291.3281 Q13847.3594,291.3281 13848,291.4844 Q13848.6563,291.6406 13849.2188,291.9375 L13849.2188,294.6563 Q13848.5938,294.0781 13848,293.8125 Q13847.4063,293.5313 13846.7813,293.5313 Q13845.4375,293.5313 13844.75,294.6094 Q13844.0625,295.6719 13844.0625,297.7656 Q13844.0625,299.8594 13844.75,300.9375 Q13845.4375,302 13846.7813,302 Q13847.4063,302 13848,301.7344 Q13848.5938,301.4531 13849.2188,300.875 L13849.2188,303.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="13866.75" y="302.1074">Object</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13199.5" x2="14541.5" y1="313.9531" y2="313.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13204.5" y="319.9531"/><ellipse cx="13209.5" cy="324.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="13218.5" y="328.1636">_is_queued_for_deletion : bool</text></a><ellipse cx="13209.5" cy="337.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="13218.5" y="340.9683">NOTIFICATION_POSTINITIALIZE : enum</text><ellipse cx="13209.5" cy="350.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="13218.5" y="353.7729">NOTIFICATION_PREDELETE : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13199.5" x2="14541.5" y1="360.3672" y2="360.3672"/><ellipse cx="13209.5" cy="371.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13218.5" y="374.5776">initialize_class() : void</text><ellipse cx="13209.5" cy="384.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="13218.5" y="387.3823">register_custom_data_to_otdb() : void</text><ellipse cx="13209.5" cy="396.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="13218.5" y="400.187">_change_notify(const char * p_property = "") : void</text><ellipse cx="13209.5" cy="409.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13218.5" y="412.9917">get_class_ptr_static() : void *</text><ellipse cx="13209.5" cy="422.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="13218.5" y="425.7964">_use_rc() : ObjectRC *</text><ellipse cx="13209.5" cy="435.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="13218.5" y="438.6011">_is_gpl_reversed() const : bool</text><ellipse cx="13209.5" cy="448.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="13218.5" y="451.4058">get_instance_id() const : ObjectID</text><ellipse cx="13209.5" cy="461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="13218.5" y="464.2104">add_change_receptor(Object * p_receptor) : void</text><ellipse cx="13209.5" cy="473.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="13218.5" y="477.0151">remove_change_receptor(Object * p_receptor) : void</text><ellipse cx="13209.5" cy="486.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13218.5" y="489.8198">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13209.5" cy="499.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13218.5" y="502.6245">get_class_static() : String</text><ellipse cx="13209.5" cy="512.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13218.5" y="515.4292">get_parent_class_static() : String</text><ellipse cx="13209.5" cy="525.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13218.5" y="528.2339">get_category_static() : String</text><ellipse cx="13209.5" cy="537.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13218.5" y="541.0386">get_class() const : String</text><ellipse cx="13209.5" cy="550.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="13218.5" y="553.8433">get_save_class() const : String</text><ellipse cx="13209.5" cy="563.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13218.5" y="566.6479">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13209.5" cy="576.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13218.5" y="579.4526">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13209.5" cy="589.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="13218.5" y="592.2573">get_class_name() const : const StringName &amp;</text><ellipse cx="13209.5" cy="601.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="502" x="13218.5" y="605.062">set(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="614.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="13218.5" y="617.8667">get(const StringName &amp; p_name, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="627.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="613" x="13218.5" y="630.6714">set_indexed(const Vector&lt;StringName&gt; &amp; p_names, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="640.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="521" x="13218.5" y="643.4761">get_indexed(const Vector&lt;StringName&gt; &amp; p_names, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="653.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="13218.5" y="656.2808">get_property_list(List&lt;PropertyInfo&gt; * p_list, bool p_reversed = false) const : void</text><ellipse cx="13209.5" cy="665.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="13218.5" y="669.0854">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="13209.5" cy="678.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="13218.5" y="681.8901">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="13209.5" cy="691.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="13218.5" y="694.6948">callv(const StringName &amp; p_method, const Array &amp; p_args) : Variant</text><ellipse cx="13209.5" cy="704.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="13218.5" y="707.4995">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="13209.5" cy="717.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="13218.5" y="720.3042">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13209.5" cy="729.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="13218.5" y="733.1089">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13209.5" cy="742.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1269" x="13218.5" y="745.9136">call(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="13209.5" cy="755.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1312" x="13218.5" y="758.7183">call_multilevel(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13209.5" cy="768.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="13218.5" y="771.5229">notification(int p_notification, bool p_reversed = false) : void</text><ellipse cx="13209.5" cy="781.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="13218.5" y="784.3276">to_string() : String</text><ellipse cx="13209.5" cy="793.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="13218.5" y="797.1323">getvar(const Variant &amp; p_key, bool * r_valid = __null) const : Variant</text><ellipse cx="13209.5" cy="806.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="13218.5" y="809.937">setvar(const Variant &amp; p_key, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="13209.5" cy="819.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="13218.5" y="822.7417">set_script(const RefPtr &amp; p_script) : void</text><ellipse cx="13209.5" cy="832.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="13218.5" y="835.5464">get_script() const : RefPtr</text><ellipse cx="13209.5" cy="845.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="13218.5" y="848.3511">has_meta(const String &amp; p_name) const : bool</text><ellipse cx="13209.5" cy="857.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="13218.5" y="861.1558">set_meta(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="13209.5" cy="870.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="13218.5" y="873.9604">remove_meta(const String &amp; p_name) : void</text><ellipse cx="13209.5" cy="883.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="13218.5" y="886.7651">get_meta(const String &amp; p_name) const : Variant</text><ellipse cx="13209.5" cy="896.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="13218.5" y="899.5698">get_meta_list(List&lt;String&gt; * p_list) const : void</text><ellipse cx="13209.5" cy="909.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="13218.5" y="912.3745">set_edited(bool p_edited) : void</text><ellipse cx="13209.5" cy="921.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="13218.5" y="925.1792">is_edited() const : bool</text><ellipse cx="13209.5" cy="934.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="13218.5" y="937.9839">get_edited_version() const : uint32_t</text><ellipse cx="13209.5" cy="947.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="13218.5" y="950.7886">set_script_instance(ScriptInstance * p_instance) : void</text><ellipse cx="13209.5" cy="960.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="13218.5" y="963.5933">get_script_instance() const : ScriptInstance *</text><ellipse cx="13209.5" cy="973.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="476" x="13218.5" y="976.3979">set_script_and_instance(const RefPtr &amp; p_script, ScriptInstance * p_instance) : void</text><ellipse cx="13209.5" cy="985.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="13218.5" y="989.2026">add_user_signal(const MethodInfo &amp; p_signal) : void</text><ellipse cx="13209.5" cy="998.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1304" x="13218.5" y="1002.0073">emit_signal(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Error</text><ellipse cx="13209.5" cy="1011.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="13218.5" y="1014.812">emit_signal(const StringName &amp; p_name, const Variant ** p_args, int p_argcount) : Error</text><ellipse cx="13209.5" cy="1024.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="13218.5" y="1027.6167">has_signal(const StringName &amp; p_name) const : bool</text><ellipse cx="13209.5" cy="1037.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="13218.5" y="1040.4214">get_signal_list(List&lt;MethodInfo&gt; * p_signals) const : void</text><ellipse cx="13209.5" cy="1050.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="13218.5" y="1053.2261">get_signal_connection_list(const StringName &amp; p_signal, List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="1062.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="13218.5" y="1066.0308">get_all_signal_connections(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="1075.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="13218.5" y="1078.8354">get_persistent_signal_connection_count() const : int</text><ellipse cx="13209.5" cy="1088.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="13218.5" y="1091.6401">get_signals_connected_to_this(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="13209.5" cy="1101.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1023" x="13218.5" y="1104.4448">connect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method, const Vector&lt;Variant&gt; &amp; p_binds = Vector&lt;Variant&gt;(), uint32_t p_flags = 0) : Error</text><ellipse cx="13209.5" cy="1114.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="13218.5" y="1117.2495">disconnect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) : void</text><ellipse cx="13209.5" cy="1126.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="13218.5" y="1130.0542">is_connected(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) const : bool</text><ellipse cx="13209.5" cy="1139.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1318" x="13218.5" y="1142.8589">call_deferred(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13209.5" cy="1152.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="13218.5" y="1155.6636">set_deferred(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="13209.5" cy="1165.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13218.5" y="1168.4683">set_block_signals(bool p_block) : void</text><ellipse cx="13209.5" cy="1178.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="13218.5" y="1181.2729">is_blocking_signals() const : bool</text><ellipse cx="13209.5" cy="1190.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="582" x="13218.5" y="1194.0776">get_static_property_type(const StringName &amp; p_property, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="13209.5" cy="1203.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="663" x="13218.5" y="1206.8823">get_static_property_type_indexed(const Vector&lt;StringName&gt; &amp; p_path, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="13209.5" cy="1216.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="13218.5" y="1219.687">get_translatable_strings(List&lt;String&gt; * p_strings) const : void</text><ellipse cx="13209.5" cy="1229.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="13218.5" y="1232.4917">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="13209.5" cy="1242.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="13218.5" y="1245.2964">tr(const StringName &amp; p_message) const : StringName</text><ellipse cx="13209.5" cy="1254.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="13218.5" y="1258.1011">is_queued_for_deletion() const : bool</text><ellipse cx="13209.5" cy="1267.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="13218.5" y="1270.9058">set_message_translation(bool p_enable) : void</text><ellipse cx="13209.5" cy="1280.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="13218.5" y="1283.7104">can_translate_messages() const : bool</text><ellipse cx="13209.5" cy="1293.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="13218.5" y="1296.5151">editor_set_section_unfold(const String &amp; p_section, bool p_unfolded) : void</text><ellipse cx="13209.5" cy="1306.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="13218.5" y="1309.3198">editor_is_section_unfolded(const String &amp; p_section) : bool</text><ellipse cx="13209.5" cy="1318.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="13218.5" y="1322.1245">editor_get_section_folding() const : const Set&lt;String&gt; &amp;</text><ellipse cx="13209.5" cy="1331.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="13218.5" y="1334.9292">editor_clear_section_folding() : void</text><ellipse cx="13209.5" cy="1344.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="13218.5" y="1347.7339">get_script_instance_binding(int p_script_language_index) : void *</text><ellipse cx="13209.5" cy="1357.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="13218.5" y="1360.5386">has_script_instance_binding(int p_script_language_index) : bool</text><ellipse cx="13209.5" cy="1370.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="13218.5" y="1373.3433">set_script_instance_binding(int p_script_language_index, void * p_data) : void</text><ellipse cx="13209.5" cy="1382.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="13218.5" y="1386.1479">clear_internal_resource_paths() : void</text><ellipse cx="13209.5" cy="1395.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="13218.5" y="1398.9526">Object() : void</text><ellipse cx="13209.5" cy="1408.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="13218.5" y="1411.7573">~Object() : void</text><ellipse cx="13209.5" cy="1421.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="200" x="13218.5" y="1424.562">cast_to&lt;T&gt;(Object * p_object) : T *</text><ellipse cx="13209.5" cy="1434.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="270" x="13218.5" y="1437.3667">cast_to&lt;T&gt;(const Object * p_object) : const T *</text><!--MD5=[8eacd4da8b6a8f3c33abf484b38f77cb]
class C_0000219886141561409828--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" target="_top" title="Object##ConnectFlags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" xlink:show="new" xlink:title="Object##ConnectFlags" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="99.2188" id="C_0000219886141561409828" style="stroke: #A80036; stroke-width: 1.5;" width="198" x="14062.5" y="67.4531"/><ellipse cx="14092.35" cy="83.4531" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14096.4594,89.4531 L14088.7406,89.4531 L14088.7406,77.0625 L14096.4594,77.0625 L14096.4594,79.2188 L14091.1938,79.2188 L14091.1938,81.8906 L14095.9594,81.8906 L14095.9594,84.0469 L14091.1938,84.0469 L14091.1938,87.2969 L14096.4594,87.2969 L14096.4594,89.4531 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="133" x="14109.65" y="87.6074">Object::ConnectFlags</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14063.5" x2="14259.5" y1="99.4531" y2="99.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="14068.5" y="113.6636">CONNECT_DEFERRED</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="14068.5" y="126.4683">CONNECT_PERSIST</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="14068.5" y="139.2729">CONNECT_ONESHOT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="14068.5" y="152.0776">CONNECT_REFERENCE_COUNTED</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14063.5" x2="14259.5" y1="158.6719" y2="158.6719"/></a><!--MD5=[c100d2fcbd7e4572a54d94b4ec867b89]
class C_0001267214583673362755--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" target="_top" title="Object##Connection" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" xlink:show="new" xlink:title="Object##Connection" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="176.0469" id="C_0001267214583673362755" style="stroke: #A80036; stroke-width: 1.5;" width="363" x="5574" y="28.9531"/><ellipse cx="5691.75" cy="44.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5694.7188,50.5938 Q5694.1406,50.8906 5693.5,51.0313 Q5692.8594,51.1875 5692.1563,51.1875 Q5689.6563,51.1875 5688.3281,49.5469 Q5687.0156,47.8906 5687.0156,44.7656 Q5687.0156,41.6406 5688.3281,39.9844 Q5689.6563,38.3281 5692.1563,38.3281 Q5692.8594,38.3281 5693.5,38.4844 Q5694.1563,38.6406 5694.7188,38.9375 L5694.7188,41.6563 Q5694.0938,41.0781 5693.5,40.8125 Q5692.9063,40.5313 5692.2813,40.5313 Q5690.9375,40.5313 5690.25,41.6094 Q5689.5625,42.6719 5689.5625,44.7656 Q5689.5625,46.8594 5690.25,47.9375 Q5690.9375,49 5692.2813,49 Q5692.9063,49 5693.5,48.7344 Q5694.0938,48.4531 5694.7188,47.875 L5694.7188,50.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="5712.25" y="49.1074">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5575" x2="5936" y1="60.9531" y2="60.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="66.9531"/><ellipse cx="5585" cy="71.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="5594" y="75.1636">source : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="79.7578"/><ellipse cx="5585" cy="84.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="5594" y="87.9683">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="92.5625"/><ellipse cx="5585" cy="97.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="5594" y="100.7729">target : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="105.3672"/><ellipse cx="5585" cy="110.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="5594" y="113.5776">flags : uint32_t</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="118.1719"/><ellipse cx="5585" cy="123.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="5594" y="126.3823">binds : Vector&lt;Variant&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="5575" x2="5936" y1="132.9766" y2="132.9766"/><ellipse cx="5585" cy="143.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="5594" y="147.187">operator&lt;(const Object::Connection &amp; p_conn) const : bool</text><ellipse cx="5585" cy="156.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="5594" y="159.9917">operator Variant() const : Variant</text><ellipse cx="5585" cy="169.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="5594" y="172.7964">Connection() : void</text><ellipse cx="5585" cy="182.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="5594" y="185.6011">Connection(const Variant &amp; p_variant) : void</text><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5580" y="190.1953"/><ellipse cx="5585" cy="195.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="5594" y="198.4058">method : StringName</text></a><!--MD5=[d874fe1d316004bca753fee73a8324d9]
class C_0000250357724807605097--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" target="_top" title="Object##Signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" xlink:show="new" xlink:title="Object##Signal" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="86.4141" id="C_0000250357724807605097" style="stroke: #A80036; stroke-width: 1.5;" width="375" x="13303" y="73.9531"/><ellipse cx="13443.25" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13446.2188,95.5938 Q13445.6406,95.8906 13445,96.0313 Q13444.3594,96.1875 13443.6563,96.1875 Q13441.1563,96.1875 13439.8281,94.5469 Q13438.5156,92.8906 13438.5156,89.7656 Q13438.5156,86.6406 13439.8281,84.9844 Q13441.1563,83.3281 13443.6563,83.3281 Q13444.3594,83.3281 13445,83.4844 Q13445.6563,83.6406 13446.2188,83.9375 L13446.2188,86.6563 Q13445.5938,86.0781 13445,85.8125 Q13444.4063,85.5313 13443.7813,85.5313 Q13442.4375,85.5313 13441.75,86.6094 Q13441.0625,87.6719 13441.0625,89.7656 Q13441.0625,91.8594 13441.75,92.9375 Q13442.4375,94 13443.7813,94 Q13444.4063,94 13445,93.7344 Q13445.5938,93.4531 13446.2188,92.875 L13446.2188,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="13463.75" y="94.1074">Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13304" x2="13677" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13309" y="111.9531"/><ellipse cx="13314" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="13323" y="120.1636">user : MethodInfo</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="13309" y="124.7578"/><ellipse cx="13314" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="13323" y="132.9683">slot_map : VMap&lt;Object::Signal::Target,Object::Signal::Slot&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="13304" x2="13677" y1="139.5625" y2="139.5625"/><ellipse cx="13314" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="13323" y="153.7729">Signal() : void</text><!--MD5=[4eb60b73893006bfd9288c7c65337e99]
class C_0002064336919270342687--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" target="_top" title="ObjectDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" xlink:show="new" xlink:title="ObjectDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="99.2188" id="C_0002064336919270342687" style="stroke: #A80036; stroke-width: 1.5;" width="314" x="13713.5" y="67.4531"/><ellipse cx="13837.75" cy="83.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13840.7188,89.0938 Q13840.1406,89.3906 13839.5,89.5313 Q13838.8594,89.6875 13838.1563,89.6875 Q13835.6563,89.6875 13834.3281,88.0469 Q13833.0156,86.3906 13833.0156,83.2656 Q13833.0156,80.1406 13834.3281,78.4844 Q13835.6563,76.8281 13838.1563,76.8281 Q13838.8594,76.8281 13839.5,76.9844 Q13840.1563,77.1406 13840.7188,77.4375 L13840.7188,80.1563 Q13840.0938,79.5781 13839.5,79.3125 Q13838.9063,79.0313 13838.2813,79.0313 Q13836.9375,79.0313 13836.25,80.1094 Q13835.5625,81.1719 13835.5625,83.2656 Q13835.5625,85.3594 13836.25,86.4375 Q13836.9375,87.5 13838.2813,87.5 Q13838.9063,87.5 13839.5,87.2344 Q13840.0938,86.9531 13840.7188,86.375 L13840.7188,89.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="13858.25" y="87.6074">ObjectDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13714.5" x2="14026.5" y1="99.4531" y2="99.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13714.5" x2="14026.5" y1="107.4531" y2="107.4531"/><ellipse cx="13724.5" cy="118.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="266" x="13733.5" y="121.6636">get_instance(ObjectID p_instance_id) : Object *</text><ellipse cx="13724.5" cy="131.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="288" x="13733.5" y="134.4683">debug_objects(ObjectDB::DebugFunc p_func) : void</text><ellipse cx="13724.5" cy="144.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="13733.5" y="147.2729">get_object_count() : int</text><ellipse cx="13724.5" cy="156.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="221" x="13733.5" y="160.0776">instance_validate(Object * p_ptr) : bool</text></a><!--MD5=[cefc1761acd014682fb46e6592f2db8a]
class C_0000104564426296396960--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" target="_top" title="ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" xlink:show="new" xlink:title="ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="1021.1563" id="C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.5;" width="1563" x="11837" y="7763.9531"/><ellipse cx="12589.25" cy="7779.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12592.2188,7785.5938 Q12591.6406,7785.8906 12591,7786.0313 Q12590.3594,7786.1875 12589.6563,7786.1875 Q12587.1563,7786.1875 12585.8281,7784.5469 Q12584.5156,7782.8906 12584.5156,7779.7656 Q12584.5156,7776.6406 12585.8281,7774.9844 Q12587.1563,7773.3281 12589.6563,7773.3281 Q12590.3594,7773.3281 12591,7773.4844 Q12591.6563,7773.6406 12592.2188,7773.9375 L12592.2188,7776.6563 Q12591.5938,7776.0781 12591,7775.8125 Q12590.4063,7775.5313 12589.7813,7775.5313 Q12588.4375,7775.5313 12587.75,7776.6094 Q12587.0625,7777.6719 12587.0625,7779.7656 Q12587.0625,7781.8594 12587.75,7782.9375 Q12588.4375,7784 12589.7813,7784 Q12590.4063,7784 12591,7783.7344 Q12591.5938,7783.4531 12592.2188,7782.875 L12592.2188,7785.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="12609.75" y="7784.1074">ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11838" x2="13399" y1="7795.9531" y2="7795.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7801.9531"/><ellipse cx="11848" cy="7806.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="75" x="11857" y="7810.1636">lock : RWLock</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7814.7578"/><ellipse cx="11848" cy="7819.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="306" x="11857" y="7822.9683">classes : HashMap&lt;StringName,ClassDB::ClassInfo&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7827.5625"/><ellipse cx="11848" cy="7832.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="11857" y="7835.7729">resource_base_extensions : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7840.3672"/><ellipse cx="11848" cy="7845.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="11857" y="7848.5776">compat_classes : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7853.1719"/><ellipse cx="11848" cy="7858.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="11857" y="7861.3823">current_api : ClassDB::APIType</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7865.9766"/><ellipse cx="11848" cy="7870.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="416" x="11857" y="7874.187">default_values : HashMap&lt;StringName,HashMap&lt;StringName,Variant&gt;&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11843" y="7878.7813"/><ellipse cx="11848" cy="7883.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="244" x="11857" y="7886.9917">default_values_cached : Set&lt;StringName&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="11838" x2="13399" y1="7893.5859" y2="7893.5859"/><ellipse cx="11848" cy="7904.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="856" x="11857" y="7907.7964">bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition &amp; method_name, const Variant ** p_defs, int p_defcount) : MethodBind *</text><ellipse cx="11848" cy="7917.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="11857" y="7920.6011">_add_class2(const StringName &amp; p_class, const StringName &amp; p_inherits) : void</text><ellipse cx="11848" cy="7930.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="11857" y="7933.4058">get_class_list(List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="7943" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="538" x="11857" y="7946.2104">get_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="7955.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="576" x="11857" y="7959.0151">get_direct_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="11848" cy="7968.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="399" x="11857" y="7971.8198">get_parent_class_nocheck(const StringName &amp; p_class) : StringName</text><ellipse cx="11848" cy="7981.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="347" x="11857" y="7984.6245">get_parent_class(const StringName &amp; p_class) : StringName</text><ellipse cx="11848" cy="7994.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="11857" y="7997.4292">class_exists(const StringName &amp; p_class) : bool</text><ellipse cx="11848" cy="8007.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="480" x="11857" y="8010.2339">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) : bool</text><ellipse cx="11848" cy="8019.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="281" x="11857" y="8023.0386">can_instance(const StringName &amp; p_class) : bool</text><ellipse cx="11848" cy="8032.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="11857" y="8035.8433">instance(const StringName &amp; p_class) : Object *</text><ellipse cx="11848" cy="8045.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="354" x="11857" y="8048.6479">get_api_type(const StringName &amp; p_class) : ClassDB::APIType</text><ellipse cx="11848" cy="8058.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="11857" y="8061.4526">get_api_hash(ClassDB::APIType p_api) : uint64_t</text><ellipse cx="11848" cy="8071.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="388" x="11857" y="8074.2573">add_signal(StringName p_class, const MethodInfo &amp; p_signal) : void</text><ellipse cx="11848" cy="8083.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="11857" y="8087.062">has_signal(StringName p_class, StringName p_signal) : bool</text><ellipse cx="11848" cy="8096.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="471" x="11857" y="8099.8667">get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool</text><ellipse cx="11848" cy="8109.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="591" x="11857" y="8112.6714">get_signal_list(StringName p_class, List&lt;MethodInfo&gt; * p_signals, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8122.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="578" x="11857" y="8125.4761">add_property_group(StringName p_class, const String &amp; p_name, const String &amp; p_prefix = "") : void</text><ellipse cx="11848" cy="8135.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="850" x="11857" y="8138.2808">add_property(StringName p_class, const PropertyInfo &amp; p_pinfo, const StringName &amp; p_setter, const StringName &amp; p_getter, int p_index = -1) : void</text><ellipse cx="11848" cy="8147.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="636" x="11857" y="8151.0854">set_property_default_value(StringName p_class, const StringName &amp; p_name, const Variant &amp; p_default) : void</text><ellipse cx="11848" cy="8160.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="792" x="11857" y="8163.8901">get_property_list(StringName p_class, List&lt;PropertyInfo&gt; * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void</text><ellipse cx="11848" cy="8173.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="678" x="11857" y="8176.6948">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value, bool * r_valid = __null) : bool</text><ellipse cx="11848" cy="8186.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="509" x="11857" y="8189.4995">get_property(Object * p_object, const StringName &amp; p_property, Variant &amp; r_value) : bool</text><ellipse cx="11848" cy="8199.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="648" x="11857" y="8202.3042">has_property(const StringName &amp; p_class, const StringName &amp; p_property, bool p_no_inheritance = false) : bool</text><ellipse cx="11848" cy="8211.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="642" x="11857" y="8215.1089">get_property_index(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : int</text><ellipse cx="11848" cy="8224.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="697" x="11857" y="8227.9136">get_property_type(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : Variant::Type</text><ellipse cx="11848" cy="8237.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="11857" y="8240.7183">get_property_setter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="11848" cy="8250.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="11857" y="8253.5229">get_property_getter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="11848" cy="8263.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="540" x="11857" y="8266.3276">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool</text><ellipse cx="11848" cy="8275.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="11857" y="8279.1323">set_method_flags(StringName p_class, StringName p_method, int p_flags) : void</text><ellipse cx="11848" cy="8288.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="844" x="11857" y="8291.937">get_method_list(StringName p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void</text><ellipse cx="11848" cy="8301.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="401" x="11857" y="8304.7417">get_method(StringName p_class, StringName p_name) : MethodBind *</text><ellipse cx="11848" cy="8314.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="620" x="11857" y="8317.5464">add_virtual_method(const StringName &amp; p_class, const MethodInfo &amp; p_method, bool p_virtual = true) : void</text><ellipse cx="11848" cy="8327.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="683" x="11857" y="8330.3511">get_virtual_methods(const StringName &amp; p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8339.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="765" x="11857" y="8343.1558">bind_integer_constant(const StringName &amp; p_class, const StringName &amp; p_enum, const StringName &amp; p_name, int p_constant) : void</text><ellipse cx="11848" cy="8352.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="688" x="11857" y="8355.9604">get_integer_constant_list(const StringName &amp; p_class, List&lt;String&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8365.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="644" x="11857" y="8368.7651">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name, bool * p_success = __null) : int</text><ellipse cx="11848" cy="8378.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="757" x="11857" y="8381.5698">get_integer_constant_enum(const StringName &amp; p_class, const StringName &amp; p_name, bool p_no_inheritance = false) : StringName</text><ellipse cx="11848" cy="8391.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="641" x="11857" y="8394.3745">get_enum_list(const StringName &amp; p_class, List&lt;StringName&gt; * p_enums, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8403.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="870" x="11857" y="8407.1792">get_enum_constants(const StringName &amp; p_class, const StringName &amp; p_enum, List&lt;StringName&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="11848" cy="8416.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="733" x="11857" y="8419.9839">class_get_default_property_value(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_valid = __null) : Variant</text><ellipse cx="11848" cy="8429.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="321" x="11857" y="8432.7886">get_category(const StringName &amp; p_node) : StringName</text><ellipse cx="11848" cy="8442.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="349" x="11857" y="8445.5933">set_class_enabled(StringName p_class, bool p_enable) : void</text><ellipse cx="11848" cy="8455.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="255" x="11857" y="8458.3979">is_class_enabled(StringName p_class) : bool</text><ellipse cx="11848" cy="8467.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="11857" y="8471.2026">is_class_exposed(StringName p_class) : bool</text><ellipse cx="11848" cy="8480.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="575" x="11857" y="8484.0073">add_resource_base_extension(const StringName &amp; p_extension, const StringName &amp; p_class) : void</text><ellipse cx="11848" cy="8493.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="381" x="11857" y="8496.812">get_resource_base_extensions(List&lt;String&gt; * p_extensions) : void</text><ellipse cx="11848" cy="8506.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="513" x="11857" y="8509.6167">get_extensions_for_type(const StringName &amp; p_class, List&lt;String&gt; * p_extensions) : void</text><ellipse cx="11848" cy="8519.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="524" x="11857" y="8522.4214">add_compatibility_class(const StringName &amp; p_class, const StringName &amp; p_fallback) : void</text><ellipse cx="11848" cy="8532.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="265" x="11857" y="8535.2261">set_current_api(ClassDB::APIType p_api) : void</text><ellipse cx="11848" cy="8544.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="11857" y="8548.0308">get_current_api() : ClassDB::APIType</text><ellipse cx="11848" cy="8557.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="139" x="11857" y="8560.8354">cleanup_defaults() : void</text><ellipse cx="11848" cy="8570.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="11857" y="8573.6401">cleanup() : void</text><ellipse cx="11848" cy="8583.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="11857" y="8586.4448">creator&lt;T&gt;() : class Object *</text><ellipse cx="11848" cy="8596.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="131" x="11857" y="8599.2495">_add_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8608.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="11857" y="8612.0542">register_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8621.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="11857" y="8624.8589">register_virtual_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8634.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="219" x="11857" y="8637.6636">_create_ptr_func&lt;T&gt;() : class Object *</text><ellipse cx="11848" cy="8647.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="251" x="11857" y="8650.4683">register_custom_instance_class&lt;T&gt;() : void</text><ellipse cx="11848" cy="8660.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="425" x="11857" y="8663.2729">bind_method&lt;N,M&gt;(N p_method_name, M p_method) : class MethodBind *</text><ellipse cx="11848" cy="8672.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="564" x="11857" y="8676.0776">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1) : class MethodBind *</text><ellipse cx="11848" cy="8685.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="703" x="11857" y="8688.8823">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2) : class MethodBind *</text><ellipse cx="11848" cy="8698.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="842" x="11857" y="8701.687">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3) : class MethodBind *</text><ellipse cx="11848" cy="8711.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="981" x="11857" y="8714.4917">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4) : class MethodBind *</text><ellipse cx="11848" cy="8724.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1120" x="11857" y="8727.2964">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5) : class MethodBind *</text><ellipse cx="11848" cy="8736.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1259" x="11857" y="8740.1011">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6) : class MethodBind *</text><ellipse cx="11848" cy="8749.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1398" x="11857" y="8752.9058">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7) : class MethodBind *</text><ellipse cx="11848" cy="8762.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1537" x="11857" y="8765.7104">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7, const Variant &amp; p_def8) : class MethodBind *</text><ellipse cx="11848" cy="8775.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1370" x="11857" y="8778.5151">bind_vararg_method&lt;M&gt;(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo &amp; p_info = MethodInfo(), const Vector&lt;Variant&gt; &amp; p_default_args = Vector&lt;Variant&gt;(), bool p_return_nil_is_variant = true) : class MethodBind *</text><!--MD5=[dd2998d45ec54ba5be719aa7e503205b]
class C_0000218299049716973303--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" target="_top" title="Node" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" xlink:show="new" xlink:title="Node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="2160.7734" id="C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.5;" width="1447" x="18185" y="3861.4531"/><ellipse cx="18887.75" cy="3877.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M18890.7188,3883.0938 Q18890.1406,3883.3906 18889.5,3883.5313 Q18888.8594,3883.6875 18888.1563,3883.6875 Q18885.6563,3883.6875 18884.3281,3882.0469 Q18883.0156,3880.3906 18883.0156,3877.2656 Q18883.0156,3874.1406 18884.3281,3872.4844 Q18885.6563,3870.8281 18888.1563,3870.8281 Q18888.8594,3870.8281 18889.5,3870.9844 Q18890.1563,3871.1406 18890.7188,3871.4375 L18890.7188,3874.1563 Q18890.0938,3873.5781 18889.5,3873.3125 Q18888.9063,3873.0313 18888.2813,3873.0313 Q18886.9375,3873.0313 18886.25,3874.1094 Q18885.5625,3875.1719 18885.5625,3877.2656 Q18885.5625,3879.3594 18886.25,3880.4375 Q18886.9375,3881.5 18888.2813,3881.5 Q18888.9063,3881.5 18889.5,3881.2344 Q18890.0938,3880.9531 18890.7188,3880.375 L18890.7188,3883.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="18908.25" y="3881.6074">Node</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18186" x2="19631" y1="3893.4531" y2="3893.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="18191" y="3899.4531"/><ellipse cx="18196" cy="3904.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="137" x="18205" y="3907.6636">orphan_node_count : int</text></a><ellipse cx="18196" cy="3917.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="18205" y="3920.4683">NOTIFICATION_ENTER_TREE : enum</text><ellipse cx="18196" cy="3930.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="3933.2729">NOTIFICATION_EXIT_TREE : enum</text><ellipse cx="18196" cy="3942.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="18205" y="3946.0776">NOTIFICATION_MOVED_IN_PARENT : enum</text><ellipse cx="18196" cy="3955.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="18205" y="3958.8823">NOTIFICATION_READY : enum</text><ellipse cx="18196" cy="3968.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="18205" y="3971.687">NOTIFICATION_PAUSED : enum</text><ellipse cx="18196" cy="3981.2813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="18205" y="3984.4917">NOTIFICATION_UNPAUSED : enum</text><ellipse cx="18196" cy="3994.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="18205" y="3997.2964">NOTIFICATION_PHYSICS_PROCESS : enum</text><ellipse cx="18196" cy="4006.8906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="18205" y="4010.1011">NOTIFICATION_PROCESS : enum</text><ellipse cx="18196" cy="4019.6953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="4022.9058">NOTIFICATION_PARENTED : enum</text><ellipse cx="18196" cy="4032.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="18205" y="4035.7104">NOTIFICATION_UNPARENTED : enum</text><ellipse cx="18196" cy="4045.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="18205" y="4048.5151">NOTIFICATION_INSTANCED : enum</text><ellipse cx="18196" cy="4058.1094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="4061.3198">NOTIFICATION_DRAG_BEGIN : enum</text><ellipse cx="18196" cy="4070.9141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="18205" y="4074.1245">NOTIFICATION_DRAG_END : enum</text><ellipse cx="18196" cy="4083.7188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="18205" y="4086.9292">NOTIFICATION_PATH_CHANGED : enum</text><ellipse cx="18196" cy="4096.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="18205" y="4099.7339">NOTIFICATION_INTERNAL_PROCESS : enum</text><ellipse cx="18196" cy="4109.3281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="18205" y="4112.5386">NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum</text><ellipse cx="18196" cy="4122.1328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="18205" y="4125.3433">NOTIFICATION_POST_ENTER_TREE : enum</text><ellipse cx="18196" cy="4134.9375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="18205" y="4138.1479">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="18196" cy="4147.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="18205" y="4150.9526">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="18196" cy="4160.5469" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="18205" y="4163.7573">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="18196" cy="4173.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="18205" y="4176.562">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="18196" cy="4186.1563" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="18205" y="4189.3667">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="18196" cy="4198.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="18205" y="4202.1714">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="18196" cy="4211.7656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="18205" y="4214.9761">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text><ellipse cx="18196" cy="4224.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="4227.7808">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="18196" cy="4237.375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="18205" y="4240.5854">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="18196" cy="4250.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="18205" y="4253.3901">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="18196" cy="4262.9844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="18205" y="4266.1948">NOTIFICATION_CRASH : enum</text><ellipse cx="18196" cy="4275.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="18205" y="4278.9995">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="18196" cy="4288.5938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="18205" y="4291.8042">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="18196" cy="4301.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="4304.6089">NOTIFICATION_APP_PAUSED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18186" x2="19631" y1="4311.2031" y2="4311.2031"/><ellipse cx="18196" cy="4322.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="18205" y="4325.4136">get_class() const : String</text><ellipse cx="18196" cy="4335.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="18205" y="4338.2183">_get_class_namev() const : const StringName *</text><ellipse cx="18196" cy="4347.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="18205" y="4351.0229">get_class_ptr_static() : void *</text><ellipse cx="18196" cy="4360.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="18205" y="4363.8276">get_class_static() : String</text><ellipse cx="18196" cy="4373.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="18205" y="4376.6323">get_parent_class_static() : String</text><ellipse cx="18196" cy="4386.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="18205" y="4389.437">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="18196" cy="4399.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="18205" y="4402.2417">get_category_static() : String</text><ellipse cx="18196" cy="4411.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="18205" y="4415.0464">inherits_static() : String</text><ellipse cx="18196" cy="4424.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="18205" y="4427.8511">is_class(const String &amp; p_class) const : bool</text><ellipse cx="18196" cy="4437.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="18205" y="4440.6558">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="18196" cy="4450.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="18205" y="4453.4604">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="18196" cy="4463.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="18205" y="4466.2651">initialize_class() : void</text><ellipse cx="18196" cy="4475.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="18205" y="4479.0698">get_name() const : StringName</text><ellipse cx="18196" cy="4488.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="18205" y="4491.8745">set_name(const String &amp; p_name) : void</text><ellipse cx="18196" cy="4501.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="18205" y="4504.6792">add_child(Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="18196" cy="4514.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="18205" y="4517.4839">add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="18196" cy="4527.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="18205" y="4530.2886">remove_child(Node * p_child) : void</text><ellipse cx="18196" cy="4539.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="18205" y="4543.0933">get_child_count() const : int</text><ellipse cx="18196" cy="4552.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="18205" y="4555.8979">get_child(int p_index) const : Node *</text><ellipse cx="18196" cy="4565.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="18205" y="4568.7026">has_node(const NodePath &amp; p_path) const : bool</text><ellipse cx="18196" cy="4578.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="4581.5073">get_node(const NodePath &amp; p_path) const : Node *</text><ellipse cx="18196" cy="4591.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="18205" y="4594.312">get_node_or_null(const NodePath &amp; p_path) const : Node *</text><ellipse cx="18196" cy="4603.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="18205" y="4607.1167">find_node(const String &amp; p_mask, bool p_recursive = true, bool p_owned = true) const : Node *</text><ellipse cx="18196" cy="4616.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="18205" y="4619.9214">has_node_and_resource(const NodePath &amp; p_path) const : bool</text><ellipse cx="18196" cy="4629.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="886" x="18205" y="4632.7261">get_node_and_resource(const NodePath &amp; p_path, RES &amp; r_res, Vector&lt;StringName&gt; &amp; r_leftover_subpath, bool p_last_is_property = true) const : Node *</text><ellipse cx="18196" cy="4642.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="18205" y="4645.5308">get_parent() const : Node *</text><ellipse cx="18196" cy="4655.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="18205" y="4658.3354">find_parent(const String &amp; p_mask) const : Node *</text><ellipse cx="18196" cy="4667.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="18205" y="4671.1401">get_tree() const : SceneTree *</text><ellipse cx="18196" cy="4680.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4683.9448">is_inside_tree() const : bool</text><ellipse cx="18196" cy="4693.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="18205" y="4696.7495">is_a_parent_of(const Node * p_node) const : bool</text><ellipse cx="18196" cy="4706.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="18205" y="4709.5542">is_greater_than(const Node * p_node) const : bool</text><ellipse cx="18196" cy="4719.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="4722.3589">get_path() const : NodePath</text><ellipse cx="18196" cy="4731.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="18205" y="4735.1636">get_path_to(const Node * p_node) const : NodePath</text><ellipse cx="18196" cy="4744.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="18205" y="4747.9683">find_common_parent_with(const Node * p_node) const : Node *</text><ellipse cx="18196" cy="4757.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="455" x="18205" y="4760.7729">add_to_group(const StringName &amp; p_identifier, bool p_persistent = false) : void</text><ellipse cx="18196" cy="4770.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="18205" y="4773.5776">remove_from_group(const StringName &amp; p_identifier) : void</text><ellipse cx="18196" cy="4783.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="18205" y="4786.3823">is_in_group(const StringName &amp; p_identifier) const : bool</text><ellipse cx="18196" cy="4795.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="18205" y="4799.187">get_groups(List&lt;Node::GroupInfo&gt; * p_groups) const : void</text><ellipse cx="18196" cy="4808.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="18205" y="4811.9917">get_persistent_group_count() const : int</text><ellipse cx="18196" cy="4821.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="18205" y="4824.7964">move_child(Node * p_child, int p_pos) : void</text><ellipse cx="18196" cy="4834.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="18205" y="4837.6011">raise() : void</text><ellipse cx="18196" cy="4847.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="18205" y="4850.4058">set_owner(Node * p_owner) : void</text><ellipse cx="18196" cy="4860" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="18205" y="4863.2104">get_owner() const : Node *</text><ellipse cx="18196" cy="4872.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="18205" y="4876.0151">get_owned_by(Node * p_by, List&lt;Node *&gt; * p_owned) : void</text><ellipse cx="18196" cy="4885.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="18205" y="4888.8198">remove_and_skip() : void</text><ellipse cx="18196" cy="4898.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="18205" y="4901.6245">get_index() const : int</text><ellipse cx="18196" cy="4911.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="18205" y="4914.4292">print_tree() : void</text><ellipse cx="18196" cy="4924.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="18205" y="4927.2339">print_tree_pretty() : void</text><ellipse cx="18196" cy="4936.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="18205" y="4940.0386">set_filename(const String &amp; p_filename) : void</text><ellipse cx="18196" cy="4949.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="18205" y="4952.8433">get_filename() const : String</text><ellipse cx="18196" cy="4962.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="18205" y="4965.6479">set_editor_description(const String &amp; p_editor_description) : void</text><ellipse cx="18196" cy="4975.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="18205" y="4978.4526">get_editor_description() const : String</text><ellipse cx="18196" cy="4988.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="18205" y="4991.2573">set_editable_instance(Node * p_node, bool p_editable) : void</text><ellipse cx="18196" cy="5000.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="18205" y="5004.062">is_editable_instance(const Node * p_node) const : bool</text><ellipse cx="18196" cy="5013.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="18205" y="5016.8667">get_deepest_editable_node(Node * start_node) const : Node *</text><ellipse cx="18196" cy="5026.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="18205" y="5029.6714">propagate_notification(int p_notification) : void</text><ellipse cx="18196" cy="5039.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="18205" y="5042.4761">propagate_call(const StringName &amp; p_method, const Array &amp; p_args = Array(), const bool p_parent_first = false) : void</text><ellipse cx="18196" cy="5052.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="18205" y="5055.2808">set_physics_process(bool p_process) : void</text><ellipse cx="18196" cy="5064.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="18205" y="5068.0854">get_physics_process_delta_time() const : float</text><ellipse cx="18196" cy="5077.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="18205" y="5080.8901">is_physics_processing() const : bool</text><ellipse cx="18196" cy="5090.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="18205" y="5093.6948">set_process(bool p_idle_process) : void</text><ellipse cx="18196" cy="5103.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="18205" y="5106.4995">get_process_delta_time() const : float</text><ellipse cx="18196" cy="5116.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="5119.3042">is_processing() const : bool</text><ellipse cx="18196" cy="5128.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="18205" y="5132.1089">set_physics_process_internal(bool p_process_internal) : void</text><ellipse cx="18196" cy="5141.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="5144.9136">is_physics_processing_internal() const : bool</text><ellipse cx="18196" cy="5154.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="18205" y="5157.7183">set_process_internal(bool p_idle_process_internal) : void</text><ellipse cx="18196" cy="5167.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="18205" y="5170.5229">is_processing_internal() const : bool</text><ellipse cx="18196" cy="5180.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="18205" y="5183.3276">set_process_priority(int p_priority) : void</text><ellipse cx="18196" cy="5192.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="18205" y="5196.1323">get_process_priority() const : int</text><ellipse cx="18196" cy="5205.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="18205" y="5208.937">set_process_input(bool p_enable) : void</text><ellipse cx="18196" cy="5218.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="18205" y="5221.7417">is_processing_input() const : bool</text><ellipse cx="18196" cy="5231.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="5234.5464">set_process_unhandled_input(bool p_enable) : void</text><ellipse cx="18196" cy="5244.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="18205" y="5247.3511">is_processing_unhandled_input() const : bool</text><ellipse cx="18196" cy="5256.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="18205" y="5260.1558">set_process_unhandled_key_input(bool p_enable) : void</text><ellipse cx="18196" cy="5269.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="18205" y="5272.9604">is_processing_unhandled_key_input() const : bool</text><ellipse cx="18196" cy="5282.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="18205" y="5285.7651">get_position_in_parent() const : int</text><ellipse cx="18196" cy="5295.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="591" x="18205" y="5298.5698">duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *</text><ellipse cx="18196" cy="5308.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="468" x="18205" y="5311.3745">duplicate_and_reown(const Map&lt;Node *,Node *&gt; &amp; p_reown_map) const : Node *</text><ellipse cx="18196" cy="5320.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="18205" y="5324.1792">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap) const : Node *</text><ellipse cx="18196" cy="5333.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="18205" y="5336.9839">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : Node *</text><ellipse cx="18196" cy="5346.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="18205" y="5349.7886">remap_node_resources(Node * p_node, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="18196" cy="5359.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="571" x="18205" y="5362.5933">remap_nested_resources(RES p_resource, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="18196" cy="5372.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="18205" y="5375.3979">set_scene_instance_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="18196" cy="5384.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="18205" y="5388.2026">get_scene_instance_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="18196" cy="5397.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="18205" y="5401.0073">set_scene_inherited_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="18196" cy="5410.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="18205" y="5413.812">get_scene_inherited_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="18196" cy="5423.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="18205" y="5426.6167">set_scene_instance_load_placeholder(bool p_enable) : void</text><ellipse cx="18196" cy="5436.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="18205" y="5439.4214">get_scene_instance_load_placeholder() const : bool</text><ellipse cx="18196" cy="5449.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1199" x="18205" y="5452.2261">make_binds(const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Vector&lt;Variant&gt;</text><ellipse cx="18196" cy="5461.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="18205" y="5465.0308">replace_by(Node * p_node, bool p_keep_data = false) : void</text><ellipse cx="18196" cy="5474.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="18205" y="5477.8354">set_pause_mode(Node::PauseMode p_mode) : void</text><ellipse cx="18196" cy="5487.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="18205" y="5490.6401">get_pause_mode() const : Node::PauseMode</text><ellipse cx="18196" cy="5500.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="18205" y="5503.4448">can_process() const : bool</text><ellipse cx="18196" cy="5513.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="18205" y="5516.2495">can_process_notification(int p_what) const : bool</text><ellipse cx="18196" cy="5525.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="18205" y="5529.0542">request_ready() : void</text><ellipse cx="18196" cy="5538.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="18205" y="5541.8589">print_stray_nodes() : void</text><ellipse cx="18196" cy="5551.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="18205" y="5554.6636">validate_child_name(Node * p_child) : String</text><ellipse cx="18196" cy="5564.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="18205" y="5567.4683">queue_delete() : void</text><ellipse cx="18196" cy="5577.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="360" x="18205" y="5580.2729">set_human_readable_collision_renaming(bool p_enabled) : void</text><ellipse cx="18196" cy="5589.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="123" x="18205" y="5593.0776">init_node_hrcr() : void</text><ellipse cx="18196" cy="5602.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="18205" y="5605.8823">force_parent_owned() : void</text><ellipse cx="18196" cy="5615.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="18205" y="5618.687">set_import_path(const NodePath &amp; p_import_path) : void</text><ellipse cx="18196" cy="5628.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="18205" y="5631.4917">get_import_path() const : NodePath</text><ellipse cx="18196" cy="5641.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="18205" y="5644.2964">is_owned_by_parent() const : bool</text><ellipse cx="18196" cy="5653.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="18205" y="5657.1011">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="18196" cy="5666.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="18205" y="5669.9058">clear_internal_tree_resource_paths() : void</text><ellipse cx="18196" cy="5679.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="18205" y="5682.7104">get_viewport() const : Viewport *</text><ellipse cx="18196" cy="5692.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="18205" y="5695.5151">get_configuration_warning() const : String</text><ellipse cx="18196" cy="5705.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="18205" y="5708.3198">update_configuration_warning() : void</text><ellipse cx="18196" cy="5717.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="18205" y="5721.1245">set_display_folded(bool p_folded) : void</text><ellipse cx="18196" cy="5730.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="18205" y="5733.9292">is_displayed_folded() const : bool</text><ellipse cx="18196" cy="5743.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="18205" y="5746.7339">set_network_master(int p_peer_id, bool p_recursive = true) : void</text><ellipse cx="18196" cy="5756.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="18205" y="5759.5386">get_network_master() const : int</text><ellipse cx="18196" cy="5769.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="18205" y="5772.3433">is_network_master() const : bool</text><ellipse cx="18196" cy="5781.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="18205" y="5785.1479">rpc_config(const StringName &amp; p_method, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="18196" cy="5794.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="18205" y="5797.9526">rset_config(const StringName &amp; p_property, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="18196" cy="5807.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1262" x="18205" y="5810.7573">rpc(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5820.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1324" x="18205" y="5823.562">rpc_unreliable(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5833.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="18205" y="5836.3667">rpc_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5845.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1421" x="18205" y="5849.1714">rpc_unreliable_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="18196" cy="5858.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="18205" y="5861.9761">rset(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5871.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="18205" y="5874.7808">rset_unreliable(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5884.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="18205" y="5887.5854">rset_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5897.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="18205" y="5900.3901">rset_unreliable_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5909.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="654" x="18205" y="5913.1948">rpcp(int p_peer_id, bool p_unreliable, const StringName &amp; p_method, const Variant ** p_arg, int p_argcount) : void</text><ellipse cx="18196" cy="5922.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="18205" y="5925.9995">rsetp(int p_peer_id, bool p_unreliable, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="18196" cy="5935.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="18205" y="5938.8042">get_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="18196" cy="5948.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="18205" y="5951.6089">get_custom_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="18196" cy="5961.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="18205" y="5964.4136">set_custom_multiplayer(Ref&lt;MultiplayerAPI&gt; p_multiplayer) : void</text><ellipse cx="18196" cy="5974.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="659" x="18205" y="5977.2183">get_node_rpc_mode(const StringName &amp; p_method) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="18196" cy="5986.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="18205" y="5990.0229">get_node_rset_mode(const StringName &amp; p_property) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="18196" cy="5999.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="18205" y="6002.8276">Node() : void</text><ellipse cx="18196" cy="6012.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="18205" y="6015.6323">~Node() : void</text><!--MD5=[88b426eff1894866fc41c8357e83d201]
class C_0000933379568804427881--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" target="_top" title="ObjectRC" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" xlink:show="new" xlink:title="ObjectRC" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="124.8281" id="C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.5;" width="217" x="16013" y="1757.9531"/><ellipse cx="16089.25" cy="1773.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16092.2188,1779.5938 Q16091.6406,1779.8906 16091,1780.0313 Q16090.3594,1780.1875 16089.6563,1780.1875 Q16087.1563,1780.1875 16085.8281,1778.5469 Q16084.5156,1776.8906 16084.5156,1773.7656 Q16084.5156,1770.6406 16085.8281,1768.9844 Q16087.1563,1767.3281 16089.6563,1767.3281 Q16090.3594,1767.3281 16091,1767.4844 Q16091.6563,1767.6406 16092.2188,1767.9375 L16092.2188,1770.6563 Q16091.5938,1770.0781 16091,1769.8125 Q16090.4063,1769.5313 16089.7813,1769.5313 Q16088.4375,1769.5313 16087.75,1770.6094 Q16087.0625,1771.6719 16087.0625,1773.7656 Q16087.0625,1775.8594 16087.75,1776.9375 Q16088.4375,1778 16089.7813,1778 Q16090.4063,1778 16091,1777.7344 Q16091.5938,1777.4531 16092.2188,1776.875 L16092.2188,1779.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="16109.75" y="1778.1074">ObjectRC</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16014" x2="16229" y1="1789.9531" y2="1789.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="16019" y="1795.9531"/><ellipse cx="16024" cy="1800.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="16033" y="1804.1636">instance_id : const ObjectID</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="16014" x2="16229" y1="1810.7578" y2="1810.7578"/><ellipse cx="16024" cy="1821.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="16033" y="1824.9683">increment() : void</text><ellipse cx="16024" cy="1834.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="16033" y="1837.7729">decrement() : bool</text><ellipse cx="16024" cy="1847.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="16033" y="1850.5776">invalidate() : bool</text><ellipse cx="16024" cy="1860.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="16033" y="1863.3823">get_ptr() : Object *</text><ellipse cx="16024" cy="1872.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="16033" y="1876.187">ObjectRC(Object * p_object) : void</text><!--MD5=[20a137ad8bfb5b27a1303d95d4ed4f68]
class C_0001735438654351294549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" target="_top" title="ScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" xlink:show="new" xlink:title="ScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="368.1172" id="C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.5;" width="1349" x="13196" y="1636.4531"/><ellipse cx="13821.25" cy="1652.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13821.3594,1647.7969 L13820.2031,1652.875 L13822.5313,1652.875 L13821.3594,1647.7969 Z M13819.875,1645.5625 L13822.8594,1645.5625 L13826.2188,1657.9531 L13823.7656,1657.9531 L13823,1654.8906 L13819.7188,1654.8906 L13818.9688,1657.9531 L13816.5313,1657.9531 L13819.875,1645.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="90" x="13841.75" y="1656.6074">ScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13197" x2="14544" y1="1668.4531" y2="1668.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13197" x2="14544" y1="1676.4531" y2="1676.4531"/><ellipse cx="13207" cy="1687.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="13216" y="1690.6636">set(const StringName &amp; p_name, const Variant &amp; p_value) = 0 : bool</text><ellipse cx="13207" cy="1700.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="13216" y="1703.4683">get(const StringName &amp; p_name, Variant &amp; r_ret) const = 0 : bool</text><ellipse cx="13207" cy="1713.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="389" x="13216" y="1716.2729">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const = 0 : void</text><ellipse cx="13207" cy="1725.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="13216" y="1729.0776">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const = 0 : Variant::Type</text><ellipse cx="13207" cy="1738.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="13216" y="1741.8823">get_owner() : Object *</text><ellipse cx="13207" cy="1751.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="13216" y="1754.687">get_property_state(List&lt;Pair&lt;StringName,Variant&gt;&gt; &amp; state) : void</text><ellipse cx="13207" cy="1764.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="333" x="13216" y="1767.4917">get_method_list(List&lt;MethodInfo&gt; * p_list) const = 0 : void</text><ellipse cx="13207" cy="1777.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="13216" y="1780.2964">has_method(const StringName &amp; p_method) const = 0 : bool</text><ellipse cx="13207" cy="1789.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="13216" y="1793.1011">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="13207" cy="1802.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="671" x="13216" y="1805.9058">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) = 0 : Variant</text><ellipse cx="13207" cy="1815.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1323" x="13216" y="1818.7104">call_multilevel(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="13207" cy="1828.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="13216" y="1831.5151">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13207" cy="1841.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="13216" y="1844.3198">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="13207" cy="1853.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="223" x="13216" y="1857.1245">notification(int p_notification) = 0 : void</text><ellipse cx="13207" cy="1866.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="13216" y="1869.9292">to_string(bool * r_valid) : String</text><ellipse cx="13207" cy="1879.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="13216" y="1882.7339">refcount_incremented() : void</text><ellipse cx="13207" cy="1892.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="13216" y="1895.5386">refcount_decremented() : bool</text><ellipse cx="13207" cy="1905.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="202" x="13216" y="1908.3433">get_script() const = 0 : Ref&lt;Script&gt;</text><ellipse cx="13207" cy="1917.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="13216" y="1921.1479">is_placeholder() const : bool</text><ellipse cx="13207" cy="1930.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="13216" y="1933.9526">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid) : void</text><ellipse cx="13207" cy="1943.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="13216" y="1946.7573">property_get_fallback(const StringName &amp; p_name, bool * r_valid) : Variant</text><ellipse cx="13207" cy="1956.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="13216" y="1959.562">get_rpc_mode(const StringName &amp; p_method) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="13207" cy="1969.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="479" x="13216" y="1972.3667">get_rset_mode(const StringName &amp; p_variable) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="13207" cy="1981.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="13216" y="1985.1714">get_language() = 0 : ScriptLanguage *</text><ellipse cx="13207" cy="1994.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="13216" y="1997.9761">~ScriptInstance() : void</text></a><!--MD5=[fde6ed13e18da825139d9e33a0c6db3f]
class C_0001778859257025660860--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" target="_top" title="Reference" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" xlink:show="new" xlink:title="Reference" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="291.2891" id="C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="23801" y="1674.9531"/><ellipse cx="23965.25" cy="1690.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23968.2188,1696.5938 Q23967.6406,1696.8906 23967,1697.0313 Q23966.3594,1697.1875 23965.6563,1697.1875 Q23963.1563,1697.1875 23961.8281,1695.5469 Q23960.5156,1693.8906 23960.5156,1690.7656 Q23960.5156,1687.6406 23961.8281,1685.9844 Q23963.1563,1684.3281 23965.6563,1684.3281 Q23966.3594,1684.3281 23967,1684.4844 Q23967.6563,1684.6406 23968.2188,1684.9375 L23968.2188,1687.6563 Q23967.5938,1687.0781 23967,1686.8125 Q23966.4063,1686.5313 23965.7813,1686.5313 Q23964.4375,1686.5313 23963.75,1687.6094 Q23963.0625,1688.6719 23963.0625,1690.7656 Q23963.0625,1692.8594 23963.75,1693.9375 Q23964.4375,1695 23965.7813,1695 Q23966.4063,1695 23967,1694.7344 Q23967.5938,1694.4531 23968.2188,1693.875 L23968.2188,1696.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="23985.75" y="1695.1074">Reference</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23802" x2="24201" y1="1706.9531" y2="1706.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="23802" x2="24201" y1="1714.9531" y2="1714.9531"/><ellipse cx="23812" cy="1725.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="23821" y="1729.1636">get_class() const : String</text><ellipse cx="23812" cy="1738.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="23821" y="1741.9683">_get_class_namev() const : const StringName *</text><ellipse cx="23812" cy="1751.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="23821" y="1754.7729">get_class_ptr_static() : void *</text><ellipse cx="23812" cy="1764.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="23821" y="1767.5776">get_class_static() : String</text><ellipse cx="23812" cy="1777.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="23821" y="1780.3823">get_parent_class_static() : String</text><ellipse cx="23812" cy="1789.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="23821" y="1793.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="23812" cy="1802.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="23821" y="1805.9917">get_category_static() : String</text><ellipse cx="23812" cy="1815.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="23821" y="1818.7964">inherits_static() : String</text><ellipse cx="23812" cy="1828.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="23821" y="1831.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="23812" cy="1841.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="23821" y="1844.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="23812" cy="1854" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="23821" y="1857.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="23812" cy="1866.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="23821" y="1870.0151">initialize_class() : void</text><ellipse cx="23812" cy="1879.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="23821" y="1882.8198">is_referenced() const : bool</text><ellipse cx="23812" cy="1892.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="23821" y="1895.6245">init_ref() : bool</text><ellipse cx="23812" cy="1905.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="23821" y="1908.4292">reference() : bool</text><ellipse cx="23812" cy="1918.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="23821" y="1921.2339">unreference() : bool</text><ellipse cx="23812" cy="1930.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="23821" y="1934.0386">reference_get_count() const : int</text><ellipse cx="23812" cy="1943.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="23821" y="1946.8433">Reference() : void</text><ellipse cx="23812" cy="1956.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="23821" y="1959.6479">~Reference() : void</text></a><!--MD5=[20209edb2b2a39856a637a9459a4ae92]
class C_0001649884439586022807--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" target="_top" title="PlaceHolderScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" xlink:show="new" xlink:title="PlaceHolderScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="304.0938" id="C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.5;" width="1306" x="16148.5" y="4789.9531"/><ellipse cx="16714.75" cy="4805.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16717.7188,4811.5938 Q16717.1406,4811.8906 16716.5,4812.0313 Q16715.8594,4812.1875 16715.1563,4812.1875 Q16712.6563,4812.1875 16711.3281,4810.5469 Q16710.0156,4808.8906 16710.0156,4805.7656 Q16710.0156,4802.6406 16711.3281,4800.9844 Q16712.6563,4799.3281 16715.1563,4799.3281 Q16715.8594,4799.3281 16716.5,4799.4844 Q16717.1563,4799.6406 16717.7188,4799.9375 L16717.7188,4802.6563 Q16717.0938,4802.0781 16716.5,4801.8125 Q16715.9063,4801.5313 16715.2813,4801.5313 Q16713.9375,4801.5313 16713.25,4802.6094 Q16712.5625,4803.6719 16712.5625,4805.7656 Q16712.5625,4807.8594 16713.25,4808.9375 Q16713.9375,4810 16715.2813,4810 Q16715.9063,4810 16716.5,4809.7344 Q16717.0938,4809.4531 16717.7188,4808.875 L16717.7188,4811.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="165" x="16735.25" y="4810.1074">PlaceHolderScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16149.5" x2="17453.5" y1="4821.9531" y2="4821.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="16149.5" x2="17453.5" y1="4829.9531" y2="4829.9531"/><ellipse cx="16159.5" cy="4840.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="16168.5" y="4844.1636">set(const StringName &amp; p_name, const Variant &amp; p_value) : bool</text><ellipse cx="16159.5" cy="4853.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="16168.5" y="4856.9683">get(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><ellipse cx="16159.5" cy="4866.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="16168.5" y="4869.7729">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const : void</text><ellipse cx="16159.5" cy="4879.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="16168.5" y="4882.5776">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const : Variant::Type</text><ellipse cx="16159.5" cy="4892.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="16168.5" y="4895.3823">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="16159.5" cy="4904.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="16168.5" y="4908.187">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="16159.5" cy="4917.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="16168.5" y="4920.9917">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="16159.5" cy="4930.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="16168.5" y="4933.7964">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="16159.5" cy="4943.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="16168.5" y="4946.6011">notification(int p_notification) : void</text><ellipse cx="16159.5" cy="4956.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="16168.5" y="4959.4058">get_script() const : Ref&lt;Script&gt;</text><ellipse cx="16159.5" cy="4969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="16168.5" y="4972.2104">get_language() : ScriptLanguage *</text><ellipse cx="16159.5" cy="4981.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="16168.5" y="4985.0151">get_owner() : Object *</text><ellipse cx="16159.5" cy="4994.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="16168.5" y="4997.8198">update(const List&lt;PropertyInfo&gt; &amp; p_properties, const Map&lt;StringName,Variant&gt; &amp; p_values) : void</text><ellipse cx="16159.5" cy="5007.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="16168.5" y="5010.6245">is_placeholder() const : bool</text><ellipse cx="16159.5" cy="5020.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="605" x="16168.5" y="5023.4292">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="16159.5" cy="5033.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="16168.5" y="5036.2339">property_get_fallback(const StringName &amp; p_name, bool * r_valid = __null) : Variant</text><ellipse cx="16159.5" cy="5045.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="16168.5" y="5049.0386">get_rpc_mode(const StringName &amp; p_method) const : MultiplayerAPI::RPCMode</text><ellipse cx="16159.5" cy="5058.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="16168.5" y="5061.8433">get_rset_mode(const StringName &amp; p_variable) const : MultiplayerAPI::RPCMode</text><ellipse cx="16159.5" cy="5071.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="590" x="16168.5" y="5074.6479">PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref&lt;Script&gt; p_script, Object * p_owner) : void</text><ellipse cx="16159.5" cy="5084.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="16168.5" y="5087.4526">~PlaceHolderScriptInstance() : void</text></a><!--MD5=[79e27d258fa9a526a1771d31d80b94ef]
class C_0000970940027123558604--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" target="_top" title="MainLoop" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" xlink:show="new" xlink:title="MainLoop" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="521.7734" id="C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.5;" width="440" x="19667.5" y="4680.9531"/><ellipse cx="19853.75" cy="4696.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M19856.7188,4702.5938 Q19856.1406,4702.8906 19855.5,4703.0313 Q19854.8594,4703.1875 19854.1563,4703.1875 Q19851.6563,4703.1875 19850.3281,4701.5469 Q19849.0156,4699.8906 19849.0156,4696.7656 Q19849.0156,4693.6406 19850.3281,4691.9844 Q19851.6563,4690.3281 19854.1563,4690.3281 Q19854.8594,4690.3281 19855.5,4690.4844 Q19856.1563,4690.6406 19856.7188,4690.9375 L19856.7188,4693.6563 Q19856.0938,4693.0781 19855.5,4692.8125 Q19854.9063,4692.5313 19854.2813,4692.5313 Q19852.9375,4692.5313 19852.25,4693.6094 Q19851.5625,4694.6719 19851.5625,4696.7656 Q19851.5625,4698.8594 19852.25,4699.9375 Q19852.9375,4701 19854.2813,4701 Q19854.9063,4701 19855.5,4700.7344 Q19856.0938,4700.4531 19856.7188,4699.875 L19856.7188,4702.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="19874.25" y="4701.1074">MainLoop</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19668.5" x2="20106.5" y1="4712.9531" y2="4712.9531"/><ellipse cx="19678.5" cy="4723.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="19687.5" y="4727.1636">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="19678.5" cy="4736.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="19687.5" y="4739.9683">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="19678.5" cy="4749.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="19687.5" y="4752.7729">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="19678.5" cy="4762.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="19687.5" y="4765.5776">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="19678.5" cy="4775.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="19687.5" y="4778.3823">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="19678.5" cy="4787.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="19687.5" y="4791.187">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="19678.5" cy="4800.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19687.5" y="4803.9917">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text><ellipse cx="19678.5" cy="4813.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="19687.5" y="4816.7964">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="19678.5" cy="4826.3906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19687.5" y="4829.6011">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="19678.5" cy="4839.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="19687.5" y="4842.4058">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="19678.5" cy="4852" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="19687.5" y="4855.2104">NOTIFICATION_CRASH : enum</text><ellipse cx="19678.5" cy="4864.8047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="19687.5" y="4868.0151">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="19678.5" cy="4877.6094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="19687.5" y="4880.8198">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="19678.5" cy="4890.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="19687.5" y="4893.6245">NOTIFICATION_APP_PAUSED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19668.5" x2="20106.5" y1="4900.2188" y2="4900.2188"/><ellipse cx="19678.5" cy="4911.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="19687.5" y="4914.4292">get_class() const : String</text><ellipse cx="19678.5" cy="4924.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="19687.5" y="4927.2339">_get_class_namev() const : const StringName *</text><ellipse cx="19678.5" cy="4936.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="19687.5" y="4940.0386">get_class_ptr_static() : void *</text><ellipse cx="19678.5" cy="4949.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="19687.5" y="4952.8433">get_class_static() : String</text><ellipse cx="19678.5" cy="4962.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="19687.5" y="4965.6479">get_parent_class_static() : String</text><ellipse cx="19678.5" cy="4975.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="19687.5" y="4978.4526">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="19678.5" cy="4988.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="19687.5" y="4991.2573">get_category_static() : String</text><ellipse cx="19678.5" cy="5000.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="19687.5" y="5004.062">inherits_static() : String</text><ellipse cx="19678.5" cy="5013.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="19687.5" y="5016.8667">is_class(const String &amp; p_class) const : bool</text><ellipse cx="19678.5" cy="5026.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="19687.5" y="5029.6714">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="19678.5" cy="5039.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="19687.5" y="5042.4761">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="19678.5" cy="5052.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="19687.5" y="5055.2808">initialize_class() : void</text><ellipse cx="19678.5" cy="5064.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="19687.5" y="5068.0854">input_event(const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="19678.5" cy="5077.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="19687.5" y="5080.8901">input_text(const String &amp; p_text) : void</text><ellipse cx="19678.5" cy="5090.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="19687.5" y="5093.6948">init() : void</text><ellipse cx="19678.5" cy="5103.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19687.5" y="5106.4995">iteration(float p_time) : bool</text><ellipse cx="19678.5" cy="5116.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="19687.5" y="5119.3042">idle(float p_time) : bool</text><ellipse cx="19678.5" cy="5128.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="19687.5" y="5132.1089">finish() : void</text><ellipse cx="19678.5" cy="5141.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="19687.5" y="5144.9136">drop_files(const Vector&lt;String&gt; &amp; p_files, int p_from_screen = 0) : void</text><ellipse cx="19678.5" cy="5154.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="19687.5" y="5157.7183">global_menu_action(const Variant &amp; p_id, const Variant &amp; p_meta) : void</text><ellipse cx="19678.5" cy="5167.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="19687.5" y="5170.5229">set_init_script(const Ref&lt;Script&gt; &amp; p_init_script) : void</text><ellipse cx="19678.5" cy="5180.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="19687.5" y="5183.3276">MainLoop() : void</text><ellipse cx="19678.5" cy="5192.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="19687.5" y="5196.1323">~MainLoop() : void</text></a><!--MD5=[2ff27342a65908c4b6ff1f7f17075b0e]
class C_0001823345232236209470--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" target="_top" title="Engine##Singleton" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" xlink:show="new" xlink:title="Engine##Singleton" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="86.4141" id="C_0001823345232236209470" style="stroke: #A80036; stroke-width: 1.5;" width="515" x="19445" y="73.9531"/><ellipse cx="19643.25" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M19646.2188,95.5938 Q19645.6406,95.8906 19645,96.0313 Q19644.3594,96.1875 19643.6563,96.1875 Q19641.1563,96.1875 19639.8281,94.5469 Q19638.5156,92.8906 19638.5156,89.7656 Q19638.5156,86.6406 19639.8281,84.9844 Q19641.1563,83.3281 19643.6563,83.3281 Q19644.3594,83.3281 19645,83.4844 Q19645.6563,83.6406 19646.2188,83.9375 L19646.2188,86.6563 Q19645.5938,86.0781 19645,85.8125 Q19644.4063,85.5313 19643.7813,85.5313 Q19642.4375,85.5313 19641.75,86.6094 Q19641.0625,87.6719 19641.0625,89.7656 Q19641.0625,91.8594 19641.75,92.9375 Q19642.4375,94 19643.7813,94 Q19644.4063,94 19645,93.7344 Q19645.5938,93.4531 19646.2188,92.875 L19646.2188,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="19663.75" y="94.1074">Engine::Singleton</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19446" x2="19959" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19451" y="111.9531"/><ellipse cx="19456" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="19465" y="120.1636">name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19451" y="124.7578"/><ellipse cx="19456" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="19465" y="132.9683">ptr : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="19446" x2="19959" y1="139.5625" y2="139.5625"/><ellipse cx="19456" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="489" x="19465" y="153.7729">Singleton(const StringName &amp; p_name = StringName(), Object * p_ptr = __null) : void</text><!--MD5=[3066cc904e29be9ea26e95834396af6e]
class C_0001191393512042218074--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" target="_top" title="IP" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" xlink:show="new" xlink:title="IP" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="380.9219" id="C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.5;" width="625" x="21735" y="4751.4531"/><ellipse cx="22037.75" cy="4767.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M22037.8594,4762.7969 L22036.7031,4767.875 L22039.0313,4767.875 L22037.8594,4762.7969 Z M22036.375,4760.5625 L22039.3594,4760.5625 L22042.7188,4772.9531 L22040.2656,4772.9531 L22039.5,4769.8906 L22036.2188,4769.8906 L22035.4688,4772.9531 L22033.0313,4772.9531 L22036.375,4760.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="11" x="22058.25" y="4771.6074">IP</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21736" x2="22359" y1="4783.4531" y2="4783.4531"/><ellipse cx="21746" cy="4794.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="21755" y="4797.6636">RESOLVER_MAX_QUERIES : enum</text><ellipse cx="21746" cy="4807.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="21755" y="4810.4683">RESOLVER_INVALID_ID : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21736" x2="22359" y1="4817.0625" y2="4817.0625"/><ellipse cx="21746" cy="4828.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="21755" y="4831.2729">get_class() const : String</text><ellipse cx="21746" cy="4840.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="21755" y="4844.0776">_get_class_namev() const : const StringName *</text><ellipse cx="21746" cy="4853.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="21755" y="4856.8823">get_class_ptr_static() : void *</text><ellipse cx="21746" cy="4866.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="21755" y="4869.687">get_class_static() : String</text><ellipse cx="21746" cy="4879.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="21755" y="4882.4917">get_parent_class_static() : String</text><ellipse cx="21746" cy="4892.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="21755" y="4895.2964">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="21746" cy="4904.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="21755" y="4908.1011">get_category_static() : String</text><ellipse cx="21746" cy="4917.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="21755" y="4920.9058">inherits_static() : String</text><ellipse cx="21746" cy="4930.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="21755" y="4933.7104">is_class(const String &amp; p_class) const : bool</text><ellipse cx="21746" cy="4943.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="21755" y="4946.5151">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="21746" cy="4956.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="21755" y="4959.3198">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="21746" cy="4968.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="21755" y="4972.1245">initialize_class() : void</text><ellipse cx="21746" cy="4981.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="21755" y="4984.9292">resolve_hostname(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address</text><ellipse cx="21746" cy="4994.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="599" x="21755" y="4997.7339">resolve_hostname_queue_item(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID</text><ellipse cx="21746" cy="5007.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="21755" y="5010.5386">get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus</text><ellipse cx="21746" cy="5020.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="21755" y="5023.3433">get_resolve_item_address(IP::ResolverID p_id) const : IP_Address</text><ellipse cx="21746" cy="5032.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="21755" y="5036.1479">get_local_addresses(List&lt;IP_Address&gt; * r_addresses) const : void</text><ellipse cx="21746" cy="5045.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="21755" y="5048.9526">get_local_interfaces(Map&lt;String,IP::Interface_Info&gt; * r_interfaces) const = 0 : void</text><ellipse cx="21746" cy="5058.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="21755" y="5061.7573">erase_resolve_item(IP::ResolverID p_id) : void</text><ellipse cx="21746" cy="5071.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="21755" y="5074.562">clear_cache(const String &amp; p_hostname = "") : void</text><ellipse cx="21746" cy="5084.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="21755" y="5087.3667">get_singleton() : IP *</text><ellipse cx="21746" cy="5096.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="76" x="21755" y="5100.1714">create() : IP *</text><ellipse cx="21746" cy="5109.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="21755" y="5112.9761">IP() : void</text><ellipse cx="21746" cy="5122.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="21755" y="5125.7808">~IP() : void</text></a><!--MD5=[572807c339726b4650e58d5aced39533]
class C_0000066148521405667716--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" target="_top" title="ProjectSettings" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" xlink:show="new" xlink:title="ProjectSettings" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="598.6016" id="C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.5;" width="1244" x="7730.5" y="1520.9531"/><ellipse cx="8300.25" cy="1536.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8303.2188,1542.5938 Q8302.6406,1542.8906 8302,1543.0313 Q8301.3594,1543.1875 8300.6563,1543.1875 Q8298.1563,1543.1875 8296.8281,1541.5469 Q8295.5156,1539.8906 8295.5156,1536.7656 Q8295.5156,1533.6406 8296.8281,1531.9844 Q8298.1563,1530.3281 8300.6563,1530.3281 Q8301.3594,1530.3281 8302,1530.4844 Q8302.6563,1530.6406 8303.2188,1530.9375 L8303.2188,1533.6563 Q8302.5938,1533.0781 8302,1532.8125 Q8301.4063,1532.5313 8300.7813,1532.5313 Q8299.4375,1532.5313 8298.75,1533.6094 Q8298.0625,1534.6719 8298.0625,1536.7656 Q8298.0625,1538.8594 8298.75,1539.9375 Q8299.4375,1541 8300.7813,1541 Q8301.4063,1541 8302,1540.7344 Q8302.5938,1540.4531 8303.2188,1539.875 L8303.2188,1542.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="8320.75" y="1541.1074">ProjectSettings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7731.5" x2="8973.5" y1="1552.9531" y2="1552.9531"/><ellipse cx="7741.5" cy="1563.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="7750.5" y="1567.1636">NO_BUILTIN_ORDER_BASE : enum</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7736.5" y="1571.7578"/><ellipse cx="7741.5" cy="1576.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="159" x="7750.5" y="1579.9683">CONFIG_VERSION : const int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7731.5" x2="8973.5" y1="1586.5625" y2="1586.5625"/><ellipse cx="7741.5" cy="1597.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="7750.5" y="1600.7729">get_class() const : String</text><ellipse cx="7741.5" cy="1610.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="7750.5" y="1613.5776">_get_class_namev() const : const StringName *</text><ellipse cx="7741.5" cy="1623.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="7750.5" y="1626.3823">get_class_ptr_static() : void *</text><ellipse cx="7741.5" cy="1635.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="7750.5" y="1639.187">get_class_static() : String</text><ellipse cx="7741.5" cy="1648.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="7750.5" y="1651.9917">get_parent_class_static() : String</text><ellipse cx="7741.5" cy="1661.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="7750.5" y="1664.7964">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="7741.5" cy="1674.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="7750.5" y="1677.6011">get_category_static() : String</text><ellipse cx="7741.5" cy="1687.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="7750.5" y="1690.4058">inherits_static() : String</text><ellipse cx="7741.5" cy="1700" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="7750.5" y="1703.2104">is_class(const String &amp; p_class) const : bool</text><ellipse cx="7741.5" cy="1712.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="7750.5" y="1716.0151">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="7741.5" cy="1725.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="7750.5" y="1728.8198">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="7741.5" cy="1738.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="7750.5" y="1741.6245">initialize_class() : void</text><ellipse cx="7741.5" cy="1751.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="7750.5" y="1754.4292">set_setting(const String &amp; p_setting, const Variant &amp; p_value) : void</text><ellipse cx="7741.5" cy="1764.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="7750.5" y="1767.2339">get_setting(const String &amp; p_setting) const : Variant</text><ellipse cx="7741.5" cy="1776.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="7750.5" y="1780.0386">has_setting(String p_var) const : bool</text><ellipse cx="7741.5" cy="1789.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="7750.5" y="1792.8433">localize_path(const String &amp; p_path) const : String</text><ellipse cx="7741.5" cy="1802.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="7750.5" y="1805.6479">globalize_path(const String &amp; p_path) const : String</text><ellipse cx="7741.5" cy="1815.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="7750.5" y="1818.4526">set_initial_value(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="7741.5" cy="1828.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="7750.5" y="1831.2573">set_restart_if_changed(const String &amp; p_name, bool p_restart) : void</text><ellipse cx="7741.5" cy="1840.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="7750.5" y="1844.062">property_can_revert(const String &amp; p_name) : bool</text><ellipse cx="7741.5" cy="1853.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="7750.5" y="1856.8667">property_get_revert(const String &amp; p_name) : Variant</text><ellipse cx="7741.5" cy="1866.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="7750.5" y="1869.6714">get_resource_path() const : String</text><ellipse cx="7741.5" cy="1879.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="192" x="7750.5" y="1882.4761">get_singleton() : ProjectSettings *</text><ellipse cx="7741.5" cy="1892.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="7750.5" y="1895.2808">clear(const String &amp; p_name) : void</text><ellipse cx="7741.5" cy="1904.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="7750.5" y="1908.0854">get_order(const String &amp; p_name) const : int</text><ellipse cx="7741.5" cy="1917.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="7750.5" y="1920.8901">set_order(const String &amp; p_name, int p_order) : void</text><ellipse cx="7741.5" cy="1930.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="7750.5" y="1933.6948">set_builtin_order(const String &amp; p_name) : void</text><ellipse cx="7741.5" cy="1943.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="7750.5" y="1946.4995">setup(const String &amp; p_path, const String &amp; p_main_pack, bool p_upwards = false) : Error</text><ellipse cx="7741.5" cy="1956.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1218" x="7750.5" y="1959.3042">save_custom(const String &amp; p_path = "", const ProjectSettings::CustomMap &amp; p_custom = CustomMap(), const Vector&lt;String&gt; &amp; p_custom_features = Vector&lt;String&gt;(), bool p_merge_with_current = true) : Error</text><ellipse cx="7741.5" cy="1968.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="7750.5" y="1972.1089">save() : Error</text><ellipse cx="7741.5" cy="1981.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="7750.5" y="1984.9136">set_custom_property_info(const String &amp; p_prop, const PropertyInfo &amp; p_info) : void</text><ellipse cx="7741.5" cy="1994.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="7750.5" y="1997.7183">get_custom_property_info() const : const Map&lt;StringName,PropertyInfo&gt; &amp;</text><ellipse cx="7741.5" cy="2007.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="7750.5" y="2010.5229">get_last_saved_time() : uint64_t</text><ellipse cx="7741.5" cy="2020.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="7750.5" y="2023.3276">get_optimizer_presets() const : Vector&lt;String&gt;</text><ellipse cx="7741.5" cy="2032.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="7750.5" y="2036.1323">get_input_presets() const : List&lt;String&gt;</text><ellipse cx="7741.5" cy="2045.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="7750.5" y="2048.937">set_disable_feature_overrides(bool p_disable) : void</text><ellipse cx="7741.5" cy="2058.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="7750.5" y="2061.7417">is_using_datapack() const : bool</text><ellipse cx="7741.5" cy="2071.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="7750.5" y="2074.5464">set_registering_order(bool p_enable) : void</text><ellipse cx="7741.5" cy="2084.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="7750.5" y="2087.3511">has_custom_feature(const String &amp; p_feature) const : bool</text><ellipse cx="7741.5" cy="2096.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="7750.5" y="2100.1558">ProjectSettings() : void</text><ellipse cx="7741.5" cy="2109.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="7750.5" y="2112.9604">~ProjectSettings() : void</text><!--MD5=[3306ef7474ee8a0f7d63514abbcbe3b8]
class C_0000535376932101028371--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" target="_top" title="Input" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" xlink:show="new" xlink:title="Input" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="854.6953" id="C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.5;" width="876" x="22495.5" y="4514.4531"/><ellipse cx="22912.75" cy="4530.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M22912.8594,4525.7969 L22911.7031,4530.875 L22914.0313,4530.875 L22912.8594,4525.7969 Z M22911.375,4523.5625 L22914.3594,4523.5625 L22917.7188,4535.9531 L22915.2656,4535.9531 L22914.5,4532.8906 L22911.2188,4532.8906 L22910.4688,4535.9531 L22908.0313,4535.9531 L22911.375,4523.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="33" x="22933.25" y="4534.6074">Input</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="22496.5" x2="23370.5" y1="4546.4531" y2="4546.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="22496.5" x2="23370.5" y1="4554.4531" y2="4554.4531"/><ellipse cx="22506.5" cy="4565.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="22515.5" y="4568.6636">get_class() const : String</text><ellipse cx="22506.5" cy="4578.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="22515.5" y="4581.4683">_get_class_namev() const : const StringName *</text><ellipse cx="22506.5" cy="4591.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="22515.5" y="4594.2729">get_class_ptr_static() : void *</text><ellipse cx="22506.5" cy="4603.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="22515.5" y="4607.0776">get_class_static() : String</text><ellipse cx="22506.5" cy="4616.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="22515.5" y="4619.8823">get_parent_class_static() : String</text><ellipse cx="22506.5" cy="4629.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="22515.5" y="4632.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="22506.5" cy="4642.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="22515.5" y="4645.4917">get_category_static() : String</text><ellipse cx="22506.5" cy="4655.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="22515.5" y="4658.2964">inherits_static() : String</text><ellipse cx="22506.5" cy="4667.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="22515.5" y="4671.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="22506.5" cy="4680.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="22515.5" y="4683.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="22506.5" cy="4693.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="22515.5" y="4696.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="22506.5" cy="4706.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="22515.5" y="4709.5151">initialize_class() : void</text><ellipse cx="22506.5" cy="4719.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="22515.5" y="4722.3198">set_mouse_mode(Input::MouseMode p_mode) : void</text><ellipse cx="22506.5" cy="4731.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="22515.5" y="4735.1245">get_mouse_mode() const : Input::MouseMode</text><ellipse cx="22506.5" cy="4744.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="22515.5" y="4747.9292">get_singleton() : Input *</text><ellipse cx="22506.5" cy="4757.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="22515.5" y="4760.7339">is_key_pressed(int p_scancode) const = 0 : bool</text><ellipse cx="22506.5" cy="4770.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="22515.5" y="4773.5386">is_mouse_button_pressed(int p_button) const = 0 : bool</text><ellipse cx="22506.5" cy="4783.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="22515.5" y="4786.3433">is_joy_button_pressed(int p_device, int p_button) const = 0 : bool</text><ellipse cx="22506.5" cy="4795.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="22515.5" y="4799.1479">is_action_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="4808.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="22515.5" y="4811.9526">is_action_just_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="4821.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="22515.5" y="4824.7573">is_action_just_released(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="22506.5" cy="4834.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="378" x="22515.5" y="4837.562">get_action_strength(const StringName &amp; p_action) const = 0 : float</text><ellipse cx="22506.5" cy="4847.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="22515.5" y="4850.3667">get_joy_axis(int p_device, int p_axis) const = 0 : float</text><ellipse cx="22506.5" cy="4859.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="204" x="22515.5" y="4863.1714">get_joy_name(int p_idx) = 0 : String</text><ellipse cx="22506.5" cy="4872.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="208" x="22515.5" y="4875.9761">get_connected_joypads() = 0 : Array</text><ellipse cx="22506.5" cy="4885.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="22515.5" y="4888.7808">joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void</text><ellipse cx="22506.5" cy="4898.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="448" x="22515.5" y="4901.5854">add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void</text><ellipse cx="22506.5" cy="4911.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="22515.5" y="4914.3901">remove_joy_mapping(String p_guid) = 0 : void</text><ellipse cx="22506.5" cy="4923.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="210" x="22515.5" y="4927.1948">is_joy_known(int p_device) = 0 : bool</text><ellipse cx="22506.5" cy="4936.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="22515.5" y="4939.9995">get_joy_guid(int p_device) const = 0 : String</text><ellipse cx="22506.5" cy="4949.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="22515.5" y="4952.8042">get_joy_vibration_strength(int p_device) = 0 : Vector2</text><ellipse cx="22506.5" cy="4962.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="4965.6089">get_joy_vibration_duration(int p_device) = 0 : float</text><ellipse cx="22506.5" cy="4975.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="22515.5" y="4978.4136">get_joy_vibration_timestamp(int p_device) = 0 : uint64_t</text><ellipse cx="22506.5" cy="4988.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="659" x="22515.5" y="4991.2183">start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void</text><ellipse cx="22506.5" cy="5000.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="22515.5" y="5004.0229">stop_joy_vibration(int p_device) = 0 : void</text><ellipse cx="22506.5" cy="5013.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="22515.5" y="5016.8276">vibrate_handheld(int p_duration_ms = 500) = 0 : void</text><ellipse cx="22506.5" cy="5026.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="225" x="22515.5" y="5029.6323">get_mouse_position() const = 0 : Point2</text><ellipse cx="22506.5" cy="5039.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="241" x="22515.5" y="5042.437">get_last_mouse_speed() const = 0 : Point2</text><ellipse cx="22506.5" cy="5052.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="22515.5" y="5055.2417">get_mouse_button_mask() const = 0 : int</text><ellipse cx="22506.5" cy="5064.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="22515.5" y="5068.0464">warp_mouse_position(const Vector2 &amp; p_to) = 0 : void</text><ellipse cx="22506.5" cy="5077.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="598" x="22515.5" y="5080.8511">warp_mouse_motion(const Ref&lt;InputEventMouseMotion&gt; &amp; p_motion, const Rect2 &amp; p_rect) = 0 : Point2i</text><ellipse cx="22506.5" cy="5090.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="186" x="22515.5" y="5093.6558">get_gravity() const = 0 : Vector3</text><ellipse cx="22506.5" cy="5103.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="22515.5" y="5106.4604">get_accelerometer() const = 0 : Vector3</text><ellipse cx="22506.5" cy="5116.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="22515.5" y="5119.2651">get_magnetometer() const = 0 : Vector3</text><ellipse cx="22506.5" cy="5128.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="22515.5" y="5132.0698">get_gyroscope() const = 0 : Vector3</text><ellipse cx="22506.5" cy="5141.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="22515.5" y="5144.8745">action_press(const StringName &amp; p_action, float p_strength = 1.f) = 0 : void</text><ellipse cx="22506.5" cy="5154.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="314" x="22515.5" y="5157.6792">action_release(const StringName &amp; p_action) = 0 : void</text><ellipse cx="22506.5" cy="5167.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="22515.5" y="5170.4839">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="22506.5" cy="5180.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="5183.2886">is_emulating_touch_from_mouse() const = 0 : bool</text><ellipse cx="22506.5" cy="5192.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="22515.5" y="5196.0933">is_emulating_mouse_from_touch() const = 0 : bool</text><ellipse cx="22506.5" cy="5205.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="22515.5" y="5208.8979">get_default_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="22506.5" cy="5218.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="22515.5" y="5221.7026">set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void</text><ellipse cx="22506.5" cy="5231.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="22515.5" y="5234.5073">get_current_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="22506.5" cy="5244.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="850" x="22515.5" y="5247.312">set_custom_mouse_cursor(const RES &amp; p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 &amp; p_hotspot = Vector2()) = 0 : void</text><ellipse cx="22506.5" cy="5256.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="22515.5" y="5260.1167">get_joy_button_string(int p_button) = 0 : String</text><ellipse cx="22506.5" cy="5269.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="22515.5" y="5272.9214">get_joy_axis_string(int p_axis) = 0 : String</text><ellipse cx="22506.5" cy="5282.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="22515.5" y="5285.7261">get_joy_button_index_from_string(String p_button) = 0 : int</text><ellipse cx="22506.5" cy="5295.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="22515.5" y="5298.5308">get_joy_axis_index_from_string(String p_axis) = 0 : int</text><ellipse cx="22506.5" cy="5308.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="365" x="22515.5" y="5311.3354">parse_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="22506.5" cy="5320.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="22515.5" y="5324.1401">accumulate_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="22506.5" cy="5333.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="22515.5" y="5336.9448">flush_accumulated_events() = 0 : void</text><ellipse cx="22506.5" cy="5346.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="22515.5" y="5349.7495">set_use_accumulated_input(bool p_enable) = 0 : void</text><ellipse cx="22506.5" cy="5359.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="22515.5" y="5362.5542">Input() : void</text></a><!--MD5=[e6941b9b1ee3163b45cd73ecd30a9f2c]
class C_0001370497546359815893--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" target="_top" title="AudioServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" xlink:show="new" xlink:title="AudioServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="1085.1797" id="C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.5;" width="560" x="17489.5" y="4399.4531"/><ellipse cx="17727.75" cy="4415.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M17730.7188,4421.0938 Q17730.1406,4421.3906 17729.5,4421.5313 Q17728.8594,4421.6875 17728.1563,4421.6875 Q17725.6563,4421.6875 17724.3281,4420.0469 Q17723.0156,4418.3906 17723.0156,4415.2656 Q17723.0156,4412.1406 17724.3281,4410.4844 Q17725.6563,4408.8281 17728.1563,4408.8281 Q17728.8594,4408.8281 17729.5,4408.9844 Q17730.1563,4409.1406 17730.7188,4409.4375 L17730.7188,4412.1563 Q17730.0938,4411.5781 17729.5,4411.3125 Q17728.9063,4411.0313 17728.2813,4411.0313 Q17726.9375,4411.0313 17726.25,4412.1094 Q17725.5625,4413.1719 17725.5625,4415.2656 Q17725.5625,4417.3594 17726.25,4418.4375 Q17726.9375,4419.5 17728.2813,4419.5 Q17728.9063,4419.5 17729.5,4419.2344 Q17730.0938,4418.9531 17730.7188,4418.375 L17730.7188,4421.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="17748.25" y="4419.6074">AudioServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="17490.5" x2="18048.5" y1="4431.4531" y2="4431.4531"/><ellipse cx="17500.5" cy="4442.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="17509.5" y="4445.6636">AUDIO_DATA_INVALID_ID : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="17490.5" x2="18048.5" y1="4452.2578" y2="4452.2578"/><ellipse cx="17500.5" cy="4463.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="17509.5" y="4466.4683">get_class() const : String</text><ellipse cx="17500.5" cy="4476.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="17509.5" y="4479.2729">_get_class_namev() const : const StringName *</text><ellipse cx="17500.5" cy="4488.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="17509.5" y="4492.0776">get_class_ptr_static() : void *</text><ellipse cx="17500.5" cy="4501.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="17509.5" y="4504.8823">get_class_static() : String</text><ellipse cx="17500.5" cy="4514.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="17509.5" y="4517.687">get_parent_class_static() : String</text><ellipse cx="17500.5" cy="4527.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="17509.5" y="4530.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="17500.5" cy="4540.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="17509.5" y="4543.2964">get_category_static() : String</text><ellipse cx="17500.5" cy="4552.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="17509.5" y="4556.1011">inherits_static() : String</text><ellipse cx="17500.5" cy="4565.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="17509.5" y="4568.9058">is_class(const String &amp; p_class) const : bool</text><ellipse cx="17500.5" cy="4578.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="17509.5" y="4581.7104">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="17500.5" cy="4591.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="17509.5" y="4594.5151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="17500.5" cy="4604.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="17509.5" y="4607.3198">initialize_class() : void</text><ellipse cx="17500.5" cy="4616.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="17509.5" y="4620.1245">get_channel_count() const : int</text><ellipse cx="17500.5" cy="4629.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="17509.5" y="4632.9292">thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool</text><ellipse cx="17500.5" cy="4642.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="17509.5" y="4645.7339">thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *</text><ellipse cx="17500.5" cy="4655.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="17509.5" y="4658.5386">thread_get_mix_buffer_size() const : int</text><ellipse cx="17500.5" cy="4668.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="17509.5" y="4671.3433">thread_find_bus_index(const StringName &amp; p_name) : int</text><ellipse cx="17500.5" cy="4680.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="17509.5" y="4684.1479">set_bus_count(int p_count) : void</text><ellipse cx="17500.5" cy="4693.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="17509.5" y="4696.9526">get_bus_count() const : int</text><ellipse cx="17500.5" cy="4706.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="17509.5" y="4709.7573">remove_bus(int p_index) : void</text><ellipse cx="17500.5" cy="4719.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="17509.5" y="4722.562">add_bus(int p_at_pos = -1) : void</text><ellipse cx="17500.5" cy="4732.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="17509.5" y="4735.3667">move_bus(int p_bus, int p_to_pos) : void</text><ellipse cx="17500.5" cy="4744.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="17509.5" y="4748.1714">set_bus_name(int p_bus, const String &amp; p_name) : void</text><ellipse cx="17500.5" cy="4757.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="17509.5" y="4760.9761">get_bus_name(int p_bus) const : String</text><ellipse cx="17500.5" cy="4770.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="17509.5" y="4773.7808">get_bus_index(const StringName &amp; p_bus_name) const : int</text><ellipse cx="17500.5" cy="4783.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="17509.5" y="4786.5854">get_bus_channels(int p_bus) const : int</text><ellipse cx="17500.5" cy="4796.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="17509.5" y="4799.3901">set_bus_volume_db(int p_bus, float p_volume_db) : void</text><ellipse cx="17500.5" cy="4808.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="17509.5" y="4812.1948">get_bus_volume_db(int p_bus) const : float</text><ellipse cx="17500.5" cy="4821.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="17509.5" y="4824.9995">set_bus_send(int p_bus, const StringName &amp; p_send) : void</text><ellipse cx="17500.5" cy="4834.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="17509.5" y="4837.8042">get_bus_send(int p_bus) const : StringName</text><ellipse cx="17500.5" cy="4847.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="17509.5" y="4850.6089">set_bus_solo(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="4860.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="17509.5" y="4863.4136">is_bus_solo(int p_bus) const : bool</text><ellipse cx="17500.5" cy="4873.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="17509.5" y="4876.2183">set_bus_mute(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="4885.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="17509.5" y="4889.0229">is_bus_mute(int p_bus) const : bool</text><ellipse cx="17500.5" cy="4898.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="17509.5" y="4901.8276">set_bus_bypass_effects(int p_bus, bool p_enable) : void</text><ellipse cx="17500.5" cy="4911.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="17509.5" y="4914.6323">is_bus_bypassing_effects(int p_bus) const : bool</text><ellipse cx="17500.5" cy="4924.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="17509.5" y="4927.437">add_bus_effect(int p_bus, const Ref&lt;AudioEffect&gt; &amp; p_effect, int p_at_pos = -1) : void</text><ellipse cx="17500.5" cy="4937.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="17509.5" y="4940.2417">remove_bus_effect(int p_bus, int p_effect) : void</text><ellipse cx="17500.5" cy="4949.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="17509.5" y="4953.0464">get_bus_effect_count(int p_bus) : int</text><ellipse cx="17500.5" cy="4962.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="17509.5" y="4965.8511">get_bus_effect(int p_bus, int p_effect) : Ref&lt;AudioEffect&gt;</text><ellipse cx="17500.5" cy="4975.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="534" x="17509.5" y="4978.6558">get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref&lt;AudioEffectInstance&gt;</text><ellipse cx="17500.5" cy="4988.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="17509.5" y="4991.4604">swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void</text><ellipse cx="17500.5" cy="5001.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="17509.5" y="5004.2651">set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void</text><ellipse cx="17500.5" cy="5013.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="17509.5" y="5017.0698">is_bus_effect_enabled(int p_bus, int p_effect) const : bool</text><ellipse cx="17500.5" cy="5026.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="17509.5" y="5029.8745">get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float</text><ellipse cx="17500.5" cy="5039.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="17509.5" y="5042.6792">get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float</text><ellipse cx="17500.5" cy="5052.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="17509.5" y="5055.4839">is_bus_channel_active(int p_bus, int p_channel) const : bool</text><ellipse cx="17500.5" cy="5065.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="17509.5" y="5068.2886">set_global_rate_scale(float p_scale) : void</text><ellipse cx="17500.5" cy="5077.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="17509.5" y="5081.0933">get_global_rate_scale() const : float</text><ellipse cx="17500.5" cy="5090.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="17509.5" y="5093.8979">init() : void</text><ellipse cx="17500.5" cy="5103.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="17509.5" y="5106.7026">finish() : void</text><ellipse cx="17500.5" cy="5116.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="17509.5" y="5119.5073">update() : void</text><ellipse cx="17500.5" cy="5129.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="17509.5" y="5132.312">load_default_bus_layout() : void</text><ellipse cx="17500.5" cy="5141.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="17509.5" y="5145.1167">lock() : void</text><ellipse cx="17500.5" cy="5154.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="17509.5" y="5157.9214">unlock() : void</text><ellipse cx="17500.5" cy="5167.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="17509.5" y="5170.7261">get_speaker_mode() const : AudioServer::SpeakerMode</text><ellipse cx="17500.5" cy="5180.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="17509.5" y="5183.5308">get_mix_rate() const : float</text><ellipse cx="17500.5" cy="5193.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="17509.5" y="5196.3354">read_output_peak_db() const : float</text><ellipse cx="17500.5" cy="5205.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="175" x="17509.5" y="5209.1401">get_singleton() : AudioServer *</text><ellipse cx="17500.5" cy="5218.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="17509.5" y="5221.9448">get_output_latency() const : double</text><ellipse cx="17500.5" cy="5231.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="17509.5" y="5234.7495">get_time_to_next_mix() const : double</text><ellipse cx="17500.5" cy="5244.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="17509.5" y="5247.5542">get_time_since_last_mix() const : double</text><ellipse cx="17500.5" cy="5257.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="17509.5" y="5260.3589">audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *</text><ellipse cx="17500.5" cy="5269.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="17509.5" y="5273.1636">audio_data_free(void * p_data) : void</text><ellipse cx="17500.5" cy="5282.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="17509.5" y="5285.9683">audio_data_get_total_memory_usage() const : size_t</text><ellipse cx="17500.5" cy="5295.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="17509.5" y="5298.7729">audio_data_get_max_memory_usage() const : size_t</text><ellipse cx="17500.5" cy="5308.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="17509.5" y="5311.5776">add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5321.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="17509.5" y="5324.3823">remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5333.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="486" x="17509.5" y="5337.187">add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5346.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="17509.5" y="5349.9917">remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="17500.5" cy="5359.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="17509.5" y="5362.7964">set_bus_layout(const Ref&lt;AudioBusLayout&gt; &amp; p_bus_layout) : void</text><ellipse cx="17500.5" cy="5372.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="17509.5" y="5375.6011">generate_bus_layout() const : Ref&lt;AudioBusLayout&gt;</text><ellipse cx="17500.5" cy="5385.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="17509.5" y="5388.4058">get_device_list() : Array</text><ellipse cx="17500.5" cy="5398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="17509.5" y="5401.2104">get_device() : String</text><ellipse cx="17500.5" cy="5410.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="17509.5" y="5414.0151">set_device(String device) : void</text><ellipse cx="17500.5" cy="5423.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="17509.5" y="5426.8198">capture_get_device_list() : Array</text><ellipse cx="17500.5" cy="5436.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="17509.5" y="5439.6245">capture_get_device() : String</text><ellipse cx="17500.5" cy="5449.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="17509.5" y="5452.4292">capture_set_device(const String &amp; p_name) : void</text><ellipse cx="17500.5" cy="5462.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="17509.5" y="5465.2339">AudioServer() : void</text><ellipse cx="17500.5" cy="5474.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="17509.5" y="5478.0386">~AudioServer() : void</text></a><!--MD5=[7f9ee7589f5b66fe26bf327ebbd73d28]
class C_0001701907280759632930--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" target="_top" title="CameraServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" xlink:show="new" xlink:title="CameraServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="380.9219" id="C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="20143" y="4751.4531"/><ellipse cx="20295.25" cy="4767.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M20298.2188,4773.0938 Q20297.6406,4773.3906 20297,4773.5313 Q20296.3594,4773.6875 20295.6563,4773.6875 Q20293.1563,4773.6875 20291.8281,4772.0469 Q20290.5156,4770.3906 20290.5156,4767.2656 Q20290.5156,4764.1406 20291.8281,4762.4844 Q20293.1563,4760.8281 20295.6563,4760.8281 Q20296.3594,4760.8281 20297,4760.9844 Q20297.6563,4761.1406 20298.2188,4761.4375 L20298.2188,4764.1563 Q20297.5938,4763.5781 20297,4763.3125 Q20296.4063,4763.0313 20295.7813,4763.0313 Q20294.4375,4763.0313 20293.75,4764.1094 Q20293.0625,4765.1719 20293.0625,4767.2656 Q20293.0625,4769.3594 20293.75,4770.4375 Q20294.4375,4771.5 20295.7813,4771.5 Q20296.4063,4771.5 20297,4771.2344 Q20297.5938,4770.9531 20298.2188,4770.375 L20298.2188,4773.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="20315.75" y="4771.6074">CameraServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20144" x2="20543" y1="4783.4531" y2="4783.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="20144" x2="20543" y1="4791.4531" y2="4791.4531"/><ellipse cx="20154" cy="4802.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="20163" y="4805.6636">get_class() const : String</text><ellipse cx="20154" cy="4815.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="20163" y="4818.4683">_get_class_namev() const : const StringName *</text><ellipse cx="20154" cy="4828.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="20163" y="4831.2729">get_class_ptr_static() : void *</text><ellipse cx="20154" cy="4840.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="20163" y="4844.0776">get_class_static() : String</text><ellipse cx="20154" cy="4853.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="20163" y="4856.8823">get_parent_class_static() : String</text><ellipse cx="20154" cy="4866.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="20163" y="4869.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="20154" cy="4879.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="20163" y="4882.4917">get_category_static() : String</text><ellipse cx="20154" cy="4892.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="20163" y="4895.2964">inherits_static() : String</text><ellipse cx="20154" cy="4904.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="20163" y="4908.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="20154" cy="4917.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="20163" y="4920.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="20154" cy="4930.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="20163" y="4933.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="20154" cy="4943.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="20163" y="4946.5151">initialize_class() : void</text><ellipse cx="20154" cy="4956.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="20163" y="4959.3198">get_singleton() : CameraServer *</text><ellipse cx="20154" cy="4968.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="20163" y="4972.1245">create() : CameraServer *</text><ellipse cx="20154" cy="4981.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="20163" y="4984.9292">get_free_id() : int</text><ellipse cx="20154" cy="4994.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="20163" y="4997.7339">get_feed_index(int p_id) : int</text><ellipse cx="20154" cy="5007.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="20163" y="5010.5386">get_feed_by_id(int p_id) : Ref&lt;CameraFeed&gt;</text><ellipse cx="20154" cy="5020.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="20163" y="5023.3433">add_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><ellipse cx="20154" cy="5032.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="20163" y="5036.1479">remove_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><ellipse cx="20154" cy="5045.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="20163" y="5048.9526">get_feed(int p_index) : Ref&lt;CameraFeed&gt;</text><ellipse cx="20154" cy="5058.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="20163" y="5061.7573">get_feed_count() : int</text><ellipse cx="20154" cy="5071.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="20163" y="5074.562">get_feeds() : Array</text><ellipse cx="20154" cy="5084.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="20163" y="5087.3667">feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID</text><ellipse cx="20154" cy="5096.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="20163" y="5100.1714">CameraServer() : void</text><ellipse cx="20154" cy="5109.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="20163" y="5112.9761">~CameraServer() : void</text><ellipse cx="20154" cy="5122.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="144" x="20163" y="5125.7808">make_default&lt;T&gt;() : void</text></a><!--MD5=[5316dbe070bc4024b413849b0399fc2e]
class C_0001589464385186808769--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" target="_top" title="VisualServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" xlink:show="new" xlink:title="VisualServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="5489.9922" id="C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.5;" width="2566" x="1522.5" y="2196.9531"/><ellipse cx="2763.25" cy="2212.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2763.3594,2208.2969 L2762.2031,2213.375 L2764.5313,2213.375 L2763.3594,2208.2969 Z M2761.875,2206.0625 L2764.8594,2206.0625 L2768.2188,2218.4531 L2765.7656,2218.4531 L2765,2215.3906 L2761.7188,2215.3906 L2760.9688,2218.4531 L2758.5313,2218.4531 L2761.875,2206.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="2783.75" y="2217.1074">VisualServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1523.5" x2="4087.5" y1="2228.9531" y2="2228.9531"/><ellipse cx="1533.5" cy="2239.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1542.5" y="2243.1636">NO_INDEX_ARRAY : enum</text><ellipse cx="1533.5" cy="2252.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1542.5" y="2255.9683">ARRAY_WEIGHTS_SIZE : enum</text><ellipse cx="1533.5" cy="2265.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1542.5" y="2268.7729">CANVAS_ITEM_Z_MIN : enum</text><ellipse cx="1533.5" cy="2278.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1542.5" y="2281.5776">CANVAS_ITEM_Z_MAX : enum</text><ellipse cx="1533.5" cy="2291.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="2294.3823">MAX_GLOW_LEVELS : enum</text><ellipse cx="1533.5" cy="2303.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="1542.5" y="2307.187">MAX_CURSORS : enum</text><ellipse cx="1533.5" cy="2316.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="1542.5" y="2319.9917">MATERIAL_RENDER_PRIORITY_MIN : enum</text><ellipse cx="1533.5" cy="2329.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="1542.5" y="2332.7964">MATERIAL_RENDER_PRIORITY_MAX : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1523.5" x2="4087.5" y1="2339.3906" y2="2339.3906"/><ellipse cx="1533.5" cy="2350.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1542.5" y="2353.6011">get_class() const : String</text><ellipse cx="1533.5" cy="2363.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1542.5" y="2366.4058">_get_class_namev() const : const StringName *</text><ellipse cx="1533.5" cy="2376" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="1542.5" y="2379.2104">get_class_ptr_static() : void *</text><ellipse cx="1533.5" cy="2388.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="1542.5" y="2392.0151">get_class_static() : String</text><ellipse cx="1533.5" cy="2401.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="1542.5" y="2404.8198">get_parent_class_static() : String</text><ellipse cx="1533.5" cy="2414.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="1542.5" y="2417.6245">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="1533.5" cy="2427.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="1542.5" y="2430.4292">get_category_static() : String</text><ellipse cx="1533.5" cy="2440.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="1542.5" y="2443.2339">inherits_static() : String</text><ellipse cx="1533.5" cy="2452.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1542.5" y="2456.0386">is_class(const String &amp; p_class) const : bool</text><ellipse cx="1533.5" cy="2465.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1542.5" y="2468.8433">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="1533.5" cy="2478.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1542.5" y="2481.6479">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="1533.5" cy="2491.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="1542.5" y="2494.4526">initialize_class() : void</text><ellipse cx="1533.5" cy="2504.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="178" x="1542.5" y="2507.2573">get_singleton() : VisualServer *</text><ellipse cx="1533.5" cy="2516.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="138" x="1542.5" y="2520.062">create() : VisualServer *</text><ellipse cx="1533.5" cy="2529.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="1542.5" y="2532.8667">texture_create() = 0 : RID</text><ellipse cx="1533.5" cy="2542.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="628" x="1542.5" y="2545.6714">texture_create_from_image(const Ref&lt;Image&gt; &amp; p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID</text><ellipse cx="1533.5" cy="2555.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1082" x="1542.5" y="2558.4761">texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void</text><ellipse cx="1533.5" cy="2568.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="1542.5" y="2571.2808">texture_set_data(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int p_layer = 0) = 0 : void</text><ellipse cx="1533.5" cy="2580.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="974" x="1542.5" y="2584.0854">texture_set_data_partial(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void</text><ellipse cx="1533.5" cy="2593.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="1542.5" y="2596.8901">texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref&lt;Image&gt;</text><ellipse cx="1533.5" cy="2606.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="1542.5" y="2609.6948">texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void</text><ellipse cx="1533.5" cy="2619.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="1542.5" y="2622.4995">texture_get_flags(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="2632.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="2635.3042">texture_get_format(RID p_texture) const = 0 : Image::Format</text><ellipse cx="1533.5" cy="2644.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="2648.1089">texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType</text><ellipse cx="1533.5" cy="2657.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="2660.9136">texture_get_texid(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="2670.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="301" x="1542.5" y="2673.7183">texture_get_width(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="2683.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="1542.5" y="2686.5229">texture_get_height(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="2696.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="1542.5" y="2699.3276">texture_get_depth(RID p_texture) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="2708.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="1542.5" y="2712.1323">texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void</text><ellipse cx="1533.5" cy="2721.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="2724.937">texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void</text><ellipse cx="1533.5" cy="2734.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="2737.7417">texture_set_path(RID p_texture, const String &amp; p_path) = 0 : void</text><ellipse cx="1533.5" cy="2747.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="1542.5" y="2750.5464">texture_get_path(RID p_texture) const = 0 : String</text><ellipse cx="1533.5" cy="2760.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="1542.5" y="2763.3511">texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2772.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="707" x="1542.5" y="2776.1558">texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="2785.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="718" x="1542.5" y="2788.9604">texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="2798.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="733" x="1542.5" y="2801.7651">texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="2811.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="2814.5698">texture_debug_usage(List&lt;VisualServer::TextureInfo&gt; * r_info) = 0 : void</text><ellipse cx="1533.5" cy="2824.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1542.5" y="2827.3745">_texture_debug_usage_bind() : Array</text><ellipse cx="1533.5" cy="2836.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="275" x="1542.5" y="2840.1792">textures_keep_original(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2849.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="1542.5" y="2852.9839">texture_set_proxy(RID p_proxy, RID p_base) = 0 : void</text><ellipse cx="1533.5" cy="2862.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="1542.5" y="2865.7886">texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="2875.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="124" x="1542.5" y="2878.5933">sky_create() = 0 : RID</text><ellipse cx="1533.5" cy="2888.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="1542.5" y="2891.3979">sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void</text><ellipse cx="1533.5" cy="2900.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="144" x="1542.5" y="2904.2026">shader_create() = 0 : RID</text><ellipse cx="1533.5" cy="2913.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="2917.0073">shader_set_code(RID p_shader, const String &amp; p_code) = 0 : void</text><ellipse cx="1533.5" cy="2926.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="1542.5" y="2929.812">shader_get_code(RID p_shader) const = 0 : String</text><ellipse cx="1533.5" cy="2939.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="506" x="1542.5" y="2942.6167">shader_get_param_list(RID p_shader, List&lt;PropertyInfo&gt; * p_param_list) const = 0 : void</text><ellipse cx="1533.5" cy="2952.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1542.5" y="2955.4214">_shader_get_param_list_bind(RID p_shader) const : Array</text><ellipse cx="1533.5" cy="2965.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="1542.5" y="2968.2261">shader_set_default_texture_param(RID p_shader, const StringName &amp; p_name, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="2977.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="1542.5" y="2981.0308">shader_get_default_texture_param(RID p_shader, const StringName &amp; p_name) const = 0 : RID</text><ellipse cx="1533.5" cy="2990.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="437" x="1542.5" y="2993.8354">shader_add_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="1533.5" cy="3003.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="498" x="1542.5" y="3006.6401">shader_get_custom_defines(RID p_shader, Vector&lt;String&gt; * p_defines) const = 0 : void</text><ellipse cx="1533.5" cy="3016.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="3019.4448">shader_remove_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="1533.5" cy="3029.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="3032.2495">material_create() = 0 : RID</text><ellipse cx="1533.5" cy="3041.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="1542.5" y="3045.0542">material_set_shader(RID p_shader_material, RID p_shader) = 0 : void</text><ellipse cx="1533.5" cy="3054.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="1542.5" y="3057.8589">material_get_shader(RID p_shader_material) const = 0 : RID</text><ellipse cx="1533.5" cy="3067.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="1542.5" y="3070.6636">material_set_param(RID p_material, const StringName &amp; p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="1533.5" cy="3080.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="1542.5" y="3083.4683">material_get_param(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="1533.5" cy="3093.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="536" x="1542.5" y="3096.2729">material_get_param_default(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="1533.5" cy="3105.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="3109.0776">material_set_render_priority(RID p_material, int priority) = 0 : void</text><ellipse cx="1533.5" cy="3118.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="1542.5" y="3121.8823">material_set_line_width(RID p_material, float p_width) = 0 : void</text><ellipse cx="1533.5" cy="3131.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="406" x="1542.5" y="3134.687">material_set_next_pass(RID p_material, RID p_next_material) = 0 : void</text><ellipse cx="1533.5" cy="3144.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="136" x="1542.5" y="3147.4917">mesh_create() = 0 : RID</text><ellipse cx="1533.5" cy="3157.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="1542.5" y="3160.2964">mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t</text><ellipse cx="1533.5" cy="3169.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="1542.5" y="3173.1011">mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t</text><ellipse cx="1533.5" cy="3182.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="748" x="1542.5" y="3185.9058">mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t</text><ellipse cx="1533.5" cy="3195.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1250" x="1542.5" y="3198.7104">mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array &amp; p_arrays, const Array &amp; p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void</text><ellipse cx="1533.5" cy="3208.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2272" x="1542.5" y="3211.5151">mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector&lt;uint8_t&gt; &amp; p_array, int p_vertex_count, const PoolVector&lt;uint8_t&gt; &amp; p_index_array, int p_index_count, const AABB &amp; p_aabb, const Vector&lt;PoolVector&lt;uint8_t&gt;&gt; &amp; p_blend_shapes = Vector&lt;PoolVector&lt;uint8_t&gt; &gt;(), const Vector&lt;AABB&gt; &amp; p_bone_aabbs = Vector&lt;AABB&gt;()) = 0 : void</text><ellipse cx="1533.5" cy="3221.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="3224.3198">mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void</text><ellipse cx="1533.5" cy="3233.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="1542.5" y="3237.1245">mesh_get_blend_shape_count(RID p_mesh) const = 0 : int</text><ellipse cx="1533.5" cy="3246.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="1542.5" y="3249.9292">mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="3259.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="492" x="1542.5" y="3262.7339">mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode</text><ellipse cx="1533.5" cy="3272.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="667" x="1542.5" y="3275.5386">mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector&lt;uint8_t&gt; &amp; p_data) = 0 : void</text><ellipse cx="1533.5" cy="3285.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="1542.5" y="3288.3433">mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="3297.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="3301.1479">mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID</text><ellipse cx="1533.5" cy="3310.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="3313.9526">mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="1533.5" cy="3323.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="1542.5" y="3326.7573">mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="1533.5" cy="3336.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="1542.5" y="3339.562">mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="3349.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="520" x="1542.5" y="3352.3667">mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="3361.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="3365.1714">mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="3374.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="3377.9761">mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="3387.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="3390.7808">mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t</text><ellipse cx="1533.5" cy="3400.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="1542.5" y="3403.5854">mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType</text><ellipse cx="1533.5" cy="3413.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="1542.5" y="3416.3901">mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB</text><ellipse cx="1533.5" cy="3425.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="1542.5" y="3429.1948">mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector&lt;PoolVector&lt;uint8_t&gt;&gt;</text><ellipse cx="1533.5" cy="3438.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="1542.5" y="3441.9995">mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector&lt;AABB&gt;</text><ellipse cx="1533.5" cy="3451.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="1542.5" y="3454.8042">_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array</text><ellipse cx="1533.5" cy="3464.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="1542.5" y="3467.6089">mesh_remove_surface(RID p_mesh, int p_index) = 0 : void</text><ellipse cx="1533.5" cy="3477.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="3480.4136">mesh_get_surface_count(RID p_mesh) const = 0 : int</text><ellipse cx="1533.5" cy="3490.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="402" x="1542.5" y="3493.2183">mesh_set_custom_aabb(RID p_mesh, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="1533.5" cy="3502.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="1542.5" y="3506.0229">mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB</text><ellipse cx="1533.5" cy="3515.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="1542.5" y="3518.8276">mesh_clear(RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="3528.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="1542.5" y="3531.6323">multimesh_create() = 0 : RID</text><ellipse cx="1533.5" cy="3541.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1579" x="1542.5" y="3544.437">multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void</text><ellipse cx="1533.5" cy="3554.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="1542.5" y="3557.2417">multimesh_get_instance_count(RID p_multimesh) const = 0 : int</text><ellipse cx="1533.5" cy="3566.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="3570.0464">multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="3579.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="1542.5" y="3582.8511">multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="3592.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="652" x="1542.5" y="3595.6558">multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="3605.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="1542.5" y="3608.4604">multimesh_instance_set_color(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3618.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="576" x="1542.5" y="3621.2651">multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3630.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="312" x="1542.5" y="3634.0698">multimesh_get_mesh(RID p_multimesh) const = 0 : RID</text><ellipse cx="1533.5" cy="3643.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="1542.5" y="3646.8745">multimesh_get_aabb(RID p_multimesh) const = 0 : AABB</text><ellipse cx="1533.5" cy="3656.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="1542.5" y="3659.6792">multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform</text><ellipse cx="1533.5" cy="3669.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="1542.5" y="3672.4839">multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D</text><ellipse cx="1533.5" cy="3682.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="1542.5" y="3685.2886">multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="1533.5" cy="3694.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="3698.0933">multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="1533.5" cy="3707.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="537" x="1542.5" y="3710.8979">multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector&lt;float&gt; &amp; p_array) = 0 : void</text><ellipse cx="1533.5" cy="3720.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="421" x="1542.5" y="3723.7026">multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void</text><ellipse cx="1533.5" cy="3733.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="1542.5" y="3736.5073">multimesh_get_visible_instances(RID p_multimesh) const = 0 : int</text><ellipse cx="1533.5" cy="3746.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="1542.5" y="3749.312">immediate_create() = 0 : RID</text><ellipse cx="1533.5" cy="3758.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="629" x="1542.5" y="3762.1167">immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="3771.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="1542.5" y="3774.9214">immediate_vertex(RID p_immediate, const Vector3 &amp; p_vertex) = 0 : void</text><ellipse cx="1533.5" cy="3784.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="1542.5" y="3787.7261">immediate_vertex_2d(RID p_immediate, const Vector2 &amp; p_vertex) : void</text><ellipse cx="1533.5" cy="3797.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="1542.5" y="3800.5308">immediate_normal(RID p_immediate, const Vector3 &amp; p_normal) = 0 : void</text><ellipse cx="1533.5" cy="3810.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="419" x="1542.5" y="3813.3354">immediate_tangent(RID p_immediate, const Plane &amp; p_tangent) = 0 : void</text><ellipse cx="1533.5" cy="3822.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="1542.5" y="3826.1401">immediate_color(RID p_immediate, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="3835.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="3838.9448">immediate_uv(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="1533.5" cy="3848.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="1542.5" y="3851.7495">immediate_uv2(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="1533.5" cy="3861.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="251" x="1542.5" y="3864.5542">immediate_end(RID p_immediate) = 0 : void</text><ellipse cx="1533.5" cy="3874.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="1542.5" y="3877.3589">immediate_clear(RID p_immediate) = 0 : void</text><ellipse cx="1533.5" cy="3886.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="1542.5" y="3890.1636">immediate_set_material(RID p_immediate, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="3899.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="1542.5" y="3902.9683">immediate_get_material(RID p_immediate) const = 0 : RID</text><ellipse cx="1533.5" cy="3912.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="3915.7729">skeleton_create() = 0 : RID</text><ellipse cx="1533.5" cy="3925.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="1542.5" y="3928.5776">skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void</text><ellipse cx="1533.5" cy="3938.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="3941.3823">skeleton_get_bone_count(RID p_skeleton) const = 0 : int</text><ellipse cx="1533.5" cy="3950.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="1542.5" y="3954.187">skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="3963.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="3966.9917">skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform</text><ellipse cx="1533.5" cy="3976.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="606" x="1542.5" y="3979.7964">skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="3989.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="3992.6011">skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D</text><ellipse cx="1533.5" cy="4002.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="1542.5" y="4005.4058">skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D &amp; p_base_transform) = 0 : void</text><ellipse cx="1533.5" cy="4015" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="1542.5" y="4018.2104">directional_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="4027.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="1542.5" y="4031.0151">omni_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="4040.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="159" x="1542.5" y="4043.8198">spot_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="4053.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="1542.5" y="4056.6245">light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="4066.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="1542.5" y="4069.4292">light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void</text><ellipse cx="1533.5" cy="4079.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="318" x="1542.5" y="4082.2339">light_set_shadow(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="4091.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="1542.5" y="4095.0386">light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="4104.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="4107.8433">light_set_projector(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="4117.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="4120.6479">light_set_negative(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4130.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="1542.5" y="4133.4526">light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void</text><ellipse cx="1533.5" cy="4143.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="1542.5" y="4146.2573">light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="4155.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="1542.5" y="4159.062">light_set_use_gi(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4168.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="1542.5" y="4171.8667">light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void</text><ellipse cx="1533.5" cy="4181.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="1542.5" y="4184.6714">light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="4194.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="1542.5" y="4197.4761">light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void</text><ellipse cx="1533.5" cy="4207.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="625" x="1542.5" y="4210.2808">light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="4219.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="1542.5" y="4223.0854">light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4232.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="810" x="1542.5" y="4235.8901">light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void</text><ellipse cx="1533.5" cy="4245.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="197" x="1542.5" y="4248.6948">reflection_probe_create() = 0 : RID</text><ellipse cx="1533.5" cy="4258.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="631" x="1542.5" y="4261.4995">reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="4271.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="4274.3042">reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void</text><ellipse cx="1533.5" cy="4283.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="1542.5" y="4287.1089">reflection_probe_set_interior_ambient(RID p_probe, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="4296.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="4299.9136">reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="4309.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="1542.5" y="4312.7183">reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void</text><ellipse cx="1533.5" cy="4322.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="433" x="1542.5" y="4325.5229">reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void</text><ellipse cx="1533.5" cy="4335.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="1542.5" y="4338.3276">reflection_probe_set_extents(RID p_probe, const Vector3 &amp; p_extents) = 0 : void</text><ellipse cx="1533.5" cy="4347.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="476" x="1542.5" y="4351.1323">reflection_probe_set_origin_offset(RID p_probe, const Vector3 &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="4360.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="4363.937">reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4373.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="1542.5" y="4376.7417">reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4386.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="4389.5464">reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4399.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="1542.5" y="4402.3511">reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void</text><ellipse cx="1533.5" cy="4411.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="1542.5" y="4415.1558">reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void</text><ellipse cx="1533.5" cy="4424.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1542.5" y="4427.9604">gi_probe_create() = 0 : RID</text><ellipse cx="1533.5" cy="4437.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="4440.7651">gi_probe_set_bounds(RID p_probe, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="1533.5" cy="4450.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="4453.5698">gi_probe_get_bounds(RID p_probe) const = 0 : AABB</text><ellipse cx="1533.5" cy="4463.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="1542.5" y="4466.3745">gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4475.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="1542.5" y="4479.1792">gi_probe_get_cell_size(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4488.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="456" x="1542.5" y="4491.9839">gi_probe_set_to_cell_xform(RID p_probe, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="4501.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="361" x="1542.5" y="4504.7886">gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform</text><ellipse cx="1533.5" cy="4514.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="484" x="1542.5" y="4517.5933">gi_probe_set_dynamic_data(RID p_probe, const PoolVector&lt;int&gt; &amp; p_data) = 0 : void</text><ellipse cx="1533.5" cy="4527.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="1542.5" y="4530.3979">gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector&lt;int&gt;</text><ellipse cx="1533.5" cy="4539.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="4543.2026">gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void</text><ellipse cx="1533.5" cy="4552.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="327" x="1542.5" y="4556.0073">gi_probe_get_dynamic_range(RID p_probe) const = 0 : int</text><ellipse cx="1533.5" cy="4565.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="1542.5" y="4568.812">gi_probe_set_energy(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4578.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="291" x="1542.5" y="4581.6167">gi_probe_get_energy(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4591.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="321" x="1542.5" y="4594.4214">gi_probe_set_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4604.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="1542.5" y="4607.2261">gi_probe_get_bias(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4616.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="4620.0308">gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4629.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="1542.5" y="4632.8354">gi_probe_get_normal_bias(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4642.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="4645.6401">gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void</text><ellipse cx="1533.5" cy="4655.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="319" x="1542.5" y="4658.4448">gi_probe_get_propagation(RID p_probe) const = 0 : float</text><ellipse cx="1533.5" cy="4668.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="1542.5" y="4671.2495">gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4680.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="1542.5" y="4684.0542">gi_probe_is_interior(RID p_probe) const = 0 : bool</text><ellipse cx="1533.5" cy="4693.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="4696.8589">gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="4706.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="1542.5" y="4709.6636">gi_probe_is_compressed(RID p_probe) const = 0 : bool</text><ellipse cx="1533.5" cy="4719.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="203" x="1542.5" y="4722.4683">lightmap_capture_create() = 0 : RID</text><ellipse cx="1533.5" cy="4732.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="1542.5" y="4735.2729">lightmap_capture_set_bounds(RID p_capture, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="1533.5" cy="4744.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="4748.0776">lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB</text><ellipse cx="1533.5" cy="4757.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="1542.5" y="4760.8823">lightmap_capture_set_octree(RID p_capture, const PoolVector&lt;uint8_t&gt; &amp; p_octree) = 0 : void</text><ellipse cx="1533.5" cy="4770.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="562" x="1542.5" y="4773.687">lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="4783.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="467" x="1542.5" y="4786.4917">lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform</text><ellipse cx="1533.5" cy="4796.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="4799.2964">lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="4808.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="4812.1011">lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int</text><ellipse cx="1533.5" cy="4821.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="4824.9058">lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="1533.5" cy="4834.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="4837.7104">lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="4847.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="1542.5" y="4850.5151">lightmap_capture_get_energy(RID p_capture) const = 0 : float</text><ellipse cx="1533.5" cy="4860.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="4863.3198">lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void</text><ellipse cx="1533.5" cy="4872.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="1542.5" y="4876.1245">lightmap_capture_is_interior(RID p_capture) const = 0 : bool</text><ellipse cx="1533.5" cy="4885.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="4888.9292">particles_create() = 0 : RID</text><ellipse cx="1533.5" cy="4898.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="1542.5" y="4901.7339">particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void</text><ellipse cx="1533.5" cy="4911.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="276" x="1542.5" y="4914.5386">particles_get_emitting(RID p_particles) = 0 : bool</text><ellipse cx="1533.5" cy="4924.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="1542.5" y="4927.3433">particles_set_amount(RID p_particles, int p_amount) = 0 : void</text><ellipse cx="1533.5" cy="4936.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="1542.5" y="4940.1479">particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void</text><ellipse cx="1533.5" cy="4949.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="4952.9526">particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void</text><ellipse cx="1533.5" cy="4962.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="4965.7573">particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void</text><ellipse cx="1533.5" cy="4975.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="4978.562">particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="1533.5" cy="4988.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="1542.5" y="4991.3667">particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="1533.5" cy="5000.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="1542.5" y="5004.1714">particles_set_custom_aabb(RID p_particles, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="1533.5" cy="5013.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="1542.5" y="5016.9761">particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="5026.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="1542.5" y="5029.7808">particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5039.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="5042.5854">particles_set_process_material(RID p_particles, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="5052.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="1542.5" y="5055.3901">particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void</text><ellipse cx="1533.5" cy="5064.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="1542.5" y="5068.1948">particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5077.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="1542.5" y="5080.9995">particles_is_inactive(RID p_particles) = 0 : bool</text><ellipse cx="1533.5" cy="5090.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="1542.5" y="5093.8042">particles_request_process(RID p_particles) = 0 : void</text><ellipse cx="1533.5" cy="5103.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="244" x="1542.5" y="5106.6089">particles_restart(RID p_particles) = 0 : void</text><ellipse cx="1533.5" cy="5116.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="1542.5" y="5119.4136">particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void</text><ellipse cx="1533.5" cy="5129.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="1542.5" y="5132.2183">particles_set_draw_passes(RID p_particles, int p_count) = 0 : void</text><ellipse cx="1533.5" cy="5141.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="1542.5" y="5145.0229">particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void</text><ellipse cx="1533.5" cy="5154.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="1542.5" y="5157.8276">particles_get_current_aabb(RID p_particles) = 0 : AABB</text><ellipse cx="1533.5" cy="5167.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="528" x="1542.5" y="5170.6323">particles_set_emission_transform(RID p_particles, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="5180.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="148" x="1542.5" y="5183.437">camera_create() = 0 : RID</text><ellipse cx="1533.5" cy="5193.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="1542.5" y="5196.2417">camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="5205.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="1542.5" y="5209.0464">camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="5218.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="602" x="1542.5" y="5221.8511">camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="1533.5" cy="5231.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="1542.5" y="5234.6558">camera_set_transform(RID p_camera, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="5244.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="5247.4604">camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void</text><ellipse cx="1533.5" cy="5257.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="5260.2651">camera_set_environment(RID p_camera, RID p_env) = 0 : void</text><ellipse cx="1533.5" cy="5269.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="5273.0698">camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5282.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1542.5" y="5285.8745">viewport_create() = 0 : RID</text><ellipse cx="1533.5" cy="5295.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="5298.6792">viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void</text><ellipse cx="1533.5" cy="5308.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="5311.4839">viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void</text><ellipse cx="1533.5" cy="5321.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="1542.5" y="5324.2886">viewport_set_active(RID p_viewport, bool p_active) = 0 : void</text><ellipse cx="1533.5" cy="5333.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="1542.5" y="5337.0933">viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void</text><ellipse cx="1533.5" cy="5346.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="1542.5" y="5349.8979">viewport_attach_to_screen(RID p_viewport, const Rect2 &amp; p_rect = Rect2(), int p_screen = 0) = 0 : void</text><ellipse cx="1533.5" cy="5359.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="455" x="1542.5" y="5362.7026">viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5372.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="246" x="1542.5" y="5375.5073">viewport_detach(RID p_viewport) = 0 : void</text><ellipse cx="1533.5" cy="5385.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="1542.5" y="5388.312">viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="5397.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="1542.5" y="5401.1167">viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="5410.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="1542.5" y="5413.9214">viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void</text><ellipse cx="1533.5" cy="5423.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="1542.5" y="5426.7261">viewport_get_texture(RID p_viewport) const = 0 : RID</text><ellipse cx="1533.5" cy="5436.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="5439.5308">viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="1533.5" cy="5449.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="5452.3354">viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="1533.5" cy="5461.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="5465.1401">viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="5474.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="1542.5" y="5477.9448">viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="5487.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="1542.5" y="5490.7495">viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="5500.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="5503.5542">viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void</text><ellipse cx="1533.5" cy="5513.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="1542.5" y="5516.3589">viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void</text><ellipse cx="1533.5" cy="5525.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="373" x="1542.5" y="5529.1636">viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="5538.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="5541.9683">viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="5551.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="1542.5" y="5554.7729">viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="5564.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="463" x="1542.5" y="5567.5776">viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="5577.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="575" x="1542.5" y="5580.3823">viewport_set_global_canvas_transform(RID p_viewport, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="5589.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="1542.5" y="5593.187">viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void</text><ellipse cx="1533.5" cy="5602.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="5605.9917">viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void</text><ellipse cx="1533.5" cy="5615.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="1542.5" y="5618.7964">viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="5628.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="5631.6011">viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void</text><ellipse cx="1533.5" cy="5641.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="5644.4058">viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void</text><ellipse cx="1533.5" cy="5654" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="1542.5" y="5657.2104">viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void</text><ellipse cx="1533.5" cy="5666.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="1542.5" y="5670.0151">viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="5679.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="5682.8198">viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void</text><ellipse cx="1533.5" cy="5692.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="1542.5" y="5695.6245">viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int</text><ellipse cx="1533.5" cy="5705.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="548" x="1542.5" y="5708.4292">viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void</text><ellipse cx="1533.5" cy="5718.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="177" x="1542.5" y="5721.2339">environment_create() = 0 : RID</text><ellipse cx="1533.5" cy="5730.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="1542.5" y="5734.0386">environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void</text><ellipse cx="1533.5" cy="5743.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="1542.5" y="5746.8433">environment_set_sky(RID p_env, RID p_sky) = 0 : void</text><ellipse cx="1533.5" cy="5756.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="1542.5" y="5759.6479">environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="5769.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="1542.5" y="5772.4526">environment_set_sky_orientation(RID p_env, const Basis &amp; p_orientation) = 0 : void</text><ellipse cx="1533.5" cy="5782.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="1542.5" y="5785.2573">environment_set_bg_color(RID p_env, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="5794.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="376" x="1542.5" y="5798.062">environment_set_bg_energy(RID p_env, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="5807.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="5810.8667">environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void</text><ellipse cx="1533.5" cy="5820.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="734" x="1542.5" y="5823.6714">environment_set_ambient_light(RID p_env, const Color &amp; p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void</text><ellipse cx="1533.5" cy="5833.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="1542.5" y="5836.4761">environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void</text><ellipse cx="1533.5" cy="5846.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1007" x="1542.5" y="5849.2808">environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="1533.5" cy="5858.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="997" x="1542.5" y="5862.0854">environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="1533.5" cy="5871.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1715" x="1542.5" y="5874.8901">environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void</text><ellipse cx="1533.5" cy="5884.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1464" x="1542.5" y="5887.6948">environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void</text><ellipse cx="1533.5" cy="5897.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="762" x="1542.5" y="5900.4995">environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void</text><ellipse cx="1533.5" cy="5910.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="869" x="1542.5" y="5913.3042">environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void</text><ellipse cx="1533.5" cy="5922.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1885" x="1542.5" y="5926.1089">environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color &amp; p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void</text><ellipse cx="1533.5" cy="5935.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="736" x="1542.5" y="5938.9136">environment_set_fog(RID p_env, bool p_enable, const Color &amp; p_color, const Color &amp; p_sun_color, float p_sun_amount) = 0 : void</text><ellipse cx="1533.5" cy="5948.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="948" x="1542.5" y="5951.7183">environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void</text><ellipse cx="1533.5" cy="5961.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="723" x="1542.5" y="5964.5229">environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void</text><ellipse cx="1533.5" cy="5974.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="1542.5" y="5977.3276">scenario_create() = 0 : RID</text><ellipse cx="1533.5" cy="5986.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="557" x="1542.5" y="5990.1323">scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void</text><ellipse cx="1533.5" cy="5999.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="1542.5" y="6002.937">scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="1533.5" cy="6012.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="6015.7417">scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void</text><ellipse cx="1533.5" cy="6025.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="1542.5" y="6028.5464">scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="1533.5" cy="6038.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="1542.5" y="6041.3511">instance_create2(RID p_base, RID p_scenario) : RID</text><ellipse cx="1533.5" cy="6050.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1542.5" y="6054.1558">instance_create() = 0 : RID</text><ellipse cx="1533.5" cy="6063.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="1542.5" y="6066.9604">instance_set_base(RID p_instance, RID p_base) = 0 : void</text><ellipse cx="1533.5" cy="6076.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="6079.7651">instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void</text><ellipse cx="1533.5" cy="6089.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="1542.5" y="6092.5698">instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void</text><ellipse cx="1533.5" cy="6102.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="470" x="1542.5" y="6105.3745">instance_set_transform(RID p_instance, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6114.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="1542.5" y="6118.1792">instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void</text><ellipse cx="1533.5" cy="6127.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="1542.5" y="6130.9839">instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void</text><ellipse cx="1533.5" cy="6140.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="494" x="1542.5" y="6143.7886">instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="6153.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="1542.5" y="6156.5933">instance_set_visible(RID p_instance, bool p_visible) = 0 : void</text><ellipse cx="1533.5" cy="6166.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="861" x="1542.5" y="6169.3979">instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 &amp; p_lightmap_uv_rect) = 0 : void</text><ellipse cx="1533.5" cy="6178.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="1542.5" y="6182.2026">instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void</text><ellipse cx="1533.5" cy="6191.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="1542.5" y="6195.0073">instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void</text><ellipse cx="1533.5" cy="6204.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="6207.812">instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="6217.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="1542.5" y="6220.6167">instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void</text><ellipse cx="1533.5" cy="6230.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="1542.5" y="6233.4214">instances_cull_aabb(const AABB &amp; p_aabb, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="6243.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="694" x="1542.5" y="6246.2261">instances_cull_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="6255.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="645" x="1542.5" y="6259.0308">instances_cull_convex(const Vector&lt;Plane&gt; &amp; p_convex, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="1533.5" cy="6268.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="507" x="1542.5" y="6271.8354">_instances_cull_aabb_bind(const AABB &amp; p_aabb, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="6281.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="637" x="1542.5" y="6284.6401">_instances_cull_ray_bind(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="6294.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="1542.5" y="6297.4448">_instances_cull_convex_bind(const Array &amp; p_convex, RID p_scenario = = RID()) const : Array</text><ellipse cx="1533.5" cy="6307.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="1542.5" y="6310.2495">instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="6319.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="773" x="1542.5" y="6323.0542">instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void</text><ellipse cx="1533.5" cy="6332.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="1542.5" y="6335.8589">instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="6345.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="739" x="1542.5" y="6348.6636">instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void</text><ellipse cx="1533.5" cy="6358.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="1542.5" y="6361.4683">instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void</text><ellipse cx="1533.5" cy="6371.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="145" x="1542.5" y="6374.2729">canvas_create() = 0 : RID</text><ellipse cx="1533.5" cy="6383.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="1542.5" y="6387.0776">canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 &amp; p_mirroring) = 0 : void</text><ellipse cx="1533.5" cy="6396.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="1542.5" y="6399.8823">canvas_set_modulate(RID p_canvas, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6409.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="1542.5" y="6412.687">canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="6422.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="293" x="1542.5" y="6425.4917">canvas_set_disable_scale(bool p_disable) = 0 : void</text><ellipse cx="1533.5" cy="6435.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="1542.5" y="6438.2964">canvas_item_create() = 0 : RID</text><ellipse cx="1533.5" cy="6447.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="6451.1011">canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void</text><ellipse cx="1533.5" cy="6460.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="1542.5" y="6463.9058">canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void</text><ellipse cx="1533.5" cy="6473.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="6476.7104">canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="6486.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="6489.5151">canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void</text><ellipse cx="1533.5" cy="6499.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="1542.5" y="6502.3198">canvas_item_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6511.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="1542.5" y="6515.1245">canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void</text><ellipse cx="1533.5" cy="6524.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="6527.9292">canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6537.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="1542.5" y="6540.7339">canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 &amp; p_rect = Rect2()) = 0 : void</text><ellipse cx="1533.5" cy="6550.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="1542.5" y="6553.5386">canvas_item_set_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6563.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="1542.5" y="6566.3433">canvas_item_set_self_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6575.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="6579.1479">canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6588.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="904" x="1542.5" y="6591.9526">canvas_item_add_line(RID p_item, const Point2 &amp; p_from, const Point2 &amp; p_to, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="6601.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="933" x="1542.5" y="6604.7573">canvas_item_add_polyline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="6614.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="937" x="1542.5" y="6617.562">canvas_item_add_multiline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="6627.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="1542.5" y="6630.3667">canvas_item_add_rect(RID p_item, const Rect2 &amp; p_rect, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6639.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="605" x="1542.5" y="6643.1714">canvas_item_add_circle(RID p_item, const Point2 &amp; p_pos, float p_radius, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="6652.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1191" x="1542.5" y="6655.9761">canvas_item_add_texture_rect(RID p_item, const Rect2 &amp; p_rect, RID p_texture, bool p_tile = false, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="6665.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1404" x="1542.5" y="6668.7808">canvas_item_add_texture_rect_region(RID p_item, const Rect2 &amp; p_rect, RID p_texture, const Rect2 &amp; p_src_rect, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void</text><ellipse cx="1533.5" cy="6678.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2427" x="1542.5" y="6681.5854">canvas_item_add_nine_patch(RID p_item, const Rect2 &amp; p_rect, const Rect2 &amp; p_source, RID p_texture, const Vector2 &amp; p_topleft, const Vector2 &amp; p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color &amp; p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="6691.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1224" x="1542.5" y="6694.3901">canvas_item_add_primitive(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="6703.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1430" x="1542.5" y="6707.1948">canvas_item_add_polygon(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void</text><ellipse cx="1533.5" cy="6716.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2540" x="1542.5" y="6719.9995">canvas_item_add_triangle_array(RID p_item, const Vector&lt;int&gt; &amp; p_indices, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), const Vector&lt;int&gt; &amp; p_bones = Vector&lt;int&gt;(), const Vector&lt;float&gt; &amp; p_weights = Vector&lt;float&gt;(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void</text><ellipse cx="1533.5" cy="6729.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1248" x="1542.5" y="6732.8042">canvas_item_add_mesh(RID p_item, const RID &amp; p_mesh, const Transform2D &amp; p_transform = Transform2D(), const Color &amp; p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="6742.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="681" x="1542.5" y="6745.6089">canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="1533.5" cy="6755.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="573" x="1542.5" y="6758.4136">canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void</text><ellipse cx="1533.5" cy="6768.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="514" x="1542.5" y="6771.2183">canvas_item_add_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6780.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="1542.5" y="6784.0229">canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void</text><ellipse cx="1533.5" cy="6793.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="422" x="1542.5" y="6796.8276">canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6806.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="1542.5" y="6809.6323">canvas_item_set_z_index(RID p_item, int p_z) = 0 : void</text><ellipse cx="1533.5" cy="6819.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="1542.5" y="6822.437">canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6832.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="1542.5" y="6835.2417">canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 &amp; p_rect) = 0 : void</text><ellipse cx="1533.5" cy="6844.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="6848.0464">canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void</text><ellipse cx="1533.5" cy="6857.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="1542.5" y="6860.8511">canvas_item_clear(RID p_item) = 0 : void</text><ellipse cx="1533.5" cy="6870.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="1542.5" y="6873.6558">canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void</text><ellipse cx="1533.5" cy="6883.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="1542.5" y="6886.4604">canvas_item_set_material(RID p_item, RID p_material) = 0 : void</text><ellipse cx="1533.5" cy="6896.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="1542.5" y="6899.2651">canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="6908.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="1542.5" y="6912.0698">canvas_light_create() = 0 : RID</text><ellipse cx="1533.5" cy="6921.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="386" x="1542.5" y="6924.8745">canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="6934.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="1542.5" y="6937.6792">canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="6947.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="1542.5" y="6950.4839">canvas_light_set_scale(RID p_light, float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="6960.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="1542.5" y="6963.2886">canvas_light_set_transform(RID p_light, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="1533.5" cy="6972.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="1542.5" y="6976.0933">canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="1533.5" cy="6985.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="1542.5" y="6988.8979">canvas_light_set_texture_offset(RID p_light, const Vector2 &amp; p_offset) = 0 : void</text><ellipse cx="1533.5" cy="6998.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="1542.5" y="7001.7026">canvas_light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="7011.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="1542.5" y="7014.5073">canvas_light_set_height(RID p_light, float p_height) = 0 : void</text><ellipse cx="1533.5" cy="7024.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="1542.5" y="7027.312">canvas_light_set_energy(RID p_light, float p_energy) = 0 : void</text><ellipse cx="1533.5" cy="7036.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="1542.5" y="7040.1167">canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void</text><ellipse cx="1533.5" cy="7049.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="1542.5" y="7052.9214">canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void</text><ellipse cx="1533.5" cy="7062.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="1542.5" y="7065.7261">canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="7075.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1542.5" y="7078.5308">canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="7088.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="1542.5" y="7091.3354">canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="7100.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="1542.5" y="7104.1401">canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="7113.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="1542.5" y="7116.9448">canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void</text><ellipse cx="1533.5" cy="7126.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="1542.5" y="7129.7495">canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void</text><ellipse cx="1533.5" cy="7139.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="1542.5" y="7142.5542">canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void</text><ellipse cx="1533.5" cy="7152.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="7155.3589">canvas_light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="7164.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="1542.5" y="7168.1636">canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void</text><ellipse cx="1533.5" cy="7177.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="229" x="1542.5" y="7180.9683">canvas_light_occluder_create() = 0 : RID</text><ellipse cx="1533.5" cy="7190.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="1542.5" y="7193.7729">canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void</text><ellipse cx="1533.5" cy="7203.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="444" x="1542.5" y="7206.5776">canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void</text><ellipse cx="1533.5" cy="7216.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="439" x="1542.5" y="7219.3823">canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void</text><ellipse cx="1533.5" cy="7228.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="541" x="1542.5" y="7232.187">canvas_light_occluder_set_transform(RID p_occluder, const Transform2D &amp; p_xform) = 0 : void</text><ellipse cx="1533.5" cy="7241.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="1542.5" y="7244.9917">canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void</text><ellipse cx="1533.5" cy="7254.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="1542.5" y="7257.7964">canvas_occluder_polygon_create() = 0 : RID</text><ellipse cx="1533.5" cy="7267.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="725" x="1542.5" y="7270.6011">canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape, bool p_closed) = 0 : void</text><ellipse cx="1533.5" cy="7280.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="691" x="1542.5" y="7283.4058">canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape) = 0 : void</text><ellipse cx="1533.5" cy="7293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="759" x="1542.5" y="7296.2104">canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void</text><ellipse cx="1533.5" cy="7305.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="1542.5" y="7309.0151">black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void</text><ellipse cx="1533.5" cy="7318.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="1542.5" y="7321.8198">black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void</text><ellipse cx="1533.5" cy="7331.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="1542.5" y="7334.6245">free(RID p_rid) = 0 : void</text><ellipse cx="1533.5" cy="7344.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="685" x="1542.5" y="7347.4292">request_frame_drawn_callback(Object * p_where, const StringName &amp; p_method, const Variant &amp; p_userdata) = 0 : void</text><ellipse cx="1533.5" cy="7357.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="1542.5" y="7360.2339">draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void</text><ellipse cx="1533.5" cy="7369.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="1542.5" y="7373.0386">sync() = 0 : void</text><ellipse cx="1533.5" cy="7382.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="1542.5" y="7385.8433">has_changed() const = 0 : bool</text><ellipse cx="1533.5" cy="7395.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="1542.5" y="7398.6479">init() = 0 : void</text><ellipse cx="1533.5" cy="7408.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="1542.5" y="7411.4526">finish() = 0 : void</text><ellipse cx="1533.5" cy="7421.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="1542.5" y="7424.2573">get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t</text><ellipse cx="1533.5" cy="7433.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="1542.5" y="7437.062">get_video_adapter_name() const = 0 : String</text><ellipse cx="1533.5" cy="7446.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="262" x="1542.5" y="7449.8667">get_video_adapter_vendor() const = 0 : String</text><ellipse cx="1533.5" cy="7459.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="141" x="1542.5" y="7462.6714">get_test_cube() = 0 : RID</text><ellipse cx="1533.5" cy="7472.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1542.5" y="7475.4761">get_test_texture() : RID</text><ellipse cx="1533.5" cy="7485.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1542.5" y="7488.2808">get_white_texture() : RID</text><ellipse cx="1533.5" cy="7497.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="1542.5" y="7501.0854">make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID</text><ellipse cx="1533.5" cy="7510.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="1542.5" y="7513.8901">mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData &amp; p_mesh_data) : void</text><ellipse cx="1533.5" cy="7523.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="1542.5" y="7526.6948">mesh_add_surface_from_planes(RID p_mesh, const PoolVector&lt;Plane&gt; &amp; p_planes) : void</text><ellipse cx="1533.5" cy="7536.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="677" x="1542.5" y="7539.4995">set_boot_image(const Ref&lt;Image&gt; &amp; p_image, const Color &amp; p_color, bool p_scale, bool p_use_filter = true) = 0 : void</text><ellipse cx="1533.5" cy="7549.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="1542.5" y="7552.3042">set_default_clear_color(const Color &amp; p_color) = 0 : void</text><ellipse cx="1533.5" cy="7561.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="267" x="1542.5" y="7565.1089">set_shader_time_scale(float p_scale) = 0 : void</text><ellipse cx="1533.5" cy="7574.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="1542.5" y="7577.9136">has_feature(VisualServer::Features p_feature) const = 0 : bool</text><ellipse cx="1533.5" cy="7587.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="1542.5" y="7590.7183">has_os_feature(const String &amp; p_feature) const = 0 : bool</text><ellipse cx="1533.5" cy="7600.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="1542.5" y="7603.5229">set_debug_generate_wireframes(bool p_generate) = 0 : void</text><ellipse cx="1533.5" cy="7613.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="1542.5" y="7616.3276">call_set_use_vsync(bool p_enable) = 0 : void</text><ellipse cx="1533.5" cy="7625.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="1542.5" y="7629.1323">is_low_end() const = 0 : bool</text><ellipse cx="1533.5" cy="7638.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="1542.5" y="7641.937">is_render_loop_enabled() const : bool</text><ellipse cx="1533.5" cy="7651.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1542.5" y="7654.7417">set_render_loop_enabled(bool p_enabled) : void</text><ellipse cx="1533.5" cy="7664.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1542.5" y="7667.5464">VisualServer() : void</text><ellipse cx="1533.5" cy="7677.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1542.5" y="7680.3511">~VisualServer() : void</text></a><!--MD5=[8bd677d40488ae3737ee9bebc9a74ec6]
class C_0001559146041463814963--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" target="_top" title="PhysicsDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" xlink:show="new" xlink:title="PhysicsDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="675.4297" id="C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.5;" width="472" x="4223.5" y="4604.4531"/><ellipse cx="4382.25" cy="4620.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4382.3594,4615.7969 L4381.2031,4620.875 L4383.5313,4620.875 L4382.3594,4615.7969 Z M4380.875,4613.5625 L4383.8594,4613.5625 L4387.2188,4625.9531 L4384.7656,4625.9531 L4384,4622.8906 L4380.7188,4622.8906 L4379.9688,4625.9531 L4377.5313,4625.9531 L4380.875,4613.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="4402.75" y="4624.6074">PhysicsDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4224.5" x2="4694.5" y1="4636.4531" y2="4636.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4224.5" x2="4694.5" y1="4644.4531" y2="4644.4531"/><ellipse cx="4234.5" cy="4655.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4243.5" y="4658.6636">get_class() const : String</text><ellipse cx="4234.5" cy="4668.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4243.5" y="4671.4683">_get_class_namev() const : const StringName *</text><ellipse cx="4234.5" cy="4681.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4243.5" y="4684.2729">get_class_ptr_static() : void *</text><ellipse cx="4234.5" cy="4693.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4243.5" y="4697.0776">get_class_static() : String</text><ellipse cx="4234.5" cy="4706.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4243.5" y="4709.8823">get_parent_class_static() : String</text><ellipse cx="4234.5" cy="4719.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4243.5" y="4722.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4234.5" cy="4732.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4243.5" y="4735.4917">get_category_static() : String</text><ellipse cx="4234.5" cy="4745.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4243.5" y="4748.2964">inherits_static() : String</text><ellipse cx="4234.5" cy="4757.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4243.5" y="4761.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4234.5" cy="4770.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4243.5" y="4773.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4234.5" cy="4783.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4243.5" y="4786.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4234.5" cy="4796.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4243.5" y="4799.5151">initialize_class() : void</text><ellipse cx="4234.5" cy="4809.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="4243.5" y="4812.3198">get_total_gravity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4821.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="4243.5" y="4825.1245">get_total_angular_damp() const = 0 : float</text><ellipse cx="4234.5" cy="4834.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="4243.5" y="4837.9292">get_total_linear_damp() const = 0 : float</text><ellipse cx="4234.5" cy="4847.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="235" x="4243.5" y="4850.7339">get_center_of_mass() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4860.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="255" x="4243.5" y="4863.5386">get_principal_inertia_axes() const = 0 : Basis</text><ellipse cx="4234.5" cy="4873.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="4243.5" y="4876.3433">get_inverse_mass() const = 0 : float</text><ellipse cx="4234.5" cy="4885.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="4243.5" y="4889.1479">get_inverse_inertia() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4898.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="4243.5" y="4901.9526">get_inverse_inertia_tensor() const = 0 : Basis</text><ellipse cx="4234.5" cy="4911.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="4243.5" y="4914.7573">set_linear_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="4234.5" cy="4924.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="4243.5" y="4927.562">get_linear_velocity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4937.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="4243.5" y="4940.3667">set_angular_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="4234.5" cy="4949.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="4243.5" y="4953.1714">get_angular_velocity() const = 0 : Vector3</text><ellipse cx="4234.5" cy="4962.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4243.5" y="4965.9761">set_transform(const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4234.5" cy="4975.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="4243.5" y="4978.7808">get_transform() const = 0 : Transform</text><ellipse cx="4234.5" cy="4988.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="4243.5" y="4991.5854">add_central_force(const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4234.5" cy="5001.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4243.5" y="5004.3901">add_force(const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="4234.5" cy="5013.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="4243.5" y="5017.1948">add_torque(const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4234.5" cy="5026.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="4243.5" y="5029.9995">apply_central_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="5039.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="4243.5" y="5042.8042">apply_impulse(const Vector3 &amp; p_pos, const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="5052.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="4243.5" y="5055.6089">apply_torque_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="4234.5" cy="5065.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="4243.5" y="5068.4136">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="4234.5" cy="5078.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="4243.5" y="5081.2183">is_sleeping() const = 0 : bool</text><ellipse cx="4234.5" cy="5090.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="4243.5" y="5094.0229">get_contact_count() const = 0 : int</text><ellipse cx="4234.5" cy="5103.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4243.5" y="5106.8276">get_contact_local_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="5116.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="4243.5" y="5119.6323">get_contact_local_normal(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="5129.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="4243.5" y="5132.437">get_contact_impulse(int p_contact_idx) const = 0 : float</text><ellipse cx="4234.5" cy="5142.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="4243.5" y="5145.2417">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="4234.5" cy="5154.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="4243.5" y="5158.0464">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="4234.5" cy="5167.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="4243.5" y="5170.8511">get_contact_collider_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="5180.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4243.5" y="5183.6558">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="4234.5" cy="5193.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="4243.5" y="5196.4604">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="4234.5" cy="5206.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="4243.5" y="5209.2651">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="4234.5" cy="5218.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="4243.5" y="5222.0698">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="4234.5" cy="5231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="4243.5" y="5234.8745">get_step() const = 0 : real_t</text><ellipse cx="4234.5" cy="5244.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="4243.5" y="5247.6792">integrate_forces() : void</text><ellipse cx="4234.5" cy="5257.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="283" x="4243.5" y="5260.4839">get_space_state() = 0 : PhysicsDirectSpaceState *</text><ellipse cx="4234.5" cy="5270.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4243.5" y="5273.2886">PhysicsDirectBodyState() : void</text></a><!--MD5=[123a6318eb7c3f47a6d4372e2b561658]
class C_0000503002593685351124--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" target="_top" title="PhysicsDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" xlink:show="new" xlink:title="PhysicsDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="304.0938" id="C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.5;" width="2171" x="340" y="1668.4531"/><ellipse cx="1344.25" cy="1684.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1344.3594,1679.7969 L1343.2031,1684.875 L1345.5313,1684.875 L1344.3594,1679.7969 Z M1342.875,1677.5625 L1345.8594,1677.5625 L1349.2188,1689.9531 L1346.7656,1689.9531 L1346,1686.8906 L1342.7188,1686.8906 L1341.9688,1689.9531 L1339.5313,1689.9531 L1342.875,1677.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="1364.75" y="1688.6074">PhysicsDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="341" x2="2510" y1="1700.4531" y2="1700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="341" x2="2510" y1="1708.4531" y2="1708.4531"/><ellipse cx="351" cy="1719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="360" y="1722.6636">get_class() const : String</text><ellipse cx="351" cy="1732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="360" y="1735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="351" cy="1745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="360" y="1748.2729">get_class_ptr_static() : void *</text><ellipse cx="351" cy="1757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="360" y="1761.0776">get_class_static() : String</text><ellipse cx="351" cy="1770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="360" y="1773.8823">get_parent_class_static() : String</text><ellipse cx="351" cy="1783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="360" y="1786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="351" cy="1796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="360" y="1799.4917">get_category_static() : String</text><ellipse cx="351" cy="1809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="360" y="1812.2964">inherits_static() : String</text><ellipse cx="351" cy="1821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="360" y="1825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="351" cy="1834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="360" y="1837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="351" cy="1847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="360" y="1850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="351" cy="1860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="360" y="1863.5151">initialize_class() : void</text><ellipse cx="351" cy="1873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1540" x="360" y="1876.3198">intersect_point(const Vector3 &amp; p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="351" cy="1885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1689" x="360" y="1889.1245">intersect_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, PhysicsDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool</text><ellipse cx="351" cy="1898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1782" x="360" y="1901.9292">intersect_shape(const RID &amp; p_shape, const Transform &amp; p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="351" cy="1911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2145" x="360" y="1914.7339">cast_motion(const RID &amp; p_shape, const Transform &amp; p_xform, const Vector3 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool</text><ellipse cx="351" cy="1924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1719" x="360" y="1927.5386">collide_shape(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="351" cy="1937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1637" x="360" y="1940.3433">rest_info(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="351" cy="1949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="360" y="1953.1479">get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3</text><ellipse cx="351" cy="1962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="360" y="1965.9526">PhysicsDirectSpaceState() : void</text></a><!--MD5=[c66ec037f9beb318ec4ceea904716941]
class C_0000493041171271776846--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" target="_top" title="PhysicsDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" xlink:show="new" xlink:title="PhysicsDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="99.2188" id="C_0000493041171271776846" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="5972" y="67.4531"/><ellipse cx="5987" cy="83.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5989.9688,89.0938 Q5989.3906,89.3906 5988.75,89.5313 Q5988.1094,89.6875 5987.4063,89.6875 Q5984.9063,89.6875 5983.5781,88.0469 Q5982.2656,86.3906 5982.2656,83.2656 Q5982.2656,80.1406 5983.5781,78.4844 Q5984.9063,76.8281 5987.4063,76.8281 Q5988.1094,76.8281 5988.75,76.9844 Q5989.4063,77.1406 5989.9688,77.4375 L5989.9688,80.1563 Q5989.3438,79.5781 5988.75,79.3125 Q5988.1563,79.0313 5987.5313,79.0313 Q5986.1875,79.0313 5985.5,80.1094 Q5984.8125,81.1719 5984.8125,83.2656 Q5984.8125,85.3594 5985.5,86.4375 Q5986.1875,87.5 5987.5313,87.5 Q5988.1563,87.5 5988.75,87.2344 Q5989.3438,86.9531 5989.9688,86.375 L5989.9688,89.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="243" x="6001" y="87.6074">PhysicsDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5973" x2="6246" y1="99.4531" y2="99.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="105.4531"/><ellipse cx="5983" cy="110.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="5992" y="113.6636">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="118.2578"/><ellipse cx="5983" cy="123.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="5992" y="126.4683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="131.0625"/><ellipse cx="5983" cy="136.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="5992" y="139.2729">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5978" y="143.8672"/><ellipse cx="5983" cy="148.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="5992" y="152.0776">shape : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="5973" x2="6246" y1="158.6719" y2="158.6719"/><!--MD5=[22d525dd8ab5843672eb9a446d1ac0b7]
class C_0000461609734144368587--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" target="_top" title="PhysicsDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" xlink:show="new" xlink:title="PhysicsDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="124.8281" id="C_0000461609734144368587" style="stroke: #A80036; stroke-width: 1.5;" width="257" x="6" y="54.4531"/><ellipse cx="21" cy="70.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23.9688,76.0938 Q23.3906,76.3906 22.75,76.5313 Q22.1094,76.6875 21.4063,76.6875 Q18.9063,76.6875 17.5781,75.0469 Q16.2656,73.3906 16.2656,70.2656 Q16.2656,67.1406 17.5781,65.4844 Q18.9063,63.8281 21.4063,63.8281 Q22.1094,63.8281 22.75,63.9844 Q23.4063,64.1406 23.9688,64.4375 L23.9688,67.1563 Q23.3438,66.5781 22.75,66.3125 Q22.1563,66.0313 21.5313,66.0313 Q20.1875,66.0313 19.5,67.1094 Q18.8125,68.1719 18.8125,70.2656 Q18.8125,72.3594 19.5,73.4375 Q20.1875,74.5 21.5313,74.5 Q22.1563,74.5 22.75,74.2344 Q23.3438,73.9531 23.9688,73.375 L23.9688,76.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="225" x="35" y="74.6074">PhysicsDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="262" y1="86.4531" y2="86.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="92.4531"/><ellipse cx="17" cy="97.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="100.6636">position : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="105.2578"/><ellipse cx="17" cy="110.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="26" y="113.4683">normal : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="118.0625"/><ellipse cx="17" cy="123.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="26" y="126.2729">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="130.8672"/><ellipse cx="17" cy="135.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="26" y="139.0776">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="143.6719"/><ellipse cx="17" cy="148.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="26" y="151.8823">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="156.4766"/><ellipse cx="17" cy="161.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="26" y="164.687">shape : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="262" y1="171.2813" y2="171.2813"/><!--MD5=[a29f7384437247e0f26d2b1ff51d7842]
class C_0001034902024938599899--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" target="_top" title="PhysicsServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" xlink:show="new" xlink:title="PhysicsServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="2557.7188" id="C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.5;" width="1275" x="4731" y="3662.9531"/><ellipse cx="5322.25" cy="3678.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5322.3594,3674.2969 L5321.2031,3679.375 L5323.5313,3679.375 L5322.3594,3674.2969 Z M5320.875,3672.0625 L5323.8594,3672.0625 L5327.2188,3684.4531 L5324.7656,3684.4531 L5324,3681.3906 L5320.7188,3681.3906 L5319.9688,3684.4531 L5317.5313,3684.4531 L5320.875,3672.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="84" x="5342.75" y="3683.1074">PhysicsServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4732" x2="6005" y1="3694.9531" y2="3694.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4732" x2="6005" y1="3702.9531" y2="3702.9531"/><ellipse cx="4742" cy="3713.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4751" y="3717.1636">get_class() const : String</text><ellipse cx="4742" cy="3726.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4751" y="3729.9683">_get_class_namev() const : const StringName *</text><ellipse cx="4742" cy="3739.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4751" y="3742.7729">get_class_ptr_static() : void *</text><ellipse cx="4742" cy="3752.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4751" y="3755.5776">get_class_static() : String</text><ellipse cx="4742" cy="3765.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4751" y="3768.3823">get_parent_class_static() : String</text><ellipse cx="4742" cy="3777.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4751" y="3781.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4742" cy="3790.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4751" y="3793.9917">get_category_static() : String</text><ellipse cx="4742" cy="3803.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4751" y="3806.7964">inherits_static() : String</text><ellipse cx="4742" cy="3816.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4751" y="3819.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4742" cy="3829.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4751" y="3832.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4742" cy="3842" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4751" y="3845.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4742" cy="3854.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4751" y="3858.0151">initialize_class() : void</text><ellipse cx="4742" cy="3867.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="4751" y="3870.8198">get_singleton() : PhysicsServer *</text><ellipse cx="4742" cy="3880.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="4751" y="3883.6245">shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID</text><ellipse cx="4742" cy="3893.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4751" y="3896.4292">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="4742" cy="3906.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="4751" y="3909.2339">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="4742" cy="3918.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="4751" y="3922.0386">shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType</text><ellipse cx="4742" cy="3931.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="4751" y="3934.8433">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="4742" cy="3944.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="4751" y="3947.6479">shape_set_margin(RID p_shape, real_t p_margin) = 0 : void</text><ellipse cx="4742" cy="3957.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="4751" y="3960.4526">shape_get_margin(RID p_shape) const = 0 : real_t</text><ellipse cx="4742" cy="3970.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="4751" y="3973.2573">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="4742" cy="3982.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="4751" y="3986.062">space_create() = 0 : RID</text><ellipse cx="4742" cy="3995.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="4751" y="3998.8667">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="4742" cy="4008.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="4751" y="4011.6714">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="4742" cy="4021.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="4751" y="4024.4761">space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="4742" cy="4034.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="523" x="4751" y="4037.2808">space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="4742" cy="4046.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="4050.0854">space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *</text><ellipse cx="4742" cy="4059.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="4751" y="4062.8901">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="4742" cy="4072.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="4751" y="4075.6948">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector3&gt;</text><ellipse cx="4742" cy="4085.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="4751" y="4088.4995">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="4742" cy="4098.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="4751" y="4101.3042">area_create() = 0 : RID</text><ellipse cx="4742" cy="4110.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="4751" y="4114.1089">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="4742" cy="4123.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="4751" y="4126.9136">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="4742" cy="4136.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="4751" y="4139.7183">area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="4742" cy="4149.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="4751" y="4152.5229">area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode</text><ellipse cx="4742" cy="4162.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="712" x="4751" y="4165.3276">area_add_shape(RID p_area, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="4742" cy="4174.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="4751" y="4178.1323">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="4742" cy="4187.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="4751" y="4190.937">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4200.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="4751" y="4203.7417">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="4742" cy="4213.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="4751" y="4216.5464">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="4742" cy="4226.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="447" x="4751" y="4229.3511">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform</text><ellipse cx="4742" cy="4238.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="4751" y="4242.1558">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="4742" cy="4251.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="4751" y="4254.9604">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="4742" cy="4264.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="4751" y="4267.7651">area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="4742" cy="4277.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="4751" y="4280.5698">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="4742" cy="4290.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="4751" y="4293.3745">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="4742" cy="4302.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="603" x="4751" y="4306.1792">area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="4742" cy="4315.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="428" x="4751" y="4318.9839">area_set_transform(RID p_area, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4328.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="4751" y="4331.7886">area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="4742" cy="4341.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="4751" y="4344.5933">area_get_transform(RID p_area) const = 0 : Transform</text><ellipse cx="4742" cy="4354.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="4751" y="4357.3979">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="4366.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="4751" y="4370.2026">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="4379.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="4751" y="4383.0073">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="4742" cy="4392.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="4395.812">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="4742" cy="4405.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="4751" y="4408.6167">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="4742" cy="4418.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="4751" y="4421.4214">area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4431.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="4751" y="4434.2261">area_is_ray_pickable(RID p_area) const = 0 : bool</text><ellipse cx="4742" cy="4443.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="4751" y="4447.0308">body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="4742" cy="4456.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="4751" y="4459.8354">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="4742" cy="4469.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="4751" y="4472.6401">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="4742" cy="4482.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="425" x="4751" y="4485.4448">body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void</text><ellipse cx="4742" cy="4495.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="4751" y="4498.2495">body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode</text><ellipse cx="4742" cy="4507.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="716" x="4751" y="4511.0542">body_add_shape(RID p_body, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="4742" cy="4520.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4751" y="4523.8589">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="4742" cy="4533.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="4751" y="4536.6636">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="4546.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="4751" y="4549.4683">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="4742" cy="4559.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="4751" y="4562.2729">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="4742" cy="4571.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="4751" y="4575.0776">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform</text><ellipse cx="4742" cy="4584.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="4751" y="4587.8823">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="4742" cy="4597.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="4751" y="4600.687">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="4742" cy="4610.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="4751" y="4613.4917">body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="4742" cy="4623.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="4626.2964">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="4742" cy="4635.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4751" y="4639.1011">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4648.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="490" x="4751" y="4651.9058">body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="4661.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="4751" y="4664.7104">body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="4674.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="4751" y="4677.5151">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="4687.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="4751" y="4690.3198">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4699.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="4751" y="4703.1245">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="4712.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4751" y="4715.9292">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4725.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="4751" y="4728.7339">body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void</text><ellipse cx="4742" cy="4738.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="4751" y="4741.5386">body_get_user_flags(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="4751.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="4751" y="4754.3433">body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="4763.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="4751" y="4767.1479">body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="4742" cy="4776.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="416" x="4751" y="4779.9526">body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void</text><ellipse cx="4742" cy="4789.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="362" x="4751" y="4792.7573">body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t</text><ellipse cx="4742" cy="4802.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="4751" y="4805.562">body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="4742" cy="4815.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="4751" y="4818.3667">body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="4742" cy="4827.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="4751" y="4831.1714">body_set_applied_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4742" cy="4840.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="4751" y="4843.9761">body_get_applied_force(RID p_body) const = 0 : Vector3</text><ellipse cx="4742" cy="4853.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="4751" y="4856.7808">body_set_applied_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4742" cy="4866.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="4751" y="4869.5854">body_get_applied_torque(RID p_body) const = 0 : Vector3</text><ellipse cx="4742" cy="4879.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="4751" y="4882.3901">body_add_central_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="4742" cy="4891.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="4751" y="4895.1948">body_add_force(RID p_body, const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="4742" cy="4904.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="4751" y="4907.9995">body_add_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="4742" cy="4917.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="4751" y="4920.8042">body_apply_central_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4930.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="543" x="4751" y="4933.6089">body_apply_impulse(RID p_body, const Vector3 &amp; p_pos, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4943.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="4751" y="4946.4136">body_apply_torque_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="4742" cy="4956.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="4751" y="4959.2183">body_set_axis_velocity(RID p_body, const Vector3 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="4742" cy="4968.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="4751" y="4972.0229">body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void</text><ellipse cx="4742" cy="4981.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="469" x="4751" y="4984.8276">body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool</text><ellipse cx="4742" cy="4994.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="4751" y="4997.6323">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5007.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="4751" y="5010.437">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5020.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="4751" y="5023.2417">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="4742" cy="5032.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="4751" y="5036.0464">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="4742" cy="5045.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="4751" y="5048.8511">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="4742" cy="5058.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="4751" y="5061.6558">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="4742" cy="5071.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="4751" y="5074.4604">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="4742" cy="5084.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4751" y="5087.2651">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="4742" cy="5096.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="4751" y="5100.0698">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="5109.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="4751" y="5112.8745">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="4742" cy="5122.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="4751" y="5125.6792">body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="5135.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="4751" y="5138.4839">body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="5148.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="4751" y="5151.2886">body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *</text><ellipse cx="4742" cy="5160.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4751" y="5164.0933">body_test_motion(RID p_body, const Transform &amp; p_from, const Vector3 &amp; p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="4742" cy="5173.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1249" x="4751" y="5176.8979">body_test_ray_separation(RID p_body, const Transform &amp; p_transform, bool p_infinite_inertia, Vector3 &amp; r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="4742" cy="5186.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="4751" y="5189.7026">soft_body_create(bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="4742" cy="5199.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="673" x="4751" y="5202.5073">soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void</text><ellipse cx="4742" cy="5212.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="4751" y="5215.312">soft_body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="4742" cy="5224.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="279" x="4751" y="5228.1167">soft_body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="4742" cy="5237.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="4751" y="5240.9214">soft_body_set_mesh(RID p_body, const REF &amp; p_mesh) = 0 : void</text><ellipse cx="4742" cy="5250.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="4751" y="5253.7261">soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="4742" cy="5263.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="4751" y="5266.5308">soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="5276.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="4751" y="5279.3354">soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="4742" cy="5288.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="4751" y="5292.1401">soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="4742" cy="5301.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="411" x="4751" y="5304.9448">soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5314.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="4751" y="5317.7495">soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="4742" cy="5327.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="4751" y="5330.5542">soft_body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="4742" cy="5340.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="4751" y="5343.3589">soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="4742" cy="5352.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="4751" y="5356.1636">soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="4742" cy="5365.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="4751" y="5368.9683">soft_body_set_transform(RID p_body, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="4742" cy="5378.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="4751" y="5381.7729">soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3</text><ellipse cx="4742" cy="5391.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="4751" y="5394.5776">soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="5404.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="4751" y="5407.3823">soft_body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="4742" cy="5416.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="4751" y="5420.187">soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void</text><ellipse cx="4742" cy="5429.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="4751" y="5432.9917">soft_body_get_simulation_precision(RID p_body) = 0 : int</text><ellipse cx="4742" cy="5442.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="4751" y="5445.7964">soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void</text><ellipse cx="4742" cy="5455.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="4751" y="5458.6011">soft_body_get_total_mass(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5468.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="4751" y="5471.4058">soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="5481" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="4751" y="5484.2104">soft_body_get_linear_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5493.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="4751" y="5497.0151">soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="5506.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="4751" y="5509.8198">soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5519.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="4751" y="5522.6245">soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="4742" cy="5532.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="4751" y="5535.4292">soft_body_get_volume_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5545.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="4751" y="5548.2339">soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void</text><ellipse cx="4742" cy="5557.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="4751" y="5561.0386">soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5570.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="4751" y="5573.8433">soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void</text><ellipse cx="4742" cy="5583.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="4751" y="5586.6479">soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5596.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="499" x="4751" y="5599.4526">soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void</text><ellipse cx="4742" cy="5609.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="4751" y="5612.2573">soft_body_get_damping_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5621.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="4751" y="5625.062">soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void</text><ellipse cx="4742" cy="5634.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="4751" y="5637.8667">soft_body_get_drag_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="4742" cy="5647.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="4751" y="5650.6714">soft_body_move_point(RID p_body, int p_point_index, const Vector3 &amp; p_global_position) = 0 : void</text><ellipse cx="4742" cy="5660.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="4751" y="5663.4761">soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3</text><ellipse cx="4742" cy="5673.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="4751" y="5676.2808">soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3</text><ellipse cx="4742" cy="5685.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="340" x="4751" y="5689.0854">soft_body_remove_all_pinned_points(RID p_body) = 0 : void</text><ellipse cx="4742" cy="5698.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="414" x="4751" y="5701.8901">soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void</text><ellipse cx="4742" cy="5711.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="4751" y="5714.6948">soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool</text><ellipse cx="4742" cy="5724.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="4751" y="5727.4995">joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType</text><ellipse cx="4742" cy="5737.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="4751" y="5740.3042">joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void</text><ellipse cx="4742" cy="5749.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="288" x="4751" y="5753.1089">joint_get_solver_priority(RID p_joint) const = 0 : int</text><ellipse cx="4742" cy="5762.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="4751" y="5765.9136">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="4742" cy="5775.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="4751" y="5778.7183">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="4742" cy="5788.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="628" x="4751" y="5791.5229">joint_create_pin(RID p_body_A, const Vector3 &amp; p_local_A, RID p_body_B, const Vector3 &amp; p_local_B) = 0 : RID</text><ellipse cx="4742" cy="5801.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="4751" y="5804.3276">pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5813.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="4751" y="5817.1323">pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5826.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="4751" y="5829.937">pin_joint_set_local_a(RID p_joint, const Vector3 &amp; p_A) = 0 : void</text><ellipse cx="4742" cy="5839.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="4751" y="5842.7417">pin_joint_get_local_a(RID p_joint) const = 0 : Vector3</text><ellipse cx="4742" cy="5852.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="4751" y="5855.5464">pin_joint_set_local_b(RID p_joint, const Vector3 &amp; p_B) = 0 : void</text><ellipse cx="4742" cy="5865.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="4751" y="5868.3511">pin_joint_get_local_b(RID p_joint) const = 0 : Vector3</text><ellipse cx="4742" cy="5877.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="682" x="4751" y="5881.1558">joint_create_hinge(RID p_body_A, const Transform &amp; p_hinge_A, RID p_body_B, const Transform &amp; p_hinge_B) = 0 : RID</text><ellipse cx="4742" cy="5890.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="995" x="4751" y="5893.9604">joint_create_hinge_simple(RID p_body_A, const Vector3 &amp; p_pivot_A, const Vector3 &amp; p_axis_A, RID p_body_B, const Vector3 &amp; p_pivot_B, const Vector3 &amp; p_axis_B) = 0 : RID</text><ellipse cx="4742" cy="5903.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="5906.7651">hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5916.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="4751" y="5919.5698">hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5929.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="4751" y="5932.3745">hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void</text><ellipse cx="4742" cy="5941.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="4751" y="5945.1792">hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool</text><ellipse cx="4742" cy="5954.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="752" x="4751" y="5957.9839">joint_create_slider(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="5967.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="4751" y="5970.7886">slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="5980.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="4751" y="5983.5933">slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="5993.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="780" x="4751" y="5996.3979">joint_create_cone_twist(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="6005.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="4751" y="6009.2026">cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="6018.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="4751" y="6022.0073">cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float</text><ellipse cx="4742" cy="6031.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="794" x="4751" y="6034.812">joint_create_generic_6dof(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="4742" cy="6044.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="740" x="4751" y="6047.6167">generic_6dof_joint_set_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void</text><ellipse cx="4742" cy="6057.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="661" x="4751" y="6060.4214">generic_6dof_joint_get_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float</text><ellipse cx="4742" cy="6070.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="700" x="4751" y="6073.2261">generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void</text><ellipse cx="4742" cy="6082.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="614" x="4751" y="6086.0308">generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool</text><ellipse cx="4742" cy="6095.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="4751" y="6098.8354">free(RID p_rid) = 0 : void</text><ellipse cx="4742" cy="6108.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="4751" y="6111.6401">set_active(bool p_active) = 0 : void</text><ellipse cx="4742" cy="6121.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="4751" y="6124.4448">init() = 0 : void</text><ellipse cx="4742" cy="6134.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="4751" y="6137.2495">step(float p_step) = 0 : void</text><ellipse cx="4742" cy="6146.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="4751" y="6150.0542">flush_queries() = 0 : void</text><ellipse cx="4742" cy="6159.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="4751" y="6162.8589">finish() = 0 : void</text><ellipse cx="4742" cy="6172.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="4751" y="6175.6636">is_flushing_queries() const = 0 : bool</text><ellipse cx="4742" cy="6185.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="4751" y="6188.4683">get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="4742" cy="6198.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="4751" y="6201.2729">PhysicsServer() : void</text><ellipse cx="4742" cy="6210.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="4751" y="6214.0776">~PhysicsServer() : void</text></a><!--MD5=[15ab565944242ceeac87f602c1eae9a8]
class C_0002302096389852429221--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" target="_top" title="Physics2DDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" xlink:show="new" xlink:title="Physics2DDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="637.0156" id="C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.5;" width="475" x="6141" y="4623.4531"/><ellipse cx="6292.75" cy="4639.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6292.8594,4634.7969 L6291.7031,4639.875 L6294.0313,4639.875 L6292.8594,4634.7969 Z M6291.375,4632.5625 L6294.3594,4632.5625 L6297.7188,4644.9531 L6295.2656,4644.9531 L6294.5,4641.8906 L6291.2188,4641.8906 L6290.4688,4644.9531 L6288.0313,4644.9531 L6291.375,4632.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="6313.25" y="4643.6074">Physics2DDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6142" x2="6615" y1="4655.4531" y2="4655.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6142" x2="6615" y1="4663.4531" y2="4663.4531"/><ellipse cx="6152" cy="4674.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="6161" y="4677.6636">get_class() const : String</text><ellipse cx="6152" cy="4687.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6161" y="4690.4683">_get_class_namev() const : const StringName *</text><ellipse cx="6152" cy="4700.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="6161" y="4703.2729">get_class_ptr_static() : void *</text><ellipse cx="6152" cy="4712.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="6161" y="4716.0776">get_class_static() : String</text><ellipse cx="6152" cy="4725.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="6161" y="4728.8823">get_parent_class_static() : String</text><ellipse cx="6152" cy="4738.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="6161" y="4741.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="6152" cy="4751.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="6161" y="4754.4917">get_category_static() : String</text><ellipse cx="6152" cy="4764.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="6161" y="4767.2964">inherits_static() : String</text><ellipse cx="6152" cy="4776.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="6161" y="4780.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="6152" cy="4789.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="6161" y="4792.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="6152" cy="4802.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="6161" y="4805.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="6152" cy="4815.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="6161" y="4818.5151">initialize_class() : void</text><ellipse cx="6152" cy="4828.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="6161" y="4831.3198">get_total_gravity() const = 0 : Vector2</text><ellipse cx="6152" cy="4840.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="6161" y="4844.1245">get_total_linear_damp() const = 0 : float</text><ellipse cx="6152" cy="4853.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="6161" y="4856.9292">get_total_angular_damp() const = 0 : float</text><ellipse cx="6152" cy="4866.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="6161" y="4869.7339">get_inverse_mass() const = 0 : float</text><ellipse cx="6152" cy="4879.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="6161" y="4882.5386">get_inverse_inertia() const = 0 : real_t</text><ellipse cx="6152" cy="4892.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="6161" y="4895.3433">set_linear_velocity(const Vector2 &amp; p_velocity) = 0 : void</text><ellipse cx="6152" cy="4904.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="6161" y="4908.1479">get_linear_velocity() const = 0 : Vector2</text><ellipse cx="6152" cy="4917.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="6161" y="4920.9526">set_angular_velocity(real_t p_velocity) = 0 : void</text><ellipse cx="6152" cy="4930.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="227" x="6161" y="4933.7573">get_angular_velocity() const = 0 : real_t</text><ellipse cx="6152" cy="4943.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="6161" y="4946.562">set_transform(const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6152" cy="4956.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="6161" y="4959.3667">get_transform() const = 0 : Transform2D</text><ellipse cx="6152" cy="4968.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="6161" y="4972.1714">add_central_force(const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6152" cy="4981.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="6161" y="4984.9761">add_force(const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6152" cy="4994.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="6161" y="4997.7808">add_torque(real_t p_torque) = 0 : void</text><ellipse cx="6152" cy="5007.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6161" y="5010.5854">apply_central_impulse(const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6152" cy="5020.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="6161" y="5023.3901">apply_torque_impulse(real_t p_torque) = 0 : void</text><ellipse cx="6152" cy="5032.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="6161" y="5036.1948">apply_impulse(const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6152" cy="5045.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="6161" y="5048.9995">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="6152" cy="5058.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="6161" y="5061.8042">is_sleeping() const = 0 : bool</text><ellipse cx="6152" cy="5071.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="6161" y="5074.6089">get_contact_count() const = 0 : int</text><ellipse cx="6152" cy="5084.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6161" y="5087.4136">get_contact_local_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="5097.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="6161" y="5100.2183">get_contact_local_normal(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="5109.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="6161" y="5113.0229">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="6152" cy="5122.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="6161" y="5125.8276">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="6152" cy="5135.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="6161" y="5138.6323">get_contact_collider_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="5148.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="6161" y="5151.437">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="6152" cy="5161.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="6161" y="5164.2417">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="6152" cy="5173.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="6161" y="5177.0464">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="6152" cy="5186.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="6161" y="5189.8511">get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant</text><ellipse cx="6152" cy="5199.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="6161" y="5202.6558">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="6152" cy="5212.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="6161" y="5215.4604">get_step() const = 0 : real_t</text><ellipse cx="6152" cy="5225.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6161" y="5228.2651">integrate_forces() : void</text><ellipse cx="6152" cy="5237.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="6161" y="5241.0698">get_space_state() = 0 : Physics2DDirectSpaceState *</text><ellipse cx="6152" cy="5250.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="6161" y="5253.8745">Physics2DDirectBodyState() : void</text></a><!--MD5=[ca40d70d705a3e45bf51321044ec5376]
class C_0000236996062289735257--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" target="_top" title="Physics2DDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" xlink:show="new" xlink:title="Physics2DDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="304.0938" id="C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.5;" width="1992" x="4299.5" y="1668.4531"/><ellipse cx="5205.75" cy="1684.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5205.8594,1679.7969 L5204.7031,1684.875 L5207.0313,1684.875 L5205.8594,1679.7969 Z M5204.375,1677.5625 L5207.3594,1677.5625 L5210.7188,1689.9531 L5208.2656,1689.9531 L5207.5,1686.8906 L5204.2188,1686.8906 L5203.4688,1689.9531 L5201.0313,1689.9531 L5204.375,1677.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="171" x="5226.25" y="1688.6074">Physics2DDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4300.5" x2="6290.5" y1="1700.4531" y2="1700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4300.5" x2="6290.5" y1="1708.4531" y2="1708.4531"/><ellipse cx="4310.5" cy="1719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4319.5" y="1722.6636">get_class() const : String</text><ellipse cx="4310.5" cy="1732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4319.5" y="1735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="4310.5" cy="1745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4319.5" y="1748.2729">get_class_ptr_static() : void *</text><ellipse cx="4310.5" cy="1757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4319.5" y="1761.0776">get_class_static() : String</text><ellipse cx="4310.5" cy="1770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4319.5" y="1773.8823">get_parent_class_static() : String</text><ellipse cx="4310.5" cy="1783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4319.5" y="1786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4310.5" cy="1796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4319.5" y="1799.4917">get_category_static() : String</text><ellipse cx="4310.5" cy="1809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4319.5" y="1812.2964">inherits_static() : String</text><ellipse cx="4310.5" cy="1821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4319.5" y="1825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4310.5" cy="1834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4319.5" y="1837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4310.5" cy="1847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4319.5" y="1850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4310.5" cy="1860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4319.5" y="1863.5151">initialize_class() : void</text><ellipse cx="4310.5" cy="1873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1563" x="4319.5" y="1876.3198">intersect_ray(const Vector2 &amp; p_from, const Vector2 &amp; p_to, Physics2DDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1703" x="4319.5" y="1889.1245">intersect_point(const Vector2 &amp; p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="4310.5" cy="1898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1950" x="4319.5" y="1901.9292">intersect_point_on_canvas(const Vector2 &amp; p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="4310.5" cy="1911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1966" x="4319.5" y="1914.7339">intersect_shape(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="4310.5" cy="1924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1829" x="4319.5" y="1927.5386">cast_motion(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1888" x="4319.5" y="1940.3433">collide_shape(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Vector2 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1821" x="4319.5" y="1953.1479">rest_info(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="4310.5" cy="1962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="4319.5" y="1965.9526">Physics2DDirectSpaceState() : void</text></a><!--MD5=[9eb4616909927b8afaeaff475656c5e3]
class C_0001801355352189289676--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" target="_top" title="Physics2DDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" xlink:show="new" xlink:title="Physics2DDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="137.6328" id="C_0001801355352189289676" style="stroke: #A80036; stroke-width: 1.5;" width="274" x="7878.5" y="47.9531"/><ellipse cx="7893.5" cy="63.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7896.4688,69.5938 Q7895.8906,69.8906 7895.25,70.0313 Q7894.6094,70.1875 7893.9063,70.1875 Q7891.4063,70.1875 7890.0781,68.5469 Q7888.7656,66.8906 7888.7656,63.7656 Q7888.7656,60.6406 7890.0781,58.9844 Q7891.4063,57.3281 7893.9063,57.3281 Q7894.6094,57.3281 7895.25,57.4844 Q7895.9063,57.6406 7896.4688,57.9375 L7896.4688,60.6563 Q7895.8438,60.0781 7895.25,59.8125 Q7894.6563,59.5313 7894.0313,59.5313 Q7892.6875,59.5313 7892,60.6094 Q7891.3125,61.6719 7891.3125,63.7656 Q7891.3125,65.8594 7892,66.9375 Q7892.6875,68 7894.0313,68 Q7894.6563,68 7895.25,67.7344 Q7895.8438,67.4531 7896.4688,66.875 L7896.4688,69.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="242" x="7907.5" y="68.1074">Physics2DDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7879.5" x2="8151.5" y1="79.9531" y2="79.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="85.9531"/><ellipse cx="7889.5" cy="90.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="7898.5" y="94.1636">position : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="98.7578"/><ellipse cx="7889.5" cy="103.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7898.5" y="106.9683">normal : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="111.5625"/><ellipse cx="7889.5" cy="116.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="7898.5" y="119.7729">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="124.3672"/><ellipse cx="7889.5" cy="129.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="7898.5" y="132.5776">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="137.1719"/><ellipse cx="7889.5" cy="142.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="7898.5" y="145.3823">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="149.9766"/><ellipse cx="7889.5" cy="154.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="7898.5" y="158.187">shape : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="7884.5" y="162.7813"/><ellipse cx="7889.5" cy="167.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="7898.5" y="170.9917">metadata : Variant</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7879.5" x2="8151.5" y1="177.5859" y2="177.5859"/><!--MD5=[833071aa6dd5b089efecfc256c21fee2]
class C_0001771770302499309898--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" target="_top" title="Physics2DDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" xlink:show="new" xlink:title="Physics2DDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="112.0234" id="C_0001771770302499309898" style="stroke: #A80036; stroke-width: 1.5;" width="292" x="11379.5" y="60.9531"/><ellipse cx="11394.5" cy="76.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11397.4688,82.5938 Q11396.8906,82.8906 11396.25,83.0313 Q11395.6094,83.1875 11394.9063,83.1875 Q11392.4063,83.1875 11391.0781,81.5469 Q11389.7656,79.8906 11389.7656,76.7656 Q11389.7656,73.6406 11391.0781,71.9844 Q11392.4063,70.3281 11394.9063,70.3281 Q11395.6094,70.3281 11396.25,70.4844 Q11396.9063,70.6406 11397.4688,70.9375 L11397.4688,73.6563 Q11396.8438,73.0781 11396.25,72.8125 Q11395.6563,72.5313 11395.0313,72.5313 Q11393.6875,72.5313 11393,73.6094 Q11392.3125,74.6719 11392.3125,76.7656 Q11392.3125,78.8594 11393,79.9375 Q11393.6875,81 11395.0313,81 Q11395.6563,81 11396.25,80.7344 Q11396.8438,80.4531 11397.4688,79.875 L11397.4688,82.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="260" x="11408.5" y="81.1074">Physics2DDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11380.5" x2="11670.5" y1="92.9531" y2="92.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="98.9531"/><ellipse cx="11390.5" cy="103.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="11399.5" y="107.1636">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="111.7578"/><ellipse cx="11390.5" cy="116.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="11399.5" y="119.9683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="124.5625"/><ellipse cx="11390.5" cy="129.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="11399.5" y="132.7729">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="137.3672"/><ellipse cx="11390.5" cy="142.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="11399.5" y="145.5776">shape : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11385.5" y="150.1719"/><ellipse cx="11390.5" cy="155.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="11399.5" y="158.3823">metadata : Variant</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="11380.5" x2="11670.5" y1="164.9766" y2="164.9766"/><!--MD5=[75170794dfa38b97f308a928ae46e341]
class C_0001561529841391244418--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" target="_top" title="Physics2DServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" xlink:show="new" xlink:title="Physics2DServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="1904.6797" id="C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.5;" width="1408" x="6722.5" y="3989.4531"/><ellipse cx="7371.75" cy="4005.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7371.8594,4000.7969 L7370.7031,4005.875 L7373.0313,4005.875 L7371.8594,4000.7969 Z M7370.375,3998.5625 L7373.3594,3998.5625 L7376.7188,4010.9531 L7374.2656,4010.9531 L7373.5,4007.8906 L7370.2188,4007.8906 L7369.4688,4010.9531 L7367.0313,4010.9531 L7370.375,3998.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="7392.25" y="4009.6074">Physics2DServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6723.5" x2="8129.5" y1="4021.4531" y2="4021.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6723.5" x2="8129.5" y1="4029.4531" y2="4029.4531"/><ellipse cx="6733.5" cy="4040.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="6742.5" y="4043.6636">get_class() const : String</text><ellipse cx="6733.5" cy="4053.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6742.5" y="4056.4683">_get_class_namev() const : const StringName *</text><ellipse cx="6733.5" cy="4066.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="6742.5" y="4069.2729">get_class_ptr_static() : void *</text><ellipse cx="6733.5" cy="4078.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="6742.5" y="4082.0776">get_class_static() : String</text><ellipse cx="6733.5" cy="4091.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="6742.5" y="4094.8823">get_parent_class_static() : String</text><ellipse cx="6733.5" cy="4104.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="6742.5" y="4107.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="6733.5" cy="4117.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="6742.5" y="4120.4917">get_category_static() : String</text><ellipse cx="6733.5" cy="4130.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="6742.5" y="4133.2964">inherits_static() : String</text><ellipse cx="6733.5" cy="4142.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="6742.5" y="4146.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="6733.5" cy="4155.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="6742.5" y="4158.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="6733.5" cy="4168.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="6742.5" y="4171.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="6733.5" cy="4181.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="6742.5" y="4184.5151">initialize_class() : void</text><ellipse cx="6733.5" cy="4194.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="202" x="6742.5" y="4197.3198">get_singleton() : Physics2DServer *</text><ellipse cx="6733.5" cy="4206.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="6742.5" y="4210.1245">line_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4219.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="6742.5" y="4222.9292">ray_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4232.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="6742.5" y="4235.7339">segment_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4245.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="6742.5" y="4248.5386">circle_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4258.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="198" x="6742.5" y="4261.3433">rectangle_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4270.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="6742.5" y="4274.1479">capsule_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4283.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="237" x="6742.5" y="4286.9526">convex_polygon_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4296.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="243" x="6742.5" y="4299.7573">concave_polygon_shape_create() = 0 : RID</text><ellipse cx="6733.5" cy="4309.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6742.5" y="4312.562">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="6733.5" cy="4322.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="6742.5" y="4325.3667">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="6733.5" cy="4334.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="6742.5" y="4338.1714">shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType</text><ellipse cx="6733.5" cy="4347.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="6742.5" y="4350.9761">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="6733.5" cy="4360.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="6742.5" y="4363.7808">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="6733.5" cy="4373.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1382" x="6742.5" y="4376.5854">shape_collide(RID p_shape_A, const Transform2D &amp; p_xform_A, const Vector2 &amp; p_motion_A, RID p_shape_B, const Transform2D &amp; p_xform_B, const Vector2 &amp; p_motion_B, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="6733.5" cy="4386.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="6742.5" y="4389.3901">space_create() = 0 : RID</text><ellipse cx="6733.5" cy="4398.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="6742.5" y="4402.1948">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="6733.5" cy="4411.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="6742.5" y="4414.9995">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="6733.5" cy="4424.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="6742.5" y="4427.8042">space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="4437.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="6742.5" y="4440.6089">space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="4450.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="6742.5" y="4453.4136">space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *</text><ellipse cx="6733.5" cy="4463.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="6742.5" y="4466.2183">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="6733.5" cy="4475.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="6742.5" y="4479.0229">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector2&gt;</text><ellipse cx="6733.5" cy="4488.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="6742.5" y="4491.8276">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="6733.5" cy="4501.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="6742.5" y="4504.6323">area_create() = 0 : RID</text><ellipse cx="6733.5" cy="4514.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="6742.5" y="4517.437">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="6733.5" cy="4527.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="6742.5" y="4530.2417">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="6733.5" cy="4539.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="4543.0464">area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="4552.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="6742.5" y="4555.8511">area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode</text><ellipse cx="6733.5" cy="4565.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="742" x="6742.5" y="4568.6558">area_add_shape(RID p_area, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="6733.5" cy="4578.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="6742.5" y="4581.4604">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="6733.5" cy="4591.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="6742.5" y="4594.2651">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="4603.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="6742.5" y="4607.0698">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="6733.5" cy="4616.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="6742.5" y="4619.8745">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="6733.5" cy="4629.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="6742.5" y="4632.6792">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="4642.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="6742.5" y="4645.4839">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="6733.5" cy="4655.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="6742.5" y="4658.2886">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="6733.5" cy="4667.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="6742.5" y="4671.0933">area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="6733.5" cy="4680.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="6742.5" y="4683.8979">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="6733.5" cy="4693.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6742.5" y="4696.7026">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="6733.5" cy="4706.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="6742.5" y="4709.5073">area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="6733.5" cy="4719.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="6742.5" y="4722.312">area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="6733.5" cy="4731.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="618" x="6742.5" y="4735.1167">area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="6733.5" cy="4744.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="6742.5" y="4747.9214">area_set_transform(RID p_area, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="4757.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="6742.5" y="4760.7261">area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="6733.5" cy="4770.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="4773.5308">area_get_transform(RID p_area) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="4783.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="6742.5" y="4786.3354">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="6733.5" cy="4795.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="6742.5" y="4799.1401">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="6733.5" cy="4808.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="6742.5" y="4811.9448">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="6733.5" cy="4821.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="4824.7495">area_set_pickable(RID p_area, bool p_pickable) = 0 : void</text><ellipse cx="6733.5" cy="4834.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="6742.5" y="4837.5542">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="6733.5" cy="4847.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="4850.3589">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="6733.5" cy="4859.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="133" x="6742.5" y="4863.1636">body_create() = 0 : RID</text><ellipse cx="6733.5" cy="4872.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="6742.5" y="4875.9683">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="6733.5" cy="4885.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="6742.5" y="4888.7729">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="6733.5" cy="4898.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="6742.5" y="4901.5776">body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="4911.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="6742.5" y="4914.3823">body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode</text><ellipse cx="6733.5" cy="4923.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="746" x="6742.5" y="4927.187">body_add_shape(RID p_body, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="6733.5" cy="4936.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="6742.5" y="4939.9917">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="6733.5" cy="4949.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="6742.5" y="4952.7964">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="6733.5" cy="4962.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="6742.5" y="4965.6011">body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant &amp; p_metadata) = 0 : void</text><ellipse cx="6733.5" cy="4975.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="6742.5" y="4978.4058">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="6733.5" cy="4988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="6742.5" y="4991.2104">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="6733.5" cy="5000.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="6742.5" y="5004.0151">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="6733.5" cy="5013.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="6742.5" y="5016.8198">body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant</text><ellipse cx="6733.5" cy="5026.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="6742.5" y="5029.6245">body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="6733.5" cy="5039.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="6742.5" y="5042.4292">body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void</text><ellipse cx="6733.5" cy="5052.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="6742.5" y="5055.2339">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="6733.5" cy="5064.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="6742.5" y="5068.0386">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="6733.5" cy="5077.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="5080.8433">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="6733.5" cy="5090.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="6742.5" y="5093.6479">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="5103.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="6742.5" y="5106.4526">body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="6733.5" cy="5116.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="6742.5" y="5119.2573">body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="5128.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="6742.5" y="5132.062">body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void</text><ellipse cx="6733.5" cy="5141.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="6742.5" y="5144.8667">body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode</text><ellipse cx="6733.5" cy="5154.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="6742.5" y="5157.6714">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="6733.5" cy="5167.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="6742.5" y="5170.4761">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="5180.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="6742.5" y="5183.2808">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="6733.5" cy="5192.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="6742.5" y="5196.0854">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="6733.5" cy="5205.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="561" x="6742.5" y="5208.8901">body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="6733.5" cy="5218.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="516" x="6742.5" y="5221.6948">body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="6733.5" cy="5231.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="6742.5" y="5234.4995">body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="6733.5" cy="5244.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="6742.5" y="5247.3042">body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="6733.5" cy="5256.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="6742.5" y="5260.1089">body_set_applied_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="5269.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="6742.5" y="5272.9136">body_get_applied_force(RID p_body) const = 0 : Vector2</text><ellipse cx="6733.5" cy="5282.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="6742.5" y="5285.7183">body_set_applied_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="5295.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="6742.5" y="5298.5229">body_get_applied_torque(RID p_body) const = 0 : float</text><ellipse cx="6733.5" cy="5308.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="6742.5" y="5311.3276">body_add_central_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="5320.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="515" x="6742.5" y="5324.1323">body_add_force(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="6733.5" cy="5333.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="6742.5" y="5336.937">body_add_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="5346.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="6742.5" y="5349.7417">body_apply_central_impulse(RID p_body, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6733.5" cy="5359.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="6742.5" y="5362.5464">body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void</text><ellipse cx="6733.5" cy="5372.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="555" x="6742.5" y="5375.3511">body_apply_impulse(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="6733.5" cy="5384.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="6742.5" y="5388.1558">body_set_axis_velocity(RID p_body, const Vector2 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="6733.5" cy="5397.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="6742.5" y="5400.9604">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="6733.5" cy="5410.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="6742.5" y="5413.7651">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="6733.5" cy="5423.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="6742.5" y="5426.5698">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="6733.5" cy="5436.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="6742.5" y="5439.3745">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="6733.5" cy="5448.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="6742.5" y="5452.1792">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="6733.5" cy="5461.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="6742.5" y="5464.9839">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="6733.5" cy="5474.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="6742.5" y="5477.7886">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="6733.5" cy="5487.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="5490.5933">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="6733.5" cy="5500.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="6742.5" y="5503.3979">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="6733.5" cy="5512.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="6742.5" y="5516.2026">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="6733.5" cy="5525.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1138" x="6742.5" y="5529.0073">body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="6733.5" cy="5538.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="6742.5" y="5541.812">body_set_pickable(RID p_body, bool p_pickable) = 0 : void</text><ellipse cx="6733.5" cy="5551.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="6742.5" y="5554.6167">body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *</text><ellipse cx="6733.5" cy="5564.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1344" x="6742.5" y="5567.4214">body_test_motion(RID p_body, const Transform2D &amp; p_from, const Vector2 &amp; p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="6733.5" cy="5577.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1279" x="6742.5" y="5580.2261">body_test_ray_separation(RID p_body, const Transform2D &amp; p_transform, bool p_infinite_inertia, Vector2 &amp; r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="6733.5" cy="5589.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="6742.5" y="5593.0308">joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5602.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="6742.5" y="5605.8354">joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5615.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="6742.5" y="5618.6401">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="6733.5" cy="5628.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="6742.5" y="5631.4448">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="6733.5" cy="5641.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="6742.5" y="5644.2495">pin_joint_create(const Vector2 &amp; p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="6733.5" cy="5653.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="857" x="6742.5" y="5657.0542">groove_joint_create(const Vector2 &amp; p_a_groove1, const Vector2 &amp; p_a_groove2, const Vector2 &amp; p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID</text><ellipse cx="6733.5" cy="5666.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="777" x="6742.5" y="5669.8589">damped_spring_joint_create(const Vector2 &amp; p_anchor_a, const Vector2 &amp; p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="6733.5" cy="5679.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="572" x="6742.5" y="5682.6636">pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5692.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="6742.5" y="5695.4683">pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5705.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="678" x="6742.5" y="5708.2729">damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void</text><ellipse cx="6733.5" cy="5717.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="6742.5" y="5721.0776">damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t</text><ellipse cx="6733.5" cy="5730.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="6742.5" y="5733.8823">joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType</text><ellipse cx="6733.5" cy="5743.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="6742.5" y="5746.687">free(RID p_rid) = 0 : void</text><ellipse cx="6733.5" cy="5756.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="6742.5" y="5759.4917">set_active(bool p_active) = 0 : void</text><ellipse cx="6733.5" cy="5769.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="6742.5" y="5772.2964">init() = 0 : void</text><ellipse cx="6733.5" cy="5781.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="6742.5" y="5785.1011">step(float p_step) = 0 : void</text><ellipse cx="6733.5" cy="5794.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="6742.5" y="5797.9058">sync() = 0 : void</text><ellipse cx="6733.5" cy="5807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="6742.5" y="5810.7104">flush_queries() = 0 : void</text><ellipse cx="6733.5" cy="5820.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="121" x="6742.5" y="5823.5151">end_sync() = 0 : void</text><ellipse cx="6733.5" cy="5833.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="6742.5" y="5836.3198">finish() = 0 : void</text><ellipse cx="6733.5" cy="5845.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="6742.5" y="5849.1245">is_flushing_queries() const = 0 : bool</text><ellipse cx="6733.5" cy="5858.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="359" x="6742.5" y="5861.9292">get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="6733.5" cy="5871.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="6742.5" y="5874.7339">Physics2DServer() : void</text><ellipse cx="6733.5" cy="5884.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="6742.5" y="5887.5386">~Physics2DServer() : void</text></a><!--MD5=[3d4aa6b0ee5484ffc25bead94ef18955]
class C_0001485048025194488343--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" target="_top" title="TranslationServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" xlink:show="new" xlink:title="TranslationServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="470.5547" id="C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.5;" width="412" x="8530.5" y="4706.4531"/><ellipse cx="8677.25" cy="4722.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8680.2188,4728.0938 Q8679.6406,4728.3906 8679,4728.5313 Q8678.3594,4728.6875 8677.6563,4728.6875 Q8675.1563,4728.6875 8673.8281,4727.0469 Q8672.5156,4725.3906 8672.5156,4722.2656 Q8672.5156,4719.1406 8673.8281,4717.4844 Q8675.1563,4715.8281 8677.6563,4715.8281 Q8678.3594,4715.8281 8679,4715.9844 Q8679.6563,4716.1406 8680.2188,4716.4375 L8680.2188,4719.1563 Q8679.5938,4718.5781 8679,4718.3125 Q8678.4063,4718.0313 8677.7813,4718.0313 Q8676.4375,4718.0313 8675.75,4719.1094 Q8675.0625,4720.1719 8675.0625,4722.2656 Q8675.0625,4724.3594 8675.75,4725.4375 Q8676.4375,4726.5 8677.7813,4726.5 Q8678.4063,4726.5 8679,4726.2344 Q8679.5938,4725.9531 8680.2188,4725.375 L8680.2188,4728.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="8697.75" y="4726.6074">TranslationServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8531.5" x2="8941.5" y1="4738.4531" y2="4738.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8531.5" x2="8941.5" y1="4746.4531" y2="4746.4531"/><ellipse cx="8541.5" cy="4757.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="8550.5" y="4760.6636">get_class() const : String</text><ellipse cx="8541.5" cy="4770.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="8550.5" y="4773.4683">_get_class_namev() const : const StringName *</text><ellipse cx="8541.5" cy="4783.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="8550.5" y="4786.2729">get_class_ptr_static() : void *</text><ellipse cx="8541.5" cy="4795.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="8550.5" y="4799.0776">get_class_static() : String</text><ellipse cx="8541.5" cy="4808.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="8550.5" y="4811.8823">get_parent_class_static() : String</text><ellipse cx="8541.5" cy="4821.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="8550.5" y="4824.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="8541.5" cy="4834.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="8550.5" y="4837.4917">get_category_static() : String</text><ellipse cx="8541.5" cy="4847.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="8550.5" y="4850.2964">inherits_static() : String</text><ellipse cx="8541.5" cy="4859.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="8550.5" y="4863.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="8541.5" cy="4872.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="8550.5" y="4875.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="8541.5" cy="4885.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="8550.5" y="4888.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="8541.5" cy="4898.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="8550.5" y="4901.5151">initialize_class() : void</text><ellipse cx="8541.5" cy="4911.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="8550.5" y="4914.3198">get_singleton() : TranslationServer *</text><ellipse cx="8541.5" cy="4923.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="8550.5" y="4927.1245">set_enabled(bool p_enabled) : void</text><ellipse cx="8541.5" cy="4936.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="8550.5" y="4939.9292">is_enabled() const : bool</text><ellipse cx="8541.5" cy="4949.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="8550.5" y="4952.7339">set_locale(const String &amp; p_locale) : void</text><ellipse cx="8541.5" cy="4962.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="8550.5" y="4965.5386">get_locale() const : String</text><ellipse cx="8541.5" cy="4975.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="8550.5" y="4978.3433">get_locale_name(const String &amp; p_locale) const : String</text><ellipse cx="8541.5" cy="4987.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="8550.5" y="4991.1479">get_loaded_locales() const : Array</text><ellipse cx="8541.5" cy="5000.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="8550.5" y="5003.9526">add_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="5013.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="8550.5" y="5016.7573">remove_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="5026.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="8550.5" y="5029.562">translate(const StringName &amp; p_message) const : StringName</text><ellipse cx="8541.5" cy="5039.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="191" x="8550.5" y="5042.3667">get_all_locales() : Vector&lt;String&gt;</text><ellipse cx="8541.5" cy="5051.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="229" x="8550.5" y="5055.1714">get_all_locale_names() : Vector&lt;String&gt;</text><ellipse cx="8541.5" cy="5064.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="8550.5" y="5067.9761">is_locale_valid(const String &amp; p_locale) : bool</text><ellipse cx="8541.5" cy="5077.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="8550.5" y="5080.7808">standardize_locale(const String &amp; p_locale) : String</text><ellipse cx="8541.5" cy="5090.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="8550.5" y="5093.5854">get_language_code(const String &amp; p_locale) : String</text><ellipse cx="8541.5" cy="5103.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="8550.5" y="5106.3901">set_tool_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="8541.5" cy="5115.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="8550.5" y="5119.1948">tool_translate(const StringName &amp; p_message) const : StringName</text><ellipse cx="8541.5" cy="5128.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="8550.5" y="5131.9995">setup() : void</text><ellipse cx="8541.5" cy="5141.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="8550.5" y="5144.8042">clear() : void</text><ellipse cx="8541.5" cy="5154.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="8550.5" y="5157.6089">load_translations() : void</text><ellipse cx="8541.5" cy="5167.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="8550.5" y="5170.4136">TranslationServer() : void</text></a><!--MD5=[6de3aa3d86b19b8e0f1ee230f1ebf3bf]
class C_0000314051240057057851--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" target="_top" title="InputMap" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" xlink:show="new" xlink:title="InputMap" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="444.9453" id="C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.5;" width="921" x="20679" y="4719.4531"/><ellipse cx="21106.25" cy="4735.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M21109.2188,4741.0938 Q21108.6406,4741.3906 21108,4741.5313 Q21107.3594,4741.6875 21106.6563,4741.6875 Q21104.1563,4741.6875 21102.8281,4740.0469 Q21101.5156,4738.3906 21101.5156,4735.2656 Q21101.5156,4732.1406 21102.8281,4730.4844 Q21104.1563,4728.8281 21106.6563,4728.8281 Q21107.3594,4728.8281 21108,4728.9844 Q21108.6563,4729.1406 21109.2188,4729.4375 L21109.2188,4732.1563 Q21108.5938,4731.5781 21108,4731.3125 Q21107.4063,4731.0313 21106.7813,4731.0313 Q21105.4375,4731.0313 21104.75,4732.1094 Q21104.0625,4733.1719 21104.0625,4735.2656 Q21104.0625,4737.3594 21104.75,4738.4375 Q21105.4375,4739.5 21106.7813,4739.5 Q21107.4063,4739.5 21108,4739.2344 Q21108.5938,4738.9531 21109.2188,4738.375 L21109.2188,4741.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="21126.75" y="4739.6074">InputMap</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20680" x2="21599" y1="4751.4531" y2="4751.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="20685" y="4757.4531"/><ellipse cx="20690" cy="4762.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="99" x="20699" y="4765.6636">ALL_DEVICES : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="20680" x2="21599" y1="4772.2578" y2="4772.2578"/><ellipse cx="20690" cy="4783.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="20699" y="4786.4683">get_class() const : String</text><ellipse cx="20690" cy="4796.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="20699" y="4799.2729">_get_class_namev() const : const StringName *</text><ellipse cx="20690" cy="4808.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="20699" y="4812.0776">get_class_ptr_static() : void *</text><ellipse cx="20690" cy="4821.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="20699" y="4824.8823">get_class_static() : String</text><ellipse cx="20690" cy="4834.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="20699" y="4837.687">get_parent_class_static() : String</text><ellipse cx="20690" cy="4847.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="20699" y="4850.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="20690" cy="4860.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="20699" y="4863.2964">get_category_static() : String</text><ellipse cx="20690" cy="4872.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="20699" y="4876.1011">inherits_static() : String</text><ellipse cx="20690" cy="4885.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="20699" y="4888.9058">is_class(const String &amp; p_class) const : bool</text><ellipse cx="20690" cy="4898.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="20699" y="4901.7104">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="20690" cy="4911.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="20699" y="4914.5151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="20690" cy="4924.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="20699" y="4927.3198">initialize_class() : void</text><ellipse cx="20690" cy="4936.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="157" x="20699" y="4940.1245">get_singleton() : InputMap *</text><ellipse cx="20690" cy="4949.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="20699" y="4952.9292">has_action(const StringName &amp; p_action) const : bool</text><ellipse cx="20690" cy="4962.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="20699" y="4965.7339">get_actions() const : List&lt;StringName&gt;</text><ellipse cx="20690" cy="4975.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="20699" y="4978.5386">add_action(const StringName &amp; p_action, float p_deadzone = 0.5) : void</text><ellipse cx="20690" cy="4988.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="20699" y="4991.3433">erase_action(const StringName &amp; p_action) : void</text><ellipse cx="20690" cy="5000.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="20699" y="5004.1479">action_get_deadzone(const StringName &amp; p_action) : float</text><ellipse cx="20690" cy="5013.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="20699" y="5016.9526">action_set_deadzone(const StringName &amp; p_action, float p_deadzone) : void</text><ellipse cx="20690" cy="5026.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="20699" y="5029.7573">action_add_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="20690" cy="5039.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="509" x="20699" y="5042.562">action_has_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : bool</text><ellipse cx="20690" cy="5052.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="20699" y="5055.3667">action_erase_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="20690" cy="5064.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="20699" y="5068.1714">action_erase_events(const StringName &amp; p_action) : void</text><ellipse cx="20690" cy="5077.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="20699" y="5080.9761">get_action_list(const StringName &amp; p_action) : const List&lt;Ref&lt;InputEvent&gt;&gt; *</text><ellipse cx="20690" cy="5090.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="533" x="20699" y="5093.7808">event_is_action(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action) const : bool</text><ellipse cx="20690" cy="5103.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="895" x="20699" y="5106.5854">event_get_action_status(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool</text><ellipse cx="20690" cy="5116.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="20699" y="5119.3901">get_action_map() const : const Map&lt;StringName,InputMap::Action&gt; &amp;</text><ellipse cx="20690" cy="5128.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="20699" y="5132.1948">load_from_globals() : void</text><ellipse cx="20690" cy="5141.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="20699" y="5144.9995">load_default() : void</text><ellipse cx="20690" cy="5154.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="20699" y="5157.8042">InputMap() : void</text><!--MD5=[c256f191a1f4c63b2807fd5478edf736]
class C_0001197720528033242618--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" target="_top" title="_ResourceLoader" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" xlink:show="new" xlink:title="_ResourceLoader" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="329.7031" id="C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.5;" width="633" x="754" y="4776.9531"/><ellipse cx="1012.25" cy="4792.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1015.2188,4798.5938 Q1014.6406,4798.8906 1014,4799.0313 Q1013.3594,4799.1875 1012.6563,4799.1875 Q1010.1563,4799.1875 1008.8281,4797.5469 Q1007.5156,4795.8906 1007.5156,4792.7656 Q1007.5156,4789.6406 1008.8281,4787.9844 Q1010.1563,4786.3281 1012.6563,4786.3281 Q1013.3594,4786.3281 1014,4786.4844 Q1014.6563,4786.6406 1015.2188,4786.9375 L1015.2188,4789.6563 Q1014.5938,4789.0781 1014,4788.8125 Q1013.4063,4788.5313 1012.7813,4788.5313 Q1011.4375,4788.5313 1010.75,4789.6094 Q1010.0625,4790.6719 1010.0625,4792.7656 Q1010.0625,4794.8594 1010.75,4795.9375 Q1011.4375,4797 1012.7813,4797 Q1013.4063,4797 1014,4796.7344 Q1014.5938,4796.4531 1015.2188,4795.875 L1015.2188,4798.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="108" x="1032.75" y="4797.1074">_ResourceLoader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="755" x2="1386" y1="4808.9531" y2="4808.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="755" x2="1386" y1="4816.9531" y2="4816.9531"/><ellipse cx="765" cy="4827.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="774" y="4831.1636">get_class() const : String</text><ellipse cx="765" cy="4840.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="774" y="4843.9683">_get_class_namev() const : const StringName *</text><ellipse cx="765" cy="4853.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="774" y="4856.7729">get_class_ptr_static() : void *</text><ellipse cx="765" cy="4866.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="774" y="4869.5776">get_class_static() : String</text><ellipse cx="765" cy="4879.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="774" y="4882.3823">get_parent_class_static() : String</text><ellipse cx="765" cy="4891.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="774" y="4895.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="765" cy="4904.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="774" y="4907.9917">get_category_static() : String</text><ellipse cx="765" cy="4917.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="774" y="4920.7964">inherits_static() : String</text><ellipse cx="765" cy="4930.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="774" y="4933.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="765" cy="4943.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="774" y="4946.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="765" cy="4956" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="774" y="4959.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="765" cy="4968.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="774" y="4972.0151">initialize_class() : void</text><ellipse cx="765" cy="4981.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="204" x="774" y="4984.8198">get_singleton() : _ResourceLoader *</text><ellipse cx="765" cy="4994.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="607" x="774" y="4997.6245">load_interactive(const String &amp; p_path, const String &amp; p_type_hint = "") : Ref&lt;ResourceInteractiveLoader&gt;</text><ellipse cx="765" cy="5007.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="774" y="5010.4292">load(const String &amp; p_path, const String &amp; p_type_hint = "", bool p_no_cache = false) : RES</text><ellipse cx="765" cy="5020.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="774" y="5023.2339">get_recognized_extensions_for_type(const String &amp; p_type) : PoolVector&lt;String&gt;</text><ellipse cx="765" cy="5032.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="774" y="5036.0386">set_abort_on_missing_resources(bool p_abort) : void</text><ellipse cx="765" cy="5045.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="774" y="5048.8433">get_dependencies(const String &amp; p_path) : PoolStringArray</text><ellipse cx="765" cy="5058.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="774" y="5061.6479">has(const String &amp; p_path) : bool</text><ellipse cx="765" cy="5071.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="774" y="5074.4526">has_cached(const String &amp; p_path) : bool</text><ellipse cx="765" cy="5084.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="774" y="5087.2573">exists(const String &amp; p_path, const String &amp; p_type_hint = "") : bool</text><ellipse cx="765" cy="5096.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="774" y="5100.062">_ResourceLoader() : void</text></a><!--MD5=[8320b79068f24653412391a69e41cea5]
class C_0001130773750498288283--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" target="_top" title="_ResourceSaver" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" xlink:show="new" xlink:title="_ResourceSaver" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="252.875" id="C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.5;" width="590" x="9077.5" y="4815.4531"/><ellipse cx="9318.25" cy="4831.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9321.2188,4837.0938 Q9320.6406,4837.3906 9320,4837.5313 Q9319.3594,4837.6875 9318.6563,4837.6875 Q9316.1563,4837.6875 9314.8281,4836.0469 Q9313.5156,4834.3906 9313.5156,4831.2656 Q9313.5156,4828.1406 9314.8281,4826.4844 Q9316.1563,4824.8281 9318.6563,4824.8281 Q9319.3594,4824.8281 9320,4824.9844 Q9320.6563,4825.1406 9321.2188,4825.4375 L9321.2188,4828.1563 Q9320.5938,4827.5781 9320,4827.3125 Q9319.4063,4827.0313 9318.7813,4827.0313 Q9317.4375,4827.0313 9316.75,4828.1094 Q9316.0625,4829.1719 9316.0625,4831.2656 Q9316.0625,4833.3594 9316.75,4834.4375 Q9317.4375,4835.5 9318.7813,4835.5 Q9319.4063,4835.5 9320,4835.2344 Q9320.5938,4834.9531 9321.2188,4834.375 L9321.2188,4837.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="9338.75" y="4835.6074">_ResourceSaver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9078.5" x2="9666.5" y1="4847.4531" y2="4847.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9078.5" x2="9666.5" y1="4855.4531" y2="4855.4531"/><ellipse cx="9088.5" cy="4866.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9097.5" y="4869.6636">get_class() const : String</text><ellipse cx="9088.5" cy="4879.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9097.5" y="4882.4683">_get_class_namev() const : const StringName *</text><ellipse cx="9088.5" cy="4892.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="9097.5" y="4895.2729">get_class_ptr_static() : void *</text><ellipse cx="9088.5" cy="4904.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="9097.5" y="4908.0776">get_class_static() : String</text><ellipse cx="9088.5" cy="4917.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="9097.5" y="4920.8823">get_parent_class_static() : String</text><ellipse cx="9088.5" cy="4930.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="9097.5" y="4933.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="9088.5" cy="4943.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="9097.5" y="4946.4917">get_category_static() : String</text><ellipse cx="9088.5" cy="4956.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="9097.5" y="4959.2964">inherits_static() : String</text><ellipse cx="9088.5" cy="4968.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9097.5" y="4972.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="9088.5" cy="4981.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9097.5" y="4984.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="9088.5" cy="4994.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="9097.5" y="4997.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="9088.5" cy="5007.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="9097.5" y="5010.5151">initialize_class() : void</text><ellipse cx="9088.5" cy="5020.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="9097.5" y="5023.3198">get_singleton() : _ResourceSaver *</text><ellipse cx="9088.5" cy="5032.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="9097.5" y="5036.1245">save(const String &amp; p_path, const RES &amp; p_resource, _ResourceSaver::SaverFlags p_flags) : Error</text><ellipse cx="9088.5" cy="5045.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="9097.5" y="5048.9292">get_recognized_extensions(const RES &amp; p_resource) : PoolVector&lt;String&gt;</text><ellipse cx="9088.5" cy="5058.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="9097.5" y="5061.7339">_ResourceSaver() : void</text></a><!--MD5=[4791f32a7532edb6976f97ebd5eb02c0]
class C_0000790752023609648644--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" target="_top" title="_OS" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" xlink:show="new" xlink:title="_OS" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="2263.2109" id="C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.5;" width="908" x="9802.5" y="3810.4531"/><ellipse cx="10240.75" cy="3826.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M10243.7188,3832.0938 Q10243.1406,3832.3906 10242.5,3832.5313 Q10241.8594,3832.6875 10241.1563,3832.6875 Q10238.6563,3832.6875 10237.3281,3831.0469 Q10236.0156,3829.3906 10236.0156,3826.2656 Q10236.0156,3823.1406 10237.3281,3821.4844 Q10238.6563,3819.8281 10241.1563,3819.8281 Q10241.8594,3819.8281 10242.5,3819.9844 Q10243.1563,3820.1406 10243.7188,3820.4375 L10243.7188,3823.1563 Q10243.0938,3822.5781 10242.5,3822.3125 Q10241.9063,3822.0313 10241.2813,3822.0313 Q10239.9375,3822.0313 10239.25,3823.1094 Q10238.5625,3824.1719 10238.5625,3826.2656 Q10238.5625,3828.3594 10239.25,3829.4375 Q10239.9375,3830.5 10241.2813,3830.5 Q10241.9063,3830.5 10242.5,3830.2344 Q10243.0938,3829.9531 10243.7188,3829.375 L10243.7188,3832.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="10261.25" y="3830.6074">_OS</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9803.5" x2="10709.5" y1="3842.4531" y2="3842.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9803.5" x2="10709.5" y1="3850.4531" y2="3850.4531"/><ellipse cx="9813.5" cy="3861.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9822.5" y="3864.6636">get_class() const : String</text><ellipse cx="9813.5" cy="3874.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9822.5" y="3877.4683">_get_class_namev() const : const StringName *</text><ellipse cx="9813.5" cy="3887.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="9822.5" y="3890.2729">get_class_ptr_static() : void *</text><ellipse cx="9813.5" cy="3899.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="9822.5" y="3903.0776">get_class_static() : String</text><ellipse cx="9813.5" cy="3912.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="9822.5" y="3915.8823">get_parent_class_static() : String</text><ellipse cx="9813.5" cy="3925.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="9822.5" y="3928.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="9813.5" cy="3938.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="9822.5" y="3941.4917">get_category_static() : String</text><ellipse cx="9813.5" cy="3951.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="9822.5" y="3954.2964">inherits_static() : String</text><ellipse cx="9813.5" cy="3963.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9822.5" y="3967.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="9813.5" cy="3976.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9822.5" y="3979.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="9813.5" cy="3989.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="9822.5" y="3992.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="9813.5" cy="4002.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="9822.5" y="4005.5151">initialize_class() : void</text><ellipse cx="9813.5" cy="4015.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="731" x="9822.5" y="4018.3198">global_menu_add_item(const String &amp; p_menu, const String &amp; p_label, const Variant &amp; p_signal, const Variant &amp; p_meta) : void</text><ellipse cx="9813.5" cy="4027.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="9822.5" y="4031.1245">global_menu_add_separator(const String &amp; p_menu) : void</text><ellipse cx="9813.5" cy="4040.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="9822.5" y="4043.9292">global_menu_remove_item(const String &amp; p_menu, int p_idx) : void</text><ellipse cx="9813.5" cy="4053.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="9822.5" y="4056.7339">global_menu_clear(const String &amp; p_menu) : void</text><ellipse cx="9813.5" cy="4066.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="9822.5" y="4069.5386">get_mouse_position() const : Point2</text><ellipse cx="9813.5" cy="4079.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="9822.5" y="4082.3433">set_window_title(const String &amp; p_title) : void</text><ellipse cx="9813.5" cy="4091.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="431" x="9822.5" y="4095.1479">set_window_mouse_passthrough(const PoolVector2Array &amp; p_region) : void</text><ellipse cx="9813.5" cy="4104.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4107.9526">get_mouse_button_state() const : int</text><ellipse cx="9813.5" cy="4117.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="9822.5" y="4120.7573">set_clipboard(const String &amp; p_text) : void</text><ellipse cx="9813.5" cy="4130.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="9822.5" y="4133.562">get_clipboard() const : String</text><ellipse cx="9813.5" cy="4143.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="9822.5" y="4146.3667">set_video_mode(const Size2 &amp; p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void</text><ellipse cx="9813.5" cy="4155.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="9822.5" y="4159.1714">get_video_mode(int p_screen = 0) const : Size2</text><ellipse cx="9813.5" cy="4168.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="9822.5" y="4171.9761">is_video_mode_fullscreen(int p_screen = 0) const : bool</text><ellipse cx="9813.5" cy="4181.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="9822.5" y="4184.7808">is_video_mode_resizable(int p_screen = 0) const : bool</text><ellipse cx="9813.5" cy="4194.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="9822.5" y="4197.5854">get_fullscreen_mode_list(int p_screen = 0) const : Array</text><ellipse cx="9813.5" cy="4207.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="4210.3901">get_video_driver_count() const : int</text><ellipse cx="9813.5" cy="4219.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="9822.5" y="4223.1948">get_video_driver_name(_OS::VideoDriver p_driver) const : String</text><ellipse cx="9813.5" cy="4232.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="9822.5" y="4235.9995">get_current_video_driver() const : _OS::VideoDriver</text><ellipse cx="9813.5" cy="4245.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="9822.5" y="4248.8042">get_audio_driver_count() const : int</text><ellipse cx="9813.5" cy="4258.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="4261.6089">get_audio_driver_name(int p_driver) const : String</text><ellipse cx="9813.5" cy="4271.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="4274.4136">get_connected_midi_inputs() : PoolStringArray</text><ellipse cx="9813.5" cy="4284.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="9822.5" y="4287.2183">open_midi_inputs() : void</text><ellipse cx="9813.5" cy="4296.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="9822.5" y="4300.0229">close_midi_inputs() : void</text><ellipse cx="9813.5" cy="4309.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="9822.5" y="4312.8276">get_screen_count() const : int</text><ellipse cx="9813.5" cy="4322.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="9822.5" y="4325.6323">get_current_screen() const : int</text><ellipse cx="9813.5" cy="4335.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="9822.5" y="4338.437">set_current_screen(int p_screen) : void</text><ellipse cx="9813.5" cy="4348.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="9822.5" y="4351.2417">get_screen_position(int p_screen = -1) const : Point2</text><ellipse cx="9813.5" cy="4360.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="9822.5" y="4364.0464">get_screen_size(int p_screen = -1) const : Size2</text><ellipse cx="9813.5" cy="4373.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="9822.5" y="4376.8511">get_screen_dpi(int p_screen = -1) const : int</text><ellipse cx="9813.5" cy="4386.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="9822.5" y="4389.6558">get_screen_scale(int p_screen = -1) const : float</text><ellipse cx="9813.5" cy="4399.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4402.4604">get_screen_max_scale() const : float</text><ellipse cx="9813.5" cy="4412.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="4415.2651">get_window_position() const : Point2</text><ellipse cx="9813.5" cy="4424.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="9822.5" y="4428.0698">set_window_position(const Point2 &amp; p_position) : void</text><ellipse cx="9813.5" cy="4437.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9822.5" y="4440.8745">get_max_window_size() const : Size2</text><ellipse cx="9813.5" cy="4450.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="9822.5" y="4453.6792">get_min_window_size() const : Size2</text><ellipse cx="9813.5" cy="4463.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="9822.5" y="4466.4839">get_window_size() const : Size2</text><ellipse cx="9813.5" cy="4476.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="4479.2886">get_real_window_size() const : Size2</text><ellipse cx="9813.5" cy="4488.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="9822.5" y="4492.0933">get_window_safe_area() const : Rect2</text><ellipse cx="9813.5" cy="4501.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="4504.8979">set_max_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="4514.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="9822.5" y="4517.7026">set_min_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="4527.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="9822.5" y="4530.5073">set_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="9813.5" cy="4540.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="9822.5" y="4543.312">set_window_fullscreen(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4552.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="4556.1167">is_window_fullscreen() const : bool</text><ellipse cx="9813.5" cy="4565.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="9822.5" y="4568.9214">set_window_resizable(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4578.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="9822.5" y="4581.7261">is_window_resizable() const : bool</text><ellipse cx="9813.5" cy="4591.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="9822.5" y="4594.5308">set_window_minimized(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4604.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="9822.5" y="4607.3354">is_window_minimized() const : bool</text><ellipse cx="9813.5" cy="4616.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="4620.1401">set_window_maximized(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4629.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="9822.5" y="4632.9448">is_window_maximized() const : bool</text><ellipse cx="9813.5" cy="4642.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="9822.5" y="4645.7495">set_window_always_on_top(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4655.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="9822.5" y="4658.5542">is_window_always_on_top() const : bool</text><ellipse cx="9813.5" cy="4668.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="4671.3589">is_window_focused() const : bool</text><ellipse cx="9813.5" cy="4680.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="9822.5" y="4684.1636">request_attention() : void</text><ellipse cx="9813.5" cy="4693.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="9822.5" y="4696.9683">center_window() : void</text><ellipse cx="9813.5" cy="4706.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="9822.5" y="4709.7729">move_window_to_foreground() : void</text><ellipse cx="9813.5" cy="4719.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="9822.5" y="4722.5776">get_native_handle(_OS::HandleType p_handle_type) : int64_t</text><ellipse cx="9813.5" cy="4732.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="9822.5" y="4735.3823">set_borderless_window(bool p_borderless) : void</text><ellipse cx="9813.5" cy="4744.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="9822.5" y="4748.187">get_borderless_window() const : bool</text><ellipse cx="9813.5" cy="4757.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="9822.5" y="4760.9917">get_window_per_pixel_transparency_enabled() const : bool</text><ellipse cx="9813.5" cy="4770.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="9822.5" y="4773.7964">set_window_per_pixel_transparency_enabled(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4783.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="9822.5" y="4786.6011">set_ime_active(const bool p_active) : void</text><ellipse cx="9813.5" cy="4796.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="9822.5" y="4799.4058">set_ime_position(const Point2 &amp; p_pos) : void</text><ellipse cx="9813.5" cy="4809" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="9822.5" y="4812.2104">get_ime_selection() const : Point2</text><ellipse cx="9813.5" cy="4821.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="9822.5" y="4825.0151">get_ime_text() const : String</text><ellipse cx="9813.5" cy="4834.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="9822.5" y="4837.8198">native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error</text><ellipse cx="9813.5" cy="4847.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="4850.6245">native_video_is_playing() : bool</text><ellipse cx="9813.5" cy="4860.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="9822.5" y="4863.4292">native_video_pause() : void</text><ellipse cx="9813.5" cy="4873.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9822.5" y="4876.2339">native_video_unpause() : void</text><ellipse cx="9813.5" cy="4885.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="9822.5" y="4889.0386">native_video_stop() : void</text><ellipse cx="9813.5" cy="4898.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="9822.5" y="4901.8433">set_low_processor_usage_mode(bool p_enabled) : void</text><ellipse cx="9813.5" cy="4911.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="9822.5" y="4914.6479">is_in_low_processor_usage_mode() const : bool</text><ellipse cx="9813.5" cy="4924.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="9822.5" y="4927.4526">set_low_processor_usage_mode_sleep_usec(int p_usec) : void</text><ellipse cx="9813.5" cy="4937.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="9822.5" y="4940.2573">get_low_processor_usage_mode_sleep_usec() const : int</text><ellipse cx="9813.5" cy="4949.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="4953.062">get_executable_path() const : String</text><ellipse cx="9813.5" cy="4962.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="882" x="9822.5" y="4965.8667">execute(const String &amp; p_path, const Vector&lt;String&gt; &amp; p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int</text><ellipse cx="9813.5" cy="4975.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="9822.5" y="4978.6714">kill(int p_pid) : Error</text><ellipse cx="9813.5" cy="4988.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="4991.4761">shell_open(String p_uri) : Error</text><ellipse cx="9813.5" cy="5001.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="9822.5" y="5004.2808">get_process_id() const : int</text><ellipse cx="9813.5" cy="5013.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="9822.5" y="5017.0854">has_environment(const String &amp; p_var) const : bool</text><ellipse cx="9813.5" cy="5026.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="9822.5" y="5029.8901">get_environment(const String &amp; p_var) const : String</text><ellipse cx="9813.5" cy="5039.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="9822.5" y="5042.6948">set_environment(const String &amp; p_var, const String &amp; p_value) const : bool</text><ellipse cx="9813.5" cy="5052.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="9822.5" y="5055.4995">get_name() const : String</text><ellipse cx="9813.5" cy="5065.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="9822.5" y="5068.3042">get_cmdline_args() : Vector&lt;String&gt;</text><ellipse cx="9813.5" cy="5077.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="9822.5" y="5081.1089">get_locale() const : String</text><ellipse cx="9813.5" cy="5090.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="9822.5" y="5093.9136">get_latin_keyboard_variant() const : String</text><ellipse cx="9813.5" cy="5103.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="9822.5" y="5106.7183">keyboard_get_layout_count() const : int</text><ellipse cx="9813.5" cy="5116.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="9822.5" y="5119.5229">keyboard_get_current_layout() const : int</text><ellipse cx="9813.5" cy="5129.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="9822.5" y="5132.3276">keyboard_set_current_layout(int p_index) : void</text><ellipse cx="9813.5" cy="5141.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="9822.5" y="5145.1323">keyboard_get_layout_language(int p_index) const : String</text><ellipse cx="9813.5" cy="5154.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="9822.5" y="5157.937">keyboard_get_layout_name(int p_index) const : String</text><ellipse cx="9813.5" cy="5167.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="9822.5" y="5170.7417">get_model_name() const : String</text><ellipse cx="9813.5" cy="5180.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9822.5" y="5183.5464">dump_memory_to_file(const String &amp; p_file) : void</text><ellipse cx="9813.5" cy="5193.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="9822.5" y="5196.3511">dump_resources_to_file(const String &amp; p_file) : void</text><ellipse cx="9813.5" cy="5205.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="5209.1558">has_virtual_keyboard() const : bool</text><ellipse cx="9813.5" cy="5218.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="9822.5" y="5221.9604">show_virtual_keyboard(const String &amp; p_existing_text = "", bool p_multiline = false) : void</text><ellipse cx="9813.5" cy="5231.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="9822.5" y="5234.7651">hide_virtual_keyboard() : void</text><ellipse cx="9813.5" cy="5244.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="9822.5" y="5247.5698">get_virtual_keyboard_height() : int</text><ellipse cx="9813.5" cy="5257.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="9822.5" y="5260.3745">print_resources_in_use(bool p_short = false) : void</text><ellipse cx="9813.5" cy="5269.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="9822.5" y="5273.1792">print_all_resources(const String &amp; p_to_file) : void</text><ellipse cx="9813.5" cy="5282.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="5285.9839">print_all_textures_by_size() : void</text><ellipse cx="9813.5" cy="5295.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="9822.5" y="5298.7886">print_resources_by_type(const Vector&lt;String&gt; &amp; p_types) : void</text><ellipse cx="9813.5" cy="5308.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="9822.5" y="5311.5933">has_touchscreen_ui_hint() const : bool</text><ellipse cx="9813.5" cy="5321.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="9822.5" y="5324.3979">is_debug_build() const : bool</text><ellipse cx="9813.5" cy="5333.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="9822.5" y="5337.2026">get_unique_id() const : String</text><ellipse cx="9813.5" cy="5346.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="9822.5" y="5350.0073">get_scancode_string(uint32_t p_code) const : String</text><ellipse cx="9813.5" cy="5359.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="9822.5" y="5362.812">is_scancode_unicode(uint32_t p_unicode) const : bool</text><ellipse cx="9813.5" cy="5372.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="9822.5" y="5375.6167">find_scancode_from_string(const String &amp; p_code) const : int</text><ellipse cx="9813.5" cy="5385.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="9822.5" y="5388.4214">set_use_file_access_save_and_swap(bool p_enable) : void</text><ellipse cx="9813.5" cy="5398.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="9822.5" y="5401.2261">set_native_icon(const String &amp; p_filename) : void</text><ellipse cx="9813.5" cy="5410.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="9822.5" y="5414.0308">set_icon(const Ref&lt;Image&gt; &amp; p_icon) : void</text><ellipse cx="9813.5" cy="5423.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="9822.5" y="5426.8354">get_exit_code() const : int</text><ellipse cx="9813.5" cy="5436.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="5439.6401">set_exit_code(int p_code) : void</text><ellipse cx="9813.5" cy="5449.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="5452.4448">get_date(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="5462.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="5465.2495">get_time(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="5474.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="9822.5" y="5478.0542">get_datetime(bool utc) const : Dictionary</text><ellipse cx="9813.5" cy="5487.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="9822.5" y="5490.8589">get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary</text><ellipse cx="9813.5" cy="5500.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="9822.5" y="5503.6636">get_unix_time_from_datetime(Dictionary datetime) const : int64_t</text><ellipse cx="9813.5" cy="5513.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="9822.5" y="5516.4683">get_time_zone_info() const : Dictionary</text><ellipse cx="9813.5" cy="5526.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="5529.2729">get_unix_time() const : uint64_t</text><ellipse cx="9813.5" cy="5538.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="9822.5" y="5542.0776">get_system_time_secs() const : uint64_t</text><ellipse cx="9813.5" cy="5551.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="9822.5" y="5554.8823">get_system_time_msecs() const : uint64_t</text><ellipse cx="9813.5" cy="5564.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="9822.5" y="5567.687">get_static_memory_usage() const : uint64_t</text><ellipse cx="9813.5" cy="5577.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="9822.5" y="5580.4917">get_static_memory_peak_usage() const : uint64_t</text><ellipse cx="9813.5" cy="5590.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="9822.5" y="5593.2964">get_dynamic_memory_usage() const : uint64_t</text><ellipse cx="9813.5" cy="5602.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="9822.5" y="5606.1011">delay_usec(int p_usec) const : void</text><ellipse cx="9813.5" cy="5615.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="9822.5" y="5618.9058">delay_msec(int p_msec) const : void</text><ellipse cx="9813.5" cy="5628.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="9822.5" y="5631.7104">get_ticks_msec() const : uint32_t</text><ellipse cx="9813.5" cy="5641.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="9822.5" y="5644.5151">get_ticks_usec() const : uint64_t</text><ellipse cx="9813.5" cy="5654.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="9822.5" y="5657.3198">get_splash_tick_msec() const : uint32_t</text><ellipse cx="9813.5" cy="5666.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="9822.5" y="5670.1245">can_use_threads() const : bool</text><ellipse cx="9813.5" cy="5679.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="9822.5" y="5682.9292">can_draw() const : bool</text><ellipse cx="9813.5" cy="5692.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="9822.5" y="5695.7339">is_userfs_persistent() const : bool</text><ellipse cx="9813.5" cy="5705.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="9822.5" y="5708.5386">is_stdout_verbose() const : bool</text><ellipse cx="9813.5" cy="5718.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="9822.5" y="5721.3433">get_processor_count() const : int</text><ellipse cx="9813.5" cy="5730.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="477" x="9822.5" y="5734.1479">get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String</text><ellipse cx="9813.5" cy="5743.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="9822.5" y="5746.9526">get_user_data_dir() const : String</text><ellipse cx="9813.5" cy="5756.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="9822.5" y="5759.7573">alert(const String &amp; p_alert, const String &amp; p_title = "ALERT!") : void</text><ellipse cx="9813.5" cy="5769.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="385" x="9822.5" y="5772.562">set_screen_orientation(_OS::ScreenOrientation p_orientation) : void</text><ellipse cx="9813.5" cy="5782.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="9822.5" y="5785.3667">get_screen_orientation() const : _OS::ScreenOrientation</text><ellipse cx="9813.5" cy="5794.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="9822.5" y="5798.1714">set_keep_screen_on(bool p_enabled) : void</text><ellipse cx="9813.5" cy="5807.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="9822.5" y="5810.9761">is_keep_screen_on() const : bool</text><ellipse cx="9813.5" cy="5820.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="9822.5" y="5823.7808">is_ok_left_and_cancel_right() const : bool</text><ellipse cx="9813.5" cy="5833.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="9822.5" y="5836.5854">set_thread_name(const String &amp; p_name) : Error</text><ellipse cx="9813.5" cy="5846.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="9822.5" y="5849.3901">get_thread_caller_id() const : Thread::ID</text><ellipse cx="9813.5" cy="5858.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="9822.5" y="5862.1948">set_use_vsync(bool p_enable) : void</text><ellipse cx="9813.5" cy="5871.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="9822.5" y="5874.9995">is_vsync_enabled() const : bool</text><ellipse cx="9813.5" cy="5884.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="9822.5" y="5887.8042">set_vsync_via_compositor(bool p_enable) : void</text><ellipse cx="9813.5" cy="5897.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="9822.5" y="5900.6089">is_vsync_via_compositor_enabled() const : bool</text><ellipse cx="9813.5" cy="5910.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="9822.5" y="5913.4136">get_power_state() : _OS::PowerState</text><ellipse cx="9813.5" cy="5923.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="9822.5" y="5926.2183">get_power_seconds_left() : int</text><ellipse cx="9813.5" cy="5935.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="9822.5" y="5939.0229">get_power_percent_left() : int</text><ellipse cx="9813.5" cy="5948.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="9822.5" y="5951.8276">has_feature(const String &amp; p_feature) const : bool</text><ellipse cx="9813.5" cy="5961.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="9822.5" y="5964.6323">request_permission(const String &amp; p_name) : bool</text><ellipse cx="9813.5" cy="5974.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="9822.5" y="5977.437">request_permissions() : bool</text><ellipse cx="9813.5" cy="5987.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="9822.5" y="5990.2417">get_granted_permissions() const : Vector&lt;String&gt;</text><ellipse cx="9813.5" cy="5999.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="9822.5" y="6003.0464">get_tablet_driver_count() const : int</text><ellipse cx="9813.5" cy="6012.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="9822.5" y="6015.8511">get_tablet_driver_name(int p_driver) const : String</text><ellipse cx="9813.5" cy="6025.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="9822.5" y="6028.6558">get_current_tablet_driver() const : String</text><ellipse cx="9813.5" cy="6038.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="9822.5" y="6041.4604">set_current_tablet_driver(const String &amp; p_driver) : void</text><ellipse cx="9813.5" cy="6051.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="9822.5" y="6054.2651">get_singleton() : _OS *</text><ellipse cx="9813.5" cy="6063.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="9822.5" y="6067.0698">_OS() : void</text></a><!--MD5=[9cd91452c1d17095030b673b85aa269f]
class C_0000897221634691489964--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" target="_top" title="_Geometry" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" xlink:show="new" xlink:title="_Geometry" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="675.4297" id="C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.5;" width="1086" x="10845.5" y="4604.4531"/><ellipse cx="11351.25" cy="4620.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11354.2188,4626.0938 Q11353.6406,4626.3906 11353,4626.5313 Q11352.3594,4626.6875 11351.6563,4626.6875 Q11349.1563,4626.6875 11347.8281,4625.0469 Q11346.5156,4623.3906 11346.5156,4620.2656 Q11346.5156,4617.1406 11347.8281,4615.4844 Q11349.1563,4613.8281 11351.6563,4613.8281 Q11352.3594,4613.8281 11353,4613.9844 Q11353.6563,4614.1406 11354.2188,4614.4375 L11354.2188,4617.1563 Q11353.5938,4616.5781 11353,4616.3125 Q11352.4063,4616.0313 11351.7813,4616.0313 Q11350.4375,4616.0313 11349.75,4617.1094 Q11349.0625,4618.1719 11349.0625,4620.2656 Q11349.0625,4622.3594 11349.75,4623.4375 Q11350.4375,4624.5 11351.7813,4624.5 Q11352.4063,4624.5 11353,4624.2344 Q11353.5938,4623.9531 11354.2188,4623.375 L11354.2188,4626.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="11371.75" y="4624.6074">_Geometry</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10846.5" x2="11930.5" y1="4636.4531" y2="4636.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="10846.5" x2="11930.5" y1="4644.4531" y2="4644.4531"/><ellipse cx="10856.5" cy="4655.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="10865.5" y="4658.6636">get_class() const : String</text><ellipse cx="10856.5" cy="4668.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="10865.5" y="4671.4683">_get_class_namev() const : const StringName *</text><ellipse cx="10856.5" cy="4681.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="10865.5" y="4684.2729">get_class_ptr_static() : void *</text><ellipse cx="10856.5" cy="4693.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="10865.5" y="4697.0776">get_class_static() : String</text><ellipse cx="10856.5" cy="4706.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="10865.5" y="4709.8823">get_parent_class_static() : String</text><ellipse cx="10856.5" cy="4719.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="10865.5" y="4722.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="10856.5" cy="4732.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="10865.5" y="4735.4917">get_category_static() : String</text><ellipse cx="10856.5" cy="4745.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="10865.5" y="4748.2964">inherits_static() : String</text><ellipse cx="10856.5" cy="4757.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="10865.5" y="4761.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="10856.5" cy="4770.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="10865.5" y="4773.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="10856.5" cy="4783.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="10865.5" y="4786.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="10856.5" cy="4796.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="10865.5" y="4799.5151">initialize_class() : void</text><ellipse cx="10856.5" cy="4809.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="168" x="10865.5" y="4812.3198">get_singleton() : _Geometry *</text><ellipse cx="10856.5" cy="4821.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="10865.5" y="4825.1245">build_box_planes(const Vector3 &amp; p_extents) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4834.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="10865.5" y="4837.9292">build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4847.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="773" x="10865.5" y="4850.7339">build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="10856.5" cy="4860.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="837" x="10865.5" y="4863.5386">segment_intersects_segment_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_to_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_to_b) : Variant</text><ellipse cx="10856.5" cy="4873.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="785" x="10865.5" y="4876.3433">line_intersects_line_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_dir_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_dir_b) : Variant</text><ellipse cx="10856.5" cy="4885.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="10865.5" y="4889.1479">get_closest_points_between_segments_2d(const Vector2 &amp; p1, const Vector2 &amp; q1, const Vector2 &amp; p2, const Vector2 &amp; q2) : PoolVector&lt;Vector2&gt;</text><ellipse cx="10856.5" cy="4898.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="828" x="10865.5" y="4901.9526">get_closest_points_between_segments(const Vector3 &amp; p1, const Vector3 &amp; p2, const Vector3 &amp; q1, const Vector3 &amp; q2) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="4911.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="10865.5" y="4914.7573">get_closest_point_to_segment_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="10856.5" cy="4924.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="620" x="10865.5" y="4927.562">get_closest_point_to_segment(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="10856.5" cy="4937.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="701" x="10865.5" y="4940.3667">get_closest_point_to_segment_uncapped_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="10856.5" cy="4949.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="681" x="10865.5" y="4953.1714">get_closest_point_to_segment_uncapped(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="10856.5" cy="4962.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="10865.5" y="4965.9761">ray_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_dir, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="10856.5" cy="4975.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="876" x="10865.5" y="4978.7808">segment_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="10856.5" cy="4988.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="647" x="10865.5" y="4991.5854">point_is_inside_triangle(const Vector2 &amp; s, const Vector2 &amp; a, const Vector2 &amp; b, const Vector2 &amp; c) const : bool</text><ellipse cx="10856.5" cy="5001.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="887" x="10865.5" y="5004.3901">segment_intersects_sphere(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_sphere_pos, real_t p_sphere_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5013.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="739" x="10865.5" y="5017.1948">segment_intersects_cylinder(const Vector3 &amp; p_from, const Vector3 &amp; p_to, float p_height, float p_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5026.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="760" x="10865.5" y="5029.9995">segment_intersects_convex(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector&lt;Plane&gt; &amp; p_planes) : PoolVector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5039.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="580" x="10865.5" y="5042.8042">is_point_in_circle(const Vector2 &amp; p_point, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : bool</text><ellipse cx="10856.5" cy="5052.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="768" x="10865.5" y="5055.6089">segment_intersects_circle(const Vector2 &amp; p_from, const Vector2 &amp; p_to, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : real_t</text><ellipse cx="10856.5" cy="5065.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="10865.5" y="5068.4136">get_uv84_normal_bit(const Vector3 &amp; p_vector) : int</text><ellipse cx="10856.5" cy="5078.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="10865.5" y="5081.2183">is_polygon_clockwise(const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="10856.5" cy="5090.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="10865.5" y="5094.0229">is_point_in_polygon(const Point2 &amp; p_point, const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="10856.5" cy="5103.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="10865.5" y="5106.8276">triangulate_polygon(const Vector&lt;Vector2&gt; &amp; p_polygon) : Vector&lt;int&gt;</text><ellipse cx="10856.5" cy="5116.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="10865.5" y="5119.6323">triangulate_delaunay_2d(const Vector&lt;Vector2&gt; &amp; p_points) : Vector&lt;int&gt;</text><ellipse cx="10856.5" cy="5129.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="10865.5" y="5132.437">convex_hull_2d(const Vector&lt;Point2&gt; &amp; p_points) : Vector&lt;Point2&gt;</text><ellipse cx="10856.5" cy="5142.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="10865.5" y="5145.2417">clip_polygon(const Vector&lt;Vector3&gt; &amp; p_points, const Plane &amp; p_plane) : Vector&lt;Vector3&gt;</text><ellipse cx="10856.5" cy="5154.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="612" x="10865.5" y="5158.0464">merge_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5167.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="10865.5" y="5170.8511">clip_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5180.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="10865.5" y="5183.6558">intersect_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5193.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="618" x="10865.5" y="5196.4604">exclude_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="10856.5" cy="5206.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="638" x="10865.5" y="5209.2651">clip_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="10856.5" cy="5218.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="10865.5" y="5222.0698">intersect_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="10856.5" cy="5231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="752" x="10865.5" y="5234.8745">offset_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array</text><ellipse cx="10856.5" cy="5244.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1060" x="10865.5" y="5247.6792">offset_polyline_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array</text><ellipse cx="10856.5" cy="5257.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="10865.5" y="5260.4839">make_atlas(const Vector&lt;Size2&gt; &amp; p_rects) : Dictionary</text><ellipse cx="10856.5" cy="5270.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="10865.5" y="5273.2886">_Geometry() : void</text></a><!--MD5=[4dcc2a5e5ca6c256ca3086aa64be2a49]
class C_0000135188690773659020--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" target="_top" title="_Marshalls" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" xlink:show="new" xlink:title="_Marshalls" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="316.8984" id="C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.5;" width="476" x="12066.5" y="4783.4531"/><ellipse cx="12267.75" cy="4799.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12270.7188,4805.0938 Q12270.1406,4805.3906 12269.5,4805.5313 Q12268.8594,4805.6875 12268.1563,4805.6875 Q12265.6563,4805.6875 12264.3281,4804.0469 Q12263.0156,4802.3906 12263.0156,4799.2656 Q12263.0156,4796.1406 12264.3281,4794.4844 Q12265.6563,4792.8281 12268.1563,4792.8281 Q12268.8594,4792.8281 12269.5,4792.9844 Q12270.1563,4793.1406 12270.7188,4793.4375 L12270.7188,4796.1563 Q12270.0938,4795.5781 12269.5,4795.3125 Q12268.9063,4795.0313 12268.2813,4795.0313 Q12266.9375,4795.0313 12266.25,4796.1094 Q12265.5625,4797.1719 12265.5625,4799.2656 Q12265.5625,4801.3594 12266.25,4802.4375 Q12266.9375,4803.5 12268.2813,4803.5 Q12268.9063,4803.5 12269.5,4803.2344 Q12270.0938,4802.9531 12270.7188,4802.375 L12270.7188,4805.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="12288.25" y="4803.6074">_Marshalls</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12067.5" x2="12541.5" y1="4815.4531" y2="4815.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="12067.5" x2="12541.5" y1="4823.4531" y2="4823.4531"/><ellipse cx="12077.5" cy="4834.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="12086.5" y="4837.6636">get_class() const : String</text><ellipse cx="12077.5" cy="4847.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="12086.5" y="4850.4683">_get_class_namev() const : const StringName *</text><ellipse cx="12077.5" cy="4860.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="12086.5" y="4863.2729">get_class_ptr_static() : void *</text><ellipse cx="12077.5" cy="4872.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="12086.5" y="4876.0776">get_class_static() : String</text><ellipse cx="12077.5" cy="4885.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="12086.5" y="4888.8823">get_parent_class_static() : String</text><ellipse cx="12077.5" cy="4898.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="12086.5" y="4901.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="12077.5" cy="4911.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="12086.5" y="4914.4917">get_category_static() : String</text><ellipse cx="12077.5" cy="4924.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="12086.5" y="4927.2964">inherits_static() : String</text><ellipse cx="12077.5" cy="4936.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="12086.5" y="4940.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="12077.5" cy="4949.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="12086.5" y="4952.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="12077.5" cy="4962.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="12086.5" y="4965.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="12077.5" cy="4975.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="12086.5" y="4978.5151">initialize_class() : void</text><ellipse cx="12077.5" cy="4988.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="12086.5" y="4991.3198">get_singleton() : _Marshalls *</text><ellipse cx="12077.5" cy="5000.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="12086.5" y="5004.1245">variant_to_base64(const Variant &amp; p_var, bool p_full_objects = false) : String</text><ellipse cx="12077.5" cy="5013.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="12086.5" y="5016.9292">base64_to_variant(const String &amp; p_str, bool p_allow_objects = false) : Variant</text><ellipse cx="12077.5" cy="5026.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="12086.5" y="5029.7339">raw_to_base64(const PoolVector&lt;uint8_t&gt; &amp; p_arr) : String</text><ellipse cx="12077.5" cy="5039.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="12086.5" y="5042.5386">base64_to_raw(const String &amp; p_str) : PoolVector&lt;uint8_t&gt;</text><ellipse cx="12077.5" cy="5052.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="12086.5" y="5055.3433">utf8_to_base64(const String &amp; p_str) : String</text><ellipse cx="12077.5" cy="5064.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="12086.5" y="5068.1479">base64_to_utf8(const String &amp; p_str) : String</text><ellipse cx="12077.5" cy="5077.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="12086.5" y="5080.9526">_Marshalls() : void</text><ellipse cx="12077.5" cy="5090.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="12086.5" y="5093.7573">_Marshalls() : void</text></a><!--MD5=[bec2467cb88707ae9252054f6d93a9ae]
class C_0001150621116588802549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" target="_top" title="_Thread" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" xlink:show="new" xlink:title="_Thread" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="278.4844" id="C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.5;" width="905" x="24028" y="4802.9531"/><ellipse cx="24451.25" cy="4818.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M24454.2188,4824.5938 Q24453.6406,4824.8906 24453,4825.0313 Q24452.3594,4825.1875 24451.6563,4825.1875 Q24449.1563,4825.1875 24447.8281,4823.5469 Q24446.5156,4821.8906 24446.5156,4818.7656 Q24446.5156,4815.6406 24447.8281,4813.9844 Q24449.1563,4812.3281 24451.6563,4812.3281 Q24452.3594,4812.3281 24453,4812.4844 Q24453.6563,4812.6406 24454.2188,4812.9375 L24454.2188,4815.6563 Q24453.5938,4815.0781 24453,4814.8125 Q24452.4063,4814.5313 24451.7813,4814.5313 Q24450.4375,4814.5313 24449.75,4815.6094 Q24449.0625,4816.6719 24449.0625,4818.7656 Q24449.0625,4820.8594 24449.75,4821.9375 Q24450.4375,4823 24451.7813,4823 Q24452.4063,4823 24453,4822.7344 Q24453.5938,4822.4531 24454.2188,4821.875 L24454.2188,4824.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="24471.75" y="4823.1074">_Thread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24029" x2="24932" y1="4834.9531" y2="4834.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="24029" x2="24932" y1="4842.9531" y2="4842.9531"/><ellipse cx="24039" cy="4853.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="24048" y="4857.1636">get_class() const : String</text><ellipse cx="24039" cy="4866.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="24048" y="4869.9683">_get_class_namev() const : const StringName *</text><ellipse cx="24039" cy="4879.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="24048" y="4882.7729">get_class_ptr_static() : void *</text><ellipse cx="24039" cy="4892.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="24048" y="4895.5776">get_class_static() : String</text><ellipse cx="24039" cy="4905.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="24048" y="4908.3823">get_parent_class_static() : String</text><ellipse cx="24039" cy="4917.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="24048" y="4921.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="24039" cy="4930.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="24048" y="4933.9917">get_category_static() : String</text><ellipse cx="24039" cy="4943.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="24048" y="4946.7964">inherits_static() : String</text><ellipse cx="24039" cy="4956.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="24048" y="4959.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="24039" cy="4969.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="24048" y="4972.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="24039" cy="4982" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="24048" y="4985.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="24039" cy="4994.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="24048" y="4998.0151">initialize_class() : void</text><ellipse cx="24039" cy="5007.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="879" x="24048" y="5010.8198">start(Object * p_instance, const StringName &amp; p_method, const Variant &amp; p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error</text><ellipse cx="24039" cy="5020.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="24048" y="5023.6245">get_id() const : String</text><ellipse cx="24039" cy="5033.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="24048" y="5036.4292">is_active() const : bool</text><ellipse cx="24039" cy="5046.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="24048" y="5049.2339">wait_to_finish() : Variant</text><ellipse cx="24039" cy="5058.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="24048" y="5062.0386">_Thread() : void</text><ellipse cx="24039" cy="5071.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="24048" y="5074.8433">_Thread() : void</text></a><!--MD5=[aee0a6e401a1fbb7c861b56a21d0daf4]
class C_0001186331261774827872--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" target="_top" title="_ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" xlink:show="new" xlink:title="_ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="483.3594" id="C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.5;" width="651" x="12749" y="4700.4531"/><ellipse cx="13042.25" cy="4716.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13045.2188,4722.0938 Q13044.6406,4722.3906 13044,4722.5313 Q13043.3594,4722.6875 13042.6563,4722.6875 Q13040.1563,4722.6875 13038.8281,4721.0469 Q13037.5156,4719.3906 13037.5156,4716.2656 Q13037.5156,4713.1406 13038.8281,4711.4844 Q13040.1563,4709.8281 13042.6563,4709.8281 Q13043.3594,4709.8281 13044,4709.9844 Q13044.6563,4710.1406 13045.2188,4710.4375 L13045.2188,4713.1563 Q13044.5938,4712.5781 13044,4712.3125 Q13043.4063,4712.0313 13042.7813,4712.0313 Q13041.4375,4712.0313 13040.75,4713.1094 Q13040.0625,4714.1719 13040.0625,4716.2656 Q13040.0625,4718.3594 13040.75,4719.4375 Q13041.4375,4720.5 13042.7813,4720.5 Q13043.4063,4720.5 13044,4720.2344 Q13044.5938,4719.9531 13045.2188,4719.375 L13045.2188,4722.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="13062.75" y="4720.6074">_ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12750" x2="13399" y1="4732.4531" y2="4732.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="12750" x2="13399" y1="4740.4531" y2="4740.4531"/><ellipse cx="12760" cy="4751.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="12769" y="4754.6636">get_class() const : String</text><ellipse cx="12760" cy="4764.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="12769" y="4767.4683">_get_class_namev() const : const StringName *</text><ellipse cx="12760" cy="4777.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="12769" y="4780.2729">get_class_ptr_static() : void *</text><ellipse cx="12760" cy="4789.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="12769" y="4793.0776">get_class_static() : String</text><ellipse cx="12760" cy="4802.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="12769" y="4805.8823">get_parent_class_static() : String</text><ellipse cx="12760" cy="4815.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="12769" y="4818.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="12760" cy="4828.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="12769" y="4831.4917">get_category_static() : String</text><ellipse cx="12760" cy="4841.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="12769" y="4844.2964">inherits_static() : String</text><ellipse cx="12760" cy="4853.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="12769" y="4857.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="12760" cy="4866.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="12769" y="4869.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="12760" cy="4879.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="12769" y="4882.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="12760" cy="4892.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="12769" y="4895.5151">initialize_class() : void</text><ellipse cx="12760" cy="4905.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="12769" y="4908.3198">get_class_list() const : PoolStringArray</text><ellipse cx="12760" cy="4917.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="12769" y="4921.1245">get_inheriters_from_class(const StringName &amp; p_class) const : PoolStringArray</text><ellipse cx="12760" cy="4930.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="12769" y="4933.9292">get_parent_class(const StringName &amp; p_class) const : StringName</text><ellipse cx="12760" cy="4943.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="12769" y="4946.7339">class_exists(const StringName &amp; p_class) const : bool</text><ellipse cx="12760" cy="4956.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="515" x="12769" y="4959.5386">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) const : bool</text><ellipse cx="12760" cy="4969.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="12769" y="4972.3433">can_instance(const StringName &amp; p_class) const : bool</text><ellipse cx="12760" cy="4981.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="12769" y="4985.1479">instance(const StringName &amp; p_class) const : Variant</text><ellipse cx="12760" cy="4994.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="12769" y="4997.9526">has_signal(StringName p_class, StringName p_signal) const : bool</text><ellipse cx="12760" cy="5007.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="12769" y="5010.7573">get_signal(StringName p_class, StringName p_signal) const : Dictionary</text><ellipse cx="12760" cy="5020.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="12769" y="5023.562">get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="5033.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="12769" y="5036.3667">get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="5045.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="12769" y="5049.1714">get_property(Object * p_object, const StringName &amp; p_property) const : Variant</text><ellipse cx="12760" cy="5058.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="12769" y="5061.9761">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value) const : Error</text><ellipse cx="12760" cy="5071.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="575" x="12769" y="5074.7808">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool</text><ellipse cx="12760" cy="5084.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="466" x="12769" y="5087.5854">get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="12760" cy="5097.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="12769" y="5100.3901">get_integer_constant_list(const StringName &amp; p_class, bool p_no_inheritance = false) const : PoolStringArray</text><ellipse cx="12760" cy="5109.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="12769" y="5113.1948">has_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : bool</text><ellipse cx="12760" cy="5122.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="12769" y="5125.9995">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : int</text><ellipse cx="12760" cy="5135.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="12769" y="5138.8042">get_category(const StringName &amp; p_node) const : StringName</text><ellipse cx="12760" cy="5148.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="12769" y="5151.6089">is_class_enabled(StringName p_class) const : bool</text><ellipse cx="12760" cy="5161.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="12769" y="5164.4136">_ClassDB() : void</text><ellipse cx="12760" cy="5174.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="12769" y="5177.2183">_ClassDB() : void</text></a><!--MD5=[05b7e85f3dbac3be88f6744cbcc1427a]
class C_0001895218672297528471--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" target="_top" title="_Engine" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" xlink:show="new" xlink:title="_Engine" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="547.3828" id="C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="13435" y="4668.4531"/><ellipse cx="13606.75" cy="4684.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13609.7188,4690.0938 Q13609.1406,4690.3906 13608.5,4690.5313 Q13607.8594,4690.6875 13607.1563,4690.6875 Q13604.6563,4690.6875 13603.3281,4689.0469 Q13602.0156,4687.3906 13602.0156,4684.2656 Q13602.0156,4681.1406 13603.3281,4679.4844 Q13604.6563,4677.8281 13607.1563,4677.8281 Q13607.8594,4677.8281 13608.5,4677.9844 Q13609.1563,4678.1406 13609.7188,4678.4375 L13609.7188,4681.1563 Q13609.0938,4680.5781 13608.5,4680.3125 Q13607.9063,4680.0313 13607.2813,4680.0313 Q13605.9375,4680.0313 13605.25,4681.1094 Q13604.5625,4682.1719 13604.5625,4684.2656 Q13604.5625,4686.3594 13605.25,4687.4375 Q13605.9375,4688.5 13607.2813,4688.5 Q13607.9063,4688.5 13608.5,4688.2344 Q13609.0938,4687.9531 13609.7188,4687.375 L13609.7188,4690.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="13627.25" y="4688.6074">_Engine</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13436" x2="13835" y1="4700.4531" y2="4700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13436" x2="13835" y1="4708.4531" y2="4708.4531"/><ellipse cx="13446" cy="4719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13455" y="4722.6636">get_class() const : String</text><ellipse cx="13446" cy="4732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="13455" y="4735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13446" cy="4745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13455" y="4748.2729">get_class_ptr_static() : void *</text><ellipse cx="13446" cy="4757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13455" y="4761.0776">get_class_static() : String</text><ellipse cx="13446" cy="4770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13455" y="4773.8823">get_parent_class_static() : String</text><ellipse cx="13446" cy="4783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13455" y="4786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13446" cy="4796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13455" y="4799.4917">get_category_static() : String</text><ellipse cx="13446" cy="4809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="13455" y="4812.2964">inherits_static() : String</text><ellipse cx="13446" cy="4821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13455" y="4825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13446" cy="4834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13455" y="4837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13446" cy="4847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="13455" y="4850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13446" cy="4860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13455" y="4863.5151">initialize_class() : void</text><ellipse cx="13446" cy="4873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="150" x="13455" y="4876.3198">get_singleton() : _Engine *</text><ellipse cx="13446" cy="4885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="13455" y="4889.1245">set_iterations_per_second(int p_ips) : void</text><ellipse cx="13446" cy="4898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="13455" y="4901.9292">get_iterations_per_second() const : int</text><ellipse cx="13446" cy="4911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="13455" y="4914.7339">set_physics_jitter_fix(float p_threshold) : void</text><ellipse cx="13446" cy="4924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="13455" y="4927.5386">get_physics_jitter_fix() const : float</text><ellipse cx="13446" cy="4937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="13455" y="4940.3433">get_physics_interpolation_fraction() const : float</text><ellipse cx="13446" cy="4949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="13455" y="4953.1479">set_target_fps(int p_fps) : void</text><ellipse cx="13446" cy="4962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="13455" y="4965.9526">get_target_fps() const : int</text><ellipse cx="13446" cy="4975.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="13455" y="4978.7573">get_frames_per_second() const : float</text><ellipse cx="13446" cy="4988.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="13455" y="4991.562">get_physics_frames() const : uint64_t</text><ellipse cx="13446" cy="5001.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="13455" y="5004.3667">get_idle_frames() const : uint64_t</text><ellipse cx="13446" cy="5013.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="13455" y="5017.1714">get_frames_drawn() : int</text><ellipse cx="13446" cy="5026.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="13455" y="5029.9761">set_time_scale(float p_scale) : void</text><ellipse cx="13446" cy="5039.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="13455" y="5042.7808">get_time_scale() : float</text><ellipse cx="13446" cy="5052.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="13455" y="5055.5854">get_main_loop() const : MainLoop *</text><ellipse cx="13446" cy="5065.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="13455" y="5068.3901">get_version_info() const : Dictionary</text><ellipse cx="13446" cy="5077.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="13455" y="5081.1948">get_author_info() const : Dictionary</text><ellipse cx="13446" cy="5090.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="13455" y="5093.9995">get_copyright_info() const : Array</text><ellipse cx="13446" cy="5103.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="13455" y="5106.8042">get_donor_info() const : Dictionary</text><ellipse cx="13446" cy="5116.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="13455" y="5119.6089">get_license_info() const : Dictionary</text><ellipse cx="13446" cy="5129.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="13455" y="5132.4136">get_license_text() const : String</text><ellipse cx="13446" cy="5142.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="13455" y="5145.2183">is_in_physics_frame() const : bool</text><ellipse cx="13446" cy="5154.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="13455" y="5158.0229">has_singleton(const String &amp; p_name) const : bool</text><ellipse cx="13446" cy="5167.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="13455" y="5170.8276">get_singleton_object(const String &amp; p_name) const : Object *</text><ellipse cx="13446" cy="5180.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13455" y="5183.6323">set_editor_hint(bool p_enabled) : void</text><ellipse cx="13446" cy="5193.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="13455" y="5196.437">is_editor_hint() const : bool</text><ellipse cx="13446" cy="5206.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="13455" y="5209.2417">_Engine() : void</text></a><!--MD5=[c754248bd0e8ccbf585ab49c3c72bce4]
class C_0000979065355535690103--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" target="_top" title="_JSON" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" xlink:show="new" xlink:title="_JSON" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="252.875" id="C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.5;" width="561" x="13971" y="4815.4531"/><ellipse cx="14229.75" cy="4831.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14232.7188,4837.0938 Q14232.1406,4837.3906 14231.5,4837.5313 Q14230.8594,4837.6875 14230.1563,4837.6875 Q14227.6563,4837.6875 14226.3281,4836.0469 Q14225.0156,4834.3906 14225.0156,4831.2656 Q14225.0156,4828.1406 14226.3281,4826.4844 Q14227.6563,4824.8281 14230.1563,4824.8281 Q14230.8594,4824.8281 14231.5,4824.9844 Q14232.1563,4825.1406 14232.7188,4825.4375 L14232.7188,4828.1563 Q14232.0938,4827.5781 14231.5,4827.3125 Q14230.9063,4827.0313 14230.2813,4827.0313 Q14228.9375,4827.0313 14228.25,4828.1094 Q14227.5625,4829.1719 14227.5625,4831.2656 Q14227.5625,4833.3594 14228.25,4834.4375 Q14228.9375,4835.5 14230.2813,4835.5 Q14230.9063,4835.5 14231.5,4835.2344 Q14232.0938,4834.9531 14232.7188,4834.375 L14232.7188,4837.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="14250.25" y="4835.6074">_JSON</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13972" x2="14531" y1="4847.4531" y2="4847.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13972" x2="14531" y1="4855.4531" y2="4855.4531"/><ellipse cx="13982" cy="4866.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13991" y="4869.6636">get_class() const : String</text><ellipse cx="13982" cy="4879.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="13991" y="4882.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13982" cy="4892.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13991" y="4895.2729">get_class_ptr_static() : void *</text><ellipse cx="13982" cy="4904.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13991" y="4908.0776">get_class_static() : String</text><ellipse cx="13982" cy="4917.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13991" y="4920.8823">get_parent_class_static() : String</text><ellipse cx="13982" cy="4930.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13991" y="4933.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13982" cy="4943.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13991" y="4946.4917">get_category_static() : String</text><ellipse cx="13982" cy="4956.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="13991" y="4959.2964">inherits_static() : String</text><ellipse cx="13982" cy="4968.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13991" y="4972.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13982" cy="4981.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13991" y="4984.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13982" cy="4994.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="13991" y="4997.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13982" cy="5007.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13991" y="5010.5151">initialize_class() : void</text><ellipse cx="13982" cy="5020.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="140" x="13991" y="5023.3198">get_singleton() : _JSON *</text><ellipse cx="13982" cy="5032.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="13991" y="5036.1245">print(const Variant &amp; p_value, const String &amp; p_indent = "", bool p_sort_keys = false) : String</text><ellipse cx="13982" cy="5045.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="13991" y="5048.9292">parse(const String &amp; p_json) : Ref&lt;JSONParseResult&gt;</text><ellipse cx="13982" cy="5058.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="13991" y="5061.7339">_JSON() : void</text></a><!--MD5=[2e1804fc10b971ae34ea328508bc0a5b]
class C_0000132048052014479231--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" target="_top" title="_ObjectDebugLock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" xlink:show="new" xlink:title="_ObjectDebugLock" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="86.4141" id="C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.5;" width="252" x="16458.5" y="1777.4531"/><ellipse cx="16522.75" cy="1793.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16525.7188,1799.0938 Q16525.1406,1799.3906 16524.5,1799.5313 Q16523.8594,1799.6875 16523.1563,1799.6875 Q16520.6563,1799.6875 16519.3281,1798.0469 Q16518.0156,1796.3906 16518.0156,1793.2656 Q16518.0156,1790.1406 16519.3281,1788.4844 Q16520.6563,1786.8281 16523.1563,1786.8281 Q16523.8594,1786.8281 16524.5,1786.9844 Q16525.1563,1787.1406 16525.7188,1787.4375 L16525.7188,1790.1563 Q16525.0938,1789.5781 16524.5,1789.3125 Q16523.9063,1789.0313 16523.2813,1789.0313 Q16521.9375,1789.0313 16521.25,1790.1094 Q16520.5625,1791.1719 16520.5625,1793.2656 Q16520.5625,1795.3594 16521.25,1796.4375 Q16521.9375,1797.5 16523.2813,1797.5 Q16523.9063,1797.5 16524.5,1797.2344 Q16525.0938,1796.9531 16525.7188,1796.375 L16525.7188,1799.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="16543.25" y="1797.6074">_ObjectDebugLock</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16459.5" x2="16709.5" y1="1809.4531" y2="1809.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="16464.5" y="1815.4531"/><ellipse cx="16469.5" cy="1820.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="16478.5" y="1823.6636">obj : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="16459.5" x2="16709.5" y1="1830.2578" y2="1830.2578"/><ellipse cx="16469.5" cy="1841.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="16478.5" y="1844.4683">_ObjectDebugLock(Object * p_obj) : void</text><ellipse cx="16469.5" cy="1854.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="16478.5" y="1857.2729">_ObjectDebugLock() : void</text><!--MD5=[4e04dc62cf4bb361958a89934798b4f1]
class C_0000115801560197752094--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" target="_top" title="_ObjectSignalDisconnectData" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" xlink:show="new" xlink:title="_ObjectSignalDisconnectData" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="86.4141" id="C_0000115801560197752094" style="stroke: #A80036; stroke-width: 1.5;" width="216" x="25144.5" y="73.9531"/><ellipse cx="25159.5" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25162.4688,95.5938 Q25161.8906,95.8906 25161.25,96.0313 Q25160.6094,96.1875 25159.9063,96.1875 Q25157.4063,96.1875 25156.0781,94.5469 Q25154.7656,92.8906 25154.7656,89.7656 Q25154.7656,86.6406 25156.0781,84.9844 Q25157.4063,83.3281 25159.9063,83.3281 Q25160.6094,83.3281 25161.25,83.4844 Q25161.9063,83.6406 25162.4688,83.9375 L25162.4688,86.6563 Q25161.8438,86.0781 25161.25,85.8125 Q25160.6563,85.5313 25160.0313,85.5313 Q25158.6875,85.5313 25158,86.6094 Q25157.3125,87.6719 25157.3125,89.7656 Q25157.3125,91.8594 25158,92.9375 Q25158.6875,94 25160.0313,94 Q25160.6563,94 25161.25,93.7344 Q25161.8438,93.4531 25162.4688,92.875 L25162.4688,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="184" x="25173.5" y="94.1074">_ObjectSignalDisconnectData</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25145.5" x2="25359.5" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="111.9531"/><ellipse cx="25155.5" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="25164.5" y="120.1636">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="124.7578"/><ellipse cx="25155.5" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="25164.5" y="132.9683">target : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="25145.5" x2="25359.5" y1="139.5625" y2="139.5625"/><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25150.5" y="145.5625"/><ellipse cx="25155.5" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="25164.5" y="153.7729">method : StringName</text></a><!--MD5=[6f2b8bf6de67278d3387148d256017be]
class C_0000096380574950611570--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" target="_top" title="UndoRedo" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" xlink:show="new" xlink:title="UndoRedo" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="508.9688" id="C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.5;" width="1446" x="14667.5" y="4687.4531"/><ellipse cx="15353.75" cy="4703.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15356.7188,4709.0938 Q15356.1406,4709.3906 15355.5,4709.5313 Q15354.8594,4709.6875 15354.1563,4709.6875 Q15351.6563,4709.6875 15350.3281,4708.0469 Q15349.0156,4706.3906 15349.0156,4703.2656 Q15349.0156,4700.1406 15350.3281,4698.4844 Q15351.6563,4696.8281 15354.1563,4696.8281 Q15354.8594,4696.8281 15355.5,4696.9844 Q15356.1563,4697.1406 15356.7188,4697.4375 L15356.7188,4700.1563 Q15356.0938,4699.5781 15355.5,4699.3125 Q15354.9063,4699.0313 15354.2813,4699.0313 Q15352.9375,4699.0313 15352.25,4700.1094 Q15351.5625,4701.1719 15351.5625,4703.2656 Q15351.5625,4705.3594 15352.25,4706.4375 Q15352.9375,4707.5 15354.2813,4707.5 Q15354.9063,4707.5 15355.5,4707.2344 Q15356.0938,4706.9531 15356.7188,4706.375 L15356.7188,4709.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="15374.25" y="4707.6074">UndoRedo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14668.5" x2="16112.5" y1="4719.4531" y2="4719.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="14668.5" x2="16112.5" y1="4727.4531" y2="4727.4531"/><ellipse cx="14678.5" cy="4738.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="14687.5" y="4741.6636">get_class() const : String</text><ellipse cx="14678.5" cy="4751.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="14687.5" y="4754.4683">_get_class_namev() const : const StringName *</text><ellipse cx="14678.5" cy="4764.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="14687.5" y="4767.2729">get_class_ptr_static() : void *</text><ellipse cx="14678.5" cy="4776.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="14687.5" y="4780.0776">get_class_static() : String</text><ellipse cx="14678.5" cy="4789.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="14687.5" y="4792.8823">get_parent_class_static() : String</text><ellipse cx="14678.5" cy="4802.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="14687.5" y="4805.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="14678.5" cy="4815.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="14687.5" y="4818.4917">get_category_static() : String</text><ellipse cx="14678.5" cy="4828.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="14687.5" y="4831.2964">inherits_static() : String</text><ellipse cx="14678.5" cy="4840.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="14687.5" y="4844.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="14678.5" cy="4853.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="14687.5" y="4856.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="14678.5" cy="4866.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="14687.5" y="4869.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="14678.5" cy="4879.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="14687.5" y="4882.5151">initialize_class() : void</text><ellipse cx="14678.5" cy="4892.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="14687.5" y="4895.3198">get_save_class() const : String</text><ellipse cx="14678.5" cy="4904.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="14687.5" y="4908.1245">_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="14678.5" cy="4917.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="14687.5" y="4920.9292">_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="14678.5" cy="4930.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="14687.5" y="4933.7339">create_action(const String &amp; p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void</text><ellipse cx="14678.5" cy="4943.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1406" x="14687.5" y="4946.5386">add_do_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="14678.5" cy="4956.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1420" x="14687.5" y="4959.3433">add_undo_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="14678.5" cy="4968.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="14687.5" y="4972.1479">add_do_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="14678.5" cy="4981.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="549" x="14687.5" y="4984.9526">add_undo_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="14678.5" cy="4994.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="14687.5" y="4997.7573">add_do_reference(Object * p_object) : void</text><ellipse cx="14678.5" cy="5007.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="14687.5" y="5010.562">add_undo_reference(Object * p_object) : void</text><ellipse cx="14678.5" cy="5020.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="14687.5" y="5023.3667">is_committing_action() const : bool</text><ellipse cx="14678.5" cy="5032.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="14687.5" y="5036.1714">commit_action() : void</text><ellipse cx="14678.5" cy="5045.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="14687.5" y="5048.9761">redo() : bool</text><ellipse cx="14678.5" cy="5058.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="14687.5" y="5061.7808">undo() : bool</text><ellipse cx="14678.5" cy="5071.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="14687.5" y="5074.5854">get_current_action_name() const : String</text><ellipse cx="14678.5" cy="5084.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="14687.5" y="5087.3901">clear_history(bool p_increase_version = true) : void</text><ellipse cx="14678.5" cy="5096.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="14687.5" y="5100.1948">has_undo() : bool</text><ellipse cx="14678.5" cy="5109.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="14687.5" y="5112.9995">has_redo() : bool</text><ellipse cx="14678.5" cy="5122.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="14687.5" y="5125.8042">get_version() const : uint64_t</text><ellipse cx="14678.5" cy="5135.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="519" x="14687.5" y="5138.6089">set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5148.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="566" x="14687.5" y="5151.4136">set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5161.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="583" x="14687.5" y="5164.2183">set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void</text><ellipse cx="14678.5" cy="5173.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="14687.5" y="5177.0229">UndoRedo() : void</text><ellipse cx="14678.5" cy="5186.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="14687.5" y="5189.8276">~UndoRedo() : void</text></a><!--MD5=[9ad247f9a1f402d5bcd303a8e9ade6db]
class C_0000762417759113755306--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" target="_top" title="_ArrayVariantSortCustom" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" xlink:show="new" xlink:title="_ArrayVariantSortCustom" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1w51hee8s8zvp)" height="86.4141" id="C_0000762417759113755306" style="stroke: #A80036; stroke-width: 1.5;" width="390" x="25395.5" y="73.9531"/><ellipse cx="25508.25" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25511.2188,95.5938 Q25510.6406,95.8906 25510,96.0313 Q25509.3594,96.1875 25508.6563,96.1875 Q25506.1563,96.1875 25504.8281,94.5469 Q25503.5156,92.8906 25503.5156,89.7656 Q25503.5156,86.6406 25504.8281,84.9844 Q25506.1563,83.3281 25508.6563,83.3281 Q25509.3594,83.3281 25510,83.4844 Q25510.6563,83.6406 25511.2188,83.9375 L25511.2188,86.6563 Q25510.5938,86.0781 25510,85.8125 Q25509.4063,85.5313 25508.7813,85.5313 Q25507.4375,85.5313 25506.75,86.6094 Q25506.0625,87.6719 25506.0625,89.7656 Q25506.0625,91.8594 25506.75,92.9375 Q25507.4375,94 25508.7813,94 Q25509.4063,94 25510,93.7344 Q25510.5938,93.4531 25511.2188,92.875 L25511.2188,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="156" x="25528.75" y="94.1074">_ArrayVariantSortCustom</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25396.5" x2="25784.5" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25401.5" y="111.9531"/><ellipse cx="25406.5" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="25415.5" y="120.1636">obj : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25401.5" y="124.7578"/><ellipse cx="25406.5" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="25415.5" y="132.9683">func : StringName</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="25396.5" x2="25784.5" y1="139.5625" y2="139.5625"/><ellipse cx="25406.5" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="25415.5" y="153.7729">operator()(const Variant &amp; p_l, const Variant &amp; p_r) const : bool</text><!--MD5=[67369f02025bab145a8745314f1215ba]
reverse link C_0000699772808699382057 to C_0001357046052919104842--><path d="M25070.94,5017.9031 C25079.91,5484.7731 25127.92,7983.2331 25133.06,8250.3231 " fill="none" id="C_0000699772808699382057&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25070.69,5004.6831,25066.8094,5010.7611,25070.9273,5016.6808,25074.8079,5010.6028,25070.69,5004.6831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="25125.5" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="36" x="25135.5" y="7730.02">count</text><!--MD5=[2ffeeed3545e7b157c0ce9e8e5104c4e]
reverse link C_0001531814603945772616 to C_0001578539238208480863--><path d="M14555.66,1005.3331 C14891.55,1103.3831 15282.87,1264.0131 15562.5,1520.9531 C15648.52,1599.9931 15689.81,1740.7631 15703.31,1796.1431 " fill="none" id="C_0001531814603945772616&lt;-C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.74,1001.5831,14547.3853,1007.0986,14554.2632,1004.932,14549.6179,999.4165,14542.74,1001.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15528.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="15538.5" y="1487.02">signal_map</text><!--MD5=[72f037eff370e80d2cbcf7aa189b1853]
reverse link C_0001531814603945772616 to C_0000751300156436098886--><path d="M14555.33,1037.0731 C14834.54,1137.9131 15140.78,1291.8031 15352.5,1520.9531 C15427.81,1602.4631 15449.64,1741.1931 15455.51,1796.0931 " fill="none" id="C_0001531814603945772616&lt;-C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.9,1032.6131,14547.1974,1038.4038,14554.1955,1036.6642,14549.8981,1030.8735,14542.9,1032.6131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15325.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="77" x="15335.5" y="1487.02">connections</text><!--MD5=[24eeaa45737871c41c3c567256e955dc]
reverse link C_0001531814603945772616 to C_0000699772808699382057--><path d="M14555.62,865.8431 C16788.99,877.4831 23762.9,958.9031 24590.5,1520.9531 C24872.09,1712.1931 24860.91,1868.5631 24950.5,2196.9531 C25234.06,3236.3231 25109.79,4578.4331 25076.69,4879.3231 " fill="none" id="C_0001531814603945772616&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.56,865.7831,14548.5379,869.816,14554.5598,865.8491,14548.5819,861.8162,14542.56,865.7831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24931.5" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="24941.5" y="1825.02">_lock_index</text><!--MD5=[28ef588d9e338ac6e5c120423ba24700]
reverse link C_0001531814603945772616 to C_0000051860595756965531--><path d="M14555.74,922.5831 C14987.05,995.5231 15522.96,1158.3431 15854.5,1520.9531 C15927.23,1600.5031 15928.7,1740.9731 15926.14,1796.2131 " fill="none" id="C_0001531814603945772616&lt;-C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.69,920.3931,14547.949,925.327,14554.526,922.3702,14549.267,917.4363,14542.69,920.3931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15818.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="115" x="15828.5" y="1487.02">change_receptors</text><!--MD5=[ed9dc36b2f21e467e266d4389da6816d]
link C_0001531814603945772616 to C_0000933379568804427881--><path d="M14542.62,965.0731 C15117.37,1066.0331 15882.47,1239.8431 16082.5,1473.9531 C16148.5,1551.1931 16144.57,1676.2031 16134.14,1752.7931 " fill="none" id="C_0001531814603945772616-&gt;C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="16133.44,1757.7631,16138.6355,1749.3961,16134.1251,1752.8103,16130.7109,1748.2999,16133.44,1757.7631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16096.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="16106.5" y="1487.02">_rc</text><!--MD5=[465ae2a41eb5396ad803817584c492e2]
link C_0000933379568804427881 to C_0001531814603945772616--><path d="M16111.59,1757.8831 C16094.83,1676.5131 16052.37,1536.2131 15952.5,1473.9531 C15524.56,1207.2031 14974.8,1052.6231 14547.67,965.8431 " fill="none" id="C_0000933379568804427881-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.65,964.8231,14550.6684,970.542,14547.549,965.8229,14552.2681,962.7035,14542.65,964.8231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15971.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="25" x="15981.5" y="1487.02">_ptr</text><!--MD5=[a69d5e275dd95acce759534bd27bf2c9]
reverse link C_0001531814603945772616 to C_0001682405743486361214--><path d="M13185.13,875.7131 C12053.87,908.9231 9863.31,1035.8931 9286.5,1520.9531 C9072.22,1701.1531 9306.69,1940.8431 9091.5,2119.9531 C8891.97,2286.0231 8685.8,2003.6731 8512.5,2196.9531 C8320.44,2411.1531 8433.79,4663.1731 8447.24,4917.6031 " fill="none" id="C_0001531814603945772616&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13198.39,875.3231,13192.274,871.5028,13186.3953,875.679,13192.5113,879.4993,13198.39,875.3231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9289.5" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="139" x="9299.5" y="1825.02">editor_section_folding</text><!--MD5=[e890cc5c6d0e6bb285e3e89ed5d4bd98]
link C_0001531814603945772616 to C_0001735438654351294549--><path d="M13870.5,1444.2131 C13870.5,1511.2131 13870.5,1575.3931 13870.5,1631.1331 " fill="none" id="C_0001531814603945772616-&gt;C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13870.5,1636.1531,13874.5,1627.1531,13870.5,1631.1531,13866.5,1627.1531,13870.5,1636.1531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13873.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="13883.5" y="1487.02">script_instance</text><!--MD5=[c5e4261359ae37cd97c8a7ca8ed3d9da]
reverse link C_0001531814603945772616 to C_0002025812040042972946--><path d="M14553.77,1177.1131 C14716.95,1272.3231 14882.02,1387.6631 15014.5,1520.9531 C15074.74,1581.5631 15120.55,1668.0231 15149.18,1732.2931 " fill="none" id="C_0001531814603945772616&lt;-C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.53,1170.5831,14545.7003,1177.06,14552.8982,1176.6247,14549.728,1170.1478,14542.53,1170.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14978.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="14988.5" y="1487.02">script</text><!--MD5=[c05e40dce802254568c704f572fe66ef]
reverse link C_0001531814603945772616 to C_0001299121424291583786--><path d="M14501.01,1453.8631 C14522.01,1476.2631 14542.57,1498.6731 14562.5,1520.9531 C14591.1,1552.9331 14619.97,1588.2631 14647.08,1623.0831 " fill="none" id="C_0001531814603945772616&lt;-C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14491.98,1444.2631,14493.1737,1451.3747,14500.1974,1453.0081,14499.0037,1445.8965,14491.98,1444.2631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14530.5" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="14540.5" y="1487.02">metadata</text><!--MD5=[67cf5364a880881dbfa9463a33b38abe]
reverse link C_0001531814603945772616 to C_0001858199404643284193--><path d="M14555.67,894.7731 C16783.24,999.4431 23677.5,1360.4731 23677.5,1819.4531 C23677.5,1819.4531 23677.5,1819.4531 23677.5,8275.4531 C23677.5,9125.1331 22697.73,8804.0631 21848.5,8831.9531 C18474.23,8942.7731 14349.43,8999.4231 13461.86,9010.7931 " fill="none" id="C_0001531814603945772616&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.64,894.1631,14548.449,898.4358,14554.6272,894.717,14548.8182,890.4443,14542.64,894.1631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23680.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="23690.5" y="4946.52">_class_name</text><!--MD5=[9f9c127cde67f8af23da46dde2ce4ce8]
link C_0001531814603945772616 to C_0001858199404643284193--><path d="M14542.58,878.4831 C16568.32,926.7531 22522.62,1103.0131 23283.5,1520.9531 C23610.81,1700.7431 23665.76,1842.2331 23782.5,2196.9531 C23877.85,2486.6631 23793.45,7382.1531 23782.5,7686.9531 C23764.93,8175.9031 24054.44,8444.0431 23703.5,8784.9531 C23512.22,8970.7631 14828.48,9007.7331 13467.2,9012.3931 " fill="none" id="C_0001531814603945772616-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13461.75,9012.4131,13470.7614,9016.3874,13466.75,9012.3988,13470.7385,9008.3874,13461.75,9012.4131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23829.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="64" x="23839.5" y="4946.52">_class_ptr</text><!--MD5=[d327e113621300c939a9250d421ffcd5]
reverse link C_0001531814603945772616 to C_0001357046052919104842--><path d="M14556.17,879.5131 C16926.78,936.5031 24651.77,1150.0931 25023.5,1520.9531 C25227.75,1724.7231 24903.76,1944.5131 25087.5,2166.9531 C25117.32,2203.0531 25160.5,2159.4231 25188.5,2196.9531 C25279.7,2319.1831 25195.63,7534.6231 25188.5,7686.9531 C25178.21,7906.8431 25146.34,8171.6031 25136.46,8250.3131 " fill="none" id="C_0001531814603945772616&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14542.75,879.1931,14548.6516,883.337,14554.7465,879.4832,14548.8449,875.3393,14542.75,879.1931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="25090.5" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="150" x="25100.5" y="2163.02">instance_binding_count</text><!--MD5=[9f6312e8f49fb01007aa82352e3e18a3]
reverse link C_0001531814603945772616 to C_0000104564426296396960--><path d="M13193.91,1186.8131 C13062.27,1277.9531 12938.14,1389.0431 12850.5,1520.9531 C12681.69,1775.0531 12760.04,1893.2231 12731.5,2196.9531 C12617.37,3411.7031 12710.06,6467.8931 12659.5,7686.9531 C12658.46,7712.0631 12657.24,7737.7731 12655.88,7763.7331 " fill="none" id="C_0001531814603945772616&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13198.2,1183.8531,13188.5175,1185.6557,13194.0798,1186.6858,13193.0497,1192.2481,13198.2,1183.8531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12741.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12748.5" y="2163.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M14547.66,870.8531 C16651.45,897.0731 22980.93,1013.7631 23774.5,1473.9531 C23851.64,1518.6831 23907.38,1601.3831 23944.31,1674.6631 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14542.66,870.7931,14551.6137,874.8957,14547.6597,870.8503,14551.7051,866.8962,14542.66,870.7931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23798.5" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23805.5" y="1487.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M14562.9,863.6731 C16703.96,868.6031 23118.71,929.1631 23866.5,1473.9531 C23930.65,1520.6931 23964.32,1602.5131 23982,1674.7931 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.57,870.6731,14542.58,863.6231,14562.6,856.6731,14562.57,870.6731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bfb0bd8a69f4f74c042f91302129fecd]
reverse link C_0001531814603945772616 to C_0000132048052014479231--><path d="M14547.97,956.7931 C15205.67,1058.8231 16145.02,1239.8031 16428.5,1473.9531 C16524.53,1553.2731 16563.83,1704.1331 16577.8,1777.4131 " fill="none" id="C_0001531814603945772616&lt;-C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14542.66,955.9731,14550.9355,961.3131,14547.6002,956.7441,14552.1692,953.4088,14542.66,955.9731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16449.5" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16456.5" y="1487.02">«friend»</text><!--MD5=[b349530a27aaee85f524a15949be3331]
link C_0000132048052014479231 to C_0001531814603945772616--><path d="M16589.67,1777.3431 C16596.02,1704.9631 16597.5,1556.8031 16517.5,1473.9531 C16249.07,1195.9731 15239.57,1023.9231 14547.81,936.0831 " fill="none" id="C_0000132048052014479231-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.74,935.4431,14551.1653,940.5435,14547.7003,936.0721,14552.1717,932.607,14542.74,935.4431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16535.5" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="16542.5" y="1487.02">obj</text><!--MD5=[ffb696d15bc654aa90b9653d940ba57b]
link C_0000219886141561409828 to C_0001531814603945772616--><path d="M14142.52,166.4831 C14132.39,192.3731 14118.76,227.2231 14102.97,267.5931 " fill="none" id="C_0000219886141561409828-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14100.3372" cy="274.344" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="14103.2544" x2="14097.42" y1="266.8948" y2="281.7931"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="14107.7864" x2="14092.888" y1="277.2612" y2="271.4268"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5863.19,205.0031 C5891.4,223.6031 5922.83,240.9331 5954.5,251.9531 C7281.19,713.4531 11512.95,826.7631 13183.14,853.7731 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13190.411" cy="853.8936" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13182.4121" x2="13198.41" y1="853.7641" y2="854.0231"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13190.5406" x2="13190.2815" y1="845.8947" y2="861.8926"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5937.12,200.1631 C5942.94,201.8931 5948.74,203.5031 5954.5,204.9531 C7318.51,549.5831 11536.84,762.2131 13193.08,834.3331 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.23,834.5531,13189.4226,830.1451,13193.2352,834.3241,13189.0563,838.1368,13198.23,834.5531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6126.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="6133.5" y="248.02">source</text><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M5805.33,205.0431 C5820.05,223.5131 5837.85,240.7831 5858.5,251.9531 C6495.96,596.6631 11377.4,783.6731 13193.09,841.8831 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.41,842.0531,13189.5401,837.7724,13193.4125,841.8961,13189.2888,845.7684,13198.41,842.0531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5864.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="5871.5" y="248.02">target</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M5560.45,120.8931 C4920.93,131.4831 2891.74,173.0431 2246.5,281.9531 C1350.72,433.1431 286.5,-46.4969 286.5,861.9531 C286.5,861.9531 286.5,861.9531 286.5,8275.4531 C286.5,8503.1631 187.04,8616.7131 340.5,8784.9531 C412.28,8863.6431 469.58,8820.7031 575.5,8831.9531 C1877.58,8970.2531 11687.73,9007.6731 13115.41,9012.4131 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5573.92,120.6631,5567.8549,116.7626,5561.9216,120.8609,5567.9867,124.7615,5573.92,120.6631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="292.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="299.5" y="2163.02">signal</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M5560.39,120.2031 C4595.35,131.7831 374.9,187.7531 278.5,281.9531 C117.68,439.1231 -165.26,8148.5431 260.5,8784.9531 C290.06,8829.1431 318.49,8820.9231 370.5,8831.9531 C1023.22,8970.3231 11626.17,9007.8531 13115.28,9012.4431 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5573.67,120.0431,5567.6221,116.1159,5561.6709,120.1882,5567.7188,124.1154,5573.67,120.0431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="125.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="132.5" y="2163.02">method</text><!--MD5=[823a143a71700de2dee8f67b9b5676a1]
link C_0000250357724807605097 to C_0001531814603945772616--><path d="M13512.02,160.0831 C13525.57,186.6031 13544.73,224.1231 13567.22,268.1731 " fill="none" id="C_0000250357724807605097-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13570.5084" cy="274.6" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13566.8669" x2="13574.15" y1="267.4769" y2="281.7231"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="13577.6316" x2="13563.3853" y1="270.9584" y2="278.2416"/><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13868.97,166.6231 C13868.39,187.6331 13867.79,212.5031 13867.5,234.9531 C13867.4,242.5031 13867.48,244.3931 13867.5,251.9531 C13867.52,260.0631 13867.54,268.2431 13867.56,276.4631 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13867.58,281.5831,13871.5543,272.5717,13867.5657,276.5831,13863.5543,272.5946,13867.58,281.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13870.5" y="241.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="13880.5" y="248.02">instances</text><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13911.09,166.6031 C13925.19,186.5031 13939.28,210.5631 13946.5,234.9531 C13948.65,242.1931 13946.97,244.4131 13946.5,251.9531 C13945.99,260.1131 13945.45,268.3331 13944.87,276.5931 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13944.51,281.7431,13949.1428,273.0519,13944.8673,276.7559,13941.1633,272.4803,13944.51,281.7431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13950.5" y="241.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="105" x="13960.5" y="248.02">instance_checks</text><!--MD5=[8b696ada1a164533cee31d9d01e1d4f0]
reverse link C_0002064336919270342687 to C_0001531814603945772616--><path d="M13826.37,170.7831 C13813.12,189.8031 13800.31,212.2131 13793.5,234.9531 C13791.33,242.1931 13793.03,244.4131 13793.5,251.9531 C13794.12,261.8031 13794.79,271.7431 13795.52,281.7531 " fill="none" id="C_0002064336919270342687&lt;-C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13829.38,166.5231,13820.9123,171.5528,13826.4887,170.6024,13827.4391,176.1788,13829.38,166.5231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13799.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13806.5" y="248.02">«friend»</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12915.05,8784.9631 C12929.75,8801.3431 12944.91,8817.0831 12960.5,8831.9531 C13003.78,8873.2531 13058.29,8908.2331 13110.39,8936.1131 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.1,8938.6231,13109.0347,8930.8635,13110.6863,8936.2739,13105.2759,8937.9255,13115.1,8938.6231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12966.5" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="47" x="12973.5" y="8828.02">classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13016.12,8785.0431 C13031.19,8801.0931 13046.33,8816.7731 13061.5,8831.9531 C13077.15,8847.6131 13094.11,8863.2331 13111.48,8878.3531 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.42,8881.7831,13111.2424,8872.8642,13111.643,8878.5068,13106.0003,8878.9074,13115.42,8881.7831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13067.5" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="170" x="13074.5" y="8828.02">resource_base_extensions</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13231.31,8785.3831 C13237.61,8795.1431 13243.68,8805.0031 13249.5,8814.9531 C13257.08,8827.9331 13263.22,8842.1131 13268.19,8856.7431 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13269.82,8861.7231,13270.7864,8851.9218,13268.2474,8856.9769,13263.1924,8854.4379,13269.82,8861.7231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13263.5" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="103" x="13270.5" y="8828.02">compat_classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12586.52,8785.1131 C12594.59,8801.5031 12604.18,8817.1931 12615.5,8831.9531 C12675.48,8910.2031 12931.85,8962.1731 13110.24,8989.6231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-3" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.24,8990.3831,13106.9494,8985.0665,13110.2976,8989.6261,13105.7381,8992.9743,13115.24,8990.3831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12621.5" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="92" x="12628.5" y="8828.02">default_values</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M12743.44,8784.9631 C12755.03,8801.5531 12767.68,8817.3131 12781.5,8831.9531 C12867.14,8922.7031 13001.34,8968.0231 13110.17,8990.6231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-4" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13115.33,8991.6831,13107.3116,8985.9643,13110.431,8990.6833,13105.7119,8993.8027,13115.33,8991.6831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12787.5" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="12794.5" y="8828.02">default_values_cached</text><!--MD5=[b642425c83424b61917059e5da81b445]
reverse link C_0000218299049716973303 to C_0001858199404643284193--><path d="M18860.42,6035.7431 C18780.44,6595.9631 18593.05,7250.3231 18167.5,7686.9531 C17480.08,8392.2631 14248.78,8879.9431 13461.68,8989.5731 " fill="none" id="C_0000218299049716973303&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="18862.29,6022.5331,18857.4859,6027.9109,18860.6022,6034.4138,18865.4063,6029.0361,18862.29,6022.5331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="18080.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="18090.5" y="8279.02">_class_name</text><!--MD5=[b604a94a8074bade127c96b8a1da6977]
reverse link C_0000218299049716973303 to C_0000104564426296396960--><path d="M18912.31,6028.0431 C18851.61,6616.7131 18666.14,7301.0231 18167.5,7686.9531 C18135.43,7711.7731 15288.05,7716.2231 15247.5,7716.9531 C15196.94,7717.8631 13475.9,7749.3031 13427.5,7763.9531 C13418.37,7766.7231 13409.23,7769.6131 13400.11,7772.6431 " fill="none" id="C_0000218299049716973303&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="18912.84,6022.8531,18907.9594,6031.4077,18912.3397,6027.828,18915.9193,6032.2082,18912.84,6022.8531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15253.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15260.5" y="7730.02">«friend»</text><!--MD5=[70070708faa8146b449b4995936967c8]
reverse link C_0001531814603945772616 to C_0000218299049716973303--><path d="M14562.74,985.2431 C15654.95,1191.2631 17702.08,1641.7831 18167.5,2196.9531 C18556.54,2661.0131 18742.87,3310.7131 18831.44,3861.4431 " fill="none" id="C_0001531814603945772616&lt;-C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.09,992.0531,14542.73,981.4731,14563.68,978.2931,14561.09,992.0531" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f728ac2c311f9c9f533bae5aa126394c]
reverse link C_0001778859257025660860 to C_0001858199404643284193--><path d="M24001.61,1979.6731 C24001.93,3008.4031 23997.97,8708.8931 23870.5,8831.9531 C23675.18,9020.5131 14816.46,9015.1731 13461.55,9013.2531 " fill="none" id="C_0001778859257025660860&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24001.6,1966.3231,23997.6066,1972.3275,24001.6132,1978.3231,24005.6066,1972.3187,24001.6,1966.3231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23951.5" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="23961.5" y="7730.02">_class_name</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M24130.9,1975.4531 C24207.55,2052.6731 24312.11,2136.2031 24427.5,2166.9531 C24483.74,2181.9431 24909.63,2155.5131 24950.5,2196.9531 C25337.42,2589.3131 25122.69,4509.8531 25077.31,4879.3731 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24121.69,1966.0731,24123.0382,1973.1571,24130.0957,1974.6372,24128.7476,1967.5533,24121.69,1966.0731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24430.5" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="53" x="24440.5" y="2163.02">refcount</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M24136.64,1975.6631 C24192.25,2029.6631 24260.69,2085.3931 24333.5,2119.9531 C24364.28,2134.5631 24602.69,2162.7231 24636.5,2166.9531 C24671.28,2171.3031 24926.37,2171.5331 24950.5,2196.9531 C25329.8,2596.4731 25121.34,4510.2331 25077.13,4879.2831 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24127.12,1966.3131,24128.5946,1973.3718,24135.6775,1974.7256,24134.2029,1967.6669,24127.12,1966.3131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24639.5" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="79" x="24649.5" y="2163.02">refcount_init</text><!--MD5=[0a2b60ba7d2c96e1d65f8bc42ff8af0b]
reverse link C_0001778859257025660860 to C_0000104564426296396960--><path d="M23796.72,1942.7931 C23709.52,2006.4431 23616.89,2092.9331 23568.5,2196.9531 C23504.17,2335.2431 23597.47,7579.2331 23489.5,7686.9531 C23470.48,7705.9231 19648.36,7733.7231 19621.5,7733.9531 C19535.22,7734.6831 13492.21,7739.4031 13409.5,7763.9531 C13406.37,7764.8831 13403.24,7765.8331 13400.11,7766.7931 " fill="none" id="C_0001778859257025660860&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="23800.87,1939.7831,23791.2348,1941.8235,23796.8208,1942.7163,23795.9279,1948.3023,23800.87,1939.7831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23574.5" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23581.5" y="4946.52">«friend»</text><!--MD5=[2cf028d42d6a2db252d6d720b88d2c11]
link C_0001649884439586022807 to C_0001531814603945772616--><path d="M16774.27,4789.8631 C16698.68,4368.2331 16481.66,3142.6131 16327.5,2119.9531 C16307.48,1987.1631 16329.27,1627.4831 16247.5,1520.9531 C16040.39,1251.1531 15174.75,1063.1731 14547.78,959.3831 " fill="none" id="C_0001649884439586022807-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.72,958.5431,14550.9349,963.976,14547.6512,959.3697,14552.2574,956.0861,14542.72,958.5431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16330.5" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="16340.5" y="1825.02">owner</text><!--MD5=[9db7a3eb346815fb65d8e4265bbdc5b6]
reverse link C_0001735438654351294549 to C_0001649884439586022807--><path d="M14246.66,2012.5731 C14346.89,2055.4131 14456.77,2095.4031 14562.5,2119.9531 C14732.52,2159.4331 15996.9,2085.8231 16131.5,2196.9531 C16936.26,2861.3831 16866.03,4317.3931 16819.44,4789.7531 " fill="none" id="C_0001735438654351294549&lt;-C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14243.64,2018.9031,14228.06,2004.5431,14249.19,2006.0431,14243.64,2018.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2191a2c55081528738a9601d975d7e81]
reverse link C_0000970940027123558604 to C_0001858199404643284193--><path d="M19933.24,5216.0731 C20005.83,5734.6431 20097.09,6881.8531 19649.5,7686.9531 C19253.78,8398.7531 18949.04,8509.8831 18182.5,8784.9531 C17731.29,8946.8731 14279.55,9000.4231 13461.81,9010.9031 " fill="none" id="C_0000970940027123558604&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="19931.42,5203.1931,19928.2966,5209.6927,19933.0949,5215.0757,19936.2183,5208.5761,19931.42,5203.1931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="19599.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="19609.5" y="8279.02">_class_name</text><!--MD5=[d541019a02b5abc817eac1d3ff5a0498]
reverse link C_0000970940027123558604 to C_0000104564426296396960--><path d="M19964.78,5207.8431 C20108.38,5762.2231 20342.62,7046.2731 19649.5,7686.9531 C19610.91,7722.6231 15918.05,7715.9331 15865.5,7716.9531 C15621.87,7721.6931 15561.11,7728.2431 15317.5,7733.9531 C15212.52,7736.4131 13528.16,7734.0331 13427.5,7763.9531 C13418.35,7766.6731 13409.21,7769.5231 13400.07,7772.5131 " fill="none" id="C_0000970940027123558604&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="19963.52,5202.9831,19961.9097,5212.6994,19964.7763,5207.8227,19969.653,5210.6894,19963.52,5202.9831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15871.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15878.5" y="7730.02">«friend»</text><!--MD5=[af31877db6ec92759d70e67f8199ce9a]
reverse link C_0001531814603945772616 to C_0000970940027123558604--><path d="M14562.55,964.1731 C15293.17,1075.9531 16475.91,1273.9731 17480.5,1520.9531 C17603.07,1551.0831 19570.37,2098.6231 19649.5,2196.9531 C20237.44,2927.5931 20064.21,4149.2631 19951.02,4680.7631 " fill="none" id="C_0001531814603945772616&lt;-C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.4,971.0731,14542.68,961.1331,14563.51,957.2331,14561.4,971.0731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f972d27a027a57bd8d2a6ea69d3db7f2]
reverse link C_0001823345232236209470 to C_0001858199404643284193--><path d="M19973.19,122.0031 C20769.68,134.5531 23070.36,175.5431 23404.5,234.9531 C24275.85,389.8731 25294.5,-23.0669 25294.5,861.9531 C25294.5,861.9531 25294.5,861.9531 25294.5,8275.4531 C25294.5,8503.4631 25401.51,8629.7231 25234.5,8784.9531 C24887.46,9107.5031 24643.08,8817.5631 24169.5,8831.9531 C19817.21,8964.1631 14482.51,9005.0231 13461.72,9011.8531 " fill="none" id="C_0001823345232236209470&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="19960.13,121.7931,19966.0678,125.8849,19972.1286,121.9777,19966.1908,117.8859,19960.13,121.7931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25300.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25307.5" y="2163.02">name</text><!--MD5=[d03f40f4e0550f14d97c47cc13da68a0]
link C_0001823345232236209470 to C_0001531814603945772616--><path d="M19444.85,150.8231 C18591.27,259.7131 15837.01,611.0831 14547.8,775.5431 " fill="none" id="C_0001823345232236209470-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.61,776.2131,14552.0417,779.0492,14547.5703,775.5842,14551.0353,771.1128,14542.61,776.2131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="18730.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="18" x="18737.5" y="248.02">ptr</text><!--MD5=[defcce9c8f425e144c84d1e88f84777b]
reverse link C_0001191393512042218074 to C_0001858199404643284193--><path d="M22086,5145.5931 C22199.48,5812.5231 22454.1,7944.3231 21258.5,8784.9531 C20928.7,9016.8331 14597.02,9015.4931 13461.95,9013.3731 " fill="none" id="C_0001191393512042218074&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="22083.76,5132.5131,22080.8329,5139.1034,22085.7905,5144.3401,22088.7176,5137.7498,22083.76,5132.5131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21981.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="21991.5" y="8279.02">_class_name</text><!--MD5=[b77e23c3a90867c3de8e35bacb429255]
link C_0001191393512042218074 to C_0001191393512042218074--><path d="M22086.11,4751.1631 C22208.1,4253.6631 22395,4317.2631 22395,4941.9531 C22395,5564.5131 22209.38,5629.8031 22087.37,5137.8331 " fill="none" id="C_0001191393512042218074-&gt;C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="22086.11,5132.7431,22084.3854,5142.4398,22087.3092,5137.5972,22092.1519,5140.521,22086.11,5132.7431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="22406,4937.5195,22410,4941.5195,22406,4945.5195,22402,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="22413" y="4946.52">singleton</text><!--MD5=[f80c7ee04ef556cee553628e7a65d3d1]
reverse link C_0001191393512042218074 to C_0000104564426296396960--><path d="M22098.33,5137.6831 C22218.33,5647.5231 22456.53,7027.5731 21717.5,7686.9531 C21691.15,7710.4631 16666.69,7713.8831 16631.5,7716.9531 C16586.59,7720.8731 16576.4,7729.9431 16531.5,7733.9531 C16359.73,7749.2831 13592.95,7715.3231 13427.5,7763.9531 C13418.34,7766.6431 13409.19,7769.4731 13400.04,7772.4231 " fill="none" id="C_0001191393512042218074&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="22097.1,5132.4631,22095.2614,5142.1388,22098.242,5137.331,22103.0499,5140.3116,22097.1,5132.4631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16637.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16644.5" y="7730.02">«friend»</text><!--MD5=[ab8fd2992e044c54f6cd905a344680fd]
reverse link C_0001531814603945772616 to C_0001191393512042218074--><path d="M14562.85,867.1531 C16316.87,891.9931 20857.31,1066.3631 21717.5,2196.9531 C22313.27,2980.0131 22166.33,4269.2331 22084.27,4751.2831 " fill="none" id="C_0001531814603945772616&lt;-C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.56,874.1431,14542.66,866.8631,14562.76,860.1431,14562.56,874.1431" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[105b5b587ddf98014e1a550a5acdc50e]
reverse link C_0000066148521405667716 to C_0001858199404643284193--><path d="M7717.26,1963.8631 C7254.89,2067.8731 6708.72,2191.6631 6704.5,2196.9531 C6609.4,2316.1631 6644.76,7546.6431 6704.5,7686.9531 C6980.32,8334.7831 7200.88,8504.0131 7846.5,8784.9531 C8338.84,8999.1931 12241.16,9012.7531 13115.21,9013.0831 " fill="none" id="C_0000066148521405667716&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7730.23,1960.9431,7723.4977,1958.3592,7718.5232,1963.5798,7725.2555,1966.1637,7730.23,1960.9431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6727.5" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6737.5" y="7730.02">_class_name</text><!--MD5=[2dc6087e93f271bd3bd7602f5b86331c]
reverse link C_0000066148521405667716 to C_0001682405743486361214--><path d="M8371.52,2133.2231 C8372.6,2154.7831 8373.61,2176.1931 8374.5,2196.9531 C8422.86,3327.7531 8445.18,4722.1231 8448.15,4917.7531 " fill="none" id="C_0000066148521405667716&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="8370.86,2120.1431,8367.1752,2126.3417,8371.4796,2132.1271,8375.1645,2125.9286,8370.86,2120.1431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8379.5,2154.0195,8383.5,2158.0195,8379.5,2162.0195,8375.5,2158.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="108" x="8386.5" y="2163.02">custom_features</text><!--MD5=[b1cdeb5c1d2293693591756cb414570e]
link C_0000066148521405667716 to C_0000066148521405667716--><path d="M8974.78,1784.6931 C8996.85,1794.1731 9009.5,1806.0931 9009.5,1820.4531 C9009.5,1833.6931 8998.75,1844.8531 8979.78,1853.9431 " fill="none" id="C_0000066148521405667716-&gt;C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8974.78,1856.2131,8984.6284,1856.1187,8979.3294,1854.1387,8981.3094,1848.8397,8974.78,1856.2131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9020.5,1816.0195,9024.5,1820.0195,9020.5,1824.0195,9016.5,1820.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="9027.5" y="1825.02">singleton</text><!--MD5=[3549a9a1546b9f3f927ae4be5a497360]
reverse link C_0000066148521405667716 to C_0000104564426296396960--><path d="M8321.77,2125.1931 C8320.05,2149.4531 8318.59,2173.5931 8317.5,2196.9531 C8310.42,2349.2931 8210.13,7578.6531 8317.5,7686.9531 C8351.39,7721.1431 11737.48,7702.8031 11783.5,7716.9531 C11812.02,7725.7231 11847.85,7742.1031 11888.53,7763.9031 " fill="none" id="C_0000066148521405667716&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="8322.14,2120.0131,8317.5072,2128.7043,8321.7827,2125.0003,8325.4867,2129.2759,8322.14,2120.0131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="8323.5" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="8330.5" y="4946.52">«friend»</text><!--MD5=[5f66742971e8c9e8cae80ea28ed781f8]
reverse link C_0001531814603945772616 to C_0000066148521405667716--><path d="M13178.08,905.3431 C12267.9,971.1231 10624.58,1129.1731 9260.5,1473.9531 C9166.68,1497.6631 9069.3,1528.1031 8974.68,1561.0631 " fill="none" id="C_0001531814603945772616&lt;-C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.66,898.3631,13198.11,903.9031,13178.67,912.3231,13177.66,898.3631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbb6989faf4ed278e5063ce8d06d64a7]
reverse link C_0000535376932101028371 to C_0001858199404643284193--><path d="M22996.62,5382.6931 C23087.58,6213.0031 23142.46,7998.6231 22083.5,8784.9531 C21903.84,8918.3631 14679.34,8998.6131 13461.84,9011.2031 " fill="none" id="C_0000535376932101028371&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="22995.18,5369.6331,22991.8632,5376.0361,22996.4979,5381.5605,22999.8148,5375.1575,22995.18,5369.6331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="22801.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="22811.5" y="8279.02">_class_name</text><!--MD5=[491d9ca8506983be5dd6ad346fa76ecd]
link C_0000535376932101028371 to C_0000535376932101028371--><path d="M23097.71,4514.0231 C23246.68,4304.1731 23406.5,4446.8131 23406.5,4941.9531 C23406.5,5433.7031 23248.86,5577.7631 23100.77,5374.1331 " fill="none" id="C_0000535376932101028371-&gt;C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="23097.71,5369.8831,23099.7342,5379.5217,23100.6364,5373.9373,23106.2209,5374.8395,23097.71,5369.8831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23414.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="23424.5" y="4946.52">singleton</text><!--MD5=[aeb94eee531eb6d8f9e0dab2a65178b2]
reverse link C_0000535376932101028371 to C_0000104564426296396960--><path d="M23011.39,5374.7331 C23095.21,5994.0131 23138.52,7121.8731 22477.5,7686.9531 C22453.61,7707.3731 13457.65,7755.1131 13427.5,7763.9531 C13418.34,7766.6431 13409.19,7769.4631 13400.04,7772.4131 " fill="none" id="C_0000535376932101028371&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="23010.71,5369.7431,23007.9542,5379.1986,23011.3811,5374.6979,23015.8818,5378.1248,23010.71,5369.7431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="19553.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="19560.5" y="7730.02">«friend»</text><!--MD5=[ccb0f2e105ae37379c60a8eaf42ab781]
reverse link C_0001531814603945772616 to C_0000535376932101028371--><path d="M14562.6,894.2231 C16126.72,967.8831 19892.83,1176.1631 21113.5,1520.9531 C21764.61,1704.8731 22074.71,1653.3231 22477.5,2196.9531 C22986.28,2883.6231 23009.55,3932.2131 22975.42,4514.2031 " fill="none" id="C_0001531814603945772616&lt;-C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.24,901.2131,14542.59,893.2831,14562.89,887.2331,14562.24,901.2131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ee47356e384c9a8586af688e36c84f71]
reverse link C_0001370497546359815893 to C_0001858199404643284193--><path d="M17899.15,5497.5931 C18010.22,6129.7531 18070.01,7145.2731 17472.5,7686.9531 C17409.98,7743.6331 14501.66,7665.8531 14434.5,7716.9531 C14041.44,8015.9931 14479.27,8438.2731 14127.5,8784.9531 C14033.83,8877.2631 13678.97,8949.5431 13461.87,8986.2931 " fill="none" id="C_0001370497546359815893&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="17896.85,5484.5931,17893.9599,5491.1997,17898.9467,5496.4085,17901.8368,5489.8019,17896.85,5484.5931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14378.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14388.5" y="8279.02">_class_name</text><!--MD5=[3adf581e5c7850b91ef14b43d83cd267]
link C_0001370497546359815893 to C_0001370497546359815893--><path d="M18049.55,4548.7031 C18071.17,4635.6331 18084.5,4766.7231 18084.5,4941.9531 C18084.5,5113.9331 18071.66,5243.3931 18050.74,5330.3131 " fill="none" id="C_0001370497546359815893-&gt;C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="18049.55,5335.2031,18055.5703,5327.4085,18050.7358,5330.3458,18047.7985,5325.5113,18049.55,5335.2031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="18092.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="18102.5" y="4946.52">singleton</text><!--MD5=[f0c11157ea1c302f0338a5d98b865e3f]
reverse link C_0001370497546359815893 to C_0000104564426296396960--><path d="M17897.86,5489.8031 C18009.9,6121.4731 18072.79,7143.3231 17472.5,7686.9531 C17437.52,7718.6331 14121.66,7715.0331 14074.5,7716.9531 C13786.43,7728.6731 13701.42,7674.0031 13427.5,7763.9531 C13418.33,7766.9631 13409.17,7770.1031 13400,7773.3531 " fill="none" id="C_0001370497546359815893&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="17896.95,5484.7031,17894.5781,5494.2621,17897.8206,5489.6268,17902.4559,5492.8692,17896.95,5484.7031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14080.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="14087.5" y="7730.02">«friend»</text><!--MD5=[fcb1dceefea1281ea342b1a8ab9dedf3]
reverse link C_0001531814603945772616 to C_0001370497546359815893--><path d="M14562.8,952.1731 C15225.27,1052.1931 16156.39,1238.9231 16383.5,1520.9531 C16467.38,1625.1131 16345.9,2026.4331 16441.5,2119.9531 C16605.73,2280.6131 17307.36,2037.2231 17472.5,2196.9531 C18054.13,2759.5431 17997.64,3773.9731 17891.82,4399.2931 " fill="none" id="C_0001531814603945772616&lt;-C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14561.53,959.0631,14542.79,949.1731,14563.61,945.2231,14561.53,959.0631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[afd78d936730b2a5d2a27c3ca7ae5858]
reverse link C_0001701907280759632930 to C_0001858199404643284193--><path d="M20394.49,5145.3631 C20552.84,5827.3331 20953.77,8039.9431 19701.5,8784.9531 C19425.94,8948.8931 14458.3,9002.3731 13461.73,9011.4731 " fill="none" id="C_0001701907280759632930&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="20391.49,5132.4831,20388.9599,5139.2358,20394.2201,5144.1684,20396.7502,5137.4158,20391.49,5132.4831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="20440.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="20450.5" y="8279.02">_class_name</text><!--MD5=[5f60c9416fe2cf317930fcaaeb87688d]
link C_0001701907280759632930 to C_0001701907280759632930--><path d="M20369.67,4751.1631 C20452.34,4253.6631 20579,4317.2631 20579,4941.9531 C20579,5564.5131 20453.2,5629.8031 20370.52,5137.8331 " fill="none" id="C_0001701907280759632930-&gt;C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="20369.67,5132.7431,20367.1906,5142.2748,20370.485,5137.6762,20375.0836,5140.9707,20369.67,5132.7431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="20590,4937.5195,20594,4941.5195,20590,4945.5195,20586,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="20597" y="4946.52">singleton</text><!--MD5=[88b42ccf7d3beb4b42ddd913181f42f8]
reverse link C_0001701907280759632930 to C_0000104564426296396960--><path d="M20403.81,5137.7131 C20547.5,5645.2331 20846.84,7015.4831 20125.5,7686.9531 C20085.87,7723.8431 16281.61,7715.1731 16227.5,7716.9531 C16097.57,7721.2331 16065.42,7729.3931 15935.5,7733.9531 C15796.24,7738.8331 13561.14,7724.5131 13427.5,7763.9531 C13418.35,7766.6531 13409.2,7769.4931 13400.05,7772.4531 " fill="none" id="C_0001701907280759632930&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="20402.44,5132.8931,20401.0587,5142.6446,20403.8098,5137.7018,20408.7527,5140.4529,20402.44,5132.8931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16233.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16240.5" y="7730.02">«friend»</text><!--MD5=[27a7e43ab26a99a3f421aa78b5d844cd]
reverse link C_0001531814603945772616 to C_0001701907280759632930--><path d="M14562.96,899.6131 C16051.89,992.9031 19476.01,1302.2731 20125.5,2196.9531 C20700.68,2989.2731 20494.86,4270.8631 20389.71,4751.1431 " fill="none" id="C_0001531814603945772616&lt;-C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.33,906.5831,14542.81,898.3531,14563.21,892.6131,14562.33,906.5831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[91b59d0d2b46b114de331f37d45c6fea]
reverse link C_0001589464385186808769 to C_0001858199404643284193--><path d="M2185.14,7700.2331 C2228.58,8100.5931 2360.83,8479.8231 2633.5,8784.9531 C2815.72,8988.8731 11753.68,9010.6031 13115.35,9012.7331 " fill="none" id="C_0001589464385186808769&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2183.75,7687.1831,2180.4052,7693.5716,2185.0158,7699.1162,2188.3606,7692.7277,2183.75,7687.1831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2636.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2646.5" y="8279.02">_class_name</text><!--MD5=[04ea438e6be471aabf4ca3b13070cdc4]
link C_0001589464385186808769 to C_0001589464385186808769--><path d="M4088.59,4723.7631 C4111.13,4786.7031 4123.5,4859.4331 4123.5,4941.9531 C4123.5,5022.3831 4111.75,5093.5031 4090.29,5155.3331 " fill="none" id="C_0001589464385186808769-&gt;C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4088.59,5160.1431,4095.3483,5152.9789,4090.2481,5155.4261,4087.801,5150.3259,4088.59,5160.1431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4131.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="4141.5" y="4946.52">singleton</text><!--MD5=[427f4b2a588f733610b23579090a59fb]
reverse link C_0001589464385186808769 to C_0000104564426296396960--><path d="M4092.69,7606.2831 C4129.3,7634.5031 4166.89,7661.4331 4205.5,7686.9531 C4331.49,7770.2431 4732.57,7728.3931 4883.5,7733.9531 C5071.62,7740.8831 11477.94,7717.9931 11660.5,7763.9531 C11719.3,7778.7531 11778.46,7797.8931 11836.96,7820.0331 " fill="none" id="C_0001589464385186808769&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4088.69,7603.1931,4093.3667,7611.8608,4092.6467,7606.25,4098.2576,7605.53,4088.69,7603.1931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4889.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="4896.5" y="7730.02">«friend»</text><!--MD5=[4ddd664f6ccf290832a36f79f3862090]
reverse link C_0001531814603945772616 to C_0001589464385186808769--><path d="M13178.5,937.2131 C11994.6,1060.0231 9503.71,1307.3531 7392.5,1443.9531 C7059.15,1465.5231 6971.62,1422.9331 6641.5,1473.9531 C6563.18,1486.0531 6522.23,1461.7931 6469.5,1520.9531 C6276.22,1737.7731 6589.58,1976.2331 6370.5,2166.9531 C6279.77,2245.9331 4307.64,2133.4231 4205.5,2196.9531 C4165.48,2221.8431 4126.56,2248.2731 4088.7,2276.1131 " fill="none" id="C_0001531814603945772616&lt;-C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.82,930.2531,13198.43,935.1431,13179.26,944.1731,13177.82,930.2531" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2cf4dc3403b3f63884c534491eb99b5f]
reverse link C_0001559146041463814963 to C_0001858199404643284193--><path d="M4554.71,5292.4931 C4691.86,5882.9231 4862,7073.3031 4205.5,7686.9531 C4156.5,7732.7531 3061.89,7695.0331 2998.5,7716.9531 C2965.48,7728.3731 2951.16,7732.7231 2935.5,7763.9531 C2732.05,8169.5631 2618.18,8460.5731 2935.5,8784.9531 C3121.08,8974.6631 11776.75,9008.3931 13115.4,9012.4731 " fill="none" id="C_0001559146041463814963&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4551.68,5279.5231,4549.1483,5286.2752,4554.4072,5291.2091,4556.9389,5284.4571,4551.68,5279.5231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2938.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2948.5" y="8279.02">_class_name</text><!--MD5=[8b9b48228f1f4eaa16d2eda56805776c]
reverse link C_0001559146041463814963 to C_0000104564426296396960--><path d="M4366.57,5284.6331 C4230.04,5871.5731 4057.15,7067.7731 4713.5,7686.9531 C4769.3,7739.5931 6016.8,7732.4431 6093.5,7733.9531 C6248.11,7737.0031 11510.56,7726.1331 11660.5,7763.9531 C11719.29,7778.7831 11778.45,7797.9431 11836.94,7820.0931 " fill="none" id="C_0001559146041463814963&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4367.77,5279.4831,4361.842,5287.3481,4366.6415,5284.3541,4369.6355,5289.1537,4367.77,5279.4831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6099.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="6106.5" y="7730.02">«friend»</text><!--MD5=[4af771cf0c6fabd07b7b07fb51de9469]
reverse link C_0001531814603945772616 to C_0001559146041463814963--><path d="M13178.32,930.6031 C11993.83,1043.6131 9501.69,1276.8231 7392.5,1443.9531 C7299.18,1451.3431 6621.52,1456.6331 6553.5,1520.9531 C6341.78,1721.1631 6662.82,1977.4031 6441.5,2166.9531 C6368.58,2229.4131 4783.89,2131.6531 4713.5,2196.9531 C4049.74,2812.7431 4228.55,4017.6831 4366.92,4604.1731 " fill="none" id="C_0001531814603945772616&lt;-C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.69,923.6331,13198.26,928.7031,13179.02,937.5731,13177.69,923.6331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[487a8427ca85592aeea29c0764de0754]
reverse link C_0000503002593685351124 to C_0001858199404643284193--><path d="M648.44,1978.4531 C545.25,2031.5131 452.24,2102.3731 385.5,2196.9531 C297.09,2322.2331 359.86,7563.6231 359.5,7716.9531 C358.94,7955.5631 296.79,8621.3631 470.5,8784.9531 C711.76,9012.1531 11604.66,9013.9431 13115.36,9013.0931 " fill="none" id="C_0000503002593685351124&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="660.08,1972.5531,652.9203,1971.6939,649.3734,1977.9724,656.5331,1978.8316,660.08,1972.5531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="362.5" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="372.5" y="7730.02">_class_name</text><!--MD5=[489f5a7a7e59ee03221596499549568c]
reverse link C_0000503002593685351124 to C_0000104564426296396960--><path d="M781.33,1974.8331 C677.08,2028.2031 582.25,2100.1031 517.5,2196.9531 C432.74,2323.7231 410.84,7577.9531 517.5,7686.9531 C601.72,7773.0231 2564.09,7732.4531 2684.5,7733.9531 C2811.48,7735.5431 11705.73,7727.9131 11827.5,7763.9531 C11830.63,7764.8831 11833.76,7765.8231 11836.9,7766.7831 " fill="none" id="C_0000503002593685351124&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="785.99,1972.4631,776.155,1972.9857,781.5351,1974.7334,779.7874,1980.1135,785.99,1972.4631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="523.5" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="530.5" y="4946.52">«friend»</text><!--MD5=[c24c628f808045c87231a65882d87e6c]
reverse link C_0001531814603945772616 to C_0000503002593685351124--><path d="M13178.3,902.8731 C11599.39,993.5031 7610.82,1233.0031 4281.5,1520.9531 C3696.04,1571.5931 3044.22,1638.8831 2511.27,1696.7531 " fill="none" id="C_0001531814603945772616&lt;-C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.13,895.8731,13198.49,901.7131,13178.93,909.8431,13178.13,895.8731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c0fc8be268a4058cfc901a3bfe23dfe6]
link C_0000493041171271776846 to C_0000503002593685351124--><path d="M6036.05,166.5631 C6011.09,181.0431 5982.43,195.5431 5954.5,204.9531 C5837.34,244.4531 5523.17,250.9031 5403.5,281.9531 C4004.39,644.9231 2425.85,1348.3931 1755.14,1661.9831 " fill="none" id="C_0000493041171271776846-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1748.666" cy="1665.0125" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1755.9119" x2="1741.42" y1="1661.6219" y2="1668.4031"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1752.0565" x2="1745.2754" y1="1672.2585" y2="1657.7666"/><!--MD5=[f9e2d358c0077ba50b9cdc90935a7cd8]
link C_0000493041171271776846 to C_0001531814603945772616--><path d="M6247.09,131.1431 C7081.56,211.1431 11485.58,633.3231 13193.14,797.0231 " fill="none" id="C_0000493041171271776846-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.14,797.4931,13189.5716,792.6369,13193.1637,797.0069,13188.7937,800.599,13198.14,797.4931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="7417.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="7424.5" y="248.02">collider</text><!--MD5=[408dbe512b8935ec69e129fbaa9ad1d8]
link C_0000461609734144368587 to C_0000503002593685351124--><path d="M181.21,179.5131 C362.61,418.6031 1024.03,1290.3231 1301.58,1656.1231 " fill="none" id="C_0000461609734144368587-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="1305.8447" cy="1661.7497" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1301.0095" x2="1310.68" y1="1655.3763" y2="1668.1231"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="1312.2181" x2="1299.4713" y1="1656.9145" y2="1666.585"/><!--MD5=[a4acf2a0a8f086b9008d5a97b35ead67]
link C_0000461609734144368587 to C_0001531814603945772616--><path d="M263.06,124.9131 C1456.13,189.5431 10609.08,685.3031 13193.14,825.2631 " fill="none" id="C_0000461609734144368587-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.34,825.5431,13189.5701,821.0612,13193.3474,825.2721,13189.1364,829.0494,13198.34,825.5431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="2443.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="2450.5" y="248.02">collider</text><!--MD5=[acb73802bd90075711fdfa2eb81ba4e2]
reverse link C_0001034902024938599899 to C_0001858199404643284193--><path d="M5386.55,6234.1831 C5321.52,6767.6431 5142.97,7341.0631 4712.5,7686.9531 C4638.74,7746.2231 3075.82,7649.4531 3009.5,7716.9531 C3004.2,7722.3431 3005.03,7727.8631 3009.5,7733.9531 C3929.75,8988.3831 4843.73,8389.8231 6348.5,8784.9531 C6446.05,8810.5631 6470.35,8820.1031 6570.5,8831.9531 C7892.82,8988.4231 12197.67,9009.7631 13115.41,9012.5531 " fill="none" id="C_0001034902024938599899&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5388.11,6221.1931,5383.4198,6226.6705,5386.6719,6233.1066,5391.3621,6227.6292,5388.11,6221.1931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6351.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6361.5" y="8279.02">_class_name</text><!--MD5=[b5cd0ac589986cb9ed90f22c5fd42456]
link C_0001034902024938599899 to C_0001034902024938599899--><path d="M6006.05,4649.6731 C6028.28,4727.3631 6041,4824.7931 6041,4941.9531 C6041,5056.5931 6028.82,5152.3431 6007.47,5229.1931 " fill="none" id="C_0001034902024938599899-&gt;C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6006.05,5234.2331,6012.3419,5226.656,6007.4066,5229.4207,6004.642,5224.4854,6006.05,5234.2331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6049" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="6059" y="4946.52">singleton</text><!--MD5=[5e0ea8049b7e63b70aa4577072912f6a]
reverse link C_0001034902024938599899 to C_0000104564426296396960--><path d="M5415.55,6226.3531 C5503.68,6755.3931 5700.81,7327.5031 6123.5,7686.9531 C6272.31,7813.5031 6365.47,7722.9231 6560.5,7733.9531 C6701.94,7741.9531 11523.14,7729.2731 11660.5,7763.9531 C11719.29,7778.7931 11778.44,7797.9631 11836.93,7820.1331 " fill="none" id="C_0001034902024938599899&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="5414.71,6221.3031,5412.253,6230.8406,5415.5366,6226.2343,5420.1429,6229.518,5414.71,6221.3031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6566.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="6573.5" y="7730.02">«friend»</text><!--MD5=[2a21d702013630b9a2bb4ab014f806e3]
reverse link C_0001531814603945772616 to C_0001034902024938599899--><path d="M13178.41,925.7131 C11376.52,1086.6931 6677.81,1507.6131 6662.5,1520.9531 C6440.28,1714.5931 6736.06,1974.8731 6512.5,2166.9531 C6446.74,2223.4531 6190.39,2141.7931 6123.5,2196.9531 C5692.41,2552.4831 5494.86,3129.4131 5408.63,3662.7431 " fill="none" id="C_0001531814603945772616&lt;-C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.94,918.7331,13198.48,923.9231,13179.19,932.6731,13177.94,918.7331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[890a5f3a9ab4b2f75c35c9d8b993635e]
reverse link C_0002302096389852429221 to C_0001858199404643284193--><path d="M6383.8,5273.9331 C6399.52,6179.3431 6450.84,8639.4631 6546.5,8784.9531 C6572.82,8824.9831 6596.96,8820.6031 6643.5,8831.9531 C7287.85,8989.1031 12132.96,9009.9731 13115.15,9012.5931 " fill="none" id="C_0002302096389852429221&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6383.57,5260.7231,6379.6761,5266.7925,6383.781,5272.7213,6387.6749,5266.6519,6383.57,5260.7231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6549.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6559.5" y="8279.02">_class_name</text><!--MD5=[1c64f5bce8010bf6b825f4da2fbeefb2]
reverse link C_0002302096389852429221 to C_0000104564426296396960--><path d="M6299.18,5265.6731 C6177.45,5848.5731 6024.39,7073.3431 6704.5,7686.9531 C6806.73,7779.1831 11527.17,7729.6031 11660.5,7763.9531 C11719.22,7779.0831 11778.31,7798.4631 11836.76,7820.7831 " fill="none" id="C_0002302096389852429221&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6300.25,5260.5431,6294.4817,5268.526,6299.2199,5265.4359,6302.3101,5270.1741,6300.25,5260.5431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="7455.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="7462.5" y="7730.02">«friend»</text><!--MD5=[664b2e106c93f0f6277b4a445906c078]
reverse link C_0001531814603945772616 to C_0002302096389852429221--><path d="M13178.17,877.2931 C11715.2,914.5231 8359.47,1050.1031 7331.5,1520.9531 C6956.91,1692.5331 6843.12,1785.7331 6650.5,2149.9531 C6223.32,2957.6931 6276.32,4081.2431 6335.01,4623.3531 " fill="none" id="C_0001531814603945772616&lt;-C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.06,870.3031,13198.23,876.7931,13178.42,884.2931,13178.06,870.3031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d7ce68193d44632dd4e25c66ffbbce4c]
reverse link C_0000236996062289735257 to C_0001858199404643284193--><path d="M4286.06,1952.3931 C3762.59,2014.6931 3112.23,2083.4231 2528.5,2119.9531 C2413.2,2127.1731 526.84,2110.2431 450.5,2196.9531 C349.73,2311.4131 401.21,7542.6331 450.5,7686.9531 C649.87,8270.7131 752.47,8499.8631 1299.5,8784.9531 C1573.63,8927.8131 11664.57,9001.8831 13115.45,9011.8031 " fill="none" id="C_0000236996062289735257&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4299.17,1950.8331,4292.741,1947.5669,4287.2534,1952.2452,4293.6824,1955.5114,4299.17,1950.8331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="467.5" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="477.5" y="7730.02">_class_name</text><!--MD5=[6f8680ec89f27b3fc0455684d508cc80]
reverse link C_0000236996062289735257 to C_0000104564426296396960--><path d="M4294.17,1945.5931 C3769.15,2006.6031 3114.92,2076.2231 2528.5,2119.9531 C2425.48,2127.6331 742.02,2122.4031 670.5,2196.9531 C564.92,2306.9931 563.47,7578.3131 670.5,7686.9531 C690.1,7706.8531 2653.58,7716.0231 2681.5,7716.9531 C2827.39,7721.8231 2863.58,7729.9231 3009.5,7733.9531 C3131.93,7737.3331 11710.06,7729.1831 11827.5,7763.9531 C11830.63,7764.8831 11833.76,7765.8231 11836.9,7766.7831 " fill="none" id="C_0000236996062289735257&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4299.18,1945.0131,4289.7738,1942.0937,4294.2143,1945.5982,4290.7098,1950.0387,4299.18,1945.0131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="676.5" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="683.5" y="4946.52">«friend»</text><!--MD5=[3f2e423855117caec285a310b19c1bbc]
reverse link C_0001531814603945772616 to C_0000236996062289735257--><path d="M13178.5,894.4131 C11570.34,969.3331 7619.66,1178.1831 6325.5,1473.9531 C6305.06,1478.6231 6301.23,1483.8631 6281.5,1490.9531 C6113.51,1551.3531 5928.1,1614.1331 5763.82,1668.4231 " fill="none" id="C_0001531814603945772616&lt;-C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.18,887.4231,13198.49,893.4831,13178.83,901.4131,13178.18,887.4231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9a7eb49f1533d167fe82948ecfcf8f82]
link C_0001801355352189289676 to C_0000236996062289735257--><path d="M7878.29,119.6831 C7485.37,125.6431 6375.13,149.9031 6236.5,234.9531 C5701.76,563.0131 5434.12,1318.1231 5338.13,1653.6131 " fill="none" id="C_0001801355352189289676-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5336.1396" cy="1660.5958" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5338.3193" x2="5333.96" y1="1652.8984" y2="1668.2931"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5343.837" x2="5328.4423" y1="1662.7754" y2="1658.4161"/><!--MD5=[94135747fba5deb4c607347f1e06518f]
link C_0001801355352189289676 to C_0001531814603945772616--><path d="M8152.67,135.3831 C8829.02,221.3231 11830.73,602.7531 13193.47,775.9231 " fill="none" id="C_0001801355352189289676-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.45,776.5531,13190.0392,771.4289,13193.4915,775.9101,13189.0103,779.3625,13198.45,776.5531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="9003.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="9010.5" y="248.02">collider</text><!--MD5=[327ec61c802d4b8bc89d445f02ff7678]
link C_0001771770302499309898 to C_0000236996062289735257--><path d="M11379.41,117.8531 C10910.75,118.5831 9448.87,129.5031 8989.5,234.9531 C7641.3,544.4531 6166.17,1324.6631 5569.01,1661.0631 " fill="none" id="C_0001771770302499309898-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="5562.9098" cy="1664.506" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5569.8795" x2="5555.94" y1="1660.5788" y2="1668.4331"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="5566.8369" x2="5558.9826" y1="1671.4757" y2="1657.5362"/><!--MD5=[dddc2f9d809445d4a2bacef7d4a58738]
link C_0001771770302499309898 to C_0001531814603945772616--><path d="M11671.75,164.3531 C11969.79,258.9131 12664.03,479.1731 13193.3,647.0931 " fill="none" id="C_0001771770302499309898-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13198.35,648.7031,13190.9873,642.1617,13193.5856,647.1865,13188.5607,649.7848,13198.35,648.7031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11925.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="11932.5" y="248.02">collider</text><!--MD5=[eed6ab08d8c501b6208d9f4ac11f9b83]
reverse link C_0001561529841391244418 to C_0001858199404643284193--><path d="M7431.06,5907.7931 C7492.52,6808.0931 7739.66,8110.7731 8610.5,8784.9531 C8791.91,8925.3931 12290.18,8995.4331 13115.24,9010.0331 " fill="none" id="C_0001561529841391244418&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7430.17,5894.5731,7426.588,5900.8317,7430.9875,5906.5452,7434.5694,5900.2867,7430.17,5894.5731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8613.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="8623.5" y="8279.02">_class_name</text><!--MD5=[23ceac23f6c6826b07cc87ed3906ae98]
link C_0001561529841391244418 to C_0001561529841391244418--><path d="M8130.52,4660.9631 C8152.82,4736.7331 8165.5,4830.3931 8165.5,4941.9531 C8165.5,5051.1131 8153.36,5143.1431 8131.95,5218.0331 " fill="none" id="C_0001561529841391244418-&gt;C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8130.52,5222.9431,8136.88,5215.4231,8131.92,5218.1431,8129.2,5213.1831,8130.52,5222.9431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8173.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="8183.5" y="4946.52">singleton</text><!--MD5=[a7f38b71b0c412aea9feb929bf57c436]
reverse link C_0001561529841391244418 to C_0000104564426296396960--><path d="M7443.76,5899.5631 C7510.75,6516.1931 7709.89,7276.8931 8257.5,7686.9531 C8333.61,7743.9431 11588.91,7691.3931 11680.5,7716.9531 C11694.28,7720.7931 11753.83,7753.8431 11836.78,7802.0931 " fill="none" id="C_0001561529841391244418&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="7443.22,5894.5831,7440.194,5903.9556,7443.7486,5899.5551,7448.1491,5903.1098,7443.22,5894.5831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11715.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11722.5" y="7730.02">«friend»</text><!--MD5=[a58d0cd78cca24a1b417e2c7091ad184]
reverse link C_0001531814603945772616 to C_0001561529841391244418--><path d="M13178.1,888.9731 C11648.97,951.0531 8088.98,1135.7731 7712.5,1520.9531 C7089.62,2158.2331 7096.93,3218.2031 7210.68,3989.4531 " fill="none" id="C_0001531814603945772616&lt;-C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.96,881.9731,13198.23,888.1531,13178.53,895.9531,13177.96,881.9731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[61db9f2a674de4dd20c1e8d6466365f6]
reverse link C_0001485048025194488343 to C_0001858199404643284193--><path d="M8681.81,5190.4731 C8543.26,5891.3831 8263.25,7896.3331 9364.5,8784.9531 C9512.41,8904.3031 12375.39,8988.6131 13115.21,9008.4731 " fill="none" id="C_0001485048025194488343&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="8684.34,5177.7131,8679.2487,5182.8198,8682.0044,5189.4836,8687.0957,5184.3769,8684.34,5177.7131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9367.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="9377.5" y="8279.02">_class_name</text><!--MD5=[f95868a4bcc46beaa6866e3b4ea59e8f]
link C_0001485048025194488343 to C_0001485048025194488343--><path d="M8771.34,4706.1531 C8855.86,4258.1831 8977.5,4336.7831 8977.5,4941.9531 C8977.5,5544.7531 8856.81,5625.1031 8772.33,5182.9831 " fill="none" id="C_0001485048025194488343-&gt;C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="8771.34,5177.7531,8769.0806,5187.3393,8772.2683,5182.6662,8776.9415,5185.854,8771.34,5177.7531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8985.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="8995.5" y="4946.52">singleton</text><!--MD5=[7c58e4f37afb0d5a6a6c8a0d7e05a07b]
reverse link C_0001485048025194488343 to C_0000104564426296396960--><path d="M8674.76,5182.6331 C8551.41,5723.9331 8343.96,7043.7431 9059.5,7686.9531 C9116.83,7738.4831 11761.18,7693.1431 11834.5,7716.9531 C11842.96,7719.7031 11870.34,7736.9631 11910.1,7763.8231 " fill="none" id="C_0001485048025194488343&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="8675.93,5177.4931,8670.0289,5185.3784,8674.8182,5182.3679,8677.8286,5187.1572,8675.93,5177.4931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11865.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11872.5" y="7730.02">«friend»</text><!--MD5=[575bdde0c40cde995e5d193ed3ac9a95]
reverse link C_0001531814603945772616 to C_0001485048025194488343--><path d="M13178.5,1002.7931 C12610.4,1122.5331 11787.44,1309.2431 11081.5,1520.9531 C10340.62,1743.1431 10175.87,1859.6731 9447.5,2119.9531 C9387.67,2141.3331 9374.41,2152.6831 9312.5,2166.9531 C9257.33,2179.6731 9099.52,2156.9031 9059.5,2196.9531 C8379.52,2877.5231 8566.74,4175.9531 8679.72,4706.3931 " fill="none" id="C_0001531814603945772616&lt;-C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.16,995.9131,13198.18,998.6431,13180.05,1009.6131,13177.16,995.9131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5ecf1269ba038493d7a188869314b523]
reverse link C_0000314051240057057851 to C_0001858199404643284193--><path d="M21190.47,5177.4931 C21322.74,5856.6531 21597.29,7836.6631 20542.5,8784.9531 C20406.53,8907.2031 14549.94,8995.2531 13461.59,9010.5731 " fill="none" id="C_0000314051240057057851&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="21187.95,5164.6331,21185.1785,5171.2904,21190.2577,5176.4091,21193.0292,5169.7519,21187.95,5164.6331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21156.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="21166.5" y="8279.02">_class_name</text><!--MD5=[c8cd5ec3f4799bfb98fee18601ebcdfe]
link C_0000314051240057057851 to C_0000314051240057057851--><path d="M21206.18,4719.1131 C21380.11,4256.7331 21635,4331.0131 21635,4941.9531 C21635,5550.8031 21381.85,5626.6531 21207.96,5169.5131 " fill="none" id="C_0000314051240057057851-&gt;C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="21206.18,5164.7931,21205.6047,5174.6252,21207.9403,5169.473,21213.0925,5171.8087,21206.18,5164.7931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21643" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="21653" y="4946.52">singleton</text><!--MD5=[1a5c4e57827c1ce3cfed75acbd29db82]
reverse link C_0000314051240057057851 to C_0000104564426296396960--><path d="M21183.53,5169.6231 C21272.93,5705.7531 21408.64,7054.1431 20661.5,7686.9531 C20616.99,7724.6531 16519.75,7713.7331 16461.5,7716.9531 C16388.33,7720.9931 16370.66,7729.7831 16297.5,7733.9531 C16138.3,7743.0131 13580.47,7718.9331 13427.5,7763.9531 C13418.34,7766.6431 13409.19,7769.4831 13400.05,7772.4331 " fill="none" id="C_0000314051240057057851&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="21182.67,5164.5331,21180.2175,5174.0717,21183.4989,5169.4639,21188.1067,5172.7454,21182.67,5164.5331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16467.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16474.5" y="7730.02">«friend»</text><!--MD5=[d5123be137e691922de774dbcf9f522d]
reverse link C_0001531814603945772616 to C_0000314051240057057851--><path d="M14563.04,909.8831 C15856.25,1001.4131 18588.64,1223.6431 19487.5,1520.9531 C20059.14,1710.0331 20316.38,1703.5931 20661.5,2196.9531 C21216.21,2989.9231 21195.76,4220.0031 21160.4,4719.1831 " fill="none" id="C_0001531814603945772616&lt;-C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14562.14,916.8331,14542.69,908.4431,14563.13,902.8731,14562.14,916.8331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0f51a88240f615cca582e7a0121c3766]
reverse link C_0001197720528033242618 to C_0001858199404643284193--><path d="M1047.67,5120.0231 C976.31,5761.0131 831.89,7965.6431 2091.5,8784.9531 C2332.85,8941.9331 11717.77,9003.6331 13115.23,9011.9631 " fill="none" id="C_0001197720528033242618&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1049.13,5107.0031,1044.4825,5112.5168,1047.7846,5118.9275,1052.4321,5113.4138,1049.13,5107.0031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2094.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="2104.5" y="8279.02">_class_name</text><!--MD5=[ee3ac7328ce85f190ffde4073aa3ab2d]
link C_0001197720528033242618 to C_0001197720528033242618--><path d="M1103.38,4776.7931 C1226.53,4251.6731 1422,4306.7331 1422,4941.9531 C1422,5575.1531 1227.76,5631.8731 1104.55,5112.1031 " fill="none" id="C_0001197720528033242618-&gt;C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1103.38,5107.1131,1101.5414,5116.7888,1104.522,5111.981,1109.3299,5114.9616,1103.38,5107.1131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1433,4937.5195,1437,4941.5195,1433,4945.5195,1429,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="1440" y="4946.52">singleton</text><!--MD5=[d5273b688c2cbc8d25291921feeb727a]
reverse link C_0001197720528033242618 to C_0000104564426296396960--><path d="M1033.5,5112.3331 C937.82,5601.2631 740.02,7022.3231 1504.5,7686.9531 C1518.69,7699.2931 4192.7,7733.7531 4211.5,7733.9531 C4314.95,7735.0631 11560.17,7738.7131 11660.5,7763.9531 C11719.3,7778.7431 11778.46,7797.8731 11836.96,7820.0031 " fill="none" id="C_0001197720528033242618&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1034.49,5107.3331,1028.8432,5115.4024,1033.5341,5112.2409,1036.6956,5116.9318,1034.49,5107.3331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4217.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="4224.5" y="7730.02">«friend»</text><!--MD5=[30e625aae1c06fb81ca2c0a65c06b825]
reverse link C_0001531814603945772616 to C_0001197720528033242618--><path d="M13178.3,938.6931 C11994.41,1063.6531 9503.95,1314.0631 7392.5,1443.9531 C7194.32,1456.1431 6692.87,1428.8731 6499.5,1473.9531 C6450.1,1485.4731 6426.01,1480.4331 6395.5,1520.9531 C6233.71,1735.8731 6510.52,1942.3031 6308.5,2119.9531 C6108.05,2296.2131 1706.06,2021.9531 1504.5,2196.9531 C736.96,2863.3531 939.03,4292.2231 1034.44,4776.5231 " fill="none" id="C_0001531814603945772616&lt;-C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.6,931.7231,13198.23,936.5831,13179.07,945.6531,13177.6,931.7231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2f8780ed64ed38ffe1cf4ca2575b2709]
reverse link C_0001130773750498288283 to C_0001858199404643284193--><path d="M9346.83,5081.3831 C9249.28,5655.6031 8964.77,7863.0331 10160.5,8784.9531 C10395.21,8965.9131 12493.14,9003.9831 13115.33,9011.3231 " fill="none" id="C_0001130773750498288283&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="9349.02,5068.5331,9344.0681,5073.7751,9347.0023,5080.3623,9351.9542,5075.1203,9349.02,5068.5331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10163.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10173.5" y="8279.02">_class_name</text><!--MD5=[f88684864f83bcfca48b3287b5bf4bf4]
link C_0001130773750498288283 to C_0001130773750498288283--><path d="M9395.23,4815.2531 C9510.15,4249.3831 9702.5,4291.6231 9702.5,4941.9531 C9702.5,5590.3831 9511.27,5634.2631 9396.24,5073.6131 " fill="none" id="C_0001130773750498288283-&gt;C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="9395.23,5068.6531,9393.1104,5078.2712,9396.2298,5073.5521,9400.9489,5076.6715,9395.23,5068.6531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9713.5,4937.5195,9717.5,4941.5195,9713.5,4945.5195,9709.5,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="9720.5" y="4946.52">singleton</text><!--MD5=[3e73bcbd9daf28c3d368d37c56cc0e9c]
reverse link C_0001130773750498288283 to C_0000104564426296396960--><path d="M9341.99,5073.5231 C9246.02,5521.0331 9001.12,7002.8731 9784.5,7686.9531 C9829.64,7726.3631 11885.23,7696.3531 11941.5,7716.9531 C11965.79,7725.8431 11995.57,7742.1931 12028.95,7763.8531 " fill="none" id="C_0001130773750498288283&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="9343.04,5068.6331,9337.2271,5076.5836,9341.9826,5073.52,9345.0462,5078.2755,9343.04,5068.6331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11984.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11991.5" y="7730.02">«friend»</text><!--MD5=[c2fcb52a4859165f7fca92f209480c5e]
reverse link C_0001531814603945772616 to C_0001130773750498288283--><path d="M13178.75,1026.6431 C12773.95,1136.4631 12260.38,1301.5631 11834.5,1520.9531 C11406.68,1741.3431 11420.42,2009.9531 10965.5,2166.9531 C10903.46,2188.3631 9833.69,2153.5031 9784.5,2196.9531 C9002.43,2887.8531 9248.91,4374.3031 9343.24,4815.2131 " fill="none" id="C_0001531814603945772616&lt;-C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.11,1019.8331,13198.24,1021.3731,13180.76,1033.3531,13177.11,1019.8331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8c3000aebde2149cc2be64412041baff]
reverse link C_0000790752023609648644 to C_0001858199404643284193--><path d="M10100.05,6086.6431 C10051.25,6954.5831 10148.94,8110.0531 10868.5,8784.9531 C11031.87,8938.1831 12588.77,8994.0731 13115.4,9008.6831 " fill="none" id="C_0000790752023609648644&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="10100.8,6073.5631,10096.4639,6079.3249,10100.1147,6085.5435,10104.4508,6079.7818,10100.8,6073.5631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10871.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10881.5" y="8279.02">_class_name</text><!--MD5=[ef5671d32f6987d56ec842457947c9ac]
link C_0000790752023609648644 to C_0000790752023609648644--><path d="M10710.55,4609.0931 C10732.56,4692.4431 10745.5,4803.3931 10745.5,4941.9531 C10745.5,5077.8031 10733.06,5187.1231 10711.83,5269.9031 " fill="none" id="C_0000790752023609648644-&gt;C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="10710.55,5274.8131,10716.6886,5267.1113,10711.8098,5269.9744,10708.9466,5265.0957,10710.55,5274.8131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="10756.5,4937.5195,10760.5,4941.5195,10756.5,4945.5195,10752.5,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="10763.5" y="4946.52">singleton</text><!--MD5=[5d43d9f033ddff753a837836cd050d9b]
reverse link C_0000790752023609648644 to C_0000104564426296396960--><path d="M10186.16,6078.6831 C10216.96,6650.4831 10366.15,7302.2531 10827.5,7686.9531 C10879.87,7730.6231 11991.74,7690.3031 12054.5,7716.9531 C12085.68,7730.1931 12116.08,7746.0331 12145.56,7763.8531 " fill="none" id="C_0000790752023609648644&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="10185.9,6073.6431,10182.3937,6082.8467,10186.171,6078.6358,10190.382,6082.4131,10185.9,6073.6431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12080.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12087.5" y="7730.02">«friend»</text><!--MD5=[26a39b7fc31ced5e0167cdc73077bc9d]
reverse link C_0001531814603945772616 to C_0000790752023609648644--><path d="M13179.12,1048.4231 C12870.6,1153.3231 12515.13,1307.2531 12238.5,1520.9531 C11955.64,1739.4631 12076.13,2001.1131 11759.5,2166.9531 C11667.72,2215.0231 10906.82,2130.2931 10827.5,2196.9531 C10366.63,2584.2731 10217.86,3238.1031 10187.16,3810.3931 " fill="none" id="C_0001531814603945772616&lt;-C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.25,1041.6631,13198.44,1041.8931,13181.73,1054.9331,13177.25,1041.6631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a6755319c82a581eac8987a926ca1aa6]
reverse link C_0000897221634691489964 to C_0001858199404643284193--><path d="M11260.23,5292.0731 C11011.75,6036.0931 10561.82,7790.8631 11431.5,8784.9531 C11541.58,8910.7731 12675.6,8981.6831 13115.46,9004.6231 " fill="none" id="C_0000897221634691489964&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11264.42,5279.5631,11258.7172,5283.9765,11260.5976,5290.9381,11266.3004,5286.5247,11264.42,5279.5631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11434.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11444.5" y="8279.02">_class_name</text><!--MD5=[588807cb7a44356f49494dcdc443a06c]
link C_0000897221634691489964 to C_0000897221634691489964--><path d="M11524.91,4604.2231 C11721.81,4275.1531 11966.5,4387.7231 11966.5,4941.9531 C11966.5,5493.7431 11723.96,5607.7631 11527.51,5283.9931 " fill="none" id="C_0000897221634691489964-&gt;C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11524.91,5279.6831,11526.1344,5289.4556,11527.493,5283.9643,11532.9843,5285.3228,11524.91,5279.6831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11974.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="11984.5" y="4946.52">singleton</text><!--MD5=[b2579420d2152b5e55fe92957e16071b]
reverse link C_0000897221634691489964 to C_0000104564426296396960--><path d="M11357.86,5284.8231 C11325.97,5873.4131 11356.24,7073.8731 12048.5,7686.9531 C12135.58,7764.0731 12211.76,7652.3631 12308.5,7716.9531 C12329.31,7730.8431 12348.86,7746.6331 12367.22,7763.8631 " fill="none" id="C_0000897221634691489964&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="11358.15,5279.6531,11353.6431,5288.4103,11357.8648,5284.645,11361.63,5288.8667,11358.15,5279.6531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12328.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12335.5" y="7730.02">«friend»</text><!--MD5=[eb044c62a1c7a56ece172b94356c22f4]
reverse link C_0001531814603945772616 to C_0000897221634691489964--><path d="M13179.3,1062.1931 C12922.85,1164.4631 12646.74,1312.6731 12449.5,1520.9531 C12237.03,1745.3131 12429.08,1968.1831 12192.5,2166.9531 C12142.45,2209.0031 12095.43,2151.4431 12048.5,2196.9531 C11385.15,2840.2731 11340.98,4024.9531 11363.71,4604.2131 " fill="none" id="C_0001531814603945772616&lt;-C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13176.94,1055.5931,13198.12,1054.7531,13182.09,1068.6131,13176.94,1055.5931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ff6a4cd457cb05befae3532e64a2ade2]
reverse link C_0000135188690773659020 to C_0001858199404643284193--><path d="M12353.6,5113.2831 C12481.48,5597.0131 12767.26,6989.0331 12048.5,7686.9531 C11973.26,7760.0131 11649.26,7640.4731 11577.5,7716.9531 C11572.33,7722.4631 11576.98,7726.4131 11577.5,7733.9531 C11609.8,8204.3831 11390.32,8450.2831 11722.5,8784.9531 C11914.47,8978.3631 12749.27,9008.9331 13115.36,9012.8931 " fill="none" id="C_0000135188690773659020&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12350.24,5100.6331,12347.9162,5107.4595,12353.3237,5112.2301,12355.6475,5105.4037,12350.24,5100.6331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11725.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11735.5" y="8279.02">_class_name</text><!--MD5=[b9e190a0b6f3b1ed5b4efd3465fe9397]
link C_0000135188690773659020 to C_0000135188690773659020--><path d="M12328.89,4783.1331 C12424.46,4251.2431 12577.5,4304.1831 12577.5,4941.9531 C12577.5,5577.6931 12425.43,5632.3231 12329.8,5105.8231 " fill="none" id="C_0000135188690773659020-&gt;C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12328.89,5100.7731,12326.545,5110.3387,12329.7744,5105.6943,12334.4188,5108.9237,12328.89,5100.7731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="12585.5" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="12595.5" y="4946.52">singleton</text><!--MD5=[690fea73cee7ce9a9e7a660e160b4514]
reverse link C_0000135188690773659020 to C_0000104564426296396960--><path d="M12319.85,5105.7431 C12364.89,5583.5331 12498.1,6996.4431 12570.45,7763.7531 " fill="none" id="C_0000135188690773659020&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12319.35,5100.5131,12316.215,5109.8497,12319.8207,5105.4909,12324.1795,5109.0966,12319.35,5100.5131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12573.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12580.5" y="7730.02">«friend»</text><!--MD5=[17445eda0668e3f315ac88fffdbd1807]
reverse link C_0001531814603945772616 to C_0000135188690773659020--><path d="M13180.03,1072.9431 C12985.17,1165.2231 12792.86,1294.7431 12669.5,1473.9531 C12292.81,2021.1831 12293.76,4179.4331 12301.68,4783.2431 " fill="none" id="C_0001531814603945772616&lt;-C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13177.2,1066.5431,13198.29,1064.4131,13183.13,1079.2231,13177.2,1066.5431" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24467.41,5094.3031 C24406.04,5795.9931 24143.76,8703.9831 24001.5,8831.9531 C23797.07,9015.8531 14826.07,9014.4431 13461.68,9013.1631 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24468.56,5081.1231,24464.0539,5086.753,24467.5176,5093.0778,24472.0237,5087.4479,24468.56,5081.1231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24196.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="24206.5" y="8279.02">_class_name</text><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24531.46,5093.9931 C24712.42,5661.3531 25263.27,7688.5431 24298.5,8784.9531 C24111.57,8997.3931 14849.05,9011.9031 13461.63,9012.8831 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24527.38,5081.2731,24525.3981,5088.2065,24531.0359,5092.7027,24533.0178,5085.7693,24527.38,5081.2731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24782.5,8270.0195,24786.5,8274.0195,24782.5,8278.0195,24778.5,8274.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="24789.5" y="8279.02">target_method</text><!--MD5=[6ec94f72a6ef3ec7ace433902892bd7e]
link C_0001150621116588802549 to C_0001531814603945772616--><path d="M24493.19,4802.8731 C24543.39,4220.4231 24702.77,1973.5231 24219.5,1520.9531 C23866.01,1189.9131 16793.43,951.1631 14548.25,883.4731 " fill="none" id="C_0001150621116588802549-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.91,883.3131,14551.7921,887.5685,14547.908,883.4559,14552.0206,879.5718,14542.91,883.3131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24474.5,1816.0195,24478.5,1820.0195,24474.5,1824.0195,24470.5,1820.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="100" x="24481.5" y="1825.02">target_instance</text><!--MD5=[927cfeb52f41859ab2973f5dadce2f60]
reverse link C_0001150621116588802549 to C_0000104564426296396960--><path d="M24505.46,5086.1031 C24577.24,5550.3731 24730.93,7022.6531 23930.5,7686.9531 C23818.24,7780.1131 13567.57,7723.1831 13427.5,7763.9531 C13418.34,7766.6231 13409.18,7769.4231 13400.02,7772.3631 " fill="none" id="C_0001150621116588802549&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="24504.68,5081.0231,24502.1157,5090.5323,24505.451,5085.9633,24510.02,5089.2987,24504.68,5081.0231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23348.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23355.5" y="7730.02">«friend»</text><!--MD5=[d6a6ec8d3380d1482b36a055e886b7ee]
reverse link C_0001778859257025660860 to C_0001150621116588802549--><path d="M24026.76,1985.9531 C24110.99,2534.5131 24381.35,4295.2131 24459.29,4802.7931 " fill="none" id="C_0001778859257025660860&lt;-C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24019.84,1987.0031,24023.72,1966.1731,24033.68,1984.8831,24019.84,1987.0031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[98d31de51765da68085e856073ce4122]
reverse link C_0001186331261774827872 to C_0001858199404643284193--><path d="M13052.17,5197.1131 C13019.1,5701.2931 13000.32,6851.4031 13417.5,7686.9531 C13426.06,7704.1031 13441.02,7699.3031 13448.5,7716.9531 C13451.45,7723.9131 13448.61,7726.4031 13448.5,7733.9531 C13441.61,8201.2131 13543.13,8334.8431 13417.5,8784.9531 C13410.26,8810.9031 13399.45,8837.0631 13387.13,8861.9331 " fill="none" id="C_0001186331261774827872&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13053.05,5183.8531,13048.6631,5189.5763,13052.2588,5195.827,13056.6457,5190.1038,13053.05,5183.8531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13484.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13494.5" y="8279.02">_class_name</text><!--MD5=[1dc07f46a8f623d4dfac70da7186de42]
reverse link C_0001186331261774827872 to C_0000104564426296396960--><path d="M13048.69,5188.5331 C12996.36,5675.4331 12870.02,6797.1231 12721.5,7733.9531 C12719.93,7743.8431 12718.32,7753.8231 12716.67,7763.8831 " fill="none" id="C_0001186331261774827872&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13049.23,5183.5431,13044.2767,5192.0557,13048.6872,5188.5136,13052.2294,5192.9241,13049.23,5183.5431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12727.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12734.5" y="7730.02">«friend»</text><!--MD5=[b77ea624b2b728023d518baa273d3067]
reverse link C_0001531814603945772616 to C_0001186331261774827872--><path d="M13183.4,1248.2131 C13097.45,1326.7031 13022.34,1417.5231 12972.5,1520.9531 C12702.18,2081.9131 12943.04,4017.8831 13039.1,4700.4431 " fill="none" id="C_0001531814603945772616&lt;-C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13178.87,1242.8731,13198.42,1234.7131,13188.22,1253.2931,13178.87,1242.8731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[64510270a9d4c68a897134b90e8a959c]
reverse link C_0001895218672297528471 to C_0001858199404643284193--><path d="M13638.67,5228.8931 C13647.34,6092.8331 13665.85,8626.8731 13586.5,8784.9531 C13558.88,8839.9731 13511.05,8885.4331 13461.69,8920.9031 " fill="none" id="C_0001895218672297528471&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13638.53,5215.6631,13634.5895,5221.7024,13638.6487,5227.6625,13642.5891,5221.6233,13638.53,5215.6631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13644.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13654.5" y="8279.02">_class_name</text><!--MD5=[d0af4a0fe845fc378a64240482e48309]
link C_0001895218672297528471 to C_0001895218672297528471--><path d="M13676.86,4668.2831 C13758.97,4263.2231 13871,4354.4431 13871,4941.9531 C13871,5527.0231 13759.9,5619.9231 13677.89,5220.6431 " fill="none" id="C_0001895218672297528471-&gt;C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13676.86,5215.6231,13674.7404,5225.2412,13677.8598,5220.5221,13682.5789,5223.6415,13676.86,5215.6231" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13882,4937.5195,13886,4941.5195,13882,4945.5195,13878,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="13889" y="4946.52">singleton</text><!--MD5=[20437a7e41890d7ee60ce7b7515fc40c]
reverse link C_0001895218672297528471 to C_0000104564426296396960--><path d="M13715.84,5220.4831 C13857.78,5776.0831 14079.4,7028.0931 13417.5,7686.9531 C13354.17,7749.9931 13094.39,7673.1531 13016.5,7716.9531 C12992.3,7730.5631 12969.2,7746.3231 12947.2,7763.7431 " fill="none" id="C_0001895218672297528471&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13714.59,5215.6031,13712.9259,5225.3104,13715.8195,5220.4496,13720.6803,5223.3432,13714.59,5215.6031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13022.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13029.5" y="7730.02">«friend»</text><!--MD5=[e168ed7c7ccb452307da64f4f0e17e44]
reverse link C_0001531814603945772616 to C_0001895218672297528471--><path d="M13184.2,1280.6631 C13129.11,1338.9631 13081.08,1403.3931 13045.5,1473.9531 C12976.16,1611.4631 12941.07,2053.7631 13045.5,2166.9531 C13101.74,2227.9131 13358.89,2138.2731 13417.5,2196.9531 C14079.32,2859.5631 13855.64,4115.6831 13714.34,4668.3631 " fill="none" id="C_0001531814603945772616&lt;-C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13179.44,1275.5231,13198.36,1265.9731,13189.52,1285.2331,13179.44,1275.5231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0ede8bff03eb35b50071265c451248f5]
reverse link C_0000979065355535690103 to C_0001858199404643284193--><path d="M14272.08,5081.7531 C14327.69,5504.3131 14445.47,6800.1731 13953.5,7686.9531 C13926.63,7735.3931 13882.33,7715.4931 13855.5,7763.9531 C13634.48,8163.2131 14007.04,8410.2831 13746.5,8784.9531 C13680.01,8880.5731 13561.47,8938.0531 13461.65,8971.3831 " fill="none" id="C_0000979065355535690103&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14270.34,5068.6031,14267.1662,5075.0782,14271.9225,5080.4983,14275.0963,5074.0232,14270.34,5068.6031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13858.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="13868.5" y="8279.02">_class_name</text><!--MD5=[80721d2d59c4e03b4d092514cb916805]
link C_0000979065355535690103 to C_0000979065355535690103--><path d="M14273.23,4815.2531 C14383.1,4249.3831 14567,4291.6231 14567,4941.9531 C14567,5590.3831 14384.17,5634.2631 14274.2,5073.6131 " fill="none" id="C_0000979065355535690103-&gt;C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14273.23,5068.6531,14271.0244,5078.2518,14274.1859,5073.5609,14278.8768,5076.7224,14273.23,5068.6531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14578,4937.5195,14582,4941.5195,14578,4945.5195,14574,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="14585" y="4946.52">singleton</text><!--MD5=[c41fcfd5ef56e0f0da68aff980d3f176]
reverse link C_0000979065355535690103 to C_0000104564426296396960--><path d="M14287.99,5073.5131 C14403.35,5517.8331 14709.65,6982.6531 13953.5,7686.9531 C13887.92,7748.0331 13229.18,7680.0831 13147.5,7716.9531 C13118.04,7730.2531 13089.41,7746.0231 13061.72,7763.6831 " fill="none" id="C_0000979065355535690103&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14286.72,5068.6531,14285.1097,5078.3694,14287.9763,5073.4927,14292.853,5076.3594,14286.72,5068.6531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13153.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13160.5" y="7730.02">«friend»</text><!--MD5=[46b7366d08aa74c8bf64b6674b2b20fb]
reverse link C_0001531814603945772616 to C_0000979065355535690103--><path d="M13186.26,1357.4231 C13159.54,1394.3831 13135.93,1433.2531 13116.5,1473.9531 C13050.17,1612.9331 13009.57,2056.1231 13116.5,2166.9531 C13181.11,2233.9231 13885.36,2133.5731 13953.5,2196.9531 C14712.92,2903.3231 14401.23,4376.6931 14286.76,4815.2131 " fill="none" id="C_0001531814603945772616&lt;-C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13180.79,1353.0431,13198.32,1341.1331,13192.04,1361.3731,13180.79,1353.0431" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25269.22,172.9031 C25304.94,295.3631 25385.5,600.5231 25385.5,861.9531 C25385.5,861.9531 25385.5,861.9531 25385.5,8275.4531 C25385.5,8503.7331 25485.94,8627.6631 25320.5,8784.9531 C25122.15,8973.5331 24979.9,8819.3331 24706.5,8831.9531 C22381.04,8939.2931 14713.36,9002.0131 13461.91,9011.6531 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25265.49,160.2531,25263.3472,167.1385,25268.8789,171.7647,25271.0216,164.8793,25265.49,160.2531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25391.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25398.5" y="2163.02">signal</text><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25298.12,170.5431 C25322.31,201.1331 25350.47,241.5331 25367.5,281.9531 C25469.32,523.6731 25476.5,599.6631 25476.5,861.9531 C25476.5,861.9531 25476.5,861.9531 25476.5,8275.4531 C25476.5,8503.7331 25573.48,8624.0931 25411.5,8784.9531 C25287.62,8907.9731 25195.69,8820.1431 25021.5,8831.9531 C22631.66,8993.9431 14732.17,9011.0531 13461.65,9012.7731 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25289.75,160.1431,25290.3969,167.3252,25297.2753,169.4903,25296.6284,162.3083,25289.75,160.1431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25482.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="25489.5" y="2163.02">method</text><!--MD5=[54ac8f63d86bc4e03834512bd61d98ef]
link C_0000115801560197752094 to C_0001531814603945772616--><path d="M25144.4,125.0231 C24166.6,188.9331 16832.69,668.3231 14547.96,817.6731 " fill="none" id="C_0000115801560197752094-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.94,817.9931,14552.1836,821.3926,14547.9292,817.6643,14551.6575,813.4099,14542.94,817.9931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23349.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="23356.5" y="248.02">target</text><!--MD5=[5b171c69af600bc12977795a2bb103e4]
reverse link C_0000096380574950611570 to C_0001858199404643284193--><path d="M15410.47,5209.6031 C15436.09,5770.5231 15406.11,7071.4031 14649.5,7686.9531 C14605.55,7722.7031 14195.73,7704.3131 14140.5,7716.9531 C14087.08,7729.1731 14058.53,7719.4831 14026.5,7763.9531 C13893.6,7948.5031 14095.07,8604.6231 13956.5,8784.9531 C13840.12,8936.4131 13617.81,8987.9631 13461.71,9005.1131 " fill="none" id="C_0000096380574950611570&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="15409.85,5196.4931,15406.1312,5202.6714,15410.4039,5208.4803,15414.1227,5202.3021,15409.85,5196.4931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14029.5" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14039.5" y="8279.02">_class_name</text><!--MD5=[7d4e19f5f1e549348290eead97de4c50]
reverse link C_0000096380574950611570 to C_0000104564426296396960--><path d="M15411.71,5201.8231 C15441.5,5761.4231 15421.98,7082.0131 14649.5,7686.9531 C14588.99,7734.3331 13338.27,7689.4731 13266.5,7716.9531 C13232.05,7730.1431 13198.18,7746.0231 13165.09,7763.9431 " fill="none" id="C_0000096380574950611570&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="15411.42,5196.5031,15407.8875,5205.6967,15411.6768,5201.4965,15415.877,5205.2858,15411.42,5196.5031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13272.5" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13279.5" y="7730.02">«friend»</text><!--MD5=[d80b17199b730d4efec0c676d67f0184]
reverse link C_0001531814603945772616 to C_0000096380574950611570--><path d="M13207.02,1461.8531 C13196.65,1481.2131 13187.1,1500.9231 13178.5,1520.9531 C13125.97,1643.2631 13086.87,2023.4031 13178.5,2119.9531 C13291.17,2238.6731 14522.2,2094.0831 14649.5,2196.9531 C15414.22,2814.9331 15437.43,4133.2031 15410.14,4687.3131 " fill="none" id="C_0001531814603945772616&lt;-C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="13200.99,1458.3031,13216.77,1444.1631,13213.25,1465.0631,13200.99,1458.3031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4e0b6cbd5b03f80ab3eba4fe2dcbf948]
link C_0000762417759113755306 to C_0001531814603945772616--><path d="M25506.48,159.9731 C25468.37,177.0431 25422.15,195.0431 25378.5,204.9531 C23296.3,677.6331 16689.26,818.7931 14547.68,852.6931 " fill="none" id="C_0000762417759113755306-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14542.58,852.7731,14551.6362,856.6442,14547.5795,852.7017,14551.5219,848.645,14542.58,852.7731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25226.5" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="25233.5" y="248.02">obj</text><!--MD5=[8bda8e308cc1dbbbc74088973fe49d83]
reverse link C_0000762417759113755306 to C_0001858199404643284193--><path d="M25590.5,173.4331 C25590.5,297.0531 25590.5,604.5531 25590.5,861.9531 C25590.5,861.9531 25590.5,861.9531 25590.5,8275.4531 C25590.5,8505.2531 25665.33,8622.8031 25502.5,8784.9531 C25413.4,8873.6831 25348.73,8820.5231 25223.5,8831.9531 C24002.53,8943.4031 14839.49,9003.4731 13461.72,9011.9131 " fill="none" id="C_0000762417759113755306&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25590.5,160.3131,25586.5,166.3131,25590.5,172.3131,25594.5,166.3131,25590.5,160.3131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25596.5" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="27" x="25603.5" y="2163.02">func</text><!--MD5=[262f57390ea3e123f11c89e495b52c2a]
@startuml
title Godot Object class hierarchy
class "SafeNumeric<uint32_t>" as C_0001357046052919104842
class C_0001357046052919104842 {
}
class "SafeRefCount" as C_0000699772808699382057
class C_0000699772808699382057 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164{SafeRefCount}]] {
+ref() : bool
+refval() : uint32_t
+unref() : bool
+unrefval() : uint32_t
+get() const : uint32_t
+init(uint32_t p_value = 1) : void
}
class "StringName" as C_0001858199404643284193
class C_0001858199404643284193 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44{StringName}]] {
+operator const void *() const : const void *
+operator==(const String & p_name) const : bool
+operator==(const char * p_name) const : bool
+operator!=(const String & p_name) const : bool
+operator<(const StringName & p_name) const : bool
+operator==(const StringName & p_name) const : bool
+hash() const : uint32_t
+data_unique_pointer() const : const void *
+operator!=(const StringName & p_name) const : bool
+operator String() const : String
{static} +search(const char * p_name) : StringName
{static} +search(const CharType * p_name) : StringName
{static} +search(const String & p_name) : StringName
+operator=(const StringName & p_name) : void
+StringName(const char * p_name) : void
+StringName(const StringName & p_name) : void
+StringName(const String & p_name) : void
+StringName(const StaticCString & p_static_string) : void
+StringName() : void
+~StringName() : void
}
class "Dictionary" as C_0001299121424291583786
class C_0001299121424291583786 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42{Dictionary}]] {
+get_key_list(List<Variant> * p_keys) const : void
+get_key_at_index(int p_index) const : Variant
+get_value_at_index(int p_index) const : Variant
+operator[](const Variant & p_key) : Variant &
+operator[](const Variant & p_key) const : const Variant &
+getptr(const Variant & p_key) const : const Variant *
+getptr(const Variant & p_key) : Variant *
+get_valid(const Variant & p_key) const : Variant
+get(const Variant & p_key, const Variant & p_default) const : Variant
+size() const : int
+empty() const : bool
+clear() : void
+has(const Variant & p_key) const : bool
+has_all(const Array & p_keys) const : bool
+erase(const Variant & p_key) : bool
+operator==(const Dictionary & p_dictionary) const : bool
+operator!=(const Dictionary & p_dictionary) const : bool
+hash() const : uint32_t
+operator=(const Dictionary & p_dictionary) : void
+next(const Variant * p_key = __null) const : const Variant *
+keys() const : Array
+values() const : Array
+duplicate(bool p_deep = false) const : Dictionary
+id() const : const void *
+Dictionary(const Dictionary & p_from) : void
+Dictionary() : void
+~Dictionary() : void
}
class "RefPtr" as C_0002025812040042972946
class C_0002025812040042972946 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41{RefPtr}]] {
+is_null() const : bool
+operator=(const RefPtr & p_other) : void
+operator==(const RefPtr & p_other) const : bool
+operator!=(const RefPtr & p_other) const : bool
+get_rid() const : RID
+unref() : void
+get_data() const : void *
+RefPtr(const RefPtr & p_other) : void
+RefPtr() : void
+~RefPtr() : void
}
class "List<Object::Connection>" as C_0000751300156436098886
class C_0000751300156436098886 {
}
class "Set<String>" as C_0001682405743486361214
class C_0001682405743486361214 {
}
class "HashMap<StringName,Object::Signal>" as C_0001578539238208480863
class C_0001578539238208480863 {
}
class "Set<Object *>" as C_0000051860595756965531
class C_0000051860595756965531 {
}
class "Object" as C_0001531814603945772616
class C_0001531814603945772616 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408{Object}]] {
{static} +initialize_class() : void
{static} +register_custom_data_to_otdb() : void
+_change_notify(const char * p_property = "") : void
{static} +get_class_ptr_static() : void *
+_use_rc() : ObjectRC *
+_is_gpl_reversed() const : bool
+get_instance_id() const : ObjectID
+add_change_receptor(Object * p_receptor) : void
+remove_change_receptor(Object * p_receptor) : void
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_category_static() : String
+get_class() const : String
+get_save_class() const : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+get_class_name() const : const StringName &
+set(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+get(const StringName & p_name, bool * r_valid = __null) const : Variant
+set_indexed(const Vector<StringName> & p_names, const Variant & p_value, bool * r_valid = __null) : void
+get_indexed(const Vector<StringName> & p_names, bool * r_valid = __null) const : Variant
+get_property_list(List<PropertyInfo> * p_list, bool p_reversed = false) const : void
+has_method(const StringName & p_method) const : bool
+get_method_list(List<MethodInfo> * p_list) const : void
+callv(const StringName & p_method, const Array & p_args) : Variant
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call_multilevel(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+notification(int p_notification, bool p_reversed = false) : void
+to_string() : String
+getvar(const Variant & p_key, bool * r_valid = __null) const : Variant
+setvar(const Variant & p_key, const Variant & p_value, bool * r_valid = __null) : void
+set_script(const RefPtr & p_script) : void
+get_script() const : RefPtr
+has_meta(const String & p_name) const : bool
+set_meta(const String & p_name, const Variant & p_value) : void
+remove_meta(const String & p_name) : void
+get_meta(const String & p_name) const : Variant
+get_meta_list(List<String> * p_list) const : void
+set_edited(bool p_edited) : void
+is_edited() const : bool
+get_edited_version() const : uint32_t
+set_script_instance(ScriptInstance * p_instance) : void
+get_script_instance() const : ScriptInstance *
+set_script_and_instance(const RefPtr & p_script, ScriptInstance * p_instance) : void
+add_user_signal(const MethodInfo & p_signal) : void
+emit_signal(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Error
+emit_signal(const StringName & p_name, const Variant ** p_args, int p_argcount) : Error
+has_signal(const StringName & p_name) const : bool
+get_signal_list(List<MethodInfo> * p_signals) const : void
+get_signal_connection_list(const StringName & p_signal, List<Object::Connection> * p_connections) const : void
+get_all_signal_connections(List<Object::Connection> * p_connections) const : void
+get_persistent_signal_connection_count() const : int
+get_signals_connected_to_this(List<Object::Connection> * p_connections) const : void
+connect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method, const Vector<Variant> & p_binds = Vector<Variant>(), uint32_t p_flags = 0) : Error
+disconnect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) : void
+is_connected(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) const : bool
+call_deferred(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+set_deferred(const StringName & p_property, const Variant & p_value) : void
+set_block_signals(bool p_block) : void
+is_blocking_signals() const : bool
+get_static_property_type(const StringName & p_property, bool * r_valid = __null) const : Variant::Type
+get_static_property_type_indexed(const Vector<StringName> & p_path, bool * r_valid = __null) const : Variant::Type
+get_translatable_strings(List<String> * p_strings) const : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
+tr(const StringName & p_message) const : StringName
+is_queued_for_deletion() const : bool
+set_message_translation(bool p_enable) : void
+can_translate_messages() const : bool
+editor_set_section_unfold(const String & p_section, bool p_unfolded) : void
+editor_is_section_unfolded(const String & p_section) : bool
+editor_get_section_folding() const : const Set<String> &
+editor_clear_section_folding() : void
+get_script_instance_binding(int p_script_language_index) : void *
+has_script_instance_binding(int p_script_language_index) : bool
+set_script_instance_binding(int p_script_language_index, void * p_data) : void
+clear_internal_resource_paths() : void
+Object() : void
+~Object() : void
{static} +cast_to<T>(Object * p_object) : T *
{static} +cast_to<T>(const Object * p_object) : const T *
+_is_queued_for_deletion : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745{_is_queued_for_deletion}]]]
+NOTIFICATION_POSTINITIALIZE : enum
+NOTIFICATION_PREDELETE : enum
}
enum "Object::ConnectFlags" as C_0000219886141561409828
enum C_0000219886141561409828 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410{Object##ConnectFlags}]] {
CONNECT_DEFERRED
CONNECT_PERSIST
CONNECT_ONESHOT
CONNECT_REFERENCE_COUNTED
}
class "Object::Connection" as C_0001267214583673362755
class C_0001267214583673362755 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418{Object##Connection}]] {
+operator<(const Object::Connection & p_conn) const : bool
+operator Variant() const : Variant
+Connection() : void
+Connection(const Variant & p_variant) : void
+source : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420{source}]]]
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421{signal}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422{target}]]]
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423{method}]]]
+flags : uint32_t [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424{flags}]]]
+binds : Vector<Variant> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425{binds}]]]
}
class "Object::Signal" as C_0000250357724807605097
class C_0000250357724807605097 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448{Object##Signal}]] {
+Signal() : void
+user : MethodInfo [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472{user}]]]
+slot_map : VMap<Object::Signal::Target,Object::Signal::Slot> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473{slot_map}]]]
}
class "ObjectDB" as C_0002064336919270342687
class C_0002064336919270342687 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773{ObjectDB}]] {
{static} +get_instance(ObjectID p_instance_id) : Object *
{static} +debug_objects(ObjectDB::DebugFunc p_func) : void
{static} +get_object_count() : int
{static} +instance_validate(Object * p_ptr) : bool
}
class "ClassDB" as C_0000104564426296396960
class C_0000104564426296396960 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94{ClassDB}]] {
{static} +bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition & method_name, const Variant ** p_defs, int p_defcount) : MethodBind *
{static} +_add_class2(const StringName & p_class, const StringName & p_inherits) : void
{static} +get_class_list(List<StringName> * p_classes) : void
{static} +get_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_direct_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_parent_class_nocheck(const StringName & p_class) : StringName
{static} +get_parent_class(const StringName & p_class) : StringName
{static} +class_exists(const StringName & p_class) : bool
{static} +is_parent_class(const StringName & p_class, const StringName & p_inherits) : bool
{static} +can_instance(const StringName & p_class) : bool
{static} +instance(const StringName & p_class) : Object *
{static} +get_api_type(const StringName & p_class) : ClassDB::APIType
{static} +get_api_hash(ClassDB::APIType p_api) : uint64_t
{static} +add_signal(StringName p_class, const MethodInfo & p_signal) : void
{static} +has_signal(StringName p_class, StringName p_signal) : bool
{static} +get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool
{static} +get_signal_list(StringName p_class, List<MethodInfo> * p_signals, bool p_no_inheritance = false) : void
{static} +add_property_group(StringName p_class, const String & p_name, const String & p_prefix = "") : void
{static} +add_property(StringName p_class, const PropertyInfo & p_pinfo, const StringName & p_setter, const StringName & p_getter, int p_index = -1) : void
{static} +set_property_default_value(StringName p_class, const StringName & p_name, const Variant & p_default) : void
{static} +get_property_list(StringName p_class, List<PropertyInfo> * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void
{static} +set_property(Object * p_object, const StringName & p_property, const Variant & p_value, bool * r_valid = __null) : bool
{static} +get_property(Object * p_object, const StringName & p_property, Variant & r_value) : bool
{static} +has_property(const StringName & p_class, const StringName & p_property, bool p_no_inheritance = false) : bool
{static} +get_property_index(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : int
{static} +get_property_type(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : Variant::Type
{static} +get_property_setter(StringName p_class, const StringName & p_property) : StringName
{static} +get_property_getter(StringName p_class, const StringName & p_property) : StringName
{static} +has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool
{static} +set_method_flags(StringName p_class, StringName p_method, int p_flags) : void
{static} +get_method_list(StringName p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void
{static} +get_method(StringName p_class, StringName p_name) : MethodBind *
{static} +add_virtual_method(const StringName & p_class, const MethodInfo & p_method, bool p_virtual = true) : void
{static} +get_virtual_methods(const StringName & p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false) : void
{static} +bind_integer_constant(const StringName & p_class, const StringName & p_enum, const StringName & p_name, int p_constant) : void
{static} +get_integer_constant_list(const StringName & p_class, List<String> * p_constants, bool p_no_inheritance = false) : void
{static} +get_integer_constant(const StringName & p_class, const StringName & p_name, bool * p_success = __null) : int
{static} +get_integer_constant_enum(const StringName & p_class, const StringName & p_name, bool p_no_inheritance = false) : StringName
{static} +get_enum_list(const StringName & p_class, List<StringName> * p_enums, bool p_no_inheritance = false) : void
{static} +get_enum_constants(const StringName & p_class, const StringName & p_enum, List<StringName> * p_constants, bool p_no_inheritance = false) : void
{static} +class_get_default_property_value(const StringName & p_class, const StringName & p_property, bool * r_valid = __null) : Variant
{static} +get_category(const StringName & p_node) : StringName
{static} +set_class_enabled(StringName p_class, bool p_enable) : void
{static} +is_class_enabled(StringName p_class) : bool
{static} +is_class_exposed(StringName p_class) : bool
{static} +add_resource_base_extension(const StringName & p_extension, const StringName & p_class) : void
{static} +get_resource_base_extensions(List<String> * p_extensions) : void
{static} +get_extensions_for_type(const StringName & p_class, List<String> * p_extensions) : void
{static} +add_compatibility_class(const StringName & p_class, const StringName & p_fallback) : void
{static} +set_current_api(ClassDB::APIType p_api) : void
{static} +get_current_api() : ClassDB::APIType
{static} +cleanup_defaults() : void
{static} +cleanup() : void
{static} +creator<T>() : class Object *
{static} +_add_class<T>() : void
{static} +register_class<T>() : void
{static} +register_virtual_class<T>() : void
{static} +_create_ptr_func<T>() : class Object *
{static} +register_custom_instance_class<T>() : void
{static} +bind_method<N,M>(N p_method_name, M p_method) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7, const Variant & p_def8) : class MethodBind *
{static} +bind_vararg_method<M>(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo & p_info = MethodInfo(), const Vector<Variant> & p_default_args = Vector<Variant>(), bool p_return_nil_is_variant = true) : class MethodBind *
{static} +lock : RWLock [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146{lock}]]]
{static} +classes : HashMap<StringName,ClassDB::ClassInfo> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147{classes}]]]
{static} +resource_base_extensions : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148{resource_base_extensions}]]]
{static} +compat_classes : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149{compat_classes}]]]
{static} +current_api : ClassDB::APIType [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157{current_api}]]]
{static} +default_values : HashMap<StringName,HashMap<StringName,Variant>> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161{default_values}]]]
{static} +default_values_cached : Set<StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162{default_values_cached}]]]
}
class "Node" as C_0000218299049716973303
class C_0000218299049716973303 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55{Node}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_name() const : StringName
+set_name(const String & p_name) : void
+add_child(Node * p_child, bool p_legible_unique_name = false) : void
+add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void
+remove_child(Node * p_child) : void
+get_child_count() const : int
+get_child(int p_index) const : Node *
+has_node(const NodePath & p_path) const : bool
+get_node(const NodePath & p_path) const : Node *
+get_node_or_null(const NodePath & p_path) const : Node *
+find_node(const String & p_mask, bool p_recursive = true, bool p_owned = true) const : Node *
+has_node_and_resource(const NodePath & p_path) const : bool
+get_node_and_resource(const NodePath & p_path, RES & r_res, Vector<StringName> & r_leftover_subpath, bool p_last_is_property = true) const : Node *
+get_parent() const : Node *
+find_parent(const String & p_mask) const : Node *
+get_tree() const : SceneTree *
+is_inside_tree() const : bool
+is_a_parent_of(const Node * p_node) const : bool
+is_greater_than(const Node * p_node) const : bool
+get_path() const : NodePath
+get_path_to(const Node * p_node) const : NodePath
+find_common_parent_with(const Node * p_node) const : Node *
+add_to_group(const StringName & p_identifier, bool p_persistent = false) : void
+remove_from_group(const StringName & p_identifier) : void
+is_in_group(const StringName & p_identifier) const : bool
+get_groups(List<Node::GroupInfo> * p_groups) const : void
+get_persistent_group_count() const : int
+move_child(Node * p_child, int p_pos) : void
+raise() : void
+set_owner(Node * p_owner) : void
+get_owner() const : Node *
+get_owned_by(Node * p_by, List<Node *> * p_owned) : void
+remove_and_skip() : void
+get_index() const : int
+print_tree() : void
+print_tree_pretty() : void
+set_filename(const String & p_filename) : void
+get_filename() const : String
+set_editor_description(const String & p_editor_description) : void
+get_editor_description() const : String
+set_editable_instance(Node * p_node, bool p_editable) : void
+is_editable_instance(const Node * p_node) const : bool
+get_deepest_editable_node(Node * start_node) const : Node *
+propagate_notification(int p_notification) : void
+propagate_call(const StringName & p_method, const Array & p_args = Array(), const bool p_parent_first = false) : void
+set_physics_process(bool p_process) : void
+get_physics_process_delta_time() const : float
+is_physics_processing() const : bool
+set_process(bool p_idle_process) : void
+get_process_delta_time() const : float
+is_processing() const : bool
+set_physics_process_internal(bool p_process_internal) : void
+is_physics_processing_internal() const : bool
+set_process_internal(bool p_idle_process_internal) : void
+is_processing_internal() const : bool
+set_process_priority(int p_priority) : void
+get_process_priority() const : int
+set_process_input(bool p_enable) : void
+is_processing_input() const : bool
+set_process_unhandled_input(bool p_enable) : void
+is_processing_unhandled_input() const : bool
+set_process_unhandled_key_input(bool p_enable) : void
+is_processing_unhandled_key_input() const : bool
+get_position_in_parent() const : int
+duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *
+duplicate_and_reown(const Map<Node *,Node *> & p_reown_map) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap, const Map<RES,RES> & p_resource_remap) const : Node *
+remap_node_resources(Node * p_node, const Map<RES,RES> & p_resource_remap) const : void
+remap_nested_resources(RES p_resource, const Map<RES,RES> & p_resource_remap) const : void
+set_scene_instance_state(const Ref<SceneState> & p_state) : void
+get_scene_instance_state() const : Ref<SceneState>
+set_scene_inherited_state(const Ref<SceneState> & p_state) : void
+get_scene_inherited_state() const : Ref<SceneState>
+set_scene_instance_load_placeholder(bool p_enable) : void
+get_scene_instance_load_placeholder() const : bool
{static} +make_binds(const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Vector<Variant>
+replace_by(Node * p_node, bool p_keep_data = false) : void
+set_pause_mode(Node::PauseMode p_mode) : void
+get_pause_mode() const : Node::PauseMode
+can_process() const : bool
+can_process_notification(int p_what) const : bool
+request_ready() : void
{static} +print_stray_nodes() : void
+validate_child_name(Node * p_child) : String
+queue_delete() : void
{static} +set_human_readable_collision_renaming(bool p_enabled) : void
{static} +init_node_hrcr() : void
+force_parent_owned() : void
+set_import_path(const NodePath & p_import_path) : void
+get_import_path() const : NodePath
+is_owned_by_parent() const : bool
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
+clear_internal_tree_resource_paths() : void
+get_viewport() const : Viewport *
+get_configuration_warning() const : String
+update_configuration_warning() : void
+set_display_folded(bool p_folded) : void
+is_displayed_folded() const : bool
+set_network_master(int p_peer_id, bool p_recursive = true) : void
+get_network_master() const : int
+is_network_master() const : bool
+rpc_config(const StringName & p_method, MultiplayerAPI::RPCMode p_mode) : void
+rset_config(const StringName & p_property, MultiplayerAPI::RPCMode p_mode) : void
+rpc(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rset(const StringName & p_property, const Variant & p_value) : void
+rset_unreliable(const StringName & p_property, const Variant & p_value) : void
+rset_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rset_unreliable_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rpcp(int p_peer_id, bool p_unreliable, const StringName & p_method, const Variant ** p_arg, int p_argcount) : void
+rsetp(int p_peer_id, bool p_unreliable, const StringName & p_property, const Variant & p_value) : void
+get_multiplayer() const : Ref<MultiplayerAPI>
+get_custom_multiplayer() const : Ref<MultiplayerAPI>
+set_custom_multiplayer(Ref<MultiplayerAPI> p_multiplayer) : void
+get_node_rpc_mode(const StringName & p_method) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+get_node_rset_mode(const StringName & p_property) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+Node() : void
+~Node() : void
{static} +orphan_node_count : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78{orphan_node_count}]]]
+NOTIFICATION_ENTER_TREE : enum
+NOTIFICATION_EXIT_TREE : enum
+NOTIFICATION_MOVED_IN_PARENT : enum
+NOTIFICATION_READY : enum
+NOTIFICATION_PAUSED : enum
+NOTIFICATION_UNPAUSED : enum
+NOTIFICATION_PHYSICS_PROCESS : enum
+NOTIFICATION_PROCESS : enum
+NOTIFICATION_PARENTED : enum
+NOTIFICATION_UNPARENTED : enum
+NOTIFICATION_INSTANCED : enum
+NOTIFICATION_DRAG_BEGIN : enum
+NOTIFICATION_DRAG_END : enum
+NOTIFICATION_PATH_CHANGED : enum
+NOTIFICATION_INTERNAL_PROCESS : enum
+NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum
+NOTIFICATION_POST_ENTER_TREE : enum
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_APP_PAUSED : enum
}
class "ObjectRC" as C_0000933379568804427881
class C_0000933379568804427881 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54{ObjectRC}]] {
+increment() : void
+decrement() : bool
+invalidate() : bool
+get_ptr() : Object *
+ObjectRC(Object * p_object) : void
+instance_id : const ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52{instance_id}]]]
}
abstract "ScriptInstance" as C_0001735438654351294549
abstract C_0001735438654351294549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405{ScriptInstance}]] {
{abstract} +set(const StringName & p_name, const Variant & p_value) = 0 : bool
{abstract} +get(const StringName & p_name, Variant & r_ret) const = 0 : bool
{abstract} +get_property_list(List<PropertyInfo> * p_properties) const = 0 : void
{abstract} +get_property_type(const StringName & p_name, bool * r_is_valid = __null) const = 0 : Variant::Type
+get_owner() : Object *
+get_property_state(List<Pair<StringName,Variant>> & state) : void
{abstract} +get_method_list(List<MethodInfo> * p_list) const = 0 : void
{abstract} +has_method(const StringName & p_method) const = 0 : bool
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
{abstract} +call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) = 0 : Variant
+call_multilevel(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
{abstract} +notification(int p_notification) = 0 : void
+to_string(bool * r_valid) : String
+refcount_incremented() : void
+refcount_decremented() : bool
{abstract} +get_script() const = 0 : Ref<Script>
+is_placeholder() const : bool
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid) : void
+property_get_fallback(const StringName & p_name, bool * r_valid) : Variant
{abstract} +get_rpc_mode(const StringName & p_method) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_rset_mode(const StringName & p_variable) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_language() = 0 : ScriptLanguage *
+~ScriptInstance() : void
}
class "Reference" as C_0001778859257025660860
class C_0001778859257025660860 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39{Reference}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+is_referenced() const : bool
+init_ref() : bool
+reference() : bool
+unreference() : bool
+reference_get_count() const : int
+Reference() : void
+~Reference() : void
}
class "PlaceHolderScriptInstance" as C_0001649884439586022807
class C_0001649884439586022807 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374{PlaceHolderScriptInstance}]] {
+set(const StringName & p_name, const Variant & p_value) : bool
+get(const StringName & p_name, Variant & r_ret) const : bool
+get_property_list(List<PropertyInfo> * p_properties) const : void
+get_property_type(const StringName & p_name, bool * r_is_valid = __null) const : Variant::Type
+get_method_list(List<MethodInfo> * p_list) const : void
+has_method(const StringName & p_method) const : bool
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+notification(int p_notification) : void
+get_script() const : Ref<Script>
+get_language() : ScriptLanguage *
+get_owner() : Object *
+update(const List<PropertyInfo> & p_properties, const Map<StringName,Variant> & p_values) : void
+is_placeholder() const : bool
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+property_get_fallback(const StringName & p_name, bool * r_valid = __null) : Variant
+get_rpc_mode(const StringName & p_method) const : MultiplayerAPI::RPCMode
+get_rset_mode(const StringName & p_variable) const : MultiplayerAPI::RPCMode
+PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref<Script> p_script, Object * p_owner) : void
+~PlaceHolderScriptInstance() : void
}
class "MainLoop" as C_0000970940027123558604
class C_0000970940027123558604 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38{MainLoop}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+input_event(const Ref<InputEvent> & p_event) : void
+input_text(const String & p_text) : void
+init() : void
+iteration(float p_time) : bool
+idle(float p_time) : bool
+finish() : void
+drop_files(const Vector<String> & p_files, int p_from_screen = 0) : void
+global_menu_action(const Variant & p_id, const Variant & p_meta) : void
+set_init_script(const Ref<Script> & p_init_script) : void
+MainLoop() : void
+~MainLoop() : void
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_APP_PAUSED : enum
}
class "Engine::Singleton" as C_0001823345232236209470
class C_0001823345232236209470 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42{Engine##Singleton}]] {
+Singleton(const StringName & p_name = StringName(), Object * p_ptr = __null) : void
+name : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43{name}]]]
+ptr : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44{ptr}]]]
}
abstract "IP" as C_0001191393512042218074
abstract C_0001191393512042218074 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39{IP}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+resolve_hostname(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address
+resolve_hostname_queue_item(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID
+get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus
+get_resolve_item_address(IP::ResolverID p_id) const : IP_Address
+get_local_addresses(List<IP_Address> * r_addresses) const : void
{abstract} +get_local_interfaces(Map<String,IP::Interface_Info> * r_interfaces) const = 0 : void
+erase_resolve_item(IP::ResolverID p_id) : void
+clear_cache(const String & p_hostname = "") : void
{static} +get_singleton() : IP *
{static} +create() : IP *
+IP() : void
+~IP() : void
+RESOLVER_MAX_QUERIES : enum
+RESOLVER_INVALID_ID : enum
}
class "ProjectSettings" as C_0000066148521405667716
class C_0000066148521405667716 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38{ProjectSettings}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+set_setting(const String & p_setting, const Variant & p_value) : void
+get_setting(const String & p_setting) const : Variant
+has_setting(String p_var) const : bool
+localize_path(const String & p_path) const : String
+globalize_path(const String & p_path) const : String
+set_initial_value(const String & p_name, const Variant & p_value) : void
+set_restart_if_changed(const String & p_name, bool p_restart) : void
+property_can_revert(const String & p_name) : bool
+property_get_revert(const String & p_name) : Variant
+get_resource_path() const : String
{static} +get_singleton() : ProjectSettings *
+clear(const String & p_name) : void
+get_order(const String & p_name) const : int
+set_order(const String & p_name, int p_order) : void
+set_builtin_order(const String & p_name) : void
+setup(const String & p_path, const String & p_main_pack, bool p_upwards = false) : Error
+save_custom(const String & p_path = "", const ProjectSettings::CustomMap & p_custom = CustomMap(), const Vector<String> & p_custom_features = Vector<String>(), bool p_merge_with_current = true) : Error
+save() : Error
+set_custom_property_info(const String & p_prop, const PropertyInfo & p_info) : void
+get_custom_property_info() const : const Map<StringName,PropertyInfo> &
+get_last_saved_time() : uint64_t
+get_optimizer_presets() const : Vector<String>
+get_input_presets() const : List<String>
+set_disable_feature_overrides(bool p_disable) : void
+is_using_datapack() const : bool
+set_registering_order(bool p_enable) : void
+has_custom_feature(const String & p_feature) const : bool
+ProjectSettings() : void
+~ProjectSettings() : void
+NO_BUILTIN_ORDER_BASE : enum
{static} +CONFIG_VERSION : const int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117{CONFIG_VERSION}]]]
}
abstract "Input" as C_0000535376932101028371
abstract C_0000535376932101028371 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38{Input}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+set_mouse_mode(Input::MouseMode p_mode) : void
+get_mouse_mode() const : Input::MouseMode
{static} +get_singleton() : Input *
{abstract} +is_key_pressed(int p_scancode) const = 0 : bool
{abstract} +is_mouse_button_pressed(int p_button) const = 0 : bool
{abstract} +is_joy_button_pressed(int p_device, int p_button) const = 0 : bool
{abstract} +is_action_pressed(const StringName & p_action) const = 0 : bool
{abstract} +is_action_just_pressed(const StringName & p_action) const = 0 : bool
{abstract} +is_action_just_released(const StringName & p_action) const = 0 : bool
{abstract} +get_action_strength(const StringName & p_action) const = 0 : float
{abstract} +get_joy_axis(int p_device, int p_axis) const = 0 : float
{abstract} +get_joy_name(int p_idx) = 0 : String
{abstract} +get_connected_joypads() = 0 : Array
{abstract} +joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void
{abstract} +add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void
{abstract} +remove_joy_mapping(String p_guid) = 0 : void
{abstract} +is_joy_known(int p_device) = 0 : bool
{abstract} +get_joy_guid(int p_device) const = 0 : String
{abstract} +get_joy_vibration_strength(int p_device) = 0 : Vector2
{abstract} +get_joy_vibration_duration(int p_device) = 0 : float
{abstract} +get_joy_vibration_timestamp(int p_device) = 0 : uint64_t
{abstract} +start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void
{abstract} +stop_joy_vibration(int p_device) = 0 : void
{abstract} +vibrate_handheld(int p_duration_ms = 500) = 0 : void
{abstract} +get_mouse_position() const = 0 : Point2
{abstract} +get_last_mouse_speed() const = 0 : Point2
{abstract} +get_mouse_button_mask() const = 0 : int
{abstract} +warp_mouse_position(const Vector2 & p_to) = 0 : void
{abstract} +warp_mouse_motion(const Ref<InputEventMouseMotion> & p_motion, const Rect2 & p_rect) = 0 : Point2i
{abstract} +get_gravity() const = 0 : Vector3
{abstract} +get_accelerometer() const = 0 : Vector3
{abstract} +get_magnetometer() const = 0 : Vector3
{abstract} +get_gyroscope() const = 0 : Vector3
{abstract} +action_press(const StringName & p_action, float p_strength = 1.f) = 0 : void
{abstract} +action_release(const StringName & p_action) = 0 : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
{abstract} +is_emulating_touch_from_mouse() const = 0 : bool
{abstract} +is_emulating_mouse_from_touch() const = 0 : bool
{abstract} +get_default_cursor_shape() const = 0 : Input::CursorShape
{abstract} +set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void
{abstract} +get_current_cursor_shape() const = 0 : Input::CursorShape
{abstract} +set_custom_mouse_cursor(const RES & p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 & p_hotspot = Vector2()) = 0 : void
{abstract} +get_joy_button_string(int p_button) = 0 : String
{abstract} +get_joy_axis_string(int p_axis) = 0 : String
{abstract} +get_joy_button_index_from_string(String p_button) = 0 : int
{abstract} +get_joy_axis_index_from_string(String p_axis) = 0 : int
{abstract} +parse_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +accumulate_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +flush_accumulated_events() = 0 : void
{abstract} +set_use_accumulated_input(bool p_enable) = 0 : void
+Input() : void
}
class "AudioServer" as C_0001370497546359815893
class C_0001370497546359815893 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148{AudioServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_channel_count() const : int
+thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool
+thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *
+thread_get_mix_buffer_size() const : int
+thread_find_bus_index(const StringName & p_name) : int
+set_bus_count(int p_count) : void
+get_bus_count() const : int
+remove_bus(int p_index) : void
+add_bus(int p_at_pos = -1) : void
+move_bus(int p_bus, int p_to_pos) : void
+set_bus_name(int p_bus, const String & p_name) : void
+get_bus_name(int p_bus) const : String
+get_bus_index(const StringName & p_bus_name) const : int
+get_bus_channels(int p_bus) const : int
+set_bus_volume_db(int p_bus, float p_volume_db) : void
+get_bus_volume_db(int p_bus) const : float
+set_bus_send(int p_bus, const StringName & p_send) : void
+get_bus_send(int p_bus) const : StringName
+set_bus_solo(int p_bus, bool p_enable) : void
+is_bus_solo(int p_bus) const : bool
+set_bus_mute(int p_bus, bool p_enable) : void
+is_bus_mute(int p_bus) const : bool
+set_bus_bypass_effects(int p_bus, bool p_enable) : void
+is_bus_bypassing_effects(int p_bus) const : bool
+add_bus_effect(int p_bus, const Ref<AudioEffect> & p_effect, int p_at_pos = -1) : void
+remove_bus_effect(int p_bus, int p_effect) : void
+get_bus_effect_count(int p_bus) : int
+get_bus_effect(int p_bus, int p_effect) : Ref<AudioEffect>
+get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref<AudioEffectInstance>
+swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void
+set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void
+is_bus_effect_enabled(int p_bus, int p_effect) const : bool
+get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float
+get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float
+is_bus_channel_active(int p_bus, int p_channel) const : bool
+set_global_rate_scale(float p_scale) : void
+get_global_rate_scale() const : float
+init() : void
+finish() : void
+update() : void
+load_default_bus_layout() : void
+lock() : void
+unlock() : void
+get_speaker_mode() const : AudioServer::SpeakerMode
+get_mix_rate() const : float
+read_output_peak_db() const : float
{static} +get_singleton() : AudioServer *
+get_output_latency() const : double
+get_time_to_next_mix() const : double
+get_time_since_last_mix() const : double
+audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *
+audio_data_free(void * p_data) : void
+audio_data_get_total_memory_usage() const : size_t
+audio_data_get_max_memory_usage() const : size_t
+add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+set_bus_layout(const Ref<AudioBusLayout> & p_bus_layout) : void
+generate_bus_layout() const : Ref<AudioBusLayout>
+get_device_list() : Array
+get_device() : String
+set_device(String device) : void
+capture_get_device_list() : Array
+capture_get_device() : String
+capture_set_device(const String & p_name) : void
+AudioServer() : void
+~AudioServer() : void
+AUDIO_DATA_INVALID_ID : enum
}
class "CameraServer" as C_0001701907280759632930
class C_0001701907280759632930 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49{CameraServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : CameraServer *
{static} +create() : CameraServer *
+get_free_id() : int
+get_feed_index(int p_id) : int
+get_feed_by_id(int p_id) : Ref<CameraFeed>
+add_feed(const Ref<CameraFeed> & p_feed) : void
+remove_feed(const Ref<CameraFeed> & p_feed) : void
+get_feed(int p_index) : Ref<CameraFeed>
+get_feed_count() : int
+get_feeds() : Array
+feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID
+CameraServer() : void
+~CameraServer() : void
{static} +make_default<T>() : void
}
abstract "VisualServer" as C_0001589464385186808769
abstract C_0001589464385186808769 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42{VisualServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : VisualServer *
{static} +create() : VisualServer *
{abstract} +texture_create() = 0 : RID
+texture_create_from_image(const Ref<Image> & p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID
{abstract} +texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void
{abstract} +texture_set_data(RID p_texture, const Ref<Image> & p_image, int p_layer = 0) = 0 : void
{abstract} +texture_set_data_partial(RID p_texture, const Ref<Image> & p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void
{abstract} +texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref<Image>
{abstract} +texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void
{abstract} +texture_get_flags(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_format(RID p_texture) const = 0 : Image::Format
{abstract} +texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType
{abstract} +texture_get_texid(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_width(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_height(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_depth(RID p_texture) const = 0 : uint32_t
{abstract} +texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void
{abstract} +texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void
{abstract} +texture_set_path(RID p_texture, const String & p_path) = 0 : void
{abstract} +texture_get_path(RID p_texture) const = 0 : String
{abstract} +texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void
{abstract} +texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_debug_usage(List<VisualServer::TextureInfo> * r_info) = 0 : void
+_texture_debug_usage_bind() : Array
{abstract} +textures_keep_original(bool p_enable) = 0 : void
{abstract} +texture_set_proxy(RID p_proxy, RID p_base) = 0 : void
{abstract} +texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void
{abstract} +sky_create() = 0 : RID
{abstract} +sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void
{abstract} +shader_create() = 0 : RID
{abstract} +shader_set_code(RID p_shader, const String & p_code) = 0 : void
{abstract} +shader_get_code(RID p_shader) const = 0 : String
{abstract} +shader_get_param_list(RID p_shader, List<PropertyInfo> * p_param_list) const = 0 : void
+_shader_get_param_list_bind(RID p_shader) const : Array
{abstract} +shader_set_default_texture_param(RID p_shader, const StringName & p_name, RID p_texture) = 0 : void
{abstract} +shader_get_default_texture_param(RID p_shader, const StringName & p_name) const = 0 : RID
{abstract} +shader_add_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +shader_get_custom_defines(RID p_shader, Vector<String> * p_defines) const = 0 : void
{abstract} +shader_remove_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +material_create() = 0 : RID
{abstract} +material_set_shader(RID p_shader_material, RID p_shader) = 0 : void
{abstract} +material_get_shader(RID p_shader_material) const = 0 : RID
{abstract} +material_set_param(RID p_material, const StringName & p_param, const Variant & p_value) = 0 : void
{abstract} +material_get_param(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_get_param_default(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_set_render_priority(RID p_material, int priority) = 0 : void
{abstract} +material_set_line_width(RID p_material, float p_width) = 0 : void
{abstract} +material_set_next_pass(RID p_material, RID p_next_material) = 0 : void
{abstract} +mesh_create() = 0 : RID
+mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t
+mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t
+mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t
+mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array & p_arrays, const Array & p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void
{abstract} +mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector<uint8_t> & p_array, int p_vertex_count, const PoolVector<uint8_t> & p_index_array, int p_index_count, const AABB & p_aabb, const Vector<PoolVector<uint8_t>> & p_blend_shapes = Vector<PoolVector<uint8_t> >(), const Vector<AABB> & p_bone_aabbs = Vector<AABB>()) = 0 : void
{abstract} +mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void
{abstract} +mesh_get_blend_shape_count(RID p_mesh) const = 0 : int
{abstract} +mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void
{abstract} +mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode
{abstract} +mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector<uint8_t> & p_data) = 0 : void
{abstract} +mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void
{abstract} +mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID
{abstract} +mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int
{abstract} +mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int
{abstract} +mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
{abstract} +mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
+mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array
+mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array
{abstract} +mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t
{abstract} +mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType
{abstract} +mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB
{abstract} +mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector<PoolVector<uint8_t>>
{abstract} +mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector<AABB>
+_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array
{abstract} +mesh_remove_surface(RID p_mesh, int p_index) = 0 : void
{abstract} +mesh_get_surface_count(RID p_mesh) const = 0 : int
{abstract} +mesh_set_custom_aabb(RID p_mesh, const AABB & p_aabb) = 0 : void
{abstract} +mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB
{abstract} +mesh_clear(RID p_mesh) = 0 : void
{abstract} +multimesh_create() = 0 : RID
{abstract} +multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void
{abstract} +multimesh_get_instance_count(RID p_multimesh) const = 0 : int
{abstract} +multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void
{abstract} +multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform & p_transform) = 0 : void
{abstract} +multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D & p_transform) = 0 : void
{abstract} +multimesh_instance_set_color(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_get_mesh(RID p_multimesh) const = 0 : RID
{abstract} +multimesh_get_aabb(RID p_multimesh) const = 0 : AABB
{abstract} +multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform
{abstract} +multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D
{abstract} +multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector<float> & p_array) = 0 : void
{abstract} +multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void
{abstract} +multimesh_get_visible_instances(RID p_multimesh) const = 0 : int
{abstract} +immediate_create() = 0 : RID
{abstract} +immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void
{abstract} +immediate_vertex(RID p_immediate, const Vector3 & p_vertex) = 0 : void
+immediate_vertex_2d(RID p_immediate, const Vector2 & p_vertex) : void
{abstract} +immediate_normal(RID p_immediate, const Vector3 & p_normal) = 0 : void
{abstract} +immediate_tangent(RID p_immediate, const Plane & p_tangent) = 0 : void
{abstract} +immediate_color(RID p_immediate, const Color & p_color) = 0 : void
{abstract} +immediate_uv(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_uv2(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_end(RID p_immediate) = 0 : void
{abstract} +immediate_clear(RID p_immediate) = 0 : void
{abstract} +immediate_set_material(RID p_immediate, RID p_material) = 0 : void
{abstract} +immediate_get_material(RID p_immediate) const = 0 : RID
{abstract} +skeleton_create() = 0 : RID
{abstract} +skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void
{abstract} +skeleton_get_bone_count(RID p_skeleton) const = 0 : int
{abstract} +skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform & p_transform) = 0 : void
{abstract} +skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform
{abstract} +skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D & p_transform) = 0 : void
{abstract} +skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D
{abstract} +skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D & p_base_transform) = 0 : void
{abstract} +directional_light_create() = 0 : RID
{abstract} +omni_light_create() = 0 : RID
{abstract} +spot_light_create() = 0 : RID
{abstract} +light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void
{abstract} +light_set_shadow(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_projector(RID p_light, RID p_texture) = 0 : void
{abstract} +light_set_negative(RID p_light, bool p_enable) = 0 : void
{abstract} +light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void
{abstract} +light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_use_gi(RID p_light, bool p_enable) = 0 : void
{abstract} +light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void
{abstract} +light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void
{abstract} +light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void
{abstract} +light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void
{abstract} +light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void
{abstract} +light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void
{abstract} +reflection_probe_create() = 0 : RID
{abstract} +reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void
{abstract} +reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void
{abstract} +reflection_probe_set_interior_ambient(RID p_probe, const Color & p_color) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void
{abstract} +reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void
{abstract} +reflection_probe_set_extents(RID p_probe, const Vector3 & p_extents) = 0 : void
{abstract} +reflection_probe_set_origin_offset(RID p_probe, const Vector3 & p_offset) = 0 : void
{abstract} +reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void
{abstract} +reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void
{abstract} +gi_probe_create() = 0 : RID
{abstract} +gi_probe_set_bounds(RID p_probe, const AABB & p_bounds) = 0 : void
{abstract} +gi_probe_get_bounds(RID p_probe) const = 0 : AABB
{abstract} +gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_cell_size(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_to_cell_xform(RID p_probe, const Transform & p_xform) = 0 : void
{abstract} +gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform
{abstract} +gi_probe_set_dynamic_data(RID p_probe, const PoolVector<int> & p_data) = 0 : void
{abstract} +gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector<int>
{abstract} +gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void
{abstract} +gi_probe_get_dynamic_range(RID p_probe) const = 0 : int
{abstract} +gi_probe_set_energy(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_energy(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_normal_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_propagation(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_is_interior(RID p_probe) const = 0 : bool
{abstract} +gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_is_compressed(RID p_probe) const = 0 : bool
{abstract} +lightmap_capture_create() = 0 : RID
{abstract} +lightmap_capture_set_bounds(RID p_capture, const AABB & p_bounds) = 0 : void
{abstract} +lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB
{abstract} +lightmap_capture_set_octree(RID p_capture, const PoolVector<uint8_t> & p_octree) = 0 : void
{abstract} +lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform & p_xform) = 0 : void
{abstract} +lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform
{abstract} +lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void
{abstract} +lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int
{abstract} +lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector<uint8_t>
{abstract} +lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void
{abstract} +lightmap_capture_get_energy(RID p_capture) const = 0 : float
{abstract} +lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void
{abstract} +lightmap_capture_is_interior(RID p_capture) const = 0 : bool
{abstract} +particles_create() = 0 : RID
{abstract} +particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void
{abstract} +particles_get_emitting(RID p_particles) = 0 : bool
{abstract} +particles_set_amount(RID p_particles, int p_amount) = 0 : void
{abstract} +particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void
{abstract} +particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void
{abstract} +particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void
{abstract} +particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_custom_aabb(RID p_particles, const AABB & p_aabb) = 0 : void
{abstract} +particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void
{abstract} +particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void
{abstract} +particles_set_process_material(RID p_particles, RID p_material) = 0 : void
{abstract} +particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void
{abstract} +particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void
{abstract} +particles_is_inactive(RID p_particles) = 0 : bool
{abstract} +particles_request_process(RID p_particles) = 0 : void
{abstract} +particles_restart(RID p_particles) = 0 : void
{abstract} +particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void
{abstract} +particles_set_draw_passes(RID p_particles, int p_count) = 0 : void
{abstract} +particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void
{abstract} +particles_get_current_aabb(RID p_particles) = 0 : AABB
{abstract} +particles_set_emission_transform(RID p_particles, const Transform & p_transform) = 0 : void
{abstract} +camera_create() = 0 : RID
{abstract} +camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_transform(RID p_camera, const Transform & p_transform) = 0 : void
{abstract} +camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void
{abstract} +camera_set_environment(RID p_camera, RID p_env) = 0 : void
{abstract} +camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void
{abstract} +viewport_create() = 0 : RID
{abstract} +viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void
{abstract} +viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void
{abstract} +viewport_set_active(RID p_viewport, bool p_active) = 0 : void
{abstract} +viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void
{abstract} +viewport_attach_to_screen(RID p_viewport, const Rect2 & p_rect = Rect2(), int p_screen = 0) = 0 : void
{abstract} +viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void
{abstract} +viewport_detach(RID p_viewport) = 0 : void
{abstract} +viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void
{abstract} +viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void
{abstract} +viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void
{abstract} +viewport_get_texture(RID p_viewport) const = 0 : RID
{abstract} +viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void
{abstract} +viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void
{abstract} +viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D & p_offset) = 0 : void
{abstract} +viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_global_canvas_transform(RID p_viewport, const Transform2D & p_transform) = 0 : void
{abstract} +viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void
{abstract} +viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void
{abstract} +viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void
{abstract} +viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void
{abstract} +viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void
{abstract} +viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void
{abstract} +viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void
{abstract} +viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int
{abstract} +viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void
{abstract} +environment_create() = 0 : RID
{abstract} +environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void
{abstract} +environment_set_sky(RID p_env, RID p_sky) = 0 : void
{abstract} +environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void
{abstract} +environment_set_sky_orientation(RID p_env, const Basis & p_orientation) = 0 : void
{abstract} +environment_set_bg_color(RID p_env, const Color & p_color) = 0 : void
{abstract} +environment_set_bg_energy(RID p_env, float p_energy) = 0 : void
{abstract} +environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void
{abstract} +environment_set_ambient_light(RID p_env, const Color & p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void
{abstract} +environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void
{abstract} +environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void
{abstract} +environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void
{abstract} +environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void
{abstract} +environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void
{abstract} +environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color & p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void
{abstract} +environment_set_fog(RID p_env, bool p_enable, const Color & p_color, const Color & p_sun_color, float p_sun_amount) = 0 : void
{abstract} +environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void
{abstract} +environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void
{abstract} +scenario_create() = 0 : RID
{abstract} +scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void
{abstract} +scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void
{abstract} +scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void
{abstract} +scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void
+instance_create2(RID p_base, RID p_scenario) : RID
{abstract} +instance_create() = 0 : RID
{abstract} +instance_set_base(RID p_instance, RID p_base) = 0 : void
{abstract} +instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void
{abstract} +instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void
{abstract} +instance_set_transform(RID p_instance, const Transform & p_transform) = 0 : void
{abstract} +instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void
{abstract} +instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void
{abstract} +instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void
{abstract} +instance_set_visible(RID p_instance, bool p_visible) = 0 : void
{abstract} +instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 & p_lightmap_uv_rect) = 0 : void
{abstract} +instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void
{abstract} +instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void
{abstract} +instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void
{abstract} +instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void
{abstract} +instances_cull_aabb(const AABB & p_aabb, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_ray(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_convex(const Vector<Plane> & p_convex, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
+_instances_cull_aabb_bind(const AABB & p_aabb, RID p_scenario = = RID()) const : Array
+_instances_cull_ray_bind(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const : Array
+_instances_cull_convex_bind(const Array & p_convex, RID p_scenario = = RID()) const : Array
{abstract} +instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void
{abstract} +instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void
{abstract} +instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void
{abstract} +instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void
{abstract} +instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void
{abstract} +canvas_create() = 0 : RID
{abstract} +canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 & p_mirroring) = 0 : void
{abstract} +canvas_set_modulate(RID p_canvas, const Color & p_color) = 0 : void
{abstract} +canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void
{abstract} +canvas_set_disable_scale(bool p_disable) = 0 : void
{abstract} +canvas_item_create() = 0 : RID
{abstract} +canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void
{abstract} +canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void
{abstract} +canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void
{abstract} +canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void
{abstract} +canvas_item_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void
{abstract} +canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 & p_rect = Rect2()) = 0 : void
{abstract} +canvas_item_set_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_self_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_add_line(RID p_item, const Point2 & p_from, const Point2 & p_to, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_polyline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_multiline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_rect(RID p_item, const Rect2 & p_rect, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_circle(RID p_item, const Point2 & p_pos, float p_radius, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_texture_rect(RID p_item, const Rect2 & p_rect, RID p_texture, bool p_tile = false, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void
{abstract} +canvas_item_add_nine_patch(RID p_item, const Rect2 & p_rect, const Rect2 & p_source, RID p_texture, const Vector2 & p_topleft, const Vector2 & p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color & p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_primitive(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_polygon(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_triangle_array(RID p_item, const Vector<int> & p_indices, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), const Vector<int> & p_bones = Vector<int>(), const Vector<float> & p_weights = Vector<float>(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void
{abstract} +canvas_item_add_mesh(RID p_item, const RID & p_mesh, const Transform2D & p_transform = Transform2D(), const Color & p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void
{abstract} +canvas_item_add_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void
{abstract} +canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_z_index(RID p_item, int p_z) = 0 : void
{abstract} +canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 & p_rect) = 0 : void
{abstract} +canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void
{abstract} +canvas_item_clear(RID p_item) = 0 : void
{abstract} +canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void
{abstract} +canvas_item_set_material(RID p_item, RID p_material) = 0 : void
{abstract} +canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_light_create() = 0 : RID
{abstract} +canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void
{abstract} +canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_scale(RID p_light, float p_scale) = 0 : void
{abstract} +canvas_light_set_transform(RID p_light, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void
{abstract} +canvas_light_set_texture_offset(RID p_light, const Vector2 & p_offset) = 0 : void
{abstract} +canvas_light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_height(RID p_light, float p_height) = 0 : void
{abstract} +canvas_light_set_energy(RID p_light, float p_energy) = 0 : void
{abstract} +canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void
{abstract} +canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void
{abstract} +canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void
{abstract} +canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void
{abstract} +canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void
{abstract} +canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void
{abstract} +canvas_light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void
{abstract} +canvas_light_occluder_create() = 0 : RID
{abstract} +canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void
{abstract} +canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void
{abstract} +canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void
{abstract} +canvas_light_occluder_set_transform(RID p_occluder, const Transform2D & p_xform) = 0 : void
{abstract} +canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void
{abstract} +canvas_occluder_polygon_create() = 0 : RID
{abstract} +canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape, bool p_closed) = 0 : void
{abstract} +canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape) = 0 : void
{abstract} +canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void
{abstract} +black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void
{abstract} +black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void
{abstract} +free(RID p_rid) = 0 : void
{abstract} +request_frame_drawn_callback(Object * p_where, const StringName & p_method, const Variant & p_userdata) = 0 : void
{abstract} +draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void
{abstract} +sync() = 0 : void
{abstract} +has_changed() const = 0 : bool
{abstract} +init() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t
{abstract} +get_video_adapter_name() const = 0 : String
{abstract} +get_video_adapter_vendor() const = 0 : String
{abstract} +get_test_cube() = 0 : RID
+get_test_texture() : RID
+get_white_texture() : RID
+make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID
+mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData & p_mesh_data) : void
+mesh_add_surface_from_planes(RID p_mesh, const PoolVector<Plane> & p_planes) : void
{abstract} +set_boot_image(const Ref<Image> & p_image, const Color & p_color, bool p_scale, bool p_use_filter = true) = 0 : void
{abstract} +set_default_clear_color(const Color & p_color) = 0 : void
{abstract} +set_shader_time_scale(float p_scale) = 0 : void
{abstract} +has_feature(VisualServer::Features p_feature) const = 0 : bool
{abstract} +has_os_feature(const String & p_feature) const = 0 : bool
{abstract} +set_debug_generate_wireframes(bool p_generate) = 0 : void
{abstract} +call_set_use_vsync(bool p_enable) = 0 : void
{abstract} +is_low_end() const = 0 : bool
+is_render_loop_enabled() const : bool
+set_render_loop_enabled(bool p_enabled) : void
+VisualServer() : void
+~VisualServer() : void
+NO_INDEX_ARRAY : enum
+ARRAY_WEIGHTS_SIZE : enum
+CANVAS_ITEM_Z_MIN : enum
+CANVAS_ITEM_Z_MAX : enum
+MAX_GLOW_LEVELS : enum
+MAX_CURSORS : enum
+MATERIAL_RENDER_PRIORITY_MIN : enum
+MATERIAL_RENDER_PRIORITY_MAX : enum
}
abstract "PhysicsDirectBodyState" as C_0001559146041463814963
abstract C_0001559146041463814963 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39{PhysicsDirectBodyState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +get_total_gravity() const = 0 : Vector3
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_center_of_mass() const = 0 : Vector3
{abstract} +get_principal_inertia_axes() const = 0 : Basis
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_inverse_inertia() const = 0 : Vector3
{abstract} +get_inverse_inertia_tensor() const = 0 : Basis
{abstract} +set_linear_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +get_linear_velocity() const = 0 : Vector3
{abstract} +set_angular_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +get_angular_velocity() const = 0 : Vector3
{abstract} +set_transform(const Transform & p_transform) = 0 : void
{abstract} +get_transform() const = 0 : Transform
{abstract} +add_central_force(const Vector3 & p_force) = 0 : void
{abstract} +add_force(const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +add_torque(const Vector3 & p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector3 & p_j) = 0 : void
{abstract} +apply_impulse(const Vector3 & p_pos, const Vector3 & p_j) = 0 : void
{abstract} +apply_torque_impulse(const Vector3 & p_j) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +is_sleeping() const = 0 : bool
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_impulse(int p_contact_idx) const = 0 : float
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_step() const = 0 : real_t
+integrate_forces() : void
{abstract} +get_space_state() = 0 : PhysicsDirectSpaceState *
+PhysicsDirectBodyState() : void
}
abstract "PhysicsDirectSpaceState" as C_0000503002593685351124
abstract C_0000503002593685351124 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143{PhysicsDirectSpaceState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +intersect_point(const Vector3 & p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +intersect_ray(const Vector3 & p_from, const Vector3 & p_to, PhysicsDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool
{abstract} +intersect_shape(const RID & p_shape, const Transform & p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +cast_motion(const RID & p_shape, const Transform & p_xform, const Vector3 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform & p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +rest_info(RID p_shape, const Transform & p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3
+PhysicsDirectSpaceState() : void
}
class "PhysicsDirectSpaceState::ShapeResult" as C_0000493041171271776846
class C_0000493041171271776846 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158{PhysicsDirectSpaceState##ShapeResult}]] {
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163{shape}]]]
}
class "PhysicsDirectSpaceState::RayResult" as C_0000461609734144368587
class C_0000461609734144368587 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168{PhysicsDirectSpaceState##RayResult}]] {
+position : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170{position}]]]
+normal : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171{normal}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175{shape}]]]
}
abstract "PhysicsServer" as C_0001034902024938599899
abstract C_0001034902024938599899 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224{PhysicsServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : PhysicsServer *
{abstract} +shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_set_margin(RID p_shape, real_t p_margin) = 0 : void
{abstract} +shape_get_margin(RID p_shape) const = 0 : real_t
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +space_create() = 0 : RID
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector3>
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +area_create() = 0 : RID
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform & p_transform) = 0 : void
{abstract} +area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_transform(RID p_area) const = 0 : Transform
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void
{abstract} +area_is_ray_pickable(RID p_area) const = 0 : bool
{abstract} +body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void
{abstract} +body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void
{abstract} +body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void
{abstract} +body_get_user_flags(RID p_body) const = 0 : uint32_t
{abstract} +body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float
{abstract} +body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void
{abstract} +body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t
{abstract} +body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +body_set_applied_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector3
{abstract} +body_set_applied_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_get_applied_torque(RID p_body) const = 0 : Vector3
{abstract} +body_add_central_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +body_add_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector3 & p_pos, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector3 & p_axis_velocity) = 0 : void
{abstract} +body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void
{abstract} +body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *
{abstract} +body_test_motion(RID p_body, const Transform & p_from, const Vector3 & p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform & p_transform, bool p_infinite_inertia, Vector3 & r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +soft_body_create(bool p_init_sleeping = false) = 0 : RID
{abstract} +soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void
{abstract} +soft_body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +soft_body_get_space(RID p_body) const = 0 : RID
{abstract} +soft_body_set_mesh(RID p_body, const REF & p_mesh) = 0 : void
{abstract} +soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +soft_body_set_transform(RID p_body, const Transform & p_transform) = 0 : void
{abstract} +soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3
{abstract} +soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +soft_body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void
{abstract} +soft_body_get_simulation_precision(RID p_body) = 0 : int
{abstract} +soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void
{abstract} +soft_body_get_total_mass(RID p_body) = 0 : real_t
{abstract} +soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_linear_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_volume_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void
{abstract} +soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void
{abstract} +soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void
{abstract} +soft_body_get_damping_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void
{abstract} +soft_body_get_drag_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_move_point(RID p_body, int p_point_index, const Vector3 & p_global_position) = 0 : void
{abstract} +soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3
{abstract} +soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3
{abstract} +soft_body_remove_all_pinned_points(RID p_body) = 0 : void
{abstract} +soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void
{abstract} +soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool
{abstract} +joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType
{abstract} +joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void
{abstract} +joint_get_solver_priority(RID p_joint) const = 0 : int
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +joint_create_pin(RID p_body_A, const Vector3 & p_local_A, RID p_body_B, const Vector3 & p_local_B) = 0 : RID
{abstract} +pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void
{abstract} +pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float
{abstract} +pin_joint_set_local_a(RID p_joint, const Vector3 & p_A) = 0 : void
{abstract} +pin_joint_get_local_a(RID p_joint) const = 0 : Vector3
{abstract} +pin_joint_set_local_b(RID p_joint, const Vector3 & p_B) = 0 : void
{abstract} +pin_joint_get_local_b(RID p_joint) const = 0 : Vector3
{abstract} +joint_create_hinge(RID p_body_A, const Transform & p_hinge_A, RID p_body_B, const Transform & p_hinge_B) = 0 : RID
{abstract} +joint_create_hinge_simple(RID p_body_A, const Vector3 & p_pivot_A, const Vector3 & p_axis_A, RID p_body_B, const Vector3 & p_pivot_B, const Vector3 & p_axis_B) = 0 : RID
{abstract} +hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void
{abstract} +hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float
{abstract} +hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void
{abstract} +hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool
{abstract} +joint_create_slider(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void
{abstract} +slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float
{abstract} +joint_create_cone_twist(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void
{abstract} +cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float
{abstract} +joint_create_generic_6dof(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +generic_6dof_joint_set_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void
{abstract} +generic_6dof_joint_get_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float
{abstract} +generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void
{abstract} +generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool
{abstract} +free(RID p_rid) = 0 : void
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +init() = 0 : void
{abstract} +step(float p_step) = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int
+PhysicsServer() : void
+~PhysicsServer() : void
}
abstract "Physics2DDirectBodyState" as C_0002302096389852429221
abstract C_0002302096389852429221 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40{Physics2DDirectBodyState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +get_total_gravity() const = 0 : Vector2
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_inverse_inertia() const = 0 : real_t
{abstract} +set_linear_velocity(const Vector2 & p_velocity) = 0 : void
{abstract} +get_linear_velocity() const = 0 : Vector2
{abstract} +set_angular_velocity(real_t p_velocity) = 0 : void
{abstract} +get_angular_velocity() const = 0 : real_t
{abstract} +set_transform(const Transform2D & p_transform) = 0 : void
{abstract} +get_transform() const = 0 : Transform2D
{abstract} +add_central_force(const Vector2 & p_force) = 0 : void
{abstract} +add_force(const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +add_torque(real_t p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector2 & p_impulse) = 0 : void
{abstract} +apply_torque_impulse(real_t p_torque) = 0 : void
{abstract} +apply_impulse(const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +is_sleeping() const = 0 : bool
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_step() const = 0 : real_t
+integrate_forces() : void
{abstract} +get_space_state() = 0 : Physics2DDirectSpaceState *
+Physics2DDirectBodyState() : void
}
abstract "Physics2DDirectSpaceState" as C_0000236996062289735257
abstract C_0000236996062289735257 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145{Physics2DDirectSpaceState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +intersect_ray(const Vector2 & p_from, const Vector2 & p_to, Physics2DDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +intersect_point(const Vector2 & p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_point_on_canvas(const Vector2 & p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_shape(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +cast_motion(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Vector2 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +rest_info(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
+Physics2DDirectSpaceState() : void
}
class "Physics2DDirectSpaceState::RayResult" as C_0001801355352189289676
class C_0001801355352189289676 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162{Physics2DDirectSpaceState##RayResult}]] {
+position : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164{position}]]]
+normal : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165{normal}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169{shape}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170{metadata}]]]
}
class "Physics2DDirectSpaceState::ShapeResult" as C_0001771770302499309898
class C_0001771770302499309898 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175{Physics2DDirectSpaceState##ShapeResult}]] {
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180{shape}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181{metadata}]]]
}
abstract "Physics2DServer" as C_0001561529841391244418
abstract C_0001561529841391244418 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232{Physics2DServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : Physics2DServer *
{abstract} +line_shape_create() = 0 : RID
{abstract} +ray_shape_create() = 0 : RID
{abstract} +segment_shape_create() = 0 : RID
{abstract} +circle_shape_create() = 0 : RID
{abstract} +rectangle_shape_create() = 0 : RID
{abstract} +capsule_shape_create() = 0 : RID
{abstract} +convex_polygon_shape_create() = 0 : RID
{abstract} +concave_polygon_shape_create() = 0 : RID
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +shape_collide(RID p_shape_A, const Transform2D & p_xform_A, const Vector2 & p_motion_A, RID p_shape_B, const Transform2D & p_xform_B, const Vector2 & p_motion_B, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +space_create() = 0 : RID
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector2>
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +area_create() = 0 : RID
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform2D & p_transform) = 0 : void
{abstract} +area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_transform(RID p_area) const = 0 : Transform2D
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_pickable(RID p_area, bool p_pickable) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +body_create() = 0 : RID
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void
{abstract} +body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant & p_metadata) = 0 : void
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D
{abstract} +body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant
{abstract} +body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void
{abstract} +body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void
{abstract} +body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float
{abstract} +body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant
{abstract} +body_set_applied_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector2
{abstract} +body_set_applied_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_get_applied_torque(RID p_body) const = 0 : float
{abstract} +body_add_central_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +body_add_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector2 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector2 & p_axis_velocity) = 0 : void
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +body_set_pickable(RID p_body, bool p_pickable) = 0 : void
{abstract} +body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *
{abstract} +body_test_motion(RID p_body, const Transform2D & p_from, const Vector2 & p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform2D & p_transform, bool p_infinite_inertia, Vector2 & r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void
{abstract} +joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +pin_joint_create(const Vector2 & p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +groove_joint_create(const Vector2 & p_a_groove1, const Vector2 & p_a_groove2, const Vector2 & p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID
{abstract} +damped_spring_joint_create(const Vector2 & p_anchor_a, const Vector2 & p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void
{abstract} +pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t
{abstract} +damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void
{abstract} +damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t
{abstract} +joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType
{abstract} +free(RID p_rid) = 0 : void
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +init() = 0 : void
{abstract} +step(float p_step) = 0 : void
{abstract} +sync() = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +end_sync() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int
+Physics2DServer() : void
+~Physics2DServer() : void
}
class "TranslationServer" as C_0001485048025194488343
class C_0001485048025194488343 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67{TranslationServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : TranslationServer *
+set_enabled(bool p_enabled) : void
+is_enabled() const : bool
+set_locale(const String & p_locale) : void
+get_locale() const : String
+get_locale_name(const String & p_locale) const : String
+get_loaded_locales() const : Array
+add_translation(const Ref<Translation> & p_translation) : void
+remove_translation(const Ref<Translation> & p_translation) : void
+translate(const StringName & p_message) const : StringName
{static} +get_all_locales() : Vector<String>
{static} +get_all_locale_names() : Vector<String>
{static} +is_locale_valid(const String & p_locale) : bool
{static} +standardize_locale(const String & p_locale) : String
{static} +get_language_code(const String & p_locale) : String
+set_tool_translation(const Ref<Translation> & p_translation) : void
+tool_translate(const StringName & p_message) const : StringName
+setup() : void
+clear() : void
+load_translations() : void
+TranslationServer() : void
}
class "InputMap" as C_0000314051240057057851
class C_0000314051240057057851 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37{InputMap}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : InputMap *
+has_action(const StringName & p_action) const : bool
+get_actions() const : List<StringName>
+add_action(const StringName & p_action, float p_deadzone = 0.5) : void
+erase_action(const StringName & p_action) : void
+action_get_deadzone(const StringName & p_action) : float
+action_set_deadzone(const StringName & p_action, float p_deadzone) : void
+action_add_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_has_event(const StringName & p_action, const Ref<InputEvent> & p_event) : bool
+action_erase_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_erase_events(const StringName & p_action) : void
+get_action_list(const StringName & p_action) : const List<Ref<InputEvent>> *
+event_is_action(const Ref<InputEvent> & p_event, const StringName & p_action) const : bool
+event_get_action_status(const Ref<InputEvent> & p_event, const StringName & p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool
+get_action_map() const : const Map<StringName,InputMap::Action> &
+load_from_globals() : void
+load_default() : void
+InputMap() : void
{static} +ALL_DEVICES : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45{ALL_DEVICES}]]]
}
class "_ResourceLoader" as C_0001197720528033242618
class C_0001197720528033242618 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45{_ResourceLoader}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _ResourceLoader *
+load_interactive(const String & p_path, const String & p_type_hint = "") : Ref<ResourceInteractiveLoader>
+load(const String & p_path, const String & p_type_hint = "", bool p_no_cache = false) : RES
+get_recognized_extensions_for_type(const String & p_type) : PoolVector<String>
+set_abort_on_missing_resources(bool p_abort) : void
+get_dependencies(const String & p_path) : PoolStringArray
+has(const String & p_path) : bool
+has_cached(const String & p_path) : bool
+exists(const String & p_path, const String & p_type_hint = "") : bool
+_ResourceLoader() : void
}
class "_ResourceSaver" as C_0001130773750498288283
class C_0001130773750498288283 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68{_ResourceSaver}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _ResourceSaver *
+save(const String & p_path, const RES & p_resource, _ResourceSaver::SaverFlags p_flags) : Error
+get_recognized_extensions(const RES & p_resource) : PoolVector<String>
+_ResourceSaver() : void
}
class "_OS" as C_0000790752023609648644
class C_0000790752023609648644 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99{_OS}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+global_menu_add_item(const String & p_menu, const String & p_label, const Variant & p_signal, const Variant & p_meta) : void
+global_menu_add_separator(const String & p_menu) : void
+global_menu_remove_item(const String & p_menu, int p_idx) : void
+global_menu_clear(const String & p_menu) : void
+get_mouse_position() const : Point2
+set_window_title(const String & p_title) : void
+set_window_mouse_passthrough(const PoolVector2Array & p_region) : void
+get_mouse_button_state() const : int
+set_clipboard(const String & p_text) : void
+get_clipboard() const : String
+set_video_mode(const Size2 & p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void
+get_video_mode(int p_screen = 0) const : Size2
+is_video_mode_fullscreen(int p_screen = 0) const : bool
+is_video_mode_resizable(int p_screen = 0) const : bool
+get_fullscreen_mode_list(int p_screen = 0) const : Array
+get_video_driver_count() const : int
+get_video_driver_name(_OS::VideoDriver p_driver) const : String
+get_current_video_driver() const : _OS::VideoDriver
+get_audio_driver_count() const : int
+get_audio_driver_name(int p_driver) const : String
+get_connected_midi_inputs() : PoolStringArray
+open_midi_inputs() : void
+close_midi_inputs() : void
+get_screen_count() const : int
+get_current_screen() const : int
+set_current_screen(int p_screen) : void
+get_screen_position(int p_screen = -1) const : Point2
+get_screen_size(int p_screen = -1) const : Size2
+get_screen_dpi(int p_screen = -1) const : int
+get_screen_scale(int p_screen = -1) const : float
+get_screen_max_scale() const : float
+get_window_position() const : Point2
+set_window_position(const Point2 & p_position) : void
+get_max_window_size() const : Size2
+get_min_window_size() const : Size2
+get_window_size() const : Size2
+get_real_window_size() const : Size2
+get_window_safe_area() const : Rect2
+set_max_window_size(const Size2 & p_size) : void
+set_min_window_size(const Size2 & p_size) : void
+set_window_size(const Size2 & p_size) : void
+set_window_fullscreen(bool p_enabled) : void
+is_window_fullscreen() const : bool
+set_window_resizable(bool p_enabled) : void
+is_window_resizable() const : bool
+set_window_minimized(bool p_enabled) : void
+is_window_minimized() const : bool
+set_window_maximized(bool p_enabled) : void
+is_window_maximized() const : bool
+set_window_always_on_top(bool p_enabled) : void
+is_window_always_on_top() const : bool
+is_window_focused() const : bool
+request_attention() : void
+center_window() : void
+move_window_to_foreground() : void
+get_native_handle(_OS::HandleType p_handle_type) : int64_t
+set_borderless_window(bool p_borderless) : void
+get_borderless_window() const : bool
+get_window_per_pixel_transparency_enabled() const : bool
+set_window_per_pixel_transparency_enabled(bool p_enabled) : void
+set_ime_active(const bool p_active) : void
+set_ime_position(const Point2 & p_pos) : void
+get_ime_selection() const : Point2
+get_ime_text() const : String
+native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error
+native_video_is_playing() : bool
+native_video_pause() : void
+native_video_unpause() : void
+native_video_stop() : void
+set_low_processor_usage_mode(bool p_enabled) : void
+is_in_low_processor_usage_mode() const : bool
+set_low_processor_usage_mode_sleep_usec(int p_usec) : void
+get_low_processor_usage_mode_sleep_usec() const : int
+get_executable_path() const : String
+execute(const String & p_path, const Vector<String> & p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int
+kill(int p_pid) : Error
+shell_open(String p_uri) : Error
+get_process_id() const : int
+has_environment(const String & p_var) const : bool
+get_environment(const String & p_var) const : String
+set_environment(const String & p_var, const String & p_value) const : bool
+get_name() const : String
+get_cmdline_args() : Vector<String>
+get_locale() const : String
+get_latin_keyboard_variant() const : String
+keyboard_get_layout_count() const : int
+keyboard_get_current_layout() const : int
+keyboard_set_current_layout(int p_index) : void
+keyboard_get_layout_language(int p_index) const : String
+keyboard_get_layout_name(int p_index) const : String
+get_model_name() const : String
+dump_memory_to_file(const String & p_file) : void
+dump_resources_to_file(const String & p_file) : void
+has_virtual_keyboard() const : bool
+show_virtual_keyboard(const String & p_existing_text = "", bool p_multiline = false) : void
+hide_virtual_keyboard() : void
+get_virtual_keyboard_height() : int
+print_resources_in_use(bool p_short = false) : void
+print_all_resources(const String & p_to_file) : void
+print_all_textures_by_size() : void
+print_resources_by_type(const Vector<String> & p_types) : void
+has_touchscreen_ui_hint() const : bool
+is_debug_build() const : bool
+get_unique_id() const : String
+get_scancode_string(uint32_t p_code) const : String
+is_scancode_unicode(uint32_t p_unicode) const : bool
+find_scancode_from_string(const String & p_code) const : int
+set_use_file_access_save_and_swap(bool p_enable) : void
+set_native_icon(const String & p_filename) : void
+set_icon(const Ref<Image> & p_icon) : void
+get_exit_code() const : int
+set_exit_code(int p_code) : void
+get_date(bool utc) const : Dictionary
+get_time(bool utc) const : Dictionary
+get_datetime(bool utc) const : Dictionary
+get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary
+get_unix_time_from_datetime(Dictionary datetime) const : int64_t
+get_time_zone_info() const : Dictionary
+get_unix_time() const : uint64_t
+get_system_time_secs() const : uint64_t
+get_system_time_msecs() const : uint64_t
+get_static_memory_usage() const : uint64_t
+get_static_memory_peak_usage() const : uint64_t
+get_dynamic_memory_usage() const : uint64_t
+delay_usec(int p_usec) const : void
+delay_msec(int p_msec) const : void
+get_ticks_msec() const : uint32_t
+get_ticks_usec() const : uint64_t
+get_splash_tick_msec() const : uint32_t
+can_use_threads() const : bool
+can_draw() const : bool
+is_userfs_persistent() const : bool
+is_stdout_verbose() const : bool
+get_processor_count() const : int
+get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String
+get_user_data_dir() const : String
+alert(const String & p_alert, const String & p_title = "ALERT!") : void
+set_screen_orientation(_OS::ScreenOrientation p_orientation) : void
+get_screen_orientation() const : _OS::ScreenOrientation
+set_keep_screen_on(bool p_enabled) : void
+is_keep_screen_on() const : bool
+is_ok_left_and_cancel_right() const : bool
+set_thread_name(const String & p_name) : Error
+get_thread_caller_id() const : Thread::ID
+set_use_vsync(bool p_enable) : void
+is_vsync_enabled() const : bool
+set_vsync_via_compositor(bool p_enable) : void
+is_vsync_via_compositor_enabled() const : bool
+get_power_state() : _OS::PowerState
+get_power_seconds_left() : int
+get_power_percent_left() : int
+has_feature(const String & p_feature) const : bool
+request_permission(const String & p_name) : bool
+request_permissions() : bool
+get_granted_permissions() const : Vector<String>
+get_tablet_driver_count() const : int
+get_tablet_driver_name(int p_driver) const : String
+get_current_tablet_driver() const : String
+set_current_tablet_driver(const String & p_driver) : void
{static} +get_singleton() : _OS *
+_OS() : void
}
class "_Geometry" as C_0000897221634691489964
class C_0000897221634691489964 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401{_Geometry}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Geometry *
+build_box_planes(const Vector3 & p_extents) : PoolVector<Plane>
+build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+segment_intersects_segment_2d(const Vector2 & p_from_a, const Vector2 & p_to_a, const Vector2 & p_from_b, const Vector2 & p_to_b) : Variant
+line_intersects_line_2d(const Vector2 & p_from_a, const Vector2 & p_dir_a, const Vector2 & p_from_b, const Vector2 & p_dir_b) : Variant
+get_closest_points_between_segments_2d(const Vector2 & p1, const Vector2 & q1, const Vector2 & p2, const Vector2 & q2) : PoolVector<Vector2>
+get_closest_points_between_segments(const Vector3 & p1, const Vector3 & p2, const Vector3 & q1, const Vector3 & q2) : PoolVector<Vector3>
+get_closest_point_to_segment_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_point_to_segment(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+get_closest_point_to_segment_uncapped_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_point_to_segment_uncapped(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+ray_intersects_triangle(const Vector3 & p_from, const Vector3 & p_dir, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+segment_intersects_triangle(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+point_is_inside_triangle(const Vector2 & s, const Vector2 & a, const Vector2 & b, const Vector2 & c) const : bool
+segment_intersects_sphere(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_sphere_pos, real_t p_sphere_radius) : PoolVector<Vector3>
+segment_intersects_cylinder(const Vector3 & p_from, const Vector3 & p_to, float p_height, float p_radius) : PoolVector<Vector3>
+segment_intersects_convex(const Vector3 & p_from, const Vector3 & p_to, const Vector<Plane> & p_planes) : PoolVector<Vector3>
+is_point_in_circle(const Vector2 & p_point, const Vector2 & p_circle_pos, real_t p_circle_radius) : bool
+segment_intersects_circle(const Vector2 & p_from, const Vector2 & p_to, const Vector2 & p_circle_pos, real_t p_circle_radius) : real_t
+get_uv84_normal_bit(const Vector3 & p_vector) : int
+is_polygon_clockwise(const Vector<Vector2> & p_polygon) : bool
+is_point_in_polygon(const Point2 & p_point, const Vector<Vector2> & p_polygon) : bool
+triangulate_polygon(const Vector<Vector2> & p_polygon) : Vector<int>
+triangulate_delaunay_2d(const Vector<Vector2> & p_points) : Vector<int>
+convex_hull_2d(const Vector<Point2> & p_points) : Vector<Point2>
+clip_polygon(const Vector<Vector3> & p_points, const Plane & p_plane) : Vector<Vector3>
+merge_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+clip_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+intersect_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+exclude_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+clip_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+intersect_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+offset_polygon_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array
+offset_polyline_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array
+make_atlas(const Vector<Size2> & p_rects) : Dictionary
+_Geometry() : void
}
class "_Marshalls" as C_0000135188690773659020
class C_0000135188690773659020 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629{_Marshalls}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Marshalls *
+variant_to_base64(const Variant & p_var, bool p_full_objects = false) : String
+base64_to_variant(const String & p_str, bool p_allow_objects = false) : Variant
+raw_to_base64(const PoolVector<uint8_t> & p_arr) : String
+base64_to_raw(const String & p_str) : PoolVector<uint8_t>
+utf8_to_base64(const String & p_str) : String
+base64_to_utf8(const String & p_str) : String
+_Marshalls() : void
+~_Marshalls() : void
}
class "_Thread" as C_0001150621116588802549
class C_0001150621116588802549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679{_Thread}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+start(Object * p_instance, const StringName & p_method, const Variant & p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error
+get_id() const : String
+is_active() const : bool
+wait_to_finish() : Variant
+_Thread() : void
+~_Thread() : void
}
class "_ClassDB" as C_0001186331261774827872
class C_0001186331261774827872 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713{_ClassDB}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_class_list() const : PoolStringArray
+get_inheriters_from_class(const StringName & p_class) const : PoolStringArray
+get_parent_class(const StringName & p_class) const : StringName
+class_exists(const StringName & p_class) const : bool
+is_parent_class(const StringName & p_class, const StringName & p_inherits) const : bool
+can_instance(const StringName & p_class) const : bool
+instance(const StringName & p_class) const : Variant
+has_signal(StringName p_class, StringName p_signal) const : bool
+get_signal(StringName p_class, StringName p_signal) const : Dictionary
+get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_property(Object * p_object, const StringName & p_property) const : Variant
+set_property(Object * p_object, const StringName & p_property, const Variant & p_value) const : Error
+has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool
+get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_integer_constant_list(const StringName & p_class, bool p_no_inheritance = false) const : PoolStringArray
+has_integer_constant(const StringName & p_class, const StringName & p_name) const : bool
+get_integer_constant(const StringName & p_class, const StringName & p_name) const : int
+get_category(const StringName & p_node) const : StringName
+is_class_enabled(StringName p_class) const : bool
+_ClassDB() : void
+~_ClassDB() : void
}
class "_Engine" as C_0001895218672297528471
class C_0001895218672297528471 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752{_Engine}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Engine *
+set_iterations_per_second(int p_ips) : void
+get_iterations_per_second() const : int
+set_physics_jitter_fix(float p_threshold) : void
+get_physics_jitter_fix() const : float
+get_physics_interpolation_fraction() const : float
+set_target_fps(int p_fps) : void
+get_target_fps() const : int
+get_frames_per_second() const : float
+get_physics_frames() const : uint64_t
+get_idle_frames() const : uint64_t
+get_frames_drawn() : int
+set_time_scale(float p_scale) : void
+get_time_scale() : float
+get_main_loop() const : MainLoop *
+get_version_info() const : Dictionary
+get_author_info() const : Dictionary
+get_copyright_info() const : Array
+get_donor_info() const : Dictionary
+get_license_info() const : Dictionary
+get_license_text() const : String
+is_in_physics_frame() const : bool
+has_singleton(const String & p_name) const : bool
+get_singleton_object(const String & p_name) const : Object *
+set_editor_hint(bool p_enabled) : void
+is_editor_hint() const : bool
+_Engine() : void
}
class "_JSON" as C_0000979065355535690103
class C_0000979065355535690103 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833{_JSON}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _JSON *
+print(const Variant & p_value, const String & p_indent = "", bool p_sort_keys = false) : String
+parse(const String & p_json) : Ref<JSONParseResult>
+_JSON() : void
}
class "_ObjectDebugLock" as C_0000132048052014479231
class C_0000132048052014479231 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45{_ObjectDebugLock}]] {
+_ObjectDebugLock(Object * p_obj) : void
+~_ObjectDebugLock() : void
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47{obj}]]]
}
class "_ObjectSignalDisconnectData" as C_0000115801560197752094
class C_0000115801560197752094 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147{_ObjectSignalDisconnectData}]] {
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149{signal}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150{target}]]]
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151{method}]]]
}
class "UndoRedo" as C_0000096380574950611570
class C_0000096380574950611570 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37{UndoRedo}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_save_class() const : String
+_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+create_action(const String & p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void
+add_do_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_undo_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_do_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_undo_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_do_reference(Object * p_object) : void
+add_undo_reference(Object * p_object) : void
+is_committing_action() const : bool
+commit_action() : void
+redo() : bool
+undo() : bool
+get_current_action_name() const : String
+clear_history(bool p_increase_version = true) : void
+has_undo() : bool
+has_redo() : bool
+get_version() const : uint64_t
+set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void
+set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void
+set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void
+UndoRedo() : void
+~UndoRedo() : void
}
class "_ArrayVariantSortCustom" as C_0000762417759113755306
class C_0000762417759113755306 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298{_ArrayVariantSortCustom}]] {
+operator()(const Variant & p_l, const Variant & p_r) const : bool
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300{obj}]]]
+func : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301{func}]]]
}
C_0000699772808699382057 o- - C_0001357046052919104842 : -count
C_0001531814603945772616 o- - C_0001578539238208480863 : -signal_map
C_0001531814603945772616 o- - C_0000751300156436098886 : -connections
C_0001531814603945772616 o- - C_0000699772808699382057 : -_lock_index
C_0001531814603945772616 o- - C_0000051860595756965531 : -change_receptors
C_0001531814603945772616 - -> C_0000933379568804427881 : -_rc
C_0001531814603945772616 o- - C_0001682405743486361214 : -editor_section_folding
C_0001531814603945772616 - -> C_0001735438654351294549 : -script_instance
C_0001531814603945772616 o- - C_0002025812040042972946 : -script
C_0001531814603945772616 o- - C_0001299121424291583786 : -metadata
C_0001531814603945772616 o- - C_0001858199404643284193 : -_class_name
C_0001531814603945772616 - -> C_0001858199404643284193 : -_class_ptr
C_0001531814603945772616 o- - C_0001357046052919104842 : -instance_binding_count
C_0001531814603945772616 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <.. C_0001778859257025660860 : +<<friend>>
C_0001531814603945772616 <.. C_0000132048052014479231 : +<<friend>>
C_0000219886141561409828 - -+ C_0001531814603945772616
C_0001267214583673362755 - -+ C_0001531814603945772616
C_0001267214583673362755 - -> C_0001531814603945772616 : +source
C_0001267214583673362755 o- - C_0001858199404643284193 : +signal
C_0001267214583673362755 - -> C_0001531814603945772616 : +target
C_0001267214583673362755 o- - C_0001858199404643284193 : +method
C_0000250357724807605097 - -+ C_0001531814603945772616
C_0002064336919270342687 - -> C_0001531814603945772616 : -instances
C_0002064336919270342687 - -> C_0001531814603945772616 : -instance_checks
C_0002064336919270342687 <.. C_0001531814603945772616 : +<<friend>>
C_0000104564426296396960 - -> C_0001858199404643284193 : +classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +resource_base_extensions
C_0000104564426296396960 - -> C_0001858199404643284193 : +compat_classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values_cached
C_0000218299049716973303 o- - C_0001858199404643284193 : -_class_name
C_0000218299049716973303 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000218299049716973303
C_0000933379568804427881 - -> C_0001531814603945772616 : -_ptr
C_0001778859257025660860 o- - C_0001858199404643284193 : -_class_name
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount_init
C_0001778859257025660860 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001778859257025660860
C_0001649884439586022807 - -> C_0001531814603945772616 : -owner
C_0001735438654351294549 <|- - C_0001649884439586022807
C_0000970940027123558604 o- - C_0001858199404643284193 : -_class_name
C_0000970940027123558604 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000970940027123558604
C_0001823345232236209470 o- - C_0001858199404643284193 : +name
C_0001823345232236209470 - -> C_0001531814603945772616 : +ptr
C_0001191393512042218074 o- - C_0001858199404643284193 : -_class_name
C_0001191393512042218074 - -> C_0001191393512042218074 : #singleton
C_0001191393512042218074 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001191393512042218074
C_0000066148521405667716 o- - C_0001858199404643284193 : -_class_name
C_0000066148521405667716 o- - C_0001682405743486361214 : #custom_features
C_0000066148521405667716 - -> C_0000066148521405667716 : #singleton
C_0000066148521405667716 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000066148521405667716
C_0000535376932101028371 o- - C_0001858199404643284193 : -_class_name
C_0000535376932101028371 - -> C_0000535376932101028371 : -singleton
C_0000535376932101028371 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000535376932101028371
C_0001370497546359815893 o- - C_0001858199404643284193 : -_class_name
C_0001370497546359815893 - -> C_0001370497546359815893 : -singleton
C_0001370497546359815893 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001370497546359815893
C_0001701907280759632930 o- - C_0001858199404643284193 : -_class_name
C_0001701907280759632930 - -> C_0001701907280759632930 : #singleton
C_0001701907280759632930 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001701907280759632930
C_0001589464385186808769 o- - C_0001858199404643284193 : -_class_name
C_0001589464385186808769 - -> C_0001589464385186808769 : -singleton
C_0001589464385186808769 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001589464385186808769
C_0001559146041463814963 o- - C_0001858199404643284193 : -_class_name
C_0001559146041463814963 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001559146041463814963
C_0000503002593685351124 o- - C_0001858199404643284193 : -_class_name
C_0000503002593685351124 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000503002593685351124
C_0000493041171271776846 - -+ C_0000503002593685351124
C_0000493041171271776846 - -> C_0001531814603945772616 : +collider
C_0000461609734144368587 - -+ C_0000503002593685351124
C_0000461609734144368587 - -> C_0001531814603945772616 : +collider
C_0001034902024938599899 o- - C_0001858199404643284193 : -_class_name
C_0001034902024938599899 - -> C_0001034902024938599899 : -singleton
C_0001034902024938599899 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001034902024938599899
C_0002302096389852429221 o- - C_0001858199404643284193 : -_class_name
C_0002302096389852429221 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0002302096389852429221
C_0000236996062289735257 o- - C_0001858199404643284193 : -_class_name
C_0000236996062289735257 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000236996062289735257
C_0001801355352189289676 - -+ C_0000236996062289735257
C_0001801355352189289676 - -> C_0001531814603945772616 : +collider
C_0001771770302499309898 - -+ C_0000236996062289735257
C_0001771770302499309898 - -> C_0001531814603945772616 : +collider
C_0001561529841391244418 o- - C_0001858199404643284193 : -_class_name
C_0001561529841391244418 - -> C_0001561529841391244418 : -singleton
C_0001561529841391244418 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001561529841391244418
C_0001485048025194488343 o- - C_0001858199404643284193 : -_class_name
C_0001485048025194488343 - -> C_0001485048025194488343 : -singleton
C_0001485048025194488343 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001485048025194488343
C_0000314051240057057851 o- - C_0001858199404643284193 : -_class_name
C_0000314051240057057851 - -> C_0000314051240057057851 : -singleton
C_0000314051240057057851 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000314051240057057851
C_0001197720528033242618 o- - C_0001858199404643284193 : -_class_name
C_0001197720528033242618 - -> C_0001197720528033242618 : #singleton
C_0001197720528033242618 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001197720528033242618
C_0001130773750498288283 o- - C_0001858199404643284193 : -_class_name
C_0001130773750498288283 - -> C_0001130773750498288283 : #singleton
C_0001130773750498288283 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001130773750498288283
C_0000790752023609648644 o- - C_0001858199404643284193 : -_class_name
C_0000790752023609648644 - -> C_0000790752023609648644 : #singleton
C_0000790752023609648644 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000790752023609648644
C_0000897221634691489964 o- - C_0001858199404643284193 : -_class_name
C_0000897221634691489964 - -> C_0000897221634691489964 : -singleton
C_0000897221634691489964 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000897221634691489964
C_0000135188690773659020 o- - C_0001858199404643284193 : -_class_name
C_0000135188690773659020 - -> C_0000135188690773659020 : -singleton
C_0000135188690773659020 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000135188690773659020
C_0001150621116588802549 o- - C_0001858199404643284193 : -_class_name
C_0001150621116588802549 - -> C_0001531814603945772616 : #target_instance
C_0001150621116588802549 o- - C_0001858199404643284193 : #target_method
C_0001150621116588802549 <.. C_0000104564426296396960 : +<<friend>>
C_0001778859257025660860 <|- - C_0001150621116588802549
C_0001186331261774827872 o- - C_0001858199404643284193 : -_class_name
C_0001186331261774827872 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001186331261774827872
C_0001895218672297528471 o- - C_0001858199404643284193 : -_class_name
C_0001895218672297528471 - -> C_0001895218672297528471 : #singleton
C_0001895218672297528471 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001895218672297528471
C_0000979065355535690103 o- - C_0001858199404643284193 : -_class_name
C_0000979065355535690103 - -> C_0000979065355535690103 : #singleton
C_0000979065355535690103 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000979065355535690103
C_0000132048052014479231 - -> C_0001531814603945772616 : +obj
C_0000115801560197752094 o- - C_0001858199404643284193 : +signal
C_0000115801560197752094 - -> C_0001531814603945772616 : +target
C_0000115801560197752094 o- - C_0001858199404643284193 : +method
C_0000096380574950611570 o- - C_0001858199404643284193 : -_class_name
C_0000096380574950611570 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000096380574950611570
C_0000762417759113755306 - -> C_0001531814603945772616 : +obj
C_0000762417759113755306 o- - C_0001858199404643284193 : +func

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>