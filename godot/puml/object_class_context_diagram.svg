<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="9177px" preserveAspectRatio="none" style="width:25715px;height:9177px;" version="1.1" viewBox="0 0 25715 9177" width="25715px" zoomAndPan="magnify"><defs><filter height="300%" id="f1trm0xwgb9o5h" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacingAndGlyphs" textLength="253" x="12735" y="16.708">Godot Object class hierarchy</text><!--MD5=[9ddbd22804041489fb45650d196dcfe6]
class C_0001357046052919104842--><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="48" id="C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.5;" width="166" x="23444.55" y="8250.4531"/><ellipse cx="23459.55" cy="8266.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23462.5188,8272.0938 Q23461.9406,8272.3906 23461.3,8272.5313 Q23460.6594,8272.6875 23459.9563,8272.6875 Q23457.4563,8272.6875 23456.1281,8271.0469 Q23454.8156,8269.3906 23454.8156,8266.2656 Q23454.8156,8263.1406 23456.1281,8261.4844 Q23457.4563,8259.8281 23459.9563,8259.8281 Q23460.6594,8259.8281 23461.3,8259.9844 Q23461.9563,8260.1406 23462.5188,8260.4375 L23462.5188,8263.1563 Q23461.8938,8262.5781 23461.3,8262.3125 Q23460.7063,8262.0313 23460.0813,8262.0313 Q23458.7375,8262.0313 23458.05,8263.1094 Q23457.3625,8264.1719 23457.3625,8266.2656 Q23457.3625,8268.3594 23458.05,8269.4375 Q23458.7375,8270.5 23460.0813,8270.5 Q23460.7063,8270.5 23461.3,8270.2344 Q23461.8938,8269.9531 23462.5188,8269.375 L23462.5188,8272.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="79" x="23473.55" y="8270.6074">SafeNumeric</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="53" x="23560.55" y="8247.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="51" x="23561.55" y="8259.5918">uint32_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23445.55" x2="23609.55" y1="8282.4531" y2="8282.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="23445.55" x2="23609.55" y1="8290.4531" y2="8290.4531"/><!--MD5=[0248b83d95ca29d05ff879ba22e97aa0]
class C_0000699772808699382057--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" target="_top" title="SafeRefCount" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164" xlink:show="new" xlink:title="SafeRefCount" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="124.8281" id="C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="23527.55" y="4879.4531"/><ellipse cx="23581.8" cy="4895.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23584.7688,4901.0938 Q23584.1906,4901.3906 23583.55,4901.5313 Q23582.9094,4901.6875 23582.2063,4901.6875 Q23579.7063,4901.6875 23578.3781,4900.0469 Q23577.0656,4898.3906 23577.0656,4895.2656 Q23577.0656,4892.1406 23578.3781,4890.4844 Q23579.7063,4888.8281 23582.2063,4888.8281 Q23582.9094,4888.8281 23583.55,4888.9844 Q23584.2063,4889.1406 23584.7688,4889.4375 L23584.7688,4892.1563 Q23584.1438,4891.5781 23583.55,4891.3125 Q23582.9563,4891.0313 23582.3313,4891.0313 Q23580.9875,4891.0313 23580.3,4892.1094 Q23579.6125,4893.1719 23579.6125,4895.2656 Q23579.6125,4897.3594 23580.3,4898.4375 Q23580.9875,4899.5 23582.3313,4899.5 Q23582.9563,4899.5 23583.55,4899.2344 Q23584.1438,4898.9531 23584.7688,4898.375 L23584.7688,4901.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="23602.3" y="4899.6074">SafeRefCount</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23528.55" x2="23728.55" y1="4911.4531" y2="4911.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="23528.55" x2="23728.55" y1="4919.4531" y2="4919.4531"/><ellipse cx="23538.55" cy="4930.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="23547.55" y="4933.6636">ref() : bool</text><ellipse cx="23538.55" cy="4943.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="23547.55" y="4946.4683">refval() : uint32_t</text><ellipse cx="23538.55" cy="4956.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="23547.55" y="4959.2729">unref() : bool</text><ellipse cx="23538.55" cy="4968.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="23547.55" y="4972.0776">unrefval() : uint32_t</text><ellipse cx="23538.55" cy="4981.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="23547.55" y="4984.8823">get() const : uint32_t</text><ellipse cx="23538.55" cy="4994.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="23547.55" y="4997.687">init(uint32_t p_value = 1) : void</text></a><!--MD5=[c9ab0454be9bc9dd8cd0824f6bdde71d]
class C_0001299121424291583786--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" target="_top" title="Dictionary" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42" xlink:show="new" xlink:title="Dictionary" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="393.7266" id="C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="24507.05" y="1623.4531"/><ellipse cx="24680.3" cy="1639.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M24683.2688,1645.0938 Q24682.6906,1645.3906 24682.05,1645.5313 Q24681.4094,1645.6875 24680.7063,1645.6875 Q24678.2063,1645.6875 24676.8781,1644.0469 Q24675.5656,1642.3906 24675.5656,1639.2656 Q24675.5656,1636.1406 24676.8781,1634.4844 Q24678.2063,1632.8281 24680.7063,1632.8281 Q24681.4094,1632.8281 24682.05,1632.9844 Q24682.7063,1633.1406 24683.2688,1633.4375 L24683.2688,1636.1563 Q24682.6438,1635.5781 24682.05,1635.3125 Q24681.4563,1635.0313 24680.8313,1635.0313 Q24679.4875,1635.0313 24678.8,1636.1094 Q24678.1125,1637.1719 24678.1125,1639.2656 Q24678.1125,1641.3594 24678.8,1642.4375 Q24679.4875,1643.5 24680.8313,1643.5 Q24681.4563,1643.5 24682.05,1643.2344 Q24682.6438,1642.9531 24683.2688,1642.375 L24683.2688,1645.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="24700.8" y="1643.6074">Dictionary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24508.05" x2="24923.05" y1="1655.4531" y2="1655.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="24508.05" x2="24923.05" y1="1663.4531" y2="1663.4531"/><ellipse cx="24518.05" cy="1674.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="24527.05" y="1677.6636">get_key_list(List&lt;Variant&gt; * p_keys) const : void</text><ellipse cx="24518.05" cy="1687.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="24527.05" y="1690.4683">get_key_at_index(int p_index) const : Variant</text><ellipse cx="24518.05" cy="1700.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="24527.05" y="1703.2729">get_value_at_index(int p_index) const : Variant</text><ellipse cx="24518.05" cy="1712.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="24527.05" y="1716.0776">operator[](const Variant &amp; p_key) : Variant &amp;</text><ellipse cx="24518.05" cy="1725.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="24527.05" y="1728.8823">operator[](const Variant &amp; p_key) const : const Variant &amp;</text><ellipse cx="24518.05" cy="1738.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="24527.05" y="1741.687">getptr(const Variant &amp; p_key) const : const Variant *</text><ellipse cx="24518.05" cy="1751.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="24527.05" y="1754.4917">getptr(const Variant &amp; p_key) : Variant *</text><ellipse cx="24518.05" cy="1764.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="24527.05" y="1767.2964">get_valid(const Variant &amp; p_key) const : Variant</text><ellipse cx="24518.05" cy="1776.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="24527.05" y="1780.1011">get(const Variant &amp; p_key, const Variant &amp; p_default) const : Variant</text><ellipse cx="24518.05" cy="1789.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="24527.05" y="1792.9058">size() const : int</text><ellipse cx="24518.05" cy="1802.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="24527.05" y="1805.7104">empty() const : bool</text><ellipse cx="24518.05" cy="1815.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="24527.05" y="1818.5151">clear() : void</text><ellipse cx="24518.05" cy="1828.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="24527.05" y="1831.3198">has(const Variant &amp; p_key) const : bool</text><ellipse cx="24518.05" cy="1840.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="24527.05" y="1844.1245">has_all(const Array &amp; p_keys) const : bool</text><ellipse cx="24518.05" cy="1853.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="24527.05" y="1856.9292">erase(const Variant &amp; p_key) : bool</text><ellipse cx="24518.05" cy="1866.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="24527.05" y="1869.7339">operator==(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="24518.05" cy="1879.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="24527.05" y="1882.5386">operator!=(const Dictionary &amp; p_dictionary) const : bool</text><ellipse cx="24518.05" cy="1892.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="24527.05" y="1895.3433">hash() const : uint32_t</text><ellipse cx="24518.05" cy="1904.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="24527.05" y="1908.1479">operator=(const Dictionary &amp; p_dictionary) : void</text><ellipse cx="24518.05" cy="1917.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="24527.05" y="1920.9526">next(const Variant * p_key = __null) const : const Variant *</text><ellipse cx="24518.05" cy="1930.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24527.05" y="1933.7573">keys() const : Array</text><ellipse cx="24518.05" cy="1943.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="24527.05" y="1946.562">values() const : Array</text><ellipse cx="24518.05" cy="1956.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="24527.05" y="1959.3667">duplicate(bool p_deep = false) const : Dictionary</text><ellipse cx="24518.05" cy="1968.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="24527.05" y="1972.1714">id() const : const void *</text><ellipse cx="24518.05" cy="1981.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="24527.05" y="1984.9761">Dictionary(const Dictionary &amp; p_from) : void</text><ellipse cx="24518.05" cy="1994.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="24527.05" y="1997.7808">Dictionary() : void</text><ellipse cx="24518.05" cy="2007.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="24527.05" y="2010.5854">~Dictionary() : void</text></a><!--MD5=[bdf481e0258441d9ea4c4f618bd16c94]
class C_0001858199404643284193--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" target="_top" title="StringName" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44" xlink:show="new" xlink:title="StringName" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="304.0938" id="C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.5;" width="346" x="14636.55" y="8861.9531"/><ellipse cx="14768.8" cy="8877.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14771.7688,8883.5938 Q14771.1906,8883.8906 14770.55,8884.0313 Q14769.9094,8884.1875 14769.2063,8884.1875 Q14766.7063,8884.1875 14765.3781,8882.5469 Q14764.0656,8880.8906 14764.0656,8877.7656 Q14764.0656,8874.6406 14765.3781,8872.9844 Q14766.7063,8871.3281 14769.2063,8871.3281 Q14769.9094,8871.3281 14770.55,8871.4844 Q14771.2063,8871.6406 14771.7688,8871.9375 L14771.7688,8874.6563 Q14771.1438,8874.0781 14770.55,8873.8125 Q14769.9563,8873.5313 14769.3313,8873.5313 Q14767.9875,8873.5313 14767.3,8874.6094 Q14766.6125,8875.6719 14766.6125,8877.7656 Q14766.6125,8879.8594 14767.3,8880.9375 Q14767.9875,8882 14769.3313,8882 Q14769.9563,8882 14770.55,8881.7344 Q14771.1438,8881.4531 14771.7688,8880.875 L14771.7688,8883.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="14789.3" y="8882.1074">StringName</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14637.55" x2="14981.55" y1="8893.9531" y2="8893.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="14637.55" x2="14981.55" y1="8901.9531" y2="8901.9531"/><ellipse cx="14647.55" cy="8912.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="14656.55" y="8916.1636">operator const void *() const : const void *</text><ellipse cx="14647.55" cy="8925.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="14656.55" y="8928.9683">operator==(const String &amp; p_name) const : bool</text><ellipse cx="14647.55" cy="8938.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="14656.55" y="8941.7729">operator==(const char * p_name) const : bool</text><ellipse cx="14647.55" cy="8951.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="14656.55" y="8954.5776">operator!=(const String &amp; p_name) const : bool</text><ellipse cx="14647.55" cy="8964.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="14656.55" y="8967.3823">operator&lt;(const StringName &amp; p_name) const : bool</text><ellipse cx="14647.55" cy="8976.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="14656.55" y="8980.187">operator==(const StringName &amp; p_name) const : bool</text><ellipse cx="14647.55" cy="8989.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="14656.55" y="8992.9917">hash() const : uint32_t</text><ellipse cx="14647.55" cy="9002.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="14656.55" y="9005.7964">data_unique_pointer() const : const void *</text><ellipse cx="14647.55" cy="9015.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="14656.55" y="9018.6011">operator!=(const StringName &amp; p_name) const : bool</text><ellipse cx="14647.55" cy="9028.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="14656.55" y="9031.4058">operator String() const : String</text><ellipse cx="14647.55" cy="9041" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="245" x="14656.55" y="9044.2104">search(const char * p_name) : StringName</text><ellipse cx="14647.55" cy="9053.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="14656.55" y="9057.0151">search(const CharType * p_name) : StringName</text><ellipse cx="14647.55" cy="9066.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="14656.55" y="9069.8198">search(const String &amp; p_name) : StringName</text><ellipse cx="14647.55" cy="9079.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="14656.55" y="9082.6245">operator=(const StringName &amp; p_name) : void</text><ellipse cx="14647.55" cy="9092.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="14656.55" y="9095.4292">StringName(const char * p_name) : void</text><ellipse cx="14647.55" cy="9105.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="14656.55" y="9108.2339">StringName(const StringName &amp; p_name) : void</text><ellipse cx="14647.55" cy="9117.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="14656.55" y="9121.0386">StringName(const String &amp; p_name) : void</text><ellipse cx="14647.55" cy="9130.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="14656.55" y="9133.8433">StringName(const StaticCString &amp; p_static_string) : void</text><ellipse cx="14647.55" cy="9143.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="14656.55" y="9146.6479">StringName() : void</text><ellipse cx="14647.55" cy="9156.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="14656.55" y="9159.4526">~StringName() : void</text></a><!--MD5=[5ff974ea4457aef713dc6a6e7de5ffac]
class C_0002025812040042972946--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" target="_top" title="RefPtr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41" xlink:show="new" xlink:title="RefPtr" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="176.0469" id="C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.5;" width="302" x="7979.55" y="1732.4531"/><ellipse cx="8107.3" cy="1748.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8110.2688,1754.0938 Q8109.6906,1754.3906 8109.05,1754.5313 Q8108.4094,1754.6875 8107.7063,1754.6875 Q8105.2063,1754.6875 8103.8781,1753.0469 Q8102.5656,1751.3906 8102.5656,1748.2656 Q8102.5656,1745.1406 8103.8781,1743.4844 Q8105.2063,1741.8281 8107.7063,1741.8281 Q8108.4094,1741.8281 8109.05,1741.9844 Q8109.7063,1742.1406 8110.2688,1742.4375 L8110.2688,1745.1563 Q8109.6438,1744.5781 8109.05,1744.3125 Q8108.4563,1744.0313 8107.8313,1744.0313 Q8106.4875,1744.0313 8105.8,1745.1094 Q8105.1125,1746.1719 8105.1125,1748.2656 Q8105.1125,1750.3594 8105.8,1751.4375 Q8106.4875,1752.5 8107.8313,1752.5 Q8108.4563,1752.5 8109.05,1752.2344 Q8109.6438,1751.9531 8110.2688,1751.375 L8110.2688,1754.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="8127.8" y="1752.6074">RefPtr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7980.55" x2="8280.55" y1="1764.4531" y2="1764.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7980.55" x2="8280.55" y1="1772.4531" y2="1772.4531"/><ellipse cx="7990.55" cy="1783.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="7999.55" y="1786.6636">is_null() const : bool</text><ellipse cx="7990.55" cy="1796.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="7999.55" y="1799.4683">operator=(const RefPtr &amp; p_other) : void</text><ellipse cx="7990.55" cy="1809.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="7999.55" y="1812.2729">operator==(const RefPtr &amp; p_other) const : bool</text><ellipse cx="7990.55" cy="1821.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="7999.55" y="1825.0776">operator!=(const RefPtr &amp; p_other) const : bool</text><ellipse cx="7990.55" cy="1834.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="7999.55" y="1837.8823">get_rid() const : RID</text><ellipse cx="7990.55" cy="1847.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="7999.55" y="1850.687">unref() : void</text><ellipse cx="7990.55" cy="1860.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="7999.55" y="1863.4917">get_data() const : void *</text><ellipse cx="7990.55" cy="1873.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="7999.55" y="1876.2964">RefPtr(const RefPtr &amp; p_other) : void</text><ellipse cx="7990.55" cy="1885.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7999.55" y="1889.1011">RefPtr() : void</text><ellipse cx="7990.55" cy="1898.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="7999.55" y="1901.9058">~RefPtr() : void</text></a><!--MD5=[fcb6dc9edc5e54eb9e8bfa0c33478799]
class C_0000751300156436098886--><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="48" id="C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.5;" width="175" x="8317.05" y="1796.4531"/><ellipse cx="8332.05" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8335.0188,1818.0938 Q8334.4406,1818.3906 8333.8,1818.5313 Q8333.1594,1818.6875 8332.4563,1818.6875 Q8329.9563,1818.6875 8328.6281,1817.0469 Q8327.3156,1815.3906 8327.3156,1812.2656 Q8327.3156,1809.1406 8328.6281,1807.4844 Q8329.9563,1805.8281 8332.4563,1805.8281 Q8333.1594,1805.8281 8333.8,1805.9844 Q8334.4563,1806.1406 8335.0188,1806.4375 L8335.0188,1809.1563 Q8334.3938,1808.5781 8333.8,1808.3125 Q8333.2063,1808.0313 8332.5813,1808.0313 Q8331.2375,1808.0313 8330.55,1809.1094 Q8329.8625,1810.1719 8329.8625,1812.2656 Q8329.8625,1814.3594 8330.55,1815.4375 Q8331.2375,1816.5 8332.5813,1816.5 Q8333.2063,1816.5 8333.8,1816.2344 Q8334.3938,1815.9531 8335.0188,1815.375 L8335.0188,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="8346.05" y="1816.6074">List</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="120" x="8375.05" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="118" x="8376.05" y="1805.5918">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8318.05" x2="8491.05" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8318.05" x2="8491.05" y1="1836.4531" y2="1836.4531"/><!--MD5=[6bf78f0ec114838316d8adbe773b0c0e]
class C_0001682405743486361214--><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="48" id="C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.5;" width="94" x="11478.55" y="4917.9531"/><ellipse cx="11493.55" cy="4933.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11496.5188,4939.5938 Q11495.9406,4939.8906 11495.3,4940.0313 Q11494.6594,4940.1875 11493.9563,4940.1875 Q11491.4563,4940.1875 11490.1281,4938.5469 Q11488.8156,4936.8906 11488.8156,4933.7656 Q11488.8156,4930.6406 11490.1281,4928.9844 Q11491.4563,4927.3281 11493.9563,4927.3281 Q11494.6594,4927.3281 11495.3,4927.4844 Q11495.9563,4927.6406 11496.5188,4927.9375 L11496.5188,4930.6563 Q11495.8938,4930.0781 11495.3,4929.8125 Q11494.7063,4929.5313 11494.0813,4929.5313 Q11492.7375,4929.5313 11492.05,4930.6094 Q11491.3625,4931.6719 11491.3625,4933.7656 Q11491.3625,4935.8594 11492.05,4936.9375 Q11492.7375,4938 11494.0813,4938 Q11494.7063,4938 11495.3,4937.7344 Q11495.8938,4937.4531 11496.5188,4936.875 L11496.5188,4939.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="11507.55" y="4938.1074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="39" x="11536.55" y="4914.9531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="37" x="11537.55" y="4927.0918">String</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11479.55" x2="11571.55" y1="4949.9531" y2="4949.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="11479.55" x2="11571.55" y1="4957.9531" y2="4957.9531"/><!--MD5=[7554e1c91c178cfd46cd5992944992da]
class C_0001578539238208480863--><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="48" id="C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.5;" width="256" x="8527.55" y="1796.4531"/><ellipse cx="8542.55" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8545.5188,1818.0938 Q8544.9406,1818.3906 8544.3,1818.5313 Q8543.6594,1818.6875 8542.9563,1818.6875 Q8540.4563,1818.6875 8539.1281,1817.0469 Q8537.8156,1815.3906 8537.8156,1812.2656 Q8537.8156,1809.1406 8539.1281,1807.4844 Q8540.4563,1805.8281 8542.9563,1805.8281 Q8543.6594,1805.8281 8544.3,1805.9844 Q8544.9563,1806.1406 8545.5188,1806.4375 L8545.5188,1809.1563 Q8544.8938,1808.5781 8544.3,1808.3125 Q8543.7063,1808.0313 8543.0813,1808.0313 Q8541.7375,1808.0313 8541.05,1809.1094 Q8540.3625,1810.1719 8540.3625,1812.2656 Q8540.3625,1814.3594 8541.05,1815.4375 Q8541.7375,1816.5 8543.0813,1816.5 Q8543.7063,1816.5 8544.3,1816.2344 Q8544.8938,1815.9531 8545.5188,1815.375 L8545.5188,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="8556.55" y="1816.6074">HashMap</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="164" x="8622.55" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="162" x="8623.55" y="1805.5918">StringName,Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8528.55" x2="8782.55" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8528.55" x2="8782.55" y1="1836.4531" y2="1836.4531"/><!--MD5=[75bc4a0739afdfacd2c3e3c13cd7e181]
class C_0000051860595756965531--><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="48" id="C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.5;" width="106" x="8818.55" y="1796.4531"/><ellipse cx="8833.55" cy="1812.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8836.5188,1818.0938 Q8835.9406,1818.3906 8835.3,1818.5313 Q8834.6594,1818.6875 8833.9563,1818.6875 Q8831.4563,1818.6875 8830.1281,1817.0469 Q8828.8156,1815.3906 8828.8156,1812.2656 Q8828.8156,1809.1406 8830.1281,1807.4844 Q8831.4563,1805.8281 8833.9563,1805.8281 Q8834.6594,1805.8281 8835.3,1805.9844 Q8835.9563,1806.1406 8836.5188,1806.4375 L8836.5188,1809.1563 Q8835.8938,1808.5781 8835.3,1808.3125 Q8834.7063,1808.0313 8834.0813,1808.0313 Q8832.7375,1808.0313 8832.05,1809.1094 Q8831.3625,1810.1719 8831.3625,1812.2656 Q8831.3625,1814.3594 8832.05,1815.4375 Q8832.7375,1816.5 8834.0813,1816.5 Q8834.7063,1816.5 8835.3,1816.2344 Q8835.8938,1815.9531 8836.5188,1815.375 L8836.5188,1818.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="21" x="8847.55" y="1816.6074">Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="51" x="8876.55" y="1793.4531"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="49" x="8877.55" y="1805.5918">Object *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8819.55" x2="8923.55" y1="1828.4531" y2="1828.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8819.55" x2="8923.55" y1="1836.4531" y2="1836.4531"/><!--MD5=[f0802071db4c55ed48c8eca4075aaca6]
class C_0001531814603945772616--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" target="_top" title="Object" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408" xlink:show="new" xlink:title="Object" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="1162.0078" id="C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.5;" width="1344" x="11605.55" y="281.9531"/><ellipse cx="12253.3" cy="297.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12256.2688,303.5938 Q12255.6906,303.8906 12255.05,304.0313 Q12254.4094,304.1875 12253.7063,304.1875 Q12251.2063,304.1875 12249.8781,302.5469 Q12248.5656,300.8906 12248.5656,297.7656 Q12248.5656,294.6406 12249.8781,292.9844 Q12251.2063,291.3281 12253.7063,291.3281 Q12254.4094,291.3281 12255.05,291.4844 Q12255.7063,291.6406 12256.2688,291.9375 L12256.2688,294.6563 Q12255.6438,294.0781 12255.05,293.8125 Q12254.4563,293.5313 12253.8313,293.5313 Q12252.4875,293.5313 12251.8,294.6094 Q12251.1125,295.6719 12251.1125,297.7656 Q12251.1125,299.8594 12251.8,300.9375 Q12252.4875,302 12253.8313,302 Q12254.4563,302 12255.05,301.7344 Q12255.6438,301.4531 12256.2688,300.875 L12256.2688,303.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="12273.8" y="302.1074">Object</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11606.55" x2="12948.55" y1="313.9531" y2="313.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11611.55" y="319.9531"/><ellipse cx="11616.55" cy="324.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" target="_top" title="_is_queued_for_deletion" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745" xlink:show="new" xlink:title="_is_queued_for_deletion" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="11625.55" y="328.1636">_is_queued_for_deletion : bool</text></a><ellipse cx="11616.55" cy="337.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="11625.55" y="340.9683">NOTIFICATION_POSTINITIALIZE : enum</text><ellipse cx="11616.55" cy="350.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="11625.55" y="353.7729">NOTIFICATION_PREDELETE : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11606.55" x2="12948.55" y1="360.3672" y2="360.3672"/><ellipse cx="11616.55" cy="371.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="11625.55" y="374.5776">initialize_class() : void</text><ellipse cx="11616.55" cy="384.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="215" x="11625.55" y="387.3823">register_custom_data_to_otdb() : void</text><ellipse cx="11616.55" cy="396.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="11625.55" y="400.187">_change_notify(const char * p_property = "") : void</text><ellipse cx="11616.55" cy="409.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="11625.55" y="412.9917">get_class_ptr_static() : void *</text><ellipse cx="11616.55" cy="422.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="11625.55" y="425.7964">_use_rc() : ObjectRC *</text><ellipse cx="11616.55" cy="435.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="11625.55" y="438.6011">_is_gpl_reversed() const : bool</text><ellipse cx="11616.55" cy="448.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="11625.55" y="451.4058">get_instance_id() const : ObjectID</text><ellipse cx="11616.55" cy="461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="11625.55" y="464.2104">add_change_receptor(Object * p_receptor) : void</text><ellipse cx="11616.55" cy="473.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="11625.55" y="477.0151">remove_change_receptor(Object * p_receptor) : void</text><ellipse cx="11616.55" cy="486.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="11625.55" y="489.8198">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="11616.55" cy="499.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="11625.55" y="502.6245">get_class_static() : String</text><ellipse cx="11616.55" cy="512.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="11625.55" y="515.4292">get_parent_class_static() : String</text><ellipse cx="11616.55" cy="525.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="11625.55" y="528.2339">get_category_static() : String</text><ellipse cx="11616.55" cy="537.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="11625.55" y="541.0386">get_class() const : String</text><ellipse cx="11616.55" cy="550.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="11625.55" y="553.8433">get_save_class() const : String</text><ellipse cx="11616.55" cy="563.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="11625.55" y="566.6479">is_class(const String &amp; p_class) const : bool</text><ellipse cx="11616.55" cy="576.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="11625.55" y="579.4526">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="11616.55" cy="589.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="11625.55" y="592.2573">get_class_name() const : const StringName &amp;</text><ellipse cx="11616.55" cy="601.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="502" x="11625.55" y="605.062">set(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="11616.55" cy="614.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="11625.55" y="617.8667">get(const StringName &amp; p_name, bool * r_valid = __null) const : Variant</text><ellipse cx="11616.55" cy="627.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="613" x="11625.55" y="630.6714">set_indexed(const Vector&lt;StringName&gt; &amp; p_names, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="11616.55" cy="640.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="521" x="11625.55" y="643.4761">get_indexed(const Vector&lt;StringName&gt; &amp; p_names, bool * r_valid = __null) const : Variant</text><ellipse cx="11616.55" cy="653.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="11625.55" y="656.2808">get_property_list(List&lt;PropertyInfo&gt; * p_list, bool p_reversed = false) const : void</text><ellipse cx="11616.55" cy="665.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="11625.55" y="669.0854">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="11616.55" cy="678.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="11625.55" y="681.8901">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="11616.55" cy="691.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="11625.55" y="694.6948">callv(const StringName &amp; p_method, const Array &amp; p_args) : Variant</text><ellipse cx="11616.55" cy="704.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="11625.55" y="707.4995">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="11616.55" cy="717.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="11625.55" y="720.3042">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="11616.55" cy="729.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="11625.55" y="733.1089">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="11616.55" cy="742.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1269" x="11625.55" y="745.9136">call(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="11616.55" cy="755.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1312" x="11625.55" y="758.7183">call_multilevel(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="11616.55" cy="768.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="11625.55" y="771.5229">notification(int p_notification, bool p_reversed = false) : void</text><ellipse cx="11616.55" cy="781.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="11625.55" y="784.3276">to_string() : String</text><ellipse cx="11616.55" cy="793.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="11625.55" y="797.1323">getvar(const Variant &amp; p_key, bool * r_valid = __null) const : Variant</text><ellipse cx="11616.55" cy="806.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="11625.55" y="809.937">setvar(const Variant &amp; p_key, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="11616.55" cy="819.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="11625.55" y="822.7417">set_script(const RefPtr &amp; p_script) : void</text><ellipse cx="11616.55" cy="832.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="11625.55" y="835.5464">get_script() const : RefPtr</text><ellipse cx="11616.55" cy="845.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="11625.55" y="848.3511">has_meta(const String &amp; p_name) const : bool</text><ellipse cx="11616.55" cy="857.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="11625.55" y="861.1558">set_meta(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="11616.55" cy="870.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="11625.55" y="873.9604">remove_meta(const String &amp; p_name) : void</text><ellipse cx="11616.55" cy="883.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="11625.55" y="886.7651">get_meta(const String &amp; p_name) const : Variant</text><ellipse cx="11616.55" cy="896.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="11625.55" y="899.5698">get_meta_list(List&lt;String&gt; * p_list) const : void</text><ellipse cx="11616.55" cy="909.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="11625.55" y="912.3745">set_edited(bool p_edited) : void</text><ellipse cx="11616.55" cy="921.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="11625.55" y="925.1792">is_edited() const : bool</text><ellipse cx="11616.55" cy="934.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="11625.55" y="937.9839">get_edited_version() const : uint32_t</text><ellipse cx="11616.55" cy="947.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="11625.55" y="950.7886">set_script_instance(ScriptInstance * p_instance) : void</text><ellipse cx="11616.55" cy="960.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="11625.55" y="963.5933">get_script_instance() const : ScriptInstance *</text><ellipse cx="11616.55" cy="973.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="476" x="11625.55" y="976.3979">set_script_and_instance(const RefPtr &amp; p_script, ScriptInstance * p_instance) : void</text><ellipse cx="11616.55" cy="985.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="11625.55" y="989.2026">add_user_signal(const MethodInfo &amp; p_signal) : void</text><ellipse cx="11616.55" cy="998.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1304" x="11625.55" y="1002.0073">emit_signal(const StringName &amp; p_name, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Error</text><ellipse cx="11616.55" cy="1011.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="11625.55" y="1014.812">emit_signal(const StringName &amp; p_name, const Variant ** p_args, int p_argcount) : Error</text><ellipse cx="11616.55" cy="1024.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="11625.55" y="1027.6167">has_signal(const StringName &amp; p_name) const : bool</text><ellipse cx="11616.55" cy="1037.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="11625.55" y="1040.4214">get_signal_list(List&lt;MethodInfo&gt; * p_signals) const : void</text><ellipse cx="11616.55" cy="1050.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="11625.55" y="1053.2261">get_signal_connection_list(const StringName &amp; p_signal, List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="11616.55" cy="1062.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="11625.55" y="1066.0308">get_all_signal_connections(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="11616.55" cy="1075.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="11625.55" y="1078.8354">get_persistent_signal_connection_count() const : int</text><ellipse cx="11616.55" cy="1088.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="11625.55" y="1091.6401">get_signals_connected_to_this(List&lt;Object::Connection&gt; * p_connections) const : void</text><ellipse cx="11616.55" cy="1101.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1023" x="11625.55" y="1104.4448">connect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method, const Vector&lt;Variant&gt; &amp; p_binds = Vector&lt;Variant&gt;(), uint32_t p_flags = 0) : Error</text><ellipse cx="11616.55" cy="1114.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="11625.55" y="1117.2495">disconnect(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) : void</text><ellipse cx="11616.55" cy="1126.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="11625.55" y="1130.0542">is_connected(const StringName &amp; p_signal, Object * p_to_object, const StringName &amp; p_to_method) const : bool</text><ellipse cx="11616.55" cy="1139.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1318" x="11625.55" y="1142.8589">call_deferred(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="11616.55" cy="1152.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="11625.55" y="1155.6636">set_deferred(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="11616.55" cy="1165.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="11625.55" y="1168.4683">set_block_signals(bool p_block) : void</text><ellipse cx="11616.55" cy="1178.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="11625.55" y="1181.2729">is_blocking_signals() const : bool</text><ellipse cx="11616.55" cy="1190.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="582" x="11625.55" y="1194.0776">get_static_property_type(const StringName &amp; p_property, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="11616.55" cy="1203.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="663" x="11625.55" y="1206.8823">get_static_property_type_indexed(const Vector&lt;StringName&gt; &amp; p_path, bool * r_valid = __null) const : Variant::Type</text><ellipse cx="11616.55" cy="1216.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="11625.55" y="1219.687">get_translatable_strings(List&lt;String&gt; * p_strings) const : void</text><ellipse cx="11616.55" cy="1229.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="11625.55" y="1232.4917">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="11616.55" cy="1242.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="11625.55" y="1245.2964">tr(const StringName &amp; p_message) const : StringName</text><ellipse cx="11616.55" cy="1254.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="11625.55" y="1258.1011">is_queued_for_deletion() const : bool</text><ellipse cx="11616.55" cy="1267.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="11625.55" y="1270.9058">set_message_translation(bool p_enable) : void</text><ellipse cx="11616.55" cy="1280.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="11625.55" y="1283.7104">can_translate_messages() const : bool</text><ellipse cx="11616.55" cy="1293.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="11625.55" y="1296.5151">editor_set_section_unfold(const String &amp; p_section, bool p_unfolded) : void</text><ellipse cx="11616.55" cy="1306.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="11625.55" y="1309.3198">editor_is_section_unfolded(const String &amp; p_section) : bool</text><ellipse cx="11616.55" cy="1318.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="11625.55" y="1322.1245">editor_get_section_folding() const : const Set&lt;String&gt; &amp;</text><ellipse cx="11616.55" cy="1331.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="11625.55" y="1334.9292">editor_clear_section_folding() : void</text><ellipse cx="11616.55" cy="1344.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="11625.55" y="1347.7339">get_script_instance_binding(int p_script_language_index) : void *</text><ellipse cx="11616.55" cy="1357.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="11625.55" y="1360.5386">has_script_instance_binding(int p_script_language_index) : bool</text><ellipse cx="11616.55" cy="1370.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="11625.55" y="1373.3433">set_script_instance_binding(int p_script_language_index, void * p_data) : void</text><ellipse cx="11616.55" cy="1382.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="11625.55" y="1386.1479">clear_internal_resource_paths() : void</text><ellipse cx="11616.55" cy="1395.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="11625.55" y="1398.9526">Object() : void</text><ellipse cx="11616.55" cy="1408.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="11625.55" y="1411.7573">~Object() : void</text><ellipse cx="11616.55" cy="1421.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="200" x="11625.55" y="1424.562">cast_to&lt;T&gt;(Object * p_object) : T *</text><ellipse cx="11616.55" cy="1434.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="270" x="11625.55" y="1437.3667">cast_to&lt;T&gt;(const Object * p_object) : const T *</text><!--MD5=[8eacd4da8b6a8f3c33abf484b38f77cb]
class C_0000219886141561409828--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" target="_top" title="Object##ConnectFlags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410" xlink:show="new" xlink:title="Object##ConnectFlags" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="99.2188" id="C_0000219886141561409828" style="stroke: #A80036; stroke-width: 1.5;" width="198" x="12469.55" y="67.4531"/><ellipse cx="12499.4" cy="83.4531" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12503.5094,89.4531 L12495.7906,89.4531 L12495.7906,77.0625 L12503.5094,77.0625 L12503.5094,79.2188 L12498.2438,79.2188 L12498.2438,81.8906 L12503.0094,81.8906 L12503.0094,84.0469 L12498.2438,84.0469 L12498.2438,87.2969 L12503.5094,87.2969 L12503.5094,89.4531 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="133" x="12516.7" y="87.6074">Object::ConnectFlags</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12470.55" x2="12666.55" y1="99.4531" y2="99.4531"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="12475.55" y="113.6636">CONNECT_DEFERRED</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="12475.55" y="126.4683">CONNECT_PERSIST</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="12475.55" y="139.2729">CONNECT_ONESHOT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="12475.55" y="152.0776">CONNECT_REFERENCE_COUNTED</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12470.55" x2="12666.55" y1="158.6719" y2="158.6719"/></a><!--MD5=[c100d2fcbd7e4572a54d94b4ec867b89]
class C_0001267214583673362755--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" target="_top" title="Object##Connection" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418" xlink:show="new" xlink:title="Object##Connection" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="176.0469" id="C_0001267214583673362755" style="stroke: #A80036; stroke-width: 1.5;" width="363" x="24540.05" y="28.9531"/><ellipse cx="24657.8" cy="44.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M24660.7688,50.5938 Q24660.1906,50.8906 24659.55,51.0313 Q24658.9094,51.1875 24658.2063,51.1875 Q24655.7063,51.1875 24654.3781,49.5469 Q24653.0656,47.8906 24653.0656,44.7656 Q24653.0656,41.6406 24654.3781,39.9844 Q24655.7063,38.3281 24658.2063,38.3281 Q24658.9094,38.3281 24659.55,38.4844 Q24660.2063,38.6406 24660.7688,38.9375 L24660.7688,41.6563 Q24660.1438,41.0781 24659.55,40.8125 Q24658.9563,40.5313 24658.3313,40.5313 Q24656.9875,40.5313 24656.3,41.6094 Q24655.6125,42.6719 24655.6125,44.7656 Q24655.6125,46.8594 24656.3,47.9375 Q24656.9875,49 24658.3313,49 Q24658.9563,49 24659.55,48.7344 Q24660.1438,48.4531 24660.7688,47.875 L24660.7688,50.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="24678.3" y="49.1074">Object::Connection</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24541.05" x2="24902.05" y1="60.9531" y2="60.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="66.9531"/><ellipse cx="24551.05" cy="71.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" target="_top" title="source" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420" xlink:show="new" xlink:title="source" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="24560.05" y="75.1636">source : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="79.7578"/><ellipse cx="24551.05" cy="84.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="24560.05" y="87.9683">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="92.5625"/><ellipse cx="24551.05" cy="97.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="24560.05" y="100.7729">target : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="105.3672"/><ellipse cx="24551.05" cy="110.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" target="_top" title="flags" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424" xlink:show="new" xlink:title="flags" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="24560.05" y="113.5776">flags : uint32_t</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="118.1719"/><ellipse cx="24551.05" cy="123.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" target="_top" title="binds" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425" xlink:show="new" xlink:title="binds" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="24560.05" y="126.3823">binds : Vector&lt;Variant&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="24541.05" x2="24902.05" y1="132.9766" y2="132.9766"/><ellipse cx="24551.05" cy="143.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="24560.05" y="147.187">operator&lt;(const Object::Connection &amp; p_conn) const : bool</text><ellipse cx="24551.05" cy="156.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="24560.05" y="159.9917">operator Variant() const : Variant</text><ellipse cx="24551.05" cy="169.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="24560.05" y="172.7964">Connection() : void</text><ellipse cx="24551.05" cy="182.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="24560.05" y="185.6011">Connection(const Variant &amp; p_variant) : void</text><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24546.05" y="190.1953"/><ellipse cx="24551.05" cy="195.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="24560.05" y="198.4058">method : StringName</text></a><!--MD5=[d874fe1d316004bca753fee73a8324d9]
class C_0000250357724807605097--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" target="_top" title="Object##Signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448" xlink:show="new" xlink:title="Object##Signal" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="86.4141" id="C_0000250357724807605097" style="stroke: #A80036; stroke-width: 1.5;" width="375" x="11710.05" y="73.9531"/><ellipse cx="11850.3" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11853.2688,95.5938 Q11852.6906,95.8906 11852.05,96.0313 Q11851.4094,96.1875 11850.7063,96.1875 Q11848.2063,96.1875 11846.8781,94.5469 Q11845.5656,92.8906 11845.5656,89.7656 Q11845.5656,86.6406 11846.8781,84.9844 Q11848.2063,83.3281 11850.7063,83.3281 Q11851.4094,83.3281 11852.05,83.4844 Q11852.7063,83.6406 11853.2688,83.9375 L11853.2688,86.6563 Q11852.6438,86.0781 11852.05,85.8125 Q11851.4563,85.5313 11850.8313,85.5313 Q11849.4875,85.5313 11848.8,86.6094 Q11848.1125,87.6719 11848.1125,89.7656 Q11848.1125,91.8594 11848.8,92.9375 Q11849.4875,94 11850.8313,94 Q11851.4563,94 11852.05,93.7344 Q11852.6438,93.4531 11853.2688,92.875 L11853.2688,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="11870.8" y="94.1074">Object::Signal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11711.05" x2="12084.05" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11716.05" y="111.9531"/><ellipse cx="11721.05" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" target="_top" title="user" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472" xlink:show="new" xlink:title="user" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="11730.05" y="120.1636">user : MethodInfo</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11716.05" y="124.7578"/><ellipse cx="11721.05" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" target="_top" title="slot_map" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473" xlink:show="new" xlink:title="slot_map" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="11730.05" y="132.9683">slot_map : VMap&lt;Object::Signal::Target,Object::Signal::Slot&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="11711.05" x2="12084.05" y1="139.5625" y2="139.5625"/><ellipse cx="11721.05" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="11730.05" y="153.7729">Signal() : void</text><!--MD5=[4eb60b73893006bfd9288c7c65337e99]
class C_0002064336919270342687--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" target="_top" title="ObjectDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773" xlink:show="new" xlink:title="ObjectDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="99.2188" id="C_0002064336919270342687" style="stroke: #A80036; stroke-width: 1.5;" width="314" x="12120.55" y="67.4531"/><ellipse cx="12244.8" cy="83.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12247.7688,89.0938 Q12247.1906,89.3906 12246.55,89.5313 Q12245.9094,89.6875 12245.2063,89.6875 Q12242.7063,89.6875 12241.3781,88.0469 Q12240.0656,86.3906 12240.0656,83.2656 Q12240.0656,80.1406 12241.3781,78.4844 Q12242.7063,76.8281 12245.2063,76.8281 Q12245.9094,76.8281 12246.55,76.9844 Q12247.2063,77.1406 12247.7688,77.4375 L12247.7688,80.1563 Q12247.1438,79.5781 12246.55,79.3125 Q12245.9563,79.0313 12245.3313,79.0313 Q12243.9875,79.0313 12243.3,80.1094 Q12242.6125,81.1719 12242.6125,83.2656 Q12242.6125,85.3594 12243.3,86.4375 Q12243.9875,87.5 12245.3313,87.5 Q12245.9563,87.5 12246.55,87.2344 Q12247.1438,86.9531 12247.7688,86.375 L12247.7688,89.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="12265.3" y="87.6074">ObjectDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12121.55" x2="12433.55" y1="99.4531" y2="99.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="12121.55" x2="12433.55" y1="107.4531" y2="107.4531"/><ellipse cx="12131.55" cy="118.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="266" x="12140.55" y="121.6636">get_instance(ObjectID p_instance_id) : Object *</text><ellipse cx="12131.55" cy="131.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="288" x="12140.55" y="134.4683">debug_objects(ObjectDB::DebugFunc p_func) : void</text><ellipse cx="12131.55" cy="144.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="12140.55" y="147.2729">get_object_count() : int</text><ellipse cx="12131.55" cy="156.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="221" x="12140.55" y="160.0776">instance_validate(Object * p_ptr) : bool</text></a><!--MD5=[cefc1761acd014682fb46e6592f2db8a]
class C_0000104564426296396960--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" target="_top" title="ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94" xlink:show="new" xlink:title="ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="1021.1563" id="C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.5;" width="1563" x="12842.05" y="7763.9531"/><ellipse cx="13594.3" cy="7779.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13597.2688,7785.5938 Q13596.6906,7785.8906 13596.05,7786.0313 Q13595.4094,7786.1875 13594.7063,7786.1875 Q13592.2063,7786.1875 13590.8781,7784.5469 Q13589.5656,7782.8906 13589.5656,7779.7656 Q13589.5656,7776.6406 13590.8781,7774.9844 Q13592.2063,7773.3281 13594.7063,7773.3281 Q13595.4094,7773.3281 13596.05,7773.4844 Q13596.7063,7773.6406 13597.2688,7773.9375 L13597.2688,7776.6563 Q13596.6438,7776.0781 13596.05,7775.8125 Q13595.4563,7775.5313 13594.8313,7775.5313 Q13593.4875,7775.5313 13592.8,7776.6094 Q13592.1125,7777.6719 13592.1125,7779.7656 Q13592.1125,7781.8594 13592.8,7782.9375 Q13593.4875,7784 13594.8313,7784 Q13595.4563,7784 13596.05,7783.7344 Q13596.6438,7783.4531 13597.2688,7782.875 L13597.2688,7785.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="13614.8" y="7784.1074">ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="12843.05" x2="14404.05" y1="7795.9531" y2="7795.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7801.9531"/><ellipse cx="12853.05" cy="7806.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" target="_top" title="lock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146" xlink:show="new" xlink:title="lock" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="75" x="12862.05" y="7810.1636">lock : RWLock</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7814.7578"/><ellipse cx="12853.05" cy="7819.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" target="_top" title="classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147" xlink:show="new" xlink:title="classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="306" x="12862.05" y="7822.9683">classes : HashMap&lt;StringName,ClassDB::ClassInfo&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7827.5625"/><ellipse cx="12853.05" cy="7832.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" target="_top" title="resource_base_extensions" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148" xlink:show="new" xlink:title="resource_base_extensions" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="12862.05" y="7835.7729">resource_base_extensions : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7840.3672"/><ellipse cx="12853.05" cy="7845.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" target="_top" title="compat_classes" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149" xlink:show="new" xlink:title="compat_classes" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="12862.05" y="7848.5776">compat_classes : HashMap&lt;StringName,StringName&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7853.1719"/><ellipse cx="12853.05" cy="7858.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" target="_top" title="current_api" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157" xlink:show="new" xlink:title="current_api" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="12862.05" y="7861.3823">current_api : ClassDB::APIType</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7865.9766"/><ellipse cx="12853.05" cy="7870.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" target="_top" title="default_values" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161" xlink:show="new" xlink:title="default_values" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="416" x="12862.05" y="7874.187">default_values : HashMap&lt;StringName,HashMap&lt;StringName,Variant&gt;&gt;</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12848.05" y="7878.7813"/><ellipse cx="12853.05" cy="7883.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" target="_top" title="default_values_cached" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162" xlink:show="new" xlink:title="default_values_cached" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="244" x="12862.05" y="7886.9917">default_values_cached : Set&lt;StringName&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="12843.05" x2="14404.05" y1="7893.5859" y2="7893.5859"/><ellipse cx="12853.05" cy="7904.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="856" x="12862.05" y="7907.7964">bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition &amp; method_name, const Variant ** p_defs, int p_defcount) : MethodBind *</text><ellipse cx="12853.05" cy="7917.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="12862.05" y="7920.6011">_add_class2(const StringName &amp; p_class, const StringName &amp; p_inherits) : void</text><ellipse cx="12853.05" cy="7930.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="12862.05" y="7933.4058">get_class_list(List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="12853.05" cy="7943" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="538" x="12862.05" y="7946.2104">get_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="12853.05" cy="7955.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="576" x="12862.05" y="7959.0151">get_direct_inheriters_from_class(const StringName &amp; p_class, List&lt;StringName&gt; * p_classes) : void</text><ellipse cx="12853.05" cy="7968.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="399" x="12862.05" y="7971.8198">get_parent_class_nocheck(const StringName &amp; p_class) : StringName</text><ellipse cx="12853.05" cy="7981.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="347" x="12862.05" y="7984.6245">get_parent_class(const StringName &amp; p_class) : StringName</text><ellipse cx="12853.05" cy="7994.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="12862.05" y="7997.4292">class_exists(const StringName &amp; p_class) : bool</text><ellipse cx="12853.05" cy="8007.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="480" x="12862.05" y="8010.2339">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) : bool</text><ellipse cx="12853.05" cy="8019.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="281" x="12862.05" y="8023.0386">can_instance(const StringName &amp; p_class) : bool</text><ellipse cx="12853.05" cy="8032.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="277" x="12862.05" y="8035.8433">instance(const StringName &amp; p_class) : Object *</text><ellipse cx="12853.05" cy="8045.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="354" x="12862.05" y="8048.6479">get_api_type(const StringName &amp; p_class) : ClassDB::APIType</text><ellipse cx="12853.05" cy="8058.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="274" x="12862.05" y="8061.4526">get_api_hash(ClassDB::APIType p_api) : uint64_t</text><ellipse cx="12853.05" cy="8071.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="388" x="12862.05" y="8074.2573">add_signal(StringName p_class, const MethodInfo &amp; p_signal) : void</text><ellipse cx="12853.05" cy="8083.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="12862.05" y="8087.062">has_signal(StringName p_class, StringName p_signal) : bool</text><ellipse cx="12853.05" cy="8096.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="471" x="12862.05" y="8099.8667">get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool</text><ellipse cx="12853.05" cy="8109.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="591" x="12862.05" y="8112.6714">get_signal_list(StringName p_class, List&lt;MethodInfo&gt; * p_signals, bool p_no_inheritance = false) : void</text><ellipse cx="12853.05" cy="8122.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="578" x="12862.05" y="8125.4761">add_property_group(StringName p_class, const String &amp; p_name, const String &amp; p_prefix = "") : void</text><ellipse cx="12853.05" cy="8135.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="850" x="12862.05" y="8138.2808">add_property(StringName p_class, const PropertyInfo &amp; p_pinfo, const StringName &amp; p_setter, const StringName &amp; p_getter, int p_index = -1) : void</text><ellipse cx="12853.05" cy="8147.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="636" x="12862.05" y="8151.0854">set_property_default_value(StringName p_class, const StringName &amp; p_name, const Variant &amp; p_default) : void</text><ellipse cx="12853.05" cy="8160.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="792" x="12862.05" y="8163.8901">get_property_list(StringName p_class, List&lt;PropertyInfo&gt; * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void</text><ellipse cx="12853.05" cy="8173.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="678" x="12862.05" y="8176.6948">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value, bool * r_valid = __null) : bool</text><ellipse cx="12853.05" cy="8186.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="509" x="12862.05" y="8189.4995">get_property(Object * p_object, const StringName &amp; p_property, Variant &amp; r_value) : bool</text><ellipse cx="12853.05" cy="8199.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="648" x="12862.05" y="8202.3042">has_property(const StringName &amp; p_class, const StringName &amp; p_property, bool p_no_inheritance = false) : bool</text><ellipse cx="12853.05" cy="8211.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="642" x="12862.05" y="8215.1089">get_property_index(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : int</text><ellipse cx="12853.05" cy="8224.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="697" x="12862.05" y="8227.9136">get_property_type(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_is_valid = __null) : Variant::Type</text><ellipse cx="12853.05" cy="8237.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="12862.05" y="8240.7183">get_property_setter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="12853.05" cy="8250.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="502" x="12862.05" y="8253.5229">get_property_getter(StringName p_class, const StringName &amp; p_property) : StringName</text><ellipse cx="12853.05" cy="8263.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="540" x="12862.05" y="8266.3276">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool</text><ellipse cx="12853.05" cy="8275.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="460" x="12862.05" y="8279.1323">set_method_flags(StringName p_class, StringName p_method, int p_flags) : void</text><ellipse cx="12853.05" cy="8288.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="844" x="12862.05" y="8291.937">get_method_list(StringName p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void</text><ellipse cx="12853.05" cy="8301.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="401" x="12862.05" y="8304.7417">get_method(StringName p_class, StringName p_name) : MethodBind *</text><ellipse cx="12853.05" cy="8314.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="620" x="12862.05" y="8317.5464">add_virtual_method(const StringName &amp; p_class, const MethodInfo &amp; p_method, bool p_virtual = true) : void</text><ellipse cx="12853.05" cy="8327.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="683" x="12862.05" y="8330.3511">get_virtual_methods(const StringName &amp; p_class, List&lt;MethodInfo&gt; * p_methods, bool p_no_inheritance = false) : void</text><ellipse cx="12853.05" cy="8339.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="765" x="12862.05" y="8343.1558">bind_integer_constant(const StringName &amp; p_class, const StringName &amp; p_enum, const StringName &amp; p_name, int p_constant) : void</text><ellipse cx="12853.05" cy="8352.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="688" x="12862.05" y="8355.9604">get_integer_constant_list(const StringName &amp; p_class, List&lt;String&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="12853.05" cy="8365.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="644" x="12862.05" y="8368.7651">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name, bool * p_success = __null) : int</text><ellipse cx="12853.05" cy="8378.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="757" x="12862.05" y="8381.5698">get_integer_constant_enum(const StringName &amp; p_class, const StringName &amp; p_name, bool p_no_inheritance = false) : StringName</text><ellipse cx="12853.05" cy="8391.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="641" x="12862.05" y="8394.3745">get_enum_list(const StringName &amp; p_class, List&lt;StringName&gt; * p_enums, bool p_no_inheritance = false) : void</text><ellipse cx="12853.05" cy="8403.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="870" x="12862.05" y="8407.1792">get_enum_constants(const StringName &amp; p_class, const StringName &amp; p_enum, List&lt;StringName&gt; * p_constants, bool p_no_inheritance = false) : void</text><ellipse cx="12853.05" cy="8416.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="733" x="12862.05" y="8419.9839">class_get_default_property_value(const StringName &amp; p_class, const StringName &amp; p_property, bool * r_valid = __null) : Variant</text><ellipse cx="12853.05" cy="8429.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="321" x="12862.05" y="8432.7886">get_category(const StringName &amp; p_node) : StringName</text><ellipse cx="12853.05" cy="8442.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="349" x="12862.05" y="8445.5933">set_class_enabled(StringName p_class, bool p_enable) : void</text><ellipse cx="12853.05" cy="8455.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="255" x="12862.05" y="8458.3979">is_class_enabled(StringName p_class) : bool</text><ellipse cx="12853.05" cy="8467.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="12862.05" y="8471.2026">is_class_exposed(StringName p_class) : bool</text><ellipse cx="12853.05" cy="8480.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="575" x="12862.05" y="8484.0073">add_resource_base_extension(const StringName &amp; p_extension, const StringName &amp; p_class) : void</text><ellipse cx="12853.05" cy="8493.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="381" x="12862.05" y="8496.812">get_resource_base_extensions(List&lt;String&gt; * p_extensions) : void</text><ellipse cx="12853.05" cy="8506.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="513" x="12862.05" y="8509.6167">get_extensions_for_type(const StringName &amp; p_class, List&lt;String&gt; * p_extensions) : void</text><ellipse cx="12853.05" cy="8519.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="524" x="12862.05" y="8522.4214">add_compatibility_class(const StringName &amp; p_class, const StringName &amp; p_fallback) : void</text><ellipse cx="12853.05" cy="8532.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="265" x="12862.05" y="8535.2261">set_current_api(ClassDB::APIType p_api) : void</text><ellipse cx="12853.05" cy="8544.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="12862.05" y="8548.0308">get_current_api() : ClassDB::APIType</text><ellipse cx="12853.05" cy="8557.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="139" x="12862.05" y="8560.8354">cleanup_defaults() : void</text><ellipse cx="12853.05" cy="8570.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="87" x="12862.05" y="8573.6401">cleanup() : void</text><ellipse cx="12853.05" cy="8583.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="12862.05" y="8586.4448">creator&lt;T&gt;() : class Object *</text><ellipse cx="12853.05" cy="8596.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="131" x="12862.05" y="8599.2495">_add_class&lt;T&gt;() : void</text><ellipse cx="12853.05" cy="8608.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="12862.05" y="8612.0542">register_class&lt;T&gt;() : void</text><ellipse cx="12853.05" cy="8621.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="12862.05" y="8624.8589">register_virtual_class&lt;T&gt;() : void</text><ellipse cx="12853.05" cy="8634.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="219" x="12862.05" y="8637.6636">_create_ptr_func&lt;T&gt;() : class Object *</text><ellipse cx="12853.05" cy="8647.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="251" x="12862.05" y="8650.4683">register_custom_instance_class&lt;T&gt;() : void</text><ellipse cx="12853.05" cy="8660.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="425" x="12862.05" y="8663.2729">bind_method&lt;N,M&gt;(N p_method_name, M p_method) : class MethodBind *</text><ellipse cx="12853.05" cy="8672.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="564" x="12862.05" y="8676.0776">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1) : class MethodBind *</text><ellipse cx="12853.05" cy="8685.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="703" x="12862.05" y="8688.8823">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2) : class MethodBind *</text><ellipse cx="12853.05" cy="8698.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="842" x="12862.05" y="8701.687">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3) : class MethodBind *</text><ellipse cx="12853.05" cy="8711.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="981" x="12862.05" y="8714.4917">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4) : class MethodBind *</text><ellipse cx="12853.05" cy="8724.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1120" x="12862.05" y="8727.2964">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5) : class MethodBind *</text><ellipse cx="12853.05" cy="8736.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1259" x="12862.05" y="8740.1011">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6) : class MethodBind *</text><ellipse cx="12853.05" cy="8749.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1398" x="12862.05" y="8752.9058">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7) : class MethodBind *</text><ellipse cx="12853.05" cy="8762.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1537" x="12862.05" y="8765.7104">bind_method&lt;N,M&gt;(N p_method_name, M p_method, const Variant &amp; p_def1, const Variant &amp; p_def2, const Variant &amp; p_def3, const Variant &amp; p_def4, const Variant &amp; p_def5, const Variant &amp; p_def6, const Variant &amp; p_def7, const Variant &amp; p_def8) : class MethodBind *</text><ellipse cx="12853.05" cy="8775.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1370" x="12862.05" y="8778.5151">bind_vararg_method&lt;M&gt;(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo &amp; p_info = MethodInfo(), const Vector&lt;Variant&gt; &amp; p_default_args = Vector&lt;Variant&gt;(), bool p_return_nil_is_variant = true) : class MethodBind *</text><!--MD5=[fde6ed13e18da825139d9e33a0c6db3f]
class C_0001778859257025660860--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" target="_top" title="Reference" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39" xlink:show="new" xlink:title="Reference" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="291.2891" id="C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="23295.05" y="1674.9531"/><ellipse cx="23459.3" cy="1690.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23462.2688,1696.5938 Q23461.6906,1696.8906 23461.05,1697.0313 Q23460.4094,1697.1875 23459.7063,1697.1875 Q23457.2063,1697.1875 23455.8781,1695.5469 Q23454.5656,1693.8906 23454.5656,1690.7656 Q23454.5656,1687.6406 23455.8781,1685.9844 Q23457.2063,1684.3281 23459.7063,1684.3281 Q23460.4094,1684.3281 23461.05,1684.4844 Q23461.7063,1684.6406 23462.2688,1684.9375 L23462.2688,1687.6563 Q23461.6438,1687.0781 23461.05,1686.8125 Q23460.4563,1686.5313 23459.8313,1686.5313 Q23458.4875,1686.5313 23457.8,1687.6094 Q23457.1125,1688.6719 23457.1125,1690.7656 Q23457.1125,1692.8594 23457.8,1693.9375 Q23458.4875,1695 23459.8313,1695 Q23460.4563,1695 23461.05,1694.7344 Q23461.6438,1694.4531 23462.2688,1693.875 L23462.2688,1696.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="23479.8" y="1695.1074">Reference</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23296.05" x2="23695.05" y1="1706.9531" y2="1706.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="23296.05" x2="23695.05" y1="1714.9531" y2="1714.9531"/><ellipse cx="23306.05" cy="1725.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="23315.05" y="1729.1636">get_class() const : String</text><ellipse cx="23306.05" cy="1738.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="23315.05" y="1741.9683">_get_class_namev() const : const StringName *</text><ellipse cx="23306.05" cy="1751.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="23315.05" y="1754.7729">get_class_ptr_static() : void *</text><ellipse cx="23306.05" cy="1764.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="23315.05" y="1767.5776">get_class_static() : String</text><ellipse cx="23306.05" cy="1777.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="23315.05" y="1780.3823">get_parent_class_static() : String</text><ellipse cx="23306.05" cy="1789.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="23315.05" y="1793.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="23306.05" cy="1802.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="23315.05" y="1805.9917">get_category_static() : String</text><ellipse cx="23306.05" cy="1815.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="23315.05" y="1818.7964">inherits_static() : String</text><ellipse cx="23306.05" cy="1828.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="23315.05" y="1831.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="23306.05" cy="1841.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="23315.05" y="1844.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="23306.05" cy="1854" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="23315.05" y="1857.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="23306.05" cy="1866.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="23315.05" y="1870.0151">initialize_class() : void</text><ellipse cx="23306.05" cy="1879.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="23315.05" y="1882.8198">is_referenced() const : bool</text><ellipse cx="23306.05" cy="1892.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="23315.05" y="1895.6245">init_ref() : bool</text><ellipse cx="23306.05" cy="1905.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="23315.05" y="1908.4292">reference() : bool</text><ellipse cx="23306.05" cy="1918.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="23315.05" y="1921.2339">unreference() : bool</text><ellipse cx="23306.05" cy="1930.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="23315.05" y="1934.0386">reference_get_count() const : int</text><ellipse cx="23306.05" cy="1943.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="23315.05" y="1946.8433">Reference() : void</text><ellipse cx="23306.05" cy="1956.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="23315.05" y="1959.6479">~Reference() : void</text></a><!--MD5=[dd2998d45ec54ba5be719aa7e503205b]
class C_0000218299049716973303--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" target="_top" title="Node" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55" xlink:show="new" xlink:title="Node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="2160.7734" id="C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.5;" width="1447" x="19309.05" y="3861.4531"/><ellipse cx="20011.8" cy="3877.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M20014.7688,3883.0938 Q20014.1906,3883.3906 20013.55,3883.5313 Q20012.9094,3883.6875 20012.2063,3883.6875 Q20009.7063,3883.6875 20008.3781,3882.0469 Q20007.0656,3880.3906 20007.0656,3877.2656 Q20007.0656,3874.1406 20008.3781,3872.4844 Q20009.7063,3870.8281 20012.2063,3870.8281 Q20012.9094,3870.8281 20013.55,3870.9844 Q20014.2063,3871.1406 20014.7688,3871.4375 L20014.7688,3874.1563 Q20014.1438,3873.5781 20013.55,3873.3125 Q20012.9563,3873.0313 20012.3313,3873.0313 Q20010.9875,3873.0313 20010.3,3874.1094 Q20009.6125,3875.1719 20009.6125,3877.2656 Q20009.6125,3879.3594 20010.3,3880.4375 Q20010.9875,3881.5 20012.3313,3881.5 Q20012.9563,3881.5 20013.55,3881.2344 Q20014.1438,3880.9531 20014.7688,3880.375 L20014.7688,3883.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="20032.3" y="3881.6074">Node</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19310.05" x2="20755.05" y1="3893.4531" y2="3893.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19315.05" y="3899.4531"/><ellipse cx="19320.05" cy="3904.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" target="_top" title="orphan_node_count" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78" xlink:show="new" xlink:title="orphan_node_count" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="137" x="19329.05" y="3907.6636">orphan_node_count : int</text></a><ellipse cx="19320.05" cy="3917.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="19329.05" y="3920.4683">NOTIFICATION_ENTER_TREE : enum</text><ellipse cx="19320.05" cy="3930.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="19329.05" y="3933.2729">NOTIFICATION_EXIT_TREE : enum</text><ellipse cx="19320.05" cy="3942.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="19329.05" y="3946.0776">NOTIFICATION_MOVED_IN_PARENT : enum</text><ellipse cx="19320.05" cy="3955.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="19329.05" y="3958.8823">NOTIFICATION_READY : enum</text><ellipse cx="19320.05" cy="3968.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="19329.05" y="3971.687">NOTIFICATION_PAUSED : enum</text><ellipse cx="19320.05" cy="3981.2813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="19329.05" y="3984.4917">NOTIFICATION_UNPAUSED : enum</text><ellipse cx="19320.05" cy="3994.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="19329.05" y="3997.2964">NOTIFICATION_PHYSICS_PROCESS : enum</text><ellipse cx="19320.05" cy="4006.8906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="19329.05" y="4010.1011">NOTIFICATION_PROCESS : enum</text><ellipse cx="19320.05" cy="4019.6953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="19329.05" y="4022.9058">NOTIFICATION_PARENTED : enum</text><ellipse cx="19320.05" cy="4032.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="19329.05" y="4035.7104">NOTIFICATION_UNPARENTED : enum</text><ellipse cx="19320.05" cy="4045.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="19329.05" y="4048.5151">NOTIFICATION_INSTANCED : enum</text><ellipse cx="19320.05" cy="4058.1094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="19329.05" y="4061.3198">NOTIFICATION_DRAG_BEGIN : enum</text><ellipse cx="19320.05" cy="4070.9141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="19329.05" y="4074.1245">NOTIFICATION_DRAG_END : enum</text><ellipse cx="19320.05" cy="4083.7188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="19329.05" y="4086.9292">NOTIFICATION_PATH_CHANGED : enum</text><ellipse cx="19320.05" cy="4096.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="19329.05" y="4099.7339">NOTIFICATION_INTERNAL_PROCESS : enum</text><ellipse cx="19320.05" cy="4109.3281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="19329.05" y="4112.5386">NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum</text><ellipse cx="19320.05" cy="4122.1328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="19329.05" y="4125.3433">NOTIFICATION_POST_ENTER_TREE : enum</text><ellipse cx="19320.05" cy="4134.9375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="19329.05" y="4138.1479">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="19320.05" cy="4147.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="19329.05" y="4150.9526">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="19320.05" cy="4160.5469" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="19329.05" y="4163.7573">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="19320.05" cy="4173.3516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="19329.05" y="4176.562">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="19320.05" cy="4186.1563" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="19329.05" y="4189.3667">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="19320.05" cy="4198.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="19329.05" y="4202.1714">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="19320.05" cy="4211.7656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19329.05" y="4214.9761">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text><ellipse cx="19320.05" cy="4224.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="19329.05" y="4227.7808">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="19320.05" cy="4237.375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="19329.05" y="4240.5854">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="19320.05" cy="4250.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="19329.05" y="4253.3901">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="19320.05" cy="4262.9844" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="19329.05" y="4266.1948">NOTIFICATION_CRASH : enum</text><ellipse cx="19320.05" cy="4275.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="19329.05" y="4278.9995">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="19320.05" cy="4288.5938" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="19329.05" y="4291.8042">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="19320.05" cy="4301.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="19329.05" y="4304.6089">NOTIFICATION_APP_PAUSED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="19310.05" x2="20755.05" y1="4311.2031" y2="4311.2031"/><ellipse cx="19320.05" cy="4322.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="19329.05" y="4325.4136">get_class() const : String</text><ellipse cx="19320.05" cy="4335.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="19329.05" y="4338.2183">_get_class_namev() const : const StringName *</text><ellipse cx="19320.05" cy="4347.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="19329.05" y="4351.0229">get_class_ptr_static() : void *</text><ellipse cx="19320.05" cy="4360.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="19329.05" y="4363.8276">get_class_static() : String</text><ellipse cx="19320.05" cy="4373.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="19329.05" y="4376.6323">get_parent_class_static() : String</text><ellipse cx="19320.05" cy="4386.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="19329.05" y="4389.437">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="19320.05" cy="4399.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="19329.05" y="4402.2417">get_category_static() : String</text><ellipse cx="19320.05" cy="4411.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="19329.05" y="4415.0464">inherits_static() : String</text><ellipse cx="19320.05" cy="4424.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="19329.05" y="4427.8511">is_class(const String &amp; p_class) const : bool</text><ellipse cx="19320.05" cy="4437.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="19329.05" y="4440.6558">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="19320.05" cy="4450.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="19329.05" y="4453.4604">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="19320.05" cy="4463.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="19329.05" y="4466.2651">initialize_class() : void</text><ellipse cx="19320.05" cy="4475.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="19329.05" y="4479.0698">get_name() const : StringName</text><ellipse cx="19320.05" cy="4488.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="19329.05" y="4491.8745">set_name(const String &amp; p_name) : void</text><ellipse cx="19320.05" cy="4501.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="19329.05" y="4504.6792">add_child(Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="19320.05" cy="4514.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="19329.05" y="4517.4839">add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void</text><ellipse cx="19320.05" cy="4527.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="19329.05" y="4530.2886">remove_child(Node * p_child) : void</text><ellipse cx="19320.05" cy="4539.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="19329.05" y="4543.0933">get_child_count() const : int</text><ellipse cx="19320.05" cy="4552.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="19329.05" y="4555.8979">get_child(int p_index) const : Node *</text><ellipse cx="19320.05" cy="4565.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="19329.05" y="4568.7026">has_node(const NodePath &amp; p_path) const : bool</text><ellipse cx="19320.05" cy="4578.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="19329.05" y="4581.5073">get_node(const NodePath &amp; p_path) const : Node *</text><ellipse cx="19320.05" cy="4591.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="19329.05" y="4594.312">get_node_or_null(const NodePath &amp; p_path) const : Node *</text><ellipse cx="19320.05" cy="4603.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="19329.05" y="4607.1167">find_node(const String &amp; p_mask, bool p_recursive = true, bool p_owned = true) const : Node *</text><ellipse cx="19320.05" cy="4616.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="19329.05" y="4619.9214">has_node_and_resource(const NodePath &amp; p_path) const : bool</text><ellipse cx="19320.05" cy="4629.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="886" x="19329.05" y="4632.7261">get_node_and_resource(const NodePath &amp; p_path, RES &amp; r_res, Vector&lt;StringName&gt; &amp; r_leftover_subpath, bool p_last_is_property = true) const : Node *</text><ellipse cx="19320.05" cy="4642.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="19329.05" y="4645.5308">get_parent() const : Node *</text><ellipse cx="19320.05" cy="4655.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="19329.05" y="4658.3354">find_parent(const String &amp; p_mask) const : Node *</text><ellipse cx="19320.05" cy="4667.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="19329.05" y="4671.1401">get_tree() const : SceneTree *</text><ellipse cx="19320.05" cy="4680.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19329.05" y="4683.9448">is_inside_tree() const : bool</text><ellipse cx="19320.05" cy="4693.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="19329.05" y="4696.7495">is_a_parent_of(const Node * p_node) const : bool</text><ellipse cx="19320.05" cy="4706.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="19329.05" y="4709.5542">is_greater_than(const Node * p_node) const : bool</text><ellipse cx="19320.05" cy="4719.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19329.05" y="4722.3589">get_path() const : NodePath</text><ellipse cx="19320.05" cy="4731.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="19329.05" y="4735.1636">get_path_to(const Node * p_node) const : NodePath</text><ellipse cx="19320.05" cy="4744.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="19329.05" y="4747.9683">find_common_parent_with(const Node * p_node) const : Node *</text><ellipse cx="19320.05" cy="4757.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="455" x="19329.05" y="4760.7729">add_to_group(const StringName &amp; p_identifier, bool p_persistent = false) : void</text><ellipse cx="19320.05" cy="4770.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="19329.05" y="4773.5776">remove_from_group(const StringName &amp; p_identifier) : void</text><ellipse cx="19320.05" cy="4783.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="19329.05" y="4786.3823">is_in_group(const StringName &amp; p_identifier) const : bool</text><ellipse cx="19320.05" cy="4795.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="19329.05" y="4799.187">get_groups(List&lt;Node::GroupInfo&gt; * p_groups) const : void</text><ellipse cx="19320.05" cy="4808.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="19329.05" y="4811.9917">get_persistent_group_count() const : int</text><ellipse cx="19320.05" cy="4821.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="19329.05" y="4824.7964">move_child(Node * p_child, int p_pos) : void</text><ellipse cx="19320.05" cy="4834.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="19329.05" y="4837.6011">raise() : void</text><ellipse cx="19320.05" cy="4847.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="19329.05" y="4850.4058">set_owner(Node * p_owner) : void</text><ellipse cx="19320.05" cy="4860" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="19329.05" y="4863.2104">get_owner() const : Node *</text><ellipse cx="19320.05" cy="4872.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="19329.05" y="4876.0151">get_owned_by(Node * p_by, List&lt;Node *&gt; * p_owned) : void</text><ellipse cx="19320.05" cy="4885.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="19329.05" y="4888.8198">remove_and_skip() : void</text><ellipse cx="19320.05" cy="4898.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="19329.05" y="4901.6245">get_index() const : int</text><ellipse cx="19320.05" cy="4911.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="19329.05" y="4914.4292">print_tree() : void</text><ellipse cx="19320.05" cy="4924.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="19329.05" y="4927.2339">print_tree_pretty() : void</text><ellipse cx="19320.05" cy="4936.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="19329.05" y="4940.0386">set_filename(const String &amp; p_filename) : void</text><ellipse cx="19320.05" cy="4949.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="19329.05" y="4952.8433">get_filename() const : String</text><ellipse cx="19320.05" cy="4962.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="19329.05" y="4965.6479">set_editor_description(const String &amp; p_editor_description) : void</text><ellipse cx="19320.05" cy="4975.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="19329.05" y="4978.4526">get_editor_description() const : String</text><ellipse cx="19320.05" cy="4988.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="19329.05" y="4991.2573">set_editable_instance(Node * p_node, bool p_editable) : void</text><ellipse cx="19320.05" cy="5000.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="19329.05" y="5004.062">is_editable_instance(const Node * p_node) const : bool</text><ellipse cx="19320.05" cy="5013.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="19329.05" y="5016.8667">get_deepest_editable_node(Node * start_node) const : Node *</text><ellipse cx="19320.05" cy="5026.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="19329.05" y="5029.6714">propagate_notification(int p_notification) : void</text><ellipse cx="19320.05" cy="5039.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="19329.05" y="5042.4761">propagate_call(const StringName &amp; p_method, const Array &amp; p_args = Array(), const bool p_parent_first = false) : void</text><ellipse cx="19320.05" cy="5052.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="19329.05" y="5055.2808">set_physics_process(bool p_process) : void</text><ellipse cx="19320.05" cy="5064.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="19329.05" y="5068.0854">get_physics_process_delta_time() const : float</text><ellipse cx="19320.05" cy="5077.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="19329.05" y="5080.8901">is_physics_processing() const : bool</text><ellipse cx="19320.05" cy="5090.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="19329.05" y="5093.6948">set_process(bool p_idle_process) : void</text><ellipse cx="19320.05" cy="5103.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="19329.05" y="5106.4995">get_process_delta_time() const : float</text><ellipse cx="19320.05" cy="5116.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19329.05" y="5119.3042">is_processing() const : bool</text><ellipse cx="19320.05" cy="5128.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="19329.05" y="5132.1089">set_physics_process_internal(bool p_process_internal) : void</text><ellipse cx="19320.05" cy="5141.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="19329.05" y="5144.9136">is_physics_processing_internal() const : bool</text><ellipse cx="19320.05" cy="5154.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="19329.05" y="5157.7183">set_process_internal(bool p_idle_process_internal) : void</text><ellipse cx="19320.05" cy="5167.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="19329.05" y="5170.5229">is_processing_internal() const : bool</text><ellipse cx="19320.05" cy="5180.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="19329.05" y="5183.3276">set_process_priority(int p_priority) : void</text><ellipse cx="19320.05" cy="5192.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="19329.05" y="5196.1323">get_process_priority() const : int</text><ellipse cx="19320.05" cy="5205.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="19329.05" y="5208.937">set_process_input(bool p_enable) : void</text><ellipse cx="19320.05" cy="5218.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="19329.05" y="5221.7417">is_processing_input() const : bool</text><ellipse cx="19320.05" cy="5231.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="19329.05" y="5234.5464">set_process_unhandled_input(bool p_enable) : void</text><ellipse cx="19320.05" cy="5244.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="19329.05" y="5247.3511">is_processing_unhandled_input() const : bool</text><ellipse cx="19320.05" cy="5256.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="19329.05" y="5260.1558">set_process_unhandled_key_input(bool p_enable) : void</text><ellipse cx="19320.05" cy="5269.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="19329.05" y="5272.9604">is_processing_unhandled_key_input() const : bool</text><ellipse cx="19320.05" cy="5282.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="19329.05" y="5285.7651">get_position_in_parent() const : int</text><ellipse cx="19320.05" cy="5295.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="591" x="19329.05" y="5298.5698">duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *</text><ellipse cx="19320.05" cy="5308.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="468" x="19329.05" y="5311.3745">duplicate_and_reown(const Map&lt;Node *,Node *&gt; &amp; p_reown_map) const : Node *</text><ellipse cx="19320.05" cy="5320.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="19329.05" y="5324.1792">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap) const : Node *</text><ellipse cx="19320.05" cy="5333.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="19329.05" y="5336.9839">duplicate_from_editor(Map&lt;const Node *,Node *&gt; &amp; r_duplimap, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : Node *</text><ellipse cx="19320.05" cy="5346.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="19329.05" y="5349.7886">remap_node_resources(Node * p_node, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="19320.05" cy="5359.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="571" x="19329.05" y="5362.5933">remap_nested_resources(RES p_resource, const Map&lt;RES,RES&gt; &amp; p_resource_remap) const : void</text><ellipse cx="19320.05" cy="5372.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="19329.05" y="5375.3979">set_scene_instance_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="19320.05" cy="5384.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="19329.05" y="5388.2026">get_scene_instance_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="19320.05" cy="5397.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="19329.05" y="5401.0073">set_scene_inherited_state(const Ref&lt;SceneState&gt; &amp; p_state) : void</text><ellipse cx="19320.05" cy="5410.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="19329.05" y="5413.812">get_scene_inherited_state() const : Ref&lt;SceneState&gt;</text><ellipse cx="19320.05" cy="5423.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="19329.05" y="5426.6167">set_scene_instance_load_placeholder(bool p_enable) : void</text><ellipse cx="19320.05" cy="5436.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="19329.05" y="5439.4214">get_scene_instance_load_placeholder() const : bool</text><ellipse cx="19320.05" cy="5449.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1199" x="19329.05" y="5452.2261">make_binds(const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Vector&lt;Variant&gt;</text><ellipse cx="19320.05" cy="5461.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="19329.05" y="5465.0308">replace_by(Node * p_node, bool p_keep_data = false) : void</text><ellipse cx="19320.05" cy="5474.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="19329.05" y="5477.8354">set_pause_mode(Node::PauseMode p_mode) : void</text><ellipse cx="19320.05" cy="5487.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="19329.05" y="5490.6401">get_pause_mode() const : Node::PauseMode</text><ellipse cx="19320.05" cy="5500.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="19329.05" y="5503.4448">can_process() const : bool</text><ellipse cx="19320.05" cy="5513.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="19329.05" y="5516.2495">can_process_notification(int p_what) const : bool</text><ellipse cx="19320.05" cy="5525.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="19329.05" y="5529.0542">request_ready() : void</text><ellipse cx="19320.05" cy="5538.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="19329.05" y="5541.8589">print_stray_nodes() : void</text><ellipse cx="19320.05" cy="5551.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="19329.05" y="5554.6636">validate_child_name(Node * p_child) : String</text><ellipse cx="19320.05" cy="5564.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="19329.05" y="5567.4683">queue_delete() : void</text><ellipse cx="19320.05" cy="5577.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="360" x="19329.05" y="5580.2729">set_human_readable_collision_renaming(bool p_enabled) : void</text><ellipse cx="19320.05" cy="5589.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="123" x="19329.05" y="5593.0776">init_node_hrcr() : void</text><ellipse cx="19320.05" cy="5602.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="19329.05" y="5605.8823">force_parent_owned() : void</text><ellipse cx="19320.05" cy="5615.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="19329.05" y="5618.687">set_import_path(const NodePath &amp; p_import_path) : void</text><ellipse cx="19320.05" cy="5628.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="19329.05" y="5631.4917">get_import_path() const : NodePath</text><ellipse cx="19320.05" cy="5641.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="19329.05" y="5644.2964">is_owned_by_parent() const : bool</text><ellipse cx="19320.05" cy="5653.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="19329.05" y="5657.1011">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="19320.05" cy="5666.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="19329.05" y="5669.9058">clear_internal_tree_resource_paths() : void</text><ellipse cx="19320.05" cy="5679.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="19329.05" y="5682.7104">get_viewport() const : Viewport *</text><ellipse cx="19320.05" cy="5692.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="19329.05" y="5695.5151">get_configuration_warning() const : String</text><ellipse cx="19320.05" cy="5705.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="19329.05" y="5708.3198">update_configuration_warning() : void</text><ellipse cx="19320.05" cy="5717.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="19329.05" y="5721.1245">set_display_folded(bool p_folded) : void</text><ellipse cx="19320.05" cy="5730.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="19329.05" y="5733.9292">is_displayed_folded() const : bool</text><ellipse cx="19320.05" cy="5743.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="19329.05" y="5746.7339">set_network_master(int p_peer_id, bool p_recursive = true) : void</text><ellipse cx="19320.05" cy="5756.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="19329.05" y="5759.5386">get_network_master() const : int</text><ellipse cx="19320.05" cy="5769.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="19329.05" y="5772.3433">is_network_master() const : bool</text><ellipse cx="19320.05" cy="5781.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="19329.05" y="5785.1479">rpc_config(const StringName &amp; p_method, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="19320.05" cy="5794.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="19329.05" y="5797.9526">rset_config(const StringName &amp; p_property, MultiplayerAPI::RPCMode p_mode) : void</text><ellipse cx="19320.05" cy="5807.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1262" x="19329.05" y="5810.7573">rpc(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="19320.05" cy="5820.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1324" x="19329.05" y="5823.562">rpc_unreliable(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="19320.05" cy="5833.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="19329.05" y="5836.3667">rpc_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="19320.05" cy="5845.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1421" x="19329.05" y="5849.1714">rpc_unreliable_id(int p_peer_id, const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="19320.05" cy="5858.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="19329.05" y="5861.9761">rset(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="19320.05" cy="5871.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="19329.05" y="5874.7808">rset_unreliable(const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="19320.05" cy="5884.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="19329.05" y="5887.5854">rset_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="19320.05" cy="5897.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="19329.05" y="5900.3901">rset_unreliable_id(int p_peer_id, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="19320.05" cy="5909.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="654" x="19329.05" y="5913.1948">rpcp(int p_peer_id, bool p_unreliable, const StringName &amp; p_method, const Variant ** p_arg, int p_argcount) : void</text><ellipse cx="19320.05" cy="5922.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="19329.05" y="5925.9995">rsetp(int p_peer_id, bool p_unreliable, const StringName &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="19320.05" cy="5935.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="19329.05" y="5938.8042">get_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="19320.05" cy="5948.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="19329.05" y="5951.6089">get_custom_multiplayer() const : Ref&lt;MultiplayerAPI&gt;</text><ellipse cx="19320.05" cy="5961.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="19329.05" y="5964.4136">set_custom_multiplayer(Ref&lt;MultiplayerAPI&gt; p_multiplayer) : void</text><ellipse cx="19320.05" cy="5974.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="659" x="19329.05" y="5977.2183">get_node_rpc_mode(const StringName &amp; p_method) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="19320.05" cy="5986.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="19329.05" y="5990.0229">get_node_rset_mode(const StringName &amp; p_property) : const Map&lt;StringName,MultiplayerAPI::RPCMode&gt;::Element *</text><ellipse cx="19320.05" cy="5999.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="19329.05" y="6002.8276">Node() : void</text><ellipse cx="19320.05" cy="6012.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="19329.05" y="6015.6323">~Node() : void</text><!--MD5=[88b426eff1894866fc41c8357e83d201]
class C_0000933379568804427881--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" target="_top" title="ObjectRC" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54" xlink:show="new" xlink:title="ObjectRC" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="124.8281" id="C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.5;" width="217" x="8960.05" y="1757.9531"/><ellipse cx="9036.3" cy="1773.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9039.2688,1779.5938 Q9038.6906,1779.8906 9038.05,1780.0313 Q9037.4094,1780.1875 9036.7063,1780.1875 Q9034.2063,1780.1875 9032.8781,1778.5469 Q9031.5656,1776.8906 9031.5656,1773.7656 Q9031.5656,1770.6406 9032.8781,1768.9844 Q9034.2063,1767.3281 9036.7063,1767.3281 Q9037.4094,1767.3281 9038.05,1767.4844 Q9038.7063,1767.6406 9039.2688,1767.9375 L9039.2688,1770.6563 Q9038.6438,1770.0781 9038.05,1769.8125 Q9037.4563,1769.5313 9036.8313,1769.5313 Q9035.4875,1769.5313 9034.8,1770.6094 Q9034.1125,1771.6719 9034.1125,1773.7656 Q9034.1125,1775.8594 9034.8,1776.9375 Q9035.4875,1778 9036.8313,1778 Q9037.4563,1778 9038.05,1777.7344 Q9038.6438,1777.4531 9039.2688,1776.875 L9039.2688,1779.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="9056.8" y="1778.1074">ObjectRC</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8961.05" x2="9176.05" y1="1789.9531" y2="1789.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8966.05" y="1795.9531"/><ellipse cx="8971.05" cy="1800.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" target="_top" title="instance_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52" xlink:show="new" xlink:title="instance_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="8980.05" y="1804.1636">instance_id : const ObjectID</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="8961.05" x2="9176.05" y1="1810.7578" y2="1810.7578"/><ellipse cx="8971.05" cy="1821.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="8980.05" y="1824.9683">increment() : void</text><ellipse cx="8971.05" cy="1834.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="8980.05" y="1837.7729">decrement() : bool</text><ellipse cx="8971.05" cy="1847.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="8980.05" y="1850.5776">invalidate() : bool</text><ellipse cx="8971.05" cy="1860.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="8980.05" y="1863.3823">get_ptr() : Object *</text><ellipse cx="8971.05" cy="1872.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="8980.05" y="1876.187">ObjectRC(Object * p_object) : void</text><!--MD5=[20a137ad8bfb5b27a1303d95d4ed4f68]
class C_0001735438654351294549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" target="_top" title="ScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405" xlink:show="new" xlink:title="ScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="368.1172" id="C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.5;" width="1349" x="9284.05" y="1636.4531"/><ellipse cx="9909.3" cy="1652.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9909.4094,1647.7969 L9908.2531,1652.875 L9910.5813,1652.875 L9909.4094,1647.7969 Z M9907.925,1645.5625 L9910.9094,1645.5625 L9914.2688,1657.9531 L9911.8156,1657.9531 L9911.05,1654.8906 L9907.7688,1654.8906 L9907.0188,1657.9531 L9904.5813,1657.9531 L9907.925,1645.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="90" x="9929.8" y="1656.6074">ScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9285.05" x2="10632.05" y1="1668.4531" y2="1668.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9285.05" x2="10632.05" y1="1676.4531" y2="1676.4531"/><ellipse cx="9295.05" cy="1687.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="9304.05" y="1690.6636">set(const StringName &amp; p_name, const Variant &amp; p_value) = 0 : bool</text><ellipse cx="9295.05" cy="1700.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="9304.05" y="1703.4683">get(const StringName &amp; p_name, Variant &amp; r_ret) const = 0 : bool</text><ellipse cx="9295.05" cy="1713.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="389" x="9304.05" y="1716.2729">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const = 0 : void</text><ellipse cx="9295.05" cy="1725.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="9304.05" y="1729.0776">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const = 0 : Variant::Type</text><ellipse cx="9295.05" cy="1738.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="9304.05" y="1741.8823">get_owner() : Object *</text><ellipse cx="9295.05" cy="1751.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="9304.05" y="1754.687">get_property_state(List&lt;Pair&lt;StringName,Variant&gt;&gt; &amp; state) : void</text><ellipse cx="9295.05" cy="1764.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="333" x="9304.05" y="1767.4917">get_method_list(List&lt;MethodInfo&gt; * p_list) const = 0 : void</text><ellipse cx="9295.05" cy="1777.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="9304.05" y="1780.2964">has_method(const StringName &amp; p_method) const = 0 : bool</text><ellipse cx="9295.05" cy="1789.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="9304.05" y="1793.1011">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="9295.05" cy="1802.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="671" x="9304.05" y="1805.9058">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) = 0 : Variant</text><ellipse cx="9295.05" cy="1815.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1323" x="9304.05" y="1818.7104">call_multilevel(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="9295.05" cy="1828.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="9304.05" y="1831.5151">call_multilevel(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="9295.05" cy="1841.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="9304.05" y="1844.3198">call_multilevel_reversed(const StringName &amp; p_method, const Variant ** p_args, int p_argcount) : void</text><ellipse cx="9295.05" cy="1853.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="223" x="9304.05" y="1857.1245">notification(int p_notification) = 0 : void</text><ellipse cx="9295.05" cy="1866.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="9304.05" y="1869.9292">to_string(bool * r_valid) : String</text><ellipse cx="9295.05" cy="1879.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="9304.05" y="1882.7339">refcount_incremented() : void</text><ellipse cx="9295.05" cy="1892.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="9304.05" y="1895.5386">refcount_decremented() : bool</text><ellipse cx="9295.05" cy="1905.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="202" x="9304.05" y="1908.3433">get_script() const = 0 : Ref&lt;Script&gt;</text><ellipse cx="9295.05" cy="1917.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="9304.05" y="1921.1479">is_placeholder() const : bool</text><ellipse cx="9295.05" cy="1930.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="556" x="9304.05" y="1933.9526">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid) : void</text><ellipse cx="9295.05" cy="1943.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="9304.05" y="1946.7573">property_get_fallback(const StringName &amp; p_name, bool * r_valid) : Variant</text><ellipse cx="9295.05" cy="1956.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="9304.05" y="1959.562">get_rpc_mode(const StringName &amp; p_method) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="9295.05" cy="1969.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="479" x="9304.05" y="1972.3667">get_rset_mode(const StringName &amp; p_variable) const = 0 : MultiplayerAPI::RPCMode</text><ellipse cx="9295.05" cy="1981.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="9304.05" y="1985.1714">get_language() = 0 : ScriptLanguage *</text><ellipse cx="9295.05" cy="1994.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="9304.05" y="1997.9761">~ScriptInstance() : void</text></a><!--MD5=[20209edb2b2a39856a637a9459a4ae92]
class C_0001649884439586022807--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" target="_top" title="PlaceHolderScriptInstance" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374" xlink:show="new" xlink:title="PlaceHolderScriptInstance" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="304.0938" id="C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.5;" width="1306" x="4971.55" y="4789.9531"/><ellipse cx="5537.8" cy="4805.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5540.7688,4811.5938 Q5540.1906,4811.8906 5539.55,4812.0313 Q5538.9094,4812.1875 5538.2063,4812.1875 Q5535.7063,4812.1875 5534.3781,4810.5469 Q5533.0656,4808.8906 5533.0656,4805.7656 Q5533.0656,4802.6406 5534.3781,4800.9844 Q5535.7063,4799.3281 5538.2063,4799.3281 Q5538.9094,4799.3281 5539.55,4799.4844 Q5540.2063,4799.6406 5540.7688,4799.9375 L5540.7688,4802.6563 Q5540.1438,4802.0781 5539.55,4801.8125 Q5538.9563,4801.5313 5538.3313,4801.5313 Q5536.9875,4801.5313 5536.3,4802.6094 Q5535.6125,4803.6719 5535.6125,4805.7656 Q5535.6125,4807.8594 5536.3,4808.9375 Q5536.9875,4810 5538.3313,4810 Q5538.9563,4810 5539.55,4809.7344 Q5540.1438,4809.4531 5540.7688,4808.875 L5540.7688,4811.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="165" x="5558.3" y="4810.1074">PlaceHolderScriptInstance</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4972.55" x2="6276.55" y1="4821.9531" y2="4821.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4972.55" x2="6276.55" y1="4829.9531" y2="4829.9531"/><ellipse cx="4982.55" cy="4840.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="4991.55" y="4844.1636">set(const StringName &amp; p_name, const Variant &amp; p_value) : bool</text><ellipse cx="4982.55" cy="4853.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="4991.55" y="4856.9683">get(const StringName &amp; p_name, Variant &amp; r_ret) const : bool</text><ellipse cx="4982.55" cy="4866.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="4991.55" y="4869.7729">get_property_list(List&lt;PropertyInfo&gt; * p_properties) const : void</text><ellipse cx="4982.55" cy="4879.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="4991.55" y="4882.5776">get_property_type(const StringName &amp; p_name, bool * r_is_valid = __null) const : Variant::Type</text><ellipse cx="4982.55" cy="4892.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="4991.55" y="4895.3823">get_method_list(List&lt;MethodInfo&gt; * p_list) const : void</text><ellipse cx="4982.55" cy="4904.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="4991.55" y="4908.187">has_method(const StringName &amp; p_method) const : bool</text><ellipse cx="4982.55" cy="4917.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1280" x="4991.55" y="4920.9917">call(const StringName &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : Variant</text><ellipse cx="4982.55" cy="4930.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="650" x="4991.55" y="4933.7964">call(const StringName &amp; p_method, const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="4982.55" cy="4943.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="4991.55" y="4946.6011">notification(int p_notification) : void</text><ellipse cx="4982.55" cy="4956.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="4991.55" y="4959.4058">get_script() const : Ref&lt;Script&gt;</text><ellipse cx="4982.55" cy="4969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="4991.55" y="4972.2104">get_language() : ScriptLanguage *</text><ellipse cx="4982.55" cy="4981.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="4991.55" y="4985.0151">get_owner() : Object *</text><ellipse cx="4982.55" cy="4994.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="4991.55" y="4997.8198">update(const List&lt;PropertyInfo&gt; &amp; p_properties, const Map&lt;StringName,Variant&gt; &amp; p_values) : void</text><ellipse cx="4982.55" cy="5007.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="4991.55" y="5010.6245">is_placeholder() const : bool</text><ellipse cx="4982.55" cy="5020.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="605" x="4991.55" y="5023.4292">property_set_fallback(const StringName &amp; p_name, const Variant &amp; p_value, bool * r_valid = __null) : void</text><ellipse cx="4982.55" cy="5033.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="4991.55" y="5036.2339">property_get_fallback(const StringName &amp; p_name, bool * r_valid = __null) : Variant</text><ellipse cx="4982.55" cy="5045.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="4991.55" y="5049.0386">get_rpc_mode(const StringName &amp; p_method) const : MultiplayerAPI::RPCMode</text><ellipse cx="4982.55" cy="5058.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="4991.55" y="5061.8433">get_rset_mode(const StringName &amp; p_variable) const : MultiplayerAPI::RPCMode</text><ellipse cx="4982.55" cy="5071.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="590" x="4991.55" y="5074.6479">PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref&lt;Script&gt; p_script, Object * p_owner) : void</text><ellipse cx="4982.55" cy="5084.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="4991.55" y="5087.4526">~PlaceHolderScriptInstance() : void</text></a><!--MD5=[79e27d258fa9a526a1771d31d80b94ef]
class C_0000970940027123558604--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" target="_top" title="MainLoop" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38" xlink:show="new" xlink:title="MainLoop" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="521.7734" id="C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.5;" width="440" x="20791.55" y="4680.9531"/><ellipse cx="20977.8" cy="4696.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M20980.7688,4702.5938 Q20980.1906,4702.8906 20979.55,4703.0313 Q20978.9094,4703.1875 20978.2063,4703.1875 Q20975.7063,4703.1875 20974.3781,4701.5469 Q20973.0656,4699.8906 20973.0656,4696.7656 Q20973.0656,4693.6406 20974.3781,4691.9844 Q20975.7063,4690.3281 20978.2063,4690.3281 Q20978.9094,4690.3281 20979.55,4690.4844 Q20980.2063,4690.6406 20980.7688,4690.9375 L20980.7688,4693.6563 Q20980.1438,4693.0781 20979.55,4692.8125 Q20978.9563,4692.5313 20978.3313,4692.5313 Q20976.9875,4692.5313 20976.3,4693.6094 Q20975.6125,4694.6719 20975.6125,4696.7656 Q20975.6125,4698.8594 20976.3,4699.9375 Q20976.9875,4701 20978.3313,4701 Q20978.9563,4701 20979.55,4700.7344 Q20980.1438,4700.4531 20980.7688,4699.875 L20980.7688,4702.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="20998.3" y="4701.1074">MainLoop</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20792.55" x2="21230.55" y1="4712.9531" y2="4712.9531"/><ellipse cx="20802.55" cy="4723.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="20811.55" y="4727.1636">NOTIFICATION_WM_MOUSE_ENTER : enum</text><ellipse cx="20802.55" cy="4736.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="20811.55" y="4739.9683">NOTIFICATION_WM_MOUSE_EXIT : enum</text><ellipse cx="20802.55" cy="4749.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="20811.55" y="4752.7729">NOTIFICATION_WM_FOCUS_IN : enum</text><ellipse cx="20802.55" cy="4762.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="20811.55" y="4765.5776">NOTIFICATION_WM_FOCUS_OUT : enum</text><ellipse cx="20802.55" cy="4775.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="20811.55" y="4778.3823">NOTIFICATION_WM_QUIT_REQUEST : enum</text><ellipse cx="20802.55" cy="4787.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="20811.55" y="4791.187">NOTIFICATION_WM_GO_BACK_REQUEST : enum</text><ellipse cx="20802.55" cy="4800.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="20811.55" y="4803.9917">NOTIFICATION_WM_UNFOCUS_REQUEST : enum</text><ellipse cx="20802.55" cy="4813.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="20811.55" y="4816.7964">NOTIFICATION_OS_MEMORY_WARNING : enum</text><ellipse cx="20802.55" cy="4826.3906" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="20811.55" y="4829.6011">NOTIFICATION_TRANSLATION_CHANGED : enum</text><ellipse cx="20802.55" cy="4839.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="20811.55" y="4842.4058">NOTIFICATION_WM_ABOUT : enum</text><ellipse cx="20802.55" cy="4852" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="20811.55" y="4855.2104">NOTIFICATION_CRASH : enum</text><ellipse cx="20802.55" cy="4864.8047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="20811.55" y="4868.0151">NOTIFICATION_OS_IME_UPDATE : enum</text><ellipse cx="20802.55" cy="4877.6094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="20811.55" y="4880.8198">NOTIFICATION_APP_RESUMED : enum</text><ellipse cx="20802.55" cy="4890.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="20811.55" y="4893.6245">NOTIFICATION_APP_PAUSED : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="20792.55" x2="21230.55" y1="4900.2188" y2="4900.2188"/><ellipse cx="20802.55" cy="4911.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="20811.55" y="4914.4292">get_class() const : String</text><ellipse cx="20802.55" cy="4924.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="20811.55" y="4927.2339">_get_class_namev() const : const StringName *</text><ellipse cx="20802.55" cy="4936.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="20811.55" y="4940.0386">get_class_ptr_static() : void *</text><ellipse cx="20802.55" cy="4949.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="20811.55" y="4952.8433">get_class_static() : String</text><ellipse cx="20802.55" cy="4962.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="20811.55" y="4965.6479">get_parent_class_static() : String</text><ellipse cx="20802.55" cy="4975.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="20811.55" y="4978.4526">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="20802.55" cy="4988.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="20811.55" y="4991.2573">get_category_static() : String</text><ellipse cx="20802.55" cy="5000.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="20811.55" y="5004.062">inherits_static() : String</text><ellipse cx="20802.55" cy="5013.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="20811.55" y="5016.8667">is_class(const String &amp; p_class) const : bool</text><ellipse cx="20802.55" cy="5026.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="20811.55" y="5029.6714">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="20802.55" cy="5039.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="20811.55" y="5042.4761">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="20802.55" cy="5052.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="20811.55" y="5055.2808">initialize_class() : void</text><ellipse cx="20802.55" cy="5064.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="20811.55" y="5068.0854">input_event(const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="20802.55" cy="5077.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="20811.55" y="5080.8901">input_text(const String &amp; p_text) : void</text><ellipse cx="20802.55" cy="5090.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="20811.55" y="5093.6948">init() : void</text><ellipse cx="20802.55" cy="5103.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="20811.55" y="5106.4995">iteration(float p_time) : bool</text><ellipse cx="20802.55" cy="5116.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="20811.55" y="5119.3042">idle(float p_time) : bool</text><ellipse cx="20802.55" cy="5128.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="20811.55" y="5132.1089">finish() : void</text><ellipse cx="20802.55" cy="5141.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="20811.55" y="5144.9136">drop_files(const Vector&lt;String&gt; &amp; p_files, int p_from_screen = 0) : void</text><ellipse cx="20802.55" cy="5154.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="20811.55" y="5157.7183">global_menu_action(const Variant &amp; p_id, const Variant &amp; p_meta) : void</text><ellipse cx="20802.55" cy="5167.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="20811.55" y="5170.5229">set_init_script(const Ref&lt;Script&gt; &amp; p_init_script) : void</text><ellipse cx="20802.55" cy="5180.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="20811.55" y="5183.3276">MainLoop() : void</text><ellipse cx="20802.55" cy="5192.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="20811.55" y="5196.1323">~MainLoop() : void</text></a><!--MD5=[2ff27342a65908c4b6ff1f7f17075b0e]
class C_0001823345232236209470--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" target="_top" title="Engine##Singleton" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42" xlink:show="new" xlink:title="Engine##Singleton" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="86.4141" id="C_0001823345232236209470" style="stroke: #A80036; stroke-width: 1.5;" width="515" x="24938.05" y="73.9531"/><ellipse cx="25136.3" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25139.2688,95.5938 Q25138.6906,95.8906 25138.05,96.0313 Q25137.4094,96.1875 25136.7063,96.1875 Q25134.2063,96.1875 25132.8781,94.5469 Q25131.5656,92.8906 25131.5656,89.7656 Q25131.5656,86.6406 25132.8781,84.9844 Q25134.2063,83.3281 25136.7063,83.3281 Q25137.4094,83.3281 25138.05,83.4844 Q25138.7063,83.6406 25139.2688,83.9375 L25139.2688,86.6563 Q25138.6438,86.0781 25138.05,85.8125 Q25137.4563,85.5313 25136.8313,85.5313 Q25135.4875,85.5313 25134.8,86.6094 Q25134.1125,87.6719 25134.1125,89.7656 Q25134.1125,91.8594 25134.8,92.9375 Q25135.4875,94 25136.8313,94 Q25137.4563,94 25138.05,93.7344 Q25138.6438,93.4531 25139.2688,92.875 L25139.2688,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="25156.8" y="94.1074">Engine::Singleton</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="24939.05" x2="25452.05" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24944.05" y="111.9531"/><ellipse cx="24949.05" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" target="_top" title="name" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43" xlink:show="new" xlink:title="name" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="24958.05" y="120.1636">name : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="24944.05" y="124.7578"/><ellipse cx="24949.05" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" target="_top" title="ptr" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44" xlink:show="new" xlink:title="ptr" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="24958.05" y="132.9683">ptr : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="24939.05" x2="25452.05" y1="139.5625" y2="139.5625"/><ellipse cx="24949.05" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="489" x="24958.05" y="153.7729">Singleton(const StringName &amp; p_name = StringName(), Object * p_ptr = __null) : void</text><!--MD5=[3d4aa6b0ee5484ffc25bead94ef18955]
class C_0001485048025194488343--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" target="_top" title="TranslationServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67" xlink:show="new" xlink:title="TranslationServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="470.5547" id="C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.5;" width="412" x="18761.55" y="4706.4531"/><ellipse cx="18908.3" cy="4722.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M18911.2688,4728.0938 Q18910.6906,4728.3906 18910.05,4728.5313 Q18909.4094,4728.6875 18908.7063,4728.6875 Q18906.2063,4728.6875 18904.8781,4727.0469 Q18903.5656,4725.3906 18903.5656,4722.2656 Q18903.5656,4719.1406 18904.8781,4717.4844 Q18906.2063,4715.8281 18908.7063,4715.8281 Q18909.4094,4715.8281 18910.05,4715.9844 Q18910.7063,4716.1406 18911.2688,4716.4375 L18911.2688,4719.1563 Q18910.6438,4718.5781 18910.05,4718.3125 Q18909.4563,4718.0313 18908.8313,4718.0313 Q18907.4875,4718.0313 18906.8,4719.1094 Q18906.1125,4720.1719 18906.1125,4722.2656 Q18906.1125,4724.3594 18906.8,4725.4375 Q18907.4875,4726.5 18908.8313,4726.5 Q18909.4563,4726.5 18910.05,4726.2344 Q18910.6438,4725.9531 18911.2688,4725.375 L18911.2688,4728.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="18928.8" y="4726.6074">TranslationServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18762.55" x2="19172.55" y1="4738.4531" y2="4738.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="18762.55" x2="19172.55" y1="4746.4531" y2="4746.4531"/><ellipse cx="18772.55" cy="4757.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="18781.55" y="4760.6636">get_class() const : String</text><ellipse cx="18772.55" cy="4770.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="18781.55" y="4773.4683">_get_class_namev() const : const StringName *</text><ellipse cx="18772.55" cy="4783.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="18781.55" y="4786.2729">get_class_ptr_static() : void *</text><ellipse cx="18772.55" cy="4795.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="18781.55" y="4799.0776">get_class_static() : String</text><ellipse cx="18772.55" cy="4808.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="18781.55" y="4811.8823">get_parent_class_static() : String</text><ellipse cx="18772.55" cy="4821.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="18781.55" y="4824.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="18772.55" cy="4834.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="18781.55" y="4837.4917">get_category_static() : String</text><ellipse cx="18772.55" cy="4847.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="18781.55" y="4850.2964">inherits_static() : String</text><ellipse cx="18772.55" cy="4859.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="18781.55" y="4863.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="18772.55" cy="4872.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="18781.55" y="4875.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="18772.55" cy="4885.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="18781.55" y="4888.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="18772.55" cy="4898.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="18781.55" y="4901.5151">initialize_class() : void</text><ellipse cx="18772.55" cy="4911.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="208" x="18781.55" y="4914.3198">get_singleton() : TranslationServer *</text><ellipse cx="18772.55" cy="4923.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="18781.55" y="4927.1245">set_enabled(bool p_enabled) : void</text><ellipse cx="18772.55" cy="4936.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="18781.55" y="4939.9292">is_enabled() const : bool</text><ellipse cx="18772.55" cy="4949.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="18781.55" y="4952.7339">set_locale(const String &amp; p_locale) : void</text><ellipse cx="18772.55" cy="4962.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="18781.55" y="4965.5386">get_locale() const : String</text><ellipse cx="18772.55" cy="4975.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="18781.55" y="4978.3433">get_locale_name(const String &amp; p_locale) const : String</text><ellipse cx="18772.55" cy="4987.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="18781.55" y="4991.1479">get_loaded_locales() const : Array</text><ellipse cx="18772.55" cy="5000.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="18781.55" y="5003.9526">add_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="18772.55" cy="5013.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="18781.55" y="5016.7573">remove_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="18772.55" cy="5026.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="18781.55" y="5029.562">translate(const StringName &amp; p_message) const : StringName</text><ellipse cx="18772.55" cy="5039.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="191" x="18781.55" y="5042.3667">get_all_locales() : Vector&lt;String&gt;</text><ellipse cx="18772.55" cy="5051.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="229" x="18781.55" y="5055.1714">get_all_locale_names() : Vector&lt;String&gt;</text><ellipse cx="18772.55" cy="5064.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="258" x="18781.55" y="5067.9761">is_locale_valid(const String &amp; p_locale) : bool</text><ellipse cx="18772.55" cy="5077.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="18781.55" y="5080.7808">standardize_locale(const String &amp; p_locale) : String</text><ellipse cx="18772.55" cy="5090.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="296" x="18781.55" y="5093.5854">get_language_code(const String &amp; p_locale) : String</text><ellipse cx="18772.55" cy="5103.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="18781.55" y="5106.3901">set_tool_translation(const Ref&lt;Translation&gt; &amp; p_translation) : void</text><ellipse cx="18772.55" cy="5115.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="18781.55" y="5119.1948">tool_translate(const StringName &amp; p_message) const : StringName</text><ellipse cx="18772.55" cy="5128.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="18781.55" y="5131.9995">setup() : void</text><ellipse cx="18772.55" cy="5141.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="18781.55" y="5144.8042">clear() : void</text><ellipse cx="18772.55" cy="5154.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="18781.55" y="5157.6089">load_translations() : void</text><ellipse cx="18772.55" cy="5167.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="18781.55" y="5170.4136">TranslationServer() : void</text></a><!--MD5=[2e1804fc10b971ae34ea328508bc0a5b]
class C_0000132048052014479231--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" target="_top" title="_ObjectDebugLock" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45" xlink:show="new" xlink:title="_ObjectDebugLock" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="86.4141" id="C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.5;" width="252" x="10668.55" y="1777.4531"/><ellipse cx="10732.8" cy="1793.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M10735.7688,1799.0938 Q10735.1906,1799.3906 10734.55,1799.5313 Q10733.9094,1799.6875 10733.2063,1799.6875 Q10730.7063,1799.6875 10729.3781,1798.0469 Q10728.0656,1796.3906 10728.0656,1793.2656 Q10728.0656,1790.1406 10729.3781,1788.4844 Q10730.7063,1786.8281 10733.2063,1786.8281 Q10733.9094,1786.8281 10734.55,1786.9844 Q10735.2063,1787.1406 10735.7688,1787.4375 L10735.7688,1790.1563 Q10735.1438,1789.5781 10734.55,1789.3125 Q10733.9563,1789.0313 10733.3313,1789.0313 Q10731.9875,1789.0313 10731.3,1790.1094 Q10730.6125,1791.1719 10730.6125,1793.2656 Q10730.6125,1795.3594 10731.3,1796.4375 Q10731.9875,1797.5 10733.3313,1797.5 Q10733.9563,1797.5 10734.55,1797.2344 Q10735.1438,1796.9531 10735.7688,1796.375 L10735.7688,1799.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="10753.3" y="1797.6074">_ObjectDebugLock</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10669.55" x2="10919.55" y1="1809.4531" y2="1809.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10674.55" y="1815.4531"/><ellipse cx="10679.55" cy="1820.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="10688.55" y="1823.6636">obj : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="10669.55" x2="10919.55" y1="1830.2578" y2="1830.2578"/><ellipse cx="10679.55" cy="1841.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="10688.55" y="1844.4683">_ObjectDebugLock(Object * p_obj) : void</text><ellipse cx="10679.55" cy="1854.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="10688.55" y="1857.2729">_ObjectDebugLock() : void</text><!--MD5=[4e04dc62cf4bb361958a89934798b4f1]
class C_0000115801560197752094--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" target="_top" title="_ObjectSignalDisconnectData" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147" xlink:show="new" xlink:title="_ObjectSignalDisconnectData" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="86.4141" id="C_0000115801560197752094" style="stroke: #A80036; stroke-width: 1.5;" width="216" x="25488.55" y="73.9531"/><ellipse cx="25503.55" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M25506.5188,95.5938 Q25505.9406,95.8906 25505.3,96.0313 Q25504.6594,96.1875 25503.9563,96.1875 Q25501.4563,96.1875 25500.1281,94.5469 Q25498.8156,92.8906 25498.8156,89.7656 Q25498.8156,86.6406 25500.1281,84.9844 Q25501.4563,83.3281 25503.9563,83.3281 Q25504.6594,83.3281 25505.3,83.4844 Q25505.9563,83.6406 25506.5188,83.9375 L25506.5188,86.6563 Q25505.8938,86.0781 25505.3,85.8125 Q25504.7063,85.5313 25504.0813,85.5313 Q25502.7375,85.5313 25502.05,86.6094 Q25501.3625,87.6719 25501.3625,89.7656 Q25501.3625,91.8594 25502.05,92.9375 Q25502.7375,94 25504.0813,94 Q25504.7063,94 25505.3,93.7344 Q25505.8938,93.4531 25506.5188,92.875 L25506.5188,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="184" x="25517.55" y="94.1074">_ObjectSignalDisconnectData</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="25489.55" x2="25703.55" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25494.55" y="111.9531"/><ellipse cx="25499.55" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" target="_top" title="signal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149" xlink:show="new" xlink:title="signal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="25508.55" y="120.1636">signal : StringName</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25494.55" y="124.7578"/><ellipse cx="25499.55" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" target="_top" title="target" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150" xlink:show="new" xlink:title="target" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="25508.55" y="132.9683">target : Object *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="25489.55" x2="25703.55" y1="139.5625" y2="139.5625"/><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="25494.55" y="145.5625"/><ellipse cx="25499.55" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" target="_top" title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:show="new" xlink:title="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="25508.55" y="153.7729">method : StringName</text></a><!--MD5=[572807c339726b4650e58d5aced39533]
class C_0000066148521405667716--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" target="_top" title="ProjectSettings" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38" xlink:show="new" xlink:title="ProjectSettings" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="598.6016" id="C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.5;" width="1244" x="11655.55" y="1520.9531"/><ellipse cx="12225.3" cy="1536.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12228.2688,1542.5938 Q12227.6906,1542.8906 12227.05,1543.0313 Q12226.4094,1543.1875 12225.7063,1543.1875 Q12223.2063,1543.1875 12221.8781,1541.5469 Q12220.5656,1539.8906 12220.5656,1536.7656 Q12220.5656,1533.6406 12221.8781,1531.9844 Q12223.2063,1530.3281 12225.7063,1530.3281 Q12226.4094,1530.3281 12227.05,1530.4844 Q12227.7063,1530.6406 12228.2688,1530.9375 L12228.2688,1533.6563 Q12227.6438,1533.0781 12227.05,1532.8125 Q12226.4563,1532.5313 12225.8313,1532.5313 Q12224.4875,1532.5313 12223.8,1533.6094 Q12223.1125,1534.6719 12223.1125,1536.7656 Q12223.1125,1538.8594 12223.8,1539.9375 Q12224.4875,1541 12225.8313,1541 Q12226.4563,1541 12227.05,1540.7344 Q12227.6438,1540.4531 12228.2688,1539.875 L12228.2688,1542.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="12245.8" y="1541.1074">ProjectSettings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11656.55" x2="12898.55" y1="1552.9531" y2="1552.9531"/><ellipse cx="11666.55" cy="1563.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="11675.55" y="1567.1636">NO_BUILTIN_ORDER_BASE : enum</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="11661.55" y="1571.7578"/><ellipse cx="11666.55" cy="1576.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" target="_top" title="CONFIG_VERSION" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117" xlink:show="new" xlink:title="CONFIG_VERSION" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="159" x="11675.55" y="1579.9683">CONFIG_VERSION : const int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="11656.55" x2="12898.55" y1="1586.5625" y2="1586.5625"/><ellipse cx="11666.55" cy="1597.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="11675.55" y="1600.7729">get_class() const : String</text><ellipse cx="11666.55" cy="1610.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="11675.55" y="1613.5776">_get_class_namev() const : const StringName *</text><ellipse cx="11666.55" cy="1623.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="11675.55" y="1626.3823">get_class_ptr_static() : void *</text><ellipse cx="11666.55" cy="1635.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="11675.55" y="1639.187">get_class_static() : String</text><ellipse cx="11666.55" cy="1648.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="11675.55" y="1651.9917">get_parent_class_static() : String</text><ellipse cx="11666.55" cy="1661.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="11675.55" y="1664.7964">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="11666.55" cy="1674.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="11675.55" y="1677.6011">get_category_static() : String</text><ellipse cx="11666.55" cy="1687.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="11675.55" y="1690.4058">inherits_static() : String</text><ellipse cx="11666.55" cy="1700" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="11675.55" y="1703.2104">is_class(const String &amp; p_class) const : bool</text><ellipse cx="11666.55" cy="1712.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="11675.55" y="1716.0151">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="11666.55" cy="1725.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="11675.55" y="1728.8198">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="11666.55" cy="1738.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="11675.55" y="1741.6245">initialize_class() : void</text><ellipse cx="11666.55" cy="1751.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="11675.55" y="1754.4292">set_setting(const String &amp; p_setting, const Variant &amp; p_value) : void</text><ellipse cx="11666.55" cy="1764.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="11675.55" y="1767.2339">get_setting(const String &amp; p_setting) const : Variant</text><ellipse cx="11666.55" cy="1776.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="11675.55" y="1780.0386">has_setting(String p_var) const : bool</text><ellipse cx="11666.55" cy="1789.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="11675.55" y="1792.8433">localize_path(const String &amp; p_path) const : String</text><ellipse cx="11666.55" cy="1802.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="11675.55" y="1805.6479">globalize_path(const String &amp; p_path) const : String</text><ellipse cx="11666.55" cy="1815.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="11675.55" y="1818.4526">set_initial_value(const String &amp; p_name, const Variant &amp; p_value) : void</text><ellipse cx="11666.55" cy="1828.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="11675.55" y="1831.2573">set_restart_if_changed(const String &amp; p_name, bool p_restart) : void</text><ellipse cx="11666.55" cy="1840.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="11675.55" y="1844.062">property_can_revert(const String &amp; p_name) : bool</text><ellipse cx="11666.55" cy="1853.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="11675.55" y="1856.8667">property_get_revert(const String &amp; p_name) : Variant</text><ellipse cx="11666.55" cy="1866.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="11675.55" y="1869.6714">get_resource_path() const : String</text><ellipse cx="11666.55" cy="1879.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="192" x="11675.55" y="1882.4761">get_singleton() : ProjectSettings *</text><ellipse cx="11666.55" cy="1892.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="11675.55" y="1895.2808">clear(const String &amp; p_name) : void</text><ellipse cx="11666.55" cy="1904.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="11675.55" y="1908.0854">get_order(const String &amp; p_name) const : int</text><ellipse cx="11666.55" cy="1917.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="11675.55" y="1920.8901">set_order(const String &amp; p_name, int p_order) : void</text><ellipse cx="11666.55" cy="1930.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="11675.55" y="1933.6948">set_builtin_order(const String &amp; p_name) : void</text><ellipse cx="11666.55" cy="1943.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="11675.55" y="1946.4995">setup(const String &amp; p_path, const String &amp; p_main_pack, bool p_upwards = false) : Error</text><ellipse cx="11666.55" cy="1956.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1218" x="11675.55" y="1959.3042">save_custom(const String &amp; p_path = "", const ProjectSettings::CustomMap &amp; p_custom = CustomMap(), const Vector&lt;String&gt; &amp; p_custom_features = Vector&lt;String&gt;(), bool p_merge_with_current = true) : Error</text><ellipse cx="11666.55" cy="1968.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="11675.55" y="1972.1089">save() : Error</text><ellipse cx="11666.55" cy="1981.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="11675.55" y="1984.9136">set_custom_property_info(const String &amp; p_prop, const PropertyInfo &amp; p_info) : void</text><ellipse cx="11666.55" cy="1994.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="11675.55" y="1997.7183">get_custom_property_info() const : const Map&lt;StringName,PropertyInfo&gt; &amp;</text><ellipse cx="11666.55" cy="2007.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="11675.55" y="2010.5229">get_last_saved_time() : uint64_t</text><ellipse cx="11666.55" cy="2020.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="11675.55" y="2023.3276">get_optimizer_presets() const : Vector&lt;String&gt;</text><ellipse cx="11666.55" cy="2032.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="11675.55" y="2036.1323">get_input_presets() const : List&lt;String&gt;</text><ellipse cx="11666.55" cy="2045.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="11675.55" y="2048.937">set_disable_feature_overrides(bool p_disable) : void</text><ellipse cx="11666.55" cy="2058.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="11675.55" y="2061.7417">is_using_datapack() const : bool</text><ellipse cx="11666.55" cy="2071.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="11675.55" y="2074.5464">set_registering_order(bool p_enable) : void</text><ellipse cx="11666.55" cy="2084.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="11675.55" y="2087.3511">has_custom_feature(const String &amp; p_feature) const : bool</text><ellipse cx="11666.55" cy="2096.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="11675.55" y="2100.1558">ProjectSettings() : void</text><ellipse cx="11666.55" cy="2109.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="11675.55" y="2112.9604">~ProjectSettings() : void</text><!--MD5=[3066cc904e29be9ea26e95834396af6e]
class C_0001191393512042218074--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" target="_top" title="IP" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39" xlink:show="new" xlink:title="IP" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="380.9219" id="C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.5;" width="625" x="3443.05" y="4751.4531"/><ellipse cx="3745.8" cy="4767.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3745.9094,4762.7969 L3744.7531,4767.875 L3747.0813,4767.875 L3745.9094,4762.7969 Z M3744.425,4760.5625 L3747.4094,4760.5625 L3750.7688,4772.9531 L3748.3156,4772.9531 L3747.55,4769.8906 L3744.2688,4769.8906 L3743.5188,4772.9531 L3741.0813,4772.9531 L3744.425,4760.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="11" x="3766.3" y="4771.6074">IP</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3444.05" x2="4067.05" y1="4783.4531" y2="4783.4531"/><ellipse cx="3454.05" cy="4794.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="3463.05" y="4797.6636">RESOLVER_MAX_QUERIES : enum</text><ellipse cx="3454.05" cy="4807.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="3463.05" y="4810.4683">RESOLVER_INVALID_ID : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3444.05" x2="4067.05" y1="4817.0625" y2="4817.0625"/><ellipse cx="3454.05" cy="4828.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3463.05" y="4831.2729">get_class() const : String</text><ellipse cx="3454.05" cy="4840.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3463.05" y="4844.0776">_get_class_namev() const : const StringName *</text><ellipse cx="3454.05" cy="4853.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="3463.05" y="4856.8823">get_class_ptr_static() : void *</text><ellipse cx="3454.05" cy="4866.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="3463.05" y="4869.687">get_class_static() : String</text><ellipse cx="3454.05" cy="4879.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="3463.05" y="4882.4917">get_parent_class_static() : String</text><ellipse cx="3454.05" cy="4892.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="3463.05" y="4895.2964">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="3454.05" cy="4904.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="3463.05" y="4908.1011">get_category_static() : String</text><ellipse cx="3454.05" cy="4917.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="3463.05" y="4920.9058">inherits_static() : String</text><ellipse cx="3454.05" cy="4930.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="3463.05" y="4933.7104">is_class(const String &amp; p_class) const : bool</text><ellipse cx="3454.05" cy="4943.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3463.05" y="4946.5151">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="3454.05" cy="4956.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="3463.05" y="4959.3198">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="3454.05" cy="4968.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="3463.05" y="4972.1245">initialize_class() : void</text><ellipse cx="3454.05" cy="4981.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="3463.05" y="4984.9292">resolve_hostname(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address</text><ellipse cx="3454.05" cy="4994.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="599" x="3463.05" y="4997.7339">resolve_hostname_queue_item(const String &amp; p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID</text><ellipse cx="3454.05" cy="5007.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="3463.05" y="5010.5386">get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus</text><ellipse cx="3454.05" cy="5020.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="3463.05" y="5023.3433">get_resolve_item_address(IP::ResolverID p_id) const : IP_Address</text><ellipse cx="3454.05" cy="5032.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="3463.05" y="5036.1479">get_local_addresses(List&lt;IP_Address&gt; * r_addresses) const : void</text><ellipse cx="3454.05" cy="5045.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="3463.05" y="5048.9526">get_local_interfaces(Map&lt;String,IP::Interface_Info&gt; * r_interfaces) const = 0 : void</text><ellipse cx="3454.05" cy="5058.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="3463.05" y="5061.7573">erase_resolve_item(IP::ResolverID p_id) : void</text><ellipse cx="3454.05" cy="5071.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3463.05" y="5074.562">clear_cache(const String &amp; p_hostname = "") : void</text><ellipse cx="3454.05" cy="5084.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="3463.05" y="5087.3667">get_singleton() : IP *</text><ellipse cx="3454.05" cy="5096.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="76" x="3463.05" y="5100.1714">create() : IP *</text><ellipse cx="3454.05" cy="5109.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="3463.05" y="5112.9761">IP() : void</text><ellipse cx="3454.05" cy="5122.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3463.05" y="5125.7808">~IP() : void</text></a><!--MD5=[c256f191a1f4c63b2807fd5478edf736]
class C_0001197720528033242618--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" target="_top" title="_ResourceLoader" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45" xlink:show="new" xlink:title="_ResourceLoader" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="329.7031" id="C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.5;" width="633" x="4203.05" y="4776.9531"/><ellipse cx="4461.3" cy="4792.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4464.2688,4798.5938 Q4463.6906,4798.8906 4463.05,4799.0313 Q4462.4094,4799.1875 4461.7063,4799.1875 Q4459.2063,4799.1875 4457.8781,4797.5469 Q4456.5656,4795.8906 4456.5656,4792.7656 Q4456.5656,4789.6406 4457.8781,4787.9844 Q4459.2063,4786.3281 4461.7063,4786.3281 Q4462.4094,4786.3281 4463.05,4786.4844 Q4463.7063,4786.6406 4464.2688,4786.9375 L4464.2688,4789.6563 Q4463.6438,4789.0781 4463.05,4788.8125 Q4462.4563,4788.5313 4461.8313,4788.5313 Q4460.4875,4788.5313 4459.8,4789.6094 Q4459.1125,4790.6719 4459.1125,4792.7656 Q4459.1125,4794.8594 4459.8,4795.9375 Q4460.4875,4797 4461.8313,4797 Q4462.4563,4797 4463.05,4796.7344 Q4463.6438,4796.4531 4464.2688,4795.875 L4464.2688,4798.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="108" x="4481.8" y="4797.1074">_ResourceLoader</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4204.05" x2="4835.05" y1="4808.9531" y2="4808.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4204.05" x2="4835.05" y1="4816.9531" y2="4816.9531"/><ellipse cx="4214.05" cy="4827.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4223.05" y="4831.1636">get_class() const : String</text><ellipse cx="4214.05" cy="4840.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="4223.05" y="4843.9683">_get_class_namev() const : const StringName *</text><ellipse cx="4214.05" cy="4853.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="4223.05" y="4856.7729">get_class_ptr_static() : void *</text><ellipse cx="4214.05" cy="4866.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="4223.05" y="4869.5776">get_class_static() : String</text><ellipse cx="4214.05" cy="4879.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="4223.05" y="4882.3823">get_parent_class_static() : String</text><ellipse cx="4214.05" cy="4891.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="4223.05" y="4895.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="4214.05" cy="4904.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="4223.05" y="4907.9917">get_category_static() : String</text><ellipse cx="4214.05" cy="4917.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="4223.05" y="4920.7964">inherits_static() : String</text><ellipse cx="4214.05" cy="4930.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="4223.05" y="4933.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="4214.05" cy="4943.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="4223.05" y="4946.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="4214.05" cy="4956" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="4223.05" y="4959.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="4214.05" cy="4968.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="4223.05" y="4972.0151">initialize_class() : void</text><ellipse cx="4214.05" cy="4981.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="204" x="4223.05" y="4984.8198">get_singleton() : _ResourceLoader *</text><ellipse cx="4214.05" cy="4994.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="607" x="4223.05" y="4997.6245">load_interactive(const String &amp; p_path, const String &amp; p_type_hint = "") : Ref&lt;ResourceInteractiveLoader&gt;</text><ellipse cx="4214.05" cy="5007.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="4223.05" y="5010.4292">load(const String &amp; p_path, const String &amp; p_type_hint = "", bool p_no_cache = false) : RES</text><ellipse cx="4214.05" cy="5020.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="4223.05" y="5023.2339">get_recognized_extensions_for_type(const String &amp; p_type) : PoolVector&lt;String&gt;</text><ellipse cx="4214.05" cy="5032.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="4223.05" y="5036.0386">set_abort_on_missing_resources(bool p_abort) : void</text><ellipse cx="4214.05" cy="5045.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="4223.05" y="5048.8433">get_dependencies(const String &amp; p_path) : PoolStringArray</text><ellipse cx="4214.05" cy="5058.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="4223.05" y="5061.6479">has(const String &amp; p_path) : bool</text><ellipse cx="4214.05" cy="5071.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="4223.05" y="5074.4526">has_cached(const String &amp; p_path) : bool</text><ellipse cx="4214.05" cy="5084.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="4223.05" y="5087.2573">exists(const String &amp; p_path, const String &amp; p_type_hint = "") : bool</text><ellipse cx="4214.05" cy="5096.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="4223.05" y="5100.062">_ResourceLoader() : void</text></a><!--MD5=[8320b79068f24653412391a69e41cea5]
class C_0001130773750498288283--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" target="_top" title="_ResourceSaver" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68" xlink:show="new" xlink:title="_ResourceSaver" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="252.875" id="C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.5;" width="590" x="6312.55" y="4815.4531"/><ellipse cx="6553.3" cy="4831.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6556.2688,4837.0938 Q6555.6906,4837.3906 6555.05,4837.5313 Q6554.4094,4837.6875 6553.7063,4837.6875 Q6551.2063,4837.6875 6549.8781,4836.0469 Q6548.5656,4834.3906 6548.5656,4831.2656 Q6548.5656,4828.1406 6549.8781,4826.4844 Q6551.2063,4824.8281 6553.7063,4824.8281 Q6554.4094,4824.8281 6555.05,4824.9844 Q6555.7063,4825.1406 6556.2688,4825.4375 L6556.2688,4828.1563 Q6555.6438,4827.5781 6555.05,4827.3125 Q6554.4563,4827.0313 6553.8313,4827.0313 Q6552.4875,4827.0313 6551.8,4828.1094 Q6551.1125,4829.1719 6551.1125,4831.2656 Q6551.1125,4833.3594 6551.8,4834.4375 Q6552.4875,4835.5 6553.8313,4835.5 Q6554.4563,4835.5 6555.05,4835.2344 Q6555.6438,4834.9531 6556.2688,4834.375 L6556.2688,4837.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="6573.8" y="4835.6074">_ResourceSaver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6313.55" x2="6901.55" y1="4847.4531" y2="4847.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6313.55" x2="6901.55" y1="4855.4531" y2="4855.4531"/><ellipse cx="6323.55" cy="4866.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="6332.55" y="4869.6636">get_class() const : String</text><ellipse cx="6323.55" cy="4879.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6332.55" y="4882.4683">_get_class_namev() const : const StringName *</text><ellipse cx="6323.55" cy="4892.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="6332.55" y="4895.2729">get_class_ptr_static() : void *</text><ellipse cx="6323.55" cy="4904.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="6332.55" y="4908.0776">get_class_static() : String</text><ellipse cx="6323.55" cy="4917.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="6332.55" y="4920.8823">get_parent_class_static() : String</text><ellipse cx="6323.55" cy="4930.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="6332.55" y="4933.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="6323.55" cy="4943.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="6332.55" y="4946.4917">get_category_static() : String</text><ellipse cx="6323.55" cy="4956.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="6332.55" y="4959.2964">inherits_static() : String</text><ellipse cx="6323.55" cy="4968.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="6332.55" y="4972.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="6323.55" cy="4981.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="6332.55" y="4984.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="6323.55" cy="4994.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="6332.55" y="4997.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="6323.55" cy="5007.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="6332.55" y="5010.5151">initialize_class() : void</text><ellipse cx="6323.55" cy="5020.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="6332.55" y="5023.3198">get_singleton() : _ResourceSaver *</text><ellipse cx="6323.55" cy="5032.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="6332.55" y="5036.1245">save(const String &amp; p_path, const RES &amp; p_resource, _ResourceSaver::SaverFlags p_flags) : Error</text><ellipse cx="6323.55" cy="5045.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="6332.55" y="5048.9292">get_recognized_extensions(const RES &amp; p_resource) : PoolVector&lt;String&gt;</text><ellipse cx="6323.55" cy="5058.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="6332.55" y="5061.7339">_ResourceSaver() : void</text></a><!--MD5=[4791f32a7532edb6976f97ebd5eb02c0]
class C_0000790752023609648644--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" target="_top" title="_OS" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99" xlink:show="new" xlink:title="_OS" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="2263.2109" id="C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.5;" width="908" x="567.55" y="3810.4531"/><ellipse cx="1005.8" cy="3826.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1008.7688,3832.0938 Q1008.1906,3832.3906 1007.55,3832.5313 Q1006.9094,3832.6875 1006.2063,3832.6875 Q1003.7063,3832.6875 1002.3781,3831.0469 Q1001.0656,3829.3906 1001.0656,3826.2656 Q1001.0656,3823.1406 1002.3781,3821.4844 Q1003.7063,3819.8281 1006.2063,3819.8281 Q1006.9094,3819.8281 1007.55,3819.9844 Q1008.2063,3820.1406 1008.7688,3820.4375 L1008.7688,3823.1563 Q1008.1438,3822.5781 1007.55,3822.3125 Q1006.9563,3822.0313 1006.3313,3822.0313 Q1004.9875,3822.0313 1004.3,3823.1094 Q1003.6125,3824.1719 1003.6125,3826.2656 Q1003.6125,3828.3594 1004.3,3829.4375 Q1004.9875,3830.5 1006.3313,3830.5 Q1006.9563,3830.5 1007.55,3830.2344 Q1008.1438,3829.9531 1008.7688,3829.375 L1008.7688,3832.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="1026.3" y="3830.6074">_OS</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="568.55" x2="1474.55" y1="3842.4531" y2="3842.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="568.55" x2="1474.55" y1="3850.4531" y2="3850.4531"/><ellipse cx="578.55" cy="3861.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="587.55" y="3864.6636">get_class() const : String</text><ellipse cx="578.55" cy="3874.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="587.55" y="3877.4683">_get_class_namev() const : const StringName *</text><ellipse cx="578.55" cy="3887.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="587.55" y="3890.2729">get_class_ptr_static() : void *</text><ellipse cx="578.55" cy="3899.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="587.55" y="3903.0776">get_class_static() : String</text><ellipse cx="578.55" cy="3912.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="587.55" y="3915.8823">get_parent_class_static() : String</text><ellipse cx="578.55" cy="3925.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="587.55" y="3928.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="578.55" cy="3938.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="587.55" y="3941.4917">get_category_static() : String</text><ellipse cx="578.55" cy="3951.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="587.55" y="3954.2964">inherits_static() : String</text><ellipse cx="578.55" cy="3963.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="587.55" y="3967.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="578.55" cy="3976.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="587.55" y="3979.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="578.55" cy="3989.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="587.55" y="3992.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="578.55" cy="4002.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="587.55" y="4005.5151">initialize_class() : void</text><ellipse cx="578.55" cy="4015.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="731" x="587.55" y="4018.3198">global_menu_add_item(const String &amp; p_menu, const String &amp; p_label, const Variant &amp; p_signal, const Variant &amp; p_meta) : void</text><ellipse cx="578.55" cy="4027.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="587.55" y="4031.1245">global_menu_add_separator(const String &amp; p_menu) : void</text><ellipse cx="578.55" cy="4040.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="587.55" y="4043.9292">global_menu_remove_item(const String &amp; p_menu, int p_idx) : void</text><ellipse cx="578.55" cy="4053.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="587.55" y="4056.7339">global_menu_clear(const String &amp; p_menu) : void</text><ellipse cx="578.55" cy="4066.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="587.55" y="4069.5386">get_mouse_position() const : Point2</text><ellipse cx="578.55" cy="4079.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="587.55" y="4082.3433">set_window_title(const String &amp; p_title) : void</text><ellipse cx="578.55" cy="4091.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="431" x="587.55" y="4095.1479">set_window_mouse_passthrough(const PoolVector2Array &amp; p_region) : void</text><ellipse cx="578.55" cy="4104.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="587.55" y="4107.9526">get_mouse_button_state() const : int</text><ellipse cx="578.55" cy="4117.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="587.55" y="4120.7573">set_clipboard(const String &amp; p_text) : void</text><ellipse cx="578.55" cy="4130.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="587.55" y="4133.562">get_clipboard() const : String</text><ellipse cx="578.55" cy="4143.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="587.55" y="4146.3667">set_video_mode(const Size2 &amp; p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void</text><ellipse cx="578.55" cy="4155.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="587.55" y="4159.1714">get_video_mode(int p_screen = 0) const : Size2</text><ellipse cx="578.55" cy="4168.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="587.55" y="4171.9761">is_video_mode_fullscreen(int p_screen = 0) const : bool</text><ellipse cx="578.55" cy="4181.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="587.55" y="4184.7808">is_video_mode_resizable(int p_screen = 0) const : bool</text><ellipse cx="578.55" cy="4194.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="587.55" y="4197.5854">get_fullscreen_mode_list(int p_screen = 0) const : Array</text><ellipse cx="578.55" cy="4207.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="587.55" y="4210.3901">get_video_driver_count() const : int</text><ellipse cx="578.55" cy="4219.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="587.55" y="4223.1948">get_video_driver_name(_OS::VideoDriver p_driver) const : String</text><ellipse cx="578.55" cy="4232.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="587.55" y="4235.9995">get_current_video_driver() const : _OS::VideoDriver</text><ellipse cx="578.55" cy="4245.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="587.55" y="4248.8042">get_audio_driver_count() const : int</text><ellipse cx="578.55" cy="4258.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="587.55" y="4261.6089">get_audio_driver_name(int p_driver) const : String</text><ellipse cx="578.55" cy="4271.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="587.55" y="4274.4136">get_connected_midi_inputs() : PoolStringArray</text><ellipse cx="578.55" cy="4284.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="587.55" y="4287.2183">open_midi_inputs() : void</text><ellipse cx="578.55" cy="4296.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="587.55" y="4300.0229">close_midi_inputs() : void</text><ellipse cx="578.55" cy="4309.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="587.55" y="4312.8276">get_screen_count() const : int</text><ellipse cx="578.55" cy="4322.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="587.55" y="4325.6323">get_current_screen() const : int</text><ellipse cx="578.55" cy="4335.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="587.55" y="4338.437">set_current_screen(int p_screen) : void</text><ellipse cx="578.55" cy="4348.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="587.55" y="4351.2417">get_screen_position(int p_screen = -1) const : Point2</text><ellipse cx="578.55" cy="4360.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="587.55" y="4364.0464">get_screen_size(int p_screen = -1) const : Size2</text><ellipse cx="578.55" cy="4373.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="587.55" y="4376.8511">get_screen_dpi(int p_screen = -1) const : int</text><ellipse cx="578.55" cy="4386.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="587.55" y="4389.6558">get_screen_scale(int p_screen = -1) const : float</text><ellipse cx="578.55" cy="4399.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="587.55" y="4402.4604">get_screen_max_scale() const : float</text><ellipse cx="578.55" cy="4412.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="587.55" y="4415.2651">get_window_position() const : Point2</text><ellipse cx="578.55" cy="4424.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="587.55" y="4428.0698">set_window_position(const Point2 &amp; p_position) : void</text><ellipse cx="578.55" cy="4437.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="587.55" y="4440.8745">get_max_window_size() const : Size2</text><ellipse cx="578.55" cy="4450.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="587.55" y="4453.6792">get_min_window_size() const : Size2</text><ellipse cx="578.55" cy="4463.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="587.55" y="4466.4839">get_window_size() const : Size2</text><ellipse cx="578.55" cy="4476.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="587.55" y="4479.2886">get_real_window_size() const : Size2</text><ellipse cx="578.55" cy="4488.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="587.55" y="4492.0933">get_window_safe_area() const : Rect2</text><ellipse cx="578.55" cy="4501.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="587.55" y="4504.8979">set_max_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="578.55" cy="4514.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="587.55" y="4517.7026">set_min_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="578.55" cy="4527.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="587.55" y="4530.5073">set_window_size(const Size2 &amp; p_size) : void</text><ellipse cx="578.55" cy="4540.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="587.55" y="4543.312">set_window_fullscreen(bool p_enabled) : void</text><ellipse cx="578.55" cy="4552.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="587.55" y="4556.1167">is_window_fullscreen() const : bool</text><ellipse cx="578.55" cy="4565.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="587.55" y="4568.9214">set_window_resizable(bool p_enabled) : void</text><ellipse cx="578.55" cy="4578.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="587.55" y="4581.7261">is_window_resizable() const : bool</text><ellipse cx="578.55" cy="4591.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="587.55" y="4594.5308">set_window_minimized(bool p_enabled) : void</text><ellipse cx="578.55" cy="4604.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="587.55" y="4607.3354">is_window_minimized() const : bool</text><ellipse cx="578.55" cy="4616.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="587.55" y="4620.1401">set_window_maximized(bool p_enabled) : void</text><ellipse cx="578.55" cy="4629.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="587.55" y="4632.9448">is_window_maximized() const : bool</text><ellipse cx="578.55" cy="4642.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="587.55" y="4645.7495">set_window_always_on_top(bool p_enabled) : void</text><ellipse cx="578.55" cy="4655.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="587.55" y="4658.5542">is_window_always_on_top() const : bool</text><ellipse cx="578.55" cy="4668.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="587.55" y="4671.3589">is_window_focused() const : bool</text><ellipse cx="578.55" cy="4680.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="587.55" y="4684.1636">request_attention() : void</text><ellipse cx="578.55" cy="4693.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="587.55" y="4696.9683">center_window() : void</text><ellipse cx="578.55" cy="4706.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="587.55" y="4709.7729">move_window_to_foreground() : void</text><ellipse cx="578.55" cy="4719.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="587.55" y="4722.5776">get_native_handle(_OS::HandleType p_handle_type) : int64_t</text><ellipse cx="578.55" cy="4732.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="587.55" y="4735.3823">set_borderless_window(bool p_borderless) : void</text><ellipse cx="578.55" cy="4744.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="587.55" y="4748.187">get_borderless_window() const : bool</text><ellipse cx="578.55" cy="4757.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="587.55" y="4760.9917">get_window_per_pixel_transparency_enabled() const : bool</text><ellipse cx="578.55" cy="4770.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="587.55" y="4773.7964">set_window_per_pixel_transparency_enabled(bool p_enabled) : void</text><ellipse cx="578.55" cy="4783.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="587.55" y="4786.6011">set_ime_active(const bool p_active) : void</text><ellipse cx="578.55" cy="4796.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="587.55" y="4799.4058">set_ime_position(const Point2 &amp; p_pos) : void</text><ellipse cx="578.55" cy="4809" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="587.55" y="4812.2104">get_ime_selection() const : Point2</text><ellipse cx="578.55" cy="4821.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="587.55" y="4825.0151">get_ime_text() const : String</text><ellipse cx="578.55" cy="4834.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="587.55" y="4837.8198">native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error</text><ellipse cx="578.55" cy="4847.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="587.55" y="4850.6245">native_video_is_playing() : bool</text><ellipse cx="578.55" cy="4860.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="587.55" y="4863.4292">native_video_pause() : void</text><ellipse cx="578.55" cy="4873.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="587.55" y="4876.2339">native_video_unpause() : void</text><ellipse cx="578.55" cy="4885.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="587.55" y="4889.0386">native_video_stop() : void</text><ellipse cx="578.55" cy="4898.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="587.55" y="4901.8433">set_low_processor_usage_mode(bool p_enabled) : void</text><ellipse cx="578.55" cy="4911.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="587.55" y="4914.6479">is_in_low_processor_usage_mode() const : bool</text><ellipse cx="578.55" cy="4924.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="587.55" y="4927.4526">set_low_processor_usage_mode_sleep_usec(int p_usec) : void</text><ellipse cx="578.55" cy="4937.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="587.55" y="4940.2573">get_low_processor_usage_mode_sleep_usec() const : int</text><ellipse cx="578.55" cy="4949.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="587.55" y="4953.062">get_executable_path() const : String</text><ellipse cx="578.55" cy="4962.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="882" x="587.55" y="4965.8667">execute(const String &amp; p_path, const Vector&lt;String&gt; &amp; p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int</text><ellipse cx="578.55" cy="4975.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="587.55" y="4978.6714">kill(int p_pid) : Error</text><ellipse cx="578.55" cy="4988.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="587.55" y="4991.4761">shell_open(String p_uri) : Error</text><ellipse cx="578.55" cy="5001.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="587.55" y="5004.2808">get_process_id() const : int</text><ellipse cx="578.55" cy="5013.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="587.55" y="5017.0854">has_environment(const String &amp; p_var) const : bool</text><ellipse cx="578.55" cy="5026.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="587.55" y="5029.8901">get_environment(const String &amp; p_var) const : String</text><ellipse cx="578.55" cy="5039.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="587.55" y="5042.6948">set_environment(const String &amp; p_var, const String &amp; p_value) const : bool</text><ellipse cx="578.55" cy="5052.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="587.55" y="5055.4995">get_name() const : String</text><ellipse cx="578.55" cy="5065.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="587.55" y="5068.3042">get_cmdline_args() : Vector&lt;String&gt;</text><ellipse cx="578.55" cy="5077.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="587.55" y="5081.1089">get_locale() const : String</text><ellipse cx="578.55" cy="5090.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="587.55" y="5093.9136">get_latin_keyboard_variant() const : String</text><ellipse cx="578.55" cy="5103.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="587.55" y="5106.7183">keyboard_get_layout_count() const : int</text><ellipse cx="578.55" cy="5116.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="587.55" y="5119.5229">keyboard_get_current_layout() const : int</text><ellipse cx="578.55" cy="5129.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="587.55" y="5132.3276">keyboard_set_current_layout(int p_index) : void</text><ellipse cx="578.55" cy="5141.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="587.55" y="5145.1323">keyboard_get_layout_language(int p_index) const : String</text><ellipse cx="578.55" cy="5154.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="587.55" y="5157.937">keyboard_get_layout_name(int p_index) const : String</text><ellipse cx="578.55" cy="5167.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="587.55" y="5170.7417">get_model_name() const : String</text><ellipse cx="578.55" cy="5180.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="587.55" y="5183.5464">dump_memory_to_file(const String &amp; p_file) : void</text><ellipse cx="578.55" cy="5193.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="587.55" y="5196.3511">dump_resources_to_file(const String &amp; p_file) : void</text><ellipse cx="578.55" cy="5205.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="587.55" y="5209.1558">has_virtual_keyboard() const : bool</text><ellipse cx="578.55" cy="5218.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="512" x="587.55" y="5221.9604">show_virtual_keyboard(const String &amp; p_existing_text = "", bool p_multiline = false) : void</text><ellipse cx="578.55" cy="5231.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="587.55" y="5234.7651">hide_virtual_keyboard() : void</text><ellipse cx="578.55" cy="5244.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="587.55" y="5247.5698">get_virtual_keyboard_height() : int</text><ellipse cx="578.55" cy="5257.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="587.55" y="5260.3745">print_resources_in_use(bool p_short = false) : void</text><ellipse cx="578.55" cy="5269.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="587.55" y="5273.1792">print_all_resources(const String &amp; p_to_file) : void</text><ellipse cx="578.55" cy="5282.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="587.55" y="5285.9839">print_all_textures_by_size() : void</text><ellipse cx="578.55" cy="5295.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="587.55" y="5298.7886">print_resources_by_type(const Vector&lt;String&gt; &amp; p_types) : void</text><ellipse cx="578.55" cy="5308.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="587.55" y="5311.5933">has_touchscreen_ui_hint() const : bool</text><ellipse cx="578.55" cy="5321.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="587.55" y="5324.3979">is_debug_build() const : bool</text><ellipse cx="578.55" cy="5333.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="587.55" y="5337.2026">get_unique_id() const : String</text><ellipse cx="578.55" cy="5346.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="587.55" y="5350.0073">get_scancode_string(uint32_t p_code) const : String</text><ellipse cx="578.55" cy="5359.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="587.55" y="5362.812">is_scancode_unicode(uint32_t p_unicode) const : bool</text><ellipse cx="578.55" cy="5372.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="587.55" y="5375.6167">find_scancode_from_string(const String &amp; p_code) const : int</text><ellipse cx="578.55" cy="5385.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="587.55" y="5388.4214">set_use_file_access_save_and_swap(bool p_enable) : void</text><ellipse cx="578.55" cy="5398.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="587.55" y="5401.2261">set_native_icon(const String &amp; p_filename) : void</text><ellipse cx="578.55" cy="5410.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="587.55" y="5414.0308">set_icon(const Ref&lt;Image&gt; &amp; p_icon) : void</text><ellipse cx="578.55" cy="5423.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="587.55" y="5426.8354">get_exit_code() const : int</text><ellipse cx="578.55" cy="5436.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="587.55" y="5439.6401">set_exit_code(int p_code) : void</text><ellipse cx="578.55" cy="5449.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="587.55" y="5452.4448">get_date(bool utc) const : Dictionary</text><ellipse cx="578.55" cy="5462.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="587.55" y="5465.2495">get_time(bool utc) const : Dictionary</text><ellipse cx="578.55" cy="5474.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="587.55" y="5478.0542">get_datetime(bool utc) const : Dictionary</text><ellipse cx="578.55" cy="5487.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="587.55" y="5490.8589">get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary</text><ellipse cx="578.55" cy="5500.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="587.55" y="5503.6636">get_unix_time_from_datetime(Dictionary datetime) const : int64_t</text><ellipse cx="578.55" cy="5513.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="587.55" y="5516.4683">get_time_zone_info() const : Dictionary</text><ellipse cx="578.55" cy="5526.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="587.55" y="5529.2729">get_unix_time() const : uint64_t</text><ellipse cx="578.55" cy="5538.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="587.55" y="5542.0776">get_system_time_secs() const : uint64_t</text><ellipse cx="578.55" cy="5551.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="587.55" y="5554.8823">get_system_time_msecs() const : uint64_t</text><ellipse cx="578.55" cy="5564.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="587.55" y="5567.687">get_static_memory_usage() const : uint64_t</text><ellipse cx="578.55" cy="5577.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="587.55" y="5580.4917">get_static_memory_peak_usage() const : uint64_t</text><ellipse cx="578.55" cy="5590.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="587.55" y="5593.2964">get_dynamic_memory_usage() const : uint64_t</text><ellipse cx="578.55" cy="5602.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="587.55" y="5606.1011">delay_usec(int p_usec) const : void</text><ellipse cx="578.55" cy="5615.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="587.55" y="5618.9058">delay_msec(int p_msec) const : void</text><ellipse cx="578.55" cy="5628.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="587.55" y="5631.7104">get_ticks_msec() const : uint32_t</text><ellipse cx="578.55" cy="5641.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="587.55" y="5644.5151">get_ticks_usec() const : uint64_t</text><ellipse cx="578.55" cy="5654.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="587.55" y="5657.3198">get_splash_tick_msec() const : uint32_t</text><ellipse cx="578.55" cy="5666.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="587.55" y="5670.1245">can_use_threads() const : bool</text><ellipse cx="578.55" cy="5679.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="587.55" y="5682.9292">can_draw() const : bool</text><ellipse cx="578.55" cy="5692.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="587.55" y="5695.7339">is_userfs_persistent() const : bool</text><ellipse cx="578.55" cy="5705.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="587.55" y="5708.5386">is_stdout_verbose() const : bool</text><ellipse cx="578.55" cy="5718.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="587.55" y="5721.3433">get_processor_count() const : int</text><ellipse cx="578.55" cy="5730.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="477" x="587.55" y="5734.1479">get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String</text><ellipse cx="578.55" cy="5743.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="587.55" y="5746.9526">get_user_data_dir() const : String</text><ellipse cx="578.55" cy="5756.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="388" x="587.55" y="5759.7573">alert(const String &amp; p_alert, const String &amp; p_title = "ALERT!") : void</text><ellipse cx="578.55" cy="5769.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="385" x="587.55" y="5772.562">set_screen_orientation(_OS::ScreenOrientation p_orientation) : void</text><ellipse cx="578.55" cy="5782.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="587.55" y="5785.3667">get_screen_orientation() const : _OS::ScreenOrientation</text><ellipse cx="578.55" cy="5794.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="587.55" y="5798.1714">set_keep_screen_on(bool p_enabled) : void</text><ellipse cx="578.55" cy="5807.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="587.55" y="5810.9761">is_keep_screen_on() const : bool</text><ellipse cx="578.55" cy="5820.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="587.55" y="5823.7808">is_ok_left_and_cancel_right() const : bool</text><ellipse cx="578.55" cy="5833.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="587.55" y="5836.5854">set_thread_name(const String &amp; p_name) : Error</text><ellipse cx="578.55" cy="5846.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="587.55" y="5849.3901">get_thread_caller_id() const : Thread::ID</text><ellipse cx="578.55" cy="5858.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="587.55" y="5862.1948">set_use_vsync(bool p_enable) : void</text><ellipse cx="578.55" cy="5871.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="587.55" y="5874.9995">is_vsync_enabled() const : bool</text><ellipse cx="578.55" cy="5884.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="587.55" y="5887.8042">set_vsync_via_compositor(bool p_enable) : void</text><ellipse cx="578.55" cy="5897.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="587.55" y="5900.6089">is_vsync_via_compositor_enabled() const : bool</text><ellipse cx="578.55" cy="5910.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="587.55" y="5913.4136">get_power_state() : _OS::PowerState</text><ellipse cx="578.55" cy="5923.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="587.55" y="5926.2183">get_power_seconds_left() : int</text><ellipse cx="578.55" cy="5935.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="587.55" y="5939.0229">get_power_percent_left() : int</text><ellipse cx="578.55" cy="5948.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="587.55" y="5951.8276">has_feature(const String &amp; p_feature) const : bool</text><ellipse cx="578.55" cy="5961.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="587.55" y="5964.6323">request_permission(const String &amp; p_name) : bool</text><ellipse cx="578.55" cy="5974.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="587.55" y="5977.437">request_permissions() : bool</text><ellipse cx="578.55" cy="5987.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="587.55" y="5990.2417">get_granted_permissions() const : Vector&lt;String&gt;</text><ellipse cx="578.55" cy="5999.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="587.55" y="6003.0464">get_tablet_driver_count() const : int</text><ellipse cx="578.55" cy="6012.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="587.55" y="6015.8511">get_tablet_driver_name(int p_driver) const : String</text><ellipse cx="578.55" cy="6025.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="587.55" y="6028.6558">get_current_tablet_driver() const : String</text><ellipse cx="578.55" cy="6038.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="587.55" y="6041.4604">set_current_tablet_driver(const String &amp; p_driver) : void</text><ellipse cx="578.55" cy="6051.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="587.55" y="6054.2651">get_singleton() : _OS *</text><ellipse cx="578.55" cy="6063.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="587.55" y="6067.0698">_OS() : void</text></a><!--MD5=[9cd91452c1d17095030b673b85aa269f]
class C_0000897221634691489964--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" target="_top" title="_Geometry" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401" xlink:show="new" xlink:title="_Geometry" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="675.4297" id="C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.5;" width="1086" x="1610.55" y="4604.4531"/><ellipse cx="2116.3" cy="4620.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2119.2688,4626.0938 Q2118.6906,4626.3906 2118.05,4626.5313 Q2117.4094,4626.6875 2116.7063,4626.6875 Q2114.2063,4626.6875 2112.8781,4625.0469 Q2111.5656,4623.3906 2111.5656,4620.2656 Q2111.5656,4617.1406 2112.8781,4615.4844 Q2114.2063,4613.8281 2116.7063,4613.8281 Q2117.4094,4613.8281 2118.05,4613.9844 Q2118.7063,4614.1406 2119.2688,4614.4375 L2119.2688,4617.1563 Q2118.6438,4616.5781 2118.05,4616.3125 Q2117.4563,4616.0313 2116.8313,4616.0313 Q2115.4875,4616.0313 2114.8,4617.1094 Q2114.1125,4618.1719 2114.1125,4620.2656 Q2114.1125,4622.3594 2114.8,4623.4375 Q2115.4875,4624.5 2116.8313,4624.5 Q2117.4563,4624.5 2118.05,4624.2344 Q2118.6438,4623.9531 2119.2688,4623.375 L2119.2688,4626.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="2136.8" y="4624.6074">_Geometry</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1611.55" x2="2695.55" y1="4636.4531" y2="4636.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1611.55" x2="2695.55" y1="4644.4531" y2="4644.4531"/><ellipse cx="1621.55" cy="4655.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1630.55" y="4658.6636">get_class() const : String</text><ellipse cx="1621.55" cy="4668.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1630.55" y="4671.4683">_get_class_namev() const : const StringName *</text><ellipse cx="1621.55" cy="4681.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="1630.55" y="4684.2729">get_class_ptr_static() : void *</text><ellipse cx="1621.55" cy="4693.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="1630.55" y="4697.0776">get_class_static() : String</text><ellipse cx="1621.55" cy="4706.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="1630.55" y="4709.8823">get_parent_class_static() : String</text><ellipse cx="1621.55" cy="4719.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="1630.55" y="4722.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="1621.55" cy="4732.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="1630.55" y="4735.4917">get_category_static() : String</text><ellipse cx="1621.55" cy="4745.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="1630.55" y="4748.2964">inherits_static() : String</text><ellipse cx="1621.55" cy="4757.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1630.55" y="4761.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="1621.55" cy="4770.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1630.55" y="4773.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="1621.55" cy="4783.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1630.55" y="4786.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="1621.55" cy="4796.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="1630.55" y="4799.5151">initialize_class() : void</text><ellipse cx="1621.55" cy="4809.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="168" x="1630.55" y="4812.3198">get_singleton() : _Geometry *</text><ellipse cx="1621.55" cy="4821.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="1630.55" y="4825.1245">build_box_planes(const Vector3 &amp; p_extents) : PoolVector&lt;Plane&gt;</text><ellipse cx="1621.55" cy="4834.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="713" x="1630.55" y="4837.9292">build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="1621.55" cy="4847.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="773" x="1630.55" y="4850.7339">build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector&lt;Plane&gt;</text><ellipse cx="1621.55" cy="4860.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="837" x="1630.55" y="4863.5386">segment_intersects_segment_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_to_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_to_b) : Variant</text><ellipse cx="1621.55" cy="4873.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="785" x="1630.55" y="4876.3433">line_intersects_line_2d(const Vector2 &amp; p_from_a, const Vector2 &amp; p_dir_a, const Vector2 &amp; p_from_b, const Vector2 &amp; p_dir_b) : Variant</text><ellipse cx="1621.55" cy="4885.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="1630.55" y="4889.1479">get_closest_points_between_segments_2d(const Vector2 &amp; p1, const Vector2 &amp; q1, const Vector2 &amp; p2, const Vector2 &amp; q2) : PoolVector&lt;Vector2&gt;</text><ellipse cx="1621.55" cy="4898.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="828" x="1630.55" y="4901.9526">get_closest_points_between_segments(const Vector3 &amp; p1, const Vector3 &amp; p2, const Vector3 &amp; q1, const Vector3 &amp; q2) : PoolVector&lt;Vector3&gt;</text><ellipse cx="1621.55" cy="4911.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="1630.55" y="4914.7573">get_closest_point_to_segment_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="1621.55" cy="4924.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="620" x="1630.55" y="4927.562">get_closest_point_to_segment(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="1621.55" cy="4937.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="701" x="1630.55" y="4940.3667">get_closest_point_to_segment_uncapped_2d(const Vector2 &amp; p_point, const Vector2 &amp; p_a, const Vector2 &amp; p_b) : Vector2</text><ellipse cx="1621.55" cy="4949.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="681" x="1630.55" y="4953.1714">get_closest_point_to_segment_uncapped(const Vector3 &amp; p_point, const Vector3 &amp; p_a, const Vector3 &amp; p_b) : Vector3</text><ellipse cx="1621.55" cy="4962.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="848" x="1630.55" y="4965.9761">ray_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_dir, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="1621.55" cy="4975.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="876" x="1630.55" y="4978.7808">segment_intersects_triangle(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_v0, const Vector3 &amp; p_v1, const Vector3 &amp; p_v2) : Variant</text><ellipse cx="1621.55" cy="4988.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="647" x="1630.55" y="4991.5854">point_is_inside_triangle(const Vector2 &amp; s, const Vector2 &amp; a, const Vector2 &amp; b, const Vector2 &amp; c) const : bool</text><ellipse cx="1621.55" cy="5001.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="887" x="1630.55" y="5004.3901">segment_intersects_sphere(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector3 &amp; p_sphere_pos, real_t p_sphere_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="1621.55" cy="5013.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="739" x="1630.55" y="5017.1948">segment_intersects_cylinder(const Vector3 &amp; p_from, const Vector3 &amp; p_to, float p_height, float p_radius) : PoolVector&lt;Vector3&gt;</text><ellipse cx="1621.55" cy="5026.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="760" x="1630.55" y="5029.9995">segment_intersects_convex(const Vector3 &amp; p_from, const Vector3 &amp; p_to, const Vector&lt;Plane&gt; &amp; p_planes) : PoolVector&lt;Vector3&gt;</text><ellipse cx="1621.55" cy="5039.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="580" x="1630.55" y="5042.8042">is_point_in_circle(const Vector2 &amp; p_point, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : bool</text><ellipse cx="1621.55" cy="5052.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="768" x="1630.55" y="5055.6089">segment_intersects_circle(const Vector2 &amp; p_from, const Vector2 &amp; p_to, const Vector2 &amp; p_circle_pos, real_t p_circle_radius) : real_t</text><ellipse cx="1621.55" cy="5065.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="1630.55" y="5068.4136">get_uv84_normal_bit(const Vector3 &amp; p_vector) : int</text><ellipse cx="1621.55" cy="5078.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="1630.55" y="5081.2183">is_polygon_clockwise(const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="1621.55" cy="5090.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="1630.55" y="5094.0229">is_point_in_polygon(const Point2 &amp; p_point, const Vector&lt;Vector2&gt; &amp; p_polygon) : bool</text><ellipse cx="1621.55" cy="5103.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1630.55" y="5106.8276">triangulate_polygon(const Vector&lt;Vector2&gt; &amp; p_polygon) : Vector&lt;int&gt;</text><ellipse cx="1621.55" cy="5116.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="1630.55" y="5119.6323">triangulate_delaunay_2d(const Vector&lt;Vector2&gt; &amp; p_points) : Vector&lt;int&gt;</text><ellipse cx="1621.55" cy="5129.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="1630.55" y="5132.437">convex_hull_2d(const Vector&lt;Point2&gt; &amp; p_points) : Vector&lt;Point2&gt;</text><ellipse cx="1621.55" cy="5142.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="1630.55" y="5145.2417">clip_polygon(const Vector&lt;Vector3&gt; &amp; p_points, const Plane &amp; p_plane) : Vector&lt;Vector3&gt;</text><ellipse cx="1621.55" cy="5154.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="612" x="1630.55" y="5158.0464">merge_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="1621.55" cy="5167.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="1630.55" y="5170.8511">clip_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="1621.55" cy="5180.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="1630.55" y="5183.6558">intersect_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="1621.55" cy="5193.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="618" x="1630.55" y="5196.4604">exclude_polygons_2d(const Vector&lt;Vector2&gt; &amp; p_polygon_a, const Vector&lt;Vector2&gt; &amp; p_polygon_b) : Array</text><ellipse cx="1621.55" cy="5206.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="638" x="1630.55" y="5209.2651">clip_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="1621.55" cy="5218.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="669" x="1630.55" y="5222.0698">intersect_polyline_with_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polyline, const Vector&lt;Vector2&gt; &amp; p_polygon) : Array</text><ellipse cx="1621.55" cy="5231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="752" x="1630.55" y="5234.8745">offset_polygon_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array</text><ellipse cx="1621.55" cy="5244.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1060" x="1630.55" y="5247.6792">offset_polyline_2d(const Vector&lt;Vector2&gt; &amp; p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array</text><ellipse cx="1621.55" cy="5257.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="1630.55" y="5260.4839">make_atlas(const Vector&lt;Size2&gt; &amp; p_rects) : Dictionary</text><ellipse cx="1621.55" cy="5270.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1630.55" y="5273.2886">_Geometry() : void</text></a><!--MD5=[4dcc2a5e5ca6c256ca3086aa64be2a49]
class C_0000135188690773659020--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" target="_top" title="_Marshalls" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629" xlink:show="new" xlink:title="_Marshalls" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="316.8984" id="C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.5;" width="476" x="2831.55" y="4783.4531"/><ellipse cx="3032.8" cy="4799.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3035.7688,4805.0938 Q3035.1906,4805.3906 3034.55,4805.5313 Q3033.9094,4805.6875 3033.2063,4805.6875 Q3030.7063,4805.6875 3029.3781,4804.0469 Q3028.0656,4802.3906 3028.0656,4799.2656 Q3028.0656,4796.1406 3029.3781,4794.4844 Q3030.7063,4792.8281 3033.2063,4792.8281 Q3033.9094,4792.8281 3034.55,4792.9844 Q3035.2063,4793.1406 3035.7688,4793.4375 L3035.7688,4796.1563 Q3035.1438,4795.5781 3034.55,4795.3125 Q3033.9563,4795.0313 3033.3313,4795.0313 Q3031.9875,4795.0313 3031.3,4796.1094 Q3030.6125,4797.1719 3030.6125,4799.2656 Q3030.6125,4801.3594 3031.3,4802.4375 Q3031.9875,4803.5 3033.3313,4803.5 Q3033.9563,4803.5 3034.55,4803.2344 Q3035.1438,4802.9531 3035.7688,4802.375 L3035.7688,4805.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="3053.3" y="4803.6074">_Marshalls</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2832.55" x2="3306.55" y1="4815.4531" y2="4815.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2832.55" x2="3306.55" y1="4823.4531" y2="4823.4531"/><ellipse cx="2842.55" cy="4834.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2851.55" y="4837.6636">get_class() const : String</text><ellipse cx="2842.55" cy="4847.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="2851.55" y="4850.4683">_get_class_namev() const : const StringName *</text><ellipse cx="2842.55" cy="4860.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="2851.55" y="4863.2729">get_class_ptr_static() : void *</text><ellipse cx="2842.55" cy="4872.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="2851.55" y="4876.0776">get_class_static() : String</text><ellipse cx="2842.55" cy="4885.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="2851.55" y="4888.8823">get_parent_class_static() : String</text><ellipse cx="2842.55" cy="4898.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="2851.55" y="4901.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="2842.55" cy="4911.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="2851.55" y="4914.4917">get_category_static() : String</text><ellipse cx="2842.55" cy="4924.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="2851.55" y="4927.2964">inherits_static() : String</text><ellipse cx="2842.55" cy="4936.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2851.55" y="4940.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="2842.55" cy="4949.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="2851.55" y="4952.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="2842.55" cy="4962.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="2851.55" y="4965.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="2842.55" cy="4975.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="2851.55" y="4978.5151">initialize_class() : void</text><ellipse cx="2842.55" cy="4988.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="167" x="2851.55" y="4991.3198">get_singleton() : _Marshalls *</text><ellipse cx="2842.55" cy="5000.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="440" x="2851.55" y="5004.1245">variant_to_base64(const Variant &amp; p_var, bool p_full_objects = false) : String</text><ellipse cx="2842.55" cy="5013.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="2851.55" y="5016.9292">base64_to_variant(const String &amp; p_str, bool p_allow_objects = false) : Variant</text><ellipse cx="2842.55" cy="5026.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="2851.55" y="5029.7339">raw_to_base64(const PoolVector&lt;uint8_t&gt; &amp; p_arr) : String</text><ellipse cx="2842.55" cy="5039.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="2851.55" y="5042.5386">base64_to_raw(const String &amp; p_str) : PoolVector&lt;uint8_t&gt;</text><ellipse cx="2842.55" cy="5052.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="2851.55" y="5055.3433">utf8_to_base64(const String &amp; p_str) : String</text><ellipse cx="2842.55" cy="5064.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="2851.55" y="5068.1479">base64_to_utf8(const String &amp; p_str) : String</text><ellipse cx="2842.55" cy="5077.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2851.55" y="5080.9526">_Marshalls() : void</text><ellipse cx="2842.55" cy="5090.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2851.55" y="5093.7573">_Marshalls() : void</text></a><!--MD5=[bec2467cb88707ae9252054f6d93a9ae]
class C_0001150621116588802549--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" target="_top" title="_Thread" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679" xlink:show="new" xlink:title="_Thread" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="278.4844" id="C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.5;" width="905" x="23835.05" y="4802.9531"/><ellipse cx="24258.3" cy="4818.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M24261.2688,4824.5938 Q24260.6906,4824.8906 24260.05,4825.0313 Q24259.4094,4825.1875 24258.7063,4825.1875 Q24256.2063,4825.1875 24254.8781,4823.5469 Q24253.5656,4821.8906 24253.5656,4818.7656 Q24253.5656,4815.6406 24254.8781,4813.9844 Q24256.2063,4812.3281 24258.7063,4812.3281 Q24259.4094,4812.3281 24260.05,4812.4844 Q24260.7063,4812.6406 24261.2688,4812.9375 L24261.2688,4815.6563 Q24260.6438,4815.0781 24260.05,4814.8125 Q24259.4563,4814.5313 24258.8313,4814.5313 Q24257.4875,4814.5313 24256.8,4815.6094 Q24256.1125,4816.6719 24256.1125,4818.7656 Q24256.1125,4820.8594 24256.8,4821.9375 Q24257.4875,4823 24258.8313,4823 Q24259.4563,4823 24260.05,4822.7344 Q24260.6438,4822.4531 24261.2688,4821.875 L24261.2688,4824.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="24278.8" y="4823.1074">_Thread</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23836.05" x2="24739.05" y1="4834.9531" y2="4834.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="23836.05" x2="24739.05" y1="4842.9531" y2="4842.9531"/><ellipse cx="23846.05" cy="4853.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="23855.05" y="4857.1636">get_class() const : String</text><ellipse cx="23846.05" cy="4866.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="23855.05" y="4869.9683">_get_class_namev() const : const StringName *</text><ellipse cx="23846.05" cy="4879.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="23855.05" y="4882.7729">get_class_ptr_static() : void *</text><ellipse cx="23846.05" cy="4892.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="23855.05" y="4895.5776">get_class_static() : String</text><ellipse cx="23846.05" cy="4905.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="23855.05" y="4908.3823">get_parent_class_static() : String</text><ellipse cx="23846.05" cy="4917.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="23855.05" y="4921.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="23846.05" cy="4930.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="23855.05" y="4933.9917">get_category_static() : String</text><ellipse cx="23846.05" cy="4943.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="23855.05" y="4946.7964">inherits_static() : String</text><ellipse cx="23846.05" cy="4956.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="23855.05" y="4959.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="23846.05" cy="4969.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="23855.05" y="4972.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="23846.05" cy="4982" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="23855.05" y="4985.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="23846.05" cy="4994.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="23855.05" y="4998.0151">initialize_class() : void</text><ellipse cx="23846.05" cy="5007.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="879" x="23855.05" y="5010.8198">start(Object * p_instance, const StringName &amp; p_method, const Variant &amp; p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error</text><ellipse cx="23846.05" cy="5020.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="23855.05" y="5023.6245">get_id() const : String</text><ellipse cx="23846.05" cy="5033.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="23855.05" y="5036.4292">is_active() const : bool</text><ellipse cx="23846.05" cy="5046.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="23855.05" y="5049.2339">wait_to_finish() : Variant</text><ellipse cx="23846.05" cy="5058.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="23855.05" y="5062.0386">_Thread() : void</text><ellipse cx="23846.05" cy="5071.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="23855.05" y="5074.8433">_Thread() : void</text></a><!--MD5=[aee0a6e401a1fbb7c861b56a21d0daf4]
class C_0001186331261774827872--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" target="_top" title="_ClassDB" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713" xlink:show="new" xlink:title="_ClassDB" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="483.3594" id="C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.5;" width="651" x="13296.05" y="4700.4531"/><ellipse cx="13589.3" cy="4716.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M13592.2688,4722.0938 Q13591.6906,4722.3906 13591.05,4722.5313 Q13590.4094,4722.6875 13589.7063,4722.6875 Q13587.2063,4722.6875 13585.8781,4721.0469 Q13584.5656,4719.3906 13584.5656,4716.2656 Q13584.5656,4713.1406 13585.8781,4711.4844 Q13587.2063,4709.8281 13589.7063,4709.8281 Q13590.4094,4709.8281 13591.05,4709.9844 Q13591.7063,4710.1406 13592.2688,4710.4375 L13592.2688,4713.1563 Q13591.6438,4712.5781 13591.05,4712.3125 Q13590.4563,4712.0313 13589.8313,4712.0313 Q13588.4875,4712.0313 13587.8,4713.1094 Q13587.1125,4714.1719 13587.1125,4716.2656 Q13587.1125,4718.3594 13587.8,4719.4375 Q13588.4875,4720.5 13589.8313,4720.5 Q13590.4563,4720.5 13591.05,4720.2344 Q13591.6438,4719.9531 13592.2688,4719.375 L13592.2688,4722.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="56" x="13609.8" y="4720.6074">_ClassDB</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13297.05" x2="13946.05" y1="4732.4531" y2="4732.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13297.05" x2="13946.05" y1="4740.4531" y2="4740.4531"/><ellipse cx="13307.05" cy="4751.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="13316.05" y="4754.6636">get_class() const : String</text><ellipse cx="13307.05" cy="4764.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="13316.05" y="4767.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13307.05" cy="4777.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="13316.05" y="4780.2729">get_class_ptr_static() : void *</text><ellipse cx="13307.05" cy="4789.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="13316.05" y="4793.0776">get_class_static() : String</text><ellipse cx="13307.05" cy="4802.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="13316.05" y="4805.8823">get_parent_class_static() : String</text><ellipse cx="13307.05" cy="4815.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="13316.05" y="4818.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13307.05" cy="4828.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="13316.05" y="4831.4917">get_category_static() : String</text><ellipse cx="13307.05" cy="4841.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="13316.05" y="4844.2964">inherits_static() : String</text><ellipse cx="13307.05" cy="4853.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="13316.05" y="4857.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13307.05" cy="4866.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="13316.05" y="4869.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13307.05" cy="4879.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="13316.05" y="4882.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13307.05" cy="4892.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="13316.05" y="4895.5151">initialize_class() : void</text><ellipse cx="13307.05" cy="4905.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="13316.05" y="4908.3198">get_class_list() const : PoolStringArray</text><ellipse cx="13307.05" cy="4917.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="13316.05" y="4921.1245">get_inheriters_from_class(const StringName &amp; p_class) const : PoolStringArray</text><ellipse cx="13307.05" cy="4930.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="13316.05" y="4933.9292">get_parent_class(const StringName &amp; p_class) const : StringName</text><ellipse cx="13307.05" cy="4943.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="13316.05" y="4946.7339">class_exists(const StringName &amp; p_class) const : bool</text><ellipse cx="13307.05" cy="4956.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="515" x="13316.05" y="4959.5386">is_parent_class(const StringName &amp; p_class, const StringName &amp; p_inherits) const : bool</text><ellipse cx="13307.05" cy="4969.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="13316.05" y="4972.3433">can_instance(const StringName &amp; p_class) const : bool</text><ellipse cx="13307.05" cy="4981.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="306" x="13316.05" y="4985.1479">instance(const StringName &amp; p_class) const : Variant</text><ellipse cx="13307.05" cy="4994.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="13316.05" y="4997.9526">has_signal(StringName p_class, StringName p_signal) const : bool</text><ellipse cx="13307.05" cy="5007.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="13316.05" y="5010.7573">get_signal(StringName p_class, StringName p_signal) const : Dictionary</text><ellipse cx="13307.05" cy="5020.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="13316.05" y="5023.562">get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="13307.05" cy="5033.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="13316.05" y="5036.3667">get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="13307.05" cy="5045.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="13316.05" y="5049.1714">get_property(Object * p_object, const StringName &amp; p_property) const : Variant</text><ellipse cx="13307.05" cy="5058.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="13316.05" y="5061.9761">set_property(Object * p_object, const StringName &amp; p_property, const Variant &amp; p_value) const : Error</text><ellipse cx="13307.05" cy="5071.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="575" x="13316.05" y="5074.7808">has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool</text><ellipse cx="13307.05" cy="5084.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="466" x="13316.05" y="5087.5854">get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array</text><ellipse cx="13307.05" cy="5097.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="13316.05" y="5100.3901">get_integer_constant_list(const StringName &amp; p_class, bool p_no_inheritance = false) const : PoolStringArray</text><ellipse cx="13307.05" cy="5109.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="13316.05" y="5113.1948">has_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : bool</text><ellipse cx="13307.05" cy="5122.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="13316.05" y="5125.9995">get_integer_constant(const StringName &amp; p_class, const StringName &amp; p_name) const : int</text><ellipse cx="13307.05" cy="5135.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="13316.05" y="5138.8042">get_category(const StringName &amp; p_node) const : StringName</text><ellipse cx="13307.05" cy="5148.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="13316.05" y="5151.6089">is_class_enabled(StringName p_class) const : bool</text><ellipse cx="13307.05" cy="5161.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="13316.05" y="5164.4136">_ClassDB() : void</text><ellipse cx="13307.05" cy="5174.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="13316.05" y="5177.2183">_ClassDB() : void</text></a><!--MD5=[05b7e85f3dbac3be88f6744cbcc1427a]
class C_0001895218672297528471--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" target="_top" title="_Engine" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752" xlink:show="new" xlink:title="_Engine" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="547.3828" id="C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="13982.05" y="4668.4531"/><ellipse cx="14153.8" cy="4684.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14156.7688,4690.0938 Q14156.1906,4690.3906 14155.55,4690.5313 Q14154.9094,4690.6875 14154.2063,4690.6875 Q14151.7063,4690.6875 14150.3781,4689.0469 Q14149.0656,4687.3906 14149.0656,4684.2656 Q14149.0656,4681.1406 14150.3781,4679.4844 Q14151.7063,4677.8281 14154.2063,4677.8281 Q14154.9094,4677.8281 14155.55,4677.9844 Q14156.2063,4678.1406 14156.7688,4678.4375 L14156.7688,4681.1563 Q14156.1438,4680.5781 14155.55,4680.3125 Q14154.9563,4680.0313 14154.3313,4680.0313 Q14152.9875,4680.0313 14152.3,4681.1094 Q14151.6125,4682.1719 14151.6125,4684.2656 Q14151.6125,4686.3594 14152.3,4687.4375 Q14152.9875,4688.5 14154.3313,4688.5 Q14154.9563,4688.5 14155.55,4688.2344 Q14156.1438,4687.9531 14156.7688,4687.375 L14156.7688,4690.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="14174.3" y="4688.6074">_Engine</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="13983.05" x2="14382.05" y1="4700.4531" y2="4700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="13983.05" x2="14382.05" y1="4708.4531" y2="4708.4531"/><ellipse cx="13993.05" cy="4719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="14002.05" y="4722.6636">get_class() const : String</text><ellipse cx="13993.05" cy="4732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="14002.05" y="4735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="13993.05" cy="4745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="14002.05" y="4748.2729">get_class_ptr_static() : void *</text><ellipse cx="13993.05" cy="4757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="14002.05" y="4761.0776">get_class_static() : String</text><ellipse cx="13993.05" cy="4770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="14002.05" y="4773.8823">get_parent_class_static() : String</text><ellipse cx="13993.05" cy="4783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="14002.05" y="4786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="13993.05" cy="4796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="14002.05" y="4799.4917">get_category_static() : String</text><ellipse cx="13993.05" cy="4809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="14002.05" y="4812.2964">inherits_static() : String</text><ellipse cx="13993.05" cy="4821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="14002.05" y="4825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="13993.05" cy="4834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="14002.05" y="4837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="13993.05" cy="4847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="14002.05" y="4850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="13993.05" cy="4860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="14002.05" y="4863.5151">initialize_class() : void</text><ellipse cx="13993.05" cy="4873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="150" x="14002.05" y="4876.3198">get_singleton() : _Engine *</text><ellipse cx="13993.05" cy="4885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="14002.05" y="4889.1245">set_iterations_per_second(int p_ips) : void</text><ellipse cx="13993.05" cy="4898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="14002.05" y="4901.9292">get_iterations_per_second() const : int</text><ellipse cx="13993.05" cy="4911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="14002.05" y="4914.7339">set_physics_jitter_fix(float p_threshold) : void</text><ellipse cx="13993.05" cy="4924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="14002.05" y="4927.5386">get_physics_jitter_fix() const : float</text><ellipse cx="13993.05" cy="4937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="14002.05" y="4940.3433">get_physics_interpolation_fraction() const : float</text><ellipse cx="13993.05" cy="4949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="14002.05" y="4953.1479">set_target_fps(int p_fps) : void</text><ellipse cx="13993.05" cy="4962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="14002.05" y="4965.9526">get_target_fps() const : int</text><ellipse cx="13993.05" cy="4975.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="14002.05" y="4978.7573">get_frames_per_second() const : float</text><ellipse cx="13993.05" cy="4988.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="14002.05" y="4991.562">get_physics_frames() const : uint64_t</text><ellipse cx="13993.05" cy="5001.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="14002.05" y="5004.3667">get_idle_frames() const : uint64_t</text><ellipse cx="13993.05" cy="5013.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="14002.05" y="5017.1714">get_frames_drawn() : int</text><ellipse cx="13993.05" cy="5026.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="14002.05" y="5029.9761">set_time_scale(float p_scale) : void</text><ellipse cx="13993.05" cy="5039.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="14002.05" y="5042.7808">get_time_scale() : float</text><ellipse cx="13993.05" cy="5052.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="14002.05" y="5055.5854">get_main_loop() const : MainLoop *</text><ellipse cx="13993.05" cy="5065.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="14002.05" y="5068.3901">get_version_info() const : Dictionary</text><ellipse cx="13993.05" cy="5077.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="14002.05" y="5081.1948">get_author_info() const : Dictionary</text><ellipse cx="13993.05" cy="5090.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="14002.05" y="5093.9995">get_copyright_info() const : Array</text><ellipse cx="13993.05" cy="5103.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="14002.05" y="5106.8042">get_donor_info() const : Dictionary</text><ellipse cx="13993.05" cy="5116.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="14002.05" y="5119.6089">get_license_info() const : Dictionary</text><ellipse cx="13993.05" cy="5129.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="14002.05" y="5132.4136">get_license_text() const : String</text><ellipse cx="13993.05" cy="5142.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="14002.05" y="5145.2183">is_in_physics_frame() const : bool</text><ellipse cx="13993.05" cy="5154.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="14002.05" y="5158.0229">has_singleton(const String &amp; p_name) const : bool</text><ellipse cx="13993.05" cy="5167.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="14002.05" y="5170.8276">get_singleton_object(const String &amp; p_name) const : Object *</text><ellipse cx="13993.05" cy="5180.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="14002.05" y="5183.6323">set_editor_hint(bool p_enabled) : void</text><ellipse cx="13993.05" cy="5193.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="14002.05" y="5196.437">is_editor_hint() const : bool</text><ellipse cx="13993.05" cy="5206.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="14002.05" y="5209.2417">_Engine() : void</text></a><!--MD5=[c754248bd0e8ccbf585ab49c3c72bce4]
class C_0000979065355535690103--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" target="_top" title="_JSON" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833" xlink:show="new" xlink:title="_JSON" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="252.875" id="C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.5;" width="561" x="7038.05" y="4815.4531"/><ellipse cx="7296.8" cy="4831.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7299.7688,4837.0938 Q7299.1906,4837.3906 7298.55,4837.5313 Q7297.9094,4837.6875 7297.2063,4837.6875 Q7294.7063,4837.6875 7293.3781,4836.0469 Q7292.0656,4834.3906 7292.0656,4831.2656 Q7292.0656,4828.1406 7293.3781,4826.4844 Q7294.7063,4824.8281 7297.2063,4824.8281 Q7297.9094,4824.8281 7298.55,4824.9844 Q7299.2063,4825.1406 7299.7688,4825.4375 L7299.7688,4828.1563 Q7299.1438,4827.5781 7298.55,4827.3125 Q7297.9563,4827.0313 7297.3313,4827.0313 Q7295.9875,4827.0313 7295.3,4828.1094 Q7294.6125,4829.1719 7294.6125,4831.2656 Q7294.6125,4833.3594 7295.3,4834.4375 Q7295.9875,4835.5 7297.3313,4835.5 Q7297.9563,4835.5 7298.55,4835.2344 Q7299.1438,4834.9531 7299.7688,4834.375 L7299.7688,4837.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="7317.3" y="4835.6074">_JSON</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7039.05" x2="7598.05" y1="4847.4531" y2="4847.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7039.05" x2="7598.05" y1="4855.4531" y2="4855.4531"/><ellipse cx="7049.05" cy="4866.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="7058.05" y="4869.6636">get_class() const : String</text><ellipse cx="7049.05" cy="4879.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="7058.05" y="4882.4683">_get_class_namev() const : const StringName *</text><ellipse cx="7049.05" cy="4892.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="7058.05" y="4895.2729">get_class_ptr_static() : void *</text><ellipse cx="7049.05" cy="4904.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="7058.05" y="4908.0776">get_class_static() : String</text><ellipse cx="7049.05" cy="4917.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="7058.05" y="4920.8823">get_parent_class_static() : String</text><ellipse cx="7049.05" cy="4930.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="7058.05" y="4933.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="7049.05" cy="4943.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="7058.05" y="4946.4917">get_category_static() : String</text><ellipse cx="7049.05" cy="4956.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="7058.05" y="4959.2964">inherits_static() : String</text><ellipse cx="7049.05" cy="4968.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="7058.05" y="4972.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="7049.05" cy="4981.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="7058.05" y="4984.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="7049.05" cy="4994.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="7058.05" y="4997.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="7049.05" cy="5007.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="7058.05" y="5010.5151">initialize_class() : void</text><ellipse cx="7049.05" cy="5020.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="140" x="7058.05" y="5023.3198">get_singleton() : _JSON *</text><ellipse cx="7049.05" cy="5032.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="7058.05" y="5036.1245">print(const Variant &amp; p_value, const String &amp; p_indent = "", bool p_sort_keys = false) : String</text><ellipse cx="7049.05" cy="5045.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="7058.05" y="5048.9292">parse(const String &amp; p_json) : Ref&lt;JSONParseResult&gt;</text><ellipse cx="7049.05" cy="5058.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7058.05" y="5061.7339">_JSON() : void</text></a><!--MD5=[7f9ee7589f5b66fe26bf327ebbd73d28]
class C_0001701907280759632930--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" target="_top" title="CameraServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49" xlink:show="new" xlink:title="CameraServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="380.9219" id="C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="7734.05" y="4751.4531"/><ellipse cx="7886.3" cy="4767.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7889.2688,4773.0938 Q7888.6906,4773.3906 7888.05,4773.5313 Q7887.4094,4773.6875 7886.7063,4773.6875 Q7884.2063,4773.6875 7882.8781,4772.0469 Q7881.5656,4770.3906 7881.5656,4767.2656 Q7881.5656,4764.1406 7882.8781,4762.4844 Q7884.2063,4760.8281 7886.7063,4760.8281 Q7887.4094,4760.8281 7888.05,4760.9844 Q7888.7063,4761.1406 7889.2688,4761.4375 L7889.2688,4764.1563 Q7888.6438,4763.5781 7888.05,4763.3125 Q7887.4563,4763.0313 7886.8313,4763.0313 Q7885.4875,4763.0313 7884.8,4764.1094 Q7884.1125,4765.1719 7884.1125,4767.2656 Q7884.1125,4769.3594 7884.8,4770.4375 Q7885.4875,4771.5 7886.8313,4771.5 Q7887.4563,4771.5 7888.05,4771.2344 Q7888.6438,4770.9531 7889.2688,4770.375 L7889.2688,4773.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="7906.8" y="4771.6074">CameraServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7735.05" x2="8134.05" y1="4783.4531" y2="4783.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7735.05" x2="8134.05" y1="4791.4531" y2="4791.4531"/><ellipse cx="7745.05" cy="4802.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="7754.05" y="4805.6636">get_class() const : String</text><ellipse cx="7745.05" cy="4815.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="7754.05" y="4818.4683">_get_class_namev() const : const StringName *</text><ellipse cx="7745.05" cy="4828.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="7754.05" y="4831.2729">get_class_ptr_static() : void *</text><ellipse cx="7745.05" cy="4840.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="7754.05" y="4844.0776">get_class_static() : String</text><ellipse cx="7745.05" cy="4853.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="7754.05" y="4856.8823">get_parent_class_static() : String</text><ellipse cx="7745.05" cy="4866.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="7754.05" y="4869.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="7745.05" cy="4879.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="7754.05" y="4882.4917">get_category_static() : String</text><ellipse cx="7745.05" cy="4892.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="7754.05" y="4895.2964">inherits_static() : String</text><ellipse cx="7745.05" cy="4904.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="7754.05" y="4908.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="7745.05" cy="4917.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="7754.05" y="4920.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="7745.05" cy="4930.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="7754.05" y="4933.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="7745.05" cy="4943.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="7754.05" y="4946.5151">initialize_class() : void</text><ellipse cx="7745.05" cy="4956.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="189" x="7754.05" y="4959.3198">get_singleton() : CameraServer *</text><ellipse cx="7745.05" cy="4968.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="149" x="7754.05" y="4972.1245">create() : CameraServer *</text><ellipse cx="7745.05" cy="4981.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="7754.05" y="4984.9292">get_free_id() : int</text><ellipse cx="7745.05" cy="4994.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="7754.05" y="4997.7339">get_feed_index(int p_id) : int</text><ellipse cx="7745.05" cy="5007.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="7754.05" y="5010.5386">get_feed_by_id(int p_id) : Ref&lt;CameraFeed&gt;</text><ellipse cx="7745.05" cy="5020.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="7754.05" y="5023.3433">add_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><ellipse cx="7745.05" cy="5032.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="7754.05" y="5036.1479">remove_feed(const Ref&lt;CameraFeed&gt; &amp; p_feed) : void</text><ellipse cx="7745.05" cy="5045.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="7754.05" y="5048.9526">get_feed(int p_index) : Ref&lt;CameraFeed&gt;</text><ellipse cx="7745.05" cy="5058.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="7754.05" y="5061.7573">get_feed_count() : int</text><ellipse cx="7745.05" cy="5071.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="7754.05" y="5074.562">get_feeds() : Array</text><ellipse cx="7745.05" cy="5084.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="7754.05" y="5087.3667">feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID</text><ellipse cx="7745.05" cy="5096.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="7754.05" y="5100.1714">CameraServer() : void</text><ellipse cx="7745.05" cy="5109.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="7754.05" y="5112.9761">~CameraServer() : void</text><ellipse cx="7745.05" cy="5122.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="144" x="7754.05" y="5125.7808">make_default&lt;T&gt;() : void</text></a><!--MD5=[5316dbe070bc4024b413849b0399fc2e]
class C_0001589464385186808769--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" target="_top" title="VisualServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42" xlink:show="new" xlink:title="VisualServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="5489.9922" id="C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.5;" width="2566" x="8270.55" y="2196.9531"/><ellipse cx="9511.3" cy="2212.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9511.4094,2208.2969 L9510.2531,2213.375 L9512.5813,2213.375 L9511.4094,2208.2969 Z M9509.925,2206.0625 L9512.9094,2206.0625 L9516.2688,2218.4531 L9513.8156,2218.4531 L9513.05,2215.3906 L9509.7688,2215.3906 L9509.0188,2218.4531 L9506.5813,2218.4531 L9509.925,2206.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="9531.8" y="2217.1074">VisualServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8271.55" x2="10835.55" y1="2228.9531" y2="2228.9531"/><ellipse cx="8281.55" cy="2239.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="8290.55" y="2243.1636">NO_INDEX_ARRAY : enum</text><ellipse cx="8281.55" cy="2252.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="8290.55" y="2255.9683">ARRAY_WEIGHTS_SIZE : enum</text><ellipse cx="8281.55" cy="2265.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="8290.55" y="2268.7729">CANVAS_ITEM_Z_MIN : enum</text><ellipse cx="8281.55" cy="2278.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="8290.55" y="2281.5776">CANVAS_ITEM_Z_MAX : enum</text><ellipse cx="8281.55" cy="2291.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="8290.55" y="2294.3823">MAX_GLOW_LEVELS : enum</text><ellipse cx="8281.55" cy="2303.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="8290.55" y="2307.187">MAX_CURSORS : enum</text><ellipse cx="8281.55" cy="2316.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="8290.55" y="2319.9917">MATERIAL_RENDER_PRIORITY_MIN : enum</text><ellipse cx="8281.55" cy="2329.5859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="8290.55" y="2332.7964">MATERIAL_RENDER_PRIORITY_MAX : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8271.55" x2="10835.55" y1="2339.3906" y2="2339.3906"/><ellipse cx="8281.55" cy="2350.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="8290.55" y="2353.6011">get_class() const : String</text><ellipse cx="8281.55" cy="2363.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="8290.55" y="2366.4058">_get_class_namev() const : const StringName *</text><ellipse cx="8281.55" cy="2376" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="8290.55" y="2379.2104">get_class_ptr_static() : void *</text><ellipse cx="8281.55" cy="2388.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="8290.55" y="2392.0151">get_class_static() : String</text><ellipse cx="8281.55" cy="2401.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="8290.55" y="2404.8198">get_parent_class_static() : String</text><ellipse cx="8281.55" cy="2414.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="8290.55" y="2417.6245">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="8281.55" cy="2427.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="8290.55" y="2430.4292">get_category_static() : String</text><ellipse cx="8281.55" cy="2440.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="8290.55" y="2443.2339">inherits_static() : String</text><ellipse cx="8281.55" cy="2452.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="8290.55" y="2456.0386">is_class(const String &amp; p_class) const : bool</text><ellipse cx="8281.55" cy="2465.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="8290.55" y="2468.8433">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="8281.55" cy="2478.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="8290.55" y="2481.6479">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="8281.55" cy="2491.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="8290.55" y="2494.4526">initialize_class() : void</text><ellipse cx="8281.55" cy="2504.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="178" x="8290.55" y="2507.2573">get_singleton() : VisualServer *</text><ellipse cx="8281.55" cy="2516.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="138" x="8290.55" y="2520.062">create() : VisualServer *</text><ellipse cx="8281.55" cy="2529.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="8290.55" y="2532.8667">texture_create() = 0 : RID</text><ellipse cx="8281.55" cy="2542.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="628" x="8290.55" y="2545.6714">texture_create_from_image(const Ref&lt;Image&gt; &amp; p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID</text><ellipse cx="8281.55" cy="2555.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1082" x="8290.55" y="2558.4761">texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void</text><ellipse cx="8281.55" cy="2568.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="8290.55" y="2571.2808">texture_set_data(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int p_layer = 0) = 0 : void</text><ellipse cx="8281.55" cy="2580.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="974" x="8290.55" y="2584.0854">texture_set_data_partial(RID p_texture, const Ref&lt;Image&gt; &amp; p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void</text><ellipse cx="8281.55" cy="2593.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="8290.55" y="2596.8901">texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref&lt;Image&gt;</text><ellipse cx="8281.55" cy="2606.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="8290.55" y="2609.6948">texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void</text><ellipse cx="8281.55" cy="2619.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="8290.55" y="2622.4995">texture_get_flags(RID p_texture) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="2632.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="8290.55" y="2635.3042">texture_get_format(RID p_texture) const = 0 : Image::Format</text><ellipse cx="8281.55" cy="2644.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="8290.55" y="2648.1089">texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType</text><ellipse cx="8281.55" cy="2657.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="8290.55" y="2660.9136">texture_get_texid(RID p_texture) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="2670.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="301" x="8290.55" y="2673.7183">texture_get_width(RID p_texture) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="2683.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="8290.55" y="2686.5229">texture_get_height(RID p_texture) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="2696.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="8290.55" y="2699.3276">texture_get_depth(RID p_texture) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="2708.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="8290.55" y="2712.1323">texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void</text><ellipse cx="8281.55" cy="2721.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="8290.55" y="2724.937">texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void</text><ellipse cx="8281.55" cy="2734.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="8290.55" y="2737.7417">texture_set_path(RID p_texture, const String &amp; p_path) = 0 : void</text><ellipse cx="8281.55" cy="2747.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="8290.55" y="2750.5464">texture_get_path(RID p_texture) const = 0 : String</text><ellipse cx="8281.55" cy="2760.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="8290.55" y="2763.3511">texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="2772.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="707" x="8290.55" y="2776.1558">texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="8281.55" cy="2785.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="718" x="8290.55" y="2788.9604">texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="8281.55" cy="2798.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="733" x="8290.55" y="2801.7651">texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void</text><ellipse cx="8281.55" cy="2811.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="8290.55" y="2814.5698">texture_debug_usage(List&lt;VisualServer::TextureInfo&gt; * r_info) = 0 : void</text><ellipse cx="8281.55" cy="2824.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="8290.55" y="2827.3745">_texture_debug_usage_bind() : Array</text><ellipse cx="8281.55" cy="2836.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="275" x="8290.55" y="2840.1792">textures_keep_original(bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="2849.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="8290.55" y="2852.9839">texture_set_proxy(RID p_proxy, RID p_base) = 0 : void</text><ellipse cx="8281.55" cy="2862.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="8290.55" y="2865.7886">texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="2875.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="124" x="8290.55" y="2878.5933">sky_create() = 0 : RID</text><ellipse cx="8281.55" cy="2888.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="8290.55" y="2891.3979">sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void</text><ellipse cx="8281.55" cy="2900.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="144" x="8290.55" y="2904.2026">shader_create() = 0 : RID</text><ellipse cx="8281.55" cy="2913.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="8290.55" y="2917.0073">shader_set_code(RID p_shader, const String &amp; p_code) = 0 : void</text><ellipse cx="8281.55" cy="2926.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="8290.55" y="2929.812">shader_get_code(RID p_shader) const = 0 : String</text><ellipse cx="8281.55" cy="2939.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="506" x="8290.55" y="2942.6167">shader_get_param_list(RID p_shader, List&lt;PropertyInfo&gt; * p_param_list) const = 0 : void</text><ellipse cx="8281.55" cy="2952.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="8290.55" y="2955.4214">_shader_get_param_list_bind(RID p_shader) const : Array</text><ellipse cx="8281.55" cy="2965.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="8290.55" y="2968.2261">shader_set_default_texture_param(RID p_shader, const StringName &amp; p_name, RID p_texture) = 0 : void</text><ellipse cx="8281.55" cy="2977.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="8290.55" y="2981.0308">shader_get_default_texture_param(RID p_shader, const StringName &amp; p_name) const = 0 : RID</text><ellipse cx="8281.55" cy="2990.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="437" x="8290.55" y="2993.8354">shader_add_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="8281.55" cy="3003.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="498" x="8290.55" y="3006.6401">shader_get_custom_defines(RID p_shader, Vector&lt;String&gt; * p_defines) const = 0 : void</text><ellipse cx="8281.55" cy="3016.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="8290.55" y="3019.4448">shader_remove_custom_define(RID p_shader, const String &amp; p_define) = 0 : void</text><ellipse cx="8281.55" cy="3029.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="8290.55" y="3032.2495">material_create() = 0 : RID</text><ellipse cx="8281.55" cy="3041.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="8290.55" y="3045.0542">material_set_shader(RID p_shader_material, RID p_shader) = 0 : void</text><ellipse cx="8281.55" cy="3054.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="8290.55" y="3057.8589">material_get_shader(RID p_shader_material) const = 0 : RID</text><ellipse cx="8281.55" cy="3067.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="8290.55" y="3070.6636">material_set_param(RID p_material, const StringName &amp; p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="8281.55" cy="3080.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="8290.55" y="3083.4683">material_get_param(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="8281.55" cy="3093.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="536" x="8290.55" y="3096.2729">material_get_param_default(RID p_material, const StringName &amp; p_param) const = 0 : Variant</text><ellipse cx="8281.55" cy="3105.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="8290.55" y="3109.0776">material_set_render_priority(RID p_material, int priority) = 0 : void</text><ellipse cx="8281.55" cy="3118.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="8290.55" y="3121.8823">material_set_line_width(RID p_material, float p_width) = 0 : void</text><ellipse cx="8281.55" cy="3131.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="406" x="8290.55" y="3134.687">material_set_next_pass(RID p_material, RID p_next_material) = 0 : void</text><ellipse cx="8281.55" cy="3144.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="136" x="8290.55" y="3147.4917">mesh_create() = 0 : RID</text><ellipse cx="8281.55" cy="3157.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="8290.55" y="3160.2964">mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t</text><ellipse cx="8281.55" cy="3169.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="8290.55" y="3173.1011">mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t</text><ellipse cx="8281.55" cy="3182.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="748" x="8290.55" y="3185.9058">mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t</text><ellipse cx="8281.55" cy="3195.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1250" x="8290.55" y="3198.7104">mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array &amp; p_arrays, const Array &amp; p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void</text><ellipse cx="8281.55" cy="3208.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2272" x="8290.55" y="3211.5151">mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector&lt;uint8_t&gt; &amp; p_array, int p_vertex_count, const PoolVector&lt;uint8_t&gt; &amp; p_index_array, int p_index_count, const AABB &amp; p_aabb, const Vector&lt;PoolVector&lt;uint8_t&gt;&gt; &amp; p_blend_shapes = Vector&lt;PoolVector&lt;uint8_t&gt; &gt;(), const Vector&lt;AABB&gt; &amp; p_bone_aabbs = Vector&lt;AABB&gt;()) = 0 : void</text><ellipse cx="8281.55" cy="3221.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="8290.55" y="3224.3198">mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void</text><ellipse cx="8281.55" cy="3233.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="8290.55" y="3237.1245">mesh_get_blend_shape_count(RID p_mesh) const = 0 : int</text><ellipse cx="8281.55" cy="3246.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="8290.55" y="3249.9292">mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="3259.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="492" x="8290.55" y="3262.7339">mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode</text><ellipse cx="8281.55" cy="3272.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="667" x="8290.55" y="3275.5386">mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector&lt;uint8_t&gt; &amp; p_data) = 0 : void</text><ellipse cx="8281.55" cy="3285.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="8290.55" y="3288.3433">mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="3297.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="8290.55" y="3301.1479">mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID</text><ellipse cx="8281.55" cy="3310.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="8290.55" y="3313.9526">mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="8281.55" cy="3323.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="8290.55" y="3326.7573">mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int</text><ellipse cx="8281.55" cy="3336.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="8290.55" y="3339.562">mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="8281.55" cy="3349.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="520" x="8290.55" y="3352.3667">mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="8281.55" cy="3361.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="8290.55" y="3365.1714">mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="8281.55" cy="3374.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="8290.55" y="3377.9761">mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array</text><ellipse cx="8281.55" cy="3387.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="8290.55" y="3390.7808">mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t</text><ellipse cx="8281.55" cy="3400.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="8290.55" y="3403.5854">mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType</text><ellipse cx="8281.55" cy="3413.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="8290.55" y="3416.3901">mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB</text><ellipse cx="8281.55" cy="3425.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="8290.55" y="3429.1948">mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector&lt;PoolVector&lt;uint8_t&gt;&gt;</text><ellipse cx="8281.55" cy="3438.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="8290.55" y="3441.9995">mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector&lt;AABB&gt;</text><ellipse cx="8281.55" cy="3451.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="8290.55" y="3454.8042">_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array</text><ellipse cx="8281.55" cy="3464.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="8290.55" y="3467.6089">mesh_remove_surface(RID p_mesh, int p_index) = 0 : void</text><ellipse cx="8281.55" cy="3477.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="8290.55" y="3480.4136">mesh_get_surface_count(RID p_mesh) const = 0 : int</text><ellipse cx="8281.55" cy="3490.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="402" x="8290.55" y="3493.2183">mesh_set_custom_aabb(RID p_mesh, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="8281.55" cy="3502.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="8290.55" y="3506.0229">mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB</text><ellipse cx="8281.55" cy="3515.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="8290.55" y="3518.8276">mesh_clear(RID p_mesh) = 0 : void</text><ellipse cx="8281.55" cy="3528.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="8290.55" y="3531.6323">multimesh_create() = 0 : RID</text><ellipse cx="8281.55" cy="3541.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1579" x="8290.55" y="3544.437">multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void</text><ellipse cx="8281.55" cy="3554.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="8290.55" y="3557.2417">multimesh_get_instance_count(RID p_multimesh) const = 0 : int</text><ellipse cx="8281.55" cy="3566.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="8290.55" y="3570.0464">multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void</text><ellipse cx="8281.55" cy="3579.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="8290.55" y="3582.8511">multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="3592.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="652" x="8290.55" y="3595.6558">multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="3605.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="8290.55" y="3608.4604">multimesh_instance_set_color(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="3618.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="576" x="8290.55" y="3621.2651">multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="3630.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="312" x="8290.55" y="3634.0698">multimesh_get_mesh(RID p_multimesh) const = 0 : RID</text><ellipse cx="8281.55" cy="3643.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="8290.55" y="3646.8745">multimesh_get_aabb(RID p_multimesh) const = 0 : AABB</text><ellipse cx="8281.55" cy="3656.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="8290.55" y="3659.6792">multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform</text><ellipse cx="8281.55" cy="3669.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="8290.55" y="3672.4839">multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D</text><ellipse cx="8281.55" cy="3682.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="8290.55" y="3685.2886">multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="8281.55" cy="3694.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="8290.55" y="3698.0933">multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color</text><ellipse cx="8281.55" cy="3707.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="537" x="8290.55" y="3710.8979">multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector&lt;float&gt; &amp; p_array) = 0 : void</text><ellipse cx="8281.55" cy="3720.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="421" x="8290.55" y="3723.7026">multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void</text><ellipse cx="8281.55" cy="3733.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="8290.55" y="3736.5073">multimesh_get_visible_instances(RID p_multimesh) const = 0 : int</text><ellipse cx="8281.55" cy="3746.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="8290.55" y="3749.312">immediate_create() = 0 : RID</text><ellipse cx="8281.55" cy="3758.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="629" x="8290.55" y="3762.1167">immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="3771.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="8290.55" y="3774.9214">immediate_vertex(RID p_immediate, const Vector3 &amp; p_vertex) = 0 : void</text><ellipse cx="8281.55" cy="3784.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="8290.55" y="3787.7261">immediate_vertex_2d(RID p_immediate, const Vector2 &amp; p_vertex) : void</text><ellipse cx="8281.55" cy="3797.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="8290.55" y="3800.5308">immediate_normal(RID p_immediate, const Vector3 &amp; p_normal) = 0 : void</text><ellipse cx="8281.55" cy="3810.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="419" x="8290.55" y="3813.3354">immediate_tangent(RID p_immediate, const Plane &amp; p_tangent) = 0 : void</text><ellipse cx="8281.55" cy="3822.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="8290.55" y="3826.1401">immediate_color(RID p_immediate, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="3835.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="8290.55" y="3838.9448">immediate_uv(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="8281.55" cy="3848.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="8290.55" y="3851.7495">immediate_uv2(RID p_immediate, const Vector2 &amp; tex_uv) = 0 : void</text><ellipse cx="8281.55" cy="3861.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="251" x="8290.55" y="3864.5542">immediate_end(RID p_immediate) = 0 : void</text><ellipse cx="8281.55" cy="3874.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="8290.55" y="3877.3589">immediate_clear(RID p_immediate) = 0 : void</text><ellipse cx="8281.55" cy="3886.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="391" x="8290.55" y="3890.1636">immediate_set_material(RID p_immediate, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="3899.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="8290.55" y="3902.9683">immediate_get_material(RID p_immediate) const = 0 : RID</text><ellipse cx="8281.55" cy="3912.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="8290.55" y="3915.7729">skeleton_create() = 0 : RID</text><ellipse cx="8281.55" cy="3925.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="8290.55" y="3928.5776">skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void</text><ellipse cx="8281.55" cy="3938.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="8290.55" y="3941.3823">skeleton_get_bone_count(RID p_skeleton) const = 0 : int</text><ellipse cx="8281.55" cy="3950.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="8290.55" y="3954.187">skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="3963.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="8290.55" y="3966.9917">skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform</text><ellipse cx="8281.55" cy="3976.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="606" x="8290.55" y="3979.7964">skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="3989.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="8290.55" y="3992.6011">skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D</text><ellipse cx="8281.55" cy="4002.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="8290.55" y="4005.4058">skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D &amp; p_base_transform) = 0 : void</text><ellipse cx="8281.55" cy="4015" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="8290.55" y="4018.2104">directional_light_create() = 0 : RID</text><ellipse cx="8281.55" cy="4027.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="8290.55" y="4031.0151">omni_light_create() = 0 : RID</text><ellipse cx="8281.55" cy="4040.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="159" x="8290.55" y="4043.8198">spot_light_create() = 0 : RID</text><ellipse cx="8281.55" cy="4053.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="8290.55" y="4056.6245">light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="4066.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="8290.55" y="4069.4292">light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void</text><ellipse cx="8281.55" cy="4079.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="318" x="8290.55" y="4082.2339">light_set_shadow(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="4091.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="8290.55" y="4095.0386">light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="4104.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="8290.55" y="4107.8433">light_set_projector(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="8281.55" cy="4117.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="8290.55" y="4120.6479">light_set_negative(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4130.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="8290.55" y="4133.4526">light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void</text><ellipse cx="8281.55" cy="4143.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="8290.55" y="4146.2573">light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="4155.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="8290.55" y="4159.062">light_set_use_gi(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4168.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="8290.55" y="4171.8667">light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void</text><ellipse cx="8281.55" cy="4181.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="8290.55" y="4184.6714">light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="4194.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="8290.55" y="4197.4761">light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void</text><ellipse cx="8281.55" cy="4207.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="625" x="8290.55" y="4210.2808">light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="4219.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="8290.55" y="4223.0854">light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4232.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="810" x="8290.55" y="4235.8901">light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void</text><ellipse cx="8281.55" cy="4245.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="197" x="8290.55" y="4248.6948">reflection_probe_create() = 0 : RID</text><ellipse cx="8281.55" cy="4258.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="631" x="8290.55" y="4261.4995">reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="4271.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="8290.55" y="4274.3042">reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void</text><ellipse cx="8281.55" cy="4283.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="8290.55" y="4287.1089">reflection_probe_set_interior_ambient(RID p_probe, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="4296.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="8290.55" y="4299.9136">reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void</text><ellipse cx="8281.55" cy="4309.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="8290.55" y="4312.7183">reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void</text><ellipse cx="8281.55" cy="4322.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="433" x="8290.55" y="4325.5229">reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void</text><ellipse cx="8281.55" cy="4335.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="8290.55" y="4338.3276">reflection_probe_set_extents(RID p_probe, const Vector3 &amp; p_extents) = 0 : void</text><ellipse cx="8281.55" cy="4347.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="476" x="8290.55" y="4351.1323">reflection_probe_set_origin_offset(RID p_probe, const Vector3 &amp; p_offset) = 0 : void</text><ellipse cx="8281.55" cy="4360.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="8290.55" y="4363.937">reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4373.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="472" x="8290.55" y="4376.7417">reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4386.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="8290.55" y="4389.5464">reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4399.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="418" x="8290.55" y="4402.3511">reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void</text><ellipse cx="8281.55" cy="4411.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="8290.55" y="4415.1558">reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void</text><ellipse cx="8281.55" cy="4424.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="8290.55" y="4427.9604">gi_probe_create() = 0 : RID</text><ellipse cx="8281.55" cy="4437.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="8290.55" y="4440.7651">gi_probe_set_bounds(RID p_probe, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="8281.55" cy="4450.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="8290.55" y="4453.5698">gi_probe_get_bounds(RID p_probe) const = 0 : AABB</text><ellipse cx="8281.55" cy="4463.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="8290.55" y="4466.3745">gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void</text><ellipse cx="8281.55" cy="4475.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="8290.55" y="4479.1792">gi_probe_get_cell_size(RID p_probe) const = 0 : float</text><ellipse cx="8281.55" cy="4488.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="456" x="8290.55" y="4491.9839">gi_probe_set_to_cell_xform(RID p_probe, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="8281.55" cy="4501.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="361" x="8290.55" y="4504.7886">gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform</text><ellipse cx="8281.55" cy="4514.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="484" x="8290.55" y="4517.5933">gi_probe_set_dynamic_data(RID p_probe, const PoolVector&lt;int&gt; &amp; p_data) = 0 : void</text><ellipse cx="8281.55" cy="4527.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="8290.55" y="4530.3979">gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector&lt;int&gt;</text><ellipse cx="8281.55" cy="4539.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="8290.55" y="4543.2026">gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void</text><ellipse cx="8281.55" cy="4552.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="327" x="8290.55" y="4556.0073">gi_probe_get_dynamic_range(RID p_probe) const = 0 : int</text><ellipse cx="8281.55" cy="4565.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="8290.55" y="4568.812">gi_probe_set_energy(RID p_probe, float p_range) = 0 : void</text><ellipse cx="8281.55" cy="4578.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="291" x="8290.55" y="4581.6167">gi_probe_get_energy(RID p_probe) const = 0 : float</text><ellipse cx="8281.55" cy="4591.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="321" x="8290.55" y="4594.4214">gi_probe_set_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="8281.55" cy="4604.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="274" x="8290.55" y="4607.2261">gi_probe_get_bias(RID p_probe) const = 0 : float</text><ellipse cx="8281.55" cy="4616.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="8290.55" y="4620.0308">gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void</text><ellipse cx="8281.55" cy="4629.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="8290.55" y="4632.8354">gi_probe_get_normal_bias(RID p_probe) const = 0 : float</text><ellipse cx="8281.55" cy="4642.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="8290.55" y="4645.6401">gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void</text><ellipse cx="8281.55" cy="4655.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="319" x="8290.55" y="4658.4448">gi_probe_get_propagation(RID p_probe) const = 0 : float</text><ellipse cx="8281.55" cy="4668.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="8290.55" y="4671.2495">gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4680.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="8290.55" y="4684.0542">gi_probe_is_interior(RID p_probe) const = 0 : bool</text><ellipse cx="8281.55" cy="4693.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="8290.55" y="4696.8589">gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="4706.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="8290.55" y="4709.6636">gi_probe_is_compressed(RID p_probe) const = 0 : bool</text><ellipse cx="8281.55" cy="4719.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="203" x="8290.55" y="4722.4683">lightmap_capture_create() = 0 : RID</text><ellipse cx="8281.55" cy="4732.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="460" x="8290.55" y="4735.2729">lightmap_capture_set_bounds(RID p_capture, const AABB &amp; p_bounds) = 0 : void</text><ellipse cx="8281.55" cy="4744.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="8290.55" y="4748.0776">lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB</text><ellipse cx="8281.55" cy="4757.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="535" x="8290.55" y="4760.8823">lightmap_capture_set_octree(RID p_capture, const PoolVector&lt;uint8_t&gt; &amp; p_octree) = 0 : void</text><ellipse cx="8281.55" cy="4770.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="562" x="8290.55" y="4773.687">lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform &amp; p_xform) = 0 : void</text><ellipse cx="8281.55" cy="4783.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="467" x="8290.55" y="4786.4917">lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform</text><ellipse cx="8281.55" cy="4796.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="8290.55" y="4799.2964">lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void</text><ellipse cx="8281.55" cy="4808.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="8290.55" y="4812.1011">lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int</text><ellipse cx="8281.55" cy="4821.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="8290.55" y="4824.9058">lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector&lt;uint8_t&gt;</text><ellipse cx="8281.55" cy="4834.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="8290.55" y="4837.7104">lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void</text><ellipse cx="8281.55" cy="4847.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="8290.55" y="4850.5151">lightmap_capture_get_energy(RID p_capture) const = 0 : float</text><ellipse cx="8281.55" cy="4860.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="8290.55" y="4863.3198">lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void</text><ellipse cx="8281.55" cy="4872.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="8290.55" y="4876.1245">lightmap_capture_is_interior(RID p_capture) const = 0 : bool</text><ellipse cx="8281.55" cy="4885.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="8290.55" y="4888.9292">particles_create() = 0 : RID</text><ellipse cx="8281.55" cy="4898.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="8290.55" y="4901.7339">particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void</text><ellipse cx="8281.55" cy="4911.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="276" x="8290.55" y="4914.5386">particles_get_emitting(RID p_particles) = 0 : bool</text><ellipse cx="8281.55" cy="4924.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="8290.55" y="4927.3433">particles_set_amount(RID p_particles, int p_amount) = 0 : void</text><ellipse cx="8281.55" cy="4936.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="8290.55" y="4940.1479">particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void</text><ellipse cx="8281.55" cy="4949.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="8290.55" y="4952.9526">particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void</text><ellipse cx="8281.55" cy="4962.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="8290.55" y="4965.7573">particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void</text><ellipse cx="8281.55" cy="4975.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="8290.55" y="4978.562">particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="8281.55" cy="4988.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="8290.55" y="4991.3667">particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void</text><ellipse cx="8281.55" cy="5000.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="8290.55" y="5004.1714">particles_set_custom_aabb(RID p_particles, const AABB &amp; p_aabb) = 0 : void</text><ellipse cx="8281.55" cy="5013.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="8290.55" y="5016.9761">particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void</text><ellipse cx="8281.55" cy="5026.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="8290.55" y="5029.7808">particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="5039.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="8290.55" y="5042.5854">particles_set_process_material(RID p_particles, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="5052.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="8290.55" y="5055.3901">particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void</text><ellipse cx="8281.55" cy="5064.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="8290.55" y="5068.1948">particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="5077.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="8290.55" y="5080.9995">particles_is_inactive(RID p_particles) = 0 : bool</text><ellipse cx="8281.55" cy="5090.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="8290.55" y="5093.8042">particles_request_process(RID p_particles) = 0 : void</text><ellipse cx="8281.55" cy="5103.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="244" x="8290.55" y="5106.6089">particles_restart(RID p_particles) = 0 : void</text><ellipse cx="8281.55" cy="5116.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="540" x="8290.55" y="5119.4136">particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void</text><ellipse cx="8281.55" cy="5129.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="8290.55" y="5132.2183">particles_set_draw_passes(RID p_particles, int p_count) = 0 : void</text><ellipse cx="8281.55" cy="5141.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="8290.55" y="5145.0229">particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void</text><ellipse cx="8281.55" cy="5154.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="8290.55" y="5157.8276">particles_get_current_aabb(RID p_particles) = 0 : AABB</text><ellipse cx="8281.55" cy="5167.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="528" x="8290.55" y="5170.6323">particles_set_emission_transform(RID p_particles, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="5180.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="148" x="8290.55" y="5183.437">camera_create() = 0 : RID</text><ellipse cx="8281.55" cy="5193.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="8290.55" y="5196.2417">camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="8281.55" cy="5205.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="8290.55" y="5209.0464">camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="8281.55" cy="5218.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="602" x="8290.55" y="5221.8511">camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void</text><ellipse cx="8281.55" cy="5231.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="8290.55" y="5234.6558">camera_set_transform(RID p_camera, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="5244.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="8290.55" y="5247.4604">camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void</text><ellipse cx="8281.55" cy="5257.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="8290.55" y="5260.2651">camera_set_environment(RID p_camera, RID p_env) = 0 : void</text><ellipse cx="8281.55" cy="5269.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="8290.55" y="5273.0698">camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="5282.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="8290.55" y="5285.8745">viewport_create() = 0 : RID</text><ellipse cx="8281.55" cy="5295.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="8290.55" y="5298.6792">viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void</text><ellipse cx="8281.55" cy="5308.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="8290.55" y="5311.4839">viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void</text><ellipse cx="8281.55" cy="5321.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="8290.55" y="5324.2886">viewport_set_active(RID p_viewport, bool p_active) = 0 : void</text><ellipse cx="8281.55" cy="5333.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="8290.55" y="5337.0933">viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void</text><ellipse cx="8281.55" cy="5346.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="8290.55" y="5349.8979">viewport_attach_to_screen(RID p_viewport, const Rect2 &amp; p_rect = Rect2(), int p_screen = 0) = 0 : void</text><ellipse cx="8281.55" cy="5359.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="455" x="8290.55" y="5362.7026">viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="5372.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="246" x="8290.55" y="5375.5073">viewport_detach(RID p_viewport) = 0 : void</text><ellipse cx="8281.55" cy="5385.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="8290.55" y="5388.312">viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="5397.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="8290.55" y="5401.1167">viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="5410.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="578" x="8290.55" y="5413.9214">viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void</text><ellipse cx="8281.55" cy="5423.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="8290.55" y="5426.7261">viewport_get_texture(RID p_viewport) const = 0 : RID</text><ellipse cx="8281.55" cy="5436.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="8290.55" y="5439.5308">viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="8281.55" cy="5449.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="8290.55" y="5452.3354">viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void</text><ellipse cx="8281.55" cy="5461.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="8290.55" y="5465.1401">viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="8281.55" cy="5474.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="8290.55" y="5477.9448">viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="8281.55" cy="5487.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="8290.55" y="5490.7495">viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void</text><ellipse cx="8281.55" cy="5500.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="8290.55" y="5503.5542">viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void</text><ellipse cx="8281.55" cy="5513.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="8290.55" y="5516.3589">viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void</text><ellipse cx="8281.55" cy="5525.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="373" x="8290.55" y="5529.1636">viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="8281.55" cy="5538.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="8290.55" y="5541.9683">viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void</text><ellipse cx="8281.55" cy="5551.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="595" x="8290.55" y="5554.7729">viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D &amp; p_offset) = 0 : void</text><ellipse cx="8281.55" cy="5564.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="463" x="8290.55" y="5567.5776">viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="5577.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="575" x="8290.55" y="5580.3823">viewport_set_global_canvas_transform(RID p_viewport, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="5589.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="8290.55" y="5593.187">viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void</text><ellipse cx="8281.55" cy="5602.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="8290.55" y="5605.9917">viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void</text><ellipse cx="8281.55" cy="5615.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="8290.55" y="5618.7964">viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void</text><ellipse cx="8281.55" cy="5628.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="8290.55" y="5631.6011">viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void</text><ellipse cx="8281.55" cy="5641.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="8290.55" y="5644.4058">viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void</text><ellipse cx="8281.55" cy="5654" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="8290.55" y="5657.2104">viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void</text><ellipse cx="8281.55" cy="5666.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="8290.55" y="5670.0151">viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="5679.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="8290.55" y="5682.8198">viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void</text><ellipse cx="8281.55" cy="5692.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="8290.55" y="5695.6245">viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int</text><ellipse cx="8281.55" cy="5705.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="548" x="8290.55" y="5708.4292">viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void</text><ellipse cx="8281.55" cy="5718.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="177" x="8290.55" y="5721.2339">environment_create() = 0 : RID</text><ellipse cx="8281.55" cy="5730.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="8290.55" y="5734.0386">environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void</text><ellipse cx="8281.55" cy="5743.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="8290.55" y="5746.8433">environment_set_sky(RID p_env, RID p_sky) = 0 : void</text><ellipse cx="8281.55" cy="5756.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="8290.55" y="5759.6479">environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void</text><ellipse cx="8281.55" cy="5769.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="8290.55" y="5772.4526">environment_set_sky_orientation(RID p_env, const Basis &amp; p_orientation) = 0 : void</text><ellipse cx="8281.55" cy="5782.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="8290.55" y="5785.2573">environment_set_bg_color(RID p_env, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="5794.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="376" x="8290.55" y="5798.062">environment_set_bg_energy(RID p_env, float p_energy) = 0 : void</text><ellipse cx="8281.55" cy="5807.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="8290.55" y="5810.8667">environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void</text><ellipse cx="8281.55" cy="5820.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="734" x="8290.55" y="5823.6714">environment_set_ambient_light(RID p_env, const Color &amp; p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void</text><ellipse cx="8281.55" cy="5833.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="8290.55" y="5836.4761">environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void</text><ellipse cx="8281.55" cy="5846.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1007" x="8290.55" y="5849.2808">environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="8281.55" cy="5858.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="997" x="8290.55" y="5862.0854">environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void</text><ellipse cx="8281.55" cy="5871.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1715" x="8290.55" y="5874.8901">environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void</text><ellipse cx="8281.55" cy="5884.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1464" x="8290.55" y="5887.6948">environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void</text><ellipse cx="8281.55" cy="5897.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="762" x="8290.55" y="5900.4995">environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void</text><ellipse cx="8281.55" cy="5910.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="869" x="8290.55" y="5913.3042">environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void</text><ellipse cx="8281.55" cy="5922.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1885" x="8290.55" y="5926.1089">environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color &amp; p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void</text><ellipse cx="8281.55" cy="5935.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="736" x="8290.55" y="5938.9136">environment_set_fog(RID p_env, bool p_enable, const Color &amp; p_color, const Color &amp; p_sun_color, float p_sun_amount) = 0 : void</text><ellipse cx="8281.55" cy="5948.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="948" x="8290.55" y="5951.7183">environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void</text><ellipse cx="8281.55" cy="5961.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="723" x="8290.55" y="5964.5229">environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void</text><ellipse cx="8281.55" cy="5974.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="153" x="8290.55" y="5977.3276">scenario_create() = 0 : RID</text><ellipse cx="8281.55" cy="5986.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="557" x="8290.55" y="5990.1323">scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void</text><ellipse cx="8281.55" cy="5999.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="417" x="8290.55" y="6002.937">scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="8281.55" cy="6012.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="8290.55" y="6015.7417">scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void</text><ellipse cx="8281.55" cy="6025.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="8290.55" y="6028.5464">scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void</text><ellipse cx="8281.55" cy="6038.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="8290.55" y="6041.3511">instance_create2(RID p_base, RID p_scenario) : RID</text><ellipse cx="8281.55" cy="6050.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="8290.55" y="6054.1558">instance_create() = 0 : RID</text><ellipse cx="8281.55" cy="6063.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="8290.55" y="6066.9604">instance_set_base(RID p_instance, RID p_base) = 0 : void</text><ellipse cx="8281.55" cy="6076.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="8290.55" y="6079.7651">instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void</text><ellipse cx="8281.55" cy="6089.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="8290.55" y="6092.5698">instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void</text><ellipse cx="8281.55" cy="6102.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="470" x="8290.55" y="6105.3745">instance_set_transform(RID p_instance, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="6114.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="430" x="8290.55" y="6118.1792">instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void</text><ellipse cx="8281.55" cy="6127.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="8290.55" y="6130.9839">instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void</text><ellipse cx="8281.55" cy="6140.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="494" x="8290.55" y="6143.7886">instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="6153.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="8290.55" y="6156.5933">instance_set_visible(RID p_instance, bool p_visible) = 0 : void</text><ellipse cx="8281.55" cy="6166.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="861" x="8290.55" y="6169.3979">instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 &amp; p_lightmap_uv_rect) = 0 : void</text><ellipse cx="8281.55" cy="6178.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="8290.55" y="6182.2026">instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void</text><ellipse cx="8281.55" cy="6191.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="8290.55" y="6195.0073">instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void</text><ellipse cx="8281.55" cy="6204.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="8290.55" y="6207.812">instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="6217.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="8290.55" y="6220.6167">instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void</text><ellipse cx="8281.55" cy="6230.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="8290.55" y="6233.4214">instances_cull_aabb(const AABB &amp; p_aabb, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="8281.55" cy="6243.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="694" x="8290.55" y="6246.2261">instances_cull_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="8281.55" cy="6255.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="645" x="8290.55" y="6259.0308">instances_cull_convex(const Vector&lt;Plane&gt; &amp; p_convex, RID p_scenario = = RID()) const = 0 : Vector&lt;ObjectID&gt;</text><ellipse cx="8281.55" cy="6268.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="507" x="8290.55" y="6271.8354">_instances_cull_aabb_bind(const AABB &amp; p_aabb, RID p_scenario = = RID()) const : Array</text><ellipse cx="8281.55" cy="6281.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="637" x="8290.55" y="6284.6401">_instances_cull_ray_bind(const Vector3 &amp; p_from, const Vector3 &amp; p_to, RID p_scenario = = RID()) const : Array</text><ellipse cx="8281.55" cy="6294.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="8290.55" y="6297.4448">_instances_cull_convex_bind(const Array &amp; p_convex, RID p_scenario = = RID()) const : Array</text><ellipse cx="8281.55" cy="6307.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="8290.55" y="6310.2495">instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="6319.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="773" x="8290.55" y="6323.0542">instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void</text><ellipse cx="8281.55" cy="6332.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="480" x="8290.55" y="6335.8589">instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="6345.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="739" x="8290.55" y="6348.6636">instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void</text><ellipse cx="8281.55" cy="6358.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="8290.55" y="6361.4683">instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void</text><ellipse cx="8281.55" cy="6371.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="145" x="8290.55" y="6374.2729">canvas_create() = 0 : RID</text><ellipse cx="8281.55" cy="6383.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="8290.55" y="6387.0776">canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 &amp; p_mirroring) = 0 : void</text><ellipse cx="8281.55" cy="6396.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="8290.55" y="6399.8823">canvas_set_modulate(RID p_canvas, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="6409.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="8290.55" y="6412.687">canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void</text><ellipse cx="8281.55" cy="6422.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="293" x="8290.55" y="6425.4917">canvas_set_disable_scale(bool p_disable) = 0 : void</text><ellipse cx="8281.55" cy="6435.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="8290.55" y="6438.2964">canvas_item_create() = 0 : RID</text><ellipse cx="8281.55" cy="6447.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="8290.55" y="6451.1011">canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void</text><ellipse cx="8281.55" cy="6460.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="350" x="8290.55" y="6463.9058">canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void</text><ellipse cx="8281.55" cy="6473.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="8290.55" y="6476.7104">canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void</text><ellipse cx="8281.55" cy="6486.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="8290.55" y="6489.5151">canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void</text><ellipse cx="8281.55" cy="6499.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="8290.55" y="6502.3198">canvas_item_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="6511.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="8290.55" y="6515.1245">canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void</text><ellipse cx="8281.55" cy="6524.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="8290.55" y="6527.9292">canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="6537.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="8290.55" y="6540.7339">canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 &amp; p_rect = Rect2()) = 0 : void</text><ellipse cx="8281.55" cy="6550.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="8290.55" y="6553.5386">canvas_item_set_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="6563.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="438" x="8290.55" y="6566.3433">canvas_item_set_self_modulate(RID p_item, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="6575.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="8290.55" y="6579.1479">canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="6588.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="904" x="8290.55" y="6591.9526">canvas_item_add_line(RID p_item, const Point2 &amp; p_from, const Point2 &amp; p_to, const Color &amp; p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="8281.55" cy="6601.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="933" x="8290.55" y="6604.7573">canvas_item_add_polyline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="8281.55" cy="6614.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="937" x="8290.55" y="6617.562">canvas_item_add_multiline(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void</text><ellipse cx="8281.55" cy="6627.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="511" x="8290.55" y="6630.3667">canvas_item_add_rect(RID p_item, const Rect2 &amp; p_rect, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="6639.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="605" x="8290.55" y="6643.1714">canvas_item_add_circle(RID p_item, const Point2 &amp; p_pos, float p_radius, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="6652.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1191" x="8290.55" y="6655.9761">canvas_item_add_texture_rect(RID p_item, const Rect2 &amp; p_rect, RID p_texture, bool p_tile = false, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="6665.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1404" x="8290.55" y="6668.7808">canvas_item_add_texture_rect_region(RID p_item, const Rect2 &amp; p_rect, RID p_texture, const Rect2 &amp; p_src_rect, const Color &amp; p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void</text><ellipse cx="8281.55" cy="6678.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2427" x="8290.55" y="6681.5854">canvas_item_add_nine_patch(RID p_item, const Rect2 &amp; p_rect, const Rect2 &amp; p_source, RID p_texture, const Vector2 &amp; p_topleft, const Vector2 &amp; p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color &amp; p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="6691.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1224" x="8290.55" y="6694.3901">canvas_item_add_primitive(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="6703.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1430" x="8290.55" y="6707.1948">canvas_item_add_polygon(RID p_item, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void</text><ellipse cx="8281.55" cy="6716.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2540" x="8290.55" y="6719.9995">canvas_item_add_triangle_array(RID p_item, const Vector&lt;int&gt; &amp; p_indices, const Vector&lt;Point2&gt; &amp; p_points, const Vector&lt;Color&gt; &amp; p_colors, const Vector&lt;Point2&gt; &amp; p_uvs = Vector&lt;Point2&gt;(), const Vector&lt;int&gt; &amp; p_bones = Vector&lt;int&gt;(), const Vector&lt;float&gt; &amp; p_weights = Vector&lt;float&gt;(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void</text><ellipse cx="8281.55" cy="6729.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1248" x="8290.55" y="6732.8042">canvas_item_add_mesh(RID p_item, const RID &amp; p_mesh, const Transform2D &amp; p_transform = Transform2D(), const Color &amp; p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="6742.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="681" x="8290.55" y="6745.6089">canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void</text><ellipse cx="8281.55" cy="6755.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="573" x="8290.55" y="6758.4136">canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void</text><ellipse cx="8281.55" cy="6768.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="514" x="8290.55" y="6771.2183">canvas_item_add_set_transform(RID p_item, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="6780.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="8290.55" y="6784.0229">canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void</text><ellipse cx="8281.55" cy="6793.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="422" x="8290.55" y="6796.8276">canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="6806.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="8290.55" y="6809.6323">canvas_item_set_z_index(RID p_item, int p_z) = 0 : void</text><ellipse cx="8281.55" cy="6819.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="8290.55" y="6822.437">canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="6832.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="552" x="8290.55" y="6835.2417">canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 &amp; p_rect) = 0 : void</text><ellipse cx="8281.55" cy="6844.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="8290.55" y="6848.0464">canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void</text><ellipse cx="8281.55" cy="6857.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="8290.55" y="6860.8511">canvas_item_clear(RID p_item) = 0 : void</text><ellipse cx="8281.55" cy="6870.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="8290.55" y="6873.6558">canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void</text><ellipse cx="8281.55" cy="6883.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="8290.55" y="6886.4604">canvas_item_set_material(RID p_item, RID p_material) = 0 : void</text><ellipse cx="8281.55" cy="6896.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="8290.55" y="6899.2651">canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="6908.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="8290.55" y="6912.0698">canvas_light_create() = 0 : RID</text><ellipse cx="8281.55" cy="6921.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="386" x="8290.55" y="6924.8745">canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void</text><ellipse cx="8281.55" cy="6934.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="8290.55" y="6937.6792">canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="6947.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="8290.55" y="6950.4839">canvas_light_set_scale(RID p_light, float p_scale) = 0 : void</text><ellipse cx="8281.55" cy="6960.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="8290.55" y="6963.2886">canvas_light_set_transform(RID p_light, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="8281.55" cy="6972.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="8290.55" y="6976.0933">canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void</text><ellipse cx="8281.55" cy="6985.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="8290.55" y="6988.8979">canvas_light_set_texture_offset(RID p_light, const Vector2 &amp; p_offset) = 0 : void</text><ellipse cx="8281.55" cy="6998.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="385" x="8290.55" y="7001.7026">canvas_light_set_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="7011.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="8290.55" y="7014.5073">canvas_light_set_height(RID p_light, float p_height) = 0 : void</text><ellipse cx="8281.55" cy="7024.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="8290.55" y="7027.312">canvas_light_set_energy(RID p_light, float p_energy) = 0 : void</text><ellipse cx="8281.55" cy="7036.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="420" x="8290.55" y="7040.1167">canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void</text><ellipse cx="8281.55" cy="7049.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="489" x="8290.55" y="7052.9214">canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void</text><ellipse cx="8281.55" cy="7062.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="382" x="8290.55" y="7065.7261">canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="8281.55" cy="7075.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="8290.55" y="7078.5308">canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void</text><ellipse cx="8281.55" cy="7088.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="8290.55" y="7091.3354">canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="7100.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="8290.55" y="7104.1401">canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="7113.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="8290.55" y="7116.9448">canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void</text><ellipse cx="8281.55" cy="7126.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="8290.55" y="7129.7495">canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void</text><ellipse cx="8281.55" cy="7139.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="574" x="8290.55" y="7142.5542">canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void</text><ellipse cx="8281.55" cy="7152.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="8290.55" y="7155.3589">canvas_light_set_shadow_color(RID p_light, const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="7164.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="8290.55" y="7168.1636">canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void</text><ellipse cx="8281.55" cy="7177.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="229" x="8290.55" y="7180.9683">canvas_light_occluder_create() = 0 : RID</text><ellipse cx="8281.55" cy="7190.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="8290.55" y="7193.7729">canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void</text><ellipse cx="8281.55" cy="7203.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="444" x="8290.55" y="7206.5776">canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void</text><ellipse cx="8281.55" cy="7216.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="439" x="8290.55" y="7219.3823">canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void</text><ellipse cx="8281.55" cy="7228.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="541" x="8290.55" y="7232.187">canvas_light_occluder_set_transform(RID p_occluder, const Transform2D &amp; p_xform) = 0 : void</text><ellipse cx="8281.55" cy="7241.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="8290.55" y="7244.9917">canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void</text><ellipse cx="8281.55" cy="7254.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="8290.55" y="7257.7964">canvas_occluder_polygon_create() = 0 : RID</text><ellipse cx="8281.55" cy="7267.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="725" x="8290.55" y="7270.6011">canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape, bool p_closed) = 0 : void</text><ellipse cx="8281.55" cy="7280.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="691" x="8290.55" y="7283.4058">canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector&lt;Vector2&gt; &amp; p_shape) = 0 : void</text><ellipse cx="8281.55" cy="7293" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="759" x="8290.55" y="7296.2104">canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void</text><ellipse cx="8281.55" cy="7305.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="8290.55" y="7309.0151">black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void</text><ellipse cx="8281.55" cy="7318.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="8290.55" y="7321.8198">black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void</text><ellipse cx="8281.55" cy="7331.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="8290.55" y="7334.6245">free(RID p_rid) = 0 : void</text><ellipse cx="8281.55" cy="7344.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="685" x="8290.55" y="7347.4292">request_frame_drawn_callback(Object * p_where, const StringName &amp; p_method, const Variant &amp; p_userdata) = 0 : void</text><ellipse cx="8281.55" cy="7357.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="401" x="8290.55" y="7360.2339">draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void</text><ellipse cx="8281.55" cy="7369.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="8290.55" y="7373.0386">sync() = 0 : void</text><ellipse cx="8281.55" cy="7382.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="8290.55" y="7385.8433">has_changed() const = 0 : bool</text><ellipse cx="8281.55" cy="7395.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="8290.55" y="7398.6479">init() = 0 : void</text><ellipse cx="8281.55" cy="7408.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="8290.55" y="7411.4526">finish() = 0 : void</text><ellipse cx="8281.55" cy="7421.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="358" x="8290.55" y="7424.2573">get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t</text><ellipse cx="8281.55" cy="7433.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="8290.55" y="7437.062">get_video_adapter_name() const = 0 : String</text><ellipse cx="8281.55" cy="7446.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="262" x="8290.55" y="7449.8667">get_video_adapter_vendor() const = 0 : String</text><ellipse cx="8281.55" cy="7459.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="141" x="8290.55" y="7462.6714">get_test_cube() = 0 : RID</text><ellipse cx="8281.55" cy="7472.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8290.55" y="7475.4761">get_test_texture() : RID</text><ellipse cx="8281.55" cy="7485.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="8290.55" y="7488.2808">get_white_texture() : RID</text><ellipse cx="8281.55" cy="7497.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="8290.55" y="7501.0854">make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID</text><ellipse cx="8281.55" cy="7510.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="8290.55" y="7513.8901">mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData &amp; p_mesh_data) : void</text><ellipse cx="8281.55" cy="7523.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="8290.55" y="7526.6948">mesh_add_surface_from_planes(RID p_mesh, const PoolVector&lt;Plane&gt; &amp; p_planes) : void</text><ellipse cx="8281.55" cy="7536.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="677" x="8290.55" y="7539.4995">set_boot_image(const Ref&lt;Image&gt; &amp; p_image, const Color &amp; p_color, bool p_scale, bool p_use_filter = true) = 0 : void</text><ellipse cx="8281.55" cy="7549.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="8290.55" y="7552.3042">set_default_clear_color(const Color &amp; p_color) = 0 : void</text><ellipse cx="8281.55" cy="7561.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="267" x="8290.55" y="7565.1089">set_shader_time_scale(float p_scale) = 0 : void</text><ellipse cx="8281.55" cy="7574.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="8290.55" y="7577.9136">has_feature(VisualServer::Features p_feature) const = 0 : bool</text><ellipse cx="8281.55" cy="7587.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="8290.55" y="7590.7183">has_os_feature(const String &amp; p_feature) const = 0 : bool</text><ellipse cx="8281.55" cy="7600.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="8290.55" y="7603.5229">set_debug_generate_wireframes(bool p_generate) = 0 : void</text><ellipse cx="8281.55" cy="7613.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="254" x="8290.55" y="7616.3276">call_set_use_vsync(bool p_enable) = 0 : void</text><ellipse cx="8281.55" cy="7625.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="8290.55" y="7629.1323">is_low_end() const = 0 : bool</text><ellipse cx="8281.55" cy="7638.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="8290.55" y="7641.937">is_render_loop_enabled() const : bool</text><ellipse cx="8281.55" cy="7651.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="8290.55" y="7654.7417">set_render_loop_enabled(bool p_enabled) : void</text><ellipse cx="8281.55" cy="7664.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="8290.55" y="7667.5464">VisualServer() : void</text><ellipse cx="8281.55" cy="7677.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="8290.55" y="7680.3511">~VisualServer() : void</text></a><!--MD5=[8bd677d40488ae3737ee9bebc9a74ec6]
class C_0001559146041463814963--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" target="_top" title="PhysicsDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39" xlink:show="new" xlink:title="PhysicsDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="675.4297" id="C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.5;" width="472" x="10971.55" y="4604.4531"/><ellipse cx="11130.3" cy="4620.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M11130.4094,4615.7969 L11129.2531,4620.875 L11131.5813,4620.875 L11130.4094,4615.7969 Z M11128.925,4613.5625 L11131.9094,4613.5625 L11135.2688,4625.9531 L11132.8156,4625.9531 L11132.05,4622.8906 L11128.7688,4622.8906 L11128.0188,4625.9531 L11125.5813,4625.9531 L11128.925,4613.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="146" x="11150.8" y="4624.6074">PhysicsDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10972.55" x2="11442.55" y1="4636.4531" y2="4636.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="10972.55" x2="11442.55" y1="4644.4531" y2="4644.4531"/><ellipse cx="10982.55" cy="4655.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="10991.55" y="4658.6636">get_class() const : String</text><ellipse cx="10982.55" cy="4668.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="10991.55" y="4671.4683">_get_class_namev() const : const StringName *</text><ellipse cx="10982.55" cy="4681.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="10991.55" y="4684.2729">get_class_ptr_static() : void *</text><ellipse cx="10982.55" cy="4693.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="10991.55" y="4697.0776">get_class_static() : String</text><ellipse cx="10982.55" cy="4706.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="10991.55" y="4709.8823">get_parent_class_static() : String</text><ellipse cx="10982.55" cy="4719.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="10991.55" y="4722.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="10982.55" cy="4732.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="10991.55" y="4735.4917">get_category_static() : String</text><ellipse cx="10982.55" cy="4745.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="10991.55" y="4748.2964">inherits_static() : String</text><ellipse cx="10982.55" cy="4757.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="10991.55" y="4761.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="10982.55" cy="4770.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="10991.55" y="4773.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="10982.55" cy="4783.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="10991.55" y="4786.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="10982.55" cy="4796.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="10991.55" y="4799.5151">initialize_class() : void</text><ellipse cx="10982.55" cy="4809.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="10991.55" y="4812.3198">get_total_gravity() const = 0 : Vector3</text><ellipse cx="10982.55" cy="4821.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="10991.55" y="4825.1245">get_total_angular_damp() const = 0 : float</text><ellipse cx="10982.55" cy="4834.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="10991.55" y="4837.9292">get_total_linear_damp() const = 0 : float</text><ellipse cx="10982.55" cy="4847.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="235" x="10991.55" y="4850.7339">get_center_of_mass() const = 0 : Vector3</text><ellipse cx="10982.55" cy="4860.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="255" x="10991.55" y="4863.5386">get_principal_inertia_axes() const = 0 : Basis</text><ellipse cx="10982.55" cy="4873.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="10991.55" y="4876.3433">get_inverse_mass() const = 0 : float</text><ellipse cx="10982.55" cy="4885.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="10991.55" y="4889.1479">get_inverse_inertia() const = 0 : Vector3</text><ellipse cx="10982.55" cy="4898.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="258" x="10991.55" y="4901.9526">get_inverse_inertia_tensor() const = 0 : Basis</text><ellipse cx="10982.55" cy="4911.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="10991.55" y="4914.7573">set_linear_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="10982.55" cy="4924.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="10991.55" y="4927.562">get_linear_velocity() const = 0 : Vector3</text><ellipse cx="10982.55" cy="4937.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="336" x="10991.55" y="4940.3667">set_angular_velocity(const Vector3 &amp; p_velocity) = 0 : void</text><ellipse cx="10982.55" cy="4949.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="10991.55" y="4953.1714">get_angular_velocity() const = 0 : Vector3</text><ellipse cx="10982.55" cy="4962.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="10991.55" y="4965.9761">set_transform(const Transform &amp; p_transform) = 0 : void</text><ellipse cx="10982.55" cy="4975.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="10991.55" y="4978.7808">get_transform() const = 0 : Transform</text><ellipse cx="10982.55" cy="4988.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="10991.55" y="4991.5854">add_central_force(const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="10982.55" cy="5001.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="10991.55" y="5004.3901">add_force(const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="10982.55" cy="5013.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="10991.55" y="5017.1948">add_torque(const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="10982.55" cy="5026.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="10991.55" y="5029.9995">apply_central_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="10982.55" cy="5039.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="10991.55" y="5042.8042">apply_impulse(const Vector3 &amp; p_pos, const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="10982.55" cy="5052.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="10991.55" y="5055.6089">apply_torque_impulse(const Vector3 &amp; p_j) = 0 : void</text><ellipse cx="10982.55" cy="5065.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="10991.55" y="5068.4136">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="10982.55" cy="5078.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="10991.55" y="5081.2183">is_sleeping() const = 0 : bool</text><ellipse cx="10982.55" cy="5090.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="10991.55" y="5094.0229">get_contact_count() const = 0 : int</text><ellipse cx="10982.55" cy="5103.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="10991.55" y="5106.8276">get_contact_local_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="10982.55" cy="5116.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="10991.55" y="5119.6323">get_contact_local_normal(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="10982.55" cy="5129.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="10991.55" y="5132.437">get_contact_impulse(int p_contact_idx) const = 0 : float</text><ellipse cx="10982.55" cy="5142.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="10991.55" y="5145.2417">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="10982.55" cy="5154.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="10991.55" y="5158.0464">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="10982.55" cy="5167.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="10991.55" y="5170.8511">get_contact_collider_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="10982.55" cy="5180.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="10991.55" y="5183.6558">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="10982.55" cy="5193.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="10991.55" y="5196.4604">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="10982.55" cy="5206.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="10991.55" y="5209.2651">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="10982.55" cy="5218.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="10991.55" y="5222.0698">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3</text><ellipse cx="10982.55" cy="5231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="10991.55" y="5234.8745">get_step() const = 0 : real_t</text><ellipse cx="10982.55" cy="5244.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="10991.55" y="5247.6792">integrate_forces() : void</text><ellipse cx="10982.55" cy="5257.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="283" x="10991.55" y="5260.4839">get_space_state() = 0 : PhysicsDirectSpaceState *</text><ellipse cx="10982.55" cy="5270.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="10991.55" y="5273.2886">PhysicsDirectBodyState() : void</text></a><!--MD5=[123a6318eb7c3f47a6d4372e2b561658]
class C_0000503002593685351124--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" target="_top" title="PhysicsDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143" xlink:show="new" xlink:title="PhysicsDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="304.0938" id="C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.5;" width="2171" x="3462.05" y="1668.4531"/><ellipse cx="4466.3" cy="1684.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4466.4094,1679.7969 L4465.2531,1684.875 L4467.5813,1684.875 L4466.4094,1679.7969 Z M4464.925,1677.5625 L4467.9094,1677.5625 L4471.2688,1689.9531 L4468.8156,1689.9531 L4468.05,1686.8906 L4464.7688,1686.8906 L4464.0188,1689.9531 L4461.5813,1689.9531 L4464.925,1677.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="154" x="4486.8" y="1688.6074">PhysicsDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3463.05" x2="5632.05" y1="1700.4531" y2="1700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3463.05" x2="5632.05" y1="1708.4531" y2="1708.4531"/><ellipse cx="3473.05" cy="1719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3482.05" y="1722.6636">get_class() const : String</text><ellipse cx="3473.05" cy="1732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3482.05" y="1735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="3473.05" cy="1745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="3482.05" y="1748.2729">get_class_ptr_static() : void *</text><ellipse cx="3473.05" cy="1757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="3482.05" y="1761.0776">get_class_static() : String</text><ellipse cx="3473.05" cy="1770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="3482.05" y="1773.8823">get_parent_class_static() : String</text><ellipse cx="3473.05" cy="1783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="3482.05" y="1786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="3473.05" cy="1796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="3482.05" y="1799.4917">get_category_static() : String</text><ellipse cx="3473.05" cy="1809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="3482.05" y="1812.2964">inherits_static() : String</text><ellipse cx="3473.05" cy="1821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="3482.05" y="1825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="3473.05" cy="1834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3482.05" y="1837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="3473.05" cy="1847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="3482.05" y="1850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="3473.05" cy="1860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="3482.05" y="1863.5151">initialize_class() : void</text><ellipse cx="3473.05" cy="1873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1540" x="3482.05" y="1876.3198">intersect_point(const Vector3 &amp; p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="3473.05" cy="1885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1689" x="3482.05" y="1889.1245">intersect_ray(const Vector3 &amp; p_from, const Vector3 &amp; p_to, PhysicsDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool</text><ellipse cx="3473.05" cy="1898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1782" x="3482.05" y="1901.9292">intersect_shape(const RID &amp; p_shape, const Transform &amp; p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="3473.05" cy="1911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="2145" x="3482.05" y="1914.7339">cast_motion(const RID &amp; p_shape, const Transform &amp; p_xform, const Vector3 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool</text><ellipse cx="3473.05" cy="1924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1719" x="3482.05" y="1927.5386">collide_shape(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="3473.05" cy="1937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1637" x="3482.05" y="1940.3433">rest_info(RID p_shape, const Transform &amp; p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="3473.05" cy="1949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="525" x="3482.05" y="1953.1479">get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3</text><ellipse cx="3473.05" cy="1962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3482.05" y="1965.9526">PhysicsDirectSpaceState() : void</text></a><!--MD5=[c66ec037f9beb318ec4ceea904716941]
class C_0000493041171271776846--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" target="_top" title="PhysicsDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158" xlink:show="new" xlink:title="PhysicsDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="99.2188" id="C_0000493041171271776846" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="5329.05" y="67.4531"/><ellipse cx="5344.05" cy="83.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5347.0188,89.0938 Q5346.4406,89.3906 5345.8,89.5313 Q5345.1594,89.6875 5344.4563,89.6875 Q5341.9563,89.6875 5340.6281,88.0469 Q5339.3156,86.3906 5339.3156,83.2656 Q5339.3156,80.1406 5340.6281,78.4844 Q5341.9563,76.8281 5344.4563,76.8281 Q5345.1594,76.8281 5345.8,76.9844 Q5346.4563,77.1406 5347.0188,77.4375 L5347.0188,80.1563 Q5346.3938,79.5781 5345.8,79.3125 Q5345.2063,79.0313 5344.5813,79.0313 Q5343.2375,79.0313 5342.55,80.1094 Q5341.8625,81.1719 5341.8625,83.2656 Q5341.8625,85.3594 5342.55,86.4375 Q5343.2375,87.5 5344.5813,87.5 Q5345.2063,87.5 5345.8,87.2344 Q5346.3938,86.9531 5347.0188,86.375 L5347.0188,89.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="243" x="5358.05" y="87.6074">PhysicsDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5330.05" x2="5603.05" y1="99.4531" y2="99.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5335.05" y="105.4531"/><ellipse cx="5340.05" cy="110.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="5349.05" y="113.6636">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5335.05" y="118.2578"/><ellipse cx="5340.05" cy="123.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="5349.05" y="126.4683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5335.05" y="131.0625"/><ellipse cx="5340.05" cy="136.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="5349.05" y="139.2729">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5335.05" y="143.8672"/><ellipse cx="5340.05" cy="148.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="5349.05" y="152.0776">shape : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="5330.05" x2="5603.05" y1="158.6719" y2="158.6719"/><!--MD5=[22d525dd8ab5843672eb9a446d1ac0b7]
class C_0000461609734144368587--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" target="_top" title="PhysicsDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168" xlink:show="new" xlink:title="PhysicsDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="124.8281" id="C_0000461609734144368587" style="stroke: #A80036; stroke-width: 1.5;" width="257" x="6855.05" y="54.4531"/><ellipse cx="6870.05" cy="70.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6873.0188,76.0938 Q6872.4406,76.3906 6871.8,76.5313 Q6871.1594,76.6875 6870.4563,76.6875 Q6867.9563,76.6875 6866.6281,75.0469 Q6865.3156,73.3906 6865.3156,70.2656 Q6865.3156,67.1406 6866.6281,65.4844 Q6867.9563,63.8281 6870.4563,63.8281 Q6871.1594,63.8281 6871.8,63.9844 Q6872.4563,64.1406 6873.0188,64.4375 L6873.0188,67.1563 Q6872.3938,66.5781 6871.8,66.3125 Q6871.2063,66.0313 6870.5813,66.0313 Q6869.2375,66.0313 6868.55,67.1094 Q6867.8625,68.1719 6867.8625,70.2656 Q6867.8625,72.3594 6868.55,73.4375 Q6869.2375,74.5 6870.5813,74.5 Q6871.2063,74.5 6871.8,74.2344 Q6872.3938,73.9531 6873.0188,73.375 L6873.0188,76.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="225" x="6884.05" y="74.6074">PhysicsDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6856.05" x2="7111.05" y1="86.4531" y2="86.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="92.4531"/><ellipse cx="6866.05" cy="97.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="6875.05" y="100.6636">position : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="105.2578"/><ellipse cx="6866.05" cy="110.2578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="6875.05" y="113.4683">normal : Vector3</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="118.0625"/><ellipse cx="6866.05" cy="123.0625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="6875.05" y="126.2729">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="130.8672"/><ellipse cx="6866.05" cy="135.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="6875.05" y="139.0776">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="143.6719"/><ellipse cx="6866.05" cy="148.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="6875.05" y="151.8823">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="6861.05" y="156.4766"/><ellipse cx="6866.05" cy="161.4766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="6875.05" y="164.687">shape : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="6856.05" x2="7111.05" y1="171.2813" y2="171.2813"/><!--MD5=[a29f7384437247e0f26d2b1ff51d7842]
class C_0001034902024938599899--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" target="_top" title="PhysicsServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224" xlink:show="new" xlink:title="PhysicsServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="2557.7188" id="C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.5;" width="1275" x="11886.05" y="3662.9531"/><ellipse cx="12477.3" cy="3678.9531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M12477.4094,3674.2969 L12476.2531,3679.375 L12478.5813,3679.375 L12477.4094,3674.2969 Z M12475.925,3672.0625 L12478.9094,3672.0625 L12482.2688,3684.4531 L12479.8156,3684.4531 L12479.05,3681.3906 L12475.7688,3681.3906 L12475.0188,3684.4531 L12472.5813,3684.4531 L12475.925,3672.0625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="84" x="12497.8" y="3683.1074">PhysicsServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="11887.05" x2="13160.05" y1="3694.9531" y2="3694.9531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="11887.05" x2="13160.05" y1="3702.9531" y2="3702.9531"/><ellipse cx="11897.05" cy="3713.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="11906.05" y="3717.1636">get_class() const : String</text><ellipse cx="11897.05" cy="3726.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="11906.05" y="3729.9683">_get_class_namev() const : const StringName *</text><ellipse cx="11897.05" cy="3739.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="11906.05" y="3742.7729">get_class_ptr_static() : void *</text><ellipse cx="11897.05" cy="3752.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="11906.05" y="3755.5776">get_class_static() : String</text><ellipse cx="11897.05" cy="3765.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="11906.05" y="3768.3823">get_parent_class_static() : String</text><ellipse cx="11897.05" cy="3777.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="11906.05" y="3781.187">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="11897.05" cy="3790.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="11906.05" y="3793.9917">get_category_static() : String</text><ellipse cx="11897.05" cy="3803.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="11906.05" y="3806.7964">inherits_static() : String</text><ellipse cx="11897.05" cy="3816.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="11906.05" y="3819.6011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="11897.05" cy="3829.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="11906.05" y="3832.4058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="11897.05" cy="3842" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="11906.05" y="3845.2104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="11897.05" cy="3854.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="11906.05" y="3858.0151">initialize_class() : void</text><ellipse cx="11897.05" cy="3867.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="187" x="11906.05" y="3870.8198">get_singleton() : PhysicsServer *</text><ellipse cx="11897.05" cy="3880.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="11906.05" y="3883.6245">shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID</text><ellipse cx="11897.05" cy="3893.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="11906.05" y="3896.4292">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="11897.05" cy="3906.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="11906.05" y="3909.2339">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="11897.05" cy="3918.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="11906.05" y="3922.0386">shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType</text><ellipse cx="11897.05" cy="3931.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="11906.05" y="3934.8433">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="11897.05" cy="3944.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="11906.05" y="3947.6479">shape_set_margin(RID p_shape, real_t p_margin) = 0 : void</text><ellipse cx="11897.05" cy="3957.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="284" x="11906.05" y="3960.4526">shape_get_margin(RID p_shape) const = 0 : real_t</text><ellipse cx="11897.05" cy="3970.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="11906.05" y="3973.2573">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="11897.05" cy="3982.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="11906.05" y="3986.062">space_create() = 0 : RID</text><ellipse cx="11897.05" cy="3995.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="11906.05" y="3998.8667">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="11897.05" cy="4008.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="11906.05" y="4011.6714">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="11897.05" cy="4021.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="11906.05" y="4024.4761">space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="11897.05" cy="4034.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="523" x="11906.05" y="4037.2808">space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="11897.05" cy="4046.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="11906.05" y="4050.0854">space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *</text><ellipse cx="11897.05" cy="4059.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="11906.05" y="4062.8901">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="11897.05" cy="4072.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="11906.05" y="4075.6948">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector3&gt;</text><ellipse cx="11897.05" cy="4085.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="11906.05" y="4088.4995">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="11897.05" cy="4098.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="11906.05" y="4101.3042">area_create() = 0 : RID</text><ellipse cx="11897.05" cy="4110.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="11906.05" y="4114.1089">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="11897.05" cy="4123.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="11906.05" y="4126.9136">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="11897.05" cy="4136.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="11906.05" y="4139.7183">area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="11897.05" cy="4149.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="11906.05" y="4152.5229">area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode</text><ellipse cx="11897.05" cy="4162.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="712" x="11906.05" y="4165.3276">area_add_shape(RID p_area, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="11897.05" cy="4174.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="11906.05" y="4178.1323">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="11897.05" cy="4187.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="564" x="11906.05" y="4190.937">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="11897.05" cy="4200.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="11906.05" y="4203.7417">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="11897.05" cy="4213.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="11906.05" y="4216.5464">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="11897.05" cy="4226.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="447" x="11906.05" y="4229.3511">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform</text><ellipse cx="11897.05" cy="4238.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="11906.05" y="4242.1558">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="11897.05" cy="4251.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="11906.05" y="4254.9604">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="11897.05" cy="4264.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="464" x="11906.05" y="4267.7651">area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="11897.05" cy="4277.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="11906.05" y="4280.5698">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="11897.05" cy="4290.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="11906.05" y="4293.3745">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="11897.05" cy="4302.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="603" x="11906.05" y="4306.1792">area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="11897.05" cy="4315.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="428" x="11906.05" y="4318.9839">area_set_transform(RID p_area, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="11897.05" cy="4328.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="518" x="11906.05" y="4331.7886">area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="11897.05" cy="4341.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="311" x="11906.05" y="4344.5933">area_get_transform(RID p_area) const = 0 : Transform</text><ellipse cx="11897.05" cy="4354.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="11906.05" y="4357.3979">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="11897.05" cy="4366.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="11906.05" y="4370.2026">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="11897.05" cy="4379.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="11906.05" y="4383.0073">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="11897.05" cy="4392.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="11906.05" y="4395.812">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="11897.05" cy="4405.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="11906.05" y="4408.6167">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="11897.05" cy="4418.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="11906.05" y="4421.4214">area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void</text><ellipse cx="11897.05" cy="4431.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="282" x="11906.05" y="4434.2261">area_is_ray_pickable(RID p_area) const = 0 : bool</text><ellipse cx="11897.05" cy="4443.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="617" x="11906.05" y="4447.0308">body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="11897.05" cy="4456.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="11906.05" y="4459.8354">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="11897.05" cy="4469.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="11906.05" y="4472.6401">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="11897.05" cy="4482.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="425" x="11906.05" y="4485.4448">body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void</text><ellipse cx="11897.05" cy="4495.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="11906.05" y="4498.2495">body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode</text><ellipse cx="11897.05" cy="4507.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="716" x="11906.05" y="4511.0542">body_add_shape(RID p_body, RID p_shape, const Transform &amp; p_transform = Transform(), bool p_disabled = false) = 0 : void</text><ellipse cx="11897.05" cy="4520.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="11906.05" y="4523.8589">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="11897.05" cy="4533.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="568" x="11906.05" y="4536.6636">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="11897.05" cy="4546.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="11906.05" y="4549.4683">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="11897.05" cy="4559.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="11906.05" y="4562.2729">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="11897.05" cy="4571.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="11906.05" y="4575.0776">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform</text><ellipse cx="11897.05" cy="4584.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="11906.05" y="4587.8823">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="11897.05" cy="4597.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="11906.05" y="4600.687">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="11897.05" cy="4610.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="11906.05" y="4613.4917">body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void</text><ellipse cx="11897.05" cy="4623.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="11906.05" y="4626.2964">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="11897.05" cy="4635.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="11906.05" y="4639.1011">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="4648.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="490" x="11906.05" y="4651.9058">body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="11897.05" cy="4661.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="436" x="11906.05" y="4664.7104">body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool</text><ellipse cx="11897.05" cy="4674.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="11906.05" y="4677.5151">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="11897.05" cy="4687.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="11906.05" y="4690.3198">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="4699.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="11906.05" y="4703.1245">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="11897.05" cy="4712.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="11906.05" y="4715.9292">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="4725.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="11906.05" y="4728.7339">body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void</text><ellipse cx="11897.05" cy="4738.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="11906.05" y="4741.5386">body_get_user_flags(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="4751.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="11906.05" y="4754.3433">body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="4763.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="11906.05" y="4767.1479">body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="11897.05" cy="4776.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="416" x="11906.05" y="4779.9526">body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void</text><ellipse cx="11897.05" cy="4789.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="362" x="11906.05" y="4792.7573">body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t</text><ellipse cx="11897.05" cy="4802.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="569" x="11906.05" y="4805.562">body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="11897.05" cy="4815.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="468" x="11906.05" y="4818.3667">body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="11897.05" cy="4827.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="11906.05" y="4831.1714">body_set_applied_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="11897.05" cy="4840.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="11906.05" y="4843.9761">body_get_applied_force(RID p_body) const = 0 : Vector3</text><ellipse cx="11897.05" cy="4853.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="11906.05" y="4856.7808">body_set_applied_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="11897.05" cy="4866.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="328" x="11906.05" y="4869.5854">body_get_applied_torque(RID p_body) const = 0 : Vector3</text><ellipse cx="11897.05" cy="4879.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="11906.05" y="4882.3901">body_add_central_force(RID p_body, const Vector3 &amp; p_force) = 0 : void</text><ellipse cx="11897.05" cy="4891.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="503" x="11906.05" y="4895.1948">body_add_force(RID p_body, const Vector3 &amp; p_force, const Vector3 &amp; p_pos) = 0 : void</text><ellipse cx="11897.05" cy="4904.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="383" x="11906.05" y="4907.9995">body_add_torque(RID p_body, const Vector3 &amp; p_torque) = 0 : void</text><ellipse cx="11897.05" cy="4917.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="11906.05" y="4920.8042">body_apply_central_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="11897.05" cy="4930.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="543" x="11906.05" y="4933.6089">body_apply_impulse(RID p_body, const Vector3 &amp; p_pos, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="11897.05" cy="4943.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="450" x="11906.05" y="4946.4136">body_apply_torque_impulse(RID p_body, const Vector3 &amp; p_impulse) = 0 : void</text><ellipse cx="11897.05" cy="4956.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="11906.05" y="4959.2183">body_set_axis_velocity(RID p_body, const Vector3 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="11897.05" cy="4968.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="500" x="11906.05" y="4972.0229">body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void</text><ellipse cx="11897.05" cy="4981.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="469" x="11906.05" y="4984.8276">body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool</text><ellipse cx="11897.05" cy="4994.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="11906.05" y="4997.6323">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="11897.05" cy="5007.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="11906.05" y="5010.437">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="11897.05" cy="5020.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="11906.05" y="5023.2417">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="11897.05" cy="5032.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="11906.05" y="5036.0464">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="11897.05" cy="5045.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="11906.05" y="5048.8511">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="11897.05" cy="5058.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="11906.05" y="5061.6558">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="11897.05" cy="5071.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="11906.05" y="5074.4604">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="11897.05" cy="5084.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="11906.05" y="5087.2651">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="11897.05" cy="5096.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="11906.05" y="5100.0698">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="11897.05" cy="5109.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="11906.05" y="5112.8745">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="11897.05" cy="5122.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="11906.05" y="5125.6792">body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="11897.05" cy="5135.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="11906.05" y="5138.4839">body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="11897.05" cy="5148.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="375" x="11906.05" y="5151.2886">body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *</text><ellipse cx="11897.05" cy="5160.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1175" x="11906.05" y="5164.0933">body_test_motion(RID p_body, const Transform &amp; p_from, const Vector3 &amp; p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="11897.05" cy="5173.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1249" x="11906.05" y="5176.8979">body_test_ray_separation(RID p_body, const Transform &amp; p_transform, bool p_infinite_inertia, Vector3 &amp; r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="11897.05" cy="5186.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="11906.05" y="5189.7026">soft_body_create(bool p_init_sleeping = false) = 0 : RID</text><ellipse cx="11897.05" cy="5199.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="673" x="11906.05" y="5202.5073">soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void</text><ellipse cx="11897.05" cy="5212.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="11906.05" y="5215.312">soft_body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="11897.05" cy="5224.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="279" x="11906.05" y="5228.1167">soft_body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="11897.05" cy="5237.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="371" x="11906.05" y="5240.9214">soft_body_set_mesh(RID p_body, const REF &amp; p_mesh) = 0 : void</text><ellipse cx="11897.05" cy="5250.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="11906.05" y="5253.7261">soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="11897.05" cy="5263.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="11906.05" y="5266.5308">soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="5276.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="11906.05" y="5279.3354">soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="11897.05" cy="5288.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="353" x="11906.05" y="5292.1401">soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="11897.05" cy="5301.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="411" x="11906.05" y="5304.9448">soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="11897.05" cy="5314.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="434" x="11906.05" y="5317.7495">soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="11897.05" cy="5327.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="481" x="11906.05" y="5330.5542">soft_body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="11897.05" cy="5340.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="596" x="11906.05" y="5343.3589">soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="11897.05" cy="5352.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="495" x="11906.05" y="5356.1636">soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="11897.05" cy="5365.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="11906.05" y="5368.9683">soft_body_set_transform(RID p_body, const Transform &amp; p_transform) = 0 : void</text><ellipse cx="11897.05" cy="5378.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="458" x="11906.05" y="5381.7729">soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3</text><ellipse cx="11897.05" cy="5391.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="11906.05" y="5394.5776">soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void</text><ellipse cx="11897.05" cy="5404.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="313" x="11906.05" y="5407.3823">soft_body_is_ray_pickable(RID p_body) const = 0 : bool</text><ellipse cx="11897.05" cy="5416.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="485" x="11906.05" y="5420.187">soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void</text><ellipse cx="11897.05" cy="5429.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="322" x="11906.05" y="5432.9917">soft_body_get_simulation_precision(RID p_body) = 0 : int</text><ellipse cx="11897.05" cy="5442.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="395" x="11906.05" y="5445.7964">soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void</text><ellipse cx="11897.05" cy="5455.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="286" x="11906.05" y="5458.6011">soft_body_get_total_mass(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5468.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="11906.05" y="5471.4058">soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="11897.05" cy="5481" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="310" x="11906.05" y="5484.2104">soft_body_get_linear_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5493.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="11906.05" y="5497.0151">soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="11897.05" cy="5506.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="11906.05" y="5509.8198">soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5519.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="415" x="11906.05" y="5522.6245">soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void</text><ellipse cx="11897.05" cy="5532.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="11906.05" y="5535.4292">soft_body_get_volume_stiffness(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5545.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="501" x="11906.05" y="5548.2339">soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void</text><ellipse cx="11897.05" cy="5557.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="11906.05" y="5561.0386">soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5570.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="571" x="11906.05" y="5573.8433">soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void</text><ellipse cx="11897.05" cy="5583.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="374" x="11906.05" y="5586.6479">soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5596.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="499" x="11906.05" y="5599.4526">soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void</text><ellipse cx="11897.05" cy="5609.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="338" x="11906.05" y="5612.2573">soft_body_get_damping_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5621.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="453" x="11906.05" y="5625.062">soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void</text><ellipse cx="11897.05" cy="5634.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="11906.05" y="5637.8667">soft_body_get_drag_coefficient(RID p_body) = 0 : real_t</text><ellipse cx="11897.05" cy="5647.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="563" x="11906.05" y="5650.6714">soft_body_move_point(RID p_body, int p_point_index, const Vector3 &amp; p_global_position) = 0 : void</text><ellipse cx="11897.05" cy="5660.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="459" x="11906.05" y="5663.4761">soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3</text><ellipse cx="11897.05" cy="5673.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="11906.05" y="5676.2808">soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3</text><ellipse cx="11897.05" cy="5685.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="340" x="11906.05" y="5689.0854">soft_body_remove_all_pinned_points(RID p_body) = 0 : void</text><ellipse cx="11897.05" cy="5698.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="414" x="11906.05" y="5701.8901">soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void</text><ellipse cx="11897.05" cy="5711.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="11906.05" y="5714.6948">soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool</text><ellipse cx="11897.05" cy="5724.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="357" x="11906.05" y="5727.4995">joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType</text><ellipse cx="11897.05" cy="5737.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="343" x="11906.05" y="5740.3042">joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void</text><ellipse cx="11897.05" cy="5749.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="288" x="11906.05" y="5753.1089">joint_get_solver_priority(RID p_joint) const = 0 : int</text><ellipse cx="11897.05" cy="5762.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="11906.05" y="5765.9136">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="11897.05" cy="5775.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="11906.05" y="5778.7183">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="11897.05" cy="5788.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="628" x="11906.05" y="5791.5229">joint_create_pin(RID p_body_A, const Vector3 &amp; p_local_A, RID p_body_B, const Vector3 &amp; p_local_B) = 0 : RID</text><ellipse cx="11897.05" cy="5801.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="550" x="11906.05" y="5804.3276">pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="5813.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="505" x="11906.05" y="5817.1323">pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float</text><ellipse cx="11897.05" cy="5826.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="11906.05" y="5829.937">pin_joint_set_local_a(RID p_joint, const Vector3 &amp; p_A) = 0 : void</text><ellipse cx="11897.05" cy="5839.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="11906.05" y="5842.7417">pin_joint_get_local_a(RID p_joint) const = 0 : Vector3</text><ellipse cx="11897.05" cy="5852.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="367" x="11906.05" y="5855.5464">pin_joint_set_local_b(RID p_joint, const Vector3 &amp; p_B) = 0 : void</text><ellipse cx="11897.05" cy="5865.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="11906.05" y="5868.3511">pin_joint_get_local_b(RID p_joint) const = 0 : Vector3</text><ellipse cx="11897.05" cy="5877.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="682" x="11906.05" y="5881.1558">joint_create_hinge(RID p_body_A, const Transform &amp; p_hinge_A, RID p_body_B, const Transform &amp; p_hinge_B) = 0 : RID</text><ellipse cx="11897.05" cy="5890.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="995" x="11906.05" y="5893.9604">joint_create_hinge_simple(RID p_body_A, const Vector3 &amp; p_pivot_A, const Vector3 &amp; p_axis_A, RID p_body_B, const Vector3 &amp; p_pivot_B, const Vector3 &amp; p_axis_B) = 0 : RID</text><ellipse cx="11897.05" cy="5903.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="11906.05" y="5906.7651">hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="5916.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="11906.05" y="5919.5698">hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float</text><ellipse cx="11897.05" cy="5929.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="11906.05" y="5932.3745">hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void</text><ellipse cx="11897.05" cy="5941.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="11906.05" y="5945.1792">hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool</text><ellipse cx="11897.05" cy="5954.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="752" x="11906.05" y="5957.9839">joint_create_slider(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="11897.05" cy="5967.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="11906.05" y="5970.7886">slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="5980.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="534" x="11906.05" y="5983.5933">slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float</text><ellipse cx="11897.05" cy="5993.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="780" x="11906.05" y="5996.3979">joint_create_cone_twist(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="11897.05" cy="6005.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="11906.05" y="6009.2026">cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="6018.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="588" x="11906.05" y="6022.0073">cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float</text><ellipse cx="11897.05" cy="6031.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="794" x="11906.05" y="6034.812">joint_create_generic_6dof(RID p_body_A, const Transform &amp; p_local_frame_A, RID p_body_B, const Transform &amp; p_local_frame_B) = 0 : RID</text><ellipse cx="11897.05" cy="6044.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="740" x="11906.05" y="6047.6167">generic_6dof_joint_set_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void</text><ellipse cx="11897.05" cy="6057.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="661" x="11906.05" y="6060.4214">generic_6dof_joint_get_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float</text><ellipse cx="11897.05" cy="6070.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="700" x="11906.05" y="6073.2261">generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void</text><ellipse cx="11897.05" cy="6082.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="614" x="11906.05" y="6086.0308">generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool</text><ellipse cx="11897.05" cy="6095.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="11906.05" y="6098.8354">free(RID p_rid) = 0 : void</text><ellipse cx="11897.05" cy="6108.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="11906.05" y="6111.6401">set_active(bool p_active) = 0 : void</text><ellipse cx="11897.05" cy="6121.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="11906.05" y="6124.4448">init() = 0 : void</text><ellipse cx="11897.05" cy="6134.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="11906.05" y="6137.2495">step(float p_step) = 0 : void</text><ellipse cx="11897.05" cy="6146.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="11906.05" y="6150.0542">flush_queries() = 0 : void</text><ellipse cx="11897.05" cy="6159.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="11906.05" y="6162.8589">finish() = 0 : void</text><ellipse cx="11897.05" cy="6172.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="11906.05" y="6175.6636">is_flushing_queries() const = 0 : bool</text><ellipse cx="11897.05" cy="6185.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="344" x="11906.05" y="6188.4683">get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="11897.05" cy="6198.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="11906.05" y="6201.2729">PhysicsServer() : void</text><ellipse cx="11897.05" cy="6210.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="11906.05" y="6214.0776">~PhysicsServer() : void</text></a><!--MD5=[15ab565944242ceeac87f602c1eae9a8]
class C_0002302096389852429221--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" target="_top" title="Physics2DDirectBodyState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40" xlink:show="new" xlink:title="Physics2DDirectBodyState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="637.0156" id="C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.5;" width="475" x="21267.05" y="4623.4531"/><ellipse cx="21418.8" cy="4639.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M21418.9094,4634.7969 L21417.7531,4639.875 L21420.0813,4639.875 L21418.9094,4634.7969 Z M21417.425,4632.5625 L21420.4094,4632.5625 L21423.7688,4644.9531 L21421.3156,4644.9531 L21420.55,4641.8906 L21417.2688,4641.8906 L21416.5188,4644.9531 L21414.0813,4644.9531 L21417.425,4632.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="21439.3" y="4643.6074">Physics2DDirectBodyState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21268.05" x2="21741.05" y1="4655.4531" y2="4655.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="21268.05" x2="21741.05" y1="4663.4531" y2="4663.4531"/><ellipse cx="21278.05" cy="4674.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="21287.05" y="4677.6636">get_class() const : String</text><ellipse cx="21278.05" cy="4687.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="21287.05" y="4690.4683">_get_class_namev() const : const StringName *</text><ellipse cx="21278.05" cy="4700.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="21287.05" y="4703.2729">get_class_ptr_static() : void *</text><ellipse cx="21278.05" cy="4712.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="21287.05" y="4716.0776">get_class_static() : String</text><ellipse cx="21278.05" cy="4725.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="21287.05" y="4728.8823">get_parent_class_static() : String</text><ellipse cx="21278.05" cy="4738.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="21287.05" y="4741.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="21278.05" cy="4751.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="21287.05" y="4754.4917">get_category_static() : String</text><ellipse cx="21278.05" cy="4764.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="21287.05" y="4767.2964">inherits_static() : String</text><ellipse cx="21278.05" cy="4776.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="21287.05" y="4780.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="21278.05" cy="4789.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="21287.05" y="4792.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="21278.05" cy="4802.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="21287.05" y="4805.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="21278.05" cy="4815.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="21287.05" y="4818.5151">initialize_class() : void</text><ellipse cx="21278.05" cy="4828.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="21287.05" y="4831.3198">get_total_gravity() const = 0 : Vector2</text><ellipse cx="21278.05" cy="4840.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="21287.05" y="4844.1245">get_total_linear_damp() const = 0 : float</text><ellipse cx="21278.05" cy="4853.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="21287.05" y="4856.9292">get_total_angular_damp() const = 0 : float</text><ellipse cx="21278.05" cy="4866.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="21287.05" y="4869.7339">get_inverse_mass() const = 0 : float</text><ellipse cx="21278.05" cy="4879.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="21287.05" y="4882.5386">get_inverse_inertia() const = 0 : real_t</text><ellipse cx="21278.05" cy="4892.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="21287.05" y="4895.3433">set_linear_velocity(const Vector2 &amp; p_velocity) = 0 : void</text><ellipse cx="21278.05" cy="4904.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="21287.05" y="4908.1479">get_linear_velocity() const = 0 : Vector2</text><ellipse cx="21278.05" cy="4917.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="277" x="21287.05" y="4920.9526">set_angular_velocity(real_t p_velocity) = 0 : void</text><ellipse cx="21278.05" cy="4930.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="227" x="21287.05" y="4933.7573">get_angular_velocity() const = 0 : real_t</text><ellipse cx="21278.05" cy="4943.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="341" x="21287.05" y="4946.562">set_transform(const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="21278.05" cy="4956.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="21287.05" y="4959.3667">get_transform() const = 0 : Transform2D</text><ellipse cx="21278.05" cy="4968.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="21287.05" y="4972.1714">add_central_force(const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="21278.05" cy="4981.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="409" x="21287.05" y="4984.9761">add_force(const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="21278.05" cy="4994.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="218" x="21287.05" y="4997.7808">add_torque(real_t p_torque) = 0 : void</text><ellipse cx="21278.05" cy="5007.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="21287.05" y="5010.5854">apply_central_impulse(const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="21278.05" cy="5020.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="21287.05" y="5023.3901">apply_torque_impulse(real_t p_torque) = 0 : void</text><ellipse cx="21278.05" cy="5032.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="449" x="21287.05" y="5036.1948">apply_impulse(const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="21278.05" cy="5045.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="234" x="21287.05" y="5048.9995">set_sleep_state(bool p_enable) = 0 : void</text><ellipse cx="21278.05" cy="5058.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="21287.05" y="5061.8042">is_sleeping() const = 0 : bool</text><ellipse cx="21278.05" cy="5071.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="21287.05" y="5074.6089">get_contact_count() const = 0 : int</text><ellipse cx="21278.05" cy="5084.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="21287.05" y="5087.4136">get_contact_local_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="21278.05" cy="5097.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="21287.05" y="5100.2183">get_contact_local_normal(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="21278.05" cy="5109.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="324" x="21287.05" y="5113.0229">get_contact_local_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="21278.05" cy="5122.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="304" x="21287.05" y="5125.8276">get_contact_collider(int p_contact_idx) const = 0 : RID</text><ellipse cx="21278.05" cy="5135.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="379" x="21287.05" y="5138.6323">get_contact_collider_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="21278.05" cy="5148.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="21287.05" y="5151.437">get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID</text><ellipse cx="21278.05" cy="5161.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="21287.05" y="5164.2417">get_contact_collider_object(int p_contact_idx) const : Object *</text><ellipse cx="21278.05" cy="5173.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="339" x="21287.05" y="5177.0464">get_contact_collider_shape(int p_contact_idx) const = 0 : int</text><ellipse cx="21278.05" cy="5186.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="426" x="21287.05" y="5189.8511">get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant</text><ellipse cx="21278.05" cy="5199.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="446" x="21287.05" y="5202.6558">get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2</text><ellipse cx="21278.05" cy="5212.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="21287.05" y="5215.4604">get_step() const = 0 : real_t</text><ellipse cx="21278.05" cy="5225.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="21287.05" y="5228.2651">integrate_forces() : void</text><ellipse cx="21278.05" cy="5237.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="298" x="21287.05" y="5241.0698">get_space_state() = 0 : Physics2DDirectSpaceState *</text><ellipse cx="21278.05" cy="5250.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="21287.05" y="5253.8745">Physics2DDirectBodyState() : void</text></a><!--MD5=[ca40d70d705a3e45bf51321044ec5376]
class C_0000236996062289735257--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" target="_top" title="Physics2DDirectSpaceState" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145" xlink:show="new" xlink:title="Physics2DDirectSpaceState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="304.0938" id="C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.5;" width="1992" x="5668.55" y="1668.4531"/><ellipse cx="6574.8" cy="1684.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6574.9094,1679.7969 L6573.7531,1684.875 L6576.0813,1684.875 L6574.9094,1679.7969 Z M6573.425,1677.5625 L6576.4094,1677.5625 L6579.7688,1689.9531 L6577.3156,1689.9531 L6576.55,1686.8906 L6573.2688,1686.8906 L6572.5188,1689.9531 L6570.0813,1689.9531 L6573.425,1677.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="171" x="6595.3" y="1688.6074">Physics2DDirectSpaceState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5669.55" x2="7659.55" y1="1700.4531" y2="1700.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5669.55" x2="7659.55" y1="1708.4531" y2="1708.4531"/><ellipse cx="5679.55" cy="1719.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="5688.55" y="1722.6636">get_class() const : String</text><ellipse cx="5679.55" cy="1732.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="5688.55" y="1735.4683">_get_class_namev() const : const StringName *</text><ellipse cx="5679.55" cy="1745.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="5688.55" y="1748.2729">get_class_ptr_static() : void *</text><ellipse cx="5679.55" cy="1757.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="5688.55" y="1761.0776">get_class_static() : String</text><ellipse cx="5679.55" cy="1770.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="5688.55" y="1773.8823">get_parent_class_static() : String</text><ellipse cx="5679.55" cy="1783.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="5688.55" y="1786.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="5679.55" cy="1796.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="5688.55" y="1799.4917">get_category_static() : String</text><ellipse cx="5679.55" cy="1809.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="5688.55" y="1812.2964">inherits_static() : String</text><ellipse cx="5679.55" cy="1821.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="5688.55" y="1825.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="5679.55" cy="1834.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="5688.55" y="1837.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="5679.55" cy="1847.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="5688.55" y="1850.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="5679.55" cy="1860.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="5688.55" y="1863.5151">initialize_class() : void</text><ellipse cx="5679.55" cy="1873.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1563" x="5688.55" y="1876.3198">intersect_ray(const Vector2 &amp; p_from, const Vector2 &amp; p_to, Physics2DDirectSpaceState::RayResult &amp; r_result, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="5679.55" cy="1885.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1703" x="5688.55" y="1889.1245">intersect_point(const Vector2 &amp; p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="5679.55" cy="1898.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1950" x="5688.55" y="1901.9292">intersect_point_on_canvas(const Vector2 &amp; p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int</text><ellipse cx="5679.55" cy="1911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1966" x="5688.55" y="1914.7339">intersect_shape(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int</text><ellipse cx="5679.55" cy="1924.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1829" x="5688.55" y="1927.5386">cast_motion(const RID &amp; p_shape, const Transform2D &amp; p_xform, const Vector2 &amp; p_motion, float p_margin, float &amp; p_closest_safe, float &amp; p_closest_unsafe, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="5679.55" cy="1937.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1888" x="5688.55" y="1940.3433">collide_shape(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Vector2 * r_results, int p_result_max, int &amp; r_result_count, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="5679.55" cy="1949.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1821" x="5688.55" y="1953.1479">rest_info(RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set&lt;RID&gt; &amp; p_exclude = Set&lt;RID&gt;(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool</text><ellipse cx="5679.55" cy="1962.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="5688.55" y="1965.9526">Physics2DDirectSpaceState() : void</text></a><!--MD5=[9eb4616909927b8afaeaff475656c5e3]
class C_0001801355352189289676--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" target="_top" title="Physics2DDirectSpaceState##RayResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162" xlink:show="new" xlink:title="Physics2DDirectSpaceState##RayResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="137.6328" id="C_0001801355352189289676" style="stroke: #A80036; stroke-width: 1.5;" width="274" x="10493.55" y="47.9531"/><ellipse cx="10508.55" cy="63.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M10511.5188,69.5938 Q10510.9406,69.8906 10510.3,70.0313 Q10509.6594,70.1875 10508.9563,70.1875 Q10506.4563,70.1875 10505.1281,68.5469 Q10503.8156,66.8906 10503.8156,63.7656 Q10503.8156,60.6406 10505.1281,58.9844 Q10506.4563,57.3281 10508.9563,57.3281 Q10509.6594,57.3281 10510.3,57.4844 Q10510.9563,57.6406 10511.5188,57.9375 L10511.5188,60.6563 Q10510.8938,60.0781 10510.3,59.8125 Q10509.7063,59.5313 10509.0813,59.5313 Q10507.7375,59.5313 10507.05,60.6094 Q10506.3625,61.6719 10506.3625,63.7656 Q10506.3625,65.8594 10507.05,66.9375 Q10507.7375,68 10509.0813,68 Q10509.7063,68 10510.3,67.7344 Q10510.8938,67.4531 10511.5188,66.875 L10511.5188,69.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="242" x="10522.55" y="68.1074">Physics2DDirectSpaceState::RayResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="10494.55" x2="10766.55" y1="79.9531" y2="79.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="85.9531"/><ellipse cx="10504.55" cy="90.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" target="_top" title="position" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164" xlink:show="new" xlink:title="position" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="10513.55" y="94.1636">position : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="98.7578"/><ellipse cx="10504.55" cy="103.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" target="_top" title="normal" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165" xlink:show="new" xlink:title="normal" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="10513.55" y="106.9683">normal : Vector2</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="111.5625"/><ellipse cx="10504.55" cy="116.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="10513.55" y="119.7729">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="124.3672"/><ellipse cx="10504.55" cy="129.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="10513.55" y="132.5776">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="137.1719"/><ellipse cx="10504.55" cy="142.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="10513.55" y="145.3823">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="149.9766"/><ellipse cx="10504.55" cy="154.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="10513.55" y="158.187">shape : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="10499.55" y="162.7813"/><ellipse cx="10504.55" cy="167.7813" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="10513.55" y="170.9917">metadata : Variant</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="10494.55" x2="10766.55" y1="177.5859" y2="177.5859"/><!--MD5=[833071aa6dd5b089efecfc256c21fee2]
class C_0001771770302499309898--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" target="_top" title="Physics2DDirectSpaceState##ShapeResult" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175" xlink:show="new" xlink:title="Physics2DDirectSpaceState##ShapeResult" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="112.0234" id="C_0001771770302499309898" style="stroke: #A80036; stroke-width: 1.5;" width="292" x="8352.55" y="60.9531"/><ellipse cx="8367.55" cy="76.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8370.5188,82.5938 Q8369.9406,82.8906 8369.3,83.0313 Q8368.6594,83.1875 8367.9563,83.1875 Q8365.4563,83.1875 8364.1281,81.5469 Q8362.8156,79.8906 8362.8156,76.7656 Q8362.8156,73.6406 8364.1281,71.9844 Q8365.4563,70.3281 8367.9563,70.3281 Q8368.6594,70.3281 8369.3,70.4844 Q8369.9563,70.6406 8370.5188,70.9375 L8370.5188,73.6563 Q8369.8938,73.0781 8369.3,72.8125 Q8368.7063,72.5313 8368.0813,72.5313 Q8366.7375,72.5313 8366.05,73.6094 Q8365.3625,74.6719 8365.3625,76.7656 Q8365.3625,78.8594 8366.05,79.9375 Q8366.7375,81 8368.0813,81 Q8368.7063,81 8369.3,80.7344 Q8369.8938,80.4531 8370.5188,79.875 L8370.5188,82.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="260" x="8381.55" y="81.1074">Physics2DDirectSpaceState::ShapeResult</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8353.55" x2="8643.55" y1="92.9531" y2="92.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8358.55" y="98.9531"/><ellipse cx="8363.55" cy="103.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" target="_top" title="rid" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177" xlink:show="new" xlink:title="rid" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="8372.55" y="107.1636">rid : RID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8358.55" y="111.7578"/><ellipse cx="8363.55" cy="116.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" target="_top" title="collider_id" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178" xlink:show="new" xlink:title="collider_id" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="8372.55" y="119.9683">collider_id : ObjectID</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8358.55" y="124.5625"/><ellipse cx="8363.55" cy="129.5625" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" target="_top" title="collider" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179" xlink:show="new" xlink:title="collider" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="8372.55" y="132.7729">collider : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8358.55" y="137.3672"/><ellipse cx="8363.55" cy="142.3672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" target="_top" title="shape" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180" xlink:show="new" xlink:title="shape" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="8372.55" y="145.5776">shape : int</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="8358.55" y="150.1719"/><ellipse cx="8363.55" cy="155.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" target="_top" title="metadata" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181" xlink:show="new" xlink:title="metadata" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="8372.55" y="158.3823">metadata : Variant</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="8353.55" x2="8643.55" y1="164.9766" y2="164.9766"/><!--MD5=[75170794dfa38b97f308a928ae46e341]
class C_0001561529841391244418--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" target="_top" title="Physics2DServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232" xlink:show="new" xlink:title="Physics2DServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="1904.6797" id="C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.5;" width="1408" x="21913.55" y="3989.4531"/><ellipse cx="22562.8" cy="4005.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M22562.9094,4000.7969 L22561.7531,4005.875 L22564.0813,4005.875 L22562.9094,4000.7969 Z M22561.425,3998.5625 L22564.4094,3998.5625 L22567.7688,4010.9531 L22565.3156,4010.9531 L22564.55,4007.8906 L22561.2688,4007.8906 L22560.5188,4010.9531 L22558.0813,4010.9531 L22561.425,3998.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="22583.3" y="4009.6074">Physics2DServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="21914.55" x2="23320.55" y1="4021.4531" y2="4021.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="21914.55" x2="23320.55" y1="4029.4531" y2="4029.4531"/><ellipse cx="21924.55" cy="4040.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="21933.55" y="4043.6636">get_class() const : String</text><ellipse cx="21924.55" cy="4053.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="21933.55" y="4056.4683">_get_class_namev() const : const StringName *</text><ellipse cx="21924.55" cy="4066.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="21933.55" y="4069.2729">get_class_ptr_static() : void *</text><ellipse cx="21924.55" cy="4078.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="21933.55" y="4082.0776">get_class_static() : String</text><ellipse cx="21924.55" cy="4091.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="21933.55" y="4094.8823">get_parent_class_static() : String</text><ellipse cx="21924.55" cy="4104.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="21933.55" y="4107.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="21924.55" cy="4117.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="21933.55" y="4120.4917">get_category_static() : String</text><ellipse cx="21924.55" cy="4130.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="21933.55" y="4133.2964">inherits_static() : String</text><ellipse cx="21924.55" cy="4142.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="21933.55" y="4146.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="21924.55" cy="4155.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="21933.55" y="4158.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="21924.55" cy="4168.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="21933.55" y="4171.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="21924.55" cy="4181.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="21933.55" y="4184.5151">initialize_class() : void</text><ellipse cx="21924.55" cy="4194.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="202" x="21933.55" y="4197.3198">get_singleton() : Physics2DServer *</text><ellipse cx="21924.55" cy="4206.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="165" x="21933.55" y="4210.1245">line_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4219.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="164" x="21933.55" y="4222.9292">ray_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4232.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="21933.55" y="4235.7339">segment_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4245.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="175" x="21933.55" y="4248.5386">circle_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4258.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="198" x="21933.55" y="4261.3433">rectangle_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4270.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="21933.55" y="4274.1479">capsule_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4283.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="237" x="21933.55" y="4286.9526">convex_polygon_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4296.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="243" x="21933.55" y="4299.7573">concave_polygon_shape_create() = 0 : RID</text><ellipse cx="21924.55" cy="4309.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="21933.55" y="4312.562">shape_set_data(RID p_shape, const Variant &amp; p_data) = 0 : void</text><ellipse cx="21924.55" cy="4322.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="21933.55" y="4325.3667">shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void</text><ellipse cx="21924.55" cy="4334.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="403" x="21933.55" y="4338.1714">shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType</text><ellipse cx="21924.55" cy="4347.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="278" x="21933.55" y="4350.9761">shape_get_data(RID p_shape) const = 0 : Variant</text><ellipse cx="21924.55" cy="4360.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="355" x="21933.55" y="4363.7808">shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t</text><ellipse cx="21924.55" cy="4373.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1382" x="21933.55" y="4376.5854">shape_collide(RID p_shape_A, const Transform2D &amp; p_xform_A, const Vector2 &amp; p_motion_A, RID p_shape_B, const Transform2D &amp; p_xform_B, const Vector2 &amp; p_motion_B, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="21924.55" cy="4386.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="138" x="21933.55" y="4389.3901">space_create() = 0 : RID</text><ellipse cx="21924.55" cy="4398.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="316" x="21933.55" y="4402.1948">space_set_active(RID p_space, bool p_active) = 0 : void</text><ellipse cx="21924.55" cy="4411.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="259" x="21933.55" y="4414.9995">space_is_active(RID p_space) const = 0 : bool</text><ellipse cx="21924.55" cy="4424.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="21933.55" y="4427.8042">space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void</text><ellipse cx="21924.55" cy="4437.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="538" x="21933.55" y="4440.6089">space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t</text><ellipse cx="21924.55" cy="4450.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="405" x="21933.55" y="4453.4136">space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *</text><ellipse cx="21924.55" cy="4463.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="404" x="21933.55" y="4466.2183">space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void</text><ellipse cx="21924.55" cy="4475.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="356" x="21933.55" y="4479.0229">space_get_contacts(RID p_space) const = 0 : Vector&lt;Vector2&gt;</text><ellipse cx="21924.55" cy="4488.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="21933.55" y="4491.8276">space_get_contact_count(RID p_space) const = 0 : int</text><ellipse cx="21924.55" cy="4501.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="131" x="21933.55" y="4504.6323">area_create() = 0 : RID</text><ellipse cx="21924.55" cy="4514.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="295" x="21933.55" y="4517.437">area_set_space(RID p_area, RID p_space) = 0 : void</text><ellipse cx="21924.55" cy="4527.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="248" x="21933.55" y="4530.2417">area_get_space(RID p_area) const = 0 : RID</text><ellipse cx="21924.55" cy="4539.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="21933.55" y="4543.0464">area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void</text><ellipse cx="21924.55" cy="4552.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="21933.55" y="4555.8511">area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode</text><ellipse cx="21924.55" cy="4565.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="742" x="21933.55" y="4568.6558">area_add_shape(RID p_area, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="21924.55" cy="4578.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="393" x="21933.55" y="4581.4604">area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="21924.55" cy="4591.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="21933.55" y="4594.2651">area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="21924.55" cy="4603.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="281" x="21933.55" y="4607.0698">area_get_shape_count(RID p_area) const = 0 : int</text><ellipse cx="21924.55" cy="4616.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="345" x="21933.55" y="4619.8745">area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID</text><ellipse cx="21924.55" cy="4629.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="462" x="21933.55" y="4632.6792">area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="21924.55" cy="4642.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="342" x="21933.55" y="4645.4839">area_remove_shape(RID p_area, int p_shape_idx) = 0 : void</text><ellipse cx="21924.55" cy="4655.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="236" x="21933.55" y="4658.2886">area_clear_shapes(RID p_area) = 0 : void</text><ellipse cx="21924.55" cy="4667.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="441" x="21933.55" y="4671.0933">area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="21924.55" cy="4680.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="388" x="21933.55" y="4683.8979">area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="21924.55" cy="4693.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="21933.55" y="4696.7026">area_get_object_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="21924.55" cy="4706.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="21933.55" y="4709.5073">area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void</text><ellipse cx="21924.55" cy="4719.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="352" x="21933.55" y="4722.312">area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID</text><ellipse cx="21924.55" cy="4731.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="618" x="21933.55" y="4735.1167">area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant &amp; p_value) = 0 : void</text><ellipse cx="21924.55" cy="4744.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="21933.55" y="4747.9214">area_set_transform(RID p_area, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="21924.55" cy="4757.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="21933.55" y="4760.7261">area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant</text><ellipse cx="21924.55" cy="4770.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="21933.55" y="4773.5308">area_get_transform(RID p_area) const = 0 : Transform2D</text><ellipse cx="21924.55" cy="4783.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="21933.55" y="4786.3354">area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void</text><ellipse cx="21924.55" cy="4795.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="364" x="21933.55" y="4799.1401">area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void</text><ellipse cx="21924.55" cy="4808.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="21933.55" y="4811.9448">area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void</text><ellipse cx="21924.55" cy="4821.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="21933.55" y="4824.7495">area_set_pickable(RID p_area, bool p_pickable) = 0 : void</text><ellipse cx="21924.55" cy="4834.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="579" x="21933.55" y="4837.5542">area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="21924.55" cy="4847.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="21933.55" y="4850.3589">area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName &amp; p_method) = 0 : void</text><ellipse cx="21924.55" cy="4859.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="133" x="21933.55" y="4863.1636">body_create() = 0 : RID</text><ellipse cx="21924.55" cy="4872.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="299" x="21933.55" y="4875.9683">body_set_space(RID p_body, RID p_space) = 0 : void</text><ellipse cx="21924.55" cy="4885.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="252" x="21933.55" y="4888.7729">body_get_space(RID p_body) const = 0 : RID</text><ellipse cx="21924.55" cy="4898.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="440" x="21933.55" y="4901.5776">body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void</text><ellipse cx="21924.55" cy="4911.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="394" x="21933.55" y="4914.3823">body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode</text><ellipse cx="21924.55" cy="4923.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="746" x="21933.55" y="4927.187">body_add_shape(RID p_body, RID p_shape, const Transform2D &amp; p_transform = Transform2D(), bool p_disabled = false) = 0 : void</text><ellipse cx="21924.55" cy="4936.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="397" x="21933.55" y="4939.9917">body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void</text><ellipse cx="21924.55" cy="4949.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="583" x="21933.55" y="4952.7964">body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D &amp; p_transform) = 0 : void</text><ellipse cx="21924.55" cy="4962.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="546" x="21933.55" y="4965.6011">body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant &amp; p_metadata) = 0 : void</text><ellipse cx="21924.55" cy="4975.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="285" x="21933.55" y="4978.4058">body_get_shape_count(RID p_body) const = 0 : int</text><ellipse cx="21924.55" cy="4988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="349" x="21933.55" y="4991.2104">body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID</text><ellipse cx="21924.55" cy="5000.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="466" x="21933.55" y="5004.0151">body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D</text><ellipse cx="21924.55" cy="5013.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="21933.55" y="5016.8198">body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant</text><ellipse cx="21924.55" cy="5026.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="445" x="21933.55" y="5029.6245">body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void</text><ellipse cx="21924.55" cy="5039.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="21933.55" y="5042.4292">body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void</text><ellipse cx="21924.55" cy="5052.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="346" x="21933.55" y="5055.2339">body_remove_shape(RID p_body, int p_shape_idx) = 0 : void</text><ellipse cx="21924.55" cy="5064.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="240" x="21933.55" y="5068.0386">body_clear_shapes(RID p_body) = 0 : void</text><ellipse cx="21924.55" cy="5077.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="21933.55" y="5080.8433">body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="21924.55" cy="5090.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="348" x="21933.55" y="5093.6479">body_get_object_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="21924.55" cy="5103.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="21933.55" y="5106.4526">body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void</text><ellipse cx="21924.55" cy="5116.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="354" x="21933.55" y="5119.2573">body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t</text><ellipse cx="21924.55" cy="5128.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="611" x="21933.55" y="5132.062">body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void</text><ellipse cx="21924.55" cy="5141.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="565" x="21933.55" y="5144.8667">body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode</text><ellipse cx="21924.55" cy="5154.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="368" x="21933.55" y="5157.6714">body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void</text><ellipse cx="21924.55" cy="5167.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="325" x="21933.55" y="5170.4761">body_get_collision_layer(RID p_body) const = 0 : uint32_t</text><ellipse cx="21924.55" cy="5180.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="21933.55" y="5183.2808">body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void</text><ellipse cx="21924.55" cy="5192.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="326" x="21933.55" y="5196.0854">body_get_collision_mask(RID p_body) const = 0 : uint32_t</text><ellipse cx="21924.55" cy="5205.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="561" x="21933.55" y="5208.8901">body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void</text><ellipse cx="21924.55" cy="5218.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="516" x="21933.55" y="5221.6948">body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float</text><ellipse cx="21924.55" cy="5231.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="584" x="21933.55" y="5234.4995">body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant &amp; p_variant) = 0 : void</text><ellipse cx="21924.55" cy="5244.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="483" x="21933.55" y="5247.3042">body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant</text><ellipse cx="21924.55" cy="5256.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="410" x="21933.55" y="5260.1089">body_set_applied_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="21924.55" cy="5269.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="21933.55" y="5272.9136">body_get_applied_force(RID p_body) const = 0 : Vector2</text><ellipse cx="21924.55" cy="5282.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="360" x="21933.55" y="5285.7183">body_set_applied_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="21924.55" cy="5295.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="21933.55" y="5298.5229">body_get_applied_torque(RID p_body) const = 0 : float</text><ellipse cx="21924.55" cy="5308.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="412" x="21933.55" y="5311.3276">body_add_central_force(RID p_body, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="21924.55" cy="5320.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="515" x="21933.55" y="5324.1323">body_add_force(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_force) = 0 : void</text><ellipse cx="21924.55" cy="5333.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="317" x="21933.55" y="5336.937">body_add_torque(RID p_body, float p_torque) = 0 : void</text><ellipse cx="21924.55" cy="5346.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="452" x="21933.55" y="5349.7417">body_apply_central_impulse(RID p_body, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="21924.55" cy="5359.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="377" x="21933.55" y="5362.5464">body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void</text><ellipse cx="21924.55" cy="5372.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="555" x="21933.55" y="5375.3511">body_apply_impulse(RID p_body, const Vector2 &amp; p_offset, const Vector2 &amp; p_impulse) = 0 : void</text><ellipse cx="21924.55" cy="5384.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="451" x="21933.55" y="5388.1558">body_set_axis_velocity(RID p_body, const Vector2 &amp; p_axis_velocity) = 0 : void</text><ellipse cx="21924.55" cy="5397.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="384" x="21933.55" y="5400.9604">body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="21924.55" cy="5410.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="407" x="21933.55" y="5413.7651">body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void</text><ellipse cx="21924.55" cy="5423.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="21933.55" y="5426.5698">body_get_collision_exceptions(RID p_body, List&lt;RID&gt; * p_exceptions) = 0 : void</text><ellipse cx="21924.55" cy="5436.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="21933.55" y="5439.3745">body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void</text><ellipse cx="21924.55" cy="5448.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="347" x="21933.55" y="5452.1792">body_get_max_contacts_reported(RID p_body) const = 0 : int</text><ellipse cx="21924.55" cy="5461.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="491" x="21933.55" y="5464.9839">body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void</text><ellipse cx="21924.55" cy="5474.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="424" x="21933.55" y="5477.7886">body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float</text><ellipse cx="21924.55" cy="5487.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="21933.55" y="5490.5933">body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void</text><ellipse cx="21924.55" cy="5500.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="363" x="21933.55" y="5503.3979">body_is_omitting_force_integration(RID p_body) const = 0 : bool</text><ellipse cx="21924.55" cy="5512.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="846" x="21933.55" y="5516.2026">body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName &amp; p_method, const Variant &amp; p_udata = Variant()) = 0 : void</text><ellipse cx="21924.55" cy="5525.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1138" x="21933.55" y="5529.0073">body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D &amp; p_shape_xform, const Vector2 &amp; p_motion, Vector2 * r_results, int p_result_max, int &amp; r_result_count) = 0 : bool</text><ellipse cx="21924.55" cy="5538.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="330" x="21933.55" y="5541.812">body_set_pickable(RID p_body, bool p_pickable) = 0 : void</text><ellipse cx="21924.55" cy="5551.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="21933.55" y="5554.6167">body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *</text><ellipse cx="21924.55" cy="5564.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1344" x="21933.55" y="5567.4214">body_test_motion(RID p_body, const Transform2D &amp; p_from, const Vector2 &amp; p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool</text><ellipse cx="21924.55" cy="5577.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1279" x="21933.55" y="5580.2261">body_test_ray_separation(RID p_body, const Transform2D &amp; p_transform, bool p_infinite_inertia, Vector2 &amp; r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int</text><ellipse cx="21924.55" cy="5589.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="532" x="21933.55" y="5593.0308">joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="21924.55" cy="5602.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="487" x="21933.55" y="5605.8354">joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t</text><ellipse cx="21924.55" cy="5615.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="475" x="21933.55" y="5618.6401">joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void</text><ellipse cx="21924.55" cy="5628.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="408" x="21933.55" y="5631.4448">joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool</text><ellipse cx="21924.55" cy="5641.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="526" x="21933.55" y="5644.2495">pin_joint_create(const Vector2 &amp; p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="21924.55" cy="5653.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="857" x="21933.55" y="5657.0542">groove_joint_create(const Vector2 &amp; p_a_groove1, const Vector2 &amp; p_a_groove2, const Vector2 &amp; p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID</text><ellipse cx="21924.55" cy="5666.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="777" x="21933.55" y="5669.8589">damped_spring_joint_create(const Vector2 &amp; p_anchor_a, const Vector2 &amp; p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID</text><ellipse cx="21924.55" cy="5679.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="572" x="21933.55" y="5682.6636">pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void</text><ellipse cx="21924.55" cy="5692.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="527" x="21933.55" y="5695.4683">pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t</text><ellipse cx="21924.55" cy="5705.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="678" x="21933.55" y="5708.2729">damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void</text><ellipse cx="21924.55" cy="5717.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="633" x="21933.55" y="5721.0776">damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t</text><ellipse cx="21924.55" cy="5730.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="21933.55" y="5733.8823">joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType</text><ellipse cx="21924.55" cy="5743.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="142" x="21933.55" y="5746.687">free(RID p_rid) = 0 : void</text><ellipse cx="21924.55" cy="5756.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="200" x="21933.55" y="5759.4917">set_active(bool p_active) = 0 : void</text><ellipse cx="21924.55" cy="5769.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="21933.55" y="5772.2964">init() = 0 : void</text><ellipse cx="21924.55" cy="5781.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="158" x="21933.55" y="5785.1011">step(float p_step) = 0 : void</text><ellipse cx="21924.55" cy="5794.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="94" x="21933.55" y="5797.9058">sync() = 0 : void</text><ellipse cx="21924.55" cy="5807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="21933.55" y="5810.7104">flush_queries() = 0 : void</text><ellipse cx="21924.55" cy="5820.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="121" x="21933.55" y="5823.5151">end_sync() = 0 : void</text><ellipse cx="21924.55" cy="5833.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="21933.55" y="5836.3198">finish() = 0 : void</text><ellipse cx="21924.55" cy="5845.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="209" x="21933.55" y="5849.1245">is_flushing_queries() const = 0 : bool</text><ellipse cx="21924.55" cy="5858.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="359" x="21933.55" y="5861.9292">get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int</text><ellipse cx="21924.55" cy="5871.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="21933.55" y="5874.7339">Physics2DServer() : void</text><ellipse cx="21924.55" cy="5884.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="21933.55" y="5887.5386">~Physics2DServer() : void</text></a><!--MD5=[9ad247f9a1f402d5bcd303a8e9ade6db]
class C_0000762417759113755306--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" target="_top" title="_ArrayVariantSortCustom" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298" xlink:show="new" xlink:title="_ArrayVariantSortCustom" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="86.4141" id="C_0000762417759113755306" style="stroke: #A80036; stroke-width: 1.5;" width="390" x="18409.55" y="73.9531"/><ellipse cx="18522.3" cy="89.9531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M18525.2688,95.5938 Q18524.6906,95.8906 18524.05,96.0313 Q18523.4094,96.1875 18522.7063,96.1875 Q18520.2063,96.1875 18518.8781,94.5469 Q18517.5656,92.8906 18517.5656,89.7656 Q18517.5656,86.6406 18518.8781,84.9844 Q18520.2063,83.3281 18522.7063,83.3281 Q18523.4094,83.3281 18524.05,83.4844 Q18524.7063,83.6406 18525.2688,83.9375 L18525.2688,86.6563 Q18524.6438,86.0781 18524.05,85.8125 Q18523.4563,85.5313 18522.8313,85.5313 Q18521.4875,85.5313 18520.8,86.6094 Q18520.1125,87.6719 18520.1125,89.7656 Q18520.1125,91.8594 18520.8,92.9375 Q18521.4875,94 18522.8313,94 Q18523.4563,94 18524.05,93.7344 Q18524.6438,93.4531 18525.2688,92.875 L18525.2688,95.5938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="156" x="18542.8" y="94.1074">_ArrayVariantSortCustom</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="18410.55" x2="18798.55" y1="105.9531" y2="105.9531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="18415.55" y="111.9531"/><ellipse cx="18420.55" cy="116.9531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" target="_top" title="obj" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300" xlink:show="new" xlink:title="obj" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="18429.55" y="120.1636">obj : Object *</text></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="18415.55" y="124.7578"/><ellipse cx="18420.55" cy="129.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" target="_top" title="func" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301" xlink:show="new" xlink:title="func" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="18429.55" y="132.9683">func : StringName</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="18410.55" x2="18798.55" y1="139.5625" y2="139.5625"/><ellipse cx="18420.55" cy="150.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="18429.55" y="153.7729">operator()(const Variant &amp; p_l, const Variant &amp; p_r) const : bool</text><!--MD5=[6de3aa3d86b19b8e0f1ee230f1ebf3bf]
class C_0000314051240057057851--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" target="_top" title="InputMap" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37" xlink:show="new" xlink:title="InputMap" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="444.9453" id="C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.5;" width="921" x="14518.05" y="4719.4531"/><ellipse cx="14945.3" cy="4735.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M14948.2688,4741.0938 Q14947.6906,4741.3906 14947.05,4741.5313 Q14946.4094,4741.6875 14945.7063,4741.6875 Q14943.2063,4741.6875 14941.8781,4740.0469 Q14940.5656,4738.3906 14940.5656,4735.2656 Q14940.5656,4732.1406 14941.8781,4730.4844 Q14943.2063,4728.8281 14945.7063,4728.8281 Q14946.4094,4728.8281 14947.05,4728.9844 Q14947.7063,4729.1406 14948.2688,4729.4375 L14948.2688,4732.1563 Q14947.6438,4731.5781 14947.05,4731.3125 Q14946.4563,4731.0313 14945.8313,4731.0313 Q14944.4875,4731.0313 14943.8,4732.1094 Q14943.1125,4733.1719 14943.1125,4735.2656 Q14943.1125,4737.3594 14943.8,4738.4375 Q14944.4875,4739.5 14945.8313,4739.5 Q14946.4563,4739.5 14947.05,4739.2344 Q14947.6438,4738.9531 14948.2688,4738.375 L14948.2688,4741.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="14965.8" y="4739.6074">InputMap</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14519.05" x2="15438.05" y1="4751.4531" y2="4751.4531"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="14524.05" y="4757.4531"/><ellipse cx="14529.05" cy="4762.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" target="_top" title="ALL_DEVICES" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45" xlink:show="new" xlink:title="ALL_DEVICES" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="99" x="14538.05" y="4765.6636">ALL_DEVICES : int</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="14519.05" x2="15438.05" y1="4772.2578" y2="4772.2578"/><ellipse cx="14529.05" cy="4783.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="14538.05" y="4786.4683">get_class() const : String</text><ellipse cx="14529.05" cy="4796.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="14538.05" y="4799.2729">_get_class_namev() const : const StringName *</text><ellipse cx="14529.05" cy="4808.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="14538.05" y="4812.0776">get_class_ptr_static() : void *</text><ellipse cx="14529.05" cy="4821.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="14538.05" y="4824.8823">get_class_static() : String</text><ellipse cx="14529.05" cy="4834.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="14538.05" y="4837.687">get_parent_class_static() : String</text><ellipse cx="14529.05" cy="4847.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="14538.05" y="4850.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="14529.05" cy="4860.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="14538.05" y="4863.2964">get_category_static() : String</text><ellipse cx="14529.05" cy="4872.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="14538.05" y="4876.1011">inherits_static() : String</text><ellipse cx="14529.05" cy="4885.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="14538.05" y="4888.9058">is_class(const String &amp; p_class) const : bool</text><ellipse cx="14529.05" cy="4898.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="14538.05" y="4901.7104">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="14529.05" cy="4911.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="14538.05" y="4914.5151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="14529.05" cy="4924.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="14538.05" y="4927.3198">initialize_class() : void</text><ellipse cx="14529.05" cy="4936.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="157" x="14538.05" y="4940.1245">get_singleton() : InputMap *</text><ellipse cx="14529.05" cy="4949.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="14538.05" y="4952.9292">has_action(const StringName &amp; p_action) const : bool</text><ellipse cx="14529.05" cy="4962.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="14538.05" y="4965.7339">get_actions() const : List&lt;StringName&gt;</text><ellipse cx="14529.05" cy="4975.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="14538.05" y="4978.5386">add_action(const StringName &amp; p_action, float p_deadzone = 0.5) : void</text><ellipse cx="14529.05" cy="4988.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="14538.05" y="4991.3433">erase_action(const StringName &amp; p_action) : void</text><ellipse cx="14529.05" cy="5000.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="14538.05" y="5004.1479">action_get_deadzone(const StringName &amp; p_action) : float</text><ellipse cx="14529.05" cy="5013.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="14538.05" y="5016.9526">action_set_deadzone(const StringName &amp; p_action, float p_deadzone) : void</text><ellipse cx="14529.05" cy="5026.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="14538.05" y="5029.7573">action_add_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="14529.05" cy="5039.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="509" x="14538.05" y="5042.562">action_has_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : bool</text><ellipse cx="14529.05" cy="5052.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="14538.05" y="5055.3667">action_erase_event(const StringName &amp; p_action, const Ref&lt;InputEvent&gt; &amp; p_event) : void</text><ellipse cx="14529.05" cy="5064.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="14538.05" y="5068.1714">action_erase_events(const StringName &amp; p_action) : void</text><ellipse cx="14529.05" cy="5077.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="14538.05" y="5080.9761">get_action_list(const StringName &amp; p_action) : const List&lt;Ref&lt;InputEvent&gt;&gt; *</text><ellipse cx="14529.05" cy="5090.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="533" x="14538.05" y="5093.7808">event_is_action(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action) const : bool</text><ellipse cx="14529.05" cy="5103.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="895" x="14538.05" y="5106.5854">event_get_action_status(const Ref&lt;InputEvent&gt; &amp; p_event, const StringName &amp; p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool</text><ellipse cx="14529.05" cy="5116.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="14538.05" y="5119.3901">get_action_map() const : const Map&lt;StringName,InputMap::Action&gt; &amp;</text><ellipse cx="14529.05" cy="5128.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="14538.05" y="5132.1948">load_from_globals() : void</text><ellipse cx="14529.05" cy="5141.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="14538.05" y="5144.9995">load_default() : void</text><ellipse cx="14529.05" cy="5154.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="14538.05" y="5157.8042">InputMap() : void</text><!--MD5=[3306ef7474ee8a0f7d63514abbcbe3b8]
class C_0000535376932101028371--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" target="_top" title="Input" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38" xlink:show="new" xlink:title="Input" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="854.6953" id="C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.5;" width="876" x="15574.55" y="4514.4531"/><ellipse cx="15991.8" cy="4530.4531" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M15991.9094,4525.7969 L15990.7531,4530.875 L15993.0813,4530.875 L15991.9094,4525.7969 Z M15990.425,4523.5625 L15993.4094,4523.5625 L15996.7688,4535.9531 L15994.3156,4535.9531 L15993.55,4532.8906 L15990.2688,4532.8906 L15989.5188,4535.9531 L15987.0813,4535.9531 L15990.425,4523.5625 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="33" x="16012.3" y="4534.6074">Input</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="15575.55" x2="16449.55" y1="4546.4531" y2="4546.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="15575.55" x2="16449.55" y1="4554.4531" y2="4554.4531"/><ellipse cx="15585.55" cy="4565.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="15594.55" y="4568.6636">get_class() const : String</text><ellipse cx="15585.55" cy="4578.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="15594.55" y="4581.4683">_get_class_namev() const : const StringName *</text><ellipse cx="15585.55" cy="4591.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="15594.55" y="4594.2729">get_class_ptr_static() : void *</text><ellipse cx="15585.55" cy="4603.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="15594.55" y="4607.0776">get_class_static() : String</text><ellipse cx="15585.55" cy="4616.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="15594.55" y="4619.8823">get_parent_class_static() : String</text><ellipse cx="15585.55" cy="4629.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="15594.55" y="4632.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="15585.55" cy="4642.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="15594.55" y="4645.4917">get_category_static() : String</text><ellipse cx="15585.55" cy="4655.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="15594.55" y="4658.2964">inherits_static() : String</text><ellipse cx="15585.55" cy="4667.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="15594.55" y="4671.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="15585.55" cy="4680.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="15594.55" y="4683.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="15585.55" cy="4693.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="15594.55" y="4696.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="15585.55" cy="4706.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="15594.55" y="4709.5151">initialize_class() : void</text><ellipse cx="15585.55" cy="4719.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="15594.55" y="4722.3198">set_mouse_mode(Input::MouseMode p_mode) : void</text><ellipse cx="15585.55" cy="4731.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="15594.55" y="4735.1245">get_mouse_mode() const : Input::MouseMode</text><ellipse cx="15585.55" cy="4744.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="15594.55" y="4747.9292">get_singleton() : Input *</text><ellipse cx="15585.55" cy="4757.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="272" x="15594.55" y="4760.7339">is_key_pressed(int p_scancode) const = 0 : bool</text><ellipse cx="15585.55" cy="4770.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="315" x="15594.55" y="4773.5386">is_mouse_button_pressed(int p_button) const = 0 : bool</text><ellipse cx="15585.55" cy="4783.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="15594.55" y="4786.3433">is_joy_button_pressed(int p_device, int p_button) const = 0 : bool</text><ellipse cx="15585.55" cy="4795.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="366" x="15594.55" y="4799.1479">is_action_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="15585.55" cy="4808.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="392" x="15594.55" y="4811.9526">is_action_just_pressed(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="15585.55" cy="4821.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="396" x="15594.55" y="4824.7573">is_action_just_released(const StringName &amp; p_action) const = 0 : bool</text><ellipse cx="15585.55" cy="4834.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="378" x="15594.55" y="4837.562">get_action_strength(const StringName &amp; p_action) const = 0 : float</text><ellipse cx="15585.55" cy="4847.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="303" x="15594.55" y="4850.3667">get_joy_axis(int p_device, int p_axis) const = 0 : float</text><ellipse cx="15585.55" cy="4859.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="204" x="15594.55" y="4863.1714">get_joy_name(int p_idx) = 0 : String</text><ellipse cx="15585.55" cy="4872.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="208" x="15594.55" y="4875.9761">get_connected_joypads() = 0 : Array</text><ellipse cx="15585.55" cy="4885.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="533" x="15594.55" y="4888.7808">joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void</text><ellipse cx="15585.55" cy="4898.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="448" x="15594.55" y="4901.5854">add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void</text><ellipse cx="15585.55" cy="4911.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="264" x="15594.55" y="4914.3901">remove_joy_mapping(String p_guid) = 0 : void</text><ellipse cx="15585.55" cy="4923.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="210" x="15594.55" y="4927.1948">is_joy_known(int p_device) = 0 : bool</text><ellipse cx="15585.55" cy="4936.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="250" x="15594.55" y="4939.9995">get_joy_guid(int p_device) const = 0 : String</text><ellipse cx="15585.55" cy="4949.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="306" x="15594.55" y="4952.8042">get_joy_vibration_strength(int p_device) = 0 : Vector2</text><ellipse cx="15585.55" cy="4962.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="15594.55" y="4965.6089">get_joy_vibration_duration(int p_device) = 0 : float</text><ellipse cx="15585.55" cy="4975.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="320" x="15594.55" y="4978.4136">get_joy_vibration_timestamp(int p_device) = 0 : uint64_t</text><ellipse cx="15585.55" cy="4988.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="659" x="15594.55" y="4991.2183">start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void</text><ellipse cx="15585.55" cy="5000.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="15594.55" y="5004.0229">stop_joy_vibration(int p_device) = 0 : void</text><ellipse cx="15585.55" cy="5013.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="305" x="15594.55" y="5016.8276">vibrate_handheld(int p_duration_ms = 500) = 0 : void</text><ellipse cx="15585.55" cy="5026.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="225" x="15594.55" y="5029.6323">get_mouse_position() const = 0 : Point2</text><ellipse cx="15585.55" cy="5039.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="241" x="15594.55" y="5042.437">get_last_mouse_speed() const = 0 : Point2</text><ellipse cx="15585.55" cy="5052.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="232" x="15594.55" y="5055.2417">get_mouse_button_mask() const = 0 : int</text><ellipse cx="15585.55" cy="5064.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="15594.55" y="5068.0464">warp_mouse_position(const Vector2 &amp; p_to) = 0 : void</text><ellipse cx="15585.55" cy="5077.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="598" x="15594.55" y="5080.8511">warp_mouse_motion(const Ref&lt;InputEventMouseMotion&gt; &amp; p_motion, const Rect2 &amp; p_rect) = 0 : Point2i</text><ellipse cx="15585.55" cy="5090.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="186" x="15594.55" y="5093.6558">get_gravity() const = 0 : Vector3</text><ellipse cx="15585.55" cy="5103.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="15594.55" y="5106.4604">get_accelerometer() const = 0 : Vector3</text><ellipse cx="15585.55" cy="5116.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="230" x="15594.55" y="5119.2651">get_magnetometer() const = 0 : Vector3</text><ellipse cx="15585.55" cy="5128.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="205" x="15594.55" y="5132.0698">get_gyroscope() const = 0 : Vector3</text><ellipse cx="15585.55" cy="5141.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="432" x="15594.55" y="5144.8745">action_press(const StringName &amp; p_action, float p_strength = 1.f) = 0 : void</text><ellipse cx="15585.55" cy="5154.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="314" x="15594.55" y="5157.6792">action_release(const StringName &amp; p_action) = 0 : void</text><ellipse cx="15585.55" cy="5167.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="585" x="15594.55" y="5170.4839">get_argument_options(const StringName &amp; p_function, int p_idx, List&lt;String&gt; * r_options) const : void</text><ellipse cx="15585.55" cy="5180.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="15594.55" y="5183.2886">is_emulating_touch_from_mouse() const = 0 : bool</text><ellipse cx="15585.55" cy="5192.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="287" x="15594.55" y="5196.0933">is_emulating_mouse_from_touch() const = 0 : bool</text><ellipse cx="15585.55" cy="5205.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="332" x="15594.55" y="5208.8979">get_default_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="15585.55" cy="5218.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="372" x="15594.55" y="5221.7026">set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void</text><ellipse cx="15585.55" cy="5231.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="334" x="15594.55" y="5234.5073">get_current_cursor_shape() const = 0 : Input::CursorShape</text><ellipse cx="15585.55" cy="5244.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="850" x="15594.55" y="5247.312">set_custom_mouse_cursor(const RES &amp; p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 &amp; p_hotspot = Vector2()) = 0 : void</text><ellipse cx="15585.55" cy="5256.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="15594.55" y="5260.1167">get_joy_button_string(int p_button) = 0 : String</text><ellipse cx="15585.55" cy="5269.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="239" x="15594.55" y="5272.9214">get_joy_axis_string(int p_axis) = 0 : String</text><ellipse cx="15585.55" cy="5282.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="335" x="15594.55" y="5285.7261">get_joy_button_index_from_string(String p_button) = 0 : int</text><ellipse cx="15585.55" cy="5295.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="309" x="15594.55" y="5298.5308">get_joy_axis_index_from_string(String p_axis) = 0 : int</text><ellipse cx="15585.55" cy="5308.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="365" x="15594.55" y="5311.3354">parse_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="15585.55" cy="5320.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="398" x="15594.55" y="5324.1401">accumulate_input_event(const Ref&lt;InputEvent&gt; &amp; p_event) = 0 : void</text><ellipse cx="15585.55" cy="5333.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="217" x="15594.55" y="5336.9448">flush_accumulated_events() = 0 : void</text><ellipse cx="15585.55" cy="5346.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="302" x="15594.55" y="5349.7495">set_use_accumulated_input(bool p_enable) = 0 : void</text><ellipse cx="15585.55" cy="5359.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="15594.55" y="5362.5542">Input() : void</text></a><!--MD5=[e6941b9b1ee3163b45cd73ecd30a9f2c]
class C_0001370497546359815893--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" target="_top" title="AudioServer" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148" xlink:show="new" xlink:title="AudioServer" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="1085.1797" id="C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.5;" width="560" x="16585.55" y="4399.4531"/><ellipse cx="16823.8" cy="4415.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M16826.7688,4421.0938 Q16826.1906,4421.3906 16825.55,4421.5313 Q16824.9094,4421.6875 16824.2063,4421.6875 Q16821.7063,4421.6875 16820.3781,4420.0469 Q16819.0656,4418.3906 16819.0656,4415.2656 Q16819.0656,4412.1406 16820.3781,4410.4844 Q16821.7063,4408.8281 16824.2063,4408.8281 Q16824.9094,4408.8281 16825.55,4408.9844 Q16826.2063,4409.1406 16826.7688,4409.4375 L16826.7688,4412.1563 Q16826.1438,4411.5781 16825.55,4411.3125 Q16824.9563,4411.0313 16824.3313,4411.0313 Q16822.9875,4411.0313 16822.3,4412.1094 Q16821.6125,4413.1719 16821.6125,4415.2656 Q16821.6125,4417.3594 16822.3,4418.4375 Q16822.9875,4419.5 16824.3313,4419.5 Q16824.9563,4419.5 16825.55,4419.2344 Q16826.1438,4418.9531 16826.7688,4418.375 L16826.7688,4421.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="75" x="16844.3" y="4419.6074">AudioServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16586.55" x2="17144.55" y1="4431.4531" y2="4431.4531"/><ellipse cx="16596.55" cy="4442.4531" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="16605.55" y="4445.6636">AUDIO_DATA_INVALID_ID : enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16586.55" x2="17144.55" y1="4452.2578" y2="4452.2578"/><ellipse cx="16596.55" cy="4463.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="16605.55" y="4466.4683">get_class() const : String</text><ellipse cx="16596.55" cy="4476.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="16605.55" y="4479.2729">_get_class_namev() const : const StringName *</text><ellipse cx="16596.55" cy="4488.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="16605.55" y="4492.0776">get_class_ptr_static() : void *</text><ellipse cx="16596.55" cy="4501.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="16605.55" y="4504.8823">get_class_static() : String</text><ellipse cx="16596.55" cy="4514.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="16605.55" y="4517.687">get_parent_class_static() : String</text><ellipse cx="16596.55" cy="4527.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="16605.55" y="4530.4917">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="16596.55" cy="4540.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="16605.55" y="4543.2964">get_category_static() : String</text><ellipse cx="16596.55" cy="4552.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="16605.55" y="4556.1011">inherits_static() : String</text><ellipse cx="16596.55" cy="4565.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="16605.55" y="4568.9058">is_class(const String &amp; p_class) const : bool</text><ellipse cx="16596.55" cy="4578.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="16605.55" y="4581.7104">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="16596.55" cy="4591.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="16605.55" y="4594.5151">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="16596.55" cy="4604.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="16605.55" y="4607.3198">initialize_class() : void</text><ellipse cx="16596.55" cy="4616.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="16605.55" y="4620.1245">get_channel_count() const : int</text><ellipse cx="16596.55" cy="4629.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="16605.55" y="4632.9292">thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool</text><ellipse cx="16596.55" cy="4642.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="16605.55" y="4645.7339">thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *</text><ellipse cx="16596.55" cy="4655.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="16605.55" y="4658.5386">thread_get_mix_buffer_size() const : int</text><ellipse cx="16596.55" cy="4668.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="16605.55" y="4671.3433">thread_find_bus_index(const StringName &amp; p_name) : int</text><ellipse cx="16596.55" cy="4680.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="16605.55" y="4684.1479">set_bus_count(int p_count) : void</text><ellipse cx="16596.55" cy="4693.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="16605.55" y="4696.9526">get_bus_count() const : int</text><ellipse cx="16596.55" cy="4706.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="16605.55" y="4709.7573">remove_bus(int p_index) : void</text><ellipse cx="16596.55" cy="4719.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="16605.55" y="4722.562">add_bus(int p_at_pos = -1) : void</text><ellipse cx="16596.55" cy="4732.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="16605.55" y="4735.3667">move_bus(int p_bus, int p_to_pos) : void</text><ellipse cx="16596.55" cy="4744.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="16605.55" y="4748.1714">set_bus_name(int p_bus, const String &amp; p_name) : void</text><ellipse cx="16596.55" cy="4757.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="16605.55" y="4760.9761">get_bus_name(int p_bus) const : String</text><ellipse cx="16596.55" cy="4770.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="16605.55" y="4773.7808">get_bus_index(const StringName &amp; p_bus_name) const : int</text><ellipse cx="16596.55" cy="4783.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="16605.55" y="4786.5854">get_bus_channels(int p_bus) const : int</text><ellipse cx="16596.55" cy="4796.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="16605.55" y="4799.3901">set_bus_volume_db(int p_bus, float p_volume_db) : void</text><ellipse cx="16596.55" cy="4808.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="16605.55" y="4812.1948">get_bus_volume_db(int p_bus) const : float</text><ellipse cx="16596.55" cy="4821.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="16605.55" y="4824.9995">set_bus_send(int p_bus, const StringName &amp; p_send) : void</text><ellipse cx="16596.55" cy="4834.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="16605.55" y="4837.8042">get_bus_send(int p_bus) const : StringName</text><ellipse cx="16596.55" cy="4847.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="16605.55" y="4850.6089">set_bus_solo(int p_bus, bool p_enable) : void</text><ellipse cx="16596.55" cy="4860.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="16605.55" y="4863.4136">is_bus_solo(int p_bus) const : bool</text><ellipse cx="16596.55" cy="4873.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="16605.55" y="4876.2183">set_bus_mute(int p_bus, bool p_enable) : void</text><ellipse cx="16596.55" cy="4885.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="16605.55" y="4889.0229">is_bus_mute(int p_bus) const : bool</text><ellipse cx="16596.55" cy="4898.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="16605.55" y="4901.8276">set_bus_bypass_effects(int p_bus, bool p_enable) : void</text><ellipse cx="16596.55" cy="4911.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="16605.55" y="4914.6323">is_bus_bypassing_effects(int p_bus) const : bool</text><ellipse cx="16596.55" cy="4924.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="16605.55" y="4927.437">add_bus_effect(int p_bus, const Ref&lt;AudioEffect&gt; &amp; p_effect, int p_at_pos = -1) : void</text><ellipse cx="16596.55" cy="4937.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="16605.55" y="4940.2417">remove_bus_effect(int p_bus, int p_effect) : void</text><ellipse cx="16596.55" cy="4949.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="16605.55" y="4953.0464">get_bus_effect_count(int p_bus) : int</text><ellipse cx="16596.55" cy="4962.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="16605.55" y="4965.8511">get_bus_effect(int p_bus, int p_effect) : Ref&lt;AudioEffect&gt;</text><ellipse cx="16596.55" cy="4975.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="534" x="16605.55" y="4978.6558">get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref&lt;AudioEffectInstance&gt;</text><ellipse cx="16596.55" cy="4988.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="16605.55" y="4991.4604">swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void</text><ellipse cx="16596.55" cy="5001.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="16605.55" y="5004.2651">set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void</text><ellipse cx="16596.55" cy="5013.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="16605.55" y="5017.0698">is_bus_effect_enabled(int p_bus, int p_effect) const : bool</text><ellipse cx="16596.55" cy="5026.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="16605.55" y="5029.8745">get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float</text><ellipse cx="16596.55" cy="5039.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="16605.55" y="5042.6792">get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float</text><ellipse cx="16596.55" cy="5052.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="16605.55" y="5055.4839">is_bus_channel_active(int p_bus, int p_channel) const : bool</text><ellipse cx="16596.55" cy="5065.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="16605.55" y="5068.2886">set_global_rate_scale(float p_scale) : void</text><ellipse cx="16596.55" cy="5077.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="16605.55" y="5081.0933">get_global_rate_scale() const : float</text><ellipse cx="16596.55" cy="5090.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="16605.55" y="5093.8979">init() : void</text><ellipse cx="16596.55" cy="5103.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="16605.55" y="5106.7026">finish() : void</text><ellipse cx="16596.55" cy="5116.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="16605.55" y="5119.5073">update() : void</text><ellipse cx="16596.55" cy="5129.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="16605.55" y="5132.312">load_default_bus_layout() : void</text><ellipse cx="16596.55" cy="5141.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="16605.55" y="5145.1167">lock() : void</text><ellipse cx="16596.55" cy="5154.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="16605.55" y="5157.9214">unlock() : void</text><ellipse cx="16596.55" cy="5167.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="16605.55" y="5170.7261">get_speaker_mode() const : AudioServer::SpeakerMode</text><ellipse cx="16596.55" cy="5180.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="16605.55" y="5183.5308">get_mix_rate() const : float</text><ellipse cx="16596.55" cy="5193.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="16605.55" y="5196.3354">read_output_peak_db() const : float</text><ellipse cx="16596.55" cy="5205.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="175" x="16605.55" y="5209.1401">get_singleton() : AudioServer *</text><ellipse cx="16596.55" cy="5218.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="16605.55" y="5221.9448">get_output_latency() const : double</text><ellipse cx="16596.55" cy="5231.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="16605.55" y="5234.7495">get_time_to_next_mix() const : double</text><ellipse cx="16596.55" cy="5244.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="16605.55" y="5247.5542">get_time_since_last_mix() const : double</text><ellipse cx="16596.55" cy="5257.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="16605.55" y="5260.3589">audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *</text><ellipse cx="16596.55" cy="5269.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="16605.55" y="5273.1636">audio_data_free(void * p_data) : void</text><ellipse cx="16596.55" cy="5282.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="16605.55" y="5285.9683">audio_data_get_total_memory_usage() const : size_t</text><ellipse cx="16596.55" cy="5295.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="16605.55" y="5298.7729">audio_data_get_max_memory_usage() const : size_t</text><ellipse cx="16596.55" cy="5308.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="16605.55" y="5311.5776">add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="16596.55" cy="5321.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="16605.55" y="5324.3823">remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="16596.55" cy="5333.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="486" x="16605.55" y="5337.187">add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="16596.55" cy="5346.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="508" x="16605.55" y="5349.9917">remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void</text><ellipse cx="16596.55" cy="5359.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="16605.55" y="5362.7964">set_bus_layout(const Ref&lt;AudioBusLayout&gt; &amp; p_bus_layout) : void</text><ellipse cx="16596.55" cy="5372.3906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="16605.55" y="5375.6011">generate_bus_layout() const : Ref&lt;AudioBusLayout&gt;</text><ellipse cx="16596.55" cy="5385.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="16605.55" y="5388.4058">get_device_list() : Array</text><ellipse cx="16596.55" cy="5398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="16605.55" y="5401.2104">get_device() : String</text><ellipse cx="16596.55" cy="5410.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="16605.55" y="5414.0151">set_device(String device) : void</text><ellipse cx="16596.55" cy="5423.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="16605.55" y="5426.8198">capture_get_device_list() : Array</text><ellipse cx="16596.55" cy="5436.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="16605.55" y="5439.6245">capture_get_device() : String</text><ellipse cx="16596.55" cy="5449.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="16605.55" y="5452.4292">capture_set_device(const String &amp; p_name) : void</text><ellipse cx="16596.55" cy="5462.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="16605.55" y="5465.2339">AudioServer() : void</text><ellipse cx="16596.55" cy="5474.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="16605.55" y="5478.0386">~AudioServer() : void</text></a><!--MD5=[6f2b8bf6de67278d3387148d256017be]
class C_0000096380574950611570--><a href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" target="_top" title="UndoRedo" xlink:actuate="onRequest" xlink:href="https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37" xlink:show="new" xlink:title="UndoRedo" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1trm0xwgb9o5h)" height="508.9688" id="C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.5;" width="1446" x="17280.55" y="4687.4531"/><ellipse cx="17966.8" cy="4703.4531" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M17969.7688,4709.0938 Q17969.1906,4709.3906 17968.55,4709.5313 Q17967.9094,4709.6875 17967.2063,4709.6875 Q17964.7063,4709.6875 17963.3781,4708.0469 Q17962.0656,4706.3906 17962.0656,4703.2656 Q17962.0656,4700.1406 17963.3781,4698.4844 Q17964.7063,4696.8281 17967.2063,4696.8281 Q17967.9094,4696.8281 17968.55,4696.9844 Q17969.2063,4697.1406 17969.7688,4697.4375 L17969.7688,4700.1563 Q17969.1438,4699.5781 17968.55,4699.3125 Q17967.9563,4699.0313 17967.3313,4699.0313 Q17965.9875,4699.0313 17965.3,4700.1094 Q17964.6125,4701.1719 17964.6125,4703.2656 Q17964.6125,4705.3594 17965.3,4706.4375 Q17965.9875,4707.5 17967.3313,4707.5 Q17967.9563,4707.5 17968.55,4707.2344 Q17969.1438,4706.9531 17969.7688,4706.375 L17969.7688,4709.0938 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="17987.3" y="4707.6074">UndoRedo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="17281.55" x2="18725.55" y1="4719.4531" y2="4719.4531"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="17281.55" x2="18725.55" y1="4727.4531" y2="4727.4531"/><ellipse cx="17291.55" cy="4738.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="17300.55" y="4741.6636">get_class() const : String</text><ellipse cx="17291.55" cy="4751.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="17300.55" y="4754.4683">_get_class_namev() const : const StringName *</text><ellipse cx="17291.55" cy="4764.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="166" x="17300.55" y="4767.2729">get_class_ptr_static() : void *</text><ellipse cx="17291.55" cy="4776.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="145" x="17300.55" y="4780.0776">get_class_static() : String</text><ellipse cx="17291.55" cy="4789.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="17300.55" y="4792.8823">get_parent_class_static() : String</text><ellipse cx="17291.55" cy="4802.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="375" x="17300.55" y="4805.687">get_inheritance_list_static(List&lt;String&gt; * p_inheritance_list) : void</text><ellipse cx="17291.55" cy="4815.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="164" x="17300.55" y="4818.4917">get_category_static() : String</text><ellipse cx="17291.55" cy="4828.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="134" x="17300.55" y="4831.2964">inherits_static() : String</text><ellipse cx="17291.55" cy="4840.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="17300.55" y="4844.1011">is_class(const String &amp; p_class) const : bool</text><ellipse cx="17291.55" cy="4853.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="17300.55" y="4856.9058">is_class_ptr(void * p_ptr) const : bool</text><ellipse cx="17291.55" cy="4866.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="17300.55" y="4869.7104">get_valid_parents_static(List&lt;String&gt; * p_parents) : void</text><ellipse cx="17291.55" cy="4879.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="124" x="17300.55" y="4882.5151">initialize_class() : void</text><ellipse cx="17291.55" cy="4892.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="17300.55" y="4895.3198">get_save_class() const : String</text><ellipse cx="17291.55" cy="4904.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="17300.55" y="4908.1245">_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="17291.55" cy="4917.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="17300.55" y="4920.9292">_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError &amp; r_error) : Variant</text><ellipse cx="17291.55" cy="4930.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="574" x="17300.55" y="4933.7339">create_action(const String &amp; p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void</text><ellipse cx="17291.55" cy="4943.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1406" x="17300.55" y="4946.5386">add_do_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17291.55" cy="4956.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1420" x="17300.55" y="4959.3433">add_undo_method(Object * p_object, const String &amp; p_method, const Variant &amp; p_arg1 = Variant(), const Variant &amp; p_arg2 = Variant(), const Variant &amp; p_arg3 = Variant(), const Variant &amp; p_arg4 = Variant(), const Variant &amp; p_arg5 = Variant()) : void</text><ellipse cx="17291.55" cy="4968.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="17300.55" y="4972.1479">add_do_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17291.55" cy="4981.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="549" x="17300.55" y="4984.9526">add_undo_property(Object * p_object, const String &amp; p_property, const Variant &amp; p_value) : void</text><ellipse cx="17291.55" cy="4994.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="17300.55" y="4997.7573">add_do_reference(Object * p_object) : void</text><ellipse cx="17291.55" cy="5007.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="17300.55" y="5010.562">add_undo_reference(Object * p_object) : void</text><ellipse cx="17291.55" cy="5020.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="17300.55" y="5023.3667">is_committing_action() const : bool</text><ellipse cx="17291.55" cy="5032.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="17300.55" y="5036.1714">commit_action() : void</text><ellipse cx="17291.55" cy="5045.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="17300.55" y="5048.9761">redo() : bool</text><ellipse cx="17291.55" cy="5058.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="17300.55" y="5061.7808">undo() : bool</text><ellipse cx="17291.55" cy="5071.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="17300.55" y="5074.5854">get_current_action_name() const : String</text><ellipse cx="17291.55" cy="5084.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="17300.55" y="5087.3901">clear_history(bool p_increase_version = true) : void</text><ellipse cx="17291.55" cy="5096.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="17300.55" y="5100.1948">has_undo() : bool</text><ellipse cx="17291.55" cy="5109.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="17300.55" y="5112.9995">has_redo() : bool</text><ellipse cx="17291.55" cy="5122.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="17300.55" y="5125.8042">get_version() const : uint64_t</text><ellipse cx="17291.55" cy="5135.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="519" x="17300.55" y="5138.6089">set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void</text><ellipse cx="17291.55" cy="5148.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="566" x="17300.55" y="5151.4136">set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void</text><ellipse cx="17291.55" cy="5161.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="583" x="17300.55" y="5164.2183">set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void</text><ellipse cx="17291.55" cy="5173.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="17300.55" y="5177.0229">UndoRedo() : void</text><ellipse cx="17291.55" cy="5186.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="17300.55" y="5189.8276">~UndoRedo() : void</text></a><!--MD5=[67369f02025bab145a8745314f1215ba]
reverse link C_0000699772808699382057 to C_0001357046052919104842--><path d="M23626.28,5017.9031 C23612.12,5484.7731 23536.35,7983.2331 23528.25,8250.3231 " fill="none" id="C_0000699772808699382057&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="23626.68,5004.6831,23622.5036,5010.5617,23626.3237,5016.6778,23630.5001,5010.7992,23626.68,5004.6831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23546.55" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="36" x="23556.55" y="7730.02">count</text><!--MD5=[2ffeeed3545e7b157c0ce9e8e5104c4e]
reverse link C_0001531814603945772616 to C_0001578539238208480863--><path d="M11591.99,919.9431 C10719.53,1002.1831 9272.49,1178.7431 8830.55,1473.9531 C8713.98,1551.8231 8671.21,1732.0331 8659.35,1796.2231 " fill="none" id="C_0001531814603945772616&lt;-C_0001578539238208480863" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11605.12,918.7031,11598.7726,915.2811,11593.1725,919.824,11599.5199,923.2461,11605.12,918.7031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8833.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="8843.55" y="1487.02">signal_map</text><!--MD5=[72f037eff370e80d2cbcf7aa189b1853]
reverse link C_0001531814603945772616 to C_0000751300156436098886--><path d="M11592.56,969.8531 C10873.86,1083.6231 9712.26,1275.0631 8715.55,1473.9531 C8623.46,1492.3331 8579.63,1458.4331 8509.55,1520.9531 C8426.13,1595.3731 8408.99,1740.1031 8405.46,1796.3331 " fill="none" id="C_0001531814603945772616&lt;-C_0000751300156436098886" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11605.49,967.8031,11598.9394,964.7882,11593.637,969.6754,11600.1876,972.6903,11605.49,967.8031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8718.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="77" x="8728.55" y="1487.02">connections</text><!--MD5=[24eeaa45737871c41c3c567256e955dc]
reverse link C_0001531814603945772616 to C_0000699772808699382057--><path d="M12962.66,876.6331 C14847.01,916.4931 20077.83,1062.1031 21744.55,1473.9531 C22427.88,1642.8031 22525.06,1890.6631 23190.55,2119.9531 C23324.77,2166.1931 23410.52,2087.1931 23500.55,2196.9531 C23849.79,2622.7231 23673.1,4513.3431 23635.15,4879.4431 " fill="none" id="C_0001531814603945772616&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12949.57,876.3531,12955.4852,880.4775,12961.5674,876.6036,12955.6522,872.4792,12949.57,876.3531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23193.55" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="73" x="23203.55" y="1825.02">_lock_index</text><!--MD5=[28ef588d9e338ac6e5c120423ba24700]
reverse link C_0001531814603945772616 to C_0000051860595756965531--><path d="M11592.22,899.6831 C10725.92,959.4931 9303.2,1111.2531 8937.55,1473.9531 C8847.81,1562.9731 8860.04,1733.9231 8868.02,1796.1131 " fill="none" id="C_0001531814603945772616&lt;-C_0000051860595756965531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11605.25,898.7931,11598.9875,895.218,11593.2788,899.6237,11599.5413,903.1988,11605.25,898.7931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8940.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="115" x="8950.55" y="1487.02">change_receptors</text><!--MD5=[ed9dc36b2f21e467e266d4389da6816d]
link C_0001531814603945772616 to C_0000933379568804427881--><path d="M11605.33,897.5031 C10767.94,954.6631 9407.75,1103.3031 9085.55,1473.9531 C9019.15,1550.3431 9032.81,1675.9131 9049.9,1752.7931 " fill="none" id="C_0001531814603945772616-&gt;C_0000933379568804427881" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="9051.03,1757.7831,9052.9494,1748.1231,9049.9287,1752.9059,9045.1459,1749.8852,9051.03,1757.7831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9088.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="9098.55" y="1487.02">_rc</text><!--MD5=[465ae2a41eb5396ad803817584c492e2]
link C_0000933379568804427881 to C_0001531814603945772616--><path d="M9067.53,1757.7731 C9069.8,1679.9031 9086.12,1547.2631 9165.55,1473.9531 C9512.9,1153.3831 10794.3,988.4231 11600.5,914.5431 " fill="none" id="C_0000933379568804427881-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.53,914.0831,11596.2024,910.9216,11600.5509,914.5397,11596.9328,918.8882,11605.53,914.0831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9168.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="25" x="9178.55" y="1487.02">_ptr</text><!--MD5=[a69d5e275dd95acce759534bd27bf2c9]
reverse link C_0001531814603945772616 to C_0001682405743486361214--><path d="M11597.12,1345.0431 C11552.68,1399.5931 11514,1458.3131 11484.55,1520.9531 C11446.11,1602.7331 11517.89,4623.1131 11524.99,4917.8731 " fill="none" id="C_0001531814603945772616&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11605.49,1334.9031,11598.5865,1336.9867,11597.8546,1344.1606,11604.7581,1342.077,11605.49,1334.9031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11487.55" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="139" x="11497.55" y="1825.02">editor_section_folding</text><!--MD5=[e890cc5c6d0e6bb285e3e89ed5d4bd98]
link C_0001531814603945772616 to C_0001735438654351294549--><path d="M11605.23,1109.4931 C11320.78,1216.6531 10987.06,1346.7131 10689.55,1473.9531 C10573.87,1523.4231 10449.58,1580.6131 10336.9,1634.0431 " fill="none" id="C_0001531814603945772616-&gt;C_0001735438654351294549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="10332.22,1636.2631,10342.0661,1636.0293,10336.7396,1634.1245,10338.6443,1628.798,10332.22,1636.2631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10692.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="10702.55" y="1487.02">script_instance</text><!--MD5=[c5e4261359ae37cd97c8a7ca8ed3d9da]
reverse link C_0001531814603945772616 to C_0002025812040042972946--><path d="M11592.25,959.7131 C10833.32,1069.2231 9574.84,1261.0731 8499.55,1473.9531 C8409.98,1491.6831 8372.62,1466.1831 8299.55,1520.9531 C8229.27,1573.6331 8183.87,1664.7031 8158.02,1732.4331 " fill="none" id="C_0001531814603945772616&lt;-C_0002025812040042972946" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11605.34,957.8231,11598.8298,954.722,11593.4633,959.5387,11599.9735,962.6398,11605.34,957.8231" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8502.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="8512.55" y="1487.02">script</text><!--MD5=[c05e40dce802254568c704f572fe66ef]
reverse link C_0001531814603945772616 to C_0001299121424291583786--><path d="M12963.04,881.4031 C15463.52,947.2131 23974.79,1191.1231 24479.55,1473.9531 C24540.39,1508.0431 24588.78,1565.1531 24625.52,1623.2231 " fill="none" id="C_0001531814603945772616&lt;-C_0001299121424291583786" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12949.79,881.0531,12955.6825,885.2099,12961.7858,881.3695,12955.8934,877.2127,12949.79,881.0531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24501.55" y="1480.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="24511.55" y="1487.02">metadata</text><!--MD5=[67cf5364a880881dbfa9463a33b38abe]
reverse link C_0001531814603945772616 to C_0001858199404643284193--><path d="M12963.02,895.0431 C14734.38,976.6031 19609.18,1208.8231 23665.55,1473.9531 C23936.45,1491.6631 24058.7,1356.3131 24274.55,1520.9531 C24499.45,1692.4931 24283.17,1926.5331 24489.55,2119.9531 C24579.98,2204.7031 24683,2097.9631 24757.55,2196.9531 C24867.65,2343.1331 24830.11,8654.7131 24701.55,8784.9531 C24523.77,8965.0631 16286.66,9006.7931 14982.63,9012.2831 " fill="none" id="C_0001531814603945772616&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12949.75,894.4331,12955.559,898.7058,12961.7372,894.987,12955.9282,890.7143,12949.75,894.4331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24824.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="24834.55" y="4946.52">_class_name</text><!--MD5=[9f9c127cde67f8af23da46dde2ce4ce8]
link C_0001531814603945772616 to C_0001858199404643284193--><path d="M12949.61,878.1431 C14805.18,921.4431 20155.28,1074.1831 24583.55,1473.9531 C24743.38,1488.3831 24828.68,1406.8831 24941.55,1520.9531 C25035.54,1615.9331 24977.55,1685.8231 24977.55,1819.4531 C24977.55,1819.4531 24977.55,1819.4531 24977.55,8275.4531 C24977.55,8520.7131 24954.17,8628.1731 24765.55,8784.9531 C24688.66,8848.8631 24644.88,8820.5231 24545.55,8831.9531 C23562.26,8945.0631 16230.41,9002.7031 14988.14,9011.7031 " fill="none" id="C_0001531814603945772616-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14982.71,9011.7331,14991.7327,9015.6816,14987.7099,9011.7046,14991.687,9007.6818,14982.71,9011.7331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24980.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="64" x="24990.55" y="4946.52">_class_ptr</text><!--MD5=[d327e113621300c939a9250d421ffcd5]
reverse link C_0001531814603945772616 to C_0001357046052919104842--><path d="M12962.63,872.0931 C14748.68,900.2131 19511.74,1021.2331 20997.55,1520.9531 C21462.49,1677.3231 21457.74,1969.2731 21924.55,2119.9531 C22004.75,2145.8431 23381.1,2136.2431 23439.55,2196.9531 C23492.44,2251.8831 23508.96,7610.7131 23510.55,7686.9531 C23515.15,7906.1731 23524.03,8171.3831 23526.75,8250.2631 " fill="none" id="C_0001531814603945772616&lt;-C_0001357046052919104842" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12949.57,871.8931,12955.5078,875.9849,12961.5686,872.0777,12955.6308,867.9859,12949.57,871.8931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23246.55" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="150" x="23256.55" y="2163.02">instance_binding_count</text><!--MD5=[9f6312e8f49fb01007aa82352e3e18a3]
reverse link C_0001531814603945772616 to C_0000104564426296396960--><path d="M12952.72,1404.6231 C12977.52,1441.8531 12999.45,1480.6731 13017.55,1520.9531 C13072.12,1642.3631 13108.48,2022.7331 13017.55,2119.9531 C12842.75,2306.8531 12043.35,2010.0531 11868.55,2196.9531 C11816.47,2252.6431 11816.04,7631.6631 11868.55,7686.9531 C11913.15,7733.9031 12387.77,7701.1031 12450.55,7716.9531 C12580.86,7749.8431 12714.1,7797.6031 12841.84,7851.5131 " fill="none" id="C_0001531814603945772616&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12949.68,1400.0831,12951.3672,1409.7864,12952.4634,1404.2368,12958.013,1405.333,12949.68,1400.0831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12978.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12985.55" y="2163.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M12954.86,888.8531 C14883.4,962.4231 20379.31,1191.4831 22159.55,1473.9531 C22569.19,1538.9531 23035.79,1674.0431 23294.96,1754.7031 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12949.57,888.6431,12958.4149,892.9754,12954.5665,888.8292,12958.7127,884.9809,12949.57,888.6431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="22238.55" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="22245.55" y="1487.02">«friend»</text><!--MD5=[a1d7a68971fac74740bd2ff8f508d74d]
reverse link C_0001531814603945772616 to C_0001778859257025660860--><path d="M12969.63,886.0331 C14931.83,951.8131 20505.55,1161.5131 22306.55,1473.9531 C22661.45,1535.5231 23061.15,1664.5131 23294.96,1746.2831 " fill="none" id="C_0001531814603945772616&lt;-C_0001778859257025660860-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.32,893.0231,12949.56,885.3631,12969.79,879.0331,12969.32,893.0231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bfb0bd8a69f4f74c042f91302129fecd]
reverse link C_0001531814603945772616 to C_0000132048052014479231--><path d="M11600.27,982.4931 C11311.94,1069.0531 11000.52,1218.0631 10817.55,1473.9531 C10752.25,1565.2731 10769.99,1707.2231 10784.36,1777.3331 " fill="none" id="C_0001531814603945772616&lt;-C_0000132048052014479231" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="11605.37,980.9631,11595.5985,979.7313,11600.5828,982.4064,11597.9077,987.3908,11605.37,980.9631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="10823.55" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="10830.55" y="1487.02">«friend»</text><!--MD5=[b349530a27aaee85f524a15949be3331]
link C_0000132048052014479231 to C_0001531814603945772616--><path d="M10800.8,1777.2931 C10813.39,1706.1631 10848.08,1561.5331 10931.55,1473.9531 C11112.62,1283.9731 11363.91,1148.4231 11600.38,1054.1331 " fill="none" id="C_0000132048052014479231-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.26,1052.1931,11595.4192,1051.7956,11600.6127,1054.0377,11598.3706,1059.2313,11605.26,1052.1931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="10937.55" cy="1483.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="10944.55" y="1487.02">obj</text><!--MD5=[ffb696d15bc654aa90b9653d940ba57b]
link C_0000219886141561409828 to C_0001531814603945772616--><path d="M12549.57,166.4831 C12539.45,192.3731 12525.81,227.2231 12510.02,267.5931 " fill="none" id="C_0000219886141561409828-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12507.3872" cy="274.344" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="12510.3044" x2="12504.47" y1="266.8948" y2="281.7931"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="12514.8364" x2="12499.938" y1="277.2612" y2="271.4268"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M24724.19,205.1531 C24720.48,222.9331 24713.1,239.8631 24699.55,251.9531 C24259.2,644.9031 15507.91,811.6231 12964.91,851.8931 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12957.579" cy="852.0036" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="12965.5779" x2="12949.58" y1="851.8741" y2="852.1331"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="12957.7085" x2="12957.4494" y1="860.0026" y2="844.0047"/><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M24747.58,205.1831 C24747.76,222.5331 24743.62,239.2831 24731.55,251.9531 C24322.77,681.2531 15493.49,822.5131 12954.72,854.3331 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.61,854.4031,12958.6551,858.3,12954.6097,854.346,12958.5637,850.3005,12949.61,854.4031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="24746.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="24753.55" y="248.02">source</text><!--MD5=[a29fa1eddeab9e55f3e1f73ad0d0fc92]
link C_0001267214583673362755 to C_0001531814603945772616--><path d="M24539.94,128.8131 C23240.11,206.5231 15334.98,679.1531 12954.97,821.4531 " fill="none" id="C_0001267214583673362755-&gt;C_0001531814603945772616-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.75,821.7631,12958.974,825.2153,12954.741,821.4628,12958.4935,817.2298,12949.75,821.7631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="22640.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="22647.55" y="248.02">target</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M24915.42,203.0131 C24917.14,203.6731 24918.85,204.3131 24920.55,204.9531 C25027.02,244.8931 25090.76,195.4331 25164.55,281.9531 C25333.66,480.2331 25250.55,601.3531 25250.55,861.9531 C25250.55,861.9531 25250.55,861.9531 25250.55,8275.4531 C25250.55,8523.5931 25386.48,8662.1331 25205.55,8831.9531 C25011.24,9014.3431 16324.06,9014.2531 14982.69,9013.1431 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24903.15,198.2831,24907.3114,204.1724,24914.3481,202.5962,24910.1867,196.7069,24903.15,198.2831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25256.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25263.55" y="2163.02">signal</text><!--MD5=[cefd988d71eccb1a821b8696bd59678c]
reverse link C_0001267214583673362755 to C_0001858199404643284193--><path d="M24796.62,216.5531 C24799.9,222.6431 24802.91,228.7931 24805.55,234.9531 C25154.05,1046.8431 25076.77,1314.7831 25125.55,2196.9531 C25145.76,2562.4031 25310.49,8505.1331 25074.55,8784.9531 C24904.99,8986.0531 16316.37,9010.1531 14982.76,9012.6831 " fill="none" id="C_0001267214583673362755&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24790.03,204.9731,24789.5201,212.1662,24795.9638,215.4034,24796.4736,208.2103,24790.03,204.9731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25129.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="25136.55" y="2163.02">method</text><!--MD5=[823a143a71700de2dee8f67b9b5676a1]
link C_0000250357724807605097 to C_0001531814603945772616--><path d="M11919.07,160.0831 C11932.62,186.6031 11951.78,224.1231 11974.28,268.1731 " fill="none" id="C_0000250357724807605097-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11977.5584" cy="274.6" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="11973.9169" x2="11981.2" y1="267.4769" y2="281.7231"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="11984.6816" x2="11970.4353" y1="270.9584" y2="278.2416"/><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M12276.03,166.6231 C12275.44,187.6331 12274.84,212.5031 12274.55,234.9531 C12274.46,242.5031 12274.53,244.3931 12274.55,251.9531 C12274.57,260.0631 12274.59,268.2431 12274.62,276.4631 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12274.63,281.5831,12278.6043,272.5717,12274.6157,276.5831,12270.6043,272.5946,12274.63,281.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="12277.55" y="241.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="61" x="12287.55" y="248.02">instances</text><!--MD5=[fed6bc410413bdf90b9aebd1d2474545]
link C_0002064336919270342687 to C_0001531814603945772616--><path d="M12318.14,166.6031 C12332.24,186.5031 12346.33,210.5631 12353.55,234.9531 C12355.7,242.1931 12354.02,244.4131 12353.55,251.9531 C12353.05,260.1131 12352.5,268.3331 12351.92,276.5931 " fill="none" id="C_0002064336919270342687-&gt;C_0001531814603945772616-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12351.56,281.7431,12356.1928,273.0519,12351.9173,276.7559,12348.2133,272.4803,12351.56,281.7431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="12358.55" y="241.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="105" x="12368.55" y="248.02">instance_checks</text><!--MD5=[8b696ada1a164533cee31d9d01e1d4f0]
reverse link C_0002064336919270342687 to C_0001531814603945772616--><path d="M12233.42,170.7831 C12220.18,189.8031 12207.36,212.2131 12200.55,234.9531 C12198.38,242.1931 12200.08,244.4131 12200.55,251.9531 C12201.17,261.8031 12201.85,271.7431 12202.57,281.7531 " fill="none" id="C_0002064336919270342687&lt;-C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12236.43,166.5231,12227.9706,171.5668,12233.5455,170.6072,12234.5051,176.182,12236.43,166.5231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12206.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12213.55" y="248.02">«friend»</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13942.32,8784.9931 C13961.56,8801.9731 13981.64,8817.7431 14002.55,8831.9531 C14103.4,8900.4731 14425.6,8957.7331 14631.08,8988.5231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14636.21,8989.2931,14627.9044,8984,14631.2655,8988.55,14626.7155,8991.9111,14636.21,8989.2931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14008.55" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="47" x="14015.55" y="8828.02">classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M14038.8,8785.0131 C14060.83,8801.8931 14083.43,8817.6531 14106.55,8831.9531 C14267.56,8931.5531 14481.67,8976.5831 14631.13,8996.7931 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14636.41,8997.5031,14628.0137,8992.3551,14631.4534,8996.846,14626.9624,9000.2857,14636.41,8997.5031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14112.55" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="170" x="14119.55" y="8828.02">resource_base_extensions</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M14253.83,8784.9831 C14280.03,8801.4131 14306.32,8817.1431 14332.55,8831.9531 C14426.6,8885.0631 14539.28,8928.6431 14631.51,8959.7231 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-2" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14636.44,8961.3831,14629.1908,8954.7161,14631.7023,8959.7849,14626.6336,8962.2964,14636.44,8961.3831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14338.55" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="103" x="14345.55" y="8828.02">compat_classes</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13609.34,8785.1031 C13618.65,8801.6931 13629.64,8817.3931 13642.55,8831.9531 C13770.1,8975.7731 14336.95,9006.0131 14631.09,9011.9031 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-3" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14636.26,9012.0031,14627.3418,9007.824,14631.261,9011.9031,14627.1818,9015.8224,14636.26,9012.0031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13648.55" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="92" x="13655.55" y="8828.02">default_values</text><!--MD5=[1259c5a3a05eb23b6b415165781cedc4]
link C_0000104564426296396960 to C_0001858199404643284193--><path d="M13774.65,8785.1531 C13788.62,8802.0231 13803.88,8817.7431 13820.55,8831.9531 C13940.09,8933.8231 14380.24,8981.9131 14631.21,9001.4931 " fill="none" id="C_0000104564426296396960-&gt;C_0001858199404643284193-4" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14636.37,9001.8931,14627.7053,8997.2108,14631.3849,9001.5075,14627.0883,9005.187,14636.37,9001.8931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13826.55" cy="8824.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="13833.55" y="8828.02">default_values_cached</text><!--MD5=[f728ac2c311f9c9f533bae5aa126394c]
reverse link C_0001778859257025660860 to C_0001858199404643284193--><path d="M23606.19,1977.0131 C23670.27,2068.7031 23739.84,2171.6231 23747.55,2196.9531 C23836.38,2488.7331 23764.01,7382.3931 23747.55,7686.9531 C23721.07,8177.0931 23989.59,8452.4031 23628.55,8784.9531 C23463.47,8937.0131 16202.87,9001.7931 14982.71,9011.6131 " fill="none" id="C_0001778859257025660860&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="23598.6,1966.1831,23598.7625,1973.3924,23605.4798,1976.0151,23605.3172,1968.8059,23598.6,1966.1831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23748.55" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="23758.55" y="7730.02">_class_name</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M23549.71,1978.7531 C23565.72,2032.4031 23581.18,2093.1731 23589.55,2149.9531 C23749.2,3233.1331 23657.43,4578.3331 23633.67,4879.3431 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="23545.85,1965.9931,23543.7551,1972.8932,23549.3187,1977.4809,23551.4136,1970.5807,23545.85,1965.9931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23592.55" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="53" x="23602.55" y="2163.02">refcount</text><!--MD5=[d895a2b3bcb124753bfb70e9baa17b4b]
reverse link C_0001778859257025660860 to C_0000699772808699382057--><path d="M23491.51,1979.4031 C23490.3,2033.4831 23489.15,2094.3631 23488.55,2149.9531 C23488.47,2157.5131 23487.12,2159.5331 23488.55,2166.9531 C23491.27,2181.0531 23497.51,2182.9231 23500.55,2196.9531 C23728.73,3249.1131 23654.02,4579.4331 23633.17,4879.1431 " fill="none" id="C_0001778859257025660860&lt;-C_0000699772808699382057-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="23491.8,1966.1731,23487.6626,1972.0792,23491.5232,1978.1699,23495.6605,1972.2638,23491.8,1966.1731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23491.55" y="2156.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="79" x="23501.55" y="2163.02">refcount_init</text><!--MD5=[0a2b60ba7d2c96e1d65f8bc42ff8af0b]
reverse link C_0001778859257025660860 to C_0000104564426296396960--><path d="M23289.64,1872.6531 C23039.43,1934.2531 22604.09,2039.4231 22228.55,2119.9531 C22184.51,2129.3931 21859.44,2162.3931 21830.55,2196.9531 C21732.73,2313.9631 21867.78,7579.4931 21759.55,7686.9531 C21708.44,7737.7031 16644.32,7703.5431 16573.55,7716.9531 C16552.95,7720.8531 16550.13,7729.9631 16529.55,7733.9531 C16303.41,7777.8131 14677.83,7699.9131 14456.55,7763.9531 C14439.45,7768.9031 14422.36,7774.3031 14405.29,7780.1031 " fill="none" id="C_0001778859257025660860&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="23294.78,1871.3931,23285.0833,1869.6685,23289.9259,1872.5924,23287.0021,1877.435,23294.78,1871.3931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="21836.55" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="21843.55" y="4946.52">«friend»</text><!--MD5=[b642425c83424b61917059e5da81b445]
reverse link C_0000218299049716973303 to C_0001858199404643284193--><path d="M20031.59,6035.8831 C19965.1,6938.9531 19708.41,8169.1231 18850.55,8784.9531 C18691.21,8899.3431 15734.93,8987.6531 14982.58,9008.3431 " fill="none" id="C_0000218299049716973303&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="20032.55,6022.6131,20028.1255,6028.3074,20031.68,6034.5815,20036.1045,6028.8873,20032.55,6022.6131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="19637.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="19647.55" y="8279.02">_class_name</text><!--MD5=[b604a94a8074bade127c96b8a1da6977]
reverse link C_0000218299049716973303 to C_0000104564426296396960--><path d="M20036.48,6027.7031 C19975.84,6616.5031 19790.4,7301.0531 19291.55,7686.9531 C19257.91,7712.9731 16271.66,7710.9831 16229.55,7716.9531 C16201.69,7720.9031 16196.4,7729.9031 16168.55,7733.9531 C15977.65,7761.7431 14617.43,7708.8531 14432.55,7763.9531 C14423.41,7766.6831 14414.26,7769.5431 14405.13,7772.5231 " fill="none" id="C_0000218299049716973303&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="20037.01,6022.5131,20032.1051,6031.0538,20036.4955,6027.4866,20040.0627,6031.8769,20037.01,6022.5131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16235.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16242.55" y="7730.02">«friend»</text><!--MD5=[70070708faa8146b449b4995936967c8]
reverse link C_0001531814603945772616 to C_0000218299049716973303--><path d="M12970.11,908.4231 C14294.31,999.0531 17136.74,1222.0731 18071.55,1520.9531 C18662.01,1709.7331 18909.39,1708.8731 19291.55,2196.9531 C19662.5,2670.7131 19848.19,3315.7031 19940.94,3861.3231 " fill="none" id="C_0001531814603945772616&lt;-C_0000218299049716973303" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.24,915.3831,12949.76,907.0331,12970.19,901.4131,12969.24,915.3831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2cf028d42d6a2db252d6d720b88d2c11]
link C_0001649884439586022807 to C_0001531814603945772616--><path d="M5605.65,4789.6531 C5555.83,4314.6331 5476.24,2846.0931 6294.55,2196.9531 C6327.4,2170.8931 9271.63,2167.7631 9313.55,2166.9531 C9494.04,2163.4431 10802.67,2239.9231 10937.55,2119.9531 C11138.61,1941.1331 10869.93,1740.4631 11025.55,1520.9531 C11166.04,1322.7831 11384.99,1179.6531 11600.76,1078.6131 " fill="none" id="C_0001649884439586022807-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.53,1076.3931,11595.6826,1076.5642,11600.9969,1078.5029,11599.0582,1083.8171,11605.53,1076.3931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11028.55" y="1818.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="11038.55" y="1825.02">owner</text><!--MD5=[9db7a3eb346815fb65d8e4265bbdc5b6]
reverse link C_0001735438654351294549 to C_0001649884439586022807--><path d="M9643.06,2014.0731 C9525.99,2075.3331 9389.31,2135.3431 9256.55,2166.9531 C9176.51,2186.0131 6359.01,2145.8131 6294.55,2196.9531 C5476.3,2846.1731 5555.85,4314.6531 5605.65,4789.6531 " fill="none" id="C_0001735438654351294549&lt;-C_0001649884439586022807" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9639.98,2007.7931,9660.93,2004.6431,9646.52,2020.1731,9639.98,2007.7931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2191a2c55081528738a9601d975d7e81]
reverse link C_0000970940027123558604 to C_0001858199404643284193--><path d="M21044.88,5216.3031 C21095.13,5727.0031 21148.3,6849.9431 20773.55,7686.9531 C20499.64,8298.7631 20348.63,8505.0231 19739.55,8784.9531 C19300.41,8986.7831 15805.85,9009.9531 14982.75,9012.6131 " fill="none" id="C_0000970940027123558604&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="21043.58,5203.2431,21040.1934,5209.6095,21044.7675,5215.1842,21048.1541,5208.8178,21043.58,5203.2431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="20740.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="20750.55" y="8279.02">_class_name</text><!--MD5=[d541019a02b5abc817eac1d3ff5a0498]
reverse link C_0000970940027123558604 to C_0000104564426296396960--><path d="M21088.89,5207.9131 C21232.6,5762.4131 21467.04,7046.6731 20773.55,7686.9531 C20728.39,7728.6531 16408.1,7706.3331 16347.55,7716.9531 C16325.26,7720.8631 16321.83,7729.9431 16299.55,7733.9531 C16095.37,7770.7331 14631.42,7704.8131 14432.55,7763.9531 C14423.4,7766.6731 14414.26,7769.5331 14405.12,7772.5131 " fill="none" id="C_0000970940027123558604&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="21087.63,5203.0431,21086.0197,5212.7594,21088.8863,5207.8827,21093.763,5210.7494,21087.63,5203.0431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16353.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16360.55" y="7730.02">«friend»</text><!--MD5=[af31877db6ec92759d70e67f8199ce9a]
reverse link C_0001531814603945772616 to C_0000970940027123558604--><path d="M12970.04,886.5631 C14151.18,935.8831 16625.91,1086.1231 18669.55,1520.9531 C19570.81,1712.7131 19751.15,1922.4631 20639.55,2166.9531 C20698.4,2183.1431 20733.38,2151.0131 20773.55,2196.9531 C21392.48,2904.7231 21201.05,4144.0231 21078.97,4680.8131 " fill="none" id="C_0001531814603945772616&lt;-C_0000970940027123558604" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.42,893.5431,12949.73,885.7131,12970,879.5531,12969.42,893.5431" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f972d27a027a57bd8d2a6ea69d3db7f2]
reverse link C_0001823345232236209470 to C_0001858199404643284193--><path d="M25213.9,172.7831 C25253.12,295.0031 25341.55,599.6931 25341.55,861.9531 C25341.55,861.9531 25341.55,861.9531 25341.55,8275.4531 C25341.55,8527.1531 25464.11,8724.4031 25236.55,8831.9531 C24994.9,8946.1631 16322.5,9003.7031 14982.64,9011.9231 " fill="none" id="C_0001823345232236209470&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25209.82,160.1531,25207.8599,167.0927,25213.5117,171.5711,25215.4719,164.6316,25209.82,160.1531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25347.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25354.55" y="2163.02">name</text><!--MD5=[d03f40f4e0550f14d97c47cc13da68a0]
link C_0001823345232236209470 to C_0001531814603945772616--><path d="M25098.27,159.9931 C25020.62,191.4231 24908.2,232.2331 24805.55,251.9531 C22504.51,694.0131 15218.92,823.9231 12955.3,854.0931 " fill="none" id="C_0001823345232236209470-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.92,854.1631,12958.9762,858.0342,12954.9195,854.0917,12958.8619,850.035,12949.92,854.1631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="24876.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="18" x="24883.55" y="248.02">ptr</text><!--MD5=[61db9f2a674de4dd20c1e8d6466365f6]
reverse link C_0001485048025194488343 to C_0001858199404643284193--><path d="M18998.99,5190.7831 C19076.49,5926.8431 19185.44,8091.8431 17897.55,8784.9531 C17640.45,8923.3131 15595.81,8991.0431 14982.72,9008.3731 " fill="none" id="C_0001485048025194488343&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="18997.6,5177.6531,18994.263,5184.0456,18998.8803,5189.5846,19002.2173,5183.1921,18997.6,5177.6531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="18748.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="18758.55" y="8279.02">_class_name</text><!--MD5=[f95868a4bcc46beaa6866e3b4ea59e8f]
link C_0001485048025194488343 to C_0001485048025194488343--><path d="M19002.39,4706.1531 C19086.91,4258.1831 19208.55,4336.7831 19208.55,4941.9531 C19208.55,5544.7531 19087.86,5625.1031 19003.38,5182.9831 " fill="none" id="C_0001485048025194488343-&gt;C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="19002.39,5177.7531,19000.1357,5187.3405,19003.321,5182.6657,19007.9958,5185.851,19002.39,5177.7531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="19216.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="19226.55" y="4946.52">singleton</text><!--MD5=[7c58e4f37afb0d5a6a6c8a0d7e05a07b]
reverse link C_0001485048025194488343 to C_0000104564426296396960--><path d="M19039.78,5182.9031 C19185.58,5722.1831 19444.91,7033.8131 18744.55,7686.9531 C18717.67,7712.0231 16135.11,7713.1231 16098.55,7716.9531 C16060.24,7720.9631 16051.85,7729.7931 16013.55,7733.9531 C15838.88,7752.9231 14600.89,7713.6231 14432.55,7763.9531 C14423.41,7766.6831 14414.27,7769.5531 14405.13,7772.5531 " fill="none" id="C_0001485048025194488343&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="19038.39,5177.7731,19036.8673,5187.5036,19039.6899,5182.6012,19044.5922,5185.4238,19038.39,5177.7731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16104.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16111.55" y="7730.02">«friend»</text><!--MD5=[575bdde0c40cde995e5d193ed3ac9a95]
reverse link C_0001531814603945772616 to C_0001485048025194488343--><path d="M12969.81,898.9231 C14487.52,991.6831 18029.62,1301.4931 18744.55,2196.9531 C19338.93,2941.4131 19142.96,4189.9631 19027.03,4706.4031 " fill="none" id="C_0001531814603945772616&lt;-C_0001485048025194488343" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.36,905.9031,12949.83,897.7031,12970.21,891.9331,12969.36,905.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25580.77,172.8331 C25575.63,192.3231 25570.28,214.4931 25566.55,234.9531 C25516.28,510.7531 25497.55,581.6031 25497.55,861.9531 C25497.55,861.9531 25497.55,861.9531 25497.55,8275.4531 C25497.55,8541.9031 25533.2,8767.9431 25274.55,8831.9531 C24754.34,8960.7031 16304.01,9005.8731 14982.71,9012.1631 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25584.19,160.1531,25578.7646,164.9034,25581.0627,171.7385,25586.4882,166.9882,25584.19,160.1531" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25503.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="37" x="25510.55" y="2163.02">signal</text><!--MD5=[0041b05e6148a13b62ca40da023988b6]
reverse link C_0000115801560197752094 to C_0001858199404643284193--><path d="M25596.05,173.4331 C25594.98,297.0531 25592.55,604.5431 25592.55,861.9531 C25592.55,861.9531 25592.55,861.9531 25592.55,8275.4531 C25592.55,8503.9631 25677.37,8615.9531 25523.55,8784.9531 C25461.51,8853.1231 25413.03,8820.6531 25321.55,8831.9531 C24255.67,8963.6231 16264.45,9006.1731 14982.75,9012.1831 " fill="none" id="C_0000115801560197752094&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="25596.17,160.3131,25592.1174,166.2777,25596.0645,172.3127,25600.1171,166.3481,25596.17,160.3131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25598.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="50" x="25605.55" y="2163.02">method</text><!--MD5=[54ac8f63d86bc4e03834512bd61d98ef]
link C_0000115801560197752094 to C_0001531814603945772616--><path d="M25548.41,160.0331 C25526.2,177.0031 25498.58,194.9131 25470.55,204.9531 C25235.42,289.1931 25159.77,235.4831 24910.55,251.9531 C20347.17,553.5331 14847.14,768.1631 12955.15,837.7031 " fill="none" id="C_0000115801560197752094-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.95,837.8931,12959.0923,841.5563,12954.9466,837.7075,12958.7953,833.5618,12949.95,837.8931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25374.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="39" x="25381.55" y="248.02">target</text><!--MD5=[105b5b587ddf98014e1a550a5acdc50e]
reverse link C_0000066148521405667716 to C_0001858199404643284193--><path d="M11712.53,2130.2931 C11695.38,2151.2631 11679.9,2173.4631 11666.55,2196.9531 C11591.18,2329.5431 11691.26,7573.3031 11589.55,7686.9531 C11517.36,7767.6231 11300.98,7637.7131 11350.55,7733.9531 C11719.02,8449.2131 12073.51,8496.3331 12824.55,8784.9531 C13154.42,8911.7131 14216.61,8981.1231 14636.46,9004.1831 " fill="none" id="C_0000066148521405667716&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11721.08,2120.0931,11714.1588,2122.1174,11713.3654,2129.2847,11720.2866,2127.2604,11721.08,2120.0931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11353.55" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11363.55" y="7730.02">_class_name</text><!--MD5=[2dc6087e93f271bd3bd7602f5b86331c]
reverse link C_0000066148521405667716 to C_0001682405743486361214--><path d="M11642.73,2114.6831 C11637.99,2116.4531 11633.27,2118.2131 11628.55,2119.9531 C11582.62,2136.9031 11552.09,2110.9031 11522.55,2149.9531 C11434.14,2266.8631 11515.56,4656.8231 11524.73,4917.8731 " fill="none" id="C_0000066148521405667716&lt;-C_0001682405743486361214" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11655.3,2109.9331,11648.2733,2108.3126,11644.0749,2114.1755,11651.1016,2115.796,11655.3,2109.9331" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11528.55,2154.0195,11532.55,2158.0195,11528.55,2162.0195,11524.55,2158.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="108" x="11535.55" y="2163.02">custom_features</text><!--MD5=[b1cdeb5c1d2293693591756cb414570e]
link C_0000066148521405667716 to C_0000066148521405667716--><path d="M12899.84,1784.6931 C12921.91,1794.1731 12934.55,1806.0931 12934.55,1820.4531 C12934.55,1833.6931 12923.81,1844.8531 12904.84,1853.9431 " fill="none" id="C_0000066148521405667716-&gt;C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12899.84,1856.2131,12909.6886,1856.1444,12904.3948,1854.1506,12906.3886,1848.8567,12899.84,1856.2131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12945.55,1816.0195,12949.55,1820.0195,12945.55,1824.0195,12941.55,1820.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="12952.55" y="1825.02">singleton</text><!--MD5=[3549a9a1546b9f3f927ae4be5a497360]
reverse link C_0000066148521405667716 to C_0000104564426296396960--><path d="M11787.87,2124.2031 C11769.9,2147.0831 11753.91,2171.3231 11740.55,2196.9531 C11670.09,2332.2031 11635.16,7576.7331 11740.55,7686.9531 C11791.98,7740.7331 12337.23,7699.4631 12409.55,7716.9531 C12423.75,7720.3831 12615.03,7807.4131 12841.72,7911.6731 " fill="none" id="C_0000066148521405667716&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="11791.01,2120.2431,11782.2764,2124.7956,11787.897,2124.1558,11788.5367,2129.7764,11791.01,2120.2431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11746.55" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11753.55" y="4946.52">«friend»</text><!--MD5=[5f66742971e8c9e8cae80ea28ed781f8]
reverse link C_0001531814603945772616 to C_0000066148521405667716--><path d="M12277.55,1464.3131 C12277.55,1483.5031 12277.55,1502.4131 12277.55,1520.9031 " fill="none" id="C_0001531814603945772616&lt;-C_0000066148521405667716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12270.55,1464.2131,12277.55,1444.2131,12284.55,1464.2131,12270.55,1464.2131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[defcce9c8f425e144c84d1e88f84777b]
reverse link C_0001191393512042218074 to C_0001858199404643284193--><path d="M3711.75,5145.5631 C3613.21,5662.8931 3437.42,7037.3931 4185.55,7686.9531 C4228.58,7724.3131 6181.2,7703.4431 6236.55,7716.9531 C7266.92,7968.3631 7343.35,8520.9331 8370.55,8784.9531 C8992.05,8944.6931 13672.89,9001.2531 14636.43,9011.2631 " fill="none" id="C_0001191393512042218074&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3714.21,5132.7531,3709.1485,5137.8894,3711.9429,5144.537,3717.0044,5139.4008,3714.21,5132.7531" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8373.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="8383.55" y="8279.02">_class_name</text><!--MD5=[b77e23c3a90867c3de8e35bacb429255]
link C_0001191393512042218074 to C_0001191393512042218074--><path d="M3794.17,4751.1631 C3916.16,4253.6631 4103.05,4317.2631 4103.05,4941.9531 C4103.05,5564.5131 3917.43,5629.8031 3795.42,5137.8331 " fill="none" id="C_0001191393512042218074-&gt;C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3794.17,5132.7431,3792.4454,5142.4398,3795.3692,5137.5972,3800.2119,5140.521,3794.17,5132.7431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4114.05,4937.5195,4118.05,4941.5195,4114.05,4945.5195,4110.05,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="4121.05" y="4946.52">singleton</text><!--MD5=[f80c7ee04ef556cee553628e7a65d3d1]
reverse link C_0001191393512042218074 to C_0000104564426296396960--><path d="M3712.9,5137.9731 C3613.73,5650.0431 3430.06,7038.0031 4185.55,7686.9531 C4224.97,7720.8131 11617.16,7704.2931 11667.55,7716.9531 C11683.17,7720.8731 11684.6,7727.9631 11699.55,7733.9531 C12066.19,7880.7631 12487.23,8003.6831 12841.78,8094.9431 " fill="none" id="C_0001191393512042218074&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3713.92,5132.7331,3708.2958,5140.8182,3712.9779,5137.6436,3716.1525,5142.3256,3713.92,5132.7331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11705.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11712.55" y="7730.02">«friend»</text><!--MD5=[ab8fd2992e044c54f6cd905a344680fd]
reverse link C_0001531814603945772616 to C_0001191393512042218074--><path d="M11585.31,947.2731 C10397.77,1093.2731 8086.89,1392.0731 7961.55,1520.9531 C7759.85,1728.3531 8097.55,1974.4931 7881.55,2166.9531 C7804.9,2235.2531 4263.3,2129.8931 4185.55,2196.9531 C3428.8,2849.6831 3615.51,4243.9831 3714.07,4751.3431 " fill="none" id="C_0001531814603945772616&lt;-C_0001191393512042218074" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.62,940.3031,11605.32,944.8131,11586.33,954.2031,11584.62,940.3031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0f51a88240f615cca582e7a0121c3766]
reverse link C_0001197720528033242618 to C_0001858199404643284193--><path d="M4480.8,5120.2031 C4383.85,5616.9131 4190.17,7028.9431 4953.55,7686.9531 C5024.65,7748.2331 8242.16,7691.6631 8332.55,7716.9531 C9003.97,7904.7831 8843.1,8504.8431 9481.55,8784.9531 C9962.3,8995.8731 13773.51,9012.0231 14636.32,9012.9631 " fill="none" id="C_0001197720528033242618&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4483.36,5107.2031,4478.2753,5112.3164,4481.0396,5118.9766,4486.1243,5113.8634,4483.36,5107.2031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9484.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="9494.55" y="8279.02">_class_name</text><!--MD5=[ee3ac7328ce85f190ffde4073aa3ab2d]
link C_0001197720528033242618 to C_0001197720528033242618--><path d="M4552.43,4776.7931 C4675.58,4251.6731 4871.05,4306.7331 4871.05,4941.9531 C4871.05,5575.1531 4676.82,5631.8731 4553.6,5112.1031 " fill="none" id="C_0001197720528033242618-&gt;C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="4552.43,5107.1131,4550.5914,5116.7888,4553.572,5111.981,4558.3799,5114.9616,4552.43,5107.1131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4882.05,4937.5195,4886.05,4941.5195,4882.05,4945.5195,4878.05,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="4889.05" y="4946.52">singleton</text><!--MD5=[d5273b688c2cbc8d25291921feeb727a]
reverse link C_0001197720528033242618 to C_0000104564426296396960--><path d="M4482.23,5112.3731 C4385.45,5602.2031 4184.56,7027.0931 4953.55,7686.9531 C4989.5,7717.7931 11727.62,7705.4031 11773.55,7716.9531 C11789.17,7720.8831 11790.65,7727.8531 11805.55,7733.9531 C12137.59,7869.8231 12516.35,7987.7731 12841.9,8078.4431 " fill="none" id="C_0001197720528033242618&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4483.22,5107.3631,4477.5462,5115.4134,4482.2477,5112.2677,4485.3934,5116.9692,4483.22,5107.3631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11811.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11818.55" y="7730.02">«friend»</text><!--MD5=[30e625aae1c06fb81ca2c0a65c06b825]
reverse link C_0001531814603945772616 to C_0001197720528033242618--><path d="M11585.17,923.1431 C10794.87,1005.8631 9571.84,1185.1231 9266.55,1520.9531 C9086.19,1719.3631 9391.75,1938.2631 9194.55,2119.9531 C9092.99,2213.5331 8090.61,2163.6531 7952.55,2166.9531 C7910.91,2167.9531 4985.09,2169.7431 4953.55,2196.9531 C4183.78,2861.2331 4387.49,4292.2531 4483.39,4776.7431 " fill="none" id="C_0001531814603945772616&lt;-C_0001197720528033242618" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.6,916.1631,11605.22,921.0631,11586.05,930.0931,11584.6,916.1631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2f8780ed64ed38ffe1cf4ca2575b2709]
reverse link C_0001130773750498288283 to C_0001858199404643284193--><path d="M6575.34,5081.5831 C6478.3,5538.6731 6241.06,7007.6331 7020.55,7686.9531 C7071.74,7731.5631 9399.2,7698.5531 9464.55,7716.9531 C9993.51,7865.9031 9630.54,8479.8031 10087.55,8784.9531 C10280.25,8913.6131 13807.99,8992.7131 14636.44,9009.5631 " fill="none" id="C_0001130773750498288283&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6578.1,5068.6831,6572.9289,5073.709,6575.5793,5080.4154,6580.7504,5075.3895,6578.1,5068.6831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10090.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10100.55" y="8279.02">_class_name</text><!--MD5=[f88684864f83bcfca48b3287b5bf4bf4]
link C_0001130773750498288283 to C_0001130773750498288283--><path d="M6630.28,4815.2531 C6745.2,4249.3831 6937.55,4291.6231 6937.55,4941.9531 C6937.55,5590.3831 6746.32,5634.2631 6631.3,5073.6131 " fill="none" id="C_0001130773750498288283-&gt;C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="6630.28,5068.6531,6628.1604,5078.2712,6631.2798,5073.5521,6635.9989,5076.6715,6630.28,5068.6531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="6948.55,4937.5195,6952.55,4941.5195,6948.55,4945.5195,6944.55,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="6955.55" y="4946.52">singleton</text><!--MD5=[3e73bcbd9daf28c3d368d37c56cc0e9c]
reverse link C_0001130773750498288283 to C_0000104564426296396960--><path d="M6576.98,5073.3731 C6480.63,5521.1631 6234.15,7005.8131 7020.55,7686.9531 C7071.57,7731.1331 11814.12,7700.4331 11879.55,7716.9531 C11895.17,7720.8931 11896.7,7727.7331 11911.55,7733.9531 C12209.21,7858.6831 12546.21,7970.7831 12842.01,8060.0631 " fill="none" id="C_0001130773750498288283&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6578.04,5068.4731,6572.2271,5076.4236,6576.9826,5073.36,6580.0462,5078.1155,6578.04,5068.4731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11917.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11924.55" y="7730.02">«friend»</text><!--MD5=[c2fcb52a4859165f7fca92f209480c5e]
reverse link C_0001531814603945772616 to C_0001130773750498288283--><path d="M11587.88,1147.5631 C11426.42,1243.9931 11270.3,1367.3131 11162.55,1520.9531 C10993.55,1761.9531 11278.18,2032.0631 11016.55,2166.9531 C10917.89,2217.8231 7104.41,2124.2231 7020.55,2196.9531 C6231.94,2880.9231 6482.45,4372.9731 6577.99,4815.0931 " fill="none" id="C_0001531814603945772616&lt;-C_0001130773750498288283" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.77,1141.2731,11605.55,1137.1331,11591.88,1153.3231,11584.77,1141.2731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8c3000aebde2149cc2be64412041baff]
reverse link C_0000790752023609648644 to C_0001858199404643284193--><path d="M1065.32,6087.0031 C1131.84,6610.9531 1278.53,7218.1131 1592.55,7686.9531 C2076.58,8409.6231 2383.6,8521.5531 3212.55,8784.9531 C3781.08,8965.6031 13235.15,9007.1731 14636.51,9012.3531 " fill="none" id="C_0000790752023609648644&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1063.66,6073.8631,1060.443,6080.3169,1065.163,6085.7686,1068.38,6079.3149,1063.66,6073.8631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3215.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="3225.55" y="8279.02">_class_name</text><!--MD5=[ef5671d32f6987d56ec842457947c9ac]
link C_0000790752023609648644 to C_0000790752023609648644--><path d="M1475.6,4609.0931 C1497.61,4692.4431 1510.55,4803.3931 1510.55,4941.9531 C1510.55,5077.8031 1498.11,5187.1231 1476.88,5269.9031 " fill="none" id="C_0000790752023609648644-&gt;C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1475.6,5274.8131,1481.733,5267.1069,1476.8563,5269.9735,1473.9897,5265.0968,1475.6,5274.8131" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1521.55,4937.5195,1525.55,4941.5195,1521.55,4945.5195,1517.55,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="1528.55" y="4946.52">singleton</text><!--MD5=[5d43d9f033ddff753a837836cd050d9b]
reverse link C_0000790752023609648644 to C_0000104564426296396960--><path d="M948.51,6078.7231 C978.22,6652.1431 1127.22,7305.4031 1592.55,7686.9531 C1696.95,7772.5531 11178.4,7748.8031 11312.55,7763.9531 C11828.1,7822.1731 12397.36,7946.9331 12841.9,8058.4231 " fill="none" id="C_0000790752023609648644&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="948.26,6073.6731,944.7275,6082.8667,948.5168,6078.6665,952.717,6082.4558,948.26,6073.6731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3035.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="3042.55" y="7730.02">«friend»</text><!--MD5=[26a39b7fc31ced5e0167cdc73077bc9d]
reverse link C_0001531814603945772616 to C_0000790752023609648644--><path d="M11585.43,965.4631 C10760.39,1085.3031 9339.57,1288.0131 8117.55,1443.9531 C8002.6,1458.6231 7968.99,1438.8531 7858.55,1473.9531 C7817.04,1487.1431 7797.65,1485.3531 7772.55,1520.9531 C7617.26,1741.2731 7881.43,1943.6231 7677.55,2119.9531 C7421.84,2341.1131 1853.48,1981.9731 1592.55,2196.9531 C1126.99,2580.5331 978.43,3236.0831 949.02,3810.2431 " fill="none" id="C_0001531814603945772616&lt;-C_0000790752023609648644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.62,958.5031,11605.42,962.5531,11586.63,972.3631,11584.62,958.5031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a6755319c82a581eac8987a926ca1aa6]
reverse link C_0000897221634691489964 to C_0001858199404643284193--><path d="M2121.78,5292.6231 C2089.36,5884.9731 2120.41,7080.3431 2813.55,7686.9531 C2862.31,7729.6231 3040.43,7702.3431 3103.55,7716.9531 C4445.34,8027.5431 4669.7,8478.9731 6012.55,8784.9531 C6881.75,8983.0131 13478.71,9009.4431 14636.39,9012.5631 " fill="none" id="C_0000897221634691489964&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2122.51,5279.6131,2118.1865,5285.3844,2121.8509,5291.595,2126.1744,5285.8238,2122.51,5279.6131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6015.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6025.55" y="8279.02">_class_name</text><!--MD5=[588807cb7a44356f49494dcdc443a06c]
link C_0000897221634691489964 to C_0000897221634691489964--><path d="M2289.96,4604.2231 C2486.86,4275.1531 2731.55,4387.7231 2731.55,4941.9531 C2731.55,5493.7431 2489.01,5607.7631 2292.56,5283.9931 " fill="none" id="C_0000897221634691489964-&gt;C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2289.96,5279.6831,2291.1844,5289.4556,2292.543,5283.9643,2298.0343,5285.3228,2289.96,5279.6831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2739.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="2749.55" y="4946.52">singleton</text><!--MD5=[b2579420d2152b5e55fe92957e16071b]
reverse link C_0000897221634691489964 to C_0000104564426296396960--><path d="M2116.64,5285.0031 C2073.53,5883.2831 2085,7110.8031 2813.55,7686.9531 C2860.63,7724.1831 11397.34,7702.3431 11455.55,7716.9531 C11471.17,7720.8731 11472.53,7728.1631 11487.55,7733.9531 C11924.19,7902.2331 12431.33,8032.8931 12841.86,8123.4431 " fill="none" id="C_0000897221634691489964&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2117.02,5279.7431,2112.3624,5288.4211,2116.6485,5284.7293,2120.3403,5289.0154,2117.02,5279.7431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11493.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11500.55" y="7730.02">«friend»</text><!--MD5=[eb044c62a1c7a56ece172b94356c22f4]
reverse link C_0001531814603945772616 to C_0000897221634691489964--><path d="M11585.09,959.9831 C10360.41,1129.9331 7938.18,1466.6131 7916.55,1473.9531 C7876.41,1487.5731 7857.49,1485.9631 7833.55,1520.9531 C7669.72,1760.4031 7958.4,1976.4731 7739.55,2166.9531 C7687.94,2211.8731 2867.16,2154.4431 2813.55,2196.9531 C2083.62,2775.7531 2073.86,4008.3331 2117.17,4604.3531 " fill="none" id="C_0001531814603945772616&lt;-C_0000897221634691489964" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.5,952.9931,11605.27,957.1831,11586.43,966.8631,11584.5,952.9931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ff6a4cd457cb05befae3532e64a2ade2]
reverse link C_0000135188690773659020 to C_0001858199404643284193--><path d="M3026.5,5113.6231 C2914.49,5602.7931 2672.4,7017.5031 3425.55,7686.9531 C3479.81,7735.1731 5968.67,7697.3031 6038.55,7716.9531 C6077.88,7728.0131 6093.9,7730.6431 6117.55,7763.9531 C6385.7,8141.5231 5970.86,8487.2031 6325.55,8784.9531 C6490.62,8923.5231 13444.25,8999.2831 14636.49,9011.2631 " fill="none" id="C_0000135188690773659020&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3029.44,5100.8331,3024.1969,5105.7839,3026.7504,5112.5278,3031.9934,5107.577,3029.44,5100.8331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6328.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="6338.55" y="8279.02">_class_name</text><!--MD5=[b9e190a0b6f3b1ed5b4efd3465fe9397]
link C_0000135188690773659020 to C_0000135188690773659020--><path d="M3093.94,4783.1331 C3189.51,4251.2431 3342.55,4304.1831 3342.55,4941.9531 C3342.55,5577.6931 3190.48,5632.3231 3094.85,5105.8231 " fill="none" id="C_0000135188690773659020-&gt;C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3093.94,5100.7731,3091.5998,5110.3399,3094.8269,5105.6938,3099.4729,5108.9209,3093.94,5100.7731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3350.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="3360.55" y="4946.52">singleton</text><!--MD5=[690fea73cee7ce9a9e7a660e160b4514]
reverse link C_0000135188690773659020 to C_0000104564426296396960--><path d="M3028.16,5105.6031 C2916.36,5587.6431 2665.48,7016.6331 3425.55,7686.9531 C3467.93,7724.3231 11506.75,7703.1931 11561.55,7716.9531 C11577.17,7720.8731 11578.56,7728.0731 11593.55,7733.9531 C11995.06,7891.5531 12458.9,8018.6931 12841.77,8109.8731 " fill="none" id="C_0000135188690773659020&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3029.31,5100.6831,3023.382,5108.5481,3028.1815,5105.5541,3031.1755,5110.3537,3029.31,5100.6831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="11599.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="11606.55" y="7730.02">«friend»</text><!--MD5=[17445eda0668e3f315ac88fffdbd1807]
reverse link C_0001531814603945772616 to C_0000135188690773659020--><path d="M11585.46,919.7031 C10735.72,998.0331 9255.01,1166.7331 8017.55,1473.9531 C7957.52,1488.8531 7925.05,1472.5331 7886.55,1520.9531 C7796.6,1634.0931 7918.24,2070.5331 7810.55,2166.9531 C7719.81,2248.2031 3516.78,2116.2431 3425.55,2196.9531 C2663.93,2870.7731 2918.46,4306.4931 3029.4,4783.3331 " fill="none" id="C_0001531814603945772616&lt;-C_0000135188690773659020" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.86,912.7231,11605.42,917.8731,11586.14,926.6731,11584.86,912.7231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24274.46,5094.2931 C24213.04,5795.9431 23950.61,8703.7531 23808.55,8831.9531 C23638.39,8985.5131 16217.22,9009.6431 14982.74,9012.5931 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24275.61,5081.1131,24271.1045,5086.7434,24274.5687,5093.0679,24279.0743,5087.4376,24275.61,5081.1131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="24003.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="24013.55" y="8279.02">_class_name</text><!--MD5=[b16246fece6ea345d4e7230a252ecdad]
reverse link C_0001150621116588802549 to C_0001858199404643284193--><path d="M24338.51,5093.9931 C24519.48,5661.3531 25070.33,7688.5431 24105.55,8784.9531 C23948.87,8963.0031 16242.33,9006.3131 14982.78,9012.2031 " fill="none" id="C_0001150621116588802549&lt;-C_0001858199404643284193-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="24334.44,5081.2731,24332.4558,5088.2059,24338.092,5092.7039,24340.0763,5085.7712,24334.44,5081.2731" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24589.55,8270.0195,24593.55,8274.0195,24589.55,8278.0195,24585.55,8274.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="96" x="24596.55" y="8279.02">target_method</text><!--MD5=[6ec94f72a6ef3ec7ace433902892bd7e]
link C_0001150621116588802549 to C_0001531814603945772616--><path d="M24317.04,4802.6031 C24420.06,4276.9931 24706.18,2389.9231 23713.55,1520.9531 C23307.12,1165.1531 15351.37,940.0131 12954.91,880.0731 " fill="none" id="C_0001150621116588802549-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.65,879.9331,12958.5562,884.1377,12954.6487,880.0474,12958.7391,876.1398,12949.65,879.9331" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="24158.55,1816.0195,24162.55,1820.0195,24158.55,1824.0195,24154.55,1820.0195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="100" x="24165.55" y="1825.02">target_instance</text><!--MD5=[927cfeb52f41859ab2973f5dadce2f60]
reverse link C_0001150621116588802549 to C_0000104564426296396960--><path d="M24313.21,5086.1631 C24387.19,5550.6231 24547.65,7023.4031 23747.55,7686.9531 C23647.97,7769.5431 14556.71,7727.5631 14432.55,7763.9531 C14423.39,7766.6331 14414.24,7769.4631 14405.09,7772.4131 " fill="none" id="C_0001150621116588802549&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="24312.39,5081.0831,24309.8568,5090.6006,24313.1772,5086.0208,24317.757,5089.3412,24312.39,5081.0831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="23088.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="23095.55" y="7730.02">«friend»</text><!--MD5=[d6a6ec8d3380d1482b36a055e886b7ee]
reverse link C_0001778859257025660860 to C_0001150621116588802549--><path d="M23683.09,1980.4431 C23730.9,2030.0631 23777.49,2088.1331 23808.55,2149.9531 C24275.8,3079.8931 24297.84,4380.2931 24291.46,4802.6231 " fill="none" id="C_0001778859257025660860&lt;-C_0001150621116588802549" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="23677.93,1985.1831,23668.91,1966.0031,23687.92,1975.3731,23677.93,1985.1831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[98d31de51765da68085e856073ce4122]
reverse link C_0001186331261774827872 to C_0001858199404643284193--><path d="M13560.54,5196.3531 C13445.7,5743.0031 13267.45,7036.0631 13964.55,7686.9531 C14008.23,7727.7331 14444.4,7699.5031 14501.55,7716.9531 C14540.63,7728.8831 14559.29,7729.0631 14580.55,7763.9531 C14698.85,7958.0531 14565.38,8571.1531 14642.55,8784.9531 C14652.09,8811.3731 14665.71,8837.3831 14681.12,8861.8331 " fill="none" id="C_0001186331261774827872&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="13563.24,5183.5831,13558.0863,5188.6269,13560.7599,5195.324,13565.9136,5190.2803,13563.24,5183.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14645.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14655.55" y="8279.02">_class_name</text><!--MD5=[1dc07f46a8f623d4dfac70da7186de42]
reverse link C_0001186331261774827872 to C_0000104564426296396960--><path d="M13621.7,5188.6331 C13622.03,5730.3131 13622.81,7036.7631 13623.25,7763.7331 " fill="none" id="C_0001186331261774827872&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="13621.7,5183.4831,13617.7257,5192.4945,13621.7143,5188.4831,13625.7257,5192.4717,13621.7,5183.4831" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13628.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13635.55" y="7730.02">«friend»</text><!--MD5=[b77ea624b2b728023d518baa273d3067]
reverse link C_0001531814603945772616 to C_0001186331261774827872--><path d="M12964.28,1276.5531 C13039.67,1348.8731 13106.41,1430.4131 13154.55,1520.9531 C13725.73,2595.2331 13684.66,4116.6631 13643.21,4700.2731 " fill="none" id="C_0001531814603945772616&lt;-C_0001186331261774827872" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12959.33,1281.5131,12949.6,1262.6931,12968.95,1271.3331,12959.33,1281.5131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[64510270a9d4c68a897134b90e8a959c]
reverse link C_0001895218672297528471 to C_0001858199404643284193--><path d="M14117.32,5228.5531 C14009.2,5782.8031 13863.14,7009.2031 14500.55,7686.9531 C14552.52,7742.2031 14597.48,7690.4731 14668.55,7716.9531 C14706.84,7731.2231 14726.48,7728.9531 14747.55,7763.9531 C14775.41,7810.2331 14797.43,8539.7431 14805.85,8861.9531 " fill="none" id="C_0001895218672297528471&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14119.87,5215.5831,14114.7908,5220.7019,14117.5623,5227.3591,14122.6415,5222.2404,14119.87,5215.5831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14805.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14815.55" y="8279.02">_class_name</text><!--MD5=[d0af4a0fe845fc378a64240482e48309]
link C_0001895218672297528471 to C_0001895218672297528471--><path d="M14223.92,4668.2831 C14306.02,4263.2231 14418.05,4354.4431 14418.05,4941.9531 C14418.05,5527.0231 14306.95,5619.9231 14224.94,5220.6431 " fill="none" id="C_0001895218672297528471-&gt;C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="14223.92,5215.6231,14221.8004,5225.2412,14224.9198,5220.5221,14229.6389,5223.6415,14223.92,5215.6231" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="14429.05,4937.5195,14433.05,4941.5195,14429.05,4945.5195,14425.05,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="14436.05" y="4946.52">singleton</text><!--MD5=[20437a7e41890d7ee60ce7b7515fc40c]
reverse link C_0001895218672297528471 to C_0000104564426296396960--><path d="M14200.46,5220.9931 C14224.28,5725.3031 14235.86,6819.0131 13964.55,7686.9531 C13956.56,7712.5331 13947.29,7738.1931 13937.04,7763.7231 " fill="none" id="C_0001895218672297528471&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14200.22,5215.8231,14196.6626,5225.0071,14200.4633,5220.8172,14204.6531,5224.6179,14200.22,5215.8231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13958.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13965.55" y="7730.02">«friend»</text><!--MD5=[e168ed7c7ccb452307da64f4f0e17e44]
reverse link C_0001531814603945772616 to C_0001895218672297528471--><path d="M12966.82,1200.6831 C13340.57,1425.2231 13765.75,1759.6931 13964.55,2196.9531 C14344.2,3031.9431 14277.11,4157.3531 14219.75,4668.3131 " fill="none" id="C_0001531814603945772616&lt;-C_0001895218672297528471" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12963.2,1206.6731,12949.62,1190.4031,12970.38,1194.6531,12963.2,1206.6731" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0ede8bff03eb35b50071265c451248f5]
reverse link C_0000979065355535690103 to C_0001858199404643284193--><path d="M7285.49,5081.4531 C7185.65,5538.1431 6939.58,7005.9931 7716.55,7686.9531 C7766.63,7730.8431 10049.46,7698.8931 10113.55,7716.9531 C10152.88,7728.0331 10167.46,7731.7131 10192.55,7763.9531 C10483.25,8137.5131 10135.38,8477.8331 10495.55,8784.9531 C10655.66,8921.4731 13850.85,8993.8631 14636.3,9009.6331 " fill="none" id="C_0000979065355535690103&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7288.33,5068.5731,7283.132,5073.5712,7285.7464,5080.2917,7290.9444,5075.2936,7288.33,5068.5731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10498.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10508.55" y="8279.02">_class_name</text><!--MD5=[80721d2d59c4e03b4d092514cb916805]
link C_0000979065355535690103 to C_0000979065355535690103--><path d="M7340.29,4815.2531 C7450.15,4249.3831 7634.05,4291.6231 7634.05,4941.9531 C7634.05,5590.3831 7451.23,5634.2631 7341.25,5073.6131 " fill="none" id="C_0000979065355535690103-&gt;C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="7340.29,5068.6531,7338.0896,5078.253,7341.2486,5073.5604,7345.9412,5076.7193,7340.29,5068.6531" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7645.05,4937.5195,7649.05,4941.5195,7645.05,4945.5195,7641.05,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="7652.05" y="4946.52">singleton</text><!--MD5=[c41fcfd5ef56e0f0da68aff980d3f176]
reverse link C_0000979065355535690103 to C_0000104564426296396960--><path d="M7287.11,5073.6131 C7188.01,5521.4231 6933.11,7004.1131 7716.55,7686.9531 C7761.25,7725.9131 11928.07,7702.4131 11985.55,7716.9531 C12001.17,7720.9031 12002.76,7727.5931 12017.55,7733.9531 C12280.99,7847.2631 12576.72,7952.5231 12841.93,8039.4231 " fill="none" id="C_0000979065355535690103&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="7288.2,5068.7231,7282.338,5076.6374,7287.1123,5073.6034,7290.1464,5078.3777,7288.2,5068.7231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12023.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12030.55" y="7730.02">«friend»</text><!--MD5=[46b7366d08aa74c8bf64b6674b2b20fb]
reverse link C_0001531814603945772616 to C_0000979065355535690103--><path d="M11588.72,1180.7531 C11452.17,1272.6131 11323.19,1385.5431 11232.55,1520.9531 C11070.51,1763.0431 11343.48,1978.2331 11121.55,2166.9531 C11049.5,2228.2331 7787.8,2134.7431 7716.55,2196.9531 C6930.84,2883.0031 7190.09,4373.6031 7288.24,4815.2331 " fill="none" id="C_0001531814603945772616&lt;-C_0000979065355535690103" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.88,1174.9031,11605.41,1169.6531,11592.63,1186.5631,11584.88,1174.9031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[afd78d936730b2a5d2a27c3ca7ae5858]
reverse link C_0001701907280759632930 to C_0001858199404643284193--><path d="M7881.11,5145.2431 C7758.66,5660.3031 7521.56,7027.0631 8252.55,7686.9531 C8299.34,7729.1931 10460.89,7699.8431 10521.55,7716.9531 C10560.87,7728.0431 10577.29,7730.3631 10600.55,7763.9531 C10863.03,8142.9431 10452.77,8463.8431 10783.55,8784.9531 C10923.77,8921.0731 13882.88,8993.2031 14636.26,9009.4131 " fill="none" id="C_0001701907280759632930&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7884.16,5132.4931,7878.8723,5137.3962,7881.3645,5144.163,7886.6522,5139.2599,7884.16,5132.4931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10786.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="10796.55" y="8279.02">_class_name</text><!--MD5=[5f60c9416fe2cf317930fcaaeb87688d]
link C_0001701907280759632930 to C_0001701907280759632930--><path d="M7960.72,4751.1631 C8043.39,4253.6631 8170.05,4317.2631 8170.05,4941.9531 C8170.05,5564.5131 8044.26,5629.8031 7961.57,5137.8331 " fill="none" id="C_0001701907280759632930-&gt;C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="7960.72,5132.7431,7958.2406,5142.2748,7961.535,5137.6762,7966.1336,5140.9707,7960.72,5132.7431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8181.05,4937.5195,8185.05,4941.5195,8181.05,4945.5195,8177.05,4941.5195" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="8188.05" y="4946.52">singleton</text><!--MD5=[88b42ccf7d3beb4b42ddd913181f42f8]
reverse link C_0001701907280759632930 to C_0000104564426296396960--><path d="M7882.71,5137.9231 C7760.32,5647.6031 7516.17,7025.8031 8252.55,7686.9531 C8292.23,7722.5731 12039.86,7703.8631 12091.55,7716.9531 C12107.16,7720.9031 12108.83,7727.4331 12123.55,7733.9531 C12353.04,7835.5531 12608.18,7932.8731 12841.99,8016.2031 " fill="none" id="C_0001701907280759632930&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="7883.97,5132.7131,7877.9714,5140.5245,7882.7977,5137.5738,7885.7484,5142.4001,7883.97,5132.7131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12129.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12136.55" y="7730.02">«friend»</text><!--MD5=[27a7e43ab26a99a3f421aa78b5d844cd]
reverse link C_0001531814603945772616 to C_0001701907280759632930--><path d="M11589.03,1213.4431 C11474.5,1299.6131 11368.47,1402.0131 11292.55,1520.9531 C11136.25,1765.8531 11412.18,1976.7631 11192.55,2166.9531 C11130.81,2220.4231 8313.26,2142.3231 8252.55,2196.9531 C7514.44,2861.2531 7762.31,4246.1031 7884.05,4751.2931 " fill="none" id="C_0001531814603945772616&lt;-C_0001701907280759632930" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11585.02,1207.7031,11605.24,1201.3931,11593.37,1218.9431,11585.02,1207.7031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[91b59d0d2b46b114de331f37d45c6fea]
reverse link C_0001589464385186808769 to C_0001858199404643284193--><path d="M10840.69,7609.0631 C10857.41,7660.8731 10873.39,7712.5331 10888.55,7763.9531 C10953.28,7983.4731 10867.21,8617.8131 11023.55,8784.9531 C11148.54,8918.5731 13910.82,8992.0431 14636.32,9009.0831 " fill="none" id="C_0001589464385186808769&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="10836.65,7596.6031,10834.6922,7603.5434,10840.3456,7608.0199,10842.3034,7601.0796,10836.65,7596.6031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11026.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11036.55" y="8279.02">_class_name</text><!--MD5=[04ea438e6be471aabf4ca3b13070cdc4]
link C_0001589464385186808769 to C_0001589464385186808769--><path d="M10836.64,4723.7631 C10859.18,4786.7031 10871.55,4859.4331 10871.55,4941.9531 C10871.55,5022.3831 10859.8,5093.5031 10838.34,5155.3331 " fill="none" id="C_0001589464385186808769-&gt;C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="10836.64,5160.1431,10843.3983,5152.9789,10838.2981,5155.4261,10835.851,5150.3259,10836.64,5160.1431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="10879.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="10889.55" y="4946.52">singleton</text><!--MD5=[427f4b2a588f733610b23579090a59fb]
reverse link C_0001589464385186808769 to C_0000104564426296396960--><path d="M10841.15,7610.2131 C10877.62,7637.1331 10915.08,7662.7531 10953.55,7686.9531 C11012.07,7723.7631 12130.68,7699.4331 12197.55,7716.9531 C12213.13,7721.0331 12214.91,7727.2531 12229.55,7733.9531 C12425.15,7823.3731 12640.2,7911.4331 12841.6,7989.6531 " fill="none" id="C_0001589464385186808769&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="10836.71,7606.9231,10841.564,7615.4927,10840.7288,7609.8979,10846.3237,7609.0627,10836.71,7606.9231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12235.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12242.55" y="7730.02">«friend»</text><!--MD5=[4ddd664f6ccf290832a36f79f3862090]
reverse link C_0001531814603945772616 to C_0001589464385186808769--><path d="M11589.87,1245.5531 C11495.2,1325.1431 11409.15,1417.0031 11346.55,1520.9531 C11197.22,1768.9331 11471.42,1965.4931 11263.55,2166.9531 C11213.85,2215.1231 11010.76,2158.0031 10953.55,2196.9531 C10913.49,2224.2331 10874.51,2253.0131 10836.58,2283.1631 " fill="none" id="C_0001531814603945772616&lt;-C_0001589464385186808769" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11585.59,1240.0131,11605.45,1232.6331,11594.53,1250.7931,11585.59,1240.0131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2cf4dc3403b3f63884c534491eb99b5f]
reverse link C_0001559146041463814963 to C_0001858199404643284193--><path d="M11189.22,5292.6931 C11145.38,6184.6531 11051.15,8494.5731 11234.55,8784.9531 C11260.13,8825.4531 11285.16,8820.0231 11331.55,8831.9531 C11967.02,8995.2931 14024.75,9011.7731 14636.49,9013.0031 " fill="none" id="C_0001559146041463814963&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="11189.86,5279.6631,11185.5682,5285.458,11189.2667,5291.6484,11193.5584,5285.8536,11189.86,5279.6631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="11237.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="11247.55" y="8279.02">_class_name</text><!--MD5=[8b9b48228f1f4eaa16d2eda56805776c]
reverse link C_0001559146041463814963 to C_0000104564426296396960--><path d="M11114.51,5284.8031 C10977.9,5871.6531 10804.92,7067.2731 11460.55,7686.9531 C11494.61,7719.1431 12258.01,7705.8831 12303.55,7716.9531 C12320.75,7721.1331 12323.39,7726.7431 12339.55,7733.9531 C12501.17,7806.0231 12675.33,7880.9831 12841.64,7951.2931 " fill="none" id="C_0001559146041463814963&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="11115.71,5279.6431,11109.782,5287.5081,11114.5815,5284.5141,11117.5755,5289.3137,11115.71,5279.6431" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="12345.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="12352.55" y="7730.02">«friend»</text><!--MD5=[4af771cf0c6fabd07b7b07fb51de9469]
reverse link C_0001531814603945772616 to C_0001559146041463814963--><path d="M11592.36,1298.0231 C11537.05,1364.5631 11492.22,1438.8531 11465.55,1520.9531 C11281.49,2087.6131 11227.54,3858.3231 11212.75,4604.2931 " fill="none" id="C_0001531814603945772616&lt;-C_0001559146041463814963" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11587.18,1293.3131,11605.47,1282.6231,11597.84,1302.3831,11587.18,1293.3131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[487a8427ca85592aeea29c0764de0754]
reverse link C_0000503002593685351124 to C_0001858199404643284193--><path d="M3448.77,1835.6631 C2210.02,1863.7831 339.97,1947.5231 129.55,2196.9531 C-106.52,2476.7931 22.64,8542.0231 296.55,8784.9531 C437.6,8910.0531 13007.37,9000.5731 14636.3,9011.7831 " fill="none" id="C_0000503002593685351124&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3461.95,1835.3631,3455.8592,1831.5028,3449.9532,1835.6403,3456.044,1839.5006,3461.95,1835.3631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="127.55" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="137.55" y="7730.02">_class_name</text><!--MD5=[489f5a7a7e59ee03221596499549568c]
reverse link C_0000503002593685351124 to C_0000104564426296396960--><path d="M3456.64,1842.9431 C2286.88,1877.7931 569.4,1967.7531 369.55,2196.9531 C169.1,2426.8331 164.18,7461.4531 369.55,7686.9531 C445,7769.7931 759.64,7728.5631 871.55,7733.9531 C1162,7747.9331 11050.57,7731.6931 11339.55,7763.9531 C11845.77,7820.4631 12403.98,7943.8231 12841.83,8055.0031 " fill="none" id="C_0000503002593685351124&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3461.78,1842.7931,3452.6694,1839.0518,3456.782,1842.9359,3452.8979,1847.0485,3461.78,1842.7931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="375.55" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="382.55" y="4946.52">«friend»</text><!--MD5=[c24c628f808045c87231a65882d87e6c]
reverse link C_0001531814603945772616 to C_0000503002593685351124--><path d="M11585.37,960.6531 C10533.25,1103.3631 8467.38,1366.8431 6703.55,1490.9531 C6470.04,1507.3831 5882.14,1486.8031 5650.55,1520.9531 C5436.63,1552.4931 5204.91,1611.2931 5009.34,1668.4131 " fill="none" id="C_0001531814603945772616&lt;-C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11584.65,953.6831,11605.41,957.9331,11586.53,967.5631,11584.65,953.6831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c0fc8be268a4058cfc901a3bfe23dfe6]
link C_0000493041171271776846 to C_0000503002593685351124--><path d="M5440.29,166.5831 C5322.27,385.0831 4838.09,1281.5331 4636.39,1654.9731 " fill="none" id="C_0000493041171271776846-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4632.9914" cy="1661.264" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="4636.7929" x2="4629.19" y1="1654.2249" y2="1668.3031"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="4640.0305" x2="4625.9523" y1="1665.0654" y2="1657.4626"/><!--MD5=[f9e2d358c0077ba50b9cdc90935a7cd8]
link C_0000493041171271776846 to C_0001531814603945772616--><path d="M5604.14,132.9831 C6363,215.8731 10058.86,619.5931 11600.33,787.9731 " fill="none" id="C_0000493041171271776846-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.41,788.5331,11596.8974,783.5798,11600.4395,787.9904,11596.029,791.5325,11605.41,788.5331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6614.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="6621.55" y="248.02">collider</text><!--MD5=[408dbe512b8935ec69e129fbaa9ad1d8]
link C_0000461609734144368587 to C_0000503002593685351124--><path d="M6854.83,162.9931 C6805,182.4631 6748.32,207.1731 6699.55,234.9531 C5922.6,677.4731 5816.96,921.2131 5091.55,1443.9531 C4991.54,1516.0231 4879.68,1593.7231 4783.53,1659.6331 " fill="none" id="C_0000461609734144368587-&gt;C_0000503002593685351124" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="4777.5797" cy="1663.7116" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="4784.1793" x2="4770.98" y1="1659.19" y2="1668.2331"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="4782.1012" x2="4773.0581" y1="1670.3112" y2="1657.1119"/><!--MD5=[a4acf2a0a8f086b9008d5a97b35ead67]
link C_0000461609734144368587 to C_0001531814603945772616--><path d="M7112.12,136.0231 C7721.7,221.6931 10343.4,590.1331 11600.35,766.7831 " fill="none" id="C_0000461609734144368587-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.42,767.4931,11597.0677,762.274,11600.4691,766.794,11595.9491,770.1954,11605.42,767.4931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="7877.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="7884.55" y="248.02">collider</text><!--MD5=[acb73802bd90075711fdfa2eb81ba4e2]
reverse link C_0001034902024938599899 to C_0001858199404643284193--><path d="M12555.65,6234.0131 C12640.45,6768.7031 12839.11,7343.1331 13278.55,7686.9531 C13329.98,7727.1931 14407.49,7670.6631 14453.55,7716.9531 C14495.41,7759.0231 14447.3,8732.7631 14475.55,8784.9531 C14510.98,8850.4031 14574.34,8900.7331 14636.42,8937.2631 " fill="none" id="C_0001034902024938599899&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="12553.61,6220.9931,12550.588,6227.5404,12555.4694,6232.8482,12558.4914,6226.3009,12553.61,6220.9931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14478.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="14488.55" y="8279.02">_class_name</text><!--MD5=[b5cd0ac589986cb9ed90f22c5fd42456]
link C_0001034902024938599899 to C_0001034902024938599899--><path d="M13161.1,4649.6731 C13183.33,4727.3631 13196.05,4824.7931 13196.05,4941.9531 C13196.05,5056.5931 13183.87,5152.3431 13162.52,5229.1931 " fill="none" id="C_0001034902024938599899-&gt;C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="13161.1,5234.2331,13167.3919,5226.656,13162.4566,5229.4207,13159.692,5224.4854,13161.1,5234.2331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="13204.05" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="13214.05" y="4946.52">singleton</text><!--MD5=[5e0ea8049b7e63b70aa4577072912f6a]
reverse link C_0001034902024938599899 to C_0000104564426296396960--><path d="M12802.15,6226.3231 C12923.19,6695.1431 13082.66,7223.7731 13278.55,7686.9531 C13289.31,7712.3831 13300.98,7738.0631 13313.3,7763.7331 " fill="none" id="C_0001034902024938599899&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="12800.81,6221.1631,12799.1997,6230.8794,12802.0663,6226.0027,12806.943,6228.8694,12800.81,6221.1631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="13298.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="13305.55" y="7730.02">«friend»</text><!--MD5=[2a21d702013630b9a2bb4ab014f806e3]
reverse link C_0001531814603945772616 to C_0001034902024938599899--><path d="M12963.53,1304.4831 C13008.84,1356.5031 13048.36,1413.0131 13078.55,1473.9531 C13266.2,1852.7231 13087.64,2838.6231 12884.59,3662.6731 " fill="none" id="C_0001531814603945772616&lt;-C_0001034902024938599899" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12958.01,1308.8131,12949.95,1289.2131,12968.47,1299.5031,12958.01,1308.8131" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[890a5f3a9ab4b2f75c35c9d8b993635e]
reverse link C_0002302096389852429221 to C_0001858199404643284193--><path d="M21575.8,5273.5131 C21721.11,6049.2431 21950.92,7981.3931 20842.55,8784.9531 C20599.15,8961.4231 15944.79,9004.7231 14982.68,9011.8031 " fill="none" id="C_0002302096389852429221&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="21573.35,5260.4831,21570.5341,5267.1217,21575.579,5272.2743,21578.3949,5265.6357,21573.35,5260.4831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21531.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="21541.55" y="8279.02">_class_name</text><!--MD5=[1c64f5bce8010bf6b825f4da2fbeefb2]
reverse link C_0002302096389852429221 to C_0000104564426296396960--><path d="M21594.18,5265.7731 C21733.8,5847.8131 21922.48,7069.7931 21249.55,7686.9531 C21200.52,7731.9231 16524.82,7704.0331 16459.55,7716.9531 C16439.8,7720.8631 16437.29,7729.9531 16417.55,7733.9531 C16201.36,7777.7431 14644.01,7701.1831 14432.55,7763.9531 C14423.4,7766.6731 14414.26,7769.5231 14405.12,7772.5031 " fill="none" id="C_0002302096389852429221&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="21592.95,5260.6631,21591.1651,5270.3489,21594.119,5265.5245,21598.9434,5268.4785,21592.95,5260.6631" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16465.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16472.55" y="7730.02">«friend»</text><!--MD5=[664b2e106c93f0f6277b4a445906c078]
reverse link C_0001531814603945772616 to C_0002302096389852429221--><path d="M12969.69,899.7231 C14543.23,985.3031 18349,1217.5331 19595.55,1520.9531 C20367.16,1708.7731 20776.74,1558.9031 21249.55,2196.9531 C21787.48,2922.8731 21670.54,4070.9831 21572.17,4623.3931 " fill="none" id="C_0001531814603945772616&lt;-C_0002302096389852429221" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.15,906.7031,12949.56,898.6231,12969.91,892.7231,12969.15,906.7031" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d7ce68193d44632dd4e25c66ffbbce4c]
reverse link C_0000236996062289735257 to C_0001858199404643284193--><path d="M6236.12,1976.5131 C6057.6,2033.4831 5846.57,2091.0931 5650.55,2119.9531 C5379.09,2159.9231 985.53,2134.7531 711.55,2149.9531 C611.83,2155.4831 331.38,2122.7231 264.55,2196.9531 C60.47,2423.6131 132.26,7412.1331 264.55,7686.9531 C603.92,8391.9231 905.62,8516.5931 1640.55,8784.9531 C2280.06,9018.4731 13129.7,9014.8231 14636.44,9013.1831 " fill="none" id="C_0000236996062289735257&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6248.64,1972.4931,6241.7045,1970.5185,6237.2143,1976.161,6244.1498,1978.1356,6248.64,1972.4931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="283.55" y="7723.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="293.55" y="7730.02">_class_name</text><!--MD5=[6f8680ec89f27b3fc0455684d508cc80]
reverse link C_0000236996062289735257 to C_0000104564426296396960--><path d="M6240.98,1974.0531 C6061.39,2031.4031 5848.26,2089.9531 5650.55,2119.9531 C5508.63,2141.4931 584.29,2094.7031 483.55,2196.9531 C430.04,2251.2731 430.35,7632.3331 483.55,7686.9531 C588.77,7794.9631 11189.71,7747.1931 11339.55,7763.9531 C11845.76,7820.5731 12403.96,7943.9431 12841.82,8055.0931 " fill="none" id="C_0000236996062289735257&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6245.75,1972.5231,6235.9578,1971.4681,6240.9897,1974.0527,6238.4051,1979.0846,6245.75,1972.5231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="489.55" cy="4942.5195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="496.55" y="4946.52">«friend»</text><!--MD5=[3f2e423855117caec285a310b19c1bbc]
reverse link C_0001531814603945772616 to C_0000236996062289735257--><path d="M11585.22,907.9831 C10679.17,976.4831 9046.9,1137.3431 7689.55,1473.9531 C7668.4,1479.2031 7664.11,1483.7031 7643.55,1490.9531 C7474.68,1550.4731 7288.57,1613.5531 7124.36,1668.3531 " fill="none" id="C_0001531814603945772616&lt;-C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="11585.02,900.9831,11605.49,906.4631,11586.07,914.9431,11585.02,900.9831" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9a7eb49f1533d167fe82948ecfcf8f82]
link C_0001801355352189289676 to C_0000236996062289735257--><path d="M10493.4,120.0531 C10171.55,126.3331 9376.11,150.2231 9124.55,234.9531 C8638.34,398.7131 7387.96,1290.4531 6881.96,1659.4631 " fill="none" id="C_0001801355352189289676-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6876.2416" cy="1663.6364" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="6882.7033" x2="6869.78" y1="1658.9197" y2="1668.3531"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="6880.9583" x2="6871.5249" y1="1670.0981" y2="1657.1748"/><!--MD5=[94135747fba5deb4c607347f1e06518f]
link C_0001801355352189289676 to C_0001531814603945772616--><path d="M10767.79,179.9431 C10951.52,262.9431 11290.33,415.9931 11600.5,556.1131 " fill="none" id="C_0001801355352189289676-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.06,558.1731,11598.5028,550.8245,11600.5028,556.116,11595.2113,558.116,11605.06,558.1731" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="10913.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="10920.55" y="248.02">collider</text><!--MD5=[327ec61c802d4b8bc89d445f02ff7678]
link C_0001771770302499309898 to C_0000236996062289735257--><path d="M8352.31,119.5931 C8115.67,124.8431 7662.12,146.5331 7531.55,234.9531 C7023.97,578.6931 6786.02,1321.4631 6701.89,1653.3631 " fill="none" id="C_0001771770302499309898-&gt;C_0000236996062289735257" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="6700.0621" cy="1660.6124" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="6702.0042" x2="6698.12" y1="1652.8517" y2="1668.3731"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="6707.8228" x2="6692.3014" y1="1662.5545" y2="1658.6704"/><!--MD5=[dddc2f9d809445d4a2bacef7d4a58738]
link C_0001771770302499309898 to C_0001531814603945772616--><path d="M8644.67,146.7231 C9126.95,241.6731 10689.22,549.2431 11600.4,728.6331 " fill="none" id="C_0001771770302499309898-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="11605.41,729.6231,11597.3597,723.9493,11600.5055,728.6508,11595.804,731.7966,11605.41,729.6231" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="9138.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="45" x="9145.55" y="248.02">collider</text><!--MD5=[eed6ab08d8c501b6208d9f4ac11f9b83]
reverse link C_0001561529841391244418 to C_0001858199404643284193--><path d="M22665.26,5907.6531 C22651.53,6803.1431 22472.24,8098.2131 21633.55,8784.9531 C21368.58,9001.9231 16019.78,9012.9631 14982.82,9013.0631 " fill="none" id="C_0001561529841391244418&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="22665.45,5894.5031,22661.3582,5900.4409,22665.2654,5906.5017,22669.3572,5900.5639,22665.45,5894.5031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="22343.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="22353.55" y="8279.02">_class_name</text><!--MD5=[23ceac23f6c6826b07cc87ed3906ae98]
link C_0001561529841391244418 to C_0001561529841391244418--><path d="M23321.58,4660.9631 C23343.88,4736.7331 23356.55,4830.3931 23356.55,4941.9531 C23356.55,5051.1131 23344.42,5143.1431 23323,5218.0331 " fill="none" id="C_0001561529841391244418-&gt;C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="23321.58,5222.9431,23327.94,5215.4231,23322.98,5218.1431,23320.26,5213.1831,23321.58,5222.9431" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="23364.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="23374.55" y="4946.52">singleton</text><!--MD5=[a7f38b71b0c412aea9feb929bf57c436]
reverse link C_0001561529841391244418 to C_0000104564426296396960--><path d="M22637.12,5900.1431 C22593.17,6514.9431 22421.66,7273.2931 21886.55,7686.9531 C21829.09,7731.3731 16729.82,7709.7531 16657.55,7716.9531 C16618.35,7720.8631 16609.74,7729.8831 16570.55,7733.9531 C16452.4,7746.2231 14546.45,7730.2131 14432.55,7763.9531 C14423.4,7766.6631 14414.25,7769.5131 14405.11,7772.4831 " fill="none" id="C_0001561529841391244418&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="22637.5,5894.7331,22632.8672,5903.4243,22637.1427,5899.7203,22640.8467,5903.9959,22637.5,5894.7331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="16663.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="16670.55" y="7730.02">«friend»</text><!--MD5=[a58d0cd78cca24a1b417e2c7091ad184]
reverse link C_0001531814603945772616 to C_0001561529841391244418--><path d="M12969.8,885.0431 C14671.96,942.4631 19024.02,1124.5731 20416.55,1520.9531 C21021.44,1693.1331 21075.13,1979.7931 21675.55,2166.9531 C21724.55,2182.2231 21866.08,2162.9831 21904.55,2196.9531 C22406.19,2639.9631 22576.09,3386.4631 22625.14,3989.0831 " fill="none" id="C_0001531814603945772616&lt;-C_0001561529841391244418" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12969.34,892.0331,12949.59,884.3631,12969.81,878.0331,12969.34,892.0331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4e0b6cbd5b03f80ab3eba4fe2dcbf948]
link C_0000762417759113755306 to C_0001531814603945772616--><path d="M18409.13,140.9331 C17585.17,237.8231 14371.88,615.6831 12955.02,782.2931 " fill="none" id="C_0000762417759113755306-&gt;C_0001531814603945772616" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="12949.84,782.9031,12959.2462,785.8226,12954.8057,782.3181,12958.3102,777.8775,12949.84,782.9031" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="17549.55" cy="244.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="19" x="17556.55" y="248.02">obj</text><!--MD5=[8bda8e308cc1dbbbc74088973fe49d83]
reverse link C_0000762417759113755306 to C_0001858199404643284193--><path d="M18812.79,131.8631 C19816.2,203.3631 24139.06,564.0131 24993.55,1520.9531 C25006.13,1535.0331 25062.58,2178.1031 25063.55,2196.9531 C25189.38,4633.7031 25130.14,5247.8631 25063.55,7686.9531 C25056.88,7931.2231 25169.26,8605.3531 25003.55,8784.9531 C24826.47,8976.8831 16310.23,9008.7131 14982.72,9012.5131 " fill="none" id="C_0000762417759113755306&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="18799.7,130.9331,18805.3991,135.3513,18811.6694,131.79,18805.9703,127.3718,18799.7,130.9331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="25066.55" cy="2159.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="27" x="25073.55" y="2163.02">func</text><!--MD5=[5ecf1269ba038493d7a188869314b523]
reverse link C_0000314051240057057851 to C_0001858199404643284193--><path d="M14987.27,5177.7931 C15012.16,5902.0531 15072.11,8093.7531 14914.55,8784.9531 C14908.72,8810.5531 14899.81,8836.7331 14889.61,8861.8031 " fill="none" id="C_0000314051240057057851&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="14986.81,5164.6131,14983.0166,5170.7458,14987.2186,5176.6062,14991.012,5170.4735,14986.81,5164.6131" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15008.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="15018.55" y="8279.02">_class_name</text><!--MD5=[c8cd5ec3f4799bfb98fee18601ebcdfe]
link C_0000314051240057057851 to C_0000314051240057057851--><path d="M15045.23,4719.1131 C15219.16,4256.7331 15474.05,4331.0131 15474.05,4941.9531 C15474.05,5550.8031 15220.9,5626.6531 15047.02,5169.5131 " fill="none" id="C_0000314051240057057851-&gt;C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="15045.23,5164.7931,15044.6448,5174.6246,15046.9856,5169.4748,15052.1354,5171.8156,15045.23,5164.7931" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="15482.05" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="15492.05" y="4946.52">singleton</text><!--MD5=[1a5c4e57827c1ce3cfed75acbd29db82]
reverse link C_0000314051240057057851 to C_0000104564426296396960--><path d="M14996.05,5170.0231 C15023.12,5668.8731 15025.6,6880.1331 14500.55,7686.9531 C14481.32,7716.5031 14448.04,7750.4331 14405.37,7786.7531 " fill="none" id="C_0000314051240057057851&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="14995.77,5164.9131,14992.2637,5174.1167,14996.041,5169.9058,15000.252,5173.6831,14995.77,5164.9131" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="14476.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="14483.55" y="7730.02">«friend»</text><!--MD5=[d5123be137e691922de774dbcf9f522d]
reverse link C_0001531814603945772616 to C_0000314051240057057851--><path d="M12968.54,1072.7431 C13490.83,1270.8231 14172.1,1624.8231 14500.55,2196.9531 C14980.26,3032.5431 15002.8,4229.6931 14989.22,4719.3931 " fill="none" id="C_0001531814603945772616&lt;-C_0000314051240057057851" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12965.88,1079.2231,12949.64,1065.6231,12970.82,1066.1231,12965.88,1079.2231" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbb6989faf4ed278e5063ce8d06d64a7]
reverse link C_0000535376932101028371 to C_0001858199404643284193--><path d="M15971.34,5382.8431 C15940.73,5983.1831 15981.24,7056.3631 16568.55,7686.9531 C16604.23,7725.2631 16700.96,7687.6431 16676.55,7733.9531 C16309.12,8431.0431 15371.47,8820.9031 14982.6,8957.0631 " fill="none" id="C_0000535376932101028371&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="15972.03,5369.6331,15967.7192,5375.4139,15971.3972,5381.6164,15975.708,5375.8357,15972.03,5369.6331" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16646.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="16656.55" y="8279.02">_class_name</text><!--MD5=[491d9ca8506983be5dd6ad346fa76ecd]
link C_0000535376932101028371 to C_0000535376932101028371--><path d="M16176.76,4514.0231 C16325.74,4304.1731 16485.55,4446.8131 16485.55,4941.9531 C16485.55,5433.7031 16327.91,5577.7631 16179.82,5374.1331 " fill="none" id="C_0000535376932101028371-&gt;C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="16176.76,5369.8831,16178.7842,5379.5217,16179.6864,5373.9373,16185.2709,5374.8395,16176.76,5369.8831" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="16493.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="16503.55" y="4946.52">singleton</text><!--MD5=[aeb94eee531eb6d8f9e0dab2a65178b2]
reverse link C_0000535376932101028371 to C_0000104564426296396960--><path d="M16086.6,5375.1331 C16164.27,5989.1731 16198.42,7104.0931 15556.55,7686.9531 C15510.22,7729.0331 14492.06,7744.5531 14432.55,7763.9531 C14423.48,7766.9131 14414.4,7769.9931 14405.33,7773.1931 " fill="none" id="C_0000535376932101028371&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="16085.92,5369.7331,16083.0839,5379.1648,16086.549,5374.6934,16091.0204,5378.1585,16085.92,5369.7331" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15310.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15317.55" y="7730.02">«friend»</text><!--MD5=[ccb0f2e105ae37379c60a8eaf42ab781]
reverse link C_0001531814603945772616 to C_0000535376932101028371--><path d="M12969.92,936.9531 C13736.34,1057.6031 14944.13,1374.1331 15556.55,2196.9531 C16066.91,2882.6431 16089.53,3931.9031 16054.88,4514.1931 " fill="none" id="C_0001531814603945772616&lt;-C_0000535376932101028371" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12968.61,943.8331,12949.92,933.8331,12970.76,929.9931,12968.61,943.8331" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ee47356e384c9a8586af688e36c84f71]
reverse link C_0001370497546359815893 to C_0001858199404643284193--><path d="M16935.63,5497.7031 C17042.15,6448.8531 17189.07,8332.4231 16748.55,8784.9531 C16626.27,8910.5631 15435.39,8982.0531 14982.84,9004.8631 " fill="none" id="C_0001370497546359815893&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="16934.15,5484.4631,16930.8479,5490.8738,16935.4954,5496.3875,16938.7975,5489.9768,16934.15,5484.4631" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17033.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="17043.55" y="8279.02">_class_name</text><!--MD5=[3adf581e5c7850b91ef14b43d83cd267]
link C_0001370497546359815893 to C_0001370497546359815893--><path d="M17145.6,4548.7031 C17167.22,4635.6331 17180.55,4766.7231 17180.55,4941.9531 C17180.55,5113.9331 17167.71,5243.3931 17146.79,5330.3131 " fill="none" id="C_0001370497546359815893-&gt;C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="17145.6,5335.2031,17151.6203,5327.4085,17146.7858,5330.3458,17143.8485,5325.5113,17145.6,5335.2031" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17188.55" y="4939.5195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="58" x="17198.55" y="4946.52">singleton</text><!--MD5=[f0c11157ea1c302f0338a5d98b865e3f]
reverse link C_0001370497546359815893 to C_0000104564426296396960--><path d="M16991.8,5489.7631 C17101.05,6118.9431 17160.49,7135.9931 16568.55,7686.9531 C16534.78,7718.3931 15784.65,7715.0331 15738.55,7716.9531 C15578.51,7723.6231 15538.61,7727.6331 15378.55,7733.9531 C15273.47,7738.1031 14533.12,7733.1931 14432.55,7763.9531 C14423.43,7766.7431 14414.3,7769.6731 14405.18,7772.7131 " fill="none" id="C_0001370497546359815893&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="16990.92,5484.6931,16988.5212,5494.2454,16991.7767,5489.6192,16996.4029,5492.8747,16990.92,5484.6931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15744.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15751.55" y="7730.02">«friend»</text><!--MD5=[fcb1dceefea1281ea342b1a8ab9dedf3]
reverse link C_0001531814603945772616 to C_0001370497546359815893--><path d="M12969.5,975.3131 C14072.96,1168.8931 16149.86,1604.1631 16568.55,2196.9531 C17026.49,2845.3131 17016.14,3803.5731 16951.79,4399.1731 " fill="none" id="C_0001531814603945772616&lt;-C_0001370497546359815893" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12968.18,982.1931,12949.69,971.8531,12970.59,968.4031,12968.18,982.1931" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5b171c69af600bc12977795a2bb103e4]
reverse link C_0000096380574950611570 to C_0001858199404643284193--><path d="M18036.67,5209.5931 C18107.82,5915.6931 18191.61,7844.1431 17135.55,8784.9531 C16975.5,8927.5431 15494.85,8990.0831 14982.81,9007.5731 " fill="none" id="C_0000096380574950611570&lt;-C_0001858199404643284193" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="18035.33,5196.4731,18031.9573,5202.8469,18036.5436,5208.4116,18039.9163,5202.0378,18035.33,5196.4731" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="17795.55" y="8272.0195"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="83" x="17805.55" y="8279.02">_class_name</text><!--MD5=[7d4e19f5f1e549348290eead97de4c50]
reverse link C_0000096380574950611570 to C_0000104564426296396960--><path d="M18024.83,5202.0131 C18054.73,5761.6231 18035.42,7081.6231 17263.55,7686.9531 C17234.69,7709.5831 15980.13,7714.2431 15943.55,7716.9531 C15883.24,7721.4231 15868.86,7729.5131 15808.55,7733.9531 C15656.04,7745.1831 14579.01,7719.9431 14432.55,7763.9531 C14423.41,7766.7031 14414.27,7769.5831 14405.14,7772.5831 " fill="none" id="C_0000096380574950611570&lt;-C_0000104564426296396960" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="18024.54,5196.6931,18021.0352,5205.8973,18024.8118,5201.6857,18029.0233,5205.4624,18024.54,5196.6931" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="15949.55" cy="7726.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="52" x="15956.55" y="7730.02">«friend»</text><!--MD5=[d80b17199b730d4efec0c676d67f0184]
reverse link C_0001531814603945772616 to C_0000096380574950611570--><path d="M12969.91,926.9231 C13717.52,1008.9231 14936.03,1183.5231 15938.55,1520.9531 C16565.12,1731.8431 16847.23,1683.4031 17263.55,2196.9531 C17874.12,2950.1031 17983.36,4163.7531 18001.16,4687.2231 " fill="none" id="C_0001531814603945772616&lt;-C_0000096380574950611570" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="12968.98,933.8631,12949.86,924.7331,12970.5,919.9431,12968.98,933.8631" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[cc2e15d2736cd8b239aeb90343589efa]
@startuml
title Godot Object class hierarchy
class "SafeNumeric<uint32_t>" as C_0001357046052919104842
class C_0001357046052919104842 {
}
class "SafeRefCount" as C_0000699772808699382057
class C_0000699772808699382057 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/safe_refcount.h#L164{SafeRefCount}]] {
+ref() : bool
+refval() : uint32_t
+unref() : bool
+unrefval() : uint32_t
+get() const : uint32_t
+init(uint32_t p_value = 1) : void
}
class "Dictionary" as C_0001299121424291583786
class C_0001299121424291583786 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/dictionary.h#L42{Dictionary}]] {
+get_key_list(List<Variant> * p_keys) const : void
+get_key_at_index(int p_index) const : Variant
+get_value_at_index(int p_index) const : Variant
+operator[](const Variant & p_key) : Variant &
+operator[](const Variant & p_key) const : const Variant &
+getptr(const Variant & p_key) const : const Variant *
+getptr(const Variant & p_key) : Variant *
+get_valid(const Variant & p_key) const : Variant
+get(const Variant & p_key, const Variant & p_default) const : Variant
+size() const : int
+empty() const : bool
+clear() : void
+has(const Variant & p_key) const : bool
+has_all(const Array & p_keys) const : bool
+erase(const Variant & p_key) : bool
+operator==(const Dictionary & p_dictionary) const : bool
+operator!=(const Dictionary & p_dictionary) const : bool
+hash() const : uint32_t
+operator=(const Dictionary & p_dictionary) : void
+next(const Variant * p_key = __null) const : const Variant *
+keys() const : Array
+values() const : Array
+duplicate(bool p_deep = false) const : Dictionary
+id() const : const void *
+Dictionary(const Dictionary & p_from) : void
+Dictionary() : void
+~Dictionary() : void
}
class "StringName" as C_0001858199404643284193
class C_0001858199404643284193 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/string_name.h#L44{StringName}]] {
+operator const void *() const : const void *
+operator==(const String & p_name) const : bool
+operator==(const char * p_name) const : bool
+operator!=(const String & p_name) const : bool
+operator<(const StringName & p_name) const : bool
+operator==(const StringName & p_name) const : bool
+hash() const : uint32_t
+data_unique_pointer() const : const void *
+operator!=(const StringName & p_name) const : bool
+operator String() const : String
{static} +search(const char * p_name) : StringName
{static} +search(const CharType * p_name) : StringName
{static} +search(const String & p_name) : StringName
+operator=(const StringName & p_name) : void
+StringName(const char * p_name) : void
+StringName(const StringName & p_name) : void
+StringName(const String & p_name) : void
+StringName(const StaticCString & p_static_string) : void
+StringName() : void
+~StringName() : void
}
class "RefPtr" as C_0002025812040042972946
class C_0002025812040042972946 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/ref_ptr.h#L41{RefPtr}]] {
+is_null() const : bool
+operator=(const RefPtr & p_other) : void
+operator==(const RefPtr & p_other) const : bool
+operator!=(const RefPtr & p_other) const : bool
+get_rid() const : RID
+unref() : void
+get_data() const : void *
+RefPtr(const RefPtr & p_other) : void
+RefPtr() : void
+~RefPtr() : void
}
class "List<Object::Connection>" as C_0000751300156436098886
class C_0000751300156436098886 {
}
class "Set<String>" as C_0001682405743486361214
class C_0001682405743486361214 {
}
class "HashMap<StringName,Object::Signal>" as C_0001578539238208480863
class C_0001578539238208480863 {
}
class "Set<Object *>" as C_0000051860595756965531
class C_0000051860595756965531 {
}
class "Object" as C_0001531814603945772616
class C_0001531814603945772616 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L408{Object}]] {
{static} +initialize_class() : void
{static} +register_custom_data_to_otdb() : void
+_change_notify(const char * p_property = "") : void
{static} +get_class_ptr_static() : void *
+_use_rc() : ObjectRC *
+_is_gpl_reversed() const : bool
+get_instance_id() const : ObjectID
+add_change_receptor(Object * p_receptor) : void
+remove_change_receptor(Object * p_receptor) : void
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_category_static() : String
+get_class() const : String
+get_save_class() const : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
+get_class_name() const : const StringName &
+set(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+get(const StringName & p_name, bool * r_valid = __null) const : Variant
+set_indexed(const Vector<StringName> & p_names, const Variant & p_value, bool * r_valid = __null) : void
+get_indexed(const Vector<StringName> & p_names, bool * r_valid = __null) const : Variant
+get_property_list(List<PropertyInfo> * p_list, bool p_reversed = false) const : void
+has_method(const StringName & p_method) const : bool
+get_method_list(List<MethodInfo> * p_list) const : void
+callv(const StringName & p_method, const Array & p_args) : Variant
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call_multilevel(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+notification(int p_notification, bool p_reversed = false) : void
+to_string() : String
+getvar(const Variant & p_key, bool * r_valid = __null) const : Variant
+setvar(const Variant & p_key, const Variant & p_value, bool * r_valid = __null) : void
+set_script(const RefPtr & p_script) : void
+get_script() const : RefPtr
+has_meta(const String & p_name) const : bool
+set_meta(const String & p_name, const Variant & p_value) : void
+remove_meta(const String & p_name) : void
+get_meta(const String & p_name) const : Variant
+get_meta_list(List<String> * p_list) const : void
+set_edited(bool p_edited) : void
+is_edited() const : bool
+get_edited_version() const : uint32_t
+set_script_instance(ScriptInstance * p_instance) : void
+get_script_instance() const : ScriptInstance *
+set_script_and_instance(const RefPtr & p_script, ScriptInstance * p_instance) : void
+add_user_signal(const MethodInfo & p_signal) : void
+emit_signal(const StringName & p_name, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Error
+emit_signal(const StringName & p_name, const Variant ** p_args, int p_argcount) : Error
+has_signal(const StringName & p_name) const : bool
+get_signal_list(List<MethodInfo> * p_signals) const : void
+get_signal_connection_list(const StringName & p_signal, List<Object::Connection> * p_connections) const : void
+get_all_signal_connections(List<Object::Connection> * p_connections) const : void
+get_persistent_signal_connection_count() const : int
+get_signals_connected_to_this(List<Object::Connection> * p_connections) const : void
+connect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method, const Vector<Variant> & p_binds = Vector<Variant>(), uint32_t p_flags = 0) : Error
+disconnect(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) : void
+is_connected(const StringName & p_signal, Object * p_to_object, const StringName & p_to_method) const : bool
+call_deferred(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+set_deferred(const StringName & p_property, const Variant & p_value) : void
+set_block_signals(bool p_block) : void
+is_blocking_signals() const : bool
+get_static_property_type(const StringName & p_property, bool * r_valid = __null) const : Variant::Type
+get_static_property_type_indexed(const Vector<StringName> & p_path, bool * r_valid = __null) const : Variant::Type
+get_translatable_strings(List<String> * p_strings) const : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
+tr(const StringName & p_message) const : StringName
+is_queued_for_deletion() const : bool
+set_message_translation(bool p_enable) : void
+can_translate_messages() const : bool
+editor_set_section_unfold(const String & p_section, bool p_unfolded) : void
+editor_is_section_unfolded(const String & p_section) : bool
+editor_get_section_folding() const : const Set<String> &
+editor_clear_section_folding() : void
+get_script_instance_binding(int p_script_language_index) : void *
+has_script_instance_binding(int p_script_language_index) : bool
+set_script_instance_binding(int p_script_language_index, void * p_data) : void
+clear_internal_resource_paths() : void
+Object() : void
+~Object() : void
{static} +cast_to<T>(Object * p_object) : T *
{static} +cast_to<T>(const Object * p_object) : const T *
+_is_queued_for_deletion : bool [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L745{_is_queued_for_deletion}]]]
+NOTIFICATION_POSTINITIALIZE : enum
+NOTIFICATION_PREDELETE : enum
}
enum "Object::ConnectFlags" as C_0000219886141561409828
enum C_0000219886141561409828 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L410{Object##ConnectFlags}]] {
CONNECT_DEFERRED
CONNECT_PERSIST
CONNECT_ONESHOT
CONNECT_REFERENCE_COUNTED
}
class "Object::Connection" as C_0001267214583673362755
class C_0001267214583673362755 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L418{Object##Connection}]] {
+operator<(const Object::Connection & p_conn) const : bool
+operator Variant() const : Variant
+Connection() : void
+Connection(const Variant & p_variant) : void
+source : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L420{source}]]]
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L421{signal}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L422{target}]]]
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L423{method}]]]
+flags : uint32_t [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L424{flags}]]]
+binds : Vector<Variant> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L425{binds}]]]
}
class "Object::Signal" as C_0000250357724807605097
class C_0000250357724807605097 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L448{Object##Signal}]] {
+Signal() : void
+user : MethodInfo [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L472{user}]]]
+slot_map : VMap<Object::Signal::Target,Object::Signal::Slot> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L473{slot_map}]]]
}
class "ObjectDB" as C_0002064336919270342687
class C_0002064336919270342687 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L773{ObjectDB}]] {
{static} +get_instance(ObjectID p_instance_id) : Object *
{static} +debug_objects(ObjectDB::DebugFunc p_func) : void
{static} +get_object_count() : int
{static} +instance_validate(Object * p_ptr) : bool
}
class "ClassDB" as C_0000104564426296396960
class C_0000104564426296396960 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L94{ClassDB}]] {
{static} +bind_methodfi(uint32_t p_flags, MethodBind * p_bind, const MethodDefinition & method_name, const Variant ** p_defs, int p_defcount) : MethodBind *
{static} +_add_class2(const StringName & p_class, const StringName & p_inherits) : void
{static} +get_class_list(List<StringName> * p_classes) : void
{static} +get_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_direct_inheriters_from_class(const StringName & p_class, List<StringName> * p_classes) : void
{static} +get_parent_class_nocheck(const StringName & p_class) : StringName
{static} +get_parent_class(const StringName & p_class) : StringName
{static} +class_exists(const StringName & p_class) : bool
{static} +is_parent_class(const StringName & p_class, const StringName & p_inherits) : bool
{static} +can_instance(const StringName & p_class) : bool
{static} +instance(const StringName & p_class) : Object *
{static} +get_api_type(const StringName & p_class) : ClassDB::APIType
{static} +get_api_hash(ClassDB::APIType p_api) : uint64_t
{static} +add_signal(StringName p_class, const MethodInfo & p_signal) : void
{static} +has_signal(StringName p_class, StringName p_signal) : bool
{static} +get_signal(StringName p_class, StringName p_signal, MethodInfo * r_signal) : bool
{static} +get_signal_list(StringName p_class, List<MethodInfo> * p_signals, bool p_no_inheritance = false) : void
{static} +add_property_group(StringName p_class, const String & p_name, const String & p_prefix = "") : void
{static} +add_property(StringName p_class, const PropertyInfo & p_pinfo, const StringName & p_setter, const StringName & p_getter, int p_index = -1) : void
{static} +set_property_default_value(StringName p_class, const StringName & p_name, const Variant & p_default) : void
{static} +get_property_list(StringName p_class, List<PropertyInfo> * p_list, bool p_no_inheritance = false, const Object * p_validator = __null) : void
{static} +set_property(Object * p_object, const StringName & p_property, const Variant & p_value, bool * r_valid = __null) : bool
{static} +get_property(Object * p_object, const StringName & p_property, Variant & r_value) : bool
{static} +has_property(const StringName & p_class, const StringName & p_property, bool p_no_inheritance = false) : bool
{static} +get_property_index(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : int
{static} +get_property_type(const StringName & p_class, const StringName & p_property, bool * r_is_valid = __null) : Variant::Type
{static} +get_property_setter(StringName p_class, const StringName & p_property) : StringName
{static} +get_property_getter(StringName p_class, const StringName & p_property) : StringName
{static} +has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) : bool
{static} +set_method_flags(StringName p_class, StringName p_method, int p_flags) : void
{static} +get_method_list(StringName p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false, bool p_exclude_from_properties = false) : void
{static} +get_method(StringName p_class, StringName p_name) : MethodBind *
{static} +add_virtual_method(const StringName & p_class, const MethodInfo & p_method, bool p_virtual = true) : void
{static} +get_virtual_methods(const StringName & p_class, List<MethodInfo> * p_methods, bool p_no_inheritance = false) : void
{static} +bind_integer_constant(const StringName & p_class, const StringName & p_enum, const StringName & p_name, int p_constant) : void
{static} +get_integer_constant_list(const StringName & p_class, List<String> * p_constants, bool p_no_inheritance = false) : void
{static} +get_integer_constant(const StringName & p_class, const StringName & p_name, bool * p_success = __null) : int
{static} +get_integer_constant_enum(const StringName & p_class, const StringName & p_name, bool p_no_inheritance = false) : StringName
{static} +get_enum_list(const StringName & p_class, List<StringName> * p_enums, bool p_no_inheritance = false) : void
{static} +get_enum_constants(const StringName & p_class, const StringName & p_enum, List<StringName> * p_constants, bool p_no_inheritance = false) : void
{static} +class_get_default_property_value(const StringName & p_class, const StringName & p_property, bool * r_valid = __null) : Variant
{static} +get_category(const StringName & p_node) : StringName
{static} +set_class_enabled(StringName p_class, bool p_enable) : void
{static} +is_class_enabled(StringName p_class) : bool
{static} +is_class_exposed(StringName p_class) : bool
{static} +add_resource_base_extension(const StringName & p_extension, const StringName & p_class) : void
{static} +get_resource_base_extensions(List<String> * p_extensions) : void
{static} +get_extensions_for_type(const StringName & p_class, List<String> * p_extensions) : void
{static} +add_compatibility_class(const StringName & p_class, const StringName & p_fallback) : void
{static} +set_current_api(ClassDB::APIType p_api) : void
{static} +get_current_api() : ClassDB::APIType
{static} +cleanup_defaults() : void
{static} +cleanup() : void
{static} +creator<T>() : class Object *
{static} +_add_class<T>() : void
{static} +register_class<T>() : void
{static} +register_virtual_class<T>() : void
{static} +_create_ptr_func<T>() : class Object *
{static} +register_custom_instance_class<T>() : void
{static} +bind_method<N,M>(N p_method_name, M p_method) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7) : class MethodBind *
{static} +bind_method<N,M>(N p_method_name, M p_method, const Variant & p_def1, const Variant & p_def2, const Variant & p_def3, const Variant & p_def4, const Variant & p_def5, const Variant & p_def6, const Variant & p_def7, const Variant & p_def8) : class MethodBind *
{static} +bind_vararg_method<M>(uint32_t p_flags, StringName p_name, M p_method, const MethodInfo & p_info = MethodInfo(), const Vector<Variant> & p_default_args = Vector<Variant>(), bool p_return_nil_is_variant = true) : class MethodBind *
{static} +lock : RWLock [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L146{lock}]]]
{static} +classes : HashMap<StringName,ClassDB::ClassInfo> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L147{classes}]]]
{static} +resource_base_extensions : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L148{resource_base_extensions}]]]
{static} +compat_classes : HashMap<StringName,StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L149{compat_classes}]]]
{static} +current_api : ClassDB::APIType [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L157{current_api}]]]
{static} +default_values : HashMap<StringName,HashMap<StringName,Variant>> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L161{default_values}]]]
{static} +default_values_cached : Set<StringName> [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/class_db.h#L162{default_values_cached}]]]
}
class "Reference" as C_0001778859257025660860
class C_0001778859257025660860 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/reference.h#L39{Reference}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+is_referenced() const : bool
+init_ref() : bool
+reference() : bool
+unreference() : bool
+reference_get_count() const : int
+Reference() : void
+~Reference() : void
}
class "Node" as C_0000218299049716973303
class C_0000218299049716973303 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L55{Node}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_name() const : StringName
+set_name(const String & p_name) : void
+add_child(Node * p_child, bool p_legible_unique_name = false) : void
+add_child_below_node(Node * p_node, Node * p_child, bool p_legible_unique_name = false) : void
+remove_child(Node * p_child) : void
+get_child_count() const : int
+get_child(int p_index) const : Node *
+has_node(const NodePath & p_path) const : bool
+get_node(const NodePath & p_path) const : Node *
+get_node_or_null(const NodePath & p_path) const : Node *
+find_node(const String & p_mask, bool p_recursive = true, bool p_owned = true) const : Node *
+has_node_and_resource(const NodePath & p_path) const : bool
+get_node_and_resource(const NodePath & p_path, RES & r_res, Vector<StringName> & r_leftover_subpath, bool p_last_is_property = true) const : Node *
+get_parent() const : Node *
+find_parent(const String & p_mask) const : Node *
+get_tree() const : SceneTree *
+is_inside_tree() const : bool
+is_a_parent_of(const Node * p_node) const : bool
+is_greater_than(const Node * p_node) const : bool
+get_path() const : NodePath
+get_path_to(const Node * p_node) const : NodePath
+find_common_parent_with(const Node * p_node) const : Node *
+add_to_group(const StringName & p_identifier, bool p_persistent = false) : void
+remove_from_group(const StringName & p_identifier) : void
+is_in_group(const StringName & p_identifier) const : bool
+get_groups(List<Node::GroupInfo> * p_groups) const : void
+get_persistent_group_count() const : int
+move_child(Node * p_child, int p_pos) : void
+raise() : void
+set_owner(Node * p_owner) : void
+get_owner() const : Node *
+get_owned_by(Node * p_by, List<Node *> * p_owned) : void
+remove_and_skip() : void
+get_index() const : int
+print_tree() : void
+print_tree_pretty() : void
+set_filename(const String & p_filename) : void
+get_filename() const : String
+set_editor_description(const String & p_editor_description) : void
+get_editor_description() const : String
+set_editable_instance(Node * p_node, bool p_editable) : void
+is_editable_instance(const Node * p_node) const : bool
+get_deepest_editable_node(Node * start_node) const : Node *
+propagate_notification(int p_notification) : void
+propagate_call(const StringName & p_method, const Array & p_args = Array(), const bool p_parent_first = false) : void
+set_physics_process(bool p_process) : void
+get_physics_process_delta_time() const : float
+is_physics_processing() const : bool
+set_process(bool p_idle_process) : void
+get_process_delta_time() const : float
+is_processing() const : bool
+set_physics_process_internal(bool p_process_internal) : void
+is_physics_processing_internal() const : bool
+set_process_internal(bool p_idle_process_internal) : void
+is_processing_internal() const : bool
+set_process_priority(int p_priority) : void
+get_process_priority() const : int
+set_process_input(bool p_enable) : void
+is_processing_input() const : bool
+set_process_unhandled_input(bool p_enable) : void
+is_processing_unhandled_input() const : bool
+set_process_unhandled_key_input(bool p_enable) : void
+is_processing_unhandled_key_input() const : bool
+get_position_in_parent() const : int
+duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) const : Node *
+duplicate_and_reown(const Map<Node *,Node *> & p_reown_map) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap) const : Node *
+duplicate_from_editor(Map<const Node *,Node *> & r_duplimap, const Map<RES,RES> & p_resource_remap) const : Node *
+remap_node_resources(Node * p_node, const Map<RES,RES> & p_resource_remap) const : void
+remap_nested_resources(RES p_resource, const Map<RES,RES> & p_resource_remap) const : void
+set_scene_instance_state(const Ref<SceneState> & p_state) : void
+get_scene_instance_state() const : Ref<SceneState>
+set_scene_inherited_state(const Ref<SceneState> & p_state) : void
+get_scene_inherited_state() const : Ref<SceneState>
+set_scene_instance_load_placeholder(bool p_enable) : void
+get_scene_instance_load_placeholder() const : bool
{static} +make_binds(const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Vector<Variant>
+replace_by(Node * p_node, bool p_keep_data = false) : void
+set_pause_mode(Node::PauseMode p_mode) : void
+get_pause_mode() const : Node::PauseMode
+can_process() const : bool
+can_process_notification(int p_what) const : bool
+request_ready() : void
{static} +print_stray_nodes() : void
+validate_child_name(Node * p_child) : String
+queue_delete() : void
{static} +set_human_readable_collision_renaming(bool p_enabled) : void
{static} +init_node_hrcr() : void
+force_parent_owned() : void
+set_import_path(const NodePath & p_import_path) : void
+get_import_path() const : NodePath
+is_owned_by_parent() const : bool
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
+clear_internal_tree_resource_paths() : void
+get_viewport() const : Viewport *
+get_configuration_warning() const : String
+update_configuration_warning() : void
+set_display_folded(bool p_folded) : void
+is_displayed_folded() const : bool
+set_network_master(int p_peer_id, bool p_recursive = true) : void
+get_network_master() const : int
+is_network_master() const : bool
+rpc_config(const StringName & p_method, MultiplayerAPI::RPCMode p_mode) : void
+rset_config(const StringName & p_property, MultiplayerAPI::RPCMode p_mode) : void
+rpc(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rpc_unreliable_id(int p_peer_id, const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+rset(const StringName & p_property, const Variant & p_value) : void
+rset_unreliable(const StringName & p_property, const Variant & p_value) : void
+rset_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rset_unreliable_id(int p_peer_id, const StringName & p_property, const Variant & p_value) : void
+rpcp(int p_peer_id, bool p_unreliable, const StringName & p_method, const Variant ** p_arg, int p_argcount) : void
+rsetp(int p_peer_id, bool p_unreliable, const StringName & p_property, const Variant & p_value) : void
+get_multiplayer() const : Ref<MultiplayerAPI>
+get_custom_multiplayer() const : Ref<MultiplayerAPI>
+set_custom_multiplayer(Ref<MultiplayerAPI> p_multiplayer) : void
+get_node_rpc_mode(const StringName & p_method) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+get_node_rset_mode(const StringName & p_property) : const Map<StringName,MultiplayerAPI::RPCMode>::Element *
+Node() : void
+~Node() : void
{static} +orphan_node_count : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./scene/main/node.h#L78{orphan_node_count}]]]
+NOTIFICATION_ENTER_TREE : enum
+NOTIFICATION_EXIT_TREE : enum
+NOTIFICATION_MOVED_IN_PARENT : enum
+NOTIFICATION_READY : enum
+NOTIFICATION_PAUSED : enum
+NOTIFICATION_UNPAUSED : enum
+NOTIFICATION_PHYSICS_PROCESS : enum
+NOTIFICATION_PROCESS : enum
+NOTIFICATION_PARENTED : enum
+NOTIFICATION_UNPARENTED : enum
+NOTIFICATION_INSTANCED : enum
+NOTIFICATION_DRAG_BEGIN : enum
+NOTIFICATION_DRAG_END : enum
+NOTIFICATION_PATH_CHANGED : enum
+NOTIFICATION_INTERNAL_PROCESS : enum
+NOTIFICATION_INTERNAL_PHYSICS_PROCESS : enum
+NOTIFICATION_POST_ENTER_TREE : enum
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_APP_PAUSED : enum
}
class "ObjectRC" as C_0000933379568804427881
class C_0000933379568804427881 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/variant.h#L54{ObjectRC}]] {
+increment() : void
+decrement() : bool
+invalidate() : bool
+get_ptr() : Object *
+ObjectRC(Object * p_object) : void
+instance_id : const ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object_rc.h#L52{instance_id}]]]
}
abstract "ScriptInstance" as C_0001735438654351294549
abstract C_0001735438654351294549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/object.h#L405{ScriptInstance}]] {
{abstract} +set(const StringName & p_name, const Variant & p_value) = 0 : bool
{abstract} +get(const StringName & p_name, Variant & r_ret) const = 0 : bool
{abstract} +get_property_list(List<PropertyInfo> * p_properties) const = 0 : void
{abstract} +get_property_type(const StringName & p_name, bool * r_is_valid = __null) const = 0 : Variant::Type
+get_owner() : Object *
+get_property_state(List<Pair<StringName,Variant>> & state) : void
{abstract} +get_method_list(List<MethodInfo> * p_list) const = 0 : void
{abstract} +has_method(const StringName & p_method) const = 0 : bool
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
{abstract} +call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) = 0 : Variant
+call_multilevel(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+call_multilevel(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
+call_multilevel_reversed(const StringName & p_method, const Variant ** p_args, int p_argcount) : void
{abstract} +notification(int p_notification) = 0 : void
+to_string(bool * r_valid) : String
+refcount_incremented() : void
+refcount_decremented() : bool
{abstract} +get_script() const = 0 : Ref<Script>
+is_placeholder() const : bool
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid) : void
+property_get_fallback(const StringName & p_name, bool * r_valid) : Variant
{abstract} +get_rpc_mode(const StringName & p_method) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_rset_mode(const StringName & p_variable) const = 0 : MultiplayerAPI::RPCMode
{abstract} +get_language() = 0 : ScriptLanguage *
+~ScriptInstance() : void
}
class "PlaceHolderScriptInstance" as C_0001649884439586022807
class C_0001649884439586022807 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/script_language.h#L374{PlaceHolderScriptInstance}]] {
+set(const StringName & p_name, const Variant & p_value) : bool
+get(const StringName & p_name, Variant & r_ret) const : bool
+get_property_list(List<PropertyInfo> * p_properties) const : void
+get_property_type(const StringName & p_name, bool * r_is_valid = __null) const : Variant::Type
+get_method_list(List<MethodInfo> * p_list) const : void
+has_method(const StringName & p_method) const : bool
+call(const StringName & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : Variant
+call(const StringName & p_method, const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+notification(int p_notification) : void
+get_script() const : Ref<Script>
+get_language() : ScriptLanguage *
+get_owner() : Object *
+update(const List<PropertyInfo> & p_properties, const Map<StringName,Variant> & p_values) : void
+is_placeholder() const : bool
+property_set_fallback(const StringName & p_name, const Variant & p_value, bool * r_valid = __null) : void
+property_get_fallback(const StringName & p_name, bool * r_valid = __null) : Variant
+get_rpc_mode(const StringName & p_method) const : MultiplayerAPI::RPCMode
+get_rset_mode(const StringName & p_variable) const : MultiplayerAPI::RPCMode
+PlaceHolderScriptInstance(ScriptLanguage * p_language, Ref<Script> p_script, Object * p_owner) : void
+~PlaceHolderScriptInstance() : void
}
class "MainLoop" as C_0000970940027123558604
class C_0000970940027123558604 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/main_loop.h#L38{MainLoop}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+input_event(const Ref<InputEvent> & p_event) : void
+input_text(const String & p_text) : void
+init() : void
+iteration(float p_time) : bool
+idle(float p_time) : bool
+finish() : void
+drop_files(const Vector<String> & p_files, int p_from_screen = 0) : void
+global_menu_action(const Variant & p_id, const Variant & p_meta) : void
+set_init_script(const Ref<Script> & p_init_script) : void
+MainLoop() : void
+~MainLoop() : void
+NOTIFICATION_WM_MOUSE_ENTER : enum
+NOTIFICATION_WM_MOUSE_EXIT : enum
+NOTIFICATION_WM_FOCUS_IN : enum
+NOTIFICATION_WM_FOCUS_OUT : enum
+NOTIFICATION_WM_QUIT_REQUEST : enum
+NOTIFICATION_WM_GO_BACK_REQUEST : enum
+NOTIFICATION_WM_UNFOCUS_REQUEST : enum
+NOTIFICATION_OS_MEMORY_WARNING : enum
+NOTIFICATION_TRANSLATION_CHANGED : enum
+NOTIFICATION_WM_ABOUT : enum
+NOTIFICATION_CRASH : enum
+NOTIFICATION_OS_IME_UPDATE : enum
+NOTIFICATION_APP_RESUMED : enum
+NOTIFICATION_APP_PAUSED : enum
}
class "Engine::Singleton" as C_0001823345232236209470
class C_0001823345232236209470 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L42{Engine##Singleton}]] {
+Singleton(const StringName & p_name = StringName(), Object * p_ptr = __null) : void
+name : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L43{name}]]]
+ptr : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/engine.h#L44{ptr}]]]
}
class "TranslationServer" as C_0001485048025194488343
class C_0001485048025194488343 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/translation.h#L67{TranslationServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : TranslationServer *
+set_enabled(bool p_enabled) : void
+is_enabled() const : bool
+set_locale(const String & p_locale) : void
+get_locale() const : String
+get_locale_name(const String & p_locale) const : String
+get_loaded_locales() const : Array
+add_translation(const Ref<Translation> & p_translation) : void
+remove_translation(const Ref<Translation> & p_translation) : void
+translate(const StringName & p_message) const : StringName
{static} +get_all_locales() : Vector<String>
{static} +get_all_locale_names() : Vector<String>
{static} +is_locale_valid(const String & p_locale) : bool
{static} +standardize_locale(const String & p_locale) : String
{static} +get_language_code(const String & p_locale) : String
+set_tool_translation(const Ref<Translation> & p_translation) : void
+tool_translate(const StringName & p_message) const : StringName
+setup() : void
+clear() : void
+load_translations() : void
+TranslationServer() : void
}
class "_ObjectDebugLock" as C_0000132048052014479231
class C_0000132048052014479231 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L45{_ObjectDebugLock}]] {
+_ObjectDebugLock(Object * p_obj) : void
+~_ObjectDebugLock() : void
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L47{obj}]]]
}
class "_ObjectSignalDisconnectData" as C_0000115801560197752094
class C_0000115801560197752094 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1147{_ObjectSignalDisconnectData}]] {
+signal : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1149{signal}]]]
+target : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1150{target}]]]
+method : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/object.cpp#L1151{method}]]]
}
class "ProjectSettings" as C_0000066148521405667716
class C_0000066148521405667716 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L38{ProjectSettings}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+set_setting(const String & p_setting, const Variant & p_value) : void
+get_setting(const String & p_setting) const : Variant
+has_setting(String p_var) const : bool
+localize_path(const String & p_path) const : String
+globalize_path(const String & p_path) const : String
+set_initial_value(const String & p_name, const Variant & p_value) : void
+set_restart_if_changed(const String & p_name, bool p_restart) : void
+property_can_revert(const String & p_name) : bool
+property_get_revert(const String & p_name) : Variant
+get_resource_path() const : String
{static} +get_singleton() : ProjectSettings *
+clear(const String & p_name) : void
+get_order(const String & p_name) const : int
+set_order(const String & p_name, int p_order) : void
+set_builtin_order(const String & p_name) : void
+setup(const String & p_path, const String & p_main_pack, bool p_upwards = false) : Error
+save_custom(const String & p_path = "", const ProjectSettings::CustomMap & p_custom = CustomMap(), const Vector<String> & p_custom_features = Vector<String>(), bool p_merge_with_current = true) : Error
+save() : Error
+set_custom_property_info(const String & p_prop, const PropertyInfo & p_info) : void
+get_custom_property_info() const : const Map<StringName,PropertyInfo> &
+get_last_saved_time() : uint64_t
+get_optimizer_presets() const : Vector<String>
+get_input_presets() const : List<String>
+set_disable_feature_overrides(bool p_disable) : void
+is_using_datapack() const : bool
+set_registering_order(bool p_enable) : void
+has_custom_feature(const String & p_feature) const : bool
+ProjectSettings() : void
+~ProjectSettings() : void
+NO_BUILTIN_ORDER_BASE : enum
{static} +CONFIG_VERSION : const int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/project_settings.h#L117{CONFIG_VERSION}]]]
}
abstract "IP" as C_0001191393512042218074
abstract C_0001191393512042218074 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/io/ip.h#L39{IP}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+resolve_hostname(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP_Address
+resolve_hostname_queue_item(const String & p_hostname, IP::Type p_type = TYPE_ANY) : IP::ResolverID
+get_resolve_item_status(IP::ResolverID p_id) const : IP::ResolverStatus
+get_resolve_item_address(IP::ResolverID p_id) const : IP_Address
+get_local_addresses(List<IP_Address> * r_addresses) const : void
{abstract} +get_local_interfaces(Map<String,IP::Interface_Info> * r_interfaces) const = 0 : void
+erase_resolve_item(IP::ResolverID p_id) : void
+clear_cache(const String & p_hostname = "") : void
{static} +get_singleton() : IP *
{static} +create() : IP *
+IP() : void
+~IP() : void
+RESOLVER_MAX_QUERIES : enum
+RESOLVER_INVALID_ID : enum
}
class "_ResourceLoader" as C_0001197720528033242618
class C_0001197720528033242618 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L45{_ResourceLoader}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _ResourceLoader *
+load_interactive(const String & p_path, const String & p_type_hint = "") : Ref<ResourceInteractiveLoader>
+load(const String & p_path, const String & p_type_hint = "", bool p_no_cache = false) : RES
+get_recognized_extensions_for_type(const String & p_type) : PoolVector<String>
+set_abort_on_missing_resources(bool p_abort) : void
+get_dependencies(const String & p_path) : PoolStringArray
+has(const String & p_path) : bool
+has_cached(const String & p_path) : bool
+exists(const String & p_path, const String & p_type_hint = "") : bool
+_ResourceLoader() : void
}
class "_ResourceSaver" as C_0001130773750498288283
class C_0001130773750498288283 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L68{_ResourceSaver}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _ResourceSaver *
+save(const String & p_path, const RES & p_resource, _ResourceSaver::SaverFlags p_flags) : Error
+get_recognized_extensions(const RES & p_resource) : PoolVector<String>
+_ResourceSaver() : void
}
class "_OS" as C_0000790752023609648644
class C_0000790752023609648644 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L99{_OS}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+global_menu_add_item(const String & p_menu, const String & p_label, const Variant & p_signal, const Variant & p_meta) : void
+global_menu_add_separator(const String & p_menu) : void
+global_menu_remove_item(const String & p_menu, int p_idx) : void
+global_menu_clear(const String & p_menu) : void
+get_mouse_position() const : Point2
+set_window_title(const String & p_title) : void
+set_window_mouse_passthrough(const PoolVector2Array & p_region) : void
+get_mouse_button_state() const : int
+set_clipboard(const String & p_text) : void
+get_clipboard() const : String
+set_video_mode(const Size2 & p_size, bool p_fullscreen, bool p_resizeable, int p_screen = 0) : void
+get_video_mode(int p_screen = 0) const : Size2
+is_video_mode_fullscreen(int p_screen = 0) const : bool
+is_video_mode_resizable(int p_screen = 0) const : bool
+get_fullscreen_mode_list(int p_screen = 0) const : Array
+get_video_driver_count() const : int
+get_video_driver_name(_OS::VideoDriver p_driver) const : String
+get_current_video_driver() const : _OS::VideoDriver
+get_audio_driver_count() const : int
+get_audio_driver_name(int p_driver) const : String
+get_connected_midi_inputs() : PoolStringArray
+open_midi_inputs() : void
+close_midi_inputs() : void
+get_screen_count() const : int
+get_current_screen() const : int
+set_current_screen(int p_screen) : void
+get_screen_position(int p_screen = -1) const : Point2
+get_screen_size(int p_screen = -1) const : Size2
+get_screen_dpi(int p_screen = -1) const : int
+get_screen_scale(int p_screen = -1) const : float
+get_screen_max_scale() const : float
+get_window_position() const : Point2
+set_window_position(const Point2 & p_position) : void
+get_max_window_size() const : Size2
+get_min_window_size() const : Size2
+get_window_size() const : Size2
+get_real_window_size() const : Size2
+get_window_safe_area() const : Rect2
+set_max_window_size(const Size2 & p_size) : void
+set_min_window_size(const Size2 & p_size) : void
+set_window_size(const Size2 & p_size) : void
+set_window_fullscreen(bool p_enabled) : void
+is_window_fullscreen() const : bool
+set_window_resizable(bool p_enabled) : void
+is_window_resizable() const : bool
+set_window_minimized(bool p_enabled) : void
+is_window_minimized() const : bool
+set_window_maximized(bool p_enabled) : void
+is_window_maximized() const : bool
+set_window_always_on_top(bool p_enabled) : void
+is_window_always_on_top() const : bool
+is_window_focused() const : bool
+request_attention() : void
+center_window() : void
+move_window_to_foreground() : void
+get_native_handle(_OS::HandleType p_handle_type) : int64_t
+set_borderless_window(bool p_borderless) : void
+get_borderless_window() const : bool
+get_window_per_pixel_transparency_enabled() const : bool
+set_window_per_pixel_transparency_enabled(bool p_enabled) : void
+set_ime_active(const bool p_active) : void
+set_ime_position(const Point2 & p_pos) : void
+get_ime_selection() const : Point2
+get_ime_text() const : String
+native_video_play(String p_path, float p_volume, String p_audio_track, String p_subtitle_track) : Error
+native_video_is_playing() : bool
+native_video_pause() : void
+native_video_unpause() : void
+native_video_stop() : void
+set_low_processor_usage_mode(bool p_enabled) : void
+is_in_low_processor_usage_mode() const : bool
+set_low_processor_usage_mode_sleep_usec(int p_usec) : void
+get_low_processor_usage_mode_sleep_usec() const : int
+get_executable_path() const : String
+execute(const String & p_path, const Vector<String> & p_arguments, bool p_blocking = true, Array p_output = = Array(), bool p_read_stderr = false) : int
+kill(int p_pid) : Error
+shell_open(String p_uri) : Error
+get_process_id() const : int
+has_environment(const String & p_var) const : bool
+get_environment(const String & p_var) const : String
+set_environment(const String & p_var, const String & p_value) const : bool
+get_name() const : String
+get_cmdline_args() : Vector<String>
+get_locale() const : String
+get_latin_keyboard_variant() const : String
+keyboard_get_layout_count() const : int
+keyboard_get_current_layout() const : int
+keyboard_set_current_layout(int p_index) : void
+keyboard_get_layout_language(int p_index) const : String
+keyboard_get_layout_name(int p_index) const : String
+get_model_name() const : String
+dump_memory_to_file(const String & p_file) : void
+dump_resources_to_file(const String & p_file) : void
+has_virtual_keyboard() const : bool
+show_virtual_keyboard(const String & p_existing_text = "", bool p_multiline = false) : void
+hide_virtual_keyboard() : void
+get_virtual_keyboard_height() : int
+print_resources_in_use(bool p_short = false) : void
+print_all_resources(const String & p_to_file) : void
+print_all_textures_by_size() : void
+print_resources_by_type(const Vector<String> & p_types) : void
+has_touchscreen_ui_hint() const : bool
+is_debug_build() const : bool
+get_unique_id() const : String
+get_scancode_string(uint32_t p_code) const : String
+is_scancode_unicode(uint32_t p_unicode) const : bool
+find_scancode_from_string(const String & p_code) const : int
+set_use_file_access_save_and_swap(bool p_enable) : void
+set_native_icon(const String & p_filename) : void
+set_icon(const Ref<Image> & p_icon) : void
+get_exit_code() const : int
+set_exit_code(int p_code) : void
+get_date(bool utc) const : Dictionary
+get_time(bool utc) const : Dictionary
+get_datetime(bool utc) const : Dictionary
+get_datetime_from_unix_time(int64_t unix_time_val) const : Dictionary
+get_unix_time_from_datetime(Dictionary datetime) const : int64_t
+get_time_zone_info() const : Dictionary
+get_unix_time() const : uint64_t
+get_system_time_secs() const : uint64_t
+get_system_time_msecs() const : uint64_t
+get_static_memory_usage() const : uint64_t
+get_static_memory_peak_usage() const : uint64_t
+get_dynamic_memory_usage() const : uint64_t
+delay_usec(int p_usec) const : void
+delay_msec(int p_msec) const : void
+get_ticks_msec() const : uint32_t
+get_ticks_usec() const : uint64_t
+get_splash_tick_msec() const : uint32_t
+can_use_threads() const : bool
+can_draw() const : bool
+is_userfs_persistent() const : bool
+is_stdout_verbose() const : bool
+get_processor_count() const : int
+get_system_dir(_OS::SystemDir p_dir, bool p_shared_storage = true) const : String
+get_user_data_dir() const : String
+alert(const String & p_alert, const String & p_title = "ALERT!") : void
+set_screen_orientation(_OS::ScreenOrientation p_orientation) : void
+get_screen_orientation() const : _OS::ScreenOrientation
+set_keep_screen_on(bool p_enabled) : void
+is_keep_screen_on() const : bool
+is_ok_left_and_cancel_right() const : bool
+set_thread_name(const String & p_name) : Error
+get_thread_caller_id() const : Thread::ID
+set_use_vsync(bool p_enable) : void
+is_vsync_enabled() const : bool
+set_vsync_via_compositor(bool p_enable) : void
+is_vsync_via_compositor_enabled() const : bool
+get_power_state() : _OS::PowerState
+get_power_seconds_left() : int
+get_power_percent_left() : int
+has_feature(const String & p_feature) const : bool
+request_permission(const String & p_name) : bool
+request_permissions() : bool
+get_granted_permissions() const : Vector<String>
+get_tablet_driver_count() const : int
+get_tablet_driver_name(int p_driver) const : String
+get_current_tablet_driver() const : String
+set_current_tablet_driver(const String & p_driver) : void
{static} +get_singleton() : _OS *
+_OS() : void
}
class "_Geometry" as C_0000897221634691489964
class C_0000897221634691489964 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L401{_Geometry}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Geometry *
+build_box_planes(const Vector3 & p_extents) : PoolVector<Plane>
+build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+build_capsule_planes(float p_radius, float p_height, int p_sides, int p_lats, Vector3::Axis p_axis = Vector3::AXIS_Z) : PoolVector<Plane>
+segment_intersects_segment_2d(const Vector2 & p_from_a, const Vector2 & p_to_a, const Vector2 & p_from_b, const Vector2 & p_to_b) : Variant
+line_intersects_line_2d(const Vector2 & p_from_a, const Vector2 & p_dir_a, const Vector2 & p_from_b, const Vector2 & p_dir_b) : Variant
+get_closest_points_between_segments_2d(const Vector2 & p1, const Vector2 & q1, const Vector2 & p2, const Vector2 & q2) : PoolVector<Vector2>
+get_closest_points_between_segments(const Vector3 & p1, const Vector3 & p2, const Vector3 & q1, const Vector3 & q2) : PoolVector<Vector3>
+get_closest_point_to_segment_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_point_to_segment(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+get_closest_point_to_segment_uncapped_2d(const Vector2 & p_point, const Vector2 & p_a, const Vector2 & p_b) : Vector2
+get_closest_point_to_segment_uncapped(const Vector3 & p_point, const Vector3 & p_a, const Vector3 & p_b) : Vector3
+ray_intersects_triangle(const Vector3 & p_from, const Vector3 & p_dir, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+segment_intersects_triangle(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_v0, const Vector3 & p_v1, const Vector3 & p_v2) : Variant
+point_is_inside_triangle(const Vector2 & s, const Vector2 & a, const Vector2 & b, const Vector2 & c) const : bool
+segment_intersects_sphere(const Vector3 & p_from, const Vector3 & p_to, const Vector3 & p_sphere_pos, real_t p_sphere_radius) : PoolVector<Vector3>
+segment_intersects_cylinder(const Vector3 & p_from, const Vector3 & p_to, float p_height, float p_radius) : PoolVector<Vector3>
+segment_intersects_convex(const Vector3 & p_from, const Vector3 & p_to, const Vector<Plane> & p_planes) : PoolVector<Vector3>
+is_point_in_circle(const Vector2 & p_point, const Vector2 & p_circle_pos, real_t p_circle_radius) : bool
+segment_intersects_circle(const Vector2 & p_from, const Vector2 & p_to, const Vector2 & p_circle_pos, real_t p_circle_radius) : real_t
+get_uv84_normal_bit(const Vector3 & p_vector) : int
+is_polygon_clockwise(const Vector<Vector2> & p_polygon) : bool
+is_point_in_polygon(const Point2 & p_point, const Vector<Vector2> & p_polygon) : bool
+triangulate_polygon(const Vector<Vector2> & p_polygon) : Vector<int>
+triangulate_delaunay_2d(const Vector<Vector2> & p_points) : Vector<int>
+convex_hull_2d(const Vector<Point2> & p_points) : Vector<Point2>
+clip_polygon(const Vector<Vector3> & p_points, const Plane & p_plane) : Vector<Vector3>
+merge_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+clip_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+intersect_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+exclude_polygons_2d(const Vector<Vector2> & p_polygon_a, const Vector<Vector2> & p_polygon_b) : Array
+clip_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+intersect_polyline_with_polygon_2d(const Vector<Vector2> & p_polyline, const Vector<Vector2> & p_polygon) : Array
+offset_polygon_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE) : Array
+offset_polyline_2d(const Vector<Vector2> & p_polygon, real_t p_delta, _Geometry::PolyJoinType p_join_type = JOIN_SQUARE, _Geometry::PolyEndType p_end_type = END_SQUARE) : Array
+make_atlas(const Vector<Size2> & p_rects) : Dictionary
+_Geometry() : void
}
class "_Marshalls" as C_0000135188690773659020
class C_0000135188690773659020 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L629{_Marshalls}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Marshalls *
+variant_to_base64(const Variant & p_var, bool p_full_objects = false) : String
+base64_to_variant(const String & p_str, bool p_allow_objects = false) : Variant
+raw_to_base64(const PoolVector<uint8_t> & p_arr) : String
+base64_to_raw(const String & p_str) : PoolVector<uint8_t>
+utf8_to_base64(const String & p_str) : String
+base64_to_utf8(const String & p_str) : String
+_Marshalls() : void
+~_Marshalls() : void
}
class "_Thread" as C_0001150621116588802549
class C_0001150621116588802549 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L679{_Thread}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+start(Object * p_instance, const StringName & p_method, const Variant & p_userdata = Variant(), _Thread::Priority p_priority = PRIORITY_NORMAL) : Error
+get_id() const : String
+is_active() const : bool
+wait_to_finish() : Variant
+_Thread() : void
+~_Thread() : void
}
class "_ClassDB" as C_0001186331261774827872
class C_0001186331261774827872 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L713{_ClassDB}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_class_list() const : PoolStringArray
+get_inheriters_from_class(const StringName & p_class) const : PoolStringArray
+get_parent_class(const StringName & p_class) const : StringName
+class_exists(const StringName & p_class) const : bool
+is_parent_class(const StringName & p_class, const StringName & p_inherits) const : bool
+can_instance(const StringName & p_class) const : bool
+instance(const StringName & p_class) const : Variant
+has_signal(StringName p_class, StringName p_signal) const : bool
+get_signal(StringName p_class, StringName p_signal) const : Dictionary
+get_signal_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_property_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_property(Object * p_object, const StringName & p_property) const : Variant
+set_property(Object * p_object, const StringName & p_property, const Variant & p_value) const : Error
+has_method(StringName p_class, StringName p_method, bool p_no_inheritance = false) const : bool
+get_method_list(StringName p_class, bool p_no_inheritance = false) const : Array
+get_integer_constant_list(const StringName & p_class, bool p_no_inheritance = false) const : PoolStringArray
+has_integer_constant(const StringName & p_class, const StringName & p_name) const : bool
+get_integer_constant(const StringName & p_class, const StringName & p_name) const : int
+get_category(const StringName & p_node) const : StringName
+is_class_enabled(StringName p_class) const : bool
+_ClassDB() : void
+~_ClassDB() : void
}
class "_Engine" as C_0001895218672297528471
class C_0001895218672297528471 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L752{_Engine}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _Engine *
+set_iterations_per_second(int p_ips) : void
+get_iterations_per_second() const : int
+set_physics_jitter_fix(float p_threshold) : void
+get_physics_jitter_fix() const : float
+get_physics_interpolation_fraction() const : float
+set_target_fps(int p_fps) : void
+get_target_fps() const : int
+get_frames_per_second() const : float
+get_physics_frames() const : uint64_t
+get_idle_frames() const : uint64_t
+get_frames_drawn() : int
+set_time_scale(float p_scale) : void
+get_time_scale() : float
+get_main_loop() const : MainLoop *
+get_version_info() const : Dictionary
+get_author_info() const : Dictionary
+get_copyright_info() const : Array
+get_donor_info() const : Dictionary
+get_license_info() const : Dictionary
+get_license_text() const : String
+is_in_physics_frame() const : bool
+has_singleton(const String & p_name) const : bool
+get_singleton_object(const String & p_name) const : Object *
+set_editor_hint(bool p_enabled) : void
+is_editor_hint() const : bool
+_Engine() : void
}
class "_JSON" as C_0000979065355535690103
class C_0000979065355535690103 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/bind/core_bind.h#L833{_JSON}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : _JSON *
+print(const Variant & p_value, const String & p_indent = "", bool p_sort_keys = false) : String
+parse(const String & p_json) : Ref<JSONParseResult>
+_JSON() : void
}
class "CameraServer" as C_0001701907280759632930
class C_0001701907280759632930 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/camera_server.h#L49{CameraServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : CameraServer *
{static} +create() : CameraServer *
+get_free_id() : int
+get_feed_index(int p_id) : int
+get_feed_by_id(int p_id) : Ref<CameraFeed>
+add_feed(const Ref<CameraFeed> & p_feed) : void
+remove_feed(const Ref<CameraFeed> & p_feed) : void
+get_feed(int p_index) : Ref<CameraFeed>
+get_feed_count() : int
+get_feeds() : Array
+feed_texture(int p_id, CameraServer::FeedImage p_texture) : RID
+CameraServer() : void
+~CameraServer() : void
{static} +make_default<T>() : void
}
abstract "VisualServer" as C_0001589464385186808769
abstract C_0001589464385186808769 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/visual_server.h#L42{VisualServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : VisualServer *
{static} +create() : VisualServer *
{abstract} +texture_create() = 0 : RID
+texture_create_from_image(const Ref<Image> & p_image, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) : RID
{abstract} +texture_allocate(RID p_texture, int p_width, int p_height, int p_depth_3d, Image::Format p_format, VisualServer::TextureType p_type, uint32_t p_flags = TEXTURE_FLAGS_DEFAULT) = 0 : void
{abstract} +texture_set_data(RID p_texture, const Ref<Image> & p_image, int p_layer = 0) = 0 : void
{abstract} +texture_set_data_partial(RID p_texture, const Ref<Image> & p_image, int src_x, int src_y, int src_w, int src_h, int dst_x, int dst_y, int p_dst_mip, int p_layer = 0) = 0 : void
{abstract} +texture_get_data(RID p_texture, int p_layer = 0) const = 0 : Ref<Image>
{abstract} +texture_set_flags(RID p_texture, uint32_t p_flags) = 0 : void
{abstract} +texture_get_flags(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_format(RID p_texture) const = 0 : Image::Format
{abstract} +texture_get_type(RID p_texture) const = 0 : VisualServer::TextureType
{abstract} +texture_get_texid(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_width(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_height(RID p_texture) const = 0 : uint32_t
{abstract} +texture_get_depth(RID p_texture) const = 0 : uint32_t
{abstract} +texture_set_size_override(RID p_texture, int p_width, int p_height, int p_depth_3d) = 0 : void
{abstract} +texture_bind(RID p_texture, uint32_t p_texture_no) = 0 : void
{abstract} +texture_set_path(RID p_texture, const String & p_path) = 0 : void
{abstract} +texture_get_path(RID p_texture) const = 0 : String
{abstract} +texture_set_shrink_all_x2_on_set_data(bool p_enable) = 0 : void
{abstract} +texture_set_detect_3d_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_srgb_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_set_detect_normal_callback(RID p_texture, VisualServer::TextureDetectCallback p_callback, void * p_userdata) = 0 : void
{abstract} +texture_debug_usage(List<VisualServer::TextureInfo> * r_info) = 0 : void
+_texture_debug_usage_bind() : Array
{abstract} +textures_keep_original(bool p_enable) = 0 : void
{abstract} +texture_set_proxy(RID p_proxy, RID p_base) = 0 : void
{abstract} +texture_set_force_redraw_if_visible(RID p_texture, bool p_enable) = 0 : void
{abstract} +sky_create() = 0 : RID
{abstract} +sky_set_texture(RID p_sky, RID p_cube_map, int p_radiance_size) = 0 : void
{abstract} +shader_create() = 0 : RID
{abstract} +shader_set_code(RID p_shader, const String & p_code) = 0 : void
{abstract} +shader_get_code(RID p_shader) const = 0 : String
{abstract} +shader_get_param_list(RID p_shader, List<PropertyInfo> * p_param_list) const = 0 : void
+_shader_get_param_list_bind(RID p_shader) const : Array
{abstract} +shader_set_default_texture_param(RID p_shader, const StringName & p_name, RID p_texture) = 0 : void
{abstract} +shader_get_default_texture_param(RID p_shader, const StringName & p_name) const = 0 : RID
{abstract} +shader_add_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +shader_get_custom_defines(RID p_shader, Vector<String> * p_defines) const = 0 : void
{abstract} +shader_remove_custom_define(RID p_shader, const String & p_define) = 0 : void
{abstract} +material_create() = 0 : RID
{abstract} +material_set_shader(RID p_shader_material, RID p_shader) = 0 : void
{abstract} +material_get_shader(RID p_shader_material) const = 0 : RID
{abstract} +material_set_param(RID p_material, const StringName & p_param, const Variant & p_value) = 0 : void
{abstract} +material_get_param(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_get_param_default(RID p_material, const StringName & p_param) const = 0 : Variant
{abstract} +material_set_render_priority(RID p_material, int priority) = 0 : void
{abstract} +material_set_line_width(RID p_material, float p_width) = 0 : void
{abstract} +material_set_next_pass(RID p_material, RID p_next_material) = 0 : void
{abstract} +mesh_create() = 0 : RID
+mesh_surface_get_format_offset(uint32_t p_format, int p_vertex_len, int p_index_len, int p_array_index) const : uint32_t
+mesh_surface_get_format_stride(uint32_t p_format, int p_vertex_len, int p_index_len) const : uint32_t
+mesh_surface_make_offsets_from_format(uint32_t p_format, int p_vertex_len, int p_index_len, uint32_t * r_offsets) const : uint32_t
+mesh_add_surface_from_arrays(RID p_mesh, VisualServer::PrimitiveType p_primitive, const Array & p_arrays, const Array & p_blend_shapes = Array(), uint32_t p_compress_format = ARRAY_COMPRESS_DEFAULT) : void
{abstract} +mesh_add_surface(RID p_mesh, uint32_t p_format, VisualServer::PrimitiveType p_primitive, const PoolVector<uint8_t> & p_array, int p_vertex_count, const PoolVector<uint8_t> & p_index_array, int p_index_count, const AABB & p_aabb, const Vector<PoolVector<uint8_t>> & p_blend_shapes = Vector<PoolVector<uint8_t> >(), const Vector<AABB> & p_bone_aabbs = Vector<AABB>()) = 0 : void
{abstract} +mesh_set_blend_shape_count(RID p_mesh, int p_amount) = 0 : void
{abstract} +mesh_get_blend_shape_count(RID p_mesh) const = 0 : int
{abstract} +mesh_set_blend_shape_mode(RID p_mesh, VisualServer::BlendShapeMode p_mode) = 0 : void
{abstract} +mesh_get_blend_shape_mode(RID p_mesh) const = 0 : VisualServer::BlendShapeMode
{abstract} +mesh_surface_update_region(RID p_mesh, int p_surface, int p_offset, const PoolVector<uint8_t> & p_data) = 0 : void
{abstract} +mesh_surface_set_material(RID p_mesh, int p_surface, RID p_material) = 0 : void
{abstract} +mesh_surface_get_material(RID p_mesh, int p_surface) const = 0 : RID
{abstract} +mesh_surface_get_array_len(RID p_mesh, int p_surface) const = 0 : int
{abstract} +mesh_surface_get_array_index_len(RID p_mesh, int p_surface) const = 0 : int
{abstract} +mesh_surface_get_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
{abstract} +mesh_surface_get_index_array(RID p_mesh, int p_surface) const = 0 : PoolVector<uint8_t>
+mesh_surface_get_arrays(RID p_mesh, int p_surface) const : Array
+mesh_surface_get_blend_shape_arrays(RID p_mesh, int p_surface) const : Array
{abstract} +mesh_surface_get_format(RID p_mesh, int p_surface) const = 0 : uint32_t
{abstract} +mesh_surface_get_primitive_type(RID p_mesh, int p_surface) const = 0 : VisualServer::PrimitiveType
{abstract} +mesh_surface_get_aabb(RID p_mesh, int p_surface) const = 0 : AABB
{abstract} +mesh_surface_get_blend_shapes(RID p_mesh, int p_surface) const = 0 : Vector<PoolVector<uint8_t>>
{abstract} +mesh_surface_get_skeleton_aabb(RID p_mesh, int p_surface) const = 0 : Vector<AABB>
+_mesh_surface_get_skeleton_aabb_bind(RID p_mesh, int p_surface) const : Array
{abstract} +mesh_remove_surface(RID p_mesh, int p_index) = 0 : void
{abstract} +mesh_get_surface_count(RID p_mesh) const = 0 : int
{abstract} +mesh_set_custom_aabb(RID p_mesh, const AABB & p_aabb) = 0 : void
{abstract} +mesh_get_custom_aabb(RID p_mesh) const = 0 : AABB
{abstract} +mesh_clear(RID p_mesh) = 0 : void
{abstract} +multimesh_create() = 0 : RID
{abstract} +multimesh_allocate(RID p_multimesh, int p_instances, VisualServer::MultimeshTransformFormat p_transform_format, VisualServer::MultimeshColorFormat p_color_format, VisualServer::MultimeshCustomDataFormat p_data_format = MULTIMESH_CUSTOM_DATA_NONE) = 0 : void
{abstract} +multimesh_get_instance_count(RID p_multimesh) const = 0 : int
{abstract} +multimesh_set_mesh(RID p_multimesh, RID p_mesh) = 0 : void
{abstract} +multimesh_instance_set_transform(RID p_multimesh, int p_index, const Transform & p_transform) = 0 : void
{abstract} +multimesh_instance_set_transform_2d(RID p_multimesh, int p_index, const Transform2D & p_transform) = 0 : void
{abstract} +multimesh_instance_set_color(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_instance_set_custom_data(RID p_multimesh, int p_index, const Color & p_color) = 0 : void
{abstract} +multimesh_get_mesh(RID p_multimesh) const = 0 : RID
{abstract} +multimesh_get_aabb(RID p_multimesh) const = 0 : AABB
{abstract} +multimesh_instance_get_transform(RID p_multimesh, int p_index) const = 0 : Transform
{abstract} +multimesh_instance_get_transform_2d(RID p_multimesh, int p_index) const = 0 : Transform2D
{abstract} +multimesh_instance_get_color(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_instance_get_custom_data(RID p_multimesh, int p_index) const = 0 : Color
{abstract} +multimesh_set_as_bulk_array(RID p_multimesh, const PoolVector<float> & p_array) = 0 : void
{abstract} +multimesh_set_visible_instances(RID p_multimesh, int p_visible) = 0 : void
{abstract} +multimesh_get_visible_instances(RID p_multimesh) const = 0 : int
{abstract} +immediate_create() = 0 : RID
{abstract} +immediate_begin(RID p_immediate, VisualServer::PrimitiveType p_rimitive, RID p_texture = = RID()) = 0 : void
{abstract} +immediate_vertex(RID p_immediate, const Vector3 & p_vertex) = 0 : void
+immediate_vertex_2d(RID p_immediate, const Vector2 & p_vertex) : void
{abstract} +immediate_normal(RID p_immediate, const Vector3 & p_normal) = 0 : void
{abstract} +immediate_tangent(RID p_immediate, const Plane & p_tangent) = 0 : void
{abstract} +immediate_color(RID p_immediate, const Color & p_color) = 0 : void
{abstract} +immediate_uv(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_uv2(RID p_immediate, const Vector2 & tex_uv) = 0 : void
{abstract} +immediate_end(RID p_immediate) = 0 : void
{abstract} +immediate_clear(RID p_immediate) = 0 : void
{abstract} +immediate_set_material(RID p_immediate, RID p_material) = 0 : void
{abstract} +immediate_get_material(RID p_immediate) const = 0 : RID
{abstract} +skeleton_create() = 0 : RID
{abstract} +skeleton_allocate(RID p_skeleton, int p_bones, bool p_2d_skeleton = false) = 0 : void
{abstract} +skeleton_get_bone_count(RID p_skeleton) const = 0 : int
{abstract} +skeleton_bone_set_transform(RID p_skeleton, int p_bone, const Transform & p_transform) = 0 : void
{abstract} +skeleton_bone_get_transform(RID p_skeleton, int p_bone) const = 0 : Transform
{abstract} +skeleton_bone_set_transform_2d(RID p_skeleton, int p_bone, const Transform2D & p_transform) = 0 : void
{abstract} +skeleton_bone_get_transform_2d(RID p_skeleton, int p_bone) const = 0 : Transform2D
{abstract} +skeleton_set_base_transform_2d(RID p_skeleton, const Transform2D & p_base_transform) = 0 : void
{abstract} +directional_light_create() = 0 : RID
{abstract} +omni_light_create() = 0 : RID
{abstract} +spot_light_create() = 0 : RID
{abstract} +light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_param(RID p_light, VisualServer::LightParam p_param, float p_value) = 0 : void
{abstract} +light_set_shadow(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +light_set_projector(RID p_light, RID p_texture) = 0 : void
{abstract} +light_set_negative(RID p_light, bool p_enable) = 0 : void
{abstract} +light_set_cull_mask(RID p_light, uint32_t p_mask) = 0 : void
{abstract} +light_set_reverse_cull_face_mode(RID p_light, bool p_enabled) = 0 : void
{abstract} +light_set_use_gi(RID p_light, bool p_enable) = 0 : void
{abstract} +light_set_bake_mode(RID p_light, VisualServer::LightBakeMode p_bake_mode) = 0 : void
{abstract} +light_omni_set_shadow_mode(RID p_light, VisualServer::LightOmniShadowMode p_mode) = 0 : void
{abstract} +light_omni_set_shadow_detail(RID p_light, VisualServer::LightOmniShadowDetail p_detail) = 0 : void
{abstract} +light_directional_set_shadow_mode(RID p_light, VisualServer::LightDirectionalShadowMode p_mode) = 0 : void
{abstract} +light_directional_set_blend_splits(RID p_light, bool p_enable) = 0 : void
{abstract} +light_directional_set_shadow_depth_range_mode(RID p_light, VisualServer::LightDirectionalShadowDepthRangeMode p_range_mode) = 0 : void
{abstract} +reflection_probe_create() = 0 : RID
{abstract} +reflection_probe_set_update_mode(RID p_probe, VisualServer::ReflectionProbeUpdateMode p_mode) = 0 : void
{abstract} +reflection_probe_set_intensity(RID p_probe, float p_intensity) = 0 : void
{abstract} +reflection_probe_set_interior_ambient(RID p_probe, const Color & p_color) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_energy(RID p_probe, float p_energy) = 0 : void
{abstract} +reflection_probe_set_interior_ambient_probe_contribution(RID p_probe, float p_contrib) = 0 : void
{abstract} +reflection_probe_set_max_distance(RID p_probe, float p_distance) = 0 : void
{abstract} +reflection_probe_set_extents(RID p_probe, const Vector3 & p_extents) = 0 : void
{abstract} +reflection_probe_set_origin_offset(RID p_probe, const Vector3 & p_offset) = 0 : void
{abstract} +reflection_probe_set_as_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_enable_box_projection(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_enable_shadows(RID p_probe, bool p_enable) = 0 : void
{abstract} +reflection_probe_set_cull_mask(RID p_probe, uint32_t p_layers) = 0 : void
{abstract} +reflection_probe_set_resolution(RID p_probe, int p_resolution) = 0 : void
{abstract} +gi_probe_create() = 0 : RID
{abstract} +gi_probe_set_bounds(RID p_probe, const AABB & p_bounds) = 0 : void
{abstract} +gi_probe_get_bounds(RID p_probe) const = 0 : AABB
{abstract} +gi_probe_set_cell_size(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_cell_size(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_to_cell_xform(RID p_probe, const Transform & p_xform) = 0 : void
{abstract} +gi_probe_get_to_cell_xform(RID p_probe) const = 0 : Transform
{abstract} +gi_probe_set_dynamic_data(RID p_probe, const PoolVector<int> & p_data) = 0 : void
{abstract} +gi_probe_get_dynamic_data(RID p_probe) const = 0 : PoolVector<int>
{abstract} +gi_probe_set_dynamic_range(RID p_probe, int p_range) = 0 : void
{abstract} +gi_probe_get_dynamic_range(RID p_probe) const = 0 : int
{abstract} +gi_probe_set_energy(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_energy(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_normal_bias(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_normal_bias(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_propagation(RID p_probe, float p_range) = 0 : void
{abstract} +gi_probe_get_propagation(RID p_probe) const = 0 : float
{abstract} +gi_probe_set_interior(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_is_interior(RID p_probe) const = 0 : bool
{abstract} +gi_probe_set_compress(RID p_probe, bool p_enable) = 0 : void
{abstract} +gi_probe_is_compressed(RID p_probe) const = 0 : bool
{abstract} +lightmap_capture_create() = 0 : RID
{abstract} +lightmap_capture_set_bounds(RID p_capture, const AABB & p_bounds) = 0 : void
{abstract} +lightmap_capture_get_bounds(RID p_capture) const = 0 : AABB
{abstract} +lightmap_capture_set_octree(RID p_capture, const PoolVector<uint8_t> & p_octree) = 0 : void
{abstract} +lightmap_capture_set_octree_cell_transform(RID p_capture, const Transform & p_xform) = 0 : void
{abstract} +lightmap_capture_get_octree_cell_transform(RID p_capture) const = 0 : Transform
{abstract} +lightmap_capture_set_octree_cell_subdiv(RID p_capture, int p_subdiv) = 0 : void
{abstract} +lightmap_capture_get_octree_cell_subdiv(RID p_capture) const = 0 : int
{abstract} +lightmap_capture_get_octree(RID p_capture) const = 0 : PoolVector<uint8_t>
{abstract} +lightmap_capture_set_energy(RID p_capture, float p_energy) = 0 : void
{abstract} +lightmap_capture_get_energy(RID p_capture) const = 0 : float
{abstract} +lightmap_capture_set_interior(RID p_capture, bool p_interior) = 0 : void
{abstract} +lightmap_capture_is_interior(RID p_capture) const = 0 : bool
{abstract} +particles_create() = 0 : RID
{abstract} +particles_set_emitting(RID p_particles, bool p_emitting) = 0 : void
{abstract} +particles_get_emitting(RID p_particles) = 0 : bool
{abstract} +particles_set_amount(RID p_particles, int p_amount) = 0 : void
{abstract} +particles_set_lifetime(RID p_particles, float p_lifetime) = 0 : void
{abstract} +particles_set_one_shot(RID p_particles, bool p_one_shot) = 0 : void
{abstract} +particles_set_pre_process_time(RID p_particles, float p_time) = 0 : void
{abstract} +particles_set_explosiveness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_randomness_ratio(RID p_particles, float p_ratio) = 0 : void
{abstract} +particles_set_custom_aabb(RID p_particles, const AABB & p_aabb) = 0 : void
{abstract} +particles_set_speed_scale(RID p_particles, float p_scale) = 0 : void
{abstract} +particles_set_use_local_coordinates(RID p_particles, bool p_enable) = 0 : void
{abstract} +particles_set_process_material(RID p_particles, RID p_material) = 0 : void
{abstract} +particles_set_fixed_fps(RID p_particles, int p_fps) = 0 : void
{abstract} +particles_set_fractional_delta(RID p_particles, bool p_enable) = 0 : void
{abstract} +particles_is_inactive(RID p_particles) = 0 : bool
{abstract} +particles_request_process(RID p_particles) = 0 : void
{abstract} +particles_restart(RID p_particles) = 0 : void
{abstract} +particles_set_draw_order(RID p_particles, VisualServer::ParticlesDrawOrder p_order) = 0 : void
{abstract} +particles_set_draw_passes(RID p_particles, int p_count) = 0 : void
{abstract} +particles_set_draw_pass_mesh(RID p_particles, int p_pass, RID p_mesh) = 0 : void
{abstract} +particles_get_current_aabb(RID p_particles) = 0 : AABB
{abstract} +particles_set_emission_transform(RID p_particles, const Transform & p_transform) = 0 : void
{abstract} +camera_create() = 0 : RID
{abstract} +camera_set_perspective(RID p_camera, float p_fovy_degrees, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_orthogonal(RID p_camera, float p_size, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_frustum(RID p_camera, float p_size, Vector2 p_offset, float p_z_near, float p_z_far) = 0 : void
{abstract} +camera_set_transform(RID p_camera, const Transform & p_transform) = 0 : void
{abstract} +camera_set_cull_mask(RID p_camera, uint32_t p_layers) = 0 : void
{abstract} +camera_set_environment(RID p_camera, RID p_env) = 0 : void
{abstract} +camera_set_use_vertical_aspect(RID p_camera, bool p_enable) = 0 : void
{abstract} +viewport_create() = 0 : RID
{abstract} +viewport_set_use_arvr(RID p_viewport, bool p_use_arvr) = 0 : void
{abstract} +viewport_set_size(RID p_viewport, int p_width, int p_height) = 0 : void
{abstract} +viewport_set_active(RID p_viewport, bool p_active) = 0 : void
{abstract} +viewport_set_parent_viewport(RID p_viewport, RID p_parent_viewport) = 0 : void
{abstract} +viewport_attach_to_screen(RID p_viewport, const Rect2 & p_rect = Rect2(), int p_screen = 0) = 0 : void
{abstract} +viewport_set_render_direct_to_screen(RID p_viewport, bool p_enable) = 0 : void
{abstract} +viewport_detach(RID p_viewport) = 0 : void
{abstract} +viewport_set_update_mode(RID p_viewport, VisualServer::ViewportUpdateMode p_mode) = 0 : void
{abstract} +viewport_set_vflip(RID p_viewport, bool p_enable) = 0 : void
{abstract} +viewport_set_clear_mode(RID p_viewport, VisualServer::ViewportClearMode p_clear_mode) = 0 : void
{abstract} +viewport_get_texture(RID p_viewport) const = 0 : RID
{abstract} +viewport_set_hide_scenario(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_hide_canvas(RID p_viewport, bool p_hide) = 0 : void
{abstract} +viewport_set_disable_environment(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_disable_3d(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_set_keep_3d_linear(RID p_viewport, bool p_disable) = 0 : void
{abstract} +viewport_attach_camera(RID p_viewport, RID p_camera) = 0 : void
{abstract} +viewport_set_scenario(RID p_viewport, RID p_scenario) = 0 : void
{abstract} +viewport_attach_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_remove_canvas(RID p_viewport, RID p_canvas) = 0 : void
{abstract} +viewport_set_canvas_transform(RID p_viewport, RID p_canvas, const Transform2D & p_offset) = 0 : void
{abstract} +viewport_set_transparent_background(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_global_canvas_transform(RID p_viewport, const Transform2D & p_transform) = 0 : void
{abstract} +viewport_set_canvas_stacking(RID p_viewport, RID p_canvas, int p_layer, int p_sublayer) = 0 : void
{abstract} +viewport_set_shadow_atlas_size(RID p_viewport, int p_size) = 0 : void
{abstract} +viewport_set_shadow_atlas_quadrant_subdivision(RID p_viewport, int p_quadrant, int p_subdiv) = 0 : void
{abstract} +viewport_set_msaa(RID p_viewport, VisualServer::ViewportMSAA p_msaa) = 0 : void
{abstract} +viewport_set_use_fxaa(RID p_viewport, bool p_fxaa) = 0 : void
{abstract} +viewport_set_use_debanding(RID p_viewport, bool p_debanding) = 0 : void
{abstract} +viewport_set_hdr(RID p_viewport, bool p_enabled) = 0 : void
{abstract} +viewport_set_usage(RID p_viewport, VisualServer::ViewportUsage p_usage) = 0 : void
{abstract} +viewport_get_render_info(RID p_viewport, VisualServer::ViewportRenderInfo p_info) = 0 : int
{abstract} +viewport_set_debug_draw(RID p_viewport, VisualServer::ViewportDebugDraw p_draw) = 0 : void
{abstract} +environment_create() = 0 : RID
{abstract} +environment_set_background(RID p_env, VisualServer::EnvironmentBG p_bg) = 0 : void
{abstract} +environment_set_sky(RID p_env, RID p_sky) = 0 : void
{abstract} +environment_set_sky_custom_fov(RID p_env, float p_scale) = 0 : void
{abstract} +environment_set_sky_orientation(RID p_env, const Basis & p_orientation) = 0 : void
{abstract} +environment_set_bg_color(RID p_env, const Color & p_color) = 0 : void
{abstract} +environment_set_bg_energy(RID p_env, float p_energy) = 0 : void
{abstract} +environment_set_canvas_max_layer(RID p_env, int p_max_layer) = 0 : void
{abstract} +environment_set_ambient_light(RID p_env, const Color & p_color, float p_energy = 1.0, float p_sky_contribution = 0.0) = 0 : void
{abstract} +environment_set_camera_feed_id(RID p_env, int p_camera_feed_id) = 0 : void
{abstract} +environment_set_dof_blur_near(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_dof_blur_far(RID p_env, bool p_enable, float p_distance, float p_transition, float p_far_amount, VisualServer::EnvironmentDOFBlurQuality p_quality) = 0 : void
{abstract} +environment_set_glow(RID p_env, bool p_enable, int p_level_flags, float p_intensity, float p_strength, float p_bloom_threshold, VisualServer::EnvironmentGlowBlendMode p_blend_mode, float p_hdr_bleed_threshold, float p_hdr_bleed_scale, float p_hdr_luminance_cap, bool p_bicubic_upscale) = 0 : void
{abstract} +environment_set_tonemap(RID p_env, VisualServer::EnvironmentToneMapper p_tone_mapper, float p_exposure, float p_white, bool p_auto_exposure, float p_min_luminance, float p_max_luminance, float p_auto_exp_speed, float p_auto_exp_grey) = 0 : void
{abstract} +environment_set_adjustment(RID p_env, bool p_enable, float p_brightness, float p_contrast, float p_saturation, RID p_ramp) = 0 : void
{abstract} +environment_set_ssr(RID p_env, bool p_enable, int p_max_steps, float p_fade_in, float p_fade_out, float p_depth_tolerance, bool p_roughness) = 0 : void
{abstract} +environment_set_ssao(RID p_env, bool p_enable, float p_radius, float p_intensity, float p_radius2, float p_intensity2, float p_bias, float p_light_affect, float p_ao_channel_affect, const Color & p_color, VisualServer::EnvironmentSSAOQuality p_quality, VisualServer::EnvironmentSSAOBlur p_blur, float p_bilateral_sharpness) = 0 : void
{abstract} +environment_set_fog(RID p_env, bool p_enable, const Color & p_color, const Color & p_sun_color, float p_sun_amount) = 0 : void
{abstract} +environment_set_fog_depth(RID p_env, bool p_enable, float p_depth_begin, float p_depth_end, float p_depth_curve, bool p_transmit, float p_transmit_curve) = 0 : void
{abstract} +environment_set_fog_height(RID p_env, bool p_enable, float p_min_height, float p_max_height, float p_height_curve) = 0 : void
{abstract} +scenario_create() = 0 : RID
{abstract} +scenario_set_debug(RID p_scenario, VisualServer::ScenarioDebugMode p_debug_mode) = 0 : void
{abstract} +scenario_set_environment(RID p_scenario, RID p_environment) = 0 : void
{abstract} +scenario_set_reflection_atlas_size(RID p_scenario, int p_size, int p_subdiv) = 0 : void
{abstract} +scenario_set_fallback_environment(RID p_scenario, RID p_environment) = 0 : void
+instance_create2(RID p_base, RID p_scenario) : RID
{abstract} +instance_create() = 0 : RID
{abstract} +instance_set_base(RID p_instance, RID p_base) = 0 : void
{abstract} +instance_set_scenario(RID p_instance, RID p_scenario) = 0 : void
{abstract} +instance_set_layer_mask(RID p_instance, uint32_t p_mask) = 0 : void
{abstract} +instance_set_transform(RID p_instance, const Transform & p_transform) = 0 : void
{abstract} +instance_attach_object_instance_id(RID p_instance, ObjectID p_id) = 0 : void
{abstract} +instance_set_blend_shape_weight(RID p_instance, int p_shape, float p_weight) = 0 : void
{abstract} +instance_set_surface_material(RID p_instance, int p_surface, RID p_material) = 0 : void
{abstract} +instance_set_visible(RID p_instance, bool p_visible) = 0 : void
{abstract} +instance_set_use_lightmap(RID p_instance, RID p_lightmap_instance, RID p_lightmap, int p_lightmap_slice, const Rect2 & p_lightmap_uv_rect) = 0 : void
{abstract} +instance_set_custom_aabb(RID p_instance, AABB aabb) = 0 : void
{abstract} +instance_attach_skeleton(RID p_instance, RID p_skeleton) = 0 : void
{abstract} +instance_set_exterior(RID p_instance, bool p_enabled) = 0 : void
{abstract} +instance_set_extra_visibility_margin(RID p_instance, real_t p_margin) = 0 : void
{abstract} +instances_cull_aabb(const AABB & p_aabb, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_ray(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
{abstract} +instances_cull_convex(const Vector<Plane> & p_convex, RID p_scenario = = RID()) const = 0 : Vector<ObjectID>
+_instances_cull_aabb_bind(const AABB & p_aabb, RID p_scenario = = RID()) const : Array
+_instances_cull_ray_bind(const Vector3 & p_from, const Vector3 & p_to, RID p_scenario = = RID()) const : Array
+_instances_cull_convex_bind(const Array & p_convex, RID p_scenario = = RID()) const : Array
{abstract} +instance_geometry_set_flag(RID p_instance, VisualServer::InstanceFlags p_flags, bool p_enabled) = 0 : void
{abstract} +instance_geometry_set_cast_shadows_setting(RID p_instance, VisualServer::ShadowCastingSetting p_shadow_casting_setting) = 0 : void
{abstract} +instance_geometry_set_material_override(RID p_instance, RID p_material) = 0 : void
{abstract} +instance_geometry_set_draw_range(RID p_instance, float p_min, float p_max, float p_min_margin, float p_max_margin) = 0 : void
{abstract} +instance_geometry_set_as_instance_lod(RID p_instance, RID p_as_lod_of_instance) = 0 : void
{abstract} +canvas_create() = 0 : RID
{abstract} +canvas_set_item_mirroring(RID p_canvas, RID p_item, const Point2 & p_mirroring) = 0 : void
{abstract} +canvas_set_modulate(RID p_canvas, const Color & p_color) = 0 : void
{abstract} +canvas_set_parent(RID p_canvas, RID p_parent, float p_scale) = 0 : void
{abstract} +canvas_set_disable_scale(bool p_disable) = 0 : void
{abstract} +canvas_item_create() = 0 : RID
{abstract} +canvas_item_set_parent(RID p_item, RID p_parent) = 0 : void
{abstract} +canvas_item_set_visible(RID p_item, bool p_visible) = 0 : void
{abstract} +canvas_item_set_light_mask(RID p_item, int p_mask) = 0 : void
{abstract} +canvas_item_set_update_when_visible(RID p_item, bool p_update) = 0 : void
{abstract} +canvas_item_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_set_clip(RID p_item, bool p_clip) = 0 : void
{abstract} +canvas_item_set_distance_field_mode(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_custom_rect(RID p_item, bool p_custom_rect, const Rect2 & p_rect = Rect2()) = 0 : void
{abstract} +canvas_item_set_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_self_modulate(RID p_item, const Color & p_color) = 0 : void
{abstract} +canvas_item_set_draw_behind_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_add_line(RID p_item, const Point2 & p_from, const Point2 & p_to, const Color & p_color, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_polyline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_multiline(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, float p_width = 1.0, bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_rect(RID p_item, const Rect2 & p_rect, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_circle(RID p_item, const Point2 & p_pos, float p_radius, const Color & p_color) = 0 : void
{abstract} +canvas_item_add_texture_rect(RID p_item, const Rect2 & p_rect, RID p_texture, bool p_tile = false, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_texture_rect_region(RID p_item, const Rect2 & p_rect, RID p_texture, const Rect2 & p_src_rect, const Color & p_modulate = Color(1, 1, 1), bool p_transpose = false, RID p_normal_map = = RID(), bool p_clip_uv = false) = 0 : void
{abstract} +canvas_item_add_nine_patch(RID p_item, const Rect2 & p_rect, const Rect2 & p_source, RID p_texture, const Vector2 & p_topleft, const Vector2 & p_bottomright, VisualServer::NinePatchAxisMode p_x_axis_mode = NINE_PATCH_STRETCH, VisualServer::NinePatchAxisMode p_y_axis_mode = NINE_PATCH_STRETCH, bool p_draw_center = true, const Color & p_modulate = Color(1, 1, 1), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_primitive(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs, RID p_texture, float p_width = 1.0, RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_polygon(RID p_item, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), RID p_texture = = RID(), RID p_normal_map = = RID(), bool p_antialiased = false) = 0 : void
{abstract} +canvas_item_add_triangle_array(RID p_item, const Vector<int> & p_indices, const Vector<Point2> & p_points, const Vector<Color> & p_colors, const Vector<Point2> & p_uvs = Vector<Point2>(), const Vector<int> & p_bones = Vector<int>(), const Vector<float> & p_weights = Vector<float>(), RID p_texture = = RID(), int p_count = -1, RID p_normal_map = = RID(), bool p_antialiased = false, bool p_antialiasing_use_indices = false) = 0 : void
{abstract} +canvas_item_add_mesh(RID p_item, const RID & p_mesh, const Transform2D & p_transform = Transform2D(), const Color & p_modulate = Color(1, 1, 1), RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_multimesh(RID p_item, RID p_mesh, RID p_texture = = RID(), RID p_normal_map = = RID()) = 0 : void
{abstract} +canvas_item_add_particles(RID p_item, RID p_particles, RID p_texture, RID p_normal_map) = 0 : void
{abstract} +canvas_item_add_set_transform(RID p_item, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_item_add_clip_ignore(RID p_item, bool p_ignore) = 0 : void
{abstract} +canvas_item_set_sort_children_by_y(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_z_index(RID p_item, int p_z) = 0 : void
{abstract} +canvas_item_set_z_as_relative_to_parent(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_item_set_copy_to_backbuffer(RID p_item, bool p_enable, const Rect2 & p_rect) = 0 : void
{abstract} +canvas_item_attach_skeleton(RID p_item, RID p_skeleton) = 0 : void
{abstract} +canvas_item_clear(RID p_item) = 0 : void
{abstract} +canvas_item_set_draw_index(RID p_item, int p_index) = 0 : void
{abstract} +canvas_item_set_material(RID p_item, RID p_material) = 0 : void
{abstract} +canvas_item_set_use_parent_material(RID p_item, bool p_enable) = 0 : void
{abstract} +canvas_light_create() = 0 : RID
{abstract} +canvas_light_attach_to_canvas(RID p_light, RID p_canvas) = 0 : void
{abstract} +canvas_light_set_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_scale(RID p_light, float p_scale) = 0 : void
{abstract} +canvas_light_set_transform(RID p_light, const Transform2D & p_transform) = 0 : void
{abstract} +canvas_light_set_texture(RID p_light, RID p_texture) = 0 : void
{abstract} +canvas_light_set_texture_offset(RID p_light, const Vector2 & p_offset) = 0 : void
{abstract} +canvas_light_set_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_height(RID p_light, float p_height) = 0 : void
{abstract} +canvas_light_set_energy(RID p_light, float p_energy) = 0 : void
{abstract} +canvas_light_set_z_range(RID p_light, int p_min_z, int p_max_z) = 0 : void
{abstract} +canvas_light_set_layer_range(RID p_light, int p_min_layer, int p_max_layer) = 0 : void
{abstract} +canvas_light_set_item_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_item_shadow_cull_mask(RID p_light, int p_mask) = 0 : void
{abstract} +canvas_light_set_mode(RID p_light, VisualServer::CanvasLightMode p_mode) = 0 : void
{abstract} +canvas_light_set_shadow_enabled(RID p_light, bool p_enabled) = 0 : void
{abstract} +canvas_light_set_shadow_buffer_size(RID p_light, int p_size) = 0 : void
{abstract} +canvas_light_set_shadow_gradient_length(RID p_light, float p_length) = 0 : void
{abstract} +canvas_light_set_shadow_filter(RID p_light, VisualServer::CanvasLightShadowFilter p_filter) = 0 : void
{abstract} +canvas_light_set_shadow_color(RID p_light, const Color & p_color) = 0 : void
{abstract} +canvas_light_set_shadow_smooth(RID p_light, float p_smooth) = 0 : void
{abstract} +canvas_light_occluder_create() = 0 : RID
{abstract} +canvas_light_occluder_attach_to_canvas(RID p_occluder, RID p_canvas) = 0 : void
{abstract} +canvas_light_occluder_set_enabled(RID p_occluder, bool p_enabled) = 0 : void
{abstract} +canvas_light_occluder_set_polygon(RID p_occluder, RID p_polygon) = 0 : void
{abstract} +canvas_light_occluder_set_transform(RID p_occluder, const Transform2D & p_xform) = 0 : void
{abstract} +canvas_light_occluder_set_light_mask(RID p_occluder, int p_mask) = 0 : void
{abstract} +canvas_occluder_polygon_create() = 0 : RID
{abstract} +canvas_occluder_polygon_set_shape(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape, bool p_closed) = 0 : void
{abstract} +canvas_occluder_polygon_set_shape_as_lines(RID p_occluder_polygon, const PoolVector<Vector2> & p_shape) = 0 : void
{abstract} +canvas_occluder_polygon_set_cull_mode(RID p_occluder_polygon, VisualServer::CanvasOccluderPolygonCullMode p_mode) = 0 : void
{abstract} +black_bars_set_margins(int p_left, int p_top, int p_right, int p_bottom) = 0 : void
{abstract} +black_bars_set_images(RID p_left, RID p_top, RID p_right, RID p_bottom) = 0 : void
{abstract} +free(RID p_rid) = 0 : void
{abstract} +request_frame_drawn_callback(Object * p_where, const StringName & p_method, const Variant & p_userdata) = 0 : void
{abstract} +draw(bool p_swap_buffers = true, double frame_step = 0.0) = 0 : void
{abstract} +sync() = 0 : void
{abstract} +has_changed() const = 0 : bool
{abstract} +init() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +get_render_info(VisualServer::RenderInfo p_info) = 0 : uint64_t
{abstract} +get_video_adapter_name() const = 0 : String
{abstract} +get_video_adapter_vendor() const = 0 : String
{abstract} +get_test_cube() = 0 : RID
+get_test_texture() : RID
+get_white_texture() : RID
+make_sphere_mesh(int p_lats, int p_lons, float p_radius) : RID
+mesh_add_surface_from_mesh_data(RID p_mesh, const Geometry::MeshData & p_mesh_data) : void
+mesh_add_surface_from_planes(RID p_mesh, const PoolVector<Plane> & p_planes) : void
{abstract} +set_boot_image(const Ref<Image> & p_image, const Color & p_color, bool p_scale, bool p_use_filter = true) = 0 : void
{abstract} +set_default_clear_color(const Color & p_color) = 0 : void
{abstract} +set_shader_time_scale(float p_scale) = 0 : void
{abstract} +has_feature(VisualServer::Features p_feature) const = 0 : bool
{abstract} +has_os_feature(const String & p_feature) const = 0 : bool
{abstract} +set_debug_generate_wireframes(bool p_generate) = 0 : void
{abstract} +call_set_use_vsync(bool p_enable) = 0 : void
{abstract} +is_low_end() const = 0 : bool
+is_render_loop_enabled() const : bool
+set_render_loop_enabled(bool p_enabled) : void
+VisualServer() : void
+~VisualServer() : void
+NO_INDEX_ARRAY : enum
+ARRAY_WEIGHTS_SIZE : enum
+CANVAS_ITEM_Z_MIN : enum
+CANVAS_ITEM_Z_MAX : enum
+MAX_GLOW_LEVELS : enum
+MAX_CURSORS : enum
+MATERIAL_RENDER_PRIORITY_MIN : enum
+MATERIAL_RENDER_PRIORITY_MAX : enum
}
abstract "PhysicsDirectBodyState" as C_0001559146041463814963
abstract C_0001559146041463814963 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L39{PhysicsDirectBodyState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +get_total_gravity() const = 0 : Vector3
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_center_of_mass() const = 0 : Vector3
{abstract} +get_principal_inertia_axes() const = 0 : Basis
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_inverse_inertia() const = 0 : Vector3
{abstract} +get_inverse_inertia_tensor() const = 0 : Basis
{abstract} +set_linear_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +get_linear_velocity() const = 0 : Vector3
{abstract} +set_angular_velocity(const Vector3 & p_velocity) = 0 : void
{abstract} +get_angular_velocity() const = 0 : Vector3
{abstract} +set_transform(const Transform & p_transform) = 0 : void
{abstract} +get_transform() const = 0 : Transform
{abstract} +add_central_force(const Vector3 & p_force) = 0 : void
{abstract} +add_force(const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +add_torque(const Vector3 & p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector3 & p_j) = 0 : void
{abstract} +apply_impulse(const Vector3 & p_pos, const Vector3 & p_j) = 0 : void
{abstract} +apply_torque_impulse(const Vector3 & p_j) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +is_sleeping() const = 0 : bool
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_impulse(int p_contact_idx) const = 0 : float
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector3
{abstract} +get_step() const = 0 : real_t
+integrate_forces() : void
{abstract} +get_space_state() = 0 : PhysicsDirectSpaceState *
+PhysicsDirectBodyState() : void
}
abstract "PhysicsDirectSpaceState" as C_0000503002593685351124
abstract C_0000503002593685351124 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L143{PhysicsDirectSpaceState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +intersect_point(const Vector3 & p_point, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +intersect_ray(const Vector3 & p_from, const Vector3 & p_to, PhysicsDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_ray = false) = 0 : bool
{abstract} +intersect_shape(const RID & p_shape, const Transform & p_xform, float p_margin, PhysicsDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +cast_motion(const RID & p_shape, const Transform & p_xform, const Vector3 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, PhysicsDirectSpaceState::ShapeRestInfo * r_info = __null) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform & p_shape_xform, float p_margin, Vector3 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +rest_info(RID p_shape, const Transform & p_shape_xform, float p_margin, PhysicsDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_mask = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +get_closest_point_to_object_volume(RID p_object, const Vector3 p_point) const = 0 : Vector3
+PhysicsDirectSpaceState() : void
}
class "PhysicsDirectSpaceState::ShapeResult" as C_0000493041171271776846
class C_0000493041171271776846 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L158{PhysicsDirectSpaceState##ShapeResult}]] {
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L160{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L161{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L162{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L163{shape}]]]
}
class "PhysicsDirectSpaceState::RayResult" as C_0000461609734144368587
class C_0000461609734144368587 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L168{PhysicsDirectSpaceState##RayResult}]] {
+position : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L170{position}]]]
+normal : Vector3 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L171{normal}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L172{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L173{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L174{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L175{shape}]]]
}
abstract "PhysicsServer" as C_0001034902024938599899
abstract C_0001034902024938599899 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_server.h#L224{PhysicsServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : PhysicsServer *
{abstract} +shape_create(PhysicsServer::ShapeType p_shape) = 0 : RID
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_get_type(RID p_shape) const = 0 : PhysicsServer::ShapeType
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_set_margin(RID p_shape, real_t p_margin) = 0 : void
{abstract} +shape_get_margin(RID p_shape) const = 0 : real_t
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +space_create() = 0 : RID
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_param(RID p_space, PhysicsServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +space_get_param(RID p_space, PhysicsServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_get_direct_state(RID p_space) = 0 : PhysicsDirectSpaceState *
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector3>
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +area_create() = 0 : RID
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_set_space_override_mode(RID p_area, PhysicsServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : PhysicsServer::AreaSpaceOverrideMode
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_set_param(RID p_area, PhysicsServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform & p_transform) = 0 : void
{abstract} +area_get_param(RID p_parea, PhysicsServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_transform(RID p_area) const = 0 : Transform
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_ray_pickable(RID p_area, bool p_enable) = 0 : void
{abstract} +area_is_ray_pickable(RID p_area) const = 0 : bool
{abstract} +body_create(PhysicsServer::BodyMode p_mode = BODY_MODE_RIGID, bool p_init_sleeping = false) = 0 : RID
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_set_mode(RID p_body, PhysicsServer::BodyMode p_mode) = 0 : void
{abstract} +body_get_mode(RID p_body) const = 0 : PhysicsServer::BodyMode
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform & p_transform = Transform(), bool p_disabled = false) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform & p_transform) = 0 : void
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_set_shape_disabled(RID p_body, int p_shape_idx, bool p_disabled) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_set_enable_continuous_collision_detection(RID p_body, bool p_enable) = 0 : void
{abstract} +body_is_continuous_collision_detection_enabled(RID p_body) const = 0 : bool
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_set_user_flags(RID p_body, uint32_t p_flags) = 0 : void
{abstract} +body_get_user_flags(RID p_body) const = 0 : uint32_t
{abstract} +body_set_param(RID p_body, PhysicsServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_get_param(RID p_body, PhysicsServer::BodyParameter p_param) const = 0 : float
{abstract} +body_set_kinematic_safe_margin(RID p_body, real_t p_margin) = 0 : void
{abstract} +body_get_kinematic_safe_margin(RID p_body) const = 0 : real_t
{abstract} +body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +body_set_applied_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector3
{abstract} +body_set_applied_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_get_applied_torque(RID p_body) const = 0 : Vector3
{abstract} +body_add_central_force(RID p_body, const Vector3 & p_force) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector3 & p_force, const Vector3 & p_pos) = 0 : void
{abstract} +body_add_torque(RID p_body, const Vector3 & p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector3 & p_pos, const Vector3 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, const Vector3 & p_impulse) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector3 & p_axis_velocity) = 0 : void
{abstract} +body_set_axis_lock(RID p_body, PhysicsServer::BodyAxis p_axis, bool p_lock) = 0 : void
{abstract} +body_is_axis_locked(RID p_body, PhysicsServer::BodyAxis p_axis) const = 0 : bool
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +body_get_direct_state(RID p_body) = 0 : PhysicsDirectBodyState *
{abstract} +body_test_motion(RID p_body, const Transform & p_from, const Vector3 & p_motion, bool p_infinite_inertia, PhysicsServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform & p_transform, bool p_infinite_inertia, Vector3 & r_recover_motion, PhysicsServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +soft_body_create(bool p_init_sleeping = false) = 0 : RID
{abstract} +soft_body_update_visual_server(RID p_body, class SoftBodyVisualServerHandler * p_visual_server_handler) = 0 : void
{abstract} +soft_body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +soft_body_get_space(RID p_body) const = 0 : RID
{abstract} +soft_body_set_mesh(RID p_body, const REF & p_mesh) = 0 : void
{abstract} +soft_body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +soft_body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +soft_body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +soft_body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +soft_body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +soft_body_set_state(RID p_body, PhysicsServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +soft_body_get_state(RID p_body, PhysicsServer::BodyState p_state) const = 0 : Variant
{abstract} +soft_body_set_transform(RID p_body, const Transform & p_transform) = 0 : void
{abstract} +soft_body_get_vertex_position(RID p_body, int vertex_index) const = 0 : Vector3
{abstract} +soft_body_set_ray_pickable(RID p_body, bool p_enable) = 0 : void
{abstract} +soft_body_is_ray_pickable(RID p_body) const = 0 : bool
{abstract} +soft_body_set_simulation_precision(RID p_body, int p_simulation_precision) = 0 : void
{abstract} +soft_body_get_simulation_precision(RID p_body) = 0 : int
{abstract} +soft_body_set_total_mass(RID p_body, real_t p_total_mass) = 0 : void
{abstract} +soft_body_get_total_mass(RID p_body) = 0 : real_t
{abstract} +soft_body_set_linear_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_linear_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_areaAngular_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_areaAngular_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_volume_stiffness(RID p_body, real_t p_stiffness) = 0 : void
{abstract} +soft_body_get_volume_stiffness(RID p_body) = 0 : real_t
{abstract} +soft_body_set_pressure_coefficient(RID p_body, real_t p_pressure_coefficient) = 0 : void
{abstract} +soft_body_get_pressure_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_pose_matching_coefficient(RID p_body, real_t p_pose_matching_coefficient) = 0 : void
{abstract} +soft_body_get_pose_matching_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_damping_coefficient(RID p_body, real_t p_damping_coefficient) = 0 : void
{abstract} +soft_body_get_damping_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_set_drag_coefficient(RID p_body, real_t p_drag_coefficient) = 0 : void
{abstract} +soft_body_get_drag_coefficient(RID p_body) = 0 : real_t
{abstract} +soft_body_move_point(RID p_body, int p_point_index, const Vector3 & p_global_position) = 0 : void
{abstract} +soft_body_get_point_global_position(RID p_body, int p_point_index) = 0 : Vector3
{abstract} +soft_body_get_point_offset(RID p_body, int p_point_index) const = 0 : Vector3
{abstract} +soft_body_remove_all_pinned_points(RID p_body) = 0 : void
{abstract} +soft_body_pin_point(RID p_body, int p_point_index, bool p_pin) = 0 : void
{abstract} +soft_body_is_point_pinned(RID p_body, int p_point_index) = 0 : bool
{abstract} +joint_get_type(RID p_joint) const = 0 : PhysicsServer::JointType
{abstract} +joint_set_solver_priority(RID p_joint, int p_priority) = 0 : void
{abstract} +joint_get_solver_priority(RID p_joint) const = 0 : int
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +joint_create_pin(RID p_body_A, const Vector3 & p_local_A, RID p_body_B, const Vector3 & p_local_B) = 0 : RID
{abstract} +pin_joint_set_param(RID p_joint, PhysicsServer::PinJointParam p_param, float p_value) = 0 : void
{abstract} +pin_joint_get_param(RID p_joint, PhysicsServer::PinJointParam p_param) const = 0 : float
{abstract} +pin_joint_set_local_a(RID p_joint, const Vector3 & p_A) = 0 : void
{abstract} +pin_joint_get_local_a(RID p_joint) const = 0 : Vector3
{abstract} +pin_joint_set_local_b(RID p_joint, const Vector3 & p_B) = 0 : void
{abstract} +pin_joint_get_local_b(RID p_joint) const = 0 : Vector3
{abstract} +joint_create_hinge(RID p_body_A, const Transform & p_hinge_A, RID p_body_B, const Transform & p_hinge_B) = 0 : RID
{abstract} +joint_create_hinge_simple(RID p_body_A, const Vector3 & p_pivot_A, const Vector3 & p_axis_A, RID p_body_B, const Vector3 & p_pivot_B, const Vector3 & p_axis_B) = 0 : RID
{abstract} +hinge_joint_set_param(RID p_joint, PhysicsServer::HingeJointParam p_param, float p_value) = 0 : void
{abstract} +hinge_joint_get_param(RID p_joint, PhysicsServer::HingeJointParam p_param) const = 0 : float
{abstract} +hinge_joint_set_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag, bool p_value) = 0 : void
{abstract} +hinge_joint_get_flag(RID p_joint, PhysicsServer::HingeJointFlag p_flag) const = 0 : bool
{abstract} +joint_create_slider(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +slider_joint_set_param(RID p_joint, PhysicsServer::SliderJointParam p_param, float p_value) = 0 : void
{abstract} +slider_joint_get_param(RID p_joint, PhysicsServer::SliderJointParam p_param) const = 0 : float
{abstract} +joint_create_cone_twist(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +cone_twist_joint_set_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param, float p_value) = 0 : void
{abstract} +cone_twist_joint_get_param(RID p_joint, PhysicsServer::ConeTwistJointParam p_param) const = 0 : float
{abstract} +joint_create_generic_6dof(RID p_body_A, const Transform & p_local_frame_A, RID p_body_B, const Transform & p_local_frame_B) = 0 : RID
{abstract} +generic_6dof_joint_set_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param, float p_value) = 0 : void
{abstract} +generic_6dof_joint_get_param(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisParam p_param) = 0 : float
{abstract} +generic_6dof_joint_set_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag, bool p_enable) = 0 : void
{abstract} +generic_6dof_joint_get_flag(RID p_joint, Vector3::Axis , PhysicsServer::G6DOFJointAxisFlag p_flag) = 0 : bool
{abstract} +free(RID p_rid) = 0 : void
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +init() = 0 : void
{abstract} +step(float p_step) = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +get_process_info(PhysicsServer::ProcessInfo p_info) = 0 : int
+PhysicsServer() : void
+~PhysicsServer() : void
}
abstract "Physics2DDirectBodyState" as C_0002302096389852429221
abstract C_0002302096389852429221 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L40{Physics2DDirectBodyState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +get_total_gravity() const = 0 : Vector2
{abstract} +get_total_linear_damp() const = 0 : float
{abstract} +get_total_angular_damp() const = 0 : float
{abstract} +get_inverse_mass() const = 0 : float
{abstract} +get_inverse_inertia() const = 0 : real_t
{abstract} +set_linear_velocity(const Vector2 & p_velocity) = 0 : void
{abstract} +get_linear_velocity() const = 0 : Vector2
{abstract} +set_angular_velocity(real_t p_velocity) = 0 : void
{abstract} +get_angular_velocity() const = 0 : real_t
{abstract} +set_transform(const Transform2D & p_transform) = 0 : void
{abstract} +get_transform() const = 0 : Transform2D
{abstract} +add_central_force(const Vector2 & p_force) = 0 : void
{abstract} +add_force(const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +add_torque(real_t p_torque) = 0 : void
{abstract} +apply_central_impulse(const Vector2 & p_impulse) = 0 : void
{abstract} +apply_torque_impulse(real_t p_torque) = 0 : void
{abstract} +apply_impulse(const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +set_sleep_state(bool p_enable) = 0 : void
{abstract} +is_sleeping() const = 0 : bool
{abstract} +get_contact_count() const = 0 : int
{abstract} +get_contact_local_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_normal(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_local_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider(int p_contact_idx) const = 0 : RID
{abstract} +get_contact_collider_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_contact_collider_id(int p_contact_idx) const = 0 : ObjectID
+get_contact_collider_object(int p_contact_idx) const : Object *
{abstract} +get_contact_collider_shape(int p_contact_idx) const = 0 : int
{abstract} +get_contact_collider_shape_metadata(int p_contact_idx) const = 0 : Variant
{abstract} +get_contact_collider_velocity_at_position(int p_contact_idx) const = 0 : Vector2
{abstract} +get_step() const = 0 : real_t
+integrate_forces() : void
{abstract} +get_space_state() = 0 : Physics2DDirectSpaceState *
+Physics2DDirectBodyState() : void
}
abstract "Physics2DDirectSpaceState" as C_0000236996062289735257
abstract C_0000236996062289735257 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L145{Physics2DDirectSpaceState}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{abstract} +intersect_ray(const Vector2 & p_from, const Vector2 & p_to, Physics2DDirectSpaceState::RayResult & r_result, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +intersect_point(const Vector2 & p_point, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_point_on_canvas(const Vector2 & p_point, ObjectID p_canvas_instance_id, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false, bool p_pick_point = false) = 0 : int
{abstract} +intersect_shape(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeResult * r_results, int p_result_max, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : int
{abstract} +cast_motion(const RID & p_shape, const Transform2D & p_xform, const Vector2 & p_motion, float p_margin, float & p_closest_safe, float & p_closest_unsafe, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +collide_shape(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Vector2 * r_results, int p_result_max, int & r_result_count, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
{abstract} +rest_info(RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, float p_margin, Physics2DDirectSpaceState::ShapeRestInfo * r_info, const Set<RID> & p_exclude = Set<RID>(), uint32_t p_collision_layer = 0xFFFFFFFF, bool p_collide_with_bodies = true, bool p_collide_with_areas = false) = 0 : bool
+Physics2DDirectSpaceState() : void
}
class "Physics2DDirectSpaceState::RayResult" as C_0001801355352189289676
class C_0001801355352189289676 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L162{Physics2DDirectSpaceState##RayResult}]] {
+position : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L164{position}]]]
+normal : Vector2 [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L165{normal}]]]
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L166{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L167{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L168{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L169{shape}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L170{metadata}]]]
}
class "Physics2DDirectSpaceState::ShapeResult" as C_0001771770302499309898
class C_0001771770302499309898 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L175{Physics2DDirectSpaceState##ShapeResult}]] {
+rid : RID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L177{rid}]]]
+collider_id : ObjectID [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L178{collider_id}]]]
+collider : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L179{collider}]]]
+shape : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L180{shape}]]]
+metadata : Variant [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L181{metadata}]]]
}
abstract "Physics2DServer" as C_0001561529841391244418
abstract C_0001561529841391244418 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/physics_2d_server.h#L232{Physics2DServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : Physics2DServer *
{abstract} +line_shape_create() = 0 : RID
{abstract} +ray_shape_create() = 0 : RID
{abstract} +segment_shape_create() = 0 : RID
{abstract} +circle_shape_create() = 0 : RID
{abstract} +rectangle_shape_create() = 0 : RID
{abstract} +capsule_shape_create() = 0 : RID
{abstract} +convex_polygon_shape_create() = 0 : RID
{abstract} +concave_polygon_shape_create() = 0 : RID
{abstract} +shape_set_data(RID p_shape, const Variant & p_data) = 0 : void
{abstract} +shape_set_custom_solver_bias(RID p_shape, real_t p_bias) = 0 : void
{abstract} +shape_get_type(RID p_shape) const = 0 : Physics2DServer::ShapeType
{abstract} +shape_get_data(RID p_shape) const = 0 : Variant
{abstract} +shape_get_custom_solver_bias(RID p_shape) const = 0 : real_t
{abstract} +shape_collide(RID p_shape_A, const Transform2D & p_xform_A, const Vector2 & p_motion_A, RID p_shape_B, const Transform2D & p_xform_B, const Vector2 & p_motion_B, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +space_create() = 0 : RID
{abstract} +space_set_active(RID p_space, bool p_active) = 0 : void
{abstract} +space_is_active(RID p_space) const = 0 : bool
{abstract} +space_set_param(RID p_space, Physics2DServer::SpaceParameter p_param, real_t p_value) = 0 : void
{abstract} +space_get_param(RID p_space, Physics2DServer::SpaceParameter p_param) const = 0 : real_t
{abstract} +space_get_direct_state(RID p_space) = 0 : Physics2DDirectSpaceState *
{abstract} +space_set_debug_contacts(RID p_space, int p_max_contacts) = 0 : void
{abstract} +space_get_contacts(RID p_space) const = 0 : Vector<Vector2>
{abstract} +space_get_contact_count(RID p_space) const = 0 : int
{abstract} +area_create() = 0 : RID
{abstract} +area_set_space(RID p_area, RID p_space) = 0 : void
{abstract} +area_get_space(RID p_area) const = 0 : RID
{abstract} +area_set_space_override_mode(RID p_area, Physics2DServer::AreaSpaceOverrideMode p_mode) = 0 : void
{abstract} +area_get_space_override_mode(RID p_area) const = 0 : Physics2DServer::AreaSpaceOverrideMode
{abstract} +area_add_shape(RID p_area, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +area_set_shape(RID p_area, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +area_set_shape_transform(RID p_area, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +area_get_shape_count(RID p_area) const = 0 : int
{abstract} +area_get_shape(RID p_area, int p_shape_idx) const = 0 : RID
{abstract} +area_get_shape_transform(RID p_area, int p_shape_idx) const = 0 : Transform2D
{abstract} +area_remove_shape(RID p_area, int p_shape_idx) = 0 : void
{abstract} +area_clear_shapes(RID p_area) = 0 : void
{abstract} +area_set_shape_disabled(RID p_area, int p_shape, bool p_disabled) = 0 : void
{abstract} +area_attach_object_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_object_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_attach_canvas_instance_id(RID p_area, ObjectID p_id) = 0 : void
{abstract} +area_get_canvas_instance_id(RID p_area) const = 0 : ObjectID
{abstract} +area_set_param(RID p_area, Physics2DServer::AreaParameter p_param, const Variant & p_value) = 0 : void
{abstract} +area_set_transform(RID p_area, const Transform2D & p_transform) = 0 : void
{abstract} +area_get_param(RID p_parea, Physics2DServer::AreaParameter p_param) const = 0 : Variant
{abstract} +area_get_transform(RID p_area) const = 0 : Transform2D
{abstract} +area_set_collision_mask(RID p_area, uint32_t p_mask) = 0 : void
{abstract} +area_set_collision_layer(RID p_area, uint32_t p_layer) = 0 : void
{abstract} +area_set_monitorable(RID p_area, bool p_monitorable) = 0 : void
{abstract} +area_set_pickable(RID p_area, bool p_pickable) = 0 : void
{abstract} +area_set_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +area_set_area_monitor_callback(RID p_area, Object * p_receiver, const StringName & p_method) = 0 : void
{abstract} +body_create() = 0 : RID
{abstract} +body_set_space(RID p_body, RID p_space) = 0 : void
{abstract} +body_get_space(RID p_body) const = 0 : RID
{abstract} +body_set_mode(RID p_body, Physics2DServer::BodyMode p_mode) = 0 : void
{abstract} +body_get_mode(RID p_body) const = 0 : Physics2DServer::BodyMode
{abstract} +body_add_shape(RID p_body, RID p_shape, const Transform2D & p_transform = Transform2D(), bool p_disabled = false) = 0 : void
{abstract} +body_set_shape(RID p_body, int p_shape_idx, RID p_shape) = 0 : void
{abstract} +body_set_shape_transform(RID p_body, int p_shape_idx, const Transform2D & p_transform) = 0 : void
{abstract} +body_set_shape_metadata(RID p_body, int p_shape_idx, const Variant & p_metadata) = 0 : void
{abstract} +body_get_shape_count(RID p_body) const = 0 : int
{abstract} +body_get_shape(RID p_body, int p_shape_idx) const = 0 : RID
{abstract} +body_get_shape_transform(RID p_body, int p_shape_idx) const = 0 : Transform2D
{abstract} +body_get_shape_metadata(RID p_body, int p_shape_idx) const = 0 : Variant
{abstract} +body_set_shape_disabled(RID p_body, int p_shape, bool p_disabled) = 0 : void
{abstract} +body_set_shape_as_one_way_collision(RID p_body, int p_shape, bool p_enabled, float p_margin = 0) = 0 : void
{abstract} +body_remove_shape(RID p_body, int p_shape_idx) = 0 : void
{abstract} +body_clear_shapes(RID p_body) = 0 : void
{abstract} +body_attach_object_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_object_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_attach_canvas_instance_id(RID p_body, uint32_t p_id) = 0 : void
{abstract} +body_get_canvas_instance_id(RID p_body) const = 0 : uint32_t
{abstract} +body_set_continuous_collision_detection_mode(RID p_body, Physics2DServer::CCDMode p_mode) = 0 : void
{abstract} +body_get_continuous_collision_detection_mode(RID p_body) const = 0 : Physics2DServer::CCDMode
{abstract} +body_set_collision_layer(RID p_body, uint32_t p_layer) = 0 : void
{abstract} +body_get_collision_layer(RID p_body) const = 0 : uint32_t
{abstract} +body_set_collision_mask(RID p_body, uint32_t p_mask) = 0 : void
{abstract} +body_get_collision_mask(RID p_body) const = 0 : uint32_t
{abstract} +body_set_param(RID p_body, Physics2DServer::BodyParameter p_param, float p_value) = 0 : void
{abstract} +body_get_param(RID p_body, Physics2DServer::BodyParameter p_param) const = 0 : float
{abstract} +body_set_state(RID p_body, Physics2DServer::BodyState p_state, const Variant & p_variant) = 0 : void
{abstract} +body_get_state(RID p_body, Physics2DServer::BodyState p_state) const = 0 : Variant
{abstract} +body_set_applied_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_get_applied_force(RID p_body) const = 0 : Vector2
{abstract} +body_set_applied_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_get_applied_torque(RID p_body) const = 0 : float
{abstract} +body_add_central_force(RID p_body, const Vector2 & p_force) = 0 : void
{abstract} +body_add_force(RID p_body, const Vector2 & p_offset, const Vector2 & p_force) = 0 : void
{abstract} +body_add_torque(RID p_body, float p_torque) = 0 : void
{abstract} +body_apply_central_impulse(RID p_body, const Vector2 & p_impulse) = 0 : void
{abstract} +body_apply_torque_impulse(RID p_body, float p_torque) = 0 : void
{abstract} +body_apply_impulse(RID p_body, const Vector2 & p_offset, const Vector2 & p_impulse) = 0 : void
{abstract} +body_set_axis_velocity(RID p_body, const Vector2 & p_axis_velocity) = 0 : void
{abstract} +body_add_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_remove_collision_exception(RID p_body, RID p_body_b) = 0 : void
{abstract} +body_get_collision_exceptions(RID p_body, List<RID> * p_exceptions) = 0 : void
{abstract} +body_set_max_contacts_reported(RID p_body, int p_contacts) = 0 : void
{abstract} +body_get_max_contacts_reported(RID p_body) const = 0 : int
{abstract} +body_set_contacts_reported_depth_threshold(RID p_body, float p_threshold) = 0 : void
{abstract} +body_get_contacts_reported_depth_threshold(RID p_body) const = 0 : float
{abstract} +body_set_omit_force_integration(RID p_body, bool p_omit) = 0 : void
{abstract} +body_is_omitting_force_integration(RID p_body) const = 0 : bool
{abstract} +body_set_force_integration_callback(RID p_body, Object * p_receiver, const StringName & p_method, const Variant & p_udata = Variant()) = 0 : void
{abstract} +body_collide_shape(RID p_body, int p_body_shape, RID p_shape, const Transform2D & p_shape_xform, const Vector2 & p_motion, Vector2 * r_results, int p_result_max, int & r_result_count) = 0 : bool
{abstract} +body_set_pickable(RID p_body, bool p_pickable) = 0 : void
{abstract} +body_get_direct_state(RID p_body) = 0 : Physics2DDirectBodyState *
{abstract} +body_test_motion(RID p_body, const Transform2D & p_from, const Vector2 & p_motion, bool p_infinite_inertia, float p_margin = 0.001, Physics2DServer::MotionResult * r_result = __null, bool p_exclude_raycast_shapes = true) = 0 : bool
{abstract} +body_test_ray_separation(RID p_body, const Transform2D & p_transform, bool p_infinite_inertia, Vector2 & r_recover_motion, Physics2DServer::SeparationResult * r_results, int p_result_max, float p_margin = 0.001) = 0 : int
{abstract} +joint_set_param(RID p_joint, Physics2DServer::JointParam p_param, real_t p_value) = 0 : void
{abstract} +joint_get_param(RID p_joint, Physics2DServer::JointParam p_param) const = 0 : real_t
{abstract} +joint_disable_collisions_between_bodies(RID p_joint, const bool p_disable) = 0 : void
{abstract} +joint_is_disabled_collisions_between_bodies(RID p_joint) const = 0 : bool
{abstract} +pin_joint_create(const Vector2 & p_anchor, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +groove_joint_create(const Vector2 & p_a_groove1, const Vector2 & p_a_groove2, const Vector2 & p_b_anchor, RID p_body_a, RID p_body_b) = 0 : RID
{abstract} +damped_spring_joint_create(const Vector2 & p_anchor_a, const Vector2 & p_anchor_b, RID p_body_a, RID p_body_b = = RID()) = 0 : RID
{abstract} +pin_joint_set_param(RID p_joint, Physics2DServer::PinJointParam p_param, real_t p_value) = 0 : void
{abstract} +pin_joint_get_param(RID p_joint, Physics2DServer::PinJointParam p_param) const = 0 : real_t
{abstract} +damped_string_joint_set_param(RID p_joint, Physics2DServer::DampedStringParam p_param, real_t p_value) = 0 : void
{abstract} +damped_string_joint_get_param(RID p_joint, Physics2DServer::DampedStringParam p_param) const = 0 : real_t
{abstract} +joint_get_type(RID p_joint) const = 0 : Physics2DServer::JointType
{abstract} +free(RID p_rid) = 0 : void
{abstract} +set_active(bool p_active) = 0 : void
{abstract} +init() = 0 : void
{abstract} +step(float p_step) = 0 : void
{abstract} +sync() = 0 : void
{abstract} +flush_queries() = 0 : void
{abstract} +end_sync() = 0 : void
{abstract} +finish() = 0 : void
{abstract} +is_flushing_queries() const = 0 : bool
{abstract} +get_process_info(Physics2DServer::ProcessInfo p_info) = 0 : int
+Physics2DServer() : void
+~Physics2DServer() : void
}
class "_ArrayVariantSortCustom" as C_0000762417759113755306
class C_0000762417759113755306 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L298{_ArrayVariantSortCustom}]] {
+operator()(const Variant & p_l, const Variant & p_r) const : bool
+obj : Object * [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L300{obj}]]]
+func : StringName [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/core/array.cpp#L301{func}]]]
}
class "InputMap" as C_0000314051240057057851
class C_0000314051240057057851 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L37{InputMap}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
{static} +get_singleton() : InputMap *
+has_action(const StringName & p_action) const : bool
+get_actions() const : List<StringName>
+add_action(const StringName & p_action, float p_deadzone = 0.5) : void
+erase_action(const StringName & p_action) : void
+action_get_deadzone(const StringName & p_action) : float
+action_set_deadzone(const StringName & p_action, float p_deadzone) : void
+action_add_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_has_event(const StringName & p_action, const Ref<InputEvent> & p_event) : bool
+action_erase_event(const StringName & p_action, const Ref<InputEvent> & p_event) : void
+action_erase_events(const StringName & p_action) : void
+get_action_list(const StringName & p_action) : const List<Ref<InputEvent>> *
+event_is_action(const Ref<InputEvent> & p_event, const StringName & p_action) const : bool
+event_get_action_status(const Ref<InputEvent> & p_event, const StringName & p_action, bool * p_pressed = __null, float * p_strength = __null) const : bool
+get_action_map() const : const Map<StringName,InputMap::Action> &
+load_from_globals() : void
+load_default() : void
+InputMap() : void
{static} +ALL_DEVICES : int [[[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/input_map.h#L45{ALL_DEVICES}]]]
}
abstract "Input" as C_0000535376932101028371
abstract C_0000535376932101028371 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/os/input.h#L38{Input}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+set_mouse_mode(Input::MouseMode p_mode) : void
+get_mouse_mode() const : Input::MouseMode
{static} +get_singleton() : Input *
{abstract} +is_key_pressed(int p_scancode) const = 0 : bool
{abstract} +is_mouse_button_pressed(int p_button) const = 0 : bool
{abstract} +is_joy_button_pressed(int p_device, int p_button) const = 0 : bool
{abstract} +is_action_pressed(const StringName & p_action) const = 0 : bool
{abstract} +is_action_just_pressed(const StringName & p_action) const = 0 : bool
{abstract} +is_action_just_released(const StringName & p_action) const = 0 : bool
{abstract} +get_action_strength(const StringName & p_action) const = 0 : float
{abstract} +get_joy_axis(int p_device, int p_axis) const = 0 : float
{abstract} +get_joy_name(int p_idx) = 0 : String
{abstract} +get_connected_joypads() = 0 : Array
{abstract} +joy_connection_changed(int p_idx, bool p_connected, String p_name, String p_guid) = 0 : void
{abstract} +add_joy_mapping(String p_mapping, bool p_update_existing = false) = 0 : void
{abstract} +remove_joy_mapping(String p_guid) = 0 : void
{abstract} +is_joy_known(int p_device) = 0 : bool
{abstract} +get_joy_guid(int p_device) const = 0 : String
{abstract} +get_joy_vibration_strength(int p_device) = 0 : Vector2
{abstract} +get_joy_vibration_duration(int p_device) = 0 : float
{abstract} +get_joy_vibration_timestamp(int p_device) = 0 : uint64_t
{abstract} +start_joy_vibration(int p_device, float p_weak_magnitude, float p_strong_magnitude, float p_duration = 0) = 0 : void
{abstract} +stop_joy_vibration(int p_device) = 0 : void
{abstract} +vibrate_handheld(int p_duration_ms = 500) = 0 : void
{abstract} +get_mouse_position() const = 0 : Point2
{abstract} +get_last_mouse_speed() const = 0 : Point2
{abstract} +get_mouse_button_mask() const = 0 : int
{abstract} +warp_mouse_position(const Vector2 & p_to) = 0 : void
{abstract} +warp_mouse_motion(const Ref<InputEventMouseMotion> & p_motion, const Rect2 & p_rect) = 0 : Point2i
{abstract} +get_gravity() const = 0 : Vector3
{abstract} +get_accelerometer() const = 0 : Vector3
{abstract} +get_magnetometer() const = 0 : Vector3
{abstract} +get_gyroscope() const = 0 : Vector3
{abstract} +action_press(const StringName & p_action, float p_strength = 1.f) = 0 : void
{abstract} +action_release(const StringName & p_action) = 0 : void
+get_argument_options(const StringName & p_function, int p_idx, List<String> * r_options) const : void
{abstract} +is_emulating_touch_from_mouse() const = 0 : bool
{abstract} +is_emulating_mouse_from_touch() const = 0 : bool
{abstract} +get_default_cursor_shape() const = 0 : Input::CursorShape
{abstract} +set_default_cursor_shape(Input::CursorShape p_shape) = 0 : void
{abstract} +get_current_cursor_shape() const = 0 : Input::CursorShape
{abstract} +set_custom_mouse_cursor(const RES & p_cursor, Input::CursorShape p_shape = CURSOR_ARROW, const Vector2 & p_hotspot = Vector2()) = 0 : void
{abstract} +get_joy_button_string(int p_button) = 0 : String
{abstract} +get_joy_axis_string(int p_axis) = 0 : String
{abstract} +get_joy_button_index_from_string(String p_button) = 0 : int
{abstract} +get_joy_axis_index_from_string(String p_axis) = 0 : int
{abstract} +parse_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +accumulate_input_event(const Ref<InputEvent> & p_event) = 0 : void
{abstract} +flush_accumulated_events() = 0 : void
{abstract} +set_use_accumulated_input(bool p_enable) = 0 : void
+Input() : void
}
class "AudioServer" as C_0001370497546359815893
class C_0001370497546359815893 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./servers/audio_server.h#L148{AudioServer}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_channel_count() const : int
+thread_has_channel_mix_buffer(int p_bus, int p_buffer) const : bool
+thread_get_channel_mix_buffer(int p_bus, int p_buffer) : AudioFrame *
+thread_get_mix_buffer_size() const : int
+thread_find_bus_index(const StringName & p_name) : int
+set_bus_count(int p_count) : void
+get_bus_count() const : int
+remove_bus(int p_index) : void
+add_bus(int p_at_pos = -1) : void
+move_bus(int p_bus, int p_to_pos) : void
+set_bus_name(int p_bus, const String & p_name) : void
+get_bus_name(int p_bus) const : String
+get_bus_index(const StringName & p_bus_name) const : int
+get_bus_channels(int p_bus) const : int
+set_bus_volume_db(int p_bus, float p_volume_db) : void
+get_bus_volume_db(int p_bus) const : float
+set_bus_send(int p_bus, const StringName & p_send) : void
+get_bus_send(int p_bus) const : StringName
+set_bus_solo(int p_bus, bool p_enable) : void
+is_bus_solo(int p_bus) const : bool
+set_bus_mute(int p_bus, bool p_enable) : void
+is_bus_mute(int p_bus) const : bool
+set_bus_bypass_effects(int p_bus, bool p_enable) : void
+is_bus_bypassing_effects(int p_bus) const : bool
+add_bus_effect(int p_bus, const Ref<AudioEffect> & p_effect, int p_at_pos = -1) : void
+remove_bus_effect(int p_bus, int p_effect) : void
+get_bus_effect_count(int p_bus) : int
+get_bus_effect(int p_bus, int p_effect) : Ref<AudioEffect>
+get_bus_effect_instance(int p_bus, int p_effect, int p_channel = 0) : Ref<AudioEffectInstance>
+swap_bus_effects(int p_bus, int p_effect, int p_by_effect) : void
+set_bus_effect_enabled(int p_bus, int p_effect, bool p_enabled) : void
+is_bus_effect_enabled(int p_bus, int p_effect) const : bool
+get_bus_peak_volume_left_db(int p_bus, int p_channel) const : float
+get_bus_peak_volume_right_db(int p_bus, int p_channel) const : float
+is_bus_channel_active(int p_bus, int p_channel) const : bool
+set_global_rate_scale(float p_scale) : void
+get_global_rate_scale() const : float
+init() : void
+finish() : void
+update() : void
+load_default_bus_layout() : void
+lock() : void
+unlock() : void
+get_speaker_mode() const : AudioServer::SpeakerMode
+get_mix_rate() const : float
+read_output_peak_db() const : float
{static} +get_singleton() : AudioServer *
+get_output_latency() const : double
+get_time_to_next_mix() const : double
+get_time_since_last_mix() const : double
+audio_data_alloc(uint32_t p_data_len, const uint8_t * p_from_data = __null) : void *
+audio_data_free(void * p_data) : void
+audio_data_get_total_memory_usage() const : size_t
+audio_data_get_max_memory_usage() const : size_t
+add_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+remove_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+add_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+remove_update_callback(AudioServer::AudioCallback p_callback, void * p_userdata) : void
+set_bus_layout(const Ref<AudioBusLayout> & p_bus_layout) : void
+generate_bus_layout() const : Ref<AudioBusLayout>
+get_device_list() : Array
+get_device() : String
+set_device(String device) : void
+capture_get_device_list() : Array
+capture_get_device() : String
+capture_set_device(const String & p_name) : void
+AudioServer() : void
+~AudioServer() : void
+AUDIO_DATA_INVALID_ID : enum
}
class "UndoRedo" as C_0000096380574950611570
class C_0000096380574950611570 [[https://github.com/godotengine/godot/blob/faf3f883d1a25ec8a2b7a31ecc9e3363613b2478/./core/undo_redo.h#L37{UndoRedo}]] {
+get_class() const : String
+_get_class_namev() const : const StringName *
{static} +get_class_ptr_static() : void *
{static} +get_class_static() : String
{static} +get_parent_class_static() : String
{static} +get_inheritance_list_static(List<String> * p_inheritance_list) : void
{static} +get_category_static() : String
{static} +inherits_static() : String
+is_class(const String & p_class) const : bool
+is_class_ptr(void * p_ptr) const : bool
{static} +get_valid_parents_static(List<String> * p_parents) : void
{static} +initialize_class() : void
+get_save_class() const : String
+_add_do_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+_add_undo_method(const Variant ** p_args, int p_argcount, Variant::CallError & r_error) : Variant
+create_action(const String & p_name = "", UndoRedo::MergeMode p_mode = MERGE_DISABLE) : void
+add_do_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_undo_method(Object * p_object, const String & p_method, const Variant & p_arg1 = Variant(), const Variant & p_arg2 = Variant(), const Variant & p_arg3 = Variant(), const Variant & p_arg4 = Variant(), const Variant & p_arg5 = Variant()) : void
+add_do_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_undo_property(Object * p_object, const String & p_property, const Variant & p_value) : void
+add_do_reference(Object * p_object) : void
+add_undo_reference(Object * p_object) : void
+is_committing_action() const : bool
+commit_action() : void
+redo() : bool
+undo() : bool
+get_current_action_name() const : String
+clear_history(bool p_increase_version = true) : void
+has_undo() : bool
+has_redo() : bool
+get_version() const : uint64_t
+set_commit_notify_callback(UndoRedo::CommitNotifyCallback p_callback, void * p_ud) : void
+set_method_notify_callback(UndoRedo::MethodNotifyCallback p_method_callback, void * p_ud) : void
+set_property_notify_callback(UndoRedo::PropertyNotifyCallback p_property_callback, void * p_ud) : void
+UndoRedo() : void
+~UndoRedo() : void
}
C_0000699772808699382057 o- - C_0001357046052919104842 : -count
C_0001531814603945772616 o- - C_0001578539238208480863 : -signal_map
C_0001531814603945772616 o- - C_0000751300156436098886 : -connections
C_0001531814603945772616 o- - C_0000699772808699382057 : -_lock_index
C_0001531814603945772616 o- - C_0000051860595756965531 : -change_receptors
C_0001531814603945772616 - -> C_0000933379568804427881 : -_rc
C_0001531814603945772616 o- - C_0001682405743486361214 : -editor_section_folding
C_0001531814603945772616 - -> C_0001735438654351294549 : -script_instance
C_0001531814603945772616 o- - C_0002025812040042972946 : -script
C_0001531814603945772616 o- - C_0001299121424291583786 : -metadata
C_0001531814603945772616 o- - C_0001858199404643284193 : -_class_name
C_0001531814603945772616 - -> C_0001858199404643284193 : -_class_ptr
C_0001531814603945772616 o- - C_0001357046052919104842 : -instance_binding_count
C_0001531814603945772616 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <.. C_0001778859257025660860 : +<<friend>>
C_0001531814603945772616 <.. C_0000132048052014479231 : +<<friend>>
C_0000219886141561409828 - -+ C_0001531814603945772616
C_0001267214583673362755 - -+ C_0001531814603945772616
C_0001267214583673362755 - -> C_0001531814603945772616 : +source
C_0001267214583673362755 o- - C_0001858199404643284193 : +signal
C_0001267214583673362755 - -> C_0001531814603945772616 : +target
C_0001267214583673362755 o- - C_0001858199404643284193 : +method
C_0000250357724807605097 - -+ C_0001531814603945772616
C_0002064336919270342687 - -> C_0001531814603945772616 : -instances
C_0002064336919270342687 - -> C_0001531814603945772616 : -instance_checks
C_0002064336919270342687 <.. C_0001531814603945772616 : +<<friend>>
C_0000104564426296396960 - -> C_0001858199404643284193 : +classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +resource_base_extensions
C_0000104564426296396960 - -> C_0001858199404643284193 : +compat_classes
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values
C_0000104564426296396960 - -> C_0001858199404643284193 : +default_values_cached
C_0001778859257025660860 o- - C_0001858199404643284193 : -_class_name
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount
C_0001778859257025660860 o- - C_0000699772808699382057 : -refcount_init
C_0001778859257025660860 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001778859257025660860
C_0000218299049716973303 o- - C_0001858199404643284193 : -_class_name
C_0000218299049716973303 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000218299049716973303
C_0000933379568804427881 - -> C_0001531814603945772616 : -_ptr
C_0001649884439586022807 - -> C_0001531814603945772616 : -owner
C_0001735438654351294549 <|- - C_0001649884439586022807
C_0000970940027123558604 o- - C_0001858199404643284193 : -_class_name
C_0000970940027123558604 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000970940027123558604
C_0001823345232236209470 o- - C_0001858199404643284193 : +name
C_0001823345232236209470 - -> C_0001531814603945772616 : +ptr
C_0001485048025194488343 o- - C_0001858199404643284193 : -_class_name
C_0001485048025194488343 - -> C_0001485048025194488343 : -singleton
C_0001485048025194488343 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001485048025194488343
C_0000132048052014479231 - -> C_0001531814603945772616 : +obj
C_0000115801560197752094 o- - C_0001858199404643284193 : +signal
C_0000115801560197752094 - -> C_0001531814603945772616 : +target
C_0000115801560197752094 o- - C_0001858199404643284193 : +method
C_0000066148521405667716 o- - C_0001858199404643284193 : -_class_name
C_0000066148521405667716 o- - C_0001682405743486361214 : #custom_features
C_0000066148521405667716 - -> C_0000066148521405667716 : #singleton
C_0000066148521405667716 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000066148521405667716
C_0001191393512042218074 o- - C_0001858199404643284193 : -_class_name
C_0001191393512042218074 - -> C_0001191393512042218074 : #singleton
C_0001191393512042218074 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001191393512042218074
C_0001197720528033242618 o- - C_0001858199404643284193 : -_class_name
C_0001197720528033242618 - -> C_0001197720528033242618 : #singleton
C_0001197720528033242618 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001197720528033242618
C_0001130773750498288283 o- - C_0001858199404643284193 : -_class_name
C_0001130773750498288283 - -> C_0001130773750498288283 : #singleton
C_0001130773750498288283 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001130773750498288283
C_0000790752023609648644 o- - C_0001858199404643284193 : -_class_name
C_0000790752023609648644 - -> C_0000790752023609648644 : #singleton
C_0000790752023609648644 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000790752023609648644
C_0000897221634691489964 o- - C_0001858199404643284193 : -_class_name
C_0000897221634691489964 - -> C_0000897221634691489964 : -singleton
C_0000897221634691489964 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000897221634691489964
C_0000135188690773659020 o- - C_0001858199404643284193 : -_class_name
C_0000135188690773659020 - -> C_0000135188690773659020 : -singleton
C_0000135188690773659020 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000135188690773659020
C_0001150621116588802549 o- - C_0001858199404643284193 : -_class_name
C_0001150621116588802549 - -> C_0001531814603945772616 : #target_instance
C_0001150621116588802549 o- - C_0001858199404643284193 : #target_method
C_0001150621116588802549 <.. C_0000104564426296396960 : +<<friend>>
C_0001778859257025660860 <|- - C_0001150621116588802549
C_0001186331261774827872 o- - C_0001858199404643284193 : -_class_name
C_0001186331261774827872 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001186331261774827872
C_0001895218672297528471 o- - C_0001858199404643284193 : -_class_name
C_0001895218672297528471 - -> C_0001895218672297528471 : #singleton
C_0001895218672297528471 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001895218672297528471
C_0000979065355535690103 o- - C_0001858199404643284193 : -_class_name
C_0000979065355535690103 - -> C_0000979065355535690103 : #singleton
C_0000979065355535690103 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000979065355535690103
C_0001701907280759632930 o- - C_0001858199404643284193 : -_class_name
C_0001701907280759632930 - -> C_0001701907280759632930 : #singleton
C_0001701907280759632930 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001701907280759632930
C_0001589464385186808769 o- - C_0001858199404643284193 : -_class_name
C_0001589464385186808769 - -> C_0001589464385186808769 : -singleton
C_0001589464385186808769 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001589464385186808769
C_0001559146041463814963 o- - C_0001858199404643284193 : -_class_name
C_0001559146041463814963 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001559146041463814963
C_0000503002593685351124 o- - C_0001858199404643284193 : -_class_name
C_0000503002593685351124 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000503002593685351124
C_0000493041171271776846 - -+ C_0000503002593685351124
C_0000493041171271776846 - -> C_0001531814603945772616 : +collider
C_0000461609734144368587 - -+ C_0000503002593685351124
C_0000461609734144368587 - -> C_0001531814603945772616 : +collider
C_0001034902024938599899 o- - C_0001858199404643284193 : -_class_name
C_0001034902024938599899 - -> C_0001034902024938599899 : -singleton
C_0001034902024938599899 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001034902024938599899
C_0002302096389852429221 o- - C_0001858199404643284193 : -_class_name
C_0002302096389852429221 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0002302096389852429221
C_0000236996062289735257 o- - C_0001858199404643284193 : -_class_name
C_0000236996062289735257 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000236996062289735257
C_0001801355352189289676 - -+ C_0000236996062289735257
C_0001801355352189289676 - -> C_0001531814603945772616 : +collider
C_0001771770302499309898 - -+ C_0000236996062289735257
C_0001771770302499309898 - -> C_0001531814603945772616 : +collider
C_0001561529841391244418 o- - C_0001858199404643284193 : -_class_name
C_0001561529841391244418 - -> C_0001561529841391244418 : -singleton
C_0001561529841391244418 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001561529841391244418
C_0000762417759113755306 - -> C_0001531814603945772616 : +obj
C_0000762417759113755306 o- - C_0001858199404643284193 : +func
C_0000314051240057057851 o- - C_0001858199404643284193 : -_class_name
C_0000314051240057057851 - -> C_0000314051240057057851 : -singleton
C_0000314051240057057851 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000314051240057057851
C_0000535376932101028371 o- - C_0001858199404643284193 : -_class_name
C_0000535376932101028371 - -> C_0000535376932101028371 : -singleton
C_0000535376932101028371 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000535376932101028371
C_0001370497546359815893 o- - C_0001858199404643284193 : -_class_name
C_0001370497546359815893 - -> C_0001370497546359815893 : -singleton
C_0001370497546359815893 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0001370497546359815893
C_0000096380574950611570 o- - C_0001858199404643284193 : -_class_name
C_0000096380574950611570 <.. C_0000104564426296396960 : +<<friend>>
C_0001531814603945772616 <|- - C_0000096380574950611570

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>