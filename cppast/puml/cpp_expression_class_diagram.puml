@startuml
enum "cpp_expression_kind" as C_0000000045
enum C_0000000045 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L16{The kind of a [cppast::cpp_expression]().}]] {
literal_t
unexposed_t
}
abstract "cpp_expression" as C_0000000051
abstract C_0000000051 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L24{Base class for all C++ expressions.}]] {
+cpp_expression(cpp_expression const& ) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27{cpp_expression}]]]
+operator=(cpp_expression const& ) : cpp_expression& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28{operator=}]]]
+~cpp_expression() : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30{~cpp_expression}]]]
+kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33{\returns The [cppast::cpp_expression_kind]().}]]]
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39{\returns The type of the expression.}]]]
+user_data() const : void* [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45{\returns The specified user data.}]]]
+set_user_data(void* data) const : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57{\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi...}]]]
#cpp_expression(std::unique_ptr<cpp_type> type) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65{\effects Creates it given the type. \requires The type must not be `nullptr`.}]]]
{abstract} -do_get_kind() const = 0 : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72{\returns The [cppast::cpp_expression_kind]().}]]]
-type_ : std::unique_ptr<cpp_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74{type_}]]]
-user_data_ : std::atomic<void*> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75{user_data_}]]]
}
class "cpp_unexposed_expression" as C_0000000083
class C_0000000083 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L81{An unexposed [cppast::cpp_expression](). There is no further information than a string available.}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_token_string str) : std::unique_ptr<cpp_unexposed_expression> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85{\returns A newly created unexposed expression.}]]]
+expression() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93{\returns The expression as a string.}]]]
-cpp_unexposed_expression(std::unique_ptr<cpp_type> type, cpp_token_string str) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99{cpp_unexposed_expression}]]]
-do_get_kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103{do_get_kind}]]]
-str_ : cpp_token_string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108{str_}]]]
}
class "cpp_literal_expression" as C_0000000101
class C_0000000101 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L112{A [cppast::cpp_expression]() that is a literal.}]] {
{static} +build(std::unique_ptr<cpp_type> type, std::string value) : std::unique_ptr<cpp_literal_expression> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116{\returns A newly created literal expression.}]]]
+value() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124{\returns The value of the literal, as string.}]]]
-cpp_literal_expression(std::unique_ptr<cpp_type> type, std::string value) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130{cpp_literal_expression}]]]
-do_get_kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134{do_get_kind}]]]
-value_ : std::string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139{value_}]]]
}
C_0000000051 <|-- C_0000000083
C_0000000051 <|-- C_0000000101
@enduml
