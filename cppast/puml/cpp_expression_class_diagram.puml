@startuml
abstract "cpp_type" as C_0001585653041236922459
abstract C_0001585653041236922459 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L44{Base class for all C++ types.}]] {
+cpp_type(const cpp_type & ) : void
+operator=(const cpp_type & ) : cpp_type &
+~cpp_type() = default : void
+kind() const : cpp_type_kind
+user_data() const : void *
+set_user_data(void * data) const : void
#cpp_type() : void
{abstract} -do_get_kind() const = 0 : cpp_type_kind
-on_insert(const cpp_type & ) : void
-user_data_ : std::atomic<void *> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85{user_data_}]]]
}
abstract "cpp_expression" as C_0002228471918600734475
abstract C_0002228471918600734475 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L24{Base class for all C++ expressions.}]] {
+cpp_expression(const cpp_expression & ) : void
+operator=(const cpp_expression & ) : cpp_expression &
+~cpp_expression() = default : void
+kind() const : cpp_expression_kind
+type() const : const cpp_type &
+user_data() const : void *
+set_user_data(void * data) const : void
#cpp_expression(std::unique_ptr<cpp_type> type) : void
{abstract} -do_get_kind() const = 0 : cpp_expression_kind
-type_ : std::unique_ptr<cpp_type> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74{type_}]]]
-user_data_ : std::atomic<void *> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75{user_data_}]]]
}
class "cpp_unexposed_expression" as C_0000978206085606851269
class C_0000978206085606851269 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L81{An unexposed [cppast::cpp_expression](). There is no further information than a string available.}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_token_string str) : std::unique_ptr<cpp_unexposed_expression>
+expression() const : const cpp_token_string &
-cpp_unexposed_expression(std::unique_ptr<cpp_type> type, cpp_token_string str) : void
-do_get_kind() const : cpp_expression_kind
-str_ : cpp_token_string [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108{str_}]]]
}
class "cpp_literal_expression" as C_0001481645313438672561
class C_0001481645313438672561 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L112{A [cppast::cpp_expression]() that is a literal.}]] {
{static} +build(std::unique_ptr<cpp_type> type, std::string value) : std::unique_ptr<cpp_literal_expression>
+value() const : const std::string &
-cpp_literal_expression(std::unique_ptr<cpp_type> type, std::string value) : void
-do_get_kind() const : cpp_expression_kind
-value_ : std::string [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139{value_}]]]
}
C_0002228471918600734475 ..> C_0001585653041236922459
C_0002228471918600734475 o-- C_0001585653041236922459 : -type_
C_0000978206085606851269 ..> C_0001585653041236922459
C_0002228471918600734475 <|-- C_0000978206085606851269
C_0001481645313438672561 ..> C_0001585653041236922459
C_0002228471918600734475 <|-- C_0001481645313438672561
@enduml
