@startuml
left to right direction
class "cpp_file" as C_0000006252
class C_0000006252 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L27{A [cppast::cpp_entity]() modelling a file. This is the top-level entity of the AST.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30{kind}]]]
+unmatched_comments() const : type_safe::array_ref<cpp_doc_comment const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71{\returns The unmatched documentation comments.}]]]
}
class "cpp_class_template" as C_0000006313
class C_0000006313 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L13{A [cppast::cpp_entity]() modelling a class template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16{kind}]]]
+class_() const : cpp_class const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26{A reference to the class that is being templated.}]]]
}
class "cpp_class_template_specialization" as C_0000006323
class C_0000006323 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L42{A [cppast::cpp_entity]() modelling a class template specialization.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45{kind}]]]
+class_() const : cpp_class const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55{A reference to the class that is being specialized.}]]]
}
class "cpp_friend" as C_0000006381
class C_0000006381 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L19{A [cppast::cpp_entity]() representing a friend declaration. It can either declare or define a `friend` function (template), declare a `friend` class, or refer to an existing type.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22{kind}]]]
{static} +build(std::unique_ptr<cpp_entity> e) : std::unique_ptr<cpp_friend> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27{\returns A newly created friend declaring the given entity as `friend`. \notes The friend declaration itself will not be registered, but the referring entity is.}]]]
{static} +build(std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_friend> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34{\returns A newly created friend declaring the given type as `friend`. \notes It will not be registered.}]]]
+entity() const : type_safe::optional_ref<cpp_entity const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40{\returns An optional reference to the entity it declares as friend, or `nullptr`.}]]]
+type() const : type_safe::optional_ref<cpp_type const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48{\returns An optional reference to the type it declares as friend, or `nullptr`.}]]]
}
class "cpp_alias_template" as C_0000006404
class C_0000006404 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L13{A [cppast::cpp_entity]() modelling a C++ alias template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16{kind}]]]
+type_alias() const : cpp_type_alias const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26{\returns A reference to the type alias that is being templated.}]]]
}
class "cpp_function_template" as C_0000006423
class C_0000006423 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L13{A [cppast::cpp_entity]() modelling a function template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16{kind}]]]
+function() const : cpp_function_base const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26{A reference to the function that is being templated.}]]]
}
class "cpp_function_template_specialization" as C_0000006433
class C_0000006433 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L42{A [cppast::cpp_entity]() modelling a function template specialization.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45{kind}]]]
+function() const : cpp_function_base const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59{A reference to the function that is being specialized.}]]]
}
class "cpp_access_specifier" as C_0000006604
class C_0000006604 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L37{A [cppast::cpp_entity]() modelling a C++ access specifier.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40{kind}]]]
{static} +build(cpp_access_specifier_kind kind) : std::unique_ptr<cpp_access_specifier> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45{\returns A newly created access specifier. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+access_specifier() const : cpp_access_specifier_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51{\returns The kind of access specifier.}]]]
}
class "cpp_base_class" as C_0000006615
class C_0000006615 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L67{A [cppast::cpp_entity]() modelling a base class specifier.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70{kind}]]]
{static} +build(std::string name, std::unique_ptr<cpp_type> base, cpp_access_specifier_kind access, bool is_virtual) : std::unique_ptr<cpp_base_class> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75{\returns A newly created base class specifier. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself.}]]]
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83{\returns The type of the base class.}]]]
+access_specifier() const : cpp_access_specifier_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89{\returns The access specifier of the base class.}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95{\returns Whether or not it is a `virtual` base class.}]]]
}
class "cpp_class" as C_0000006644
class C_0000006644 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L118{A [cppast::cpp_entity]() modelling a C++ class. This can either be a definition or just a forward declaration. If it is just a forward declaration, everything except the class type will not be available.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123{kind}]]]
+class_kind() const : cpp_class_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198{\returns The keyword used in the declaration of the class.}]]]
+is_final() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204{\returns Whether or not the class was declared `final`.}]]]
+bases() const : detail::iteratable_intrusive_list<cpp_base_class> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210{\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers.}]]]
}
class "cpp_static_assert" as C_0000006716
class C_0000006716 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L12{cpp_static_assert}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15{kind}]]]
{static} +build(std::unique_ptr<cpp_expression> expr, std::string msg) : std::unique_ptr<cpp_static_assert> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19{\returns A newly created `static_assert()` entity. \notes It will not be registered as nothing can refer to it.}]]]
+expression() const : cpp_expression const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27{\returns A reference to the [cppast::cpp_expression]() that is being asserted.}]]]
+message() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33{\returns A reference to the message of the assertion.}]]]
}
class "cpp_variable_base" as C_0000006800
class C_0000006800 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L16{Additional base class for all [cppast::cpp_entity]() modelling some kind of variable. Examples are [cppast::cpp_variable]() or [cppast::cpp_function_parameter](), or anything that is name/type/default-value triple.}]] {
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20{\returns A reference to the [cppast::cpp_type]() of the variable.}]]]
+default_value() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value.}]]]
}
class "cpp_function_parameter" as C_0000006844
class C_0000006844 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L16{A [cppast::cpp_entity]() modelling a function parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22{\returns A newly created and registered function parameter.}]]]
{static} +build(std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30{\returns A newly created unnamed function parameter. \notes It will not be registered, as nothing can refer to it.}]]]
}
class "cpp_function_base" as C_0000006868
class C_0000006868 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L68{Base class for all entities that are functions. It contains arguments and common flags.}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73{\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities.}]]]
+body_kind() const : cpp_function_body_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80{\returns The [cppast::cpp_function_body_kind](). \notes This matches the [cppast::cpp_forward_declarable]() queries.}]]]
+noexcept_condition() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. \notes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). \notes There is no way to di...}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95{\returns Whether the function has an ellipsis.}]]]
+signature() const : std::string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103{\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`.}]]]
}
class "cpp_function" as C_0000006910
class C_0000006910 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L201{A [cppast::cpp_entity]() modelling a C++ function. \notes This is not a member function, use [cppast::cpp_member_function]() for that. It can be a `static` function of a class, however.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204{kind}]]]
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237{\returns A reference to the return [cppast::cpp_type]().}]]]
+storage_class() const : cpp_storage_class_specifiers [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245{\returns The [cppast::cpp_storage_specifiers]() of the function. \notes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251{\returns Whether the function is marked `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257{\returns Whether the function is marked `consteval`.}]]]
}
class "cpp_type_alias" as C_0000007116
class C_0000007116 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L14{A [cppast::cpp_entity]() modelling a type alias/typedef. \notes There is no distinction between `using` and `typedef` type aliases made in the AST.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20{\returns A newly created and registered type alias.}]]]
{static} +build(std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25{\returns A newly created type alias that isn't registered. \notes This function is intendend for templated type aliases.}]]]
+underlying_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28{\returns A reference to the aliased [cppast::cpp_type]().}]]]
}
class "cpp_enum_value" as C_0000007165
class C_0000007165 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L21{A [cppast::cpp_entity]() modelling the value of an [cppast::cpp_enum]().}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_expression> value = nullptr) : std::unique_ptr<cpp_enum_value> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28{\returns A newly created and registered enum value. \notes `value` may be `nullptr`, in which case the enum has an implicit value.}]]]
+value() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. \notes It only has an associated expression if the value is explictly given.}]]]
}
class "cpp_enum" as C_0000007183
class C_0000007183 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L53{A [cppast::cpp_entity]() modelling a C++ enumeration. This can either be a definition or just a forward declaration. If it is just forward declared, it will not have any children.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58{kind}]]]
+underlying_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108{\returns A reference to the underlying [cppast::cpp_type]() of the enum.}]]]
+has_explicit_type() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114{\returns Whether or not the underlying type is explictly given.}]]]
+is_scoped() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120{\returns Whether or not it is a scoped enumeration (i.e. an `enum class`).}]]]
}
class "cpp_template" as C_0000007430
class C_0000007430 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L21{Base class for all entities modelling a C++ template of some kind. It is a container of a single [cppast::cpp_entity]() that is the entity being templated.}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26{\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. \notes These may be empty for a full specialization.}]]]
}
class "cpp_template_specialization" as C_0000007484
class C_0000007484 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L177{Base class for all entities modelling a C++ template specialization.}]] {
+primary_template() const : cpp_template_ref [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181{\returns A reference to the template that is being specialized.}]]]
+arguments_exposed() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187{\returns Whether or not the arguments are exposed.}]]]
+arguments() const : type_safe::array_ref<cpp_template_argument const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196{\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. \notes For function template specializations it can be empty, meaning that the arguments...}]]]
+unexposed_arguments() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206{\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. \notes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced...}]]]
+is_full_specialization() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212{\returns Whether or not the specialization is a full specialization.}]]]
}
class "cpp_language_linkage" as C_0000007515
class C_0000007515 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L13{A [cppast::cpp_entity]() modelling a language linkage.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17{kind}]]]
+is_block() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50{\returns `true` if the linkage is a block, `false` otherwise.}]]]
}
class "cpp_macro_parameter" as C_0000007532
class C_0000007532 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L15{A [cppast::cpp_entity]() modelling a macro parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18{kind}]]]
{static} +build(std::string name) : std::unique_ptr<cpp_macro_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23{\returns A newly built macro parameter. \notes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it.}]]]
}
class "cpp_macro_definition" as C_0000007536
class C_0000007536 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L35{A [cppast::cpp_entity]() modelling a macro definition.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38{kind}]]]
{static} +build_object_like(std::string name, std::string replacement) : std::unique_ptr<cpp_macro_definition> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43{\returns A newly built object like macro. \notes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it.}]]]
+replacement() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98{\returns The replacement text of the macro.}]]]
+is_object_like() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104{\returns Whether or not it is an object like macro.}]]]
+is_function_like() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110{\returns Whether or not it is a function like macro.}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116{\returns Whether or not it is a variadic macro.}]]]
+parameters() const : detail::iteratable_intrusive_list<cpp_macro_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123{\returns The parameters of the macro. \notes It has none if it is not a function like macro.}]]]
}
class "cpp_include_directive" as C_0000007566
class C_0000007566 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L154{A [cppast::cpp_entity]() modelling an `#include`.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157{kind}]]]
{static} +build(cpp_file_ref const& target, cpp_include_kind kind, std::string full_path) : std::unique_ptr<cpp_include_directive> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162{\returns A newly built include directive. \notes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it.}]]]
+target() const : cpp_file_ref [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171{\returns A reference to the [cppast::cpp_file]() it includes.}]]]
+include_kind() const : cpp_include_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177{\returns The kind of include it is.}]]]
+full_path() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183{\returns The full path of the included file.}]]]
}
class "cpp_member_variable_base" as C_0000007672
class C_0000007672 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L13{Base class for all kinds of member variables.}]] {
+is_mutable() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17{\returns Whether or not the member variable is declared `mutable`.}]]]
+cpp_member_variable_base(std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22{cpp_member_variable_base}]]]
}
class "cpp_member_variable" as C_0000007680
class C_0000007680 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L33{A [cppast::cpp_entity]() modelling a C++ member variable.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : std::unique_ptr<cpp_member_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40{\returns A newly created and registered member variable. \notes `def` may be `nullptr` in which case there is no member initializer provided.}]]]
}
class "cpp_bitfield" as C_0000007692
class C_0000007692 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L53{A [cppast::cpp_entity]() modelling a C++ bitfield.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60{\returns A newly created and registered bitfield. \notes It cannot have a member initializer, i.e. default value.}]]]
{static} +build(std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66{\returns A newly created unnamed bitfield. \notes It will not be registered, as it is unnamed.}]]]
+no_bits() const : unsigned int [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70{\returns The number of bits of the bitfield.}]]]
}
class "cpp_namespace" as C_0000007726
class C_0000007726 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L15{A [cppast::cpp_entity]() modelling a namespace.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19{kind}]]]
+is_inline() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56{\returns Whether or not the namespace is an `inline namespace`.}]]]
+is_nested() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62{\returns Whether or not the namespace is part of a C++17 nested namespace.}]]]
+is_anonymous() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68{\returns Whether or not the namespace is anonymous.}]]]
}
class "cpp_namespace_alias" as C_0000007747
class C_0000007747 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L102{A [cppast::cpp_entity]() modelling a namespace alias.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, cpp_namespace_ref target) : std::unique_ptr<cpp_namespace_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108{\returns A newly created and registered namespace alias.}]]]
+target() const : cpp_namespace_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114{\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. \notes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias.}]]]
}
class "cpp_using_directive" as C_0000007767
class C_0000007767 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L133{A [cppast::cpp_entity]() modelling a using directive. A using directive is `using namespace std`, for example. \notes It does not have a name.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136{kind}]]]
{static} +build(cpp_namespace_ref target) : std::unique_ptr<cpp_using_directive> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141{\returns A newly created using directive. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+target() const : cpp_namespace_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147{\returns The [cppast::cpp_namespace_ref]() that is being used.}]]]
}
class "cpp_using_declaration" as C_0000007783
class C_0000007783 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L164{A [cppast::cpp_entity]() modelling a using declaration. A using declaration is `using std::vector`, for example. \notes It does not have a name.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167{kind}]]]
{static} +build(cpp_entity_ref target) : std::unique_ptr<cpp_using_declaration> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172{\returns A newly created using declaration. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+target() const : cpp_entity_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179{\returns The [cppast::cpp_entity_ref]() that is being used. \notes The name of the reference is the same as the name of this entity.}]]]
}
class "cpp_variable" as C_0000007825
class C_0000007825 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L18{A [cppast::cpp_entity]() modelling a C++ variable. \notes This is not a member variable, use [cppast::cpp_member_variable]() for that. But it can be `static` member variable.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27{\returns A newly created and registered variable. \notes The default value may be `nullptr` indicating no default value.}]]]
{static} +build_declaration(cpp_entity_id definition_id, std::string name, std::unique_ptr<cpp_type> type, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35{\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value.}]]]
+storage_class() const : cpp_storage_class_specifiers [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42{\returns The [cppast::cpp_storage_specifiers]() on that variable.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48{\returns Whether the variable is marked `constexpr`.}]]]
}
abstract "cpp_entity" as C_0000007892
abstract C_0000007892 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L47{The base class for all entities in the C++ AST.}]] {
+cpp_entity(cpp_entity const& ) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50{cpp_entity}]]]
+operator=(cpp_entity const& ) : cpp_entity& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51{operator=}]]]
+~cpp_entity() : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53{~cpp_entity}]]]
+kind() const : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56{\returns The kind of the entity.}]]]
+name() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63{\returns The name of the entity. The name is the string associated with the entity's declaration.}]]]
+scope_name() const : type_safe::optional<cpp_scope_name> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70{\returns The name of the new scope created by the entity, if there is any.}]]]
+parent() const : type_safe::optional_ref<cpp_entity const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76{\returns A [ts::optional_ref]() to the parent entity in the AST.}]]]
+comment() const : type_safe::optional_ref<std::string const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106{\returns The documentation comment associated with that entity, if any. \notes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen...}]]]
+set_comment(type_safe::optional<std::string> comment) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113{\effects Sets the associated comment. \requires The comment must not be empty, if there is one.}]]]
+attributes() const : cpp_attribute_list const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119{\returns The list of attributes that are specified for that entity.}]]]
+add_attribute(cpp_attribute attr) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125{\effects Adds an attribute for that entity.}]]]
+add_attribute(cpp_attribute_list const& list) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131{\effects Adds multiple arguments for that entity.}]]]
+user_data() const : void* [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137{\returns The specified user data.}]]]
+set_user_data(void* data) const : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149{\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi...}]]]
+cpp_entity(std::string name) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155{\effects Creates it giving it the the name.}]]]
}
class "cpp_unexposed_entity" as C_0000007918
class C_0000007918 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L187{A [cppast::cpp_entity]() that isn't exposed directly. The only information available is the raw source code.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190{kind}]]]
{static} +build(cpp_entity_index const& index, cpp_entity_id id, std::string name, cpp_token_string spelling) : std::unique_ptr<cpp_entity> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194{\returns A newly built and registered unexposed entity. \notes It will be registered as a declaration.}]]]
{static} +build(cpp_token_string spelling) : std::unique_ptr<cpp_entity> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199{\returns A newly built unnamed unexposed entity. It will not be registered.}]]]
+spelling() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202{\returns The spelling of that entity.}]]]
}
class "cpp_template_parameter" as C_0000007933
class C_0000007933 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L17{Base class for all entities modelling a template parameter of some kind.}]] {
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21{\returns Whether or not the parameter is variadic.}]]]
}
class "cpp_template_type_parameter" as C_0000007941
class C_0000007941 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L46{A [cppast::cpp_entity]() modelling a C++ template type parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, cpp_template_keyword kw, bool variadic, std::unique_ptr<cpp_type> default_type = nullptr) : std::unique_ptr<cpp_template_type_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53{\returns A newly created and registered template type parameter. \notes The `default_type` may be `nullptr` in which case the parameter has no default.}]]]
+default_type() const : type_safe::optional_ref<cpp_type const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58{\returns A [ts::optional_ref]() to the default type.}]]]
+keyword() const : cpp_template_keyword [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64{\returns The keyword used in the template parameter.}]]]
}
class "cpp_non_type_template_parameter" as C_0000007980
class C_0000007980 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L128{A [cppast::cpp_entity]() modelling a C++ non-type template parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, bool is_variadic, std::unique_ptr<cpp_expression> default_value = nullptr) : std::unique_ptr<cpp_non_type_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136{\returns A newly created and registered non type template parameter. \notes The `default_value` may be `nullptr` in which case the parameter has no default.}]]]
}
class "cpp_template_template_parameter" as C_0000007997
class C_0000007997 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L164{A [cppast::cpp_entity]() modelling a C++ template template parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167{kind}]]]
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213{\returns An iteratable object containing the template parameters of the template template parameter.}]]]
+keyword() const : cpp_template_keyword [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219{\returns The keyword used in the template parameter.}]]]
+default_template() const : type_safe::optional<cpp_template_ref> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225{\returns A [ts::optional]() that is the default template.}]]]
}
class "cpp_member_function_base" as C_0000008062
class C_0000008062 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L63{Base classes for all regular member function. The two derived classes are [cppast::cpp_member_function]() and [cppast::cpp_conversion_op]().}]] {
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67{\returns The return type of the member function.}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73{\returns Whether or not it is `virtual`.}]]]
+virtual_info() const : cpp_virtual const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79{\returns The `virtual`-ness of the member function.}]]]
+cv_qualifier() const : cpp_cv [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85{\returns The cv-qualifier on the member function.}]]]
+ref_qualifier() const : cpp_reference [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91{\returns The ref-qualifier on the member function.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97{\returns Whether or not the member function is `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103{\returns Whether or not the member function is `consteval`.}]]]
}
class "cpp_member_function" as C_0000008096
class C_0000008096 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L169{A [cppast::cpp_entity]() modelling a member function.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172{kind}]]]
}
class "cpp_conversion_op" as C_0000008104
class C_0000008104 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L191{A [cppast::cpp_entity]() modelling a C++ conversion operator.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194{kind}]]]
+is_explicit() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214{\returns Whether or not the conversion is `explicit`.}]]]
}
class "cpp_constructor" as C_0000008114
class C_0000008114 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L232{A [cppast::cpp_entity]() modelling a C++ constructor.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235{kind}]]]
+is_explicit() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263{\returns Whether or not the constructor is `explicit`.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269{\returns Whether or not the constructor is `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275{\returns Whether or not the constructor is `consteval`.}]]]
}
class "cpp_destructor" as C_0000008122
class C_0000008122 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L295{A [cppast::cpp_entity]() modelling a C++ destructor.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298{kind}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318{\returns Whether or not it is `virtual`.}]]]
+virtual_info() const : cpp_virtual [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324{\returns The `virtual`-ness of the constructor.}]]]
}
class "cpp_variable_template" as C_0000008272
class C_0000008272 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L13{A [cppast::cpp_entity]() modelling a C++ alias template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16{kind}]]]
+variable() const : cpp_variable const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26{\returns A reference to the type variable that is being templated.}]]]
}
C_0000007892 <|-- C_0000006252
C_0000007430 <|-- C_0000006313
C_0000007484 <|-- C_0000006323
C_0000007892 <|-- C_0000006381
C_0000007430 <|-- C_0000006404
C_0000007430 <|-- C_0000006423
C_0000007484 <|-- C_0000006433
C_0000007892 <|-- C_0000006604
C_0000007892 <|-- C_0000006615
C_0000007892 <|-- C_0000006644
C_0000007892 <|-- C_0000006716
C_0000007892 <|-- C_0000006844
C_0000006800 <|-- C_0000006844
C_0000007892 <|-- C_0000006868
C_0000006868 <|-- C_0000006910
C_0000007892 <|-- C_0000007116
C_0000007892 <|-- C_0000007165
C_0000007892 <|-- C_0000007183
C_0000007892 <|-- C_0000007430
C_0000007430 <|-- C_0000007484
C_0000007892 <|-- C_0000007515
C_0000007892 <|-- C_0000007532
C_0000007892 <|-- C_0000007536
C_0000007892 <|-- C_0000007566
C_0000007892 <|-- C_0000007672
C_0000006800 <|-- C_0000007672
C_0000007672 <|-- C_0000007680
C_0000007672 <|-- C_0000007692
C_0000007892 <|-- C_0000007726
C_0000007892 <|-- C_0000007747
C_0000007892 <|-- C_0000007767
C_0000007892 <|-- C_0000007783
C_0000007892 <|-- C_0000007825
C_0000006800 <|-- C_0000007825
C_0000007892 <|-- C_0000007918
C_0000007892 <|-- C_0000007933
C_0000007933 <|-- C_0000007941
C_0000007933 <|-- C_0000007980
C_0000006800 <|-- C_0000007980
C_0000007933 <|-- C_0000007997
C_0000006868 <|-- C_0000008062
C_0000008062 <|-- C_0000008096
C_0000008062 <|-- C_0000008104
C_0000006868 <|-- C_0000008114
C_0000006868 <|-- C_0000008122
C_0000007430 <|-- C_0000008272
@enduml
