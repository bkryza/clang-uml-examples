@startuml
left to right direction
class "cpp_template" as C_0000007122300671081288
class C_0000007122300671081288 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L61{cpp_template}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter>
}
class "cpp_constructor" as C_0000093026110207222749
class C_0000093026110207222749 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L24{cpp_constructor}]] {
{static} +kind() : cpp_entity_kind
+is_explicit() const : bool
+is_constexpr() const : bool
+is_consteval() const : bool
}
class "cpp_variable_base" as C_0000184600132526931259
class C_0000184600132526931259 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L79{cpp_variable_base}]] {
+type() const : const cpp_type &
+default_value() const : type_safe::basic_optional<const cpp_expression>
}
class "cpp_member_function" as C_0000204784596342006018
class C_0000204784596342006018 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L50{cpp_member_function}]] {
{static} +kind() : cpp_entity_kind
}
class "cpp_friend" as C_0000303046364398051951
class C_0000303046364398051951 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L38{cpp_friend}]] {
{static} +kind() : cpp_entity_kind
{static} +build(std::unique_ptr<cpp_entity> e) : std::unique_ptr<cpp_friend>
{static} +build(std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_friend>
+entity() const : type_safe::basic_optional<const cpp_entity>
+type() const : type_safe::basic_optional<const cpp_type>
}
class "cpp_class_template" as C_0000354944277741654522
class C_0000354944277741654522 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L21{cpp_class_template}]] {
{static} +kind() : cpp_entity_kind
+class_() const : const cpp_class &
}
class "cpp_class" as C_0000405957729531335243
class C_0000405957729531335243 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L20{cpp_class}]] {
{static} +kind() : cpp_entity_kind
+class_kind() const : cpp_class_kind
+is_final() const : bool
+bases() const : detail::iteratable_intrusive_list<cpp_base_class>
}
class "cpp_macro_parameter" as C_0000481403470717148125
class C_0000481403470717148125 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L49{cpp_macro_parameter}]] {
{static} +kind() : cpp_entity_kind
{static} +build(std::string name) : std::unique_ptr<cpp_macro_parameter>
}
class "cpp_variable_template" as C_0000528839971184410995
class C_0000528839971184410995 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L80{cpp_variable_template}]] {
{static} +kind() : cpp_entity_kind
+variable() const : const cpp_variable &
}
class "cpp_template_specialization" as C_0000529201356065019777
class C_0000529201356065019777 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L66{cpp_template_specialization}]] {
+primary_template() const : cpp_template_ref
+arguments_exposed() const : bool
+arguments() const : type_safe::array_ref<const cpp_template_argument>
+unexposed_arguments() const : const cpp_token_string &
+is_full_specialization() const : bool
}
class "cpp_enum_value" as C_0000569714057132864504
class C_0000569714057132864504 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L34{cpp_enum_value}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_expression> value = nullptr) : std::unique_ptr<cpp_enum_value>
+value() const : type_safe::basic_optional<const cpp_expression>
}
class "cpp_using_declaration" as C_0000609158070514656735
class C_0000609158070514656735 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L76{cpp_using_declaration}]] {
{static} +kind() : cpp_entity_kind
{static} +build(cpp_entity_ref target) : std::unique_ptr<cpp_using_declaration>
+target() const : const cpp_entity_ref &
}
class "cpp_access_specifier" as C_0000706843607037461153
class C_0000706843607037461153 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L12{cpp_access_specifier}]] {
{static} +kind() : cpp_entity_kind
{static} +build(cpp_access_specifier_kind kind) : std::unique_ptr<cpp_access_specifier>
+access_specifier() const : cpp_access_specifier_kind
}
class "cpp_include_directive" as C_0000710886303767961620
class C_0000710886303767961620 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L45{cpp_include_directive}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_file_ref & target, cpp_include_kind kind, std::string full_path) : std::unique_ptr<cpp_include_directive>
+target() const : cpp_file_ref
+include_kind() const : cpp_include_kind
+full_path() const : const std::string &
}
class "cpp_template_template_parameter" as C_0000753898560016921202
class C_0000753898560016921202 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L67{cpp_template_template_parameter}]] {
{static} +kind() : cpp_entity_kind
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter>
+keyword() const : cpp_template_keyword
+default_template() const : type_safe::basic_optional<cpp_template_ref>
}
class "cpp_using_directive" as C_0000884493087412892762
class C_0000884493087412892762 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L77{cpp_using_directive}]] {
{static} +kind() : cpp_entity_kind
{static} +build(cpp_namespace_ref target) : std::unique_ptr<cpp_using_directive>
+target() const : const cpp_namespace_ref &
}
class "cpp_enum" as C_0000914084519342392608
class C_0000914084519342392608 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L33{cpp_enum}]] {
{static} +kind() : cpp_entity_kind
+underlying_type() const : const cpp_type &
+has_explicit_type() const : bool
+is_scoped() const : bool
}
class "cpp_alias_template" as C_0000949738581869538757
class C_0000949738581869538757 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L13{cpp_alias_template}]] {
{static} +kind() : cpp_entity_kind
+type_alias() const : const cpp_type_alias &
}
class "cpp_concept" as C_0001015000934507811109
class C_0001015000934507811109 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L23{cpp_concept}]] {
{static} +kind() : cpp_entity_kind
+parameters() const : const cpp_token_string &
+constraint_expression() const : const cpp_expression &
}
class "cpp_function" as C_0001029800296375209800
class C_0001029800296375209800 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L39{cpp_function}]] {
{static} +kind() : cpp_entity_kind
+return_type() const : const cpp_type &
+storage_class() const : cpp_storage_class_specifiers
+is_constexpr() const : bool
+is_consteval() const : bool
}
class "cpp_static_assert" as C_0001035636844572508781
class C_0001035636844572508781 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L60{cpp_static_assert}]] {
{static} +kind() : cpp_entity_kind
{static} +build(std::unique_ptr<cpp_expression> expr, std::string msg) : std::unique_ptr<cpp_static_assert>
+expression() const : const cpp_expression &
+message() const : const std::string &
}
class "cpp_bitfield" as C_0001142080746427367264
class C_0001142080746427367264 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L18{cpp_bitfield}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield>
{static} +build(std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield>
+no_bits() const : unsigned int
}
class "cpp_template_parameter" as C_0001158442798649543268
class C_0001158442798649543268 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L64{cpp_template_parameter}]] {
+is_variadic() const : bool
}
class "cpp_function_base" as C_0001223070325447825853
class C_0001223070325447825853 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L40{cpp_function_base}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_function_parameter>
+body_kind() const : cpp_function_body_kind
+noexcept_condition() const : type_safe::basic_optional<const cpp_expression>
+is_variadic() const : bool
+signature() const : std::string
}
class "cpp_file" as C_0001248593507051490272
class C_0001248593507051490272 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L36{cpp_file}]] {
{static} +kind() : cpp_entity_kind
+unmatched_comments() const : type_safe::array_ref<const cpp_doc_comment>
}
class "cpp_member_variable_base" as C_0001290905484738066347
class C_0001290905484738066347 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L54{cpp_member_variable_base}]] {
+is_mutable() const : bool
+cpp_member_variable_base(std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : void
}
class "cpp_namespace" as C_0001318630691633731356
class C_0001318630691633731356 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L55{cpp_namespace}]] {
{static} +kind() : cpp_entity_kind
+is_inline() const : bool
+is_nested() const : bool
+is_anonymous() const : bool
}
class "cpp_function_parameter" as C_0001352597003719961343
class C_0001352597003719961343 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L41{cpp_function_parameter}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter>
{static} +build(std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter>
}
class "cpp_language_linkage" as C_0001368865032388034918
class C_0001368865032388034918 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L46{cpp_language_linkage}]] {
{static} +kind() : cpp_entity_kind
+is_block() const : bool
+cpp_entity(std::string ) : void
}
class "cpp_unexposed_entity" as C_0001449857709503654826
class C_0001449857709503654826 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L72{cpp_unexposed_entity}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & index, cpp_entity_id id, std::string name, cpp_token_string spelling) : std::unique_ptr<cpp_entity>
{static} +build(cpp_token_string spelling) : std::unique_ptr<cpp_entity>
+spelling() const : const cpp_token_string &
}
class "cpp_function_template" as C_0001450758198445278335
class C_0001450758198445278335 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L42{cpp_function_template}]] {
{static} +kind() : cpp_entity_kind
+function() const : const cpp_function_base &
}
class "cpp_non_type_template_parameter" as C_0001461284658212381765
class C_0001461284658212381765 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L56{cpp_non_type_template_parameter}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, bool is_variadic, std::unique_ptr<cpp_expression> default_value = nullptr) : std::unique_ptr<cpp_non_type_template_parameter>
}
class "cpp_base_class" as C_0001513295345096619386
class C_0001513295345096619386 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L17{cpp_base_class}]] {
{static} +kind() : cpp_entity_kind
{static} +build(std::string name, std::unique_ptr<cpp_type> base, cpp_access_specifier_kind access, bool is_virtual) : std::unique_ptr<cpp_base_class>
+type() const : const cpp_type &
+access_specifier() const : cpp_access_specifier_kind
+is_virtual() const : bool
}
class "cpp_destructor" as C_0001522207092676876515
class C_0001522207092676876515 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L30{cpp_destructor}]] {
{static} +kind() : cpp_entity_kind
+is_virtual() const : bool
+virtual_info() const : cpp_virtual
}
class "cpp_type_alias" as C_0001652684387667767114
class C_0001652684387667767114 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L71{cpp_type_alias}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias>
{static} +build(std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias>
+underlying_type() const : const cpp_type &
}
class "cpp_macro_definition" as C_0001660861710076468858
class C_0001660861710076468858 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L48{cpp_macro_definition}]] {
{static} +kind() : cpp_entity_kind
{static} +build_object_like(std::string name, std::string replacement) : std::unique_ptr<cpp_macro_definition>
+replacement() const : const std::string &
+is_object_like() const : bool
+is_function_like() const : bool
+is_variadic() const : bool
+parameters() const : detail::iteratable_intrusive_list<cpp_macro_parameter>
}
class "cpp_template_type_parameter" as C_0001672854013158225149
class C_0001672854013158225149 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L68{cpp_template_type_parameter}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, cpp_template_keyword kw, bool variadic, std::unique_ptr<cpp_type> default_type = nullptr, type_safe::basic_optional<cpp_token_string> concept_constraint = type_safe::nullopt) : std::unique_ptr<cpp_template_type_parameter>
+default_type() const : type_safe::basic_optional<const cpp_type>
+keyword() const : cpp_template_keyword
+concept_constraint() const : const type_safe::basic_optional<cpp_token_string> &
}
class "cpp_variable" as C_0001714681292788161746
class C_0001714681292788161746 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L78{cpp_variable}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable>
{static} +build_declaration(cpp_entity_id definition_id, std::string name, std::unique_ptr<cpp_type> type, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable>
+storage_class() const : cpp_storage_class_specifiers
+is_constexpr() const : bool
}
class "cpp_conversion_op" as C_0001746973142219232442
class C_0001746973142219232442 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L25{cpp_conversion_op}]] {
{static} +kind() : cpp_entity_kind
+is_explicit() const : bool
}
class "cpp_class_template_specialization" as C_0001762684826194706908
class C_0001762684826194706908 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L22{cpp_class_template_specialization}]] {
{static} +kind() : cpp_entity_kind
+class_() const : const cpp_class &
}
class "cpp_member_function_base" as C_0001783488486496950492
class C_0001783488486496950492 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L51{cpp_member_function_base}]] {
+return_type() const : const cpp_type &
+is_virtual() const : bool
+virtual_info() const : const cpp_virtual &
+cv_qualifier() const : cpp_cv
+ref_qualifier() const : cpp_reference
+is_constexpr() const : bool
+is_consteval() const : bool
}
abstract "cpp_entity" as C_0001854695372332280903
abstract C_0001854695372332280903 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L31{cpp_entity}]] {
+cpp_entity(const cpp_entity & ) : void
+operator=(const cpp_entity & ) : cpp_entity &
+~cpp_entity() = default : void
+kind() const : cpp_entity_kind
+name() const : const std::string &
+scope_name() const : type_safe::basic_optional<cpp_scope_name>
+parent() const : type_safe::basic_optional<const cpp_entity>
+comment() const : type_safe::basic_optional<const std::string>
+set_comment(type_safe::basic_optional<std::string> comment) : void
+attributes() const : const cpp_attribute_list &
+add_attribute(cpp_attribute attr) : void
+add_attribute(const cpp_attribute_list & list) : void
+user_data() const : void *
+set_user_data(void * data) const : void
+cpp_entity(std::string name) : void
}
class "cpp_function_template_specialization" as C_0001912174880347917630
class C_0001912174880347917630 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cppast_fwd.hpp#L43{cpp_function_template_specialization}]] {
{static} +kind() : cpp_entity_kind
+function() const : const cpp_function_base &
}
class "cpp_member_variable" as C_0002206472772300753495
class C_0002206472772300753495 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_member_variable.hpp#L33{A [cppast::cpp_entity]() modelling a C++ member variable.}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : std::unique_ptr<cpp_member_variable>
+cpp_member_variable_base(std::string , std::unique_ptr<cpp_type> , std::unique_ptr<cpp_expression> , bool ) : void
}
class "cpp_namespace_alias" as C_0000173412889635012893
class C_0000173412889635012893 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_namespace.hpp#L102{A [cppast::cpp_entity]() modelling a namespace alias.}]] {
{static} +kind() : cpp_entity_kind
{static} +build(const cpp_entity_index & idx, cpp_entity_id id, std::string name, cpp_namespace_ref target) : std::unique_ptr<cpp_namespace_alias>
+target() const : const cpp_namespace_ref &
}
C_0001854695372332280903 <|-- C_0000007122300671081288
C_0001223070325447825853 <|-- C_0000093026110207222749
C_0001783488486496950492 <|-- C_0000204784596342006018
C_0001854695372332280903 <|-- C_0000303046364398051951
C_0000007122300671081288 <|-- C_0000354944277741654522
C_0001854695372332280903 <|-- C_0000405957729531335243
C_0001854695372332280903 <|-- C_0000481403470717148125
C_0000007122300671081288 <|-- C_0000528839971184410995
C_0000007122300671081288 <|-- C_0000529201356065019777
C_0001854695372332280903 <|-- C_0000569714057132864504
C_0001854695372332280903 <|-- C_0000609158070514656735
C_0001854695372332280903 <|-- C_0000706843607037461153
C_0001854695372332280903 <|-- C_0000710886303767961620
C_0001158442798649543268 <|-- C_0000753898560016921202
C_0001854695372332280903 <|-- C_0000884493087412892762
C_0001854695372332280903 <|-- C_0000914084519342392608
C_0000007122300671081288 <|-- C_0000949738581869538757
C_0001854695372332280903 <|-- C_0001015000934507811109
C_0001223070325447825853 <|-- C_0001029800296375209800
C_0001854695372332280903 <|-- C_0001035636844572508781
C_0001290905484738066347 <|-- C_0001142080746427367264
C_0001854695372332280903 <|-- C_0001158442798649543268
C_0001854695372332280903 <|-- C_0001223070325447825853
C_0001854695372332280903 <|-- C_0001248593507051490272
C_0001854695372332280903 <|-- C_0001290905484738066347
C_0000184600132526931259 <|-- C_0001290905484738066347
C_0001854695372332280903 <|-- C_0001318630691633731356
C_0001854695372332280903 <|-- C_0001352597003719961343
C_0000184600132526931259 <|-- C_0001352597003719961343
C_0001854695372332280903 <|-- C_0001368865032388034918
C_0001854695372332280903 <|-- C_0001449857709503654826
C_0000007122300671081288 <|-- C_0001450758198445278335
C_0001158442798649543268 <|-- C_0001461284658212381765
C_0000184600132526931259 <|-- C_0001461284658212381765
C_0001854695372332280903 <|-- C_0001513295345096619386
C_0001223070325447825853 <|-- C_0001522207092676876515
C_0001854695372332280903 <|-- C_0001652684387667767114
C_0001854695372332280903 <|-- C_0001660861710076468858
C_0001158442798649543268 <|-- C_0001672854013158225149
C_0001854695372332280903 <|-- C_0001714681292788161746
C_0000184600132526931259 <|-- C_0001714681292788161746
C_0001783488486496950492 <|-- C_0001746973142219232442
C_0000529201356065019777 <|-- C_0001762684826194706908
C_0001223070325447825853 <|-- C_0001783488486496950492
C_0000529201356065019777 <|-- C_0001912174880347917630
C_0001290905484738066347 <|-- C_0002206472772300753495
C_0001854695372332280903 <|-- C_0000173412889635012893
@enduml
