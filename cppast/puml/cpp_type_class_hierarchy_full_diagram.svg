<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1841px" preserveAspectRatio="none" style="width:1109px;height:1841px;" version="1.1" viewBox="0 0 1109 1841" width="1109px" zoomAndPan="magnify"><defs><filter height="300%" id="fwzaz1vakbzk" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[dd0d16835e3877cfc8afb6ca0cf8ed4e]
class C_0000002354--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L14" target="_top" title="A [cppast::cpp_type]() that is a function. A function pointer is created by wrapping it in [cppast::cpp_pointer_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L14" xlink:show="new" xlink:title="A [cppast::cpp_type]() that is a function. A function pointer is created by wrapping it in [cppast::cpp_pointer_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="86.4141" id="C_0000002354" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="505" y="8"/><ellipse cx="652.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M655.7188,29.6406 Q655.1406,29.9375 654.5,30.0781 Q653.8594,30.2344 653.1563,30.2344 Q650.6563,30.2344 649.3281,28.5938 Q648.0156,26.9375 648.0156,23.8125 Q648.0156,20.6875 649.3281,19.0313 Q650.6563,17.375 653.1563,17.375 Q653.8594,17.375 654.5,17.5313 Q655.1563,17.6875 655.7188,17.9844 L655.7188,20.7031 Q655.0938,20.125 654.5,19.8594 Q653.9063,19.5781 653.2813,19.5781 Q651.9375,19.5781 651.25,20.6563 Q650.5625,21.7188 650.5625,23.8125 Q650.5625,25.9063 651.25,26.9844 Q651.9375,28.0469 653.2813,28.0469 Q653.9063,28.0469 654.5,27.7813 Q655.0938,27.5 655.7188,26.9219 L655.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="113" x="673.25" y="28.1543">cpp_function_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="506" x2="921" y1="40" y2="40"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="506" x2="921" y1="48" y2="48"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L49" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L49" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="54"/><ellipse cx="516" cy="59" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L49" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L49" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="525" y="62.2104">return_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L55" target="_top" title="\returns An iteratable object iterating over the parameter types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L55" xlink:show="new" xlink:title="\returns An iteratable object iterating over the parameter types." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="66.8047"/><ellipse cx="516" cy="71.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L55" target="_top" title="\returns An iteratable object iterating over the parameter types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L55" xlink:show="new" xlink:title="\returns An iteratable object iterating over the parameter types." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="525" y="75.0151">parameter_types() const : detail::iteratable_intrusive_list&lt;cpp_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L61" target="_top" title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L61" xlink:show="new" xlink:title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="79.6094"/><ellipse cx="516" cy="84.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L61" target="_top" title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L61" xlink:show="new" xlink:title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="525" y="87.8198">is_variadic() const : bool</text></a><!--MD5=[d2536ccc42f685fba8dddd7fba4d2e31]
class C_0000002417--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L87" target="_top" title="A [cppast::cpp_type]() that is a member function. A member function with cv qualifier is created by wrapping it in [cppast::cpp_cv_qualified_type](). A member function with reference qualifier is created by wrapping it in [cppast::cpp_reference_type]()...." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L87" xlink:show="new" xlink:title="A [cppast::cpp_type]() that is a member function. A member function with cv qualifier is created by wrapping it in [cppast::cpp_cv_qualified_type](). A member function with reference qualifier is created by wrapping it in [cppast::cpp_reference_type]()...." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="99.2188" id="C_0000002417" style="stroke: #A80036; stroke-width: 1.5;" width="417" x="505" y="129.5"/><ellipse cx="624.25" cy="145.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M627.2188,151.1406 Q626.6406,151.4375 626,151.5781 Q625.3594,151.7344 624.6563,151.7344 Q622.1563,151.7344 620.8281,150.0938 Q619.5156,148.4375 619.5156,145.3125 Q619.5156,142.1875 620.8281,140.5313 Q622.1563,138.875 624.6563,138.875 Q625.3594,138.875 626,139.0313 Q626.6563,139.1875 627.2188,139.4844 L627.2188,142.2031 Q626.5938,141.625 626,141.3594 Q625.4063,141.0781 624.7813,141.0781 Q623.4375,141.0781 622.75,142.1563 Q622.0625,143.2188 622.0625,145.3125 Q622.0625,147.4063 622.75,148.4844 Q623.4375,149.5469 624.7813,149.5469 Q625.4063,149.5469 626,149.2813 Q626.5938,149 627.2188,148.4219 L627.2188,151.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="170" x="644.75" y="149.6543">cpp_member_function_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="506" x2="921" y1="161.5" y2="161.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="506" x2="921" y1="169.5" y2="169.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L122" target="_top" title="\returns A reference to the class [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L122" xlink:show="new" xlink:title="\returns A reference to the class [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="175.5"/><ellipse cx="516" cy="180.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L122" target="_top" title="\returns A reference to the class [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L122" xlink:show="new" xlink:title="\returns A reference to the class [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="525" y="183.7104">class_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L128" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L128" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="188.3047"/><ellipse cx="516" cy="193.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L128" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L128" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="525" y="196.5151">return_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L134" target="_top" title="\returns An iteratable object iterating over the parameter types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L134" xlink:show="new" xlink:title="\returns An iteratable object iterating over the parameter types." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="201.1094"/><ellipse cx="516" cy="206.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L134" target="_top" title="\returns An iteratable object iterating over the parameter types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L134" xlink:show="new" xlink:title="\returns An iteratable object iterating over the parameter types." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="525" y="209.3198">parameter_types() const : detail::iteratable_intrusive_list&lt;cpp_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L140" target="_top" title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L140" xlink:show="new" xlink:title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="511" y="213.9141"/><ellipse cx="516" cy="218.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L140" target="_top" title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L140" xlink:show="new" xlink:title="\returns Whether or not the function is variadic (C-style ellipsis)." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="525" y="222.1245">is_variadic() const : bool</text></a><!--MD5=[e7ce9f6c2c787b6b12a54ca8785f7353]
class C_0000002491--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L164" target="_top" title="A [cppast::cpp_type]() that is a member object. A member object pointer is created by wrapping it in [cppast::cpp_pointer_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L164" xlink:show="new" xlink:title="A [cppast::cpp_type]() that is a member object. A member object pointer is created by wrapping it in [cppast::cpp_pointer_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="86.4141" id="C_0000002491" style="stroke: #A80036; stroke-width: 1.5;" width="769" x="329" y="264"/><ellipse cx="630.25" cy="280" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M633.2188,285.6406 Q632.6406,285.9375 632,286.0781 Q631.3594,286.2344 630.6563,286.2344 Q628.1563,286.2344 626.8281,284.5938 Q625.5156,282.9375 625.5156,279.8125 Q625.5156,276.6875 626.8281,275.0313 Q628.1563,273.375 630.6563,273.375 Q631.3594,273.375 632,273.5313 Q632.6563,273.6875 633.2188,273.9844 L633.2188,276.7031 Q632.5938,276.125 632,275.8594 Q631.4063,275.5781 630.7813,275.5781 Q629.4375,275.5781 628.75,276.6563 Q628.0625,277.7188 628.0625,279.8125 Q628.0625,281.9063 628.75,282.9844 Q629.4375,284.0469 630.7813,284.0469 Q631.4063,284.0469 632,283.7813 Q632.5938,283.5 633.2188,282.9219 L633.2188,285.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="158" x="650.75" y="284.1543">cpp_member_object_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="330" x2="1097" y1="296" y2="296"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="330" x2="1097" y1="304" y2="304"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L168" target="_top" title="\returns A newly created member object type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L168" xlink:show="new" xlink:title="\returns A newly created member object type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="335" y="310"/><ellipse cx="340" cy="315" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L168" target="_top" title="\returns A newly created member object type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L168" xlink:show="new" xlink:title="\returns A newly created member object type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="743" x="349" y="318.2104">build(std::unique_ptr&lt;cpp_type&gt; class_type, std::unique_ptr&lt;cpp_type&gt; object_type) : std::unique_ptr&lt;cpp_member_object_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L176" target="_top" title="\returns A reference to the class [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L176" xlink:show="new" xlink:title="\returns A reference to the class [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="335" y="322.8047"/><ellipse cx="340" cy="327.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L176" target="_top" title="\returns A reference to the class [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L176" xlink:show="new" xlink:title="\returns A reference to the class [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="349" y="331.0151">class_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L182" target="_top" title="\returns A reference to the object [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L182" xlink:show="new" xlink:title="\returns A reference to the object [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="335" y="335.6094"/><ellipse cx="340" cy="340.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L182" target="_top" title="\returns A reference to the object [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L182" xlink:show="new" xlink:title="\returns A reference to the object [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="349" y="343.8198">object_type() const : cpp_type const&amp;</text></a><!--MD5=[df6d1db8db1973195a8f72b5a5038613]
class C_0000002684--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L93" target="_top" title="A [cppast::cpp_type]() representing an instantiation of a [cppast::cpp_template]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L93" xlink:show="new" xlink:title="A [cppast::cpp_type]() representing an instantiation of a [cppast::cpp_template]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="99.2188" id="C_0000002684" style="stroke: #A80036; stroke-width: 1.5;" width="574" x="426.5" y="385.5"/><ellipse cx="607.75" cy="401.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M610.7188,407.1406 Q610.1406,407.4375 609.5,407.5781 Q608.8594,407.7344 608.1563,407.7344 Q605.6563,407.7344 604.3281,406.0938 Q603.0156,404.4375 603.0156,401.3125 Q603.0156,398.1875 604.3281,396.5313 Q605.6563,394.875 608.1563,394.875 Q608.8594,394.875 609.5,395.0313 Q610.1563,395.1875 610.7188,395.4844 L610.7188,398.2031 Q610.0938,397.625 609.5,397.3594 Q608.9063,397.0781 608.2813,397.0781 Q606.9375,397.0781 606.25,398.1563 Q605.5625,399.2188 605.5625,401.3125 Q605.5625,403.4063 606.25,404.4844 Q606.9375,405.5469 608.2813,405.5469 Q608.9063,405.5469 609.5,405.2813 Q610.0938,405 610.7188,404.4219 L610.7188,407.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="203" x="628.25" y="405.6543">cpp_template_instantiation_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="427.5" x2="999.5" y1="417.5" y2="417.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="427.5" x2="999.5" y1="425.5" y2="425.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L132" target="_top" title="\returns A reference to the template that is being instantiated. &#10;otes It could also point to a specialization, this is just the *primary* template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L132" xlink:show="new" xlink:title="\returns A reference to the template that is being instantiated. &#10;otes It could also point to a specialization, this is just the *primary* template." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="432.5" y="431.5"/><ellipse cx="437.5" cy="436.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L132" target="_top" title="\returns A reference to the template that is being instantiated. &#10;otes It could also point to a specialization, this is just the *primary* template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L132" xlink:show="new" xlink:title="\returns A reference to the template that is being instantiated. &#10;otes It could also point to a specialization, this is just the *primary* template." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="446.5" y="439.7104">primary_template() const : cpp_template_ref const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L138" target="_top" title="\returns Whether or not the arguments are exposed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L138" xlink:show="new" xlink:title="\returns Whether or not the arguments are exposed." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="432.5" y="444.3047"/><ellipse cx="437.5" cy="449.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L138" target="_top" title="\returns Whether or not the arguments are exposed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L138" xlink:show="new" xlink:title="\returns Whether or not the arguments are exposed." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="446.5" y="452.5151">arguments_exposed() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L145" target="_top" title="\returns An array ref to the [cppast::cpp_template_argument](), if there are any. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L145" xlink:show="new" xlink:title="\returns An array ref to the [cppast::cpp_template_argument](), if there are any. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="432.5" y="457.1094"/><ellipse cx="437.5" cy="462.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L145" target="_top" title="\returns An array ref to the [cppast::cpp_template_argument](), if there are any. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L145" xlink:show="new" xlink:title="\returns An array ref to the [cppast::cpp_template_argument](), if there are any. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="446.5" y="465.3198">arguments() const : type_safe::optional&lt;type_safe::array_ref&lt;cpp_template_argument const&gt;&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L156" target="_top" title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L156" xlink:show="new" xlink:title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="432.5" y="469.9141"/><ellipse cx="437.5" cy="474.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L156" target="_top" title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L156" xlink:show="new" xlink:title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="446.5" y="478.1245">unexposed_arguments() const : std::string const&amp;</text></a><!--MD5=[ccd03360a36064c30686135ead86d8be]
class C_0000003189--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L13" target="_top" title="A [cppast::cpp_type]() that isn't given but taken from an expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_type]() that isn't given but taken from an expression." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000003189" style="stroke: #A80036; stroke-width: 1.5;" width="502" x="462.5" y="520"/><ellipse cx="651.75" cy="536" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M654.7188,541.6406 Q654.1406,541.9375 653.5,542.0781 Q652.8594,542.2344 652.1563,542.2344 Q649.6563,542.2344 648.3281,540.5938 Q647.0156,538.9375 647.0156,535.8125 Q647.0156,532.6875 648.3281,531.0313 Q649.6563,529.375 652.1563,529.375 Q652.8594,529.375 653.5,529.5313 Q654.1563,529.6875 654.7188,529.9844 L654.7188,532.7031 Q654.0938,532.125 653.5,531.8594 Q652.9063,531.5781 652.2813,531.5781 Q650.9375,531.5781 650.25,532.6563 Q649.5625,533.7188 649.5625,535.8125 Q649.5625,537.9063 650.25,538.9844 Q650.9375,540.0469 652.2813,540.0469 Q652.9063,540.0469 653.5,539.7813 Q654.0938,539.5 654.7188,538.9219 L654.7188,541.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="672.25" y="540.1543">cpp_decltype_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="463.5" x2="963.5" y1="552" y2="552"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="463.5" x2="963.5" y1="560" y2="560"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L17" target="_top" title="\returns A newly created `decltype` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L17" xlink:show="new" xlink:title="\returns A newly created `decltype` type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="468.5" y="566"/><ellipse cx="473.5" cy="571" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L17" target="_top" title="\returns A newly created `decltype` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L17" xlink:show="new" xlink:title="\returns A newly created `decltype` type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="476" x="482.5" y="574.2104">build(std::unique_ptr&lt;cpp_expression&gt; expr) : std::unique_ptr&lt;cpp_decltype_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L23" target="_top" title="\returns A reference to the expression given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L23" xlink:show="new" xlink:title="\returns A reference to the expression given." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="468.5" y="578.8047"/><ellipse cx="473.5" cy="583.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L23" target="_top" title="\returns A reference to the expression given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L23" xlink:show="new" xlink:title="\returns A reference to the expression given." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="482.5" y="587.0151">expression() const : cpp_expression const&amp;</text></a><!--MD5=[28827f8090117d34669642cfa9d1d171]
class C_0000003205--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L40" target="_top" title="A [cppast::cpp_type]() that isn't given but deduced using the `decltype` rules." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L40" xlink:show="new" xlink:title="A [cppast::cpp_type]() that isn't given but deduced using the `decltype` rules." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="60.8047" id="C_0000003205" style="stroke: #A80036; stroke-width: 1.5;" width="311" x="558" y="629.5"/><ellipse cx="634.25" cy="645.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M637.2188,651.1406 Q636.6406,651.4375 636,651.5781 Q635.3594,651.7344 634.6563,651.7344 Q632.1563,651.7344 630.8281,650.0938 Q629.5156,648.4375 629.5156,645.3125 Q629.5156,642.1875 630.8281,640.5313 Q632.1563,638.875 634.6563,638.875 Q635.3594,638.875 636,639.0313 Q636.6563,639.1875 637.2188,639.4844 L637.2188,642.2031 Q636.5938,641.625 636,641.3594 Q635.4063,641.0781 634.7813,641.0781 Q633.4375,641.0781 632.75,642.1563 Q632.0625,643.2188 632.0625,645.3125 Q632.0625,647.4063 632.75,648.4844 Q633.4375,649.5469 634.7813,649.5469 Q635.4063,649.5469 636,649.2813 Q636.5938,649 637.2188,648.4219 L637.2188,651.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="150" x="654.75" y="649.6543">cpp_decltype_auto_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="559" x2="868" y1="661.5" y2="661.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="559" x2="868" y1="669.5" y2="669.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L44" target="_top" title="\returns A newly created `auto` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L44" xlink:show="new" xlink:title="\returns A newly created `auto` type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="564" y="675.5"/><ellipse cx="569" cy="680.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L44" target="_top" title="\returns A newly created `auto` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L44" xlink:show="new" xlink:title="\returns A newly created `auto` type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="285" x="578" y="683.7104">build() : std::unique_ptr&lt;cpp_decltype_auto_type&gt;</text></a><!--MD5=[e50a2e18a17ffc8ace231c4a3d6274b7]
class C_0000003400--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L13" target="_top" title="An array of a [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L13" xlink:show="new" xlink:title="An array of a [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="86.4141" id="C_0000003400" style="stroke: #A80036; stroke-width: 1.5;" width="672" x="377.5" y="726"/><ellipse cx="662.25" cy="742" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M665.2188,747.6406 Q664.6406,747.9375 664,748.0781 Q663.3594,748.2344 662.6563,748.2344 Q660.1563,748.2344 658.8281,746.5938 Q657.5156,744.9375 657.5156,741.8125 Q657.5156,738.6875 658.8281,737.0313 Q660.1563,735.375 662.6563,735.375 Q663.3594,735.375 664,735.5313 Q664.6563,735.6875 665.2188,735.9844 L665.2188,738.7031 Q664.5938,738.125 664,737.8594 Q663.4063,737.5781 662.7813,737.5781 Q661.4375,737.5781 660.75,738.6563 Q660.0625,739.7188 660.0625,741.8125 Q660.0625,743.9063 660.75,744.9844 Q661.4375,746.0469 662.7813,746.0469 Q663.4063,746.0469 664,745.7813 Q664.5938,745.5 665.2188,744.9219 L665.2188,747.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="682.75" y="746.1543">cpp_array_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="378.5" x2="1048.5" y1="758" y2="758"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="378.5" x2="1048.5" y1="766" y2="766"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L18" target="_top" title="\returns A newly created array. &#10;otes `size` may be `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L18" xlink:show="new" xlink:title="\returns A newly created array. &#10;otes `size` may be `nullptr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="383.5" y="772"/><ellipse cx="388.5" cy="777" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L18" target="_top" title="\returns A newly created array. &#10;otes `size` may be `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L18" xlink:show="new" xlink:title="\returns A newly created array. &#10;otes `size` may be `nullptr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="646" x="397.5" y="780.2104">build(std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; size) : std::unique_ptr&lt;cpp_array_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L26" target="_top" title="\returns A reference to the value [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the value [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="383.5" y="784.8047"/><ellipse cx="388.5" cy="789.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L26" target="_top" title="\returns A reference to the value [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the value [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="397.5" y="793.0151">value_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L33" target="_top" title="\returns An optional reference to the [cppast::cpp_expression]() that is the size of the array. &#10;otes An unsized array - `T[]` - does not have a size." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L33" xlink:show="new" xlink:title="\returns An optional reference to the [cppast::cpp_expression]() that is the size of the array. &#10;otes An unsized array - `T[]` - does not have a size." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="383.5" y="797.6094"/><ellipse cx="388.5" cy="802.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L33" target="_top" title="\returns An optional reference to the [cppast::cpp_expression]() that is the size of the array. &#10;otes An unsized array - `T[]` - does not have a size." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L33" xlink:show="new" xlink:title="\returns An optional reference to the [cppast::cpp_expression]() that is the size of the array. &#10;otes An unsized array - `T[]` - does not have a size." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="397.5" y="805.8198">size() const : type_safe::optional_ref&lt;cpp_expression const&gt;</text></a><!--MD5=[293185373e6111e0edbf765b00415535]
class C_0000003729--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L97" target="_top" title="A [cppast::cpp_type]() defined by a [cppast::cpp_template_type_parameter]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L97" xlink:show="new" xlink:title="A [cppast::cpp_type]() defined by a [cppast::cpp_template_type_parameter]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000003729" style="stroke: #A80036; stroke-width: 1.5;" width="607" x="410" y="847"/><ellipse cx="614.25" cy="863" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M617.2188,868.6406 Q616.6406,868.9375 616,869.0781 Q615.3594,869.2344 614.6563,869.2344 Q612.1563,869.2344 610.8281,867.5938 Q609.5156,865.9375 609.5156,862.8125 Q609.5156,859.6875 610.8281,858.0313 Q612.1563,856.375 614.6563,856.375 Q615.3594,856.375 616,856.5313 Q616.6563,856.6875 617.2188,856.9844 L617.2188,859.7031 Q616.5938,859.125 616,858.8594 Q615.4063,858.5781 614.7813,858.5781 Q613.4375,858.5781 612.75,859.6563 Q612.0625,860.7188 612.0625,862.8125 Q612.0625,864.9063 612.75,865.9844 Q613.4375,867.0469 614.7813,867.0469 Q615.4063,867.0469 616,866.7813 Q616.5938,866.5 617.2188,865.9219 L617.2188,868.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="190" x="634.75" y="867.1543">cpp_template_parameter_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="411" x2="1016" y1="879" y2="879"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="411" x2="1016" y1="887" y2="887"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L101" target="_top" title="\returns A newly created parameter type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L101" xlink:show="new" xlink:title="\returns A newly created parameter type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="416" y="893"/><ellipse cx="421" cy="898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L101" target="_top" title="\returns A newly created parameter type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L101" xlink:show="new" xlink:title="\returns A newly created parameter type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="581" x="430" y="901.2104">build(cpp_template_type_parameter_ref parameter) : std::unique_ptr&lt;cpp_template_parameter_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L109" target="_top" title="\returns A reference to the [cppast::cpp_template_type_parameter]() this type refers to." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L109" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_template_type_parameter]() this type refers to." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="416" y="905.8047"/><ellipse cx="421" cy="910.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L109" target="_top" title="\returns A reference to the [cppast::cpp_template_type_parameter]() this type refers to." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L109" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_template_type_parameter]() this type refers to." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="430" y="914.0151">entity() const : cpp_template_type_parameter_ref const&amp;</text></a><!--MD5=[3f33da2fdf25d02b5b1020b2eda6b538]
class C_0000004108--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L44" target="_top" title="Base class for all C++ types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L44" xlink:show="new" xlink:title="Base class for all C++ types." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="124.8281" id="C_0000004108" style="stroke: #A80036; stroke-width: 1.5;" width="263" x="6" y="876.5"/><ellipse cx="104.75" cy="892.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M104.8594,887.8438 L103.7031,892.9219 L106.0313,892.9219 L104.8594,887.8438 Z M103.375,885.6094 L106.3594,885.6094 L109.7188,898 L107.2656,898 L106.5,894.9375 L103.2188,894.9375 L102.4688,898 L100.0313,898 L103.375,885.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="125.25" y="896.6543">cpp_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="268" y1="908.5" y2="908.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="268" y1="916.5" y2="916.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L47" target="_top" title="cpp_type" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L47" xlink:show="new" xlink:title="cpp_type" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="922.5"/><ellipse cx="17" cy="927.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L47" target="_top" title="cpp_type" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L47" xlink:show="new" xlink:title="cpp_type" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="26" y="930.7104">cpp_type(cpp_type const&amp; ) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L48" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L48" xlink:show="new" xlink:title="operator=" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="935.3047"/><ellipse cx="17" cy="940.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L48" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L48" xlink:show="new" xlink:title="operator=" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="26" y="943.5151">operator=(cpp_type const&amp; ) : cpp_type&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L50" target="_top" title="~cpp_type" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L50" xlink:show="new" xlink:title="~cpp_type" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="948.1094"/><ellipse cx="17" cy="953.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L50" target="_top" title="~cpp_type" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L50" xlink:show="new" xlink:title="~cpp_type" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="26" y="956.3198">~cpp_type() : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L53" target="_top" title="\returns The [cppast::cpp_type_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L53" xlink:show="new" xlink:title="\returns The [cppast::cpp_type_kind]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="960.9141"/><ellipse cx="17" cy="965.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L53" target="_top" title="\returns The [cppast::cpp_type_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L53" xlink:show="new" xlink:title="\returns The [cppast::cpp_type_kind]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="26" y="969.1245">kind() const : cpp_type_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L59" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L59" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="973.7188"/><ellipse cx="17" cy="978.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L59" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L59" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="26" y="981.9292">user_data() const : void*</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L71" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L71" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="986.5234"/><ellipse cx="17" cy="991.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L71" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L71" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="26" y="994.7339">set_user_data(void* data) const : void</text></a><!--MD5=[6c3d4963dd68143063d36c666144d046]
class C_0000004122--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L95" target="_top" title="An unexposed [cppast::cpp_type](). This is one where no further information besides a name is available." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L95" xlink:show="new" xlink:title="An unexposed [cppast::cpp_type](). This is one where no further information besides a name is available." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000004122" style="stroke: #A80036; stroke-width: 1.5;" width="390" x="518.5" y="956"/><ellipse cx="643.75" cy="972" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M646.7188,977.6406 Q646.1406,977.9375 645.5,978.0781 Q644.8594,978.2344 644.1563,978.2344 Q641.6563,978.2344 640.3281,976.5938 Q639.0156,974.9375 639.0156,971.8125 Q639.0156,968.6875 640.3281,967.0313 Q641.6563,965.375 644.1563,965.375 Q644.8594,965.375 645.5,965.5313 Q646.1563,965.6875 646.7188,965.9844 L646.7188,968.7031 Q646.0938,968.125 645.5,967.8594 Q644.9063,967.5781 644.2813,967.5781 Q642.9375,967.5781 642.25,968.6563 Q641.5625,969.7188 641.5625,971.8125 Q641.5625,973.9063 642.25,974.9844 Q642.9375,976.0469 644.2813,976.0469 Q644.9063,976.0469 645.5,975.7813 Q646.0938,975.5 646.7188,974.9219 L646.7188,977.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="131" x="664.25" y="976.1543">cpp_unexposed_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="519.5" x2="907.5" y1="988" y2="988"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="519.5" x2="907.5" y1="996" y2="996"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L99" target="_top" title="\returns A newly created unexposed type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L99" xlink:show="new" xlink:title="\returns A newly created unexposed type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="524.5" y="1002"/><ellipse cx="529.5" cy="1007" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L99" target="_top" title="\returns A newly created unexposed type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L99" xlink:show="new" xlink:title="\returns A newly created unexposed type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="364" x="538.5" y="1010.2104">build(std::string name) : std::unique_ptr&lt;cpp_unexposed_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L105" target="_top" title="\returns The name of the type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L105" xlink:show="new" xlink:title="\returns The name of the type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="524.5" y="1014.8047"/><ellipse cx="529.5" cy="1019.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L105" target="_top" title="\returns The name of the type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L105" xlink:show="new" xlink:title="\returns The name of the type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="538.5" y="1023.0151">name() const : std::string const&amp;</text></a><!--MD5=[8e970a76792d480ef5b7914837db8f52]
class C_0000004139--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L161" target="_top" title="A builtin [cppast::cpp_type](). This is one where there is no associated [cppast::cpp_entity]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L161" xlink:show="new" xlink:title="A builtin [cppast::cpp_type](). This is one where there is no associated [cppast::cpp_entity]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000004139" style="stroke: #A80036; stroke-width: 1.5;" width="413" x="507" y="1065"/><ellipse cx="659.25" cy="1081" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M662.2188,1086.6406 Q661.6406,1086.9375 661,1087.0781 Q660.3594,1087.2344 659.6563,1087.2344 Q657.1563,1087.2344 655.8281,1085.5938 Q654.5156,1083.9375 654.5156,1080.8125 Q654.5156,1077.6875 655.8281,1076.0313 Q657.1563,1074.375 659.6563,1074.375 Q660.3594,1074.375 661,1074.5313 Q661.6563,1074.6875 662.2188,1074.9844 L662.2188,1077.7031 Q661.5938,1077.125 661,1076.8594 Q660.4063,1076.5781 659.7813,1076.5781 Q658.4375,1076.5781 657.75,1077.6563 Q657.0625,1078.7188 657.0625,1080.8125 Q657.0625,1082.9063 657.75,1083.9844 Q658.4375,1085.0469 659.7813,1085.0469 Q660.4063,1085.0469 661,1084.7813 Q661.5938,1084.5 662.2188,1083.9219 L662.2188,1086.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="679.75" y="1085.1543">cpp_builtin_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="508" x2="919" y1="1097" y2="1097"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="508" x2="919" y1="1105" y2="1105"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L165" target="_top" title="\returns A newly created builtin type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L165" xlink:show="new" xlink:title="\returns A newly created builtin type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="513" y="1111"/><ellipse cx="518" cy="1116" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L165" target="_top" title="\returns A newly created builtin type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L165" xlink:show="new" xlink:title="\returns A newly created builtin type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="387" x="527" y="1119.2104">build(cpp_builtin_type_kind kind) : std::unique_ptr&lt;cpp_builtin_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L171" target="_top" title="\returns Which builtin type it is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L171" xlink:show="new" xlink:title="\returns Which builtin type it is." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="513" y="1123.8047"/><ellipse cx="518" cy="1128.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L171" target="_top" title="\returns Which builtin type it is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L171" xlink:show="new" xlink:title="\returns Which builtin type it is." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="527" y="1132.0151">builtin_type_kind() const : cpp_builtin_type_kind</text></a><!--MD5=[82ee4ecb40d5dd64b3cbca395b1c4063]
class C_0000004166--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L202" target="_top" title="A user-defined [cppast::cpp_type](). It has an associated [cppast::cpp_entity]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L202" xlink:show="new" xlink:title="A user-defined [cppast::cpp_type](). It has an associated [cppast::cpp_entity]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000004166" style="stroke: #A80036; stroke-width: 1.5;" width="414" x="506.5" y="1174"/><ellipse cx="637.75" cy="1190" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M640.7188,1195.6406 Q640.1406,1195.9375 639.5,1196.0781 Q638.8594,1196.2344 638.1563,1196.2344 Q635.6563,1196.2344 634.3281,1194.5938 Q633.0156,1192.9375 633.0156,1189.8125 Q633.0156,1186.6875 634.3281,1185.0313 Q635.6563,1183.375 638.1563,1183.375 Q638.8594,1183.375 639.5,1183.5313 Q640.1563,1183.6875 640.7188,1183.9844 L640.7188,1186.7031 Q640.0938,1186.125 639.5,1185.8594 Q638.9063,1185.5781 638.2813,1185.5781 Q636.9375,1185.5781 636.25,1186.6563 Q635.5625,1187.7188 635.5625,1189.8125 Q635.5625,1191.9063 636.25,1192.9844 Q636.9375,1194.0469 638.2813,1194.0469 Q638.9063,1194.0469 639.5,1193.7813 Q640.0938,1193.5 640.7188,1192.9219 L640.7188,1195.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="143" x="658.25" y="1194.1543">cpp_user_defined_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="507.5" x2="919.5" y1="1206" y2="1206"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="507.5" x2="919.5" y1="1214" y2="1214"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L206" target="_top" title="\returns A newly created user-defined type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L206" xlink:show="new" xlink:title="\returns A newly created user-defined type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="512.5" y="1220"/><ellipse cx="517.5" cy="1225" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L206" target="_top" title="\returns A newly created user-defined type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L206" xlink:show="new" xlink:title="\returns A newly created user-defined type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="388" x="526.5" y="1228.2104">build(cpp_type_ref entity) : std::unique_ptr&lt;cpp_user_defined_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L213" target="_top" title="\returns A [cppast::cpp_type_ref]() to the associated [cppast::cpp_entity]() that is the type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L213" xlink:show="new" xlink:title="\returns A [cppast::cpp_type_ref]() to the associated [cppast::cpp_entity]() that is the type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="512.5" y="1232.8047"/><ellipse cx="517.5" cy="1237.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L213" target="_top" title="\returns A [cppast::cpp_type_ref]() to the associated [cppast::cpp_entity]() that is the type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L213" xlink:show="new" xlink:title="\returns A [cppast::cpp_type_ref]() to the associated [cppast::cpp_entity]() that is the type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="526.5" y="1241.0151">entity() const : cpp_type_ref const&amp;</text></a><!--MD5=[4dc648021bcc78fd72e111b946dfed53]
class C_0000004213--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L230" target="_top" title="A [cppast::cpp_type]() that isn't given but deduced by `auto`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L230" xlink:show="new" xlink:title="A [cppast::cpp_type]() that isn't given but deduced by `auto`." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="60.8047" id="C_0000004213" style="stroke: #A80036; stroke-width: 1.5;" width="258" x="584.5" y="1283.5"/><ellipse cx="663.75" cy="1299.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M666.7188,1305.1406 Q666.1406,1305.4375 665.5,1305.5781 Q664.8594,1305.7344 664.1563,1305.7344 Q661.6563,1305.7344 660.3281,1304.0938 Q659.0156,1302.4375 659.0156,1299.3125 Q659.0156,1296.1875 660.3281,1294.5313 Q661.6563,1292.875 664.1563,1292.875 Q664.8594,1292.875 665.5,1293.0313 Q666.1563,1293.1875 666.7188,1293.4844 L666.7188,1296.2031 Q666.0938,1295.625 665.5,1295.3594 Q664.9063,1295.0781 664.2813,1295.0781 Q662.9375,1295.0781 662.25,1296.1563 Q661.5625,1297.2188 661.5625,1299.3125 Q661.5625,1301.4063 662.25,1302.4844 Q662.9375,1303.5469 664.2813,1303.5469 Q664.9063,1303.5469 665.5,1303.2813 Q666.0938,1303 666.7188,1302.4219 L666.7188,1305.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="91" x="684.25" y="1303.6543">cpp_auto_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="585.5" x2="841.5" y1="1315.5" y2="1315.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="585.5" x2="841.5" y1="1323.5" y2="1323.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L234" target="_top" title="\returns A newly created `auto` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L234" xlink:show="new" xlink:title="\returns A newly created `auto` type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="590.5" y="1329.5"/><ellipse cx="595.5" cy="1334.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L234" target="_top" title="\returns A newly created `auto` type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L234" xlink:show="new" xlink:title="\returns A newly created `auto` type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="232" x="604.5" y="1337.7104">build() : std::unique_ptr&lt;cpp_auto_type&gt;</text></a><!--MD5=[8d4804a2b34e2c2e1e9080053ba7660a]
class C_0000004225--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L249" target="_top" title="A [cppast::cpp_type]() that depends on another type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L249" xlink:show="new" xlink:title="A [cppast::cpp_type]() that depends on another type." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="99.2188" id="C_0000004225" style="stroke: #A80036; stroke-width: 1.5;" width="742" x="342.5" y="1379.5"/><ellipse cx="643.75" cy="1395.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M646.7188,1401.1406 Q646.1406,1401.4375 645.5,1401.5781 Q644.8594,1401.7344 644.1563,1401.7344 Q641.6563,1401.7344 640.3281,1400.0938 Q639.0156,1398.4375 639.0156,1395.3125 Q639.0156,1392.1875 640.3281,1390.5313 Q641.6563,1388.875 644.1563,1388.875 Q644.8594,1388.875 645.5,1389.0313 Q646.1563,1389.1875 646.7188,1389.4844 L646.7188,1392.2031 Q646.0938,1391.625 645.5,1391.3594 Q644.9063,1391.0781 644.2813,1391.0781 Q642.9375,1391.0781 642.25,1392.1563 Q641.5625,1393.2188 641.5625,1395.3125 Q641.5625,1397.4063 642.25,1398.4844 Q642.9375,1399.5469 644.2813,1399.5469 Q644.9063,1399.5469 645.5,1399.2813 Q646.0938,1399 646.7188,1398.4219 L646.7188,1401.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="131" x="664.25" y="1399.6543">cpp_dependent_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="343.5" x2="1083.5" y1="1411.5" y2="1411.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="343.5" x2="1083.5" y1="1419.5" y2="1419.5"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L253" target="_top" title="\returns A newly created type dependent on a [cppast::cpp_template_parameter_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L253" xlink:show="new" xlink:title="\returns A newly created type dependent on a [cppast::cpp_template_parameter_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="348.5" y="1425.5"/><ellipse cx="353.5" cy="1430.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L253" target="_top" title="\returns A newly created type dependent on a [cppast::cpp_template_parameter_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L253" xlink:show="new" xlink:title="\returns A newly created type dependent on a [cppast::cpp_template_parameter_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="706" x="362.5" y="1433.7104">build(std::string name, std::unique_ptr&lt;cpp_template_parameter_type&gt; dependee) : std::unique_ptr&lt;cpp_dependent_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L257" target="_top" title="\returns A newly created type dependent on a [cppast::cpp_template_instantiation_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L257" xlink:show="new" xlink:title="\returns A newly created type dependent on a [cppast::cpp_template_instantiation_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="348.5" y="1438.3047"/><ellipse cx="353.5" cy="1443.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L257" target="_top" title="\returns A newly created type dependent on a [cppast::cpp_template_instantiation_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L257" xlink:show="new" xlink:title="\returns A newly created type dependent on a [cppast::cpp_template_instantiation_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="716" x="362.5" y="1446.5151">build(std::string name, std::unique_ptr&lt;cpp_template_instantiation_type&gt; dependee) : std::unique_ptr&lt;cpp_dependent_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L262" target="_top" title="\returns The name of the dependent type. &#10;otes It does not include a scope." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L262" xlink:show="new" xlink:title="\returns The name of the dependent type. &#10;otes It does not include a scope." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="348.5" y="1451.1094"/><ellipse cx="353.5" cy="1456.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L262" target="_top" title="\returns The name of the dependent type. &#10;otes It does not include a scope." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L262" xlink:show="new" xlink:title="\returns The name of the dependent type. &#10;otes It does not include a scope." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="362.5" y="1459.3198">name() const : std::string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L270" target="_top" title="\returns A reference to the [cppast::cpp_type]() it depends one. &#10;otes This is either [cppast::cpp_template_parameter_type]() or [cppast:cpp_template_instantiation_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L270" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() it depends one. &#10;otes This is either [cppast::cpp_template_parameter_type]() or [cppast:cpp_template_instantiation_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="348.5" y="1463.9141"/><ellipse cx="353.5" cy="1468.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L270" target="_top" title="\returns A reference to the [cppast::cpp_type]() it depends one. &#10;otes This is either [cppast::cpp_template_parameter_type]() or [cppast:cpp_template_instantiation_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L270" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() it depends one. &#10;otes This is either [cppast::cpp_template_parameter_type]() or [cppast:cpp_template_instantiation_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="362.5" y="1472.1245">dependee() const : cpp_type const&amp;</text></a><!--MD5=[1e138342a1cbabf3fc73d7099bb75be6]
class C_0000004265--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L311" target="_top" title="A [cppast::cpp_cv]() qualified [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L311" xlink:show="new" xlink:title="A [cppast::cpp_cv]() qualified [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="86.4141" id="C_0000004265" style="stroke: #A80036; stroke-width: 1.5;" width="543" x="442" y="1514"/><ellipse cx="642.25" cy="1530" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M645.2188,1535.6406 Q644.6406,1535.9375 644,1536.0781 Q643.3594,1536.2344 642.6563,1536.2344 Q640.1563,1536.2344 638.8281,1534.5938 Q637.5156,1532.9375 637.5156,1529.8125 Q637.5156,1526.6875 638.8281,1525.0313 Q640.1563,1523.375 642.6563,1523.375 Q643.3594,1523.375 644,1523.5313 Q644.6563,1523.6875 645.2188,1523.9844 L645.2188,1526.7031 Q644.5938,1526.125 644,1525.8594 Q643.4063,1525.5781 642.7813,1525.5781 Q641.4375,1525.5781 640.75,1526.6563 Q640.0625,1527.7188 640.0625,1529.8125 Q640.0625,1531.9063 640.75,1532.9844 Q641.4375,1534.0469 642.7813,1534.0469 Q643.4063,1534.0469 644,1533.7813 Q644.5938,1533.5 645.2188,1532.9219 L645.2188,1535.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="134" x="662.75" y="1534.1543">cpp_cv_qualified_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="443" x2="984" y1="1546" y2="1546"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="443" x2="984" y1="1554" y2="1554"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L316" target="_top" title="\returns A newly created qualified type. \requires `cv` must not be [cppast::cpp_cv::cpp_cv_none]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L316" xlink:show="new" xlink:title="\returns A newly created qualified type. \requires `cv` must not be [cppast::cpp_cv::cpp_cv_none]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="448" y="1560"/><ellipse cx="453" cy="1565" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L316" target="_top" title="\returns A newly created qualified type. \requires `cv` must not be [cppast::cpp_cv::cpp_cv_none]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L316" xlink:show="new" xlink:title="\returns A newly created qualified type. \requires `cv` must not be [cppast::cpp_cv::cpp_cv_none]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="517" x="462" y="1568.2104">build(std::unique_ptr&lt;cpp_type&gt; type, cpp_cv cv) : std::unique_ptr&lt;cpp_cv_qualified_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L324" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is qualified." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L324" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is qualified." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="448" y="1572.8047"/><ellipse cx="453" cy="1577.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L324" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is qualified." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L324" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is qualified." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="462" y="1581.0151">type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L330" target="_top" title="\returns The [cppast::cpp_cv]() qualifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L330" xlink:show="new" xlink:title="\returns The [cppast::cpp_cv]() qualifier." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="448" y="1585.6094"/><ellipse cx="453" cy="1590.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L330" target="_top" title="\returns The [cppast::cpp_cv]() qualifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L330" xlink:show="new" xlink:title="\returns The [cppast::cpp_cv]() qualifier." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="462" y="1593.8198">cv_qualifier() const : cpp_cv</text></a><!--MD5=[ffc9ec5f8a5ec9867c36e835a85e7607]
class C_0000004297--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L359" target="_top" title="A pointer to a [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L359" xlink:show="new" xlink:title="A pointer to a [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="73.6094" id="C_0000004297" style="stroke: #A80036; stroke-width: 1.5;" width="473" x="477" y="1635"/><ellipse cx="655.75" cy="1651" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M658.7188,1656.6406 Q658.1406,1656.9375 657.5,1657.0781 Q656.8594,1657.2344 656.1563,1657.2344 Q653.6563,1657.2344 652.3281,1655.5938 Q651.0156,1653.9375 651.0156,1650.8125 Q651.0156,1647.6875 652.3281,1646.0313 Q653.6563,1644.375 656.1563,1644.375 Q656.8594,1644.375 657.5,1644.5313 Q658.1563,1644.6875 658.7188,1644.9844 L658.7188,1647.7031 Q658.0938,1647.125 657.5,1646.8594 Q656.9063,1646.5781 656.2813,1646.5781 Q654.9375,1646.5781 654.25,1647.6563 Q653.5625,1648.7188 653.5625,1650.8125 Q653.5625,1652.9063 654.25,1653.9844 Q654.9375,1655.0469 656.2813,1655.0469 Q656.9063,1655.0469 657.5,1654.7813 Q658.0938,1654.5 658.7188,1653.9219 L658.7188,1656.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="676.25" y="1655.1543">cpp_pointer_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="478" x2="949" y1="1667" y2="1667"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="478" x2="949" y1="1675" y2="1675"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L363" target="_top" title="\returns A newly created pointer type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L363" xlink:show="new" xlink:title="\returns A newly created pointer type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="483" y="1681"/><ellipse cx="488" cy="1686" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L363" target="_top" title="\returns A newly created pointer type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L363" xlink:show="new" xlink:title="\returns A newly created pointer type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="447" x="497" y="1689.2104">build(std::unique_ptr&lt;cpp_type&gt; pointee) : std::unique_ptr&lt;cpp_pointer_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L369" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is the pointee." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L369" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is the pointee." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="483" y="1693.8047"/><ellipse cx="488" cy="1698.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L369" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is the pointee." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L369" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is the pointee." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="497" y="1702.0151">pointee() const : cpp_type const&amp;</text></a><!--MD5=[9bfe48127902b50a7ee5cfbfa980b151]
class C_0000004322--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L394" target="_top" title="A reference to a [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L394" xlink:show="new" xlink:title="A reference to a [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwzaz1vakbzk)" height="86.4141" id="C_0000004322" style="stroke: #A80036; stroke-width: 1.5;" width="579" x="424" y="1744"/><ellipse cx="647.75" cy="1760" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M650.7188,1765.6406 Q650.1406,1765.9375 649.5,1766.0781 Q648.8594,1766.2344 648.1563,1766.2344 Q645.6563,1766.2344 644.3281,1764.5938 Q643.0156,1762.9375 643.0156,1759.8125 Q643.0156,1756.6875 644.3281,1755.0313 Q645.6563,1753.375 648.1563,1753.375 Q648.8594,1753.375 649.5,1753.5313 Q650.1563,1753.6875 650.7188,1753.9844 L650.7188,1756.7031 Q650.0938,1756.125 649.5,1755.8594 Q648.9063,1755.5781 648.2813,1755.5781 Q646.9375,1755.5781 646.25,1756.6563 Q645.5625,1757.7188 645.5625,1759.8125 Q645.5625,1761.9063 646.25,1762.9844 Q646.9375,1764.0469 648.2813,1764.0469 Q648.9063,1764.0469 649.5,1763.7813 Q650.0938,1763.5 650.7188,1762.9219 L650.7188,1765.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="123" x="668.25" y="1764.1543">cpp_reference_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="425" x2="1002" y1="1776" y2="1776"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="425" x2="1002" y1="1784" y2="1784"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L399" target="_top" title="\returns A newly created qualified type. \requires `ref` must not be [cppast::cpp_reference::cpp_ref_none]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L399" xlink:show="new" xlink:title="\returns A newly created qualified type. \requires `ref` must not be [cppast::cpp_reference::cpp_ref_none]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="430" y="1790"/><ellipse cx="435" cy="1795" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L399" target="_top" title="\returns A newly created qualified type. \requires `ref` must not be [cppast::cpp_reference::cpp_ref_none]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L399" xlink:show="new" xlink:title="\returns A newly created qualified type. \requires `ref` must not be [cppast::cpp_reference::cpp_ref_none]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="553" x="444" y="1798.2104">build(std::unique_ptr&lt;cpp_type&gt; type, cpp_reference ref) : std::unique_ptr&lt;cpp_reference_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L407" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is referenced." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L407" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is referenced." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="430" y="1802.8047"/><ellipse cx="435" cy="1807.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L407" target="_top" title="\returns A reference to the [cppast::cpp_type]() that is referenced." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L407" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() that is referenced." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="444" y="1811.0151">referee() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L413" target="_top" title="\returns The [cppast::cpp_reference]() type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L413" xlink:show="new" xlink:title="\returns The [cppast::cpp_reference]() type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="430" y="1815.6094"/><ellipse cx="435" cy="1820.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L413" target="_top" title="\returns The [cppast::cpp_reference]() type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L413" xlink:show="new" xlink:title="\returns The [cppast::cpp_reference]() type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="444" y="1823.8198">reference_kind() const : cpp_reference</text></a><!--MD5=[2a975946f8eefef80f20ec3465497eb2]
reverse link C_0000004108 to C_0000002354--><path d="M145.99,856.14 C164.81,667.26 220.52,213.27 329,112 C376.06,68.06 441.38,48.42 504.79,41.06 " fill="none" id="C_0000004108&lt;-C_0000002354" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="152.94,857.01,144.03,876.23,139,855.65,152.94,857.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ec773fe671b536df4565cfb166400dd7]
reverse link C_0000004108 to C_0000002417--><path d="M150.04,856.43 C174.86,691.12 238.47,328.29 329,246 C376.51,202.81 441.58,182.45 504.62,173.92 " fill="none" id="C_0000004108&lt;-C_0000002417" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="156.96,857.52,147.11,876.28,143.11,855.47,156.96,857.52" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[390430669cf3c39fff3d2204135c7cf2]
reverse link C_0000004108 to C_0000002491--><path d="M140.57,856.09 C148.51,729.98 183.24,491.59 329,368 C336.71,361.46 344.84,355.48 353.3,350.01 " fill="none" id="C_0000004108&lt;-C_0000002491" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="147.54,856.85,139.46,876.44,133.56,856.09,147.54,856.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[dbb44196745c56513bd0e8f8065fcb32]
reverse link C_0000004108 to C_0000002684--><path d="M150.54,856.57 C169.75,756.38 217.31,589.82 329,502 C357.56,479.54 391.03,463.57 426.09,452.33 " fill="none" id="C_0000004108&lt;-C_0000002684" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="157.42,857.86,146.96,876.29,143.64,855.36,157.42,857.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ac77c98221c8aac027222efee501872c]
reverse link C_0000004108 to C_0000003189--><path d="M163.15,857.09 C190.67,780.64 243.03,669.92 329,612 C368.4,585.46 415.24,569.37 462.43,560 " fill="none" id="C_0000004108&lt;-C_0000003189" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="169.68,859.61,156.52,876.22,156.46,855.03,169.68,859.61" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e0a9885aab83e52d66073ca2ef4f169a]
reverse link C_0000004108 to C_0000003205--><path d="M182.45,859.2 C215.6,807.12 266.08,742.61 329,708 C398.08,670 484.54,656.78 557.87,653.58 " fill="none" id="C_0000004108&lt;-C_0000003205" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="188.34,862.98,171.88,876.32,176.43,855.62,188.34,862.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3df667d0af4ccd6e814e9086daf9906e]
reverse link C_0000004108 to C_0000003400--><path d="M248.45,866.41 C274.04,852.13 301.79,838.61 329,829 C346.79,822.72 365.28,817.09 384.1,812.05 " fill="none" id="C_0000004108&lt;-C_0000003400" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="251.94,872.48,231.11,876.39,244.96,860.35,251.94,872.48" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ef79647669d1373841a2bd87335f683e]
reverse link C_0000004108 to C_0000003729--><path d="M289.16,924.56 C326.55,920.98 367.98,917.01 409.85,913 " fill="none" id="C_0000004108&lt;-C_0000003729" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="289.68,931.55,269.11,926.49,288.35,917.61,289.68,931.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c84c490b049de407102448a04fae575d]
reverse link C_0000004108 to C_0000004122--><path d="M289.43,953.2 C359.51,959.79 443.67,967.71 518.41,974.74 " fill="none" id="C_0000004108&lt;-C_0000004122" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="288.36,960.13,269.11,951.29,289.68,946.19,288.36,960.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[836f6c5555255afbbd73a0dab96bf1e9]
reverse link C_0000004108 to C_0000004139--><path d="M250.09,1011.37 C275.24,1025.05 302.38,1037.91 329,1047 C385.17,1066.18 448.19,1078.68 506.66,1086.81 " fill="none" id="C_0000004108&lt;-C_0000004139" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="246.62,1017.44,232.61,1001.55,253.47,1005.24,246.62,1017.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3944f0774f75ecffb6c81d1b6734e5b8]
reverse link C_0000004108 to C_0000004166--><path d="M187.07,1018.44 C220.75,1066.34 270.08,1124.09 329,1156 C382.52,1184.99 446.13,1200.36 506.01,1208.11 " fill="none" id="C_0000004108&lt;-C_0000004166" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="181.09,1022.1,175.59,1001.64,192.65,1014.21,181.09,1022.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7cf1b6817ca03826a68281c57ab54e80]
reverse link C_0000004108 to C_0000004213--><path d="M163.02,1020.96 C190.46,1097.39 242.75,1207.93 329,1265 C403.73,1314.44 504.81,1325.65 584.44,1325.04 " fill="none" id="C_0000004108&lt;-C_0000004213" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="156.33,1023.02,156.42,1001.83,169.56,1018.45,156.33,1023.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7a833b1e18920c743ab67bd4bc1b0df0]
reverse link C_0000004108 to C_0000004225--><path d="M151.89,1021.45 C172.25,1118.77 220.77,1277.95 329,1362 C337.14,1368.32 345.67,1374.13 354.52,1379.46 " fill="none" id="C_0000004108&lt;-C_0000004225" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="144.99,1022.66,147.96,1001.68,158.72,1019.93,144.99,1022.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9d68e34aed39dd2c5e02f14eff2a229f]
reverse link C_0000004108 to C_0000004265--><path d="M141.39,1021.85 C150.46,1145.43 186.73,1376.29 329,1496 C361.24,1523.13 400.6,1540.65 441.67,1551.63 " fill="none" id="C_0000004108&lt;-C_0000004265" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="134.4,1022.3,140.09,1001.89,148.37,1021.39,134.4,1022.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[18f2e431e12e0e12b0436d7adef30a9b]
reverse link C_0000004108 to C_0000004297--><path d="M150.33,1021.47 C175.41,1184.31 239.12,1538.22 329,1617 C369.85,1652.8 423.08,1671.49 476.82,1680.3 " fill="none" id="C_0000004108&lt;-C_0000004297" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="143.4,1022.49,147.32,1001.66,157.24,1020.39,143.4,1022.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ca61a04602f16a518a7c393628cf4ed5]
reverse link C_0000004108 to C_0000004322--><path d="M147.02,1021.7 C167.52,1203.76 225.69,1630.62 329,1726 C356,1750.92 388.88,1768 423.92,1779.44 " fill="none" id="C_0000004108&lt;-C_0000004322" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="140.06,1022.42,144.82,1001.78,153.97,1020.89,140.06,1022.42" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[be79840d759f31d20f01ab1e1ba3d56f]
@startuml
left to right direction
class "cpp_function_type" as C_0000002354
class C_0000002354 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L14{A [cppast::cpp_type]() that is a function. A function pointer is created by wrapping it in [cppast::cpp_pointer_type]().}]] {
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L49{\returns A reference to the return [cppast::cpp_type]().}]]]
+parameter_types() const : detail::iteratable_intrusive_list<cpp_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L55{\returns An iteratable object iterating over the parameter types.}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L61{\returns Whether or not the function is variadic (C-style ellipsis).}]]]
}
class "cpp_member_function_type" as C_0000002417
class C_0000002417 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L87{A [cppast::cpp_type]() that is a member function. A member function with cv qualifier is created by wrapping it in [cppast::cpp_cv_qualified_type](). A member function with reference qualifier is created by wrapping it in [cppast::cpp_reference_type]()....}]] {
+class_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L122{\returns A reference to the class [cppast::cpp_type]().}]]]
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L128{\returns A reference to the return [cppast::cpp_type]().}]]]
+parameter_types() const : detail::iteratable_intrusive_list<cpp_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L134{\returns An iteratable object iterating over the parameter types.}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L140{\returns Whether or not the function is variadic (C-style ellipsis).}]]]
}
class "cpp_member_object_type" as C_0000002491
class C_0000002491 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L164{A [cppast::cpp_type]() that is a member object. A member object pointer is created by wrapping it in [cppast::cpp_pointer_type]().}]] {
{static} +build(std::unique_ptr<cpp_type> class_type, std::unique_ptr<cpp_type> object_type) : std::unique_ptr<cpp_member_object_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L168{\returns A newly created member object type.}]]]
+class_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L176{\returns A reference to the class [cppast::cpp_type]().}]]]
+object_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_type.hpp#L182{\returns A reference to the object [cppast::cpp_type]().}]]]
}
class "cpp_template_instantiation_type" as C_0000002684
class C_0000002684 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L93{A [cppast::cpp_type]() representing an instantiation of a [cppast::cpp_template]().}]] {
+primary_template() const : cpp_template_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L132{\returns A reference to the template that is being instantiated. \notes It could also point to a specialization, this is just the *primary* template.}]]]
+arguments_exposed() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L138{\returns Whether or not the arguments are exposed.}]]]
+arguments() const : type_safe::optional<type_safe::array_ref<cpp_template_argument const>> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L145{\returns An array ref to the [cppast::cpp_template_argument](), if there are any. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`.}]]]
+unexposed_arguments() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L156{\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`.}]]]
}
class "cpp_decltype_type" as C_0000003189
class C_0000003189 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L13{A [cppast::cpp_type]() that isn't given but taken from an expression.}]] {
{static} +build(std::unique_ptr<cpp_expression> expr) : std::unique_ptr<cpp_decltype_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L17{\returns A newly created `decltype` type.}]]]
+expression() const : cpp_expression const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L23{\returns A reference to the expression given.}]]]
}
class "cpp_decltype_auto_type" as C_0000003205
class C_0000003205 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L40{A [cppast::cpp_type]() that isn't given but deduced using the `decltype` rules.}]] {
{static} +build() : std::unique_ptr<cpp_decltype_auto_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_decltype_type.hpp#L44{\returns A newly created `auto` type.}]]]
}
class "cpp_array_type" as C_0000003400
class C_0000003400 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L13{An array of a [cppast::cpp_type]().}]] {
{static} +build(std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> size) : std::unique_ptr<cpp_array_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L18{\returns A newly created array. \notes `size` may be `nullptr`.}]]]
+value_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L26{\returns A reference to the value [cppast::cpp_type]().}]]]
+size() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_array_type.hpp#L33{\returns An optional reference to the [cppast::cpp_expression]() that is the size of the array. \notes An unsized array - `T[]` - does not have a size.}]]]
}
class "cpp_template_parameter_type" as C_0000003729
class C_0000003729 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L97{A [cppast::cpp_type]() defined by a [cppast::cpp_template_type_parameter]().}]] {
{static} +build(cpp_template_type_parameter_ref parameter) : std::unique_ptr<cpp_template_parameter_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L101{\returns A newly created parameter type.}]]]
+entity() const : cpp_template_type_parameter_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L109{\returns A reference to the [cppast::cpp_template_type_parameter]() this type refers to.}]]]
}
abstract "cpp_type" as C_0000004108
abstract C_0000004108 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L44{Base class for all C++ types.}]] {
+cpp_type(cpp_type const& ) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L47{cpp_type}]]]
+operator=(cpp_type const& ) : cpp_type& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L48{operator=}]]]
+~cpp_type() : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L50{~cpp_type}]]]
+kind() const : cpp_type_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L53{\returns The [cppast::cpp_type_kind]().}]]]
+user_data() const : void* [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L59{\returns The specified user data.}]]]
+set_user_data(void* data) const : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L71{\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi...}]]]
}
class "cpp_unexposed_type" as C_0000004122
class C_0000004122 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L95{An unexposed [cppast::cpp_type](). This is one where no further information besides a name is available.}]] {
{static} +build(std::string name) : std::unique_ptr<cpp_unexposed_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L99{\returns A newly created unexposed type.}]]]
+name() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L105{\returns The name of the type.}]]]
}
class "cpp_builtin_type" as C_0000004139
class C_0000004139 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L161{A builtin [cppast::cpp_type](). This is one where there is no associated [cppast::cpp_entity]().}]] {
{static} +build(cpp_builtin_type_kind kind) : std::unique_ptr<cpp_builtin_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L165{\returns A newly created builtin type.}]]]
+builtin_type_kind() const : cpp_builtin_type_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L171{\returns Which builtin type it is.}]]]
}
class "cpp_user_defined_type" as C_0000004166
class C_0000004166 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L202{A user-defined [cppast::cpp_type](). It has an associated [cppast::cpp_entity]().}]] {
{static} +build(cpp_type_ref entity) : std::unique_ptr<cpp_user_defined_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L206{\returns A newly created user-defined type.}]]]
+entity() const : cpp_type_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L213{\returns A [cppast::cpp_type_ref]() to the associated [cppast::cpp_entity]() that is the type.}]]]
}
class "cpp_auto_type" as C_0000004213
class C_0000004213 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L230{A [cppast::cpp_type]() that isn't given but deduced by `auto`.}]] {
{static} +build() : std::unique_ptr<cpp_auto_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L234{\returns A newly created `auto` type.}]]]
}
class "cpp_dependent_type" as C_0000004225
class C_0000004225 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L249{A [cppast::cpp_type]() that depends on another type.}]] {
{static} +build(std::string name, std::unique_ptr<cpp_template_parameter_type> dependee) : std::unique_ptr<cpp_dependent_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L253{\returns A newly created type dependent on a [cppast::cpp_template_parameter_type]().}]]]
{static} +build(std::string name, std::unique_ptr<cpp_template_instantiation_type> dependee) : std::unique_ptr<cpp_dependent_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L257{\returns A newly created type dependent on a [cppast::cpp_template_instantiation_type]().}]]]
+name() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L262{\returns The name of the dependent type. \notes It does not include a scope.}]]]
+dependee() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L270{\returns A reference to the [cppast::cpp_type]() it depends one. \notes This is either [cppast::cpp_template_parameter_type]() or [cppast:cpp_template_instantiation_type]().}]]]
}
class "cpp_cv_qualified_type" as C_0000004265
class C_0000004265 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L311{A [cppast::cpp_cv]() qualified [cppast::cpp_type]().}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_cv cv) : std::unique_ptr<cpp_cv_qualified_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L316{\returns A newly created qualified type. \requires `cv` must not be [cppast::cpp_cv::cpp_cv_none]().}]]]
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L324{\returns A reference to the [cppast::cpp_type]() that is qualified.}]]]
+cv_qualifier() const : cpp_cv [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L330{\returns The [cppast::cpp_cv]() qualifier.}]]]
}
class "cpp_pointer_type" as C_0000004297
class C_0000004297 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L359{A pointer to a [cppast::cpp_type]().}]] {
{static} +build(std::unique_ptr<cpp_type> pointee) : std::unique_ptr<cpp_pointer_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L363{\returns A newly created pointer type.}]]]
+pointee() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L369{\returns A reference to the [cppast::cpp_type]() that is the pointee.}]]]
}
class "cpp_reference_type" as C_0000004322
class C_0000004322 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L394{A reference to a [cppast::cpp_type]().}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_reference ref) : std::unique_ptr<cpp_reference_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L399{\returns A newly created qualified type. \requires `ref` must not be [cppast::cpp_reference::cpp_ref_none]().}]]]
+referee() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L407{\returns A reference to the [cppast::cpp_type]() that is referenced.}]]]
+reference_kind() const : cpp_reference [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type.hpp#L413{\returns The [cppast::cpp_reference]() type.}]]]
}
C_0000004108 <|- - C_0000002354
C_0000004108 <|- - C_0000002417
C_0000004108 <|- - C_0000002491
C_0000004108 <|- - C_0000002684
C_0000004108 <|- - C_0000003189
C_0000004108 <|- - C_0000003205
C_0000004108 <|- - C_0000003400
C_0000004108 <|- - C_0000003729
C_0000004108 <|- - C_0000004122
C_0000004108 <|- - C_0000004139
C_0000004108 <|- - C_0000004166
C_0000004108 <|- - C_0000004213
C_0000004108 <|- - C_0000004225
C_0000004108 <|- - C_0000004265
C_0000004108 <|- - C_0000004297
C_0000004108 <|- - C_0000004322
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.15+10-Ubuntu-0ubuntu0.21.10.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>