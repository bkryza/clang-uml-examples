<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3473px" preserveAspectRatio="none" style="width:3584px;height:3473px;" version="1.1" viewBox="0 0 3584 3473" width="3584px" zoomAndPan="magnify"><defs><filter height="300%" id="fx0o816tvee5d" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[57369c809b76600c6cc452d0e03970a0]
class C_0000006252--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L27" target="_top" title="A [cppast::cpp_entity]() modelling a file. This is the top-level entity of the AST." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L27" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a file. This is the top-level entity of the AST." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006252" style="stroke: #A80036; stroke-width: 1.5;" width="483" x="918.5" y="1578.84"/><ellipse cx="1132.25" cy="1594.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1135.2188,1600.4806 Q1134.6406,1600.7775 1134,1600.9181 Q1133.3594,1601.0744 1132.6563,1601.0744 Q1130.1563,1601.0744 1128.8281,1599.4338 Q1127.5156,1597.7775 1127.5156,1594.6525 Q1127.5156,1591.5275 1128.8281,1589.8713 Q1130.1563,1588.215 1132.6563,1588.215 Q1133.3594,1588.215 1134,1588.3713 Q1134.6563,1588.5275 1135.2188,1588.8244 L1135.2188,1591.5431 Q1134.5938,1590.965 1134,1590.6994 Q1133.4063,1590.4181 1132.7813,1590.4181 Q1131.4375,1590.4181 1130.75,1591.4963 Q1130.0625,1592.5588 1130.0625,1594.6525 Q1130.0625,1596.7463 1130.75,1597.8244 Q1131.4375,1598.8869 1132.7813,1598.8869 Q1133.4063,1598.8869 1134,1598.6213 Q1134.5938,1598.34 1135.2188,1597.7619 L1135.2188,1600.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="47" x="1152.75" y="1598.9943">cpp_file</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="919.5" x2="1400.5" y1="1610.84" y2="1610.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="919.5" x2="1400.5" y1="1618.84" y2="1618.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="924.5" y="1624.84"/><ellipse cx="929.5" cy="1629.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="938.5" y="1633.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71" target="_top" title="\returns The unmatched documentation comments." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71" xlink:show="new" xlink:title="\returns The unmatched documentation comments." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="924.5" y="1637.6447"/><ellipse cx="929.5" cy="1642.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71" target="_top" title="\returns The unmatched documentation comments." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71" xlink:show="new" xlink:title="\returns The unmatched documentation comments." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="938.5" y="1645.8551">unmatched_comments() const : type_safe::array_ref&lt;cpp_doc_comment const&gt;</text></a><!--MD5=[149d68ceaa827b87fe1b25e1b70c3d54]
class C_0000006313--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L13" target="_top" title="A [cppast::cpp_entity]() modelling a class template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a class template." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006313" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="2452.5" y="3241.84"/><ellipse cx="2495.85" cy="3257.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2498.8188,3263.4806 Q2498.2406,3263.7775 2497.6,3263.9181 Q2496.9594,3264.0744 2496.2563,3264.0744 Q2493.7563,3264.0744 2492.4281,3262.4338 Q2491.1156,3260.7775 2491.1156,3257.6525 Q2491.1156,3254.5275 2492.4281,3252.8713 Q2493.7563,3251.215 2496.2563,3251.215 Q2496.9594,3251.215 2497.6,3251.3713 Q2498.2563,3251.5275 2498.8188,3251.8244 L2498.8188,3254.5431 Q2498.1938,3253.965 2497.6,3253.6994 Q2497.0063,3253.4181 2496.3813,3253.4181 Q2495.0375,3253.4181 2494.35,3254.4963 Q2493.6625,3255.5588 2493.6625,3257.6525 Q2493.6625,3259.7463 2494.35,3260.8244 Q2495.0375,3261.8869 2496.3813,3261.8869 Q2497.0063,3261.8869 2497.6,3261.6213 Q2498.1938,3261.34 2498.8188,3260.7619 L2498.8188,3263.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="123" x="2516.15" y="3261.9943">cpp_class_template</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2453.5" x2="2669.5" y1="3273.84" y2="3273.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2453.5" x2="2669.5" y1="3281.84" y2="3281.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2458.5" y="3287.84"/><ellipse cx="2463.5" cy="3292.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2472.5" y="3296.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26" target="_top" title="A reference to the class that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26" xlink:show="new" xlink:title="A reference to the class that is being templated." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2458.5" y="3300.6447"/><ellipse cx="2463.5" cy="3305.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26" target="_top" title="A reference to the class that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26" xlink:show="new" xlink:title="A reference to the class that is being templated." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="2472.5" y="3308.8551">class_() const : cpp_class const&amp;</text></a><!--MD5=[c643b48c81f110f43e5a9b4f05d7b1e3]
class C_0000006323--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L42" target="_top" title="A [cppast::cpp_entity]() modelling a class template specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L42" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a class template specialization." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006323" style="stroke: #A80036; stroke-width: 1.5;" width="245" x="3312.5" y="2950.84"/><ellipse cx="3327.5" cy="2966.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3330.4688,2972.4806 Q3329.8906,2972.7775 3329.25,2972.9181 Q3328.6094,2973.0744 3327.9063,2973.0744 Q3325.4063,2973.0744 3324.0781,2971.4338 Q3322.7656,2969.7775 3322.7656,2966.6525 Q3322.7656,2963.5275 3324.0781,2961.8713 Q3325.4063,2960.215 3327.9063,2960.215 Q3328.6094,2960.215 3329.25,2960.3713 Q3329.9063,2960.5275 3330.4688,2960.8244 L3330.4688,2963.5431 Q3329.8438,2962.965 3329.25,2962.6994 Q3328.6563,2962.4181 3328.0313,2962.4181 Q3326.6875,2962.4181 3326,2963.4963 Q3325.3125,2964.5588 3325.3125,2966.6525 Q3325.3125,2968.7463 3326,2969.8244 Q3326.6875,2970.8869 3328.0313,2970.8869 Q3328.6563,2970.8869 3329.25,2970.6213 Q3329.8438,2970.34 3330.4688,2969.7619 L3330.4688,2972.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="213" x="3341.5" y="2970.9943">cpp_class_template_specialization</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3313.5" x2="3556.5" y1="2982.84" y2="2982.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3313.5" x2="3556.5" y1="2990.84" y2="2990.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3318.5" y="2996.84"/><ellipse cx="3323.5" cy="3001.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="3332.5" y="3005.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55" target="_top" title="A reference to the class that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55" xlink:show="new" xlink:title="A reference to the class that is being specialized." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3318.5" y="3009.6447"/><ellipse cx="3323.5" cy="3014.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55" target="_top" title="A reference to the class that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55" xlink:show="new" xlink:title="A reference to the class that is being specialized." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3332.5" y="3017.8551">class_() const : cpp_class const&amp;</text></a><!--MD5=[a2c8ef76a57028e9982c9545f90e9f22]
class C_0000006381--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L19" target="_top" title="A [cppast::cpp_entity]() representing a friend declaration. It can either declare or define a `friend` function (template), declare a `friend` class, or refer to an existing type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L19" xlink:show="new" xlink:title="A [cppast::cpp_entity]() representing a friend declaration. It can either declare or define a `friend` function (template), declare a `friend` class, or refer to an existing type." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000006381" style="stroke: #A80036; stroke-width: 1.5;" width="418" x="951" y="1687.84"/><ellipse cx="1123.25" cy="1703.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1126.2188,1709.4806 Q1125.6406,1709.7775 1125,1709.9181 Q1124.3594,1710.0744 1123.6563,1710.0744 Q1121.1563,1710.0744 1119.8281,1708.4338 Q1118.5156,1706.7775 1118.5156,1703.6525 Q1118.5156,1700.5275 1119.8281,1698.8713 Q1121.1563,1697.215 1123.6563,1697.215 Q1124.3594,1697.215 1125,1697.3713 Q1125.6563,1697.5275 1126.2188,1697.8244 L1126.2188,1700.5431 Q1125.5938,1699.965 1125,1699.6994 Q1124.4063,1699.4181 1123.7813,1699.4181 Q1122.4375,1699.4181 1121.75,1700.4963 Q1121.0625,1701.5588 1121.0625,1703.6525 Q1121.0625,1705.7463 1121.75,1706.8244 Q1122.4375,1707.8869 1123.7813,1707.8869 Q1124.4063,1707.8869 1125,1707.6213 Q1125.5938,1707.34 1126.2188,1706.7619 L1126.2188,1709.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="1143.75" y="1707.9943">cpp_friend</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="952" x2="1368" y1="1719.84" y2="1719.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="952" x2="1368" y1="1727.84" y2="1727.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="957" y="1733.84"/><ellipse cx="962" cy="1738.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="971" y="1742.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27" target="_top" title="\returns A newly created friend declaring the given entity as `friend`. &#10;otes The friend declaration itself will not be registered, but the referring entity is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27" xlink:show="new" xlink:title="\returns A newly created friend declaring the given entity as `friend`. &#10;otes The friend declaration itself will not be registered, but the referring entity is." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="957" y="1746.6447"/><ellipse cx="962" cy="1751.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27" target="_top" title="\returns A newly created friend declaring the given entity as `friend`. &#10;otes The friend declaration itself will not be registered, but the referring entity is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27" xlink:show="new" xlink:title="\returns A newly created friend declaring the given entity as `friend`. &#10;otes The friend declaration itself will not be registered, but the referring entity is." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="382" x="971" y="1754.8551">build(std::unique_ptr&lt;cpp_entity&gt; e) : std::unique_ptr&lt;cpp_friend&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34" target="_top" title="\returns A newly created friend declaring the given type as `friend`. &#10;otes It will not be registered." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34" xlink:show="new" xlink:title="\returns A newly created friend declaring the given type as `friend`. &#10;otes It will not be registered." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="957" y="1759.4494"/><ellipse cx="962" cy="1764.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34" target="_top" title="\returns A newly created friend declaring the given type as `friend`. &#10;otes It will not be registered." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34" xlink:show="new" xlink:title="\returns A newly created friend declaring the given type as `friend`. &#10;otes It will not be registered." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="392" x="971" y="1767.6598">build(std::unique_ptr&lt;cpp_type&gt; type) : std::unique_ptr&lt;cpp_friend&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40" target="_top" title="\returns An optional reference to the entity it declares as friend, or `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40" xlink:show="new" xlink:title="\returns An optional reference to the entity it declares as friend, or `nullptr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="957" y="1772.2541"/><ellipse cx="962" cy="1777.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40" target="_top" title="\returns An optional reference to the entity it declares as friend, or `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40" xlink:show="new" xlink:title="\returns An optional reference to the entity it declares as friend, or `nullptr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="971" y="1780.4645">entity() const : type_safe::optional_ref&lt;cpp_entity const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48" target="_top" title="\returns An optional reference to the type it declares as friend, or `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48" xlink:show="new" xlink:title="\returns An optional reference to the type it declares as friend, or `nullptr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="957" y="1785.0588"/><ellipse cx="962" cy="1790.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48" target="_top" title="\returns An optional reference to the type it declares as friend, or `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48" xlink:show="new" xlink:title="\returns An optional reference to the type it declares as friend, or `nullptr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="971" y="1793.2692">type() const : type_safe::optional_ref&lt;cpp_type const&gt;</text></a><!--MD5=[44c47e4ef09636fb980753cd68e72ad6]
class C_0000006404--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L13" target="_top" title="A [cppast::cpp_entity]() modelling a C++ alias template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ alias template." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006404" style="stroke: #A80036; stroke-width: 1.5;" width="266" x="2428.5" y="3350.84"/><ellipse cx="2497.25" cy="3366.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2500.2188,3372.4806 Q2499.6406,3372.7775 2499,3372.9181 Q2498.3594,3373.0744 2497.6563,3373.0744 Q2495.1563,3373.0744 2493.8281,3371.4338 Q2492.5156,3369.7775 2492.5156,3366.6525 Q2492.5156,3363.5275 2493.8281,3361.8713 Q2495.1563,3360.215 2497.6563,3360.215 Q2498.3594,3360.215 2499,3360.3713 Q2499.6563,3360.5275 2500.2188,3360.8244 L2500.2188,3363.5431 Q2499.5938,3362.965 2499,3362.6994 Q2498.4063,3362.4181 2497.7813,3362.4181 Q2496.4375,3362.4181 2495.75,3363.4963 Q2495.0625,3364.5588 2495.0625,3366.6525 Q2495.0625,3368.7463 2495.75,3369.8244 Q2496.4375,3370.8869 2497.7813,3370.8869 Q2498.4063,3370.8869 2499,3370.6213 Q2499.5938,3370.34 2500.2188,3369.7619 L2500.2188,3372.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="120" x="2517.75" y="3370.9943">cpp_alias_template</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2429.5" x2="2693.5" y1="3382.84" y2="3382.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2429.5" x2="2693.5" y1="3390.84" y2="3390.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2434.5" y="3396.84"/><ellipse cx="2439.5" cy="3401.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2448.5" y="3405.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26" target="_top" title="\returns A reference to the type alias that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the type alias that is being templated." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2434.5" y="3409.6447"/><ellipse cx="2439.5" cy="3414.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26" target="_top" title="\returns A reference to the type alias that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the type alias that is being templated." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="2448.5" y="3417.8551">type_alias() const : cpp_type_alias const&amp;</text></a><!--MD5=[66d0428b993c1dcd491ddd4cd4ab118a]
class C_0000006423--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L13" target="_top" title="A [cppast::cpp_entity]() modelling a function template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a function template." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006423" style="stroke: #A80036; stroke-width: 1.5;" width="276" x="2423.5" y="2876.84"/><ellipse cx="2486.25" cy="2892.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2489.2188,2898.4806 Q2488.6406,2898.7775 2488,2898.9181 Q2487.3594,2899.0744 2486.6563,2899.0744 Q2484.1563,2899.0744 2482.8281,2897.4338 Q2481.5156,2895.7775 2481.5156,2892.6525 Q2481.5156,2889.5275 2482.8281,2887.8713 Q2484.1563,2886.215 2486.6563,2886.215 Q2487.3594,2886.215 2488,2886.3713 Q2488.6563,2886.5275 2489.2188,2886.8244 L2489.2188,2889.5431 Q2488.5938,2888.965 2488,2888.6994 Q2487.4063,2888.4181 2486.7813,2888.4181 Q2485.4375,2888.4181 2484.75,2889.4963 Q2484.0625,2890.5588 2484.0625,2892.6525 Q2484.0625,2894.7463 2484.75,2895.8244 Q2485.4375,2896.8869 2486.7813,2896.8869 Q2487.4063,2896.8869 2488,2896.6213 Q2488.5938,2896.34 2489.2188,2895.7619 L2489.2188,2898.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="2506.75" y="2896.9943">cpp_function_template</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2424.5" x2="2698.5" y1="2908.84" y2="2908.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2424.5" x2="2698.5" y1="2916.84" y2="2916.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2429.5" y="2922.84"/><ellipse cx="2434.5" cy="2927.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2443.5" y="2931.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26" target="_top" title="A reference to the function that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26" xlink:show="new" xlink:title="A reference to the function that is being templated." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2429.5" y="2935.6447"/><ellipse cx="2434.5" cy="2940.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26" target="_top" title="A reference to the function that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26" xlink:show="new" xlink:title="A reference to the function that is being templated." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2443.5" y="2943.8551">function() const : cpp_function_base const&amp;</text></a><!--MD5=[fc60b85d43fc92bff81a8ad9893058e7]
class C_0000006433--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L42" target="_top" title="A [cppast::cpp_entity]() modelling a function template specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L42" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a function template specialization." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006433" style="stroke: #A80036; stroke-width: 1.5;" width="276" x="3297" y="3059.84"/><ellipse cx="3317.4" cy="3075.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3320.3688,3081.4806 Q3319.7906,3081.7775 3319.15,3081.9181 Q3318.5094,3082.0744 3317.8063,3082.0744 Q3315.3063,3082.0744 3313.9781,3080.4338 Q3312.6656,3078.7775 3312.6656,3075.6525 Q3312.6656,3072.5275 3313.9781,3070.8713 Q3315.3063,3069.215 3317.8063,3069.215 Q3318.5094,3069.215 3319.15,3069.3713 Q3319.8063,3069.5275 3320.3688,3069.8244 L3320.3688,3072.5431 Q3319.7438,3071.965 3319.15,3071.6994 Q3318.5563,3071.4181 3317.9313,3071.4181 Q3316.5875,3071.4181 3315.9,3072.4963 Q3315.2125,3073.5588 3315.2125,3075.6525 Q3315.2125,3077.7463 3315.9,3078.8244 Q3316.5875,3079.8869 3317.9313,3079.8869 Q3318.5563,3079.8869 3319.15,3079.6213 Q3319.7438,3079.34 3320.3688,3078.7619 L3320.3688,3081.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="232" x="3332.6" y="3079.9943">cpp_function_template_specialization</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3298" x2="3572" y1="3091.84" y2="3091.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3298" x2="3572" y1="3099.84" y2="3099.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3303" y="3105.84"/><ellipse cx="3308" cy="3110.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="3317" y="3114.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59" target="_top" title="A reference to the function that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59" xlink:show="new" xlink:title="A reference to the function that is being specialized." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3303" y="3118.6447"/><ellipse cx="3308" cy="3123.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59" target="_top" title="A reference to the function that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59" xlink:show="new" xlink:title="A reference to the function that is being specialized." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3317" y="3126.8551">function() const : cpp_function_base const&amp;</text></a><!--MD5=[90fdcf04f5a707b9406c199acae1057b]
class C_0000006604--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L37" target="_top" title="A [cppast::cpp_entity]() modelling a C++ access specifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L37" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ access specifier." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000006604" style="stroke: #A80036; stroke-width: 1.5;" width="475" x="922.5" y="1834.84"/><ellipse cx="1089.75" cy="1850.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1092.7188,1856.4806 Q1092.1406,1856.7775 1091.5,1856.9181 Q1090.8594,1857.0744 1090.1563,1857.0744 Q1087.6563,1857.0744 1086.3281,1855.4338 Q1085.0156,1853.7775 1085.0156,1850.6525 Q1085.0156,1847.5275 1086.3281,1845.8713 Q1087.6563,1844.215 1090.1563,1844.215 Q1090.8594,1844.215 1091.5,1844.3713 Q1092.1563,1844.5275 1092.7188,1844.8244 L1092.7188,1847.5431 Q1092.0938,1846.965 1091.5,1846.6994 Q1090.9063,1846.4181 1090.2813,1846.4181 Q1088.9375,1846.4181 1088.25,1847.4963 Q1087.5625,1848.5588 1087.5625,1850.6525 Q1087.5625,1852.7463 1088.25,1853.8244 Q1088.9375,1854.8869 1090.2813,1854.8869 Q1090.9063,1854.8869 1091.5,1854.6213 Q1092.0938,1854.34 1092.7188,1853.7619 L1092.7188,1856.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="132" x="1110.25" y="1854.9943">cpp_access_specifier</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="923.5" x2="1396.5" y1="1866.84" y2="1866.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="923.5" x2="1396.5" y1="1874.84" y2="1874.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="928.5" y="1880.84"/><ellipse cx="933.5" cy="1885.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="942.5" y="1889.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45" target="_top" title="\returns A newly created access specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45" xlink:show="new" xlink:title="\returns A newly created access specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="928.5" y="1893.6447"/><ellipse cx="933.5" cy="1898.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45" target="_top" title="\returns A newly created access specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45" xlink:show="new" xlink:title="\returns A newly created access specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="449" x="942.5" y="1901.8551">build(cpp_access_specifier_kind kind) : std::unique_ptr&lt;cpp_access_specifier&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51" target="_top" title="\returns The kind of access specifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51" xlink:show="new" xlink:title="\returns The kind of access specifier." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="928.5" y="1906.4494"/><ellipse cx="933.5" cy="1911.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51" target="_top" title="\returns The kind of access specifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51" xlink:show="new" xlink:title="\returns The kind of access specifier." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="942.5" y="1914.6598">access_specifier() const : cpp_access_specifier_kind</text></a><!--MD5=[9a6bb75bc16c883dac9a7f4117e8e11f]
class C_0000006615--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L67" target="_top" title="A [cppast::cpp_entity]() modelling a base class specifier." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L67" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a base class specifier." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000006615" style="stroke: #A80036; stroke-width: 1.5;" width="845" x="737.5" y="1955.84"/><ellipse cx="1106.75" cy="1971.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1109.7188,1977.4806 Q1109.1406,1977.7775 1108.5,1977.9181 Q1107.8594,1978.0744 1107.1563,1978.0744 Q1104.6563,1978.0744 1103.3281,1976.4338 Q1102.0156,1974.7775 1102.0156,1971.6525 Q1102.0156,1968.5275 1103.3281,1966.8713 Q1104.6563,1965.215 1107.1563,1965.215 Q1107.8594,1965.215 1108.5,1965.3713 Q1109.1563,1965.5275 1109.7188,1965.8244 L1109.7188,1968.5431 Q1109.0938,1967.965 1108.5,1967.6994 Q1107.9063,1967.4181 1107.2813,1967.4181 Q1105.9375,1967.4181 1105.25,1968.4963 Q1104.5625,1969.5588 1104.5625,1971.6525 Q1104.5625,1973.7463 1105.25,1974.8244 Q1105.9375,1975.8869 1107.2813,1975.8869 Q1107.9063,1975.8869 1108.5,1975.6213 Q1109.0938,1975.34 1109.7188,1974.7619 L1109.7188,1977.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="98" x="1127.25" y="1975.9943">cpp_base_class</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="738.5" x2="1581.5" y1="1987.84" y2="1987.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="738.5" x2="1581.5" y1="1995.84" y2="1995.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="743.5" y="2001.84"/><ellipse cx="748.5" cy="2006.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="757.5" y="2010.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75" target="_top" title="\returns A newly created base class specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75" xlink:show="new" xlink:title="\returns A newly created base class specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="743.5" y="2014.6447"/><ellipse cx="748.5" cy="2019.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75" target="_top" title="\returns A newly created base class specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75" xlink:show="new" xlink:title="\returns A newly created base class specifier. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="819" x="757.5" y="2022.8551">build(std::string name, std::unique_ptr&lt;cpp_type&gt; base, cpp_access_specifier_kind access, bool is_virtual) : std::unique_ptr&lt;cpp_base_class&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83" target="_top" title="\returns The type of the base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83" xlink:show="new" xlink:title="\returns The type of the base class." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="743.5" y="2027.4494"/><ellipse cx="748.5" cy="2032.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83" target="_top" title="\returns The type of the base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83" xlink:show="new" xlink:title="\returns The type of the base class." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="757.5" y="2035.6598">type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89" target="_top" title="\returns The access specifier of the base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89" xlink:show="new" xlink:title="\returns The access specifier of the base class." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="743.5" y="2040.2541"/><ellipse cx="748.5" cy="2045.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89" target="_top" title="\returns The access specifier of the base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89" xlink:show="new" xlink:title="\returns The access specifier of the base class." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="757.5" y="2048.4645">access_specifier() const : cpp_access_specifier_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95" target="_top" title="\returns Whether or not it is a `virtual` base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95" xlink:show="new" xlink:title="\returns Whether or not it is a `virtual` base class." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="743.5" y="2053.0588"/><ellipse cx="748.5" cy="2058.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95" target="_top" title="\returns Whether or not it is a `virtual` base class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95" xlink:show="new" xlink:title="\returns Whether or not it is a `virtual` base class." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="757.5" y="2061.2692">is_virtual() const : bool</text></a><!--MD5=[4edf01c8835a3e26e1ceb695853729a9]
class C_0000006644--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L118" target="_top" title="A [cppast::cpp_entity]() modelling a C++ class. This can either be a definition or just a forward declaration. If it is just a forward declaration, everything except the class type will not be available." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L118" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ class. This can either be a definition or just a forward declaration. If it is just a forward declaration, everything except the class type will not be available." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000006644" style="stroke: #A80036; stroke-width: 1.5;" width="395" x="962.5" y="2103.34"/><ellipse cx="1125.25" cy="2119.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1128.2188,2124.9806 Q1127.6406,2125.2775 1127,2125.4181 Q1126.3594,2125.5744 1125.6563,2125.5744 Q1123.1563,2125.5744 1121.8281,2123.9338 Q1120.5156,2122.2775 1120.5156,2119.1525 Q1120.5156,2116.0275 1121.8281,2114.3713 Q1123.1563,2112.715 1125.6563,2112.715 Q1126.3594,2112.715 1127,2112.8713 Q1127.6563,2113.0275 1128.2188,2113.3244 L1128.2188,2116.0431 Q1127.5938,2115.465 1127,2115.1994 Q1126.4063,2114.9181 1125.7813,2114.9181 Q1124.4375,2114.9181 1123.75,2115.9963 Q1123.0625,2117.0588 1123.0625,2119.1525 Q1123.0625,2121.2463 1123.75,2122.3244 Q1124.4375,2123.3869 1125.7813,2123.3869 Q1126.4063,2123.3869 1127,2123.1213 Q1127.5938,2122.84 1128.2188,2122.2619 L1128.2188,2124.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1145.75" y="2123.4943">cpp_class</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="963.5" x2="1356.5" y1="2135.34" y2="2135.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="963.5" x2="1356.5" y1="2143.34" y2="2143.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="968.5" y="2149.34"/><ellipse cx="973.5" cy="2154.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="982.5" y="2157.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198" target="_top" title="\returns The keyword used in the declaration of the class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198" xlink:show="new" xlink:title="\returns The keyword used in the declaration of the class." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="968.5" y="2162.1447"/><ellipse cx="973.5" cy="2167.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198" target="_top" title="\returns The keyword used in the declaration of the class." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198" xlink:show="new" xlink:title="\returns The keyword used in the declaration of the class." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="982.5" y="2170.3551">class_kind() const : cpp_class_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204" target="_top" title="\returns Whether or not the class was declared `final`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204" xlink:show="new" xlink:title="\returns Whether or not the class was declared `final`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="968.5" y="2174.9494"/><ellipse cx="973.5" cy="2179.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204" target="_top" title="\returns Whether or not the class was declared `final`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204" xlink:show="new" xlink:title="\returns Whether or not the class was declared `final`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="982.5" y="2183.1598">is_final() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="968.5" y="2187.7541"/><ellipse cx="973.5" cy="2192.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="982.5" y="2195.9645">bases() const : detail::iteratable_intrusive_list&lt;cpp_base_class&gt;</text></a><!--MD5=[eda0cb7c9eeb2e67197e859896007547]
class C_0000006716--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L12" target="_top" title="cpp_static_assert" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L12" xlink:show="new" xlink:title="cpp_static_assert" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000006716" style="stroke: #A80036; stroke-width: 1.5;" width="595" x="862.5" y="2237.34"/><ellipse cx="1100.75" cy="2253.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1103.7188,2258.9806 Q1103.1406,2259.2775 1102.5,2259.4181 Q1101.8594,2259.5744 1101.1563,2259.5744 Q1098.6563,2259.5744 1097.3281,2257.9338 Q1096.0156,2256.2775 1096.0156,2253.1525 Q1096.0156,2250.0275 1097.3281,2248.3713 Q1098.6563,2246.715 1101.1563,2246.715 Q1101.8594,2246.715 1102.5,2246.8713 Q1103.1563,2247.0275 1103.7188,2247.3244 L1103.7188,2250.0431 Q1103.0938,2249.465 1102.5,2249.1994 Q1101.9063,2248.9181 1101.2813,2248.9181 Q1099.9375,2248.9181 1099.25,2249.9963 Q1098.5625,2251.0588 1098.5625,2253.1525 Q1098.5625,2255.2463 1099.25,2256.3244 Q1099.9375,2257.3869 1101.2813,2257.3869 Q1101.9063,2257.3869 1102.5,2257.1213 Q1103.0938,2256.84 1103.7188,2256.2619 L1103.7188,2258.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="110" x="1121.25" y="2257.4943">cpp_static_assert</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="863.5" x2="1456.5" y1="2269.34" y2="2269.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="863.5" x2="1456.5" y1="2277.34" y2="2277.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="868.5" y="2283.34"/><ellipse cx="873.5" cy="2288.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="882.5" y="2291.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19" target="_top" title="\returns A newly created `static_assert()` entity. &#10;otes It will not be registered as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19" xlink:show="new" xlink:title="\returns A newly created `static_assert()` entity. &#10;otes It will not be registered as nothing can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="868.5" y="2296.1447"/><ellipse cx="873.5" cy="2301.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19" target="_top" title="\returns A newly created `static_assert()` entity. &#10;otes It will not be registered as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19" xlink:show="new" xlink:title="\returns A newly created `static_assert()` entity. &#10;otes It will not be registered as nothing can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="569" x="882.5" y="2304.3551">build(std::unique_ptr&lt;cpp_expression&gt; expr, std::string msg) : std::unique_ptr&lt;cpp_static_assert&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27" target="_top" title="\returns A reference to the [cppast::cpp_expression]() that is being asserted." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_expression]() that is being asserted." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="868.5" y="2308.9494"/><ellipse cx="873.5" cy="2313.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27" target="_top" title="\returns A reference to the [cppast::cpp_expression]() that is being asserted." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_expression]() that is being asserted." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="882.5" y="2317.1598">expression() const : cpp_expression const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33" target="_top" title="\returns A reference to the message of the assertion." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33" xlink:show="new" xlink:title="\returns A reference to the message of the assertion." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="868.5" y="2321.7541"/><ellipse cx="873.5" cy="2326.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33" target="_top" title="\returns A reference to the message of the assertion." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33" xlink:show="new" xlink:title="\returns A reference to the message of the assertion." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="882.5" y="2329.9645">message() const : std::string const&amp;</text></a><!--MD5=[9afd838ca2cb7fb8ec8c3c9778052c21]
class C_0000006800--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L16" target="_top" title="Additional base class for all [cppast::cpp_entity]() modelling some kind of variable. Examples are [cppast::cpp_variable]() or [cppast::cpp_function_parameter](), or anything that is name/type/default-value triple." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L16" xlink:show="new" xlink:title="Additional base class for all [cppast::cpp_entity]() modelling some kind of variable. Examples are [cppast::cpp_variable]() or [cppast::cpp_function_parameter](), or anything that is name/type/default-value triple." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000006800" style="stroke: #A80036; stroke-width: 1.5;" width="428" x="6" y="213.84"/><ellipse cx="158.25" cy="229.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M161.2188,235.4806 Q160.6406,235.7775 160,235.9181 Q159.3594,236.0744 158.6563,236.0744 Q156.1563,236.0744 154.8281,234.4338 Q153.5156,232.7775 153.5156,229.6525 Q153.5156,226.5275 154.8281,224.8713 Q156.1563,223.215 158.6563,223.215 Q159.3594,223.215 160,223.3713 Q160.6563,223.5275 161.2188,223.8244 L161.2188,226.5431 Q160.5938,225.965 160,225.6994 Q159.4063,225.4181 158.7813,225.4181 Q157.4375,225.4181 156.75,226.4963 Q156.0625,227.5588 156.0625,229.6525 Q156.0625,231.7463 156.75,232.8244 Q157.4375,233.8869 158.7813,233.8869 Q159.4063,233.8869 160,233.6213 Q160.5938,233.34 161.2188,232.7619 L161.2188,235.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="178.75" y="233.9943">cpp_variable_base</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="433" y1="245.84" y2="245.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="433" y1="253.84" y2="253.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20" target="_top" title="\returns A reference to the [cppast::cpp_type]() of the variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() of the variable." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="259.84"/><ellipse cx="17" cy="264.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20" target="_top" title="\returns A reference to the [cppast::cpp_type]() of the variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_type]() of the variable." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="26" y="268.0504">type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="272.6447"/><ellipse cx="17" cy="277.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="26" y="280.8551">default_value() const : type_safe::optional_ref&lt;cpp_expression const&gt;</text></a><!--MD5=[9cdb9194734c123c659443058a0133d4]
class C_0000006844--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L16" target="_top" title="A [cppast::cpp_entity]() modelling a function parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L16" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a function parameter." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000006844" style="stroke: #A80036; stroke-width: 1.5;" width="1136" x="592" y="395.84"/><ellipse cx="1079.75" cy="411.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1082.7188,417.4806 Q1082.1406,417.7775 1081.5,417.9181 Q1080.8594,418.0744 1080.1563,418.0744 Q1077.6563,418.0744 1076.3281,416.4338 Q1075.0156,414.7775 1075.0156,411.6525 Q1075.0156,408.5275 1076.3281,406.8713 Q1077.6563,405.215 1080.1563,405.215 Q1080.8594,405.215 1081.5,405.3713 Q1082.1563,405.5275 1082.7188,405.8244 L1082.7188,408.5431 Q1082.0938,407.965 1081.5,407.6994 Q1080.9063,407.4181 1080.2813,407.4181 Q1078.9375,407.4181 1078.25,408.4963 Q1077.5625,409.5588 1077.5625,411.6525 Q1077.5625,413.7463 1078.25,414.8244 Q1078.9375,415.8869 1080.2813,415.8869 Q1080.9063,415.8869 1081.5,415.6213 Q1082.0938,415.34 1082.7188,414.7619 L1082.7188,417.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="152" x="1100.25" y="415.9943">cpp_function_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="593" x2="1727" y1="427.84" y2="427.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="593" x2="1727" y1="435.84" y2="435.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="598" y="441.84"/><ellipse cx="603" cy="446.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="612" y="450.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22" target="_top" title="\returns A newly created and registered function parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22" xlink:show="new" xlink:title="\returns A newly created and registered function parameter." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="598" y="454.6447"/><ellipse cx="603" cy="459.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22" target="_top" title="\returns A newly created and registered function parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22" xlink:show="new" xlink:title="\returns A newly created and registered function parameter." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1110" x="612" y="462.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; def = nullptr) : std::unique_ptr&lt;cpp_function_parameter&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30" target="_top" title="\returns A newly created unnamed function parameter. &#10;otes It will not be registered, as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30" xlink:show="new" xlink:title="\returns A newly created unnamed function parameter. &#10;otes It will not be registered, as nothing can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="598" y="467.4494"/><ellipse cx="603" cy="472.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30" target="_top" title="\returns A newly created unnamed function parameter. &#10;otes It will not be registered, as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30" xlink:show="new" xlink:title="\returns A newly created unnamed function parameter. &#10;otes It will not be registered, as nothing can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="746" x="612" y="475.6598">build(std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; def = nullptr) : std::unique_ptr&lt;cpp_function_parameter&gt;</text></a><!--MD5=[733c43928fc03f0a0fd14078f8474d11]
class C_0000006868--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L68" target="_top" title="Base class for all entities that are functions. It contains arguments and common flags." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L68" xlink:show="new" xlink:title="Base class for all entities that are functions. It contains arguments and common flags." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000006868" style="stroke: #A80036; stroke-width: 1.5;" width="474" x="923" y="2467.84"/><ellipse cx="1097.25" cy="2483.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1100.2188,2489.4806 Q1099.6406,2489.7775 1099,2489.9181 Q1098.3594,2490.0744 1097.6563,2490.0744 Q1095.1563,2490.0744 1093.8281,2488.4338 Q1092.5156,2486.7775 1092.5156,2483.6525 Q1092.5156,2480.5275 1093.8281,2478.8713 Q1095.1563,2477.215 1097.6563,2477.215 Q1098.3594,2477.215 1099,2477.3713 Q1099.6563,2477.5275 1100.2188,2477.8244 L1100.2188,2480.5431 Q1099.5938,2479.965 1099,2479.6994 Q1098.4063,2479.4181 1097.7813,2479.4181 Q1096.4375,2479.4181 1095.75,2480.4963 Q1095.0625,2481.5588 1095.0625,2483.6525 Q1095.0625,2485.7463 1095.75,2486.8244 Q1096.4375,2487.8869 1097.7813,2487.8869 Q1098.4063,2487.8869 1099,2487.6213 Q1099.5938,2487.34 1100.2188,2486.7619 L1100.2188,2489.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="117" x="1117.75" y="2487.9943">cpp_function_base</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="924" x2="1396" y1="2499.84" y2="2499.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="924" x2="1396" y1="2507.84" y2="2507.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="929" y="2513.84"/><ellipse cx="934" cy="2518.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="943" y="2522.0504">parameters() const : detail::iteratable_intrusive_list&lt;cpp_function_parameter&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80" target="_top" title="\returns The [cppast::cpp_function_body_kind](). &#10;otes This matches the [cppast::cpp_forward_declarable]() queries." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80" xlink:show="new" xlink:title="\returns The [cppast::cpp_function_body_kind](). &#10;otes This matches the [cppast::cpp_forward_declarable]() queries." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="929" y="2526.6447"/><ellipse cx="934" cy="2531.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80" target="_top" title="\returns The [cppast::cpp_function_body_kind](). &#10;otes This matches the [cppast::cpp_forward_declarable]() queries." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80" xlink:show="new" xlink:title="\returns The [cppast::cpp_function_body_kind](). &#10;otes This matches the [cppast::cpp_forward_declarable]() queries." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="943" y="2534.8551">body_kind() const : cpp_function_body_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. &#10;otes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). &#10;otes There is no way to di..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. &#10;otes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). &#10;otes There is no way to di..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="929" y="2539.4494"/><ellipse cx="934" cy="2544.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. &#10;otes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). &#10;otes There is no way to di..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. &#10;otes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). &#10;otes There is no way to di..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="943" y="2547.6598">noexcept_condition() const : type_safe::optional_ref&lt;cpp_expression const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95" target="_top" title="\returns Whether the function has an ellipsis." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95" xlink:show="new" xlink:title="\returns Whether the function has an ellipsis." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="929" y="2552.2541"/><ellipse cx="934" cy="2557.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95" target="_top" title="\returns Whether the function has an ellipsis." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95" xlink:show="new" xlink:title="\returns Whether the function has an ellipsis." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="943" y="2560.4645">is_variadic() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103" target="_top" title="\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103" xlink:show="new" xlink:title="\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="929" y="2565.0588"/><ellipse cx="934" cy="2570.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103" target="_top" title="\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103" xlink:show="new" xlink:title="\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="943" y="2573.2692">signature() const : std::string</text></a><!--MD5=[04f21d200001d99509f48a8d228000ed]
class C_0000006910--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L201" target="_top" title="A [cppast::cpp_entity]() modelling a C++ function. &#10;otes This is not a member function, use [cppast::cpp_member_function]() for that. It can be a `static` function of a class, however." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L201" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ function. &#10;otes This is not a member function, use [cppast::cpp_member_function]() for that. It can be a `static` function of a class, however." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000006910" style="stroke: #A80036; stroke-width: 1.5;" width="329" x="2397" y="2300.84"/><ellipse cx="2517.25" cy="2316.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2520.2188,2322.4806 Q2519.6406,2322.7775 2519,2322.9181 Q2518.3594,2323.0744 2517.6563,2323.0744 Q2515.1563,2323.0744 2513.8281,2321.4338 Q2512.5156,2319.7775 2512.5156,2316.6525 Q2512.5156,2313.5275 2513.8281,2311.8713 Q2515.1563,2310.215 2517.6563,2310.215 Q2518.3594,2310.215 2519,2310.3713 Q2519.6563,2310.5275 2520.2188,2310.8244 L2520.2188,2313.5431 Q2519.5938,2312.965 2519,2312.6994 Q2518.4063,2312.4181 2517.7813,2312.4181 Q2516.4375,2312.4181 2515.75,2313.4963 Q2515.0625,2314.5588 2515.0625,2316.6525 Q2515.0625,2318.7463 2515.75,2319.8244 Q2516.4375,2320.8869 2517.7813,2320.8869 Q2518.4063,2320.8869 2519,2320.6213 Q2519.5938,2320.34 2520.2188,2319.7619 L2520.2188,2322.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="2537.75" y="2320.9943">cpp_function</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2398" x2="2725" y1="2332.84" y2="2332.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2398" x2="2725" y1="2340.84" y2="2340.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2403" y="2346.84"/><ellipse cx="2408" cy="2351.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2417" y="2355.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2403" y="2359.6447"/><ellipse cx="2408" cy="2364.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237" target="_top" title="\returns A reference to the return [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237" xlink:show="new" xlink:title="\returns A reference to the return [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2417" y="2367.8551">return_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245" target="_top" title="\returns The [cppast::cpp_storage_specifiers]() of the function. &#10;otes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245" xlink:show="new" xlink:title="\returns The [cppast::cpp_storage_specifiers]() of the function. &#10;otes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2403" y="2372.4494"/><ellipse cx="2408" cy="2377.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245" target="_top" title="\returns The [cppast::cpp_storage_specifiers]() of the function. &#10;otes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245" xlink:show="new" xlink:title="\returns The [cppast::cpp_storage_specifiers]() of the function. &#10;otes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="2417" y="2380.6598">storage_class() const : cpp_storage_class_specifiers</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251" target="_top" title="\returns Whether the function is marked `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251" xlink:show="new" xlink:title="\returns Whether the function is marked `constexpr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2403" y="2385.2541"/><ellipse cx="2408" cy="2390.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251" target="_top" title="\returns Whether the function is marked `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251" xlink:show="new" xlink:title="\returns Whether the function is marked `constexpr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2417" y="2393.4645">is_constexpr() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257" target="_top" title="\returns Whether the function is marked `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257" xlink:show="new" xlink:title="\returns Whether the function is marked `consteval`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2403" y="2398.0588"/><ellipse cx="2408" cy="2403.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257" target="_top" title="\returns Whether the function is marked `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257" xlink:show="new" xlink:title="\returns Whether the function is marked `consteval`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2417" y="2406.2692">is_consteval() const : bool</text></a><!--MD5=[e32f9496fb7f2d6b93c2009d73fc6877]
class C_0000007116--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L14" target="_top" title="A [cppast::cpp_entity]() modelling a type alias/typedef. &#10;otes There is no distinction between `using` and `typedef` type aliases made in the AST." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L14" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a type alias/typedef. &#10;otes There is no distinction between `using` and `typedef` type aliases made in the AST." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007116" style="stroke: #A80036; stroke-width: 1.5;" width="806" x="757" y="2615.34"/><ellipse cx="1110.25" cy="2631.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1113.2188,2636.9806 Q1112.6406,2637.2775 1112,2637.4181 Q1111.3594,2637.5744 1110.6563,2637.5744 Q1108.1563,2637.5744 1106.8281,2635.9338 Q1105.5156,2634.2775 1105.5156,2631.1525 Q1105.5156,2628.0275 1106.8281,2626.3713 Q1108.1563,2624.715 1110.6563,2624.715 Q1111.3594,2624.715 1112,2624.8713 Q1112.6563,2625.0275 1113.2188,2625.3244 L1113.2188,2628.0431 Q1112.5938,2627.465 1112,2627.1994 Q1111.4063,2626.9181 1110.7813,2626.9181 Q1109.4375,2626.9181 1108.75,2627.9963 Q1108.0625,2629.0588 1108.0625,2631.1525 Q1108.0625,2633.2463 1108.75,2634.3244 Q1109.4375,2635.3869 1110.7813,2635.3869 Q1111.4063,2635.3869 1112,2635.1213 Q1112.5938,2634.84 1113.2188,2634.2619 L1113.2188,2636.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="91" x="1130.75" y="2635.4943">cpp_type_alias</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="758" x2="1562" y1="2647.34" y2="2647.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="758" x2="1562" y1="2655.34" y2="2655.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="763" y="2661.34"/><ellipse cx="768" cy="2666.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="777" y="2669.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20" target="_top" title="\returns A newly created and registered type alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20" xlink:show="new" xlink:title="\returns A newly created and registered type alias." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="763" y="2674.1447"/><ellipse cx="768" cy="2679.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20" target="_top" title="\returns A newly created and registered type alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20" xlink:show="new" xlink:title="\returns A newly created and registered type alias." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="780" x="777" y="2682.3551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type) : std::unique_ptr&lt;cpp_type_alias&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25" target="_top" title="\returns A newly created type alias that isn't registered. &#10;otes This function is intendend for templated type aliases." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25" xlink:show="new" xlink:title="\returns A newly created type alias that isn't registered. &#10;otes This function is intendend for templated type aliases." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="763" y="2686.9494"/><ellipse cx="768" cy="2691.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25" target="_top" title="\returns A newly created type alias that isn't registered. &#10;otes This function is intendend for templated type aliases." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25" xlink:show="new" xlink:title="\returns A newly created type alias that isn't registered. &#10;otes This function is intendend for templated type aliases." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="519" x="777" y="2695.1598">build(std::string name, std::unique_ptr&lt;cpp_type&gt; type) : std::unique_ptr&lt;cpp_type_alias&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28" target="_top" title="\returns A reference to the aliased [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28" xlink:show="new" xlink:title="\returns A reference to the aliased [cppast::cpp_type]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="763" y="2699.7541"/><ellipse cx="768" cy="2704.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28" target="_top" title="\returns A reference to the aliased [cppast::cpp_type]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28" xlink:show="new" xlink:title="\returns A reference to the aliased [cppast::cpp_type]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="777" y="2707.9645">underlying_type() const : cpp_type const&amp;</text></a><!--MD5=[5eb4cba5e07166281ebc3904b9330658]
class C_0000007165--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L21" target="_top" title="A [cppast::cpp_entity]() modelling the value of an [cppast::cpp_enum]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L21" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling the value of an [cppast::cpp_enum]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000007165" style="stroke: #A80036; stroke-width: 1.5;" width="915" x="702.5" y="2749.84"/><ellipse cx="1104.25" cy="2765.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1107.2188,2771.4806 Q1106.6406,2771.7775 1106,2771.9181 Q1105.3594,2772.0744 1104.6563,2772.0744 Q1102.1563,2772.0744 1100.8281,2770.4338 Q1099.5156,2768.7775 1099.5156,2765.6525 Q1099.5156,2762.5275 1100.8281,2760.8713 Q1102.1563,2759.215 1104.6563,2759.215 Q1105.3594,2759.215 1106,2759.3713 Q1106.6563,2759.5275 1107.2188,2759.8244 L1107.2188,2762.5431 Q1106.5938,2761.965 1106,2761.6994 Q1105.4063,2761.4181 1104.7813,2761.4181 Q1103.4375,2761.4181 1102.75,2762.4963 Q1102.0625,2763.5588 1102.0625,2765.6525 Q1102.0625,2767.7463 1102.75,2768.8244 Q1103.4375,2769.8869 1104.7813,2769.8869 Q1105.4063,2769.8869 1106,2769.6213 Q1106.5938,2769.34 1107.2188,2768.7619 L1107.2188,2771.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="103" x="1124.75" y="2769.9943">cpp_enum_value</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="703.5" x2="1616.5" y1="2781.84" y2="2781.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="703.5" x2="1616.5" y1="2789.84" y2="2789.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="708.5" y="2795.84"/><ellipse cx="713.5" cy="2800.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="722.5" y="2804.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28" target="_top" title="\returns A newly created and registered enum value. &#10;otes `value` may be `nullptr`, in which case the enum has an implicit value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28" xlink:show="new" xlink:title="\returns A newly created and registered enum value. &#10;otes `value` may be `nullptr`, in which case the enum has an implicit value." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="708.5" y="2808.6447"/><ellipse cx="713.5" cy="2813.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28" target="_top" title="\returns A newly created and registered enum value. &#10;otes `value` may be `nullptr`, in which case the enum has an implicit value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28" xlink:show="new" xlink:title="\returns A newly created and registered enum value. &#10;otes `value` may be `nullptr`, in which case the enum has an implicit value." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="889" x="722.5" y="2816.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_expression&gt; value = nullptr) : std::unique_ptr&lt;cpp_enum_value&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. &#10;otes It only has an associated expression if the value is explictly given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. &#10;otes It only has an associated expression if the value is explictly given." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="708.5" y="2821.4494"/><ellipse cx="713.5" cy="2826.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34" target="_top" title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. &#10;otes It only has an associated expression if the value is explictly given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. &#10;otes It only has an associated expression if the value is explictly given." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="722.5" y="2829.6598">value() const : type_safe::optional_ref&lt;cpp_expression const&gt;</text></a><!--MD5=[06360f170c861f1cba993ad392f4115b]
class C_0000007183--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L53" target="_top" title="A [cppast::cpp_entity]() modelling a C++ enumeration. This can either be a definition or just a forward declaration. If it is just forward declared, it will not have any children." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L53" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ enumeration. This can either be a definition or just a forward declaration. If it is just forward declared, it will not have any children." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007183" style="stroke: #A80036; stroke-width: 1.5;" width="265" x="1027.5" y="2871.34"/><ellipse cx="1123.75" cy="2887.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1126.7188,2892.9806 Q1126.1406,2893.2775 1125.5,2893.4181 Q1124.8594,2893.5744 1124.1563,2893.5744 Q1121.6563,2893.5744 1120.3281,2891.9338 Q1119.0156,2890.2775 1119.0156,2887.1525 Q1119.0156,2884.0275 1120.3281,2882.3713 Q1121.6563,2880.715 1124.1563,2880.715 Q1124.8594,2880.715 1125.5,2880.8713 Q1126.1563,2881.0275 1126.7188,2881.3244 L1126.7188,2884.0431 Q1126.0938,2883.465 1125.5,2883.1994 Q1124.9063,2882.9181 1124.2813,2882.9181 Q1122.9375,2882.9181 1122.25,2883.9963 Q1121.5625,2885.0588 1121.5625,2887.1525 Q1121.5625,2889.2463 1122.25,2890.3244 Q1122.9375,2891.3869 1124.2813,2891.3869 Q1124.9063,2891.3869 1125.5,2891.1213 Q1126.0938,2890.84 1126.7188,2890.2619 L1126.7188,2892.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1144.25" y="2891.4943">cpp_enum</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1028.5" x2="1291.5" y1="2903.34" y2="2903.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1028.5" x2="1291.5" y1="2911.34" y2="2911.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1033.5" y="2917.34"/><ellipse cx="1038.5" cy="2922.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1047.5" y="2925.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108" target="_top" title="\returns A reference to the underlying [cppast::cpp_type]() of the enum." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108" xlink:show="new" xlink:title="\returns A reference to the underlying [cppast::cpp_type]() of the enum." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1033.5" y="2930.1447"/><ellipse cx="1038.5" cy="2935.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108" target="_top" title="\returns A reference to the underlying [cppast::cpp_type]() of the enum." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108" xlink:show="new" xlink:title="\returns A reference to the underlying [cppast::cpp_type]() of the enum." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="1047.5" y="2938.3551">underlying_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114" target="_top" title="\returns Whether or not the underlying type is explictly given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114" xlink:show="new" xlink:title="\returns Whether or not the underlying type is explictly given." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1033.5" y="2942.9494"/><ellipse cx="1038.5" cy="2947.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114" target="_top" title="\returns Whether or not the underlying type is explictly given." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114" xlink:show="new" xlink:title="\returns Whether or not the underlying type is explictly given." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="1047.5" y="2951.1598">has_explicit_type() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120" target="_top" title="\returns Whether or not it is a scoped enumeration (i.e. an `enum class`)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120" xlink:show="new" xlink:title="\returns Whether or not it is a scoped enumeration (i.e. an `enum class`)." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1033.5" y="2955.7541"/><ellipse cx="1038.5" cy="2960.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120" target="_top" title="\returns Whether or not it is a scoped enumeration (i.e. an `enum class`)." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120" xlink:show="new" xlink:title="\returns Whether or not it is a scoped enumeration (i.e. an `enum class`)." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="1047.5" y="2963.9645">is_scoped() const : bool</text></a><!--MD5=[5ba16cc3c138adb3ca9cdb5311f049b7]
class C_0000007430--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L21" target="_top" title="Base class for all entities modelling a C++ template of some kind. It is a container of a single [cppast::cpp_entity]() that is the entity being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L21" xlink:show="new" xlink:title="Base class for all entities modelling a C++ template of some kind. It is a container of a single [cppast::cpp_entity]() that is the entity being templated." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="60.8047" id="C_0000007430" style="stroke: #A80036; stroke-width: 1.5;" width="479" x="920.5" y="3011.34"/><ellipse cx="1113.25" cy="3027.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1116.2188,3032.9806 Q1115.6406,3033.2775 1115,3033.4181 Q1114.3594,3033.5744 1113.6563,3033.5744 Q1111.1563,3033.5744 1109.8281,3031.9338 Q1108.5156,3030.2775 1108.5156,3027.1525 Q1108.5156,3024.0275 1109.8281,3022.3713 Q1111.1563,3020.715 1113.6563,3020.715 Q1114.3594,3020.715 1115,3020.8713 Q1115.6563,3021.0275 1116.2188,3021.3244 L1116.2188,3024.0431 Q1115.5938,3023.465 1115,3023.1994 Q1114.4063,3022.9181 1113.7813,3022.9181 Q1112.4375,3022.9181 1111.75,3023.9963 Q1111.0625,3025.0588 1111.0625,3027.1525 Q1111.0625,3029.2463 1111.75,3030.3244 Q1112.4375,3031.3869 1113.7813,3031.3869 Q1114.4063,3031.3869 1115,3031.1213 Q1115.5938,3030.84 1116.2188,3030.2619 L1116.2188,3032.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1133.75" y="3031.4943">cpp_template</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="921.5" x2="1398.5" y1="3043.34" y2="3043.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="921.5" x2="1398.5" y1="3051.34" y2="3051.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. &#10;otes These may be empty for a full specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. &#10;otes These may be empty for a full specialization." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="926.5" y="3057.34"/><ellipse cx="931.5" cy="3062.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. &#10;otes These may be empty for a full specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. &#10;otes These may be empty for a full specialization." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="940.5" y="3065.5504">parameters() const : detail::iteratable_intrusive_list&lt;cpp_template_parameter&gt;</text></a><!--MD5=[f59a1fa3ef1f732f776dc87a3acde9de]
class C_0000007484--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L177" target="_top" title="Base class for all entities modelling a C++ template specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L177" xlink:show="new" xlink:title="Base class for all entities modelling a C++ template specialization." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000007484" style="stroke: #A80036; stroke-width: 1.5;" width="448" x="2337.5" y="2985.84"/><ellipse cx="2469.75" cy="3001.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2472.7188,3007.4806 Q2472.1406,3007.7775 2471.5,3007.9181 Q2470.8594,3008.0744 2470.1563,3008.0744 Q2467.6563,3008.0744 2466.3281,3006.4338 Q2465.0156,3004.7775 2465.0156,3001.6525 Q2465.0156,2998.5275 2466.3281,2996.8713 Q2467.6563,2995.215 2470.1563,2995.215 Q2470.8594,2995.215 2471.5,2995.3713 Q2472.1563,2995.5275 2472.7188,2995.8244 L2472.7188,2998.5431 Q2472.0938,2997.965 2471.5,2997.6994 Q2470.9063,2997.4181 2470.2813,2997.4181 Q2468.9375,2997.4181 2468.25,2998.4963 Q2467.5625,2999.5588 2467.5625,3001.6525 Q2467.5625,3003.7463 2468.25,3004.8244 Q2468.9375,3005.8869 2470.2813,3005.8869 Q2470.9063,3005.8869 2471.5,3005.6213 Q2472.0938,3005.34 2472.7188,3004.7619 L2472.7188,3007.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="175" x="2490.25" y="3005.9943">cpp_template_specialization</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2338.5" x2="2784.5" y1="3017.84" y2="3017.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2338.5" x2="2784.5" y1="3025.84" y2="3025.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181" target="_top" title="\returns A reference to the template that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181" xlink:show="new" xlink:title="\returns A reference to the template that is being specialized." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2343.5" y="3031.84"/><ellipse cx="2348.5" cy="3036.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181" target="_top" title="\returns A reference to the template that is being specialized." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181" xlink:show="new" xlink:title="\returns A reference to the template that is being specialized." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="2357.5" y="3040.0504">primary_template() const : cpp_template_ref</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187" target="_top" title="\returns Whether or not the arguments are exposed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187" xlink:show="new" xlink:title="\returns Whether or not the arguments are exposed." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2343.5" y="3044.6447"/><ellipse cx="2348.5" cy="3049.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187" target="_top" title="\returns Whether or not the arguments are exposed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187" xlink:show="new" xlink:title="\returns Whether or not the arguments are exposed." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2357.5" y="3052.8551">arguments_exposed() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. &#10;otes For function template specializations it can be empty, meaning that the arguments..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. &#10;otes For function template specializations it can be empty, meaning that the arguments..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2343.5" y="3057.4494"/><ellipse cx="2348.5" cy="3062.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196" target="_top" title="\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. &#10;otes For function template specializations it can be empty, meaning that the arguments..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196" xlink:show="new" xlink:title="\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. &#10;otes For function template specializations it can be empty, meaning that the arguments..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="2357.5" y="3065.6598">arguments() const : type_safe::array_ref&lt;cpp_template_argument const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206" target="_top" title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. &#10;otes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206" xlink:show="new" xlink:title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. &#10;otes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2343.5" y="3070.2541"/><ellipse cx="2348.5" cy="3075.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206" target="_top" title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. &#10;otes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206" xlink:show="new" xlink:title="\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. &#10;otes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="2357.5" y="3078.4645">unexposed_arguments() const : cpp_token_string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212" target="_top" title="\returns Whether or not the specialization is a full specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212" xlink:show="new" xlink:title="\returns Whether or not the specialization is a full specialization." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2343.5" y="3083.0588"/><ellipse cx="2348.5" cy="3088.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212" target="_top" title="\returns Whether or not the specialization is a full specialization." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212" xlink:show="new" xlink:title="\returns Whether or not the specialization is a full specialization." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="2357.5" y="3091.2692">is_full_specialization() const : bool</text></a><!--MD5=[cedd73a8983d7a55b5c6e53f8b25430b]
class C_0000007515--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L13" target="_top" title="A [cppast::cpp_entity]() modelling a language linkage." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a language linkage." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000007515" style="stroke: #A80036; stroke-width: 1.5;" width="171" x="1074.5" y="3107.84"/><ellipse cx="1089.5" cy="3123.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1092.4688,3129.4806 Q1091.8906,3129.7775 1091.25,3129.9181 Q1090.6094,3130.0744 1089.9063,3130.0744 Q1087.4063,3130.0744 1086.0781,3128.4338 Q1084.7656,3126.7775 1084.7656,3123.6525 Q1084.7656,3120.5275 1086.0781,3118.8713 Q1087.4063,3117.215 1089.9063,3117.215 Q1090.6094,3117.215 1091.25,3117.3713 Q1091.9063,3117.5275 1092.4688,3117.8244 L1092.4688,3120.5431 Q1091.8438,3119.965 1091.25,3119.6994 Q1090.6563,3119.4181 1090.0313,3119.4181 Q1088.6875,3119.4181 1088,3120.4963 Q1087.3125,3121.5588 1087.3125,3123.6525 Q1087.3125,3125.7463 1088,3126.8244 Q1088.6875,3127.8869 1090.0313,3127.8869 Q1090.6563,3127.8869 1091.25,3127.6213 Q1091.8438,3127.34 1092.4688,3126.7619 L1092.4688,3129.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="139" x="1103.5" y="3127.9943">cpp_language_linkage</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1075.5" x2="1244.5" y1="3139.84" y2="3139.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1075.5" x2="1244.5" y1="3147.84" y2="3147.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1080.5" y="3153.84"/><ellipse cx="1085.5" cy="3158.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1094.5" y="3162.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50" target="_top" title="\returns `true` if the linkage is a block, `false` otherwise." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50" xlink:show="new" xlink:title="\returns `true` if the linkage is a block, `false` otherwise." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1080.5" y="3166.6447"/><ellipse cx="1085.5" cy="3171.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50" target="_top" title="\returns `true` if the linkage is a block, `false` otherwise." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50" xlink:show="new" xlink:title="\returns `true` if the linkage is a block, `false` otherwise." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1094.5" y="3174.8551">is_block() const : bool</text></a><!--MD5=[0ad352dd1f477655976c1e14831d4e6c]
class C_0000007532--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L15" target="_top" title="A [cppast::cpp_entity]() modelling a macro parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L15" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a macro parameter." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000007532" style="stroke: #A80036; stroke-width: 1.5;" width="400" x="960" y="516.84"/><ellipse cx="1085.75" cy="532.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1088.7188,538.4806 Q1088.1406,538.7775 1087.5,538.9181 Q1086.8594,539.0744 1086.1563,539.0744 Q1083.6563,539.0744 1082.3281,537.4338 Q1081.0156,535.7775 1081.0156,532.6525 Q1081.0156,529.5275 1082.3281,527.8713 Q1083.6563,526.215 1086.1563,526.215 Q1086.8594,526.215 1087.5,526.3713 Q1088.1563,526.5275 1088.7188,526.8244 L1088.7188,529.5431 Q1088.0938,528.965 1087.5,528.6994 Q1086.9063,528.4181 1086.2813,528.4181 Q1084.9375,528.4181 1084.25,529.4963 Q1083.5625,530.5588 1083.5625,532.6525 Q1083.5625,534.7463 1084.25,535.8244 Q1084.9375,536.8869 1086.2813,536.8869 Q1086.9063,536.8869 1087.5,536.6213 Q1088.0938,536.34 1088.7188,535.7619 L1088.7188,538.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="140" x="1106.25" y="536.9943">cpp_macro_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="961" x2="1359" y1="548.84" y2="548.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="961" x2="1359" y1="556.84" y2="556.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="966" y="562.84"/><ellipse cx="971" cy="567.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="980" y="571.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23" target="_top" title="\returns A newly built macro parameter. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23" xlink:show="new" xlink:title="\returns A newly built macro parameter. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="966" y="575.6447"/><ellipse cx="971" cy="580.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23" target="_top" title="\returns A newly built macro parameter. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23" xlink:show="new" xlink:title="\returns A newly built macro parameter. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="374" x="980" y="583.8551">build(std::string name) : std::unique_ptr&lt;cpp_macro_parameter&gt;</text></a><!--MD5=[b44b920feba40425060688e6e8814208]
class C_0000007536--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L35" target="_top" title="A [cppast::cpp_entity]() modelling a macro definition." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L35" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a macro definition." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="137.6328" id="C_0000007536" style="stroke: #A80036; stroke-width: 1.5;" width="599" x="860.5" y="625.84"/><ellipse cx="1089.75" cy="641.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1092.7188,647.4806 Q1092.1406,647.7775 1091.5,647.9181 Q1090.8594,648.0744 1090.1563,648.0744 Q1087.6563,648.0744 1086.3281,646.4338 Q1085.0156,644.7775 1085.0156,641.6525 Q1085.0156,638.5275 1086.3281,636.8713 Q1087.6563,635.215 1090.1563,635.215 Q1090.8594,635.215 1091.5,635.3713 Q1092.1563,635.5275 1092.7188,635.8244 L1092.7188,638.5431 Q1092.0938,637.965 1091.5,637.6994 Q1090.9063,637.4181 1090.2813,637.4181 Q1088.9375,637.4181 1088.25,638.4963 Q1087.5625,639.5588 1087.5625,641.6525 Q1087.5625,643.7463 1088.25,644.8244 Q1088.9375,645.8869 1090.2813,645.8869 Q1090.9063,645.8869 1091.5,645.6213 Q1092.0938,645.34 1092.7188,644.7619 L1092.7188,647.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="132" x="1110.25" y="645.9943">cpp_macro_definition</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="861.5" x2="1458.5" y1="657.84" y2="657.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="861.5" x2="1458.5" y1="665.84" y2="665.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="671.84"/><ellipse cx="871.5" cy="676.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="880.5" y="680.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43" target="_top" title="\returns A newly built object like macro. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43" xlink:show="new" xlink:title="\returns A newly built object like macro. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="684.6447"/><ellipse cx="871.5" cy="689.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43" target="_top" title="\returns A newly built object like macro. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43" xlink:show="new" xlink:title="\returns A newly built object like macro. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="573" x="880.5" y="692.8551">build_object_like(std::string name, std::string replacement) : std::unique_ptr&lt;cpp_macro_definition&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98" target="_top" title="\returns The replacement text of the macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98" xlink:show="new" xlink:title="\returns The replacement text of the macro." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="697.4494"/><ellipse cx="871.5" cy="702.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98" target="_top" title="\returns The replacement text of the macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98" xlink:show="new" xlink:title="\returns The replacement text of the macro." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="880.5" y="705.6598">replacement() const : std::string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104" target="_top" title="\returns Whether or not it is an object like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104" xlink:show="new" xlink:title="\returns Whether or not it is an object like macro." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="710.2541"/><ellipse cx="871.5" cy="715.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104" target="_top" title="\returns Whether or not it is an object like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104" xlink:show="new" xlink:title="\returns Whether or not it is an object like macro." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="880.5" y="718.4645">is_object_like() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110" target="_top" title="\returns Whether or not it is a function like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110" xlink:show="new" xlink:title="\returns Whether or not it is a function like macro." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="723.0588"/><ellipse cx="871.5" cy="728.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110" target="_top" title="\returns Whether or not it is a function like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110" xlink:show="new" xlink:title="\returns Whether or not it is a function like macro." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="880.5" y="731.2692">is_function_like() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116" target="_top" title="\returns Whether or not it is a variadic macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116" xlink:show="new" xlink:title="\returns Whether or not it is a variadic macro." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="735.8634"/><ellipse cx="871.5" cy="740.8634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116" target="_top" title="\returns Whether or not it is a variadic macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116" xlink:show="new" xlink:title="\returns Whether or not it is a variadic macro." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="880.5" y="744.0739">is_variadic() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123" target="_top" title="\returns The parameters of the macro. &#10;otes It has none if it is not a function like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123" xlink:show="new" xlink:title="\returns The parameters of the macro. &#10;otes It has none if it is not a function like macro." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="866.5" y="748.6681"/><ellipse cx="871.5" cy="753.6681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123" target="_top" title="\returns The parameters of the macro. &#10;otes It has none if it is not a function like macro." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123" xlink:show="new" xlink:title="\returns The parameters of the macro. &#10;otes It has none if it is not a function like macro." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="880.5" y="756.8786">parameters() const : detail::iteratable_intrusive_list&lt;cpp_macro_parameter&gt;</text></a><!--MD5=[890fc63e657f49b445dbf86664dafa8b]
class C_0000007566--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L154" target="_top" title="A [cppast::cpp_entity]() modelling an `#include`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L154" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling an `#include`." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000007566" style="stroke: #A80036; stroke-width: 1.5;" width="694" x="813" y="798.84"/><ellipse cx="1089.25" cy="814.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1092.2188,820.4806 Q1091.6406,820.7775 1091,820.9181 Q1090.3594,821.0744 1089.6563,821.0744 Q1087.1563,821.0744 1085.8281,819.4338 Q1084.5156,817.7775 1084.5156,814.6525 Q1084.5156,811.5275 1085.8281,809.8713 Q1087.1563,808.215 1089.6563,808.215 Q1090.3594,808.215 1091,808.3713 Q1091.6563,808.5275 1092.2188,808.8244 L1092.2188,811.5431 Q1091.5938,810.965 1091,810.6994 Q1090.4063,810.4181 1089.7813,810.4181 Q1088.4375,810.4181 1087.75,811.4963 Q1087.0625,812.5588 1087.0625,814.6525 Q1087.0625,816.7463 1087.75,817.8244 Q1088.4375,818.8869 1089.7813,818.8869 Q1090.4063,818.8869 1091,818.6213 Q1091.5938,818.34 1092.2188,817.7619 L1092.2188,820.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="133" x="1109.75" y="818.9943">cpp_include_directive</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="814" x2="1506" y1="830.84" y2="830.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="814" x2="1506" y1="838.84" y2="838.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="819" y="844.84"/><ellipse cx="824" cy="849.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="833" y="853.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162" target="_top" title="\returns A newly built include directive. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162" xlink:show="new" xlink:title="\returns A newly built include directive. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="819" y="857.6447"/><ellipse cx="824" cy="862.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162" target="_top" title="\returns A newly built include directive. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162" xlink:show="new" xlink:title="\returns A newly built include directive. &#10;otes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="668" x="833" y="865.8551">build(cpp_file_ref const&amp; target, cpp_include_kind kind, std::string full_path) : std::unique_ptr&lt;cpp_include_directive&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171" target="_top" title="\returns A reference to the [cppast::cpp_file]() it includes." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_file]() it includes." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="819" y="870.4494"/><ellipse cx="824" cy="875.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171" target="_top" title="\returns A reference to the [cppast::cpp_file]() it includes." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171" xlink:show="new" xlink:title="\returns A reference to the [cppast::cpp_file]() it includes." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="833" y="878.6598">target() const : cpp_file_ref</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177" target="_top" title="\returns The kind of include it is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177" xlink:show="new" xlink:title="\returns The kind of include it is." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="819" y="883.2541"/><ellipse cx="824" cy="888.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177" target="_top" title="\returns The kind of include it is." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177" xlink:show="new" xlink:title="\returns The kind of include it is." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="833" y="891.4645">include_kind() const : cpp_include_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183" target="_top" title="\returns The full path of the included file." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183" xlink:show="new" xlink:title="\returns The full path of the included file." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="819" y="896.0588"/><ellipse cx="824" cy="901.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183" target="_top" title="\returns The full path of the included file." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183" xlink:show="new" xlink:title="\returns The full path of the included file." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="833" y="904.2692">full_path() const : std::string const&amp;</text></a><!--MD5=[a644552a02d09a4647b7e4edcda28ac9]
class C_0000007672--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L13" target="_top" title="Base class for all kinds of member variables." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L13" xlink:show="new" xlink:title="Base class for all kinds of member variables." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000007672" style="stroke: #A80036; stroke-width: 1.5;" width="834" x="743" y="68.84"/><ellipse cx="1069.75" cy="84.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1072.7188,90.4806 Q1072.1406,90.7775 1071.5,90.9181 Q1070.8594,91.0744 1070.1563,91.0744 Q1067.6563,91.0744 1066.3281,89.4338 Q1065.0156,87.7775 1065.0156,84.6525 Q1065.0156,81.5275 1066.3281,79.8713 Q1067.6563,78.215 1070.1563,78.215 Q1070.8594,78.215 1071.5,78.3713 Q1072.1563,78.5275 1072.7188,78.8244 L1072.7188,81.5431 Q1072.0938,80.965 1071.5,80.6994 Q1070.9063,80.4181 1070.2813,80.4181 Q1068.9375,80.4181 1068.25,81.4963 Q1067.5625,82.5588 1067.5625,84.6525 Q1067.5625,86.7463 1068.25,87.8244 Q1068.9375,88.8869 1070.2813,88.8869 Q1070.9063,88.8869 1071.5,88.6213 Q1072.0938,88.34 1072.7188,87.7619 L1072.7188,90.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="172" x="1090.25" y="88.9943">cpp_member_variable_base</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="744" x2="1576" y1="100.84" y2="100.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="744" x2="1576" y1="108.84" y2="108.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17" target="_top" title="\returns Whether or not the member variable is declared `mutable`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17" xlink:show="new" xlink:title="\returns Whether or not the member variable is declared `mutable`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="749" y="114.84"/><ellipse cx="754" cy="119.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17" target="_top" title="\returns Whether or not the member variable is declared `mutable`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17" xlink:show="new" xlink:title="\returns Whether or not the member variable is declared `mutable`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="763" y="123.0504">is_mutable() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22" target="_top" title="cpp_member_variable_base" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22" xlink:show="new" xlink:title="cpp_member_variable_base" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="749" y="127.6447"/><ellipse cx="754" cy="132.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22" target="_top" title="cpp_member_variable_base" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22" xlink:show="new" xlink:title="cpp_member_variable_base" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="808" x="763" y="135.8551">cpp_member_variable_base(std::string name, std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; def, bool is_mutable) : void</text></a><!--MD5=[ac3dfdedc94d2a386e31489e8f74cc3d]
class C_0000007680--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L33" target="_top" title="A [cppast::cpp_entity]() modelling a C++ member variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L33" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ member variable." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000007680" style="stroke: #A80036; stroke-width: 1.5;" width="1169" x="1977" y="7.84"/><ellipse cx="2489.75" cy="23.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2492.7188,29.4806 Q2492.1406,29.7775 2491.5,29.9181 Q2490.8594,30.0744 2490.1563,30.0744 Q2487.6563,30.0744 2486.3281,28.4338 Q2485.0156,26.7775 2485.0156,23.6525 Q2485.0156,20.5275 2486.3281,18.8713 Q2487.6563,17.215 2490.1563,17.215 Q2490.8594,17.215 2491.5,17.3713 Q2492.1563,17.5275 2492.7188,17.8244 L2492.7188,20.5431 Q2492.0938,19.965 2491.5,19.6994 Q2490.9063,19.4181 2490.2813,19.4181 Q2488.9375,19.4181 2488.25,20.4963 Q2487.5625,21.5588 2487.5625,23.6525 Q2487.5625,25.7463 2488.25,26.8244 Q2488.9375,27.8869 2490.2813,27.8869 Q2490.9063,27.8869 2491.5,27.6213 Q2492.0938,27.34 2492.7188,26.7619 L2492.7188,29.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="135" x="2510.25" y="27.9943">cpp_member_variable</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1978" x2="3145" y1="39.84" y2="39.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1978" x2="3145" y1="47.84" y2="47.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1983" y="53.84"/><ellipse cx="1988" cy="58.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1997" y="62.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40" target="_top" title="\returns A newly created and registered member variable. &#10;otes `def` may be `nullptr` in which case there is no member initializer provided." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40" xlink:show="new" xlink:title="\returns A newly created and registered member variable. &#10;otes `def` may be `nullptr` in which case there is no member initializer provided." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1983" y="66.6447"/><ellipse cx="1988" cy="71.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40" target="_top" title="\returns A newly created and registered member variable. &#10;otes `def` may be `nullptr` in which case there is no member initializer provided." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40" xlink:show="new" xlink:title="\returns A newly created and registered member variable. &#10;otes `def` may be `nullptr` in which case there is no member initializer provided." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1143" x="1997" y="74.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; def, bool is_mutable) : std::unique_ptr&lt;cpp_member_variable&gt;</text></a><!--MD5=[43f3cd92534f015712ba2556c57bb26a]
class C_0000007692--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L53" target="_top" title="A [cppast::cpp_entity]() modelling a C++ bitfield." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L53" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ bitfield." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007692" style="stroke: #A80036; stroke-width: 1.5;" width="1008" x="2057.5" y="117.34"/><ellipse cx="2521.75" cy="133.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2524.7188,138.9806 Q2524.1406,139.2775 2523.5,139.4181 Q2522.8594,139.5744 2522.1563,139.5744 Q2519.6563,139.5744 2518.3281,137.9338 Q2517.0156,136.2775 2517.0156,133.1525 Q2517.0156,130.0275 2518.3281,128.3713 Q2519.6563,126.715 2522.1563,126.715 Q2522.8594,126.715 2523.5,126.8713 Q2524.1563,127.0275 2524.7188,127.3244 L2524.7188,130.0431 Q2524.0938,129.465 2523.5,129.1994 Q2522.9063,128.9181 2522.2813,128.9181 Q2520.9375,128.9181 2520.25,129.9963 Q2519.5625,131.0588 2519.5625,133.1525 Q2519.5625,135.2463 2520.25,136.3244 Q2520.9375,137.3869 2522.2813,137.3869 Q2522.9063,137.3869 2523.5,137.1213 Q2524.0938,136.84 2524.7188,136.2619 L2524.7188,138.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="2542.25" y="137.4943">cpp_bitfield</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2058.5" x2="3064.5" y1="149.34" y2="149.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2058.5" x2="3064.5" y1="157.34" y2="157.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2063.5" y="163.34"/><ellipse cx="2068.5" cy="168.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2077.5" y="171.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60" target="_top" title="\returns A newly created and registered bitfield. &#10;otes It cannot have a member initializer, i.e. default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60" xlink:show="new" xlink:title="\returns A newly created and registered bitfield. &#10;otes It cannot have a member initializer, i.e. default value." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2063.5" y="176.1447"/><ellipse cx="2068.5" cy="181.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60" target="_top" title="\returns A newly created and registered bitfield. &#10;otes It cannot have a member initializer, i.e. default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60" xlink:show="new" xlink:title="\returns A newly created and registered bitfield. &#10;otes It cannot have a member initializer, i.e. default value." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="982" x="2077.5" y="184.3551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, unsigned int no_bits, bool is_mutable) : std::unique_ptr&lt;cpp_bitfield&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66" target="_top" title="\returns A newly created unnamed bitfield. &#10;otes It will not be registered, as it is unnamed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66" xlink:show="new" xlink:title="\returns A newly created unnamed bitfield. &#10;otes It will not be registered, as it is unnamed." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2063.5" y="188.9494"/><ellipse cx="2068.5" cy="193.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66" target="_top" title="\returns A newly created unnamed bitfield. &#10;otes It will not be registered, as it is unnamed." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66" xlink:show="new" xlink:title="\returns A newly created unnamed bitfield. &#10;otes It will not be registered, as it is unnamed." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="618" x="2077.5" y="197.1598">build(std::unique_ptr&lt;cpp_type&gt; type, unsigned int no_bits, bool is_mutable) : std::unique_ptr&lt;cpp_bitfield&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70" target="_top" title="\returns The number of bits of the bitfield." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70" xlink:show="new" xlink:title="\returns The number of bits of the bitfield." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2063.5" y="201.7541"/><ellipse cx="2068.5" cy="206.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70" target="_top" title="\returns The number of bits of the bitfield." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70" xlink:show="new" xlink:title="\returns The number of bits of the bitfield." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2077.5" y="209.9645">no_bits() const : unsigned int</text></a><!--MD5=[890788cdcbff79d829d12288963701b7]
class C_0000007726--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L15" target="_top" title="A [cppast::cpp_entity]() modelling a namespace." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L15" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a namespace." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007726" style="stroke: #A80036; stroke-width: 1.5;" width="187" x="1066.5" y="946.34"/><ellipse cx="1105.35" cy="962.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1108.3188,967.9806 Q1107.7406,968.2775 1107.1,968.4181 Q1106.4594,968.5744 1105.7563,968.5744 Q1103.2563,968.5744 1101.9281,966.9338 Q1100.6156,965.2775 1100.6156,962.1525 Q1100.6156,959.0275 1101.9281,957.3713 Q1103.2563,955.715 1105.7563,955.715 Q1106.4594,955.715 1107.1,955.8713 Q1107.7563,956.0275 1108.3188,956.3244 L1108.3188,959.0431 Q1107.6938,958.465 1107.1,958.1994 Q1106.5063,957.9181 1105.8813,957.9181 Q1104.5375,957.9181 1103.85,958.9963 Q1103.1625,960.0588 1103.1625,962.1525 Q1103.1625,964.2463 1103.85,965.3244 Q1104.5375,966.3869 1105.8813,966.3869 Q1106.5063,966.3869 1107.1,966.1213 Q1107.6938,965.84 1108.3188,965.2619 L1108.3188,967.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="102" x="1124.65" y="966.4943">cpp_namespace</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1067.5" x2="1252.5" y1="978.34" y2="978.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1067.5" x2="1252.5" y1="986.34" y2="986.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1072.5" y="992.34"/><ellipse cx="1077.5" cy="997.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1086.5" y="1000.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56" target="_top" title="\returns Whether or not the namespace is an `inline namespace`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56" xlink:show="new" xlink:title="\returns Whether or not the namespace is an `inline namespace`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1072.5" y="1005.1447"/><ellipse cx="1077.5" cy="1010.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56" target="_top" title="\returns Whether or not the namespace is an `inline namespace`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56" xlink:show="new" xlink:title="\returns Whether or not the namespace is an `inline namespace`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1086.5" y="1013.3551">is_inline() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62" target="_top" title="\returns Whether or not the namespace is part of a C++17 nested namespace." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62" xlink:show="new" xlink:title="\returns Whether or not the namespace is part of a C++17 nested namespace." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1072.5" y="1017.9494"/><ellipse cx="1077.5" cy="1022.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62" target="_top" title="\returns Whether or not the namespace is part of a C++17 nested namespace." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62" xlink:show="new" xlink:title="\returns Whether or not the namespace is part of a C++17 nested namespace." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1086.5" y="1026.1598">is_nested() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68" target="_top" title="\returns Whether or not the namespace is anonymous." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68" xlink:show="new" xlink:title="\returns Whether or not the namespace is anonymous." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1072.5" y="1030.7541"/><ellipse cx="1077.5" cy="1035.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68" target="_top" title="\returns Whether or not the namespace is anonymous." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68" xlink:show="new" xlink:title="\returns Whether or not the namespace is anonymous." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1086.5" y="1038.9645">is_anonymous() const : bool</text></a><!--MD5=[96bb0643b3e2a1b0b049547ba414a570]
class C_0000007747--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L102" target="_top" title="A [cppast::cpp_entity]() modelling a namespace alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L102" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a namespace alias." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000007747" style="stroke: #A80036; stroke-width: 1.5;" width="818" x="751" y="1080.84"/><ellipse cx="1087.25" cy="1096.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1090.2188,1102.4806 Q1089.6406,1102.7775 1089,1102.9181 Q1088.3594,1103.0744 1087.6563,1103.0744 Q1085.1563,1103.0744 1083.8281,1101.4338 Q1082.5156,1099.7775 1082.5156,1096.6525 Q1082.5156,1093.5275 1083.8281,1091.8713 Q1085.1563,1090.215 1087.6563,1090.215 Q1088.3594,1090.215 1089,1090.3713 Q1089.6563,1090.5275 1090.2188,1090.8244 L1090.2188,1093.5431 Q1089.5938,1092.965 1089,1092.6994 Q1088.4063,1092.4181 1087.7813,1092.4181 Q1086.4375,1092.4181 1085.75,1093.4963 Q1085.0625,1094.5588 1085.0625,1096.6525 Q1085.0625,1098.7463 1085.75,1099.8244 Q1086.4375,1100.8869 1087.7813,1100.8869 Q1088.4063,1100.8869 1089,1100.6213 Q1089.5938,1100.34 1090.2188,1099.7619 L1090.2188,1102.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="1107.75" y="1100.9943">cpp_namespace_alias</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="752" x2="1568" y1="1112.84" y2="1112.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="752" x2="1568" y1="1120.84" y2="1120.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="757" y="1126.84"/><ellipse cx="762" cy="1131.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="771" y="1135.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108" target="_top" title="\returns A newly created and registered namespace alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108" xlink:show="new" xlink:title="\returns A newly created and registered namespace alias." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="757" y="1139.6447"/><ellipse cx="762" cy="1144.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108" target="_top" title="\returns A newly created and registered namespace alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108" xlink:show="new" xlink:title="\returns A newly created and registered namespace alias." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="792" x="771" y="1147.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, cpp_namespace_ref target) : std::unique_ptr&lt;cpp_namespace_alias&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114" target="_top" title="\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. &#10;otes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114" xlink:show="new" xlink:title="\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. &#10;otes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="757" y="1152.4494"/><ellipse cx="762" cy="1157.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114" target="_top" title="\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. &#10;otes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114" xlink:show="new" xlink:title="\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. &#10;otes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="771" y="1160.6598">target() const : cpp_namespace_ref const&amp;</text></a><!--MD5=[8a21e1894e744ebce08822bc30dc4ed3]
class C_0000007767--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L133" target="_top" title="A [cppast::cpp_entity]() modelling a using directive. A using directive is `using namespace std`, for example. &#10;otes It does not have a name." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L133" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a using directive. A using directive is `using namespace std`, for example. &#10;otes It does not have a name." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000007767" style="stroke: #A80036; stroke-width: 1.5;" width="440" x="940" y="1201.84"/><ellipse cx="1094.75" cy="1217.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1097.7188,1223.4806 Q1097.1406,1223.7775 1096.5,1223.9181 Q1095.8594,1224.0744 1095.1563,1224.0744 Q1092.6563,1224.0744 1091.3281,1222.4338 Q1090.0156,1220.7775 1090.0156,1217.6525 Q1090.0156,1214.5275 1091.3281,1212.8713 Q1092.6563,1211.215 1095.1563,1211.215 Q1095.8594,1211.215 1096.5,1211.3713 Q1097.1563,1211.5275 1097.7188,1211.8244 L1097.7188,1214.5431 Q1097.0938,1213.965 1096.5,1213.6994 Q1095.9063,1213.4181 1095.2813,1213.4181 Q1093.9375,1213.4181 1093.25,1214.4963 Q1092.5625,1215.5588 1092.5625,1217.6525 Q1092.5625,1219.7463 1093.25,1220.8244 Q1093.9375,1221.8869 1095.2813,1221.8869 Q1095.9063,1221.8869 1096.5,1221.6213 Q1097.0938,1221.34 1097.7188,1220.7619 L1097.7188,1223.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="122" x="1115.25" y="1221.9943">cpp_using_directive</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="941" x2="1379" y1="1233.84" y2="1233.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="941" x2="1379" y1="1241.84" y2="1241.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="946" y="1247.84"/><ellipse cx="951" cy="1252.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="960" y="1256.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141" target="_top" title="\returns A newly created using directive. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141" xlink:show="new" xlink:title="\returns A newly created using directive. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="946" y="1260.6447"/><ellipse cx="951" cy="1265.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141" target="_top" title="\returns A newly created using directive. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141" xlink:show="new" xlink:title="\returns A newly created using directive. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="414" x="960" y="1268.8551">build(cpp_namespace_ref target) : std::unique_ptr&lt;cpp_using_directive&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147" target="_top" title="\returns The [cppast::cpp_namespace_ref]() that is being used." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147" xlink:show="new" xlink:title="\returns The [cppast::cpp_namespace_ref]() that is being used." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="946" y="1273.4494"/><ellipse cx="951" cy="1278.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147" target="_top" title="\returns The [cppast::cpp_namespace_ref]() that is being used." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147" xlink:show="new" xlink:title="\returns The [cppast::cpp_namespace_ref]() that is being used." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="960" y="1281.6598">target() const : cpp_namespace_ref const&amp;</text></a><!--MD5=[bf54f7f9cf0fc210cc2eeb8ae039828f]
class C_0000007783--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L164" target="_top" title="A [cppast::cpp_entity]() modelling a using declaration. A using declaration is `using std::vector`, for example. &#10;otes It does not have a name." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L164" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a using declaration. A using declaration is `using std::vector`, for example. &#10;otes It does not have a name." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000007783" style="stroke: #A80036; stroke-width: 1.5;" width="420" x="950" y="1322.84"/><ellipse cx="1085.75" cy="1338.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1088.7188,1344.4806 Q1088.1406,1344.7775 1087.5,1344.9181 Q1086.8594,1345.0744 1086.1563,1345.0744 Q1083.6563,1345.0744 1082.3281,1343.4338 Q1081.0156,1341.7775 1081.0156,1338.6525 Q1081.0156,1335.5275 1082.3281,1333.8713 Q1083.6563,1332.215 1086.1563,1332.215 Q1086.8594,1332.215 1087.5,1332.3713 Q1088.1563,1332.5275 1088.7188,1332.8244 L1088.7188,1335.5431 Q1088.0938,1334.965 1087.5,1334.6994 Q1086.9063,1334.4181 1086.2813,1334.4181 Q1084.9375,1334.4181 1084.25,1335.4963 Q1083.5625,1336.5588 1083.5625,1338.6525 Q1083.5625,1340.7463 1084.25,1341.8244 Q1084.9375,1342.8869 1086.2813,1342.8869 Q1086.9063,1342.8869 1087.5,1342.6213 Q1088.0938,1342.34 1088.7188,1341.7619 L1088.7188,1344.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="140" x="1106.25" y="1342.9943">cpp_using_declaration</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="951" x2="1369" y1="1354.84" y2="1354.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="951" x2="1369" y1="1362.84" y2="1362.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="956" y="1368.84"/><ellipse cx="961" cy="1373.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="970" y="1377.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172" target="_top" title="\returns A newly created using declaration. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172" xlink:show="new" xlink:title="\returns A newly created using declaration. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="956" y="1381.6447"/><ellipse cx="961" cy="1386.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172" target="_top" title="\returns A newly created using declaration. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172" xlink:show="new" xlink:title="\returns A newly created using declaration. &#10;otes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="394" x="970" y="1389.8551">build(cpp_entity_ref target) : std::unique_ptr&lt;cpp_using_declaration&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179" target="_top" title="\returns The [cppast::cpp_entity_ref]() that is being used. &#10;otes The name of the reference is the same as the name of this entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179" xlink:show="new" xlink:title="\returns The [cppast::cpp_entity_ref]() that is being used. &#10;otes The name of the reference is the same as the name of this entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="956" y="1394.4494"/><ellipse cx="961" cy="1399.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179" target="_top" title="\returns The [cppast::cpp_entity_ref]() that is being used. &#10;otes The name of the reference is the same as the name of this entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179" xlink:show="new" xlink:title="\returns The [cppast::cpp_entity_ref]() that is being used. &#10;otes The name of the reference is the same as the name of this entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="970" y="1402.6598">target() const : cpp_entity_ref const&amp;</text></a><!--MD5=[0d4bb61b2709f2236ddc4d917ee73d11]
class C_0000007825--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L18" target="_top" title="A [cppast::cpp_entity]() modelling a C++ variable. &#10;otes This is not a member variable, use [cppast::cpp_member_variable]() for that. But it can be `static` member variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L18" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ variable. &#10;otes This is not a member variable, use [cppast::cpp_member_variable]() for that. But it can be `static` member variable." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="112.0234" id="C_0000007825" style="stroke: #A80036; stroke-width: 1.5;" width="1332" x="494" y="248.84"/><ellipse cx="1116.75" cy="264.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1119.7188,270.4806 Q1119.1406,270.7775 1118.5,270.9181 Q1117.8594,271.0744 1117.1563,271.0744 Q1114.6563,271.0744 1113.3281,269.4338 Q1112.0156,267.7775 1112.0156,264.6525 Q1112.0156,261.5275 1113.3281,259.8713 Q1114.6563,258.215 1117.1563,258.215 Q1117.8594,258.215 1118.5,258.3713 Q1119.1563,258.5275 1119.7188,258.8244 L1119.7188,261.5431 Q1119.0938,260.965 1118.5,260.6994 Q1117.9063,260.4181 1117.2813,260.4181 Q1115.9375,260.4181 1115.25,261.4963 Q1114.5625,262.5588 1114.5625,264.6525 Q1114.5625,266.7463 1115.25,267.8244 Q1115.9375,268.8869 1117.2813,268.8869 Q1117.9063,268.8869 1118.5,268.6213 Q1119.0938,268.34 1119.7188,267.7619 L1119.7188,270.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="78" x="1137.25" y="268.9943">cpp_variable</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="495" x2="1825" y1="280.84" y2="280.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="495" x2="1825" y1="288.84" y2="288.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="500" y="294.84"/><ellipse cx="505" cy="299.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="514" y="303.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27" target="_top" title="\returns A newly created and registered variable. &#10;otes The default value may be `nullptr` indicating no default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27" xlink:show="new" xlink:title="\returns A newly created and registered variable. &#10;otes The default value may be `nullptr` indicating no default value." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="500" y="307.6447"/><ellipse cx="505" cy="312.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27" target="_top" title="\returns A newly created and registered variable. &#10;otes The default value may be `nullptr` indicating no default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27" xlink:show="new" xlink:title="\returns A newly created and registered variable. &#10;otes The default value may be `nullptr` indicating no default value." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1306" x="514" y="315.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, std::unique_ptr&lt;cpp_expression&gt; def, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr&lt;cpp_variable&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35" target="_top" title="\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35" xlink:show="new" xlink:title="\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="500" y="320.4494"/><ellipse cx="505" cy="325.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35" target="_top" title="\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35" xlink:show="new" xlink:title="\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1044" x="514" y="328.6598">build_declaration(cpp_entity_id definition_id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr&lt;cpp_variable&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42" target="_top" title="\returns The [cppast::cpp_storage_specifiers]() on that variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42" xlink:show="new" xlink:title="\returns The [cppast::cpp_storage_specifiers]() on that variable." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="500" y="333.2541"/><ellipse cx="505" cy="338.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42" target="_top" title="\returns The [cppast::cpp_storage_specifiers]() on that variable." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42" xlink:show="new" xlink:title="\returns The [cppast::cpp_storage_specifiers]() on that variable." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="514" y="341.4645">storage_class() const : cpp_storage_class_specifiers</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48" target="_top" title="\returns Whether the variable is marked `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48" xlink:show="new" xlink:title="\returns Whether the variable is marked `constexpr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="500" y="346.0588"/><ellipse cx="505" cy="351.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48" target="_top" title="\returns Whether the variable is marked `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48" xlink:show="new" xlink:title="\returns Whether the variable is marked `constexpr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="514" y="354.2692">is_constexpr() const : bool</text></a><!--MD5=[04b455d05254b31e8c868e77c76d980e]
class C_0000007892--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L47" target="_top" title="The base class for all entities in the C++ AST." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L47" xlink:show="new" xlink:title="The base class for all entities in the C++ AST." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="240.0703" id="C_0000007892" style="stroke: #A80036; stroke-width: 1.5;" width="388" x="26" y="1559.84"/><ellipse cx="183.25" cy="1575.84" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M183.3594,1571.1838 L182.2031,1576.2619 L184.5313,1576.2619 L183.3594,1571.1838 Z M181.875,1568.9494 L184.8594,1568.9494 L188.2188,1581.34 L185.7656,1581.34 L185,1578.2775 L181.7188,1578.2775 L180.9688,1581.34 L178.5313,1581.34 L181.875,1568.9494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="65" x="203.75" y="1579.9943">cpp_entity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="27" x2="413" y1="1591.84" y2="1591.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="27" x2="413" y1="1599.84" y2="1599.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50" target="_top" title="cpp_entity" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50" xlink:show="new" xlink:title="cpp_entity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1605.84"/><ellipse cx="37" cy="1610.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50" target="_top" title="cpp_entity" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50" xlink:show="new" xlink:title="cpp_entity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="46" y="1614.0504">cpp_entity(cpp_entity const&amp; ) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51" xlink:show="new" xlink:title="operator=" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1618.6447"/><ellipse cx="37" cy="1623.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51" xlink:show="new" xlink:title="operator=" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="46" y="1626.8551">operator=(cpp_entity const&amp; ) : cpp_entity&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53" target="_top" title="~cpp_entity" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53" xlink:show="new" xlink:title="~cpp_entity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1631.4494"/><ellipse cx="37" cy="1636.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53" target="_top" title="~cpp_entity" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53" xlink:show="new" xlink:title="~cpp_entity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="46" y="1639.6598">~cpp_entity() : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56" target="_top" title="\returns The kind of the entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56" xlink:show="new" xlink:title="\returns The kind of the entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1644.2541"/><ellipse cx="37" cy="1649.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56" target="_top" title="\returns The kind of the entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56" xlink:show="new" xlink:title="\returns The kind of the entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="46" y="1652.4645">kind() const : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63" target="_top" title="\returns The name of the entity. The name is the string associated with the entity's declaration." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63" xlink:show="new" xlink:title="\returns The name of the entity. The name is the string associated with the entity's declaration." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1657.0588"/><ellipse cx="37" cy="1662.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63" target="_top" title="\returns The name of the entity. The name is the string associated with the entity's declaration." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63" xlink:show="new" xlink:title="\returns The name of the entity. The name is the string associated with the entity's declaration." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="46" y="1665.2692">name() const : std::string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70" target="_top" title="\returns The name of the new scope created by the entity, if there is any." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70" xlink:show="new" xlink:title="\returns The name of the new scope created by the entity, if there is any." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1669.8634"/><ellipse cx="37" cy="1674.8634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70" target="_top" title="\returns The name of the new scope created by the entity, if there is any." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70" xlink:show="new" xlink:title="\returns The name of the new scope created by the entity, if there is any." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="46" y="1678.0739">scope_name() const : type_safe::optional&lt;cpp_scope_name&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76" target="_top" title="\returns A [ts::optional_ref]() to the parent entity in the AST." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the parent entity in the AST." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1682.6681"/><ellipse cx="37" cy="1687.6681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76" target="_top" title="\returns A [ts::optional_ref]() to the parent entity in the AST." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the parent entity in the AST." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="46" y="1690.8786">parent() const : type_safe::optional_ref&lt;cpp_entity const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106" target="_top" title="\returns The documentation comment associated with that entity, if any. &#10;otes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106" xlink:show="new" xlink:title="\returns The documentation comment associated with that entity, if any. &#10;otes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1695.4728"/><ellipse cx="37" cy="1700.4728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106" target="_top" title="\returns The documentation comment associated with that entity, if any. &#10;otes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106" xlink:show="new" xlink:title="\returns The documentation comment associated with that entity, if any. &#10;otes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="46" y="1703.6833">comment() const : type_safe::optional_ref&lt;std::string const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113" target="_top" title="\effects Sets the associated comment. \requires The comment must not be empty, if there is one." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113" xlink:show="new" xlink:title="\effects Sets the associated comment. \requires The comment must not be empty, if there is one." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1708.2775"/><ellipse cx="37" cy="1713.2775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113" target="_top" title="\effects Sets the associated comment. \requires The comment must not be empty, if there is one." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113" xlink:show="new" xlink:title="\effects Sets the associated comment. \requires The comment must not be empty, if there is one." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="46" y="1716.4879">set_comment(type_safe::optional&lt;std::string&gt; comment) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119" target="_top" title="\returns The list of attributes that are specified for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119" xlink:show="new" xlink:title="\returns The list of attributes that are specified for that entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1721.0822"/><ellipse cx="37" cy="1726.0822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119" target="_top" title="\returns The list of attributes that are specified for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119" xlink:show="new" xlink:title="\returns The list of attributes that are specified for that entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="46" y="1729.2926">attributes() const : cpp_attribute_list const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125" target="_top" title="\effects Adds an attribute for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125" xlink:show="new" xlink:title="\effects Adds an attribute for that entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1733.8869"/><ellipse cx="37" cy="1738.8869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125" target="_top" title="\effects Adds an attribute for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125" xlink:show="new" xlink:title="\effects Adds an attribute for that entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="46" y="1742.0973">add_attribute(cpp_attribute attr) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131" target="_top" title="\effects Adds multiple arguments for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131" xlink:show="new" xlink:title="\effects Adds multiple arguments for that entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1746.6916"/><ellipse cx="37" cy="1751.6916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131" target="_top" title="\effects Adds multiple arguments for that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131" xlink:show="new" xlink:title="\effects Adds multiple arguments for that entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="46" y="1754.902">add_attribute(cpp_attribute_list const&amp; list) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1759.4963"/><ellipse cx="37" cy="1764.4963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="46" y="1767.7067">user_data() const : void*</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1772.3009"/><ellipse cx="37" cy="1777.3009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="46" y="1780.5114">set_user_data(void* data) const : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155" target="_top" title="\effects Creates it giving it the the name." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155" xlink:show="new" xlink:title="\effects Creates it giving it the the name." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="32" y="1785.1056"/><ellipse cx="37" cy="1790.1056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155" target="_top" title="\effects Creates it giving it the the name." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155" xlink:show="new" xlink:title="\effects Creates it giving it the the name." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="46" y="1793.3161">cpp_entity(std::string name) : void</text></a><!--MD5=[66f15218610d615aa24547df525eead2]
class C_0000007918--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L187" target="_top" title="A [cppast::cpp_entity]() that isn't exposed directly. The only information available is the raw source code." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L187" xlink:show="new" xlink:title="A [cppast::cpp_entity]() that isn't exposed directly. The only information available is the raw source code." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007918" style="stroke: #A80036; stroke-width: 1.5;" width="756" x="782" y="1444.34"/><ellipse cx="1086.25" cy="1460.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1089.2188,1465.9806 Q1088.6406,1466.2775 1088,1466.4181 Q1087.3594,1466.5744 1086.6563,1466.5744 Q1084.1563,1466.5744 1082.8281,1464.9338 Q1081.5156,1463.2775 1081.5156,1460.1525 Q1081.5156,1457.0275 1082.8281,1455.3713 Q1084.1563,1453.715 1086.6563,1453.715 Q1087.3594,1453.715 1088,1453.8713 Q1088.6563,1454.0275 1089.2188,1454.3244 L1089.2188,1457.0431 Q1088.5938,1456.465 1088,1456.1994 Q1087.4063,1455.9181 1086.7813,1455.9181 Q1085.4375,1455.9181 1084.75,1456.9963 Q1084.0625,1458.0588 1084.0625,1460.1525 Q1084.0625,1462.2463 1084.75,1463.3244 Q1085.4375,1464.3869 1086.7813,1464.3869 Q1087.4063,1464.3869 1088,1464.1213 Q1088.5938,1463.84 1089.2188,1463.2619 L1089.2188,1465.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="139" x="1106.75" y="1464.4943">cpp_unexposed_entity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="783" x2="1537" y1="1476.34" y2="1476.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="783" x2="1537" y1="1484.34" y2="1484.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="788" y="1490.34"/><ellipse cx="793" cy="1495.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="802" y="1498.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194" target="_top" title="\returns A newly built and registered unexposed entity. &#10;otes It will be registered as a declaration." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194" xlink:show="new" xlink:title="\returns A newly built and registered unexposed entity. &#10;otes It will be registered as a declaration." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="788" y="1503.1447"/><ellipse cx="793" cy="1508.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194" target="_top" title="\returns A newly built and registered unexposed entity. &#10;otes It will be registered as a declaration." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194" xlink:show="new" xlink:title="\returns A newly built and registered unexposed entity. &#10;otes It will be registered as a declaration." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="730" x="802" y="1511.3551">build(cpp_entity_index const&amp; index, cpp_entity_id id, std::string name, cpp_token_string spelling) : std::unique_ptr&lt;cpp_entity&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199" target="_top" title="\returns A newly built unnamed unexposed entity. It will not be registered." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199" xlink:show="new" xlink:title="\returns A newly built unnamed unexposed entity. It will not be registered." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="788" y="1515.9494"/><ellipse cx="793" cy="1520.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199" target="_top" title="\returns A newly built unnamed unexposed entity. It will not be registered." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199" xlink:show="new" xlink:title="\returns A newly built unnamed unexposed entity. It will not be registered." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="352" x="802" y="1524.1598">build(cpp_token_string spelling) : std::unique_ptr&lt;cpp_entity&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202" target="_top" title="\returns The spelling of that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202" xlink:show="new" xlink:title="\returns The spelling of that entity." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="788" y="1528.7541"/><ellipse cx="793" cy="1533.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202" target="_top" title="\returns The spelling of that entity." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202" xlink:show="new" xlink:title="\returns The spelling of that entity." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="802" y="1536.9645">spelling() const : cpp_token_string const&amp;</text></a><!--MD5=[47e1baf752807b0f2180dc7da6689d3c]
class C_0000007933--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L17" target="_top" title="Base class for all entities modelling a template parameter of some kind." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L17" xlink:show="new" xlink:title="Base class for all entities modelling a template parameter of some kind." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="60.8047" id="C_0000007933" style="stroke: #A80036; stroke-width: 1.5;" width="189" x="1065.5" y="2371.34"/><ellipse cx="1080.5" cy="2387.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1083.4688,2392.9806 Q1082.8906,2393.2775 1082.25,2393.4181 Q1081.6094,2393.5744 1080.9063,2393.5744 Q1078.4063,2393.5744 1077.0781,2391.9338 Q1075.7656,2390.2775 1075.7656,2387.1525 Q1075.7656,2384.0275 1077.0781,2382.3713 Q1078.4063,2380.715 1080.9063,2380.715 Q1081.6094,2380.715 1082.25,2380.8713 Q1082.9063,2381.0275 1083.4688,2381.3244 L1083.4688,2384.0431 Q1082.8438,2383.465 1082.25,2383.1994 Q1081.6563,2382.9181 1081.0313,2382.9181 Q1079.6875,2382.9181 1079,2383.9963 Q1078.3125,2385.0588 1078.3125,2387.1525 Q1078.3125,2389.2463 1079,2390.3244 Q1079.6875,2391.3869 1081.0313,2391.3869 Q1081.6563,2391.3869 1082.25,2391.1213 Q1082.8438,2390.84 1083.4688,2390.2619 L1083.4688,2392.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="157" x="1094.5" y="2391.4943">cpp_template_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1066.5" x2="1253.5" y1="2403.34" y2="2403.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1066.5" x2="1253.5" y1="2411.34" y2="2411.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21" target="_top" title="\returns Whether or not the parameter is variadic." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21" xlink:show="new" xlink:title="\returns Whether or not the parameter is variadic." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1071.5" y="2417.34"/><ellipse cx="1076.5" cy="2422.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21" target="_top" title="\returns Whether or not the parameter is variadic." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21" xlink:show="new" xlink:title="\returns Whether or not the parameter is variadic." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1085.5" y="2425.5504">is_variadic() const : bool</text></a><!--MD5=[58cb3162b6a95c7ec73492108d16a47f]
class C_0000007941--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L46" target="_top" title="A [cppast::cpp_entity]() modelling a C++ template type parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L46" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ template type parameter." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007941" style="stroke: #A80036; stroke-width: 1.5;" width="1229" x="1947" y="2032.34"/><ellipse cx="2462.25" cy="2048.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2465.2188,2053.9806 Q2464.6406,2054.2775 2464,2054.4181 Q2463.3594,2054.5744 2462.6563,2054.5744 Q2460.1563,2054.5744 2458.8281,2052.9338 Q2457.5156,2051.2775 2457.5156,2048.1525 Q2457.5156,2045.0275 2458.8281,2043.3713 Q2460.1563,2041.715 2462.6563,2041.715 Q2463.3594,2041.715 2464,2041.8713 Q2464.6563,2042.0275 2465.2188,2042.3244 L2465.2188,2045.0431 Q2464.5938,2044.465 2464,2044.1994 Q2463.4063,2043.9181 2462.7813,2043.9181 Q2461.4375,2043.9181 2460.75,2044.9963 Q2460.0625,2046.0588 2460.0625,2048.1525 Q2460.0625,2050.2463 2460.75,2051.3244 Q2461.4375,2052.3869 2462.7813,2052.3869 Q2463.4063,2052.3869 2464,2052.1213 Q2464.5938,2051.84 2465.2188,2051.2619 L2465.2188,2053.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="190" x="2482.75" y="2052.4943">cpp_template_type_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1948" x2="3175" y1="2064.34" y2="2064.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1948" x2="3175" y1="2072.34" y2="2072.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1953" y="2078.34"/><ellipse cx="1958" cy="2083.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1967" y="2086.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53" target="_top" title="\returns A newly created and registered template type parameter. &#10;otes The `default_type` may be `nullptr` in which case the parameter has no default." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53" xlink:show="new" xlink:title="\returns A newly created and registered template type parameter. &#10;otes The `default_type` may be `nullptr` in which case the parameter has no default." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1953" y="2091.1447"/><ellipse cx="1958" cy="2096.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53" target="_top" title="\returns A newly created and registered template type parameter. &#10;otes The `default_type` may be `nullptr` in which case the parameter has no default." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53" xlink:show="new" xlink:title="\returns A newly created and registered template type parameter. &#10;otes The `default_type` may be `nullptr` in which case the parameter has no default." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1203" x="1967" y="2099.3551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, cpp_template_keyword kw, bool variadic, std::unique_ptr&lt;cpp_type&gt; default_type = nullptr) : std::unique_ptr&lt;cpp_template_type_parameter&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58" target="_top" title="\returns A [ts::optional_ref]() to the default type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the default type." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1953" y="2103.9494"/><ellipse cx="1958" cy="2108.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58" target="_top" title="\returns A [ts::optional_ref]() to the default type." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58" xlink:show="new" xlink:title="\returns A [ts::optional_ref]() to the default type." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="1967" y="2112.1598">default_type() const : type_safe::optional_ref&lt;cpp_type const&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64" target="_top" title="\returns The keyword used in the template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64" xlink:show="new" xlink:title="\returns The keyword used in the template parameter." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1953" y="2116.7541"/><ellipse cx="1958" cy="2121.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64" target="_top" title="\returns The keyword used in the template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64" xlink:show="new" xlink:title="\returns The keyword used in the template parameter." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="1967" y="2124.9645">keyword() const : cpp_template_keyword</text></a><!--MD5=[a331c09e4bde6e23135e706da31a663d]
class C_0000007980--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L128" target="_top" title="A [cppast::cpp_entity]() modelling a C++ non-type template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L128" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ non-type template parameter." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000007980" style="stroke: #A80036; stroke-width: 1.5;" width="1351" x="1886" y="1053.84"/><ellipse cx="2447.25" cy="1069.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2450.2188,1075.4806 Q2449.6406,1075.7775 2449,1075.9181 Q2448.3594,1076.0744 2447.6563,1076.0744 Q2445.1563,1076.0744 2443.8281,1074.4338 Q2442.5156,1072.7775 2442.5156,1069.6525 Q2442.5156,1066.5275 2443.8281,1064.8713 Q2445.1563,1063.215 2447.6563,1063.215 Q2448.3594,1063.215 2449,1063.3713 Q2449.6563,1063.5275 2450.2188,1063.8244 L2450.2188,1066.5431 Q2449.5938,1065.965 2449,1065.6994 Q2448.4063,1065.4181 2447.7813,1065.4181 Q2446.4375,1065.4181 2445.75,1066.4963 Q2445.0625,1067.5588 2445.0625,1069.6525 Q2445.0625,1071.7463 2445.75,1072.8244 Q2446.4375,1073.8869 2447.7813,1073.8869 Q2448.4063,1073.8869 2449,1073.6213 Q2449.5938,1073.34 2450.2188,1072.7619 L2450.2188,1075.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="220" x="2467.75" y="1073.9943">cpp_non_type_template_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1887" x2="3236" y1="1085.84" y2="1085.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1887" x2="3236" y1="1093.84" y2="1093.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1892" y="1099.84"/><ellipse cx="1897" cy="1104.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="1906" y="1108.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136" target="_top" title="\returns A newly created and registered non type template parameter. &#10;otes The `default_value` may be `nullptr` in which case the parameter has no default." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136" xlink:show="new" xlink:title="\returns A newly created and registered non type template parameter. &#10;otes The `default_value` may be `nullptr` in which case the parameter has no default." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1892" y="1112.6447"/><ellipse cx="1897" cy="1117.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136" target="_top" title="\returns A newly created and registered non type template parameter. &#10;otes The `default_value` may be `nullptr` in which case the parameter has no default." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136" xlink:show="new" xlink:title="\returns A newly created and registered non type template parameter. &#10;otes The `default_value` may be `nullptr` in which case the parameter has no default." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1325" x="1906" y="1120.8551">build(cpp_entity_index const&amp; idx, cpp_entity_id id, std::string name, std::unique_ptr&lt;cpp_type&gt; type, bool is_variadic, std::unique_ptr&lt;cpp_expression&gt; default_value = nullptr) : std::unique_ptr&lt;cpp_non_type_template_parameter&gt;</text></a><!--MD5=[bb183c3fe01d17f151f1cae1f83ba03d]
class C_0000007997--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L164" target="_top" title="A [cppast::cpp_entity]() modelling a C++ template template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L164" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ template template parameter." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000007997" style="stroke: #A80036; stroke-width: 1.5;" width="479" x="2322" y="2166.34"/><ellipse cx="2447.75" cy="2182.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2450.7188,2187.9806 Q2450.1406,2188.2775 2449.5,2188.4181 Q2448.8594,2188.5744 2448.1563,2188.5744 Q2445.6563,2188.5744 2444.3281,2186.9338 Q2443.0156,2185.2775 2443.0156,2182.1525 Q2443.0156,2179.0275 2444.3281,2177.3713 Q2445.6563,2175.715 2448.1563,2175.715 Q2448.8594,2175.715 2449.5,2175.8713 Q2450.1563,2176.0275 2450.7188,2176.3244 L2450.7188,2179.0431 Q2450.0938,2178.465 2449.5,2178.1994 Q2448.9063,2177.9181 2448.2813,2177.9181 Q2446.9375,2177.9181 2446.25,2178.9963 Q2445.5625,2180.0588 2445.5625,2182.1525 Q2445.5625,2184.2463 2446.25,2185.3244 Q2446.9375,2186.3869 2448.2813,2186.3869 Q2448.9063,2186.3869 2449.5,2186.1213 Q2450.0938,2185.84 2450.7188,2185.2619 L2450.7188,2187.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="219" x="2468.25" y="2186.4943">cpp_template_template_parameter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2323" x2="2800" y1="2198.34" y2="2198.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2323" x2="2800" y1="2206.34" y2="2206.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2328" y="2212.34"/><ellipse cx="2333" cy="2217.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2342" y="2220.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213" target="_top" title="\returns An iteratable object containing the template parameters of the template template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213" xlink:show="new" xlink:title="\returns An iteratable object containing the template parameters of the template template parameter." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2328" y="2225.1447"/><ellipse cx="2333" cy="2230.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213" target="_top" title="\returns An iteratable object containing the template parameters of the template template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213" xlink:show="new" xlink:title="\returns An iteratable object containing the template parameters of the template template parameter." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="2342" y="2233.3551">parameters() const : detail::iteratable_intrusive_list&lt;cpp_template_parameter&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219" target="_top" title="\returns The keyword used in the template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219" xlink:show="new" xlink:title="\returns The keyword used in the template parameter." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2328" y="2237.9494"/><ellipse cx="2333" cy="2242.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219" target="_top" title="\returns The keyword used in the template parameter." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219" xlink:show="new" xlink:title="\returns The keyword used in the template parameter." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="2342" y="2246.1598">keyword() const : cpp_template_keyword</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225" target="_top" title="\returns A [ts::optional]() that is the default template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225" xlink:show="new" xlink:title="\returns A [ts::optional]() that is the default template." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2328" y="2250.7541"/><ellipse cx="2333" cy="2255.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225" target="_top" title="\returns A [ts::optional]() that is the default template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225" xlink:show="new" xlink:title="\returns A [ts::optional]() that is the default template." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="2342" y="2258.9645">default_template() const : type_safe::optional&lt;cpp_template_ref&gt;</text></a><!--MD5=[2b0d23eba436c0c3d3c333a18de0bf50]
class C_0000008062--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L63" target="_top" title="Base classes for all regular member function. The two derived classes are [cppast::cpp_member_function]() and [cppast::cpp_conversion_op]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L63" xlink:show="new" xlink:title="Base classes for all regular member function. The two derived classes are [cppast::cpp_member_function]() and [cppast::cpp_conversion_op]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="137.6328" id="C_0000008062" style="stroke: #A80036; stroke-width: 1.5;" width="249" x="2437" y="2447.84"/><ellipse cx="2471.35" cy="2463.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2474.3188,2469.4806 Q2473.7406,2469.7775 2473.1,2469.9181 Q2472.4594,2470.0744 2471.7563,2470.0744 Q2469.2563,2470.0744 2467.9281,2468.4338 Q2466.6156,2466.7775 2466.6156,2463.6525 Q2466.6156,2460.5275 2467.9281,2458.8713 Q2469.2563,2457.215 2471.7563,2457.215 Q2472.4594,2457.215 2473.1,2457.3713 Q2473.7563,2457.5275 2474.3188,2457.8244 L2474.3188,2460.5431 Q2473.6938,2459.965 2473.1,2459.6994 Q2472.5063,2459.4181 2471.8813,2459.4181 Q2470.5375,2459.4181 2469.85,2460.4963 Q2469.1625,2461.5588 2469.1625,2463.6525 Q2469.1625,2465.7463 2469.85,2466.8244 Q2470.5375,2467.8869 2471.8813,2467.8869 Q2472.5063,2467.8869 2473.1,2467.6213 Q2473.6938,2467.34 2474.3188,2466.7619 L2474.3188,2469.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="2489.65" y="2467.9943">cpp_member_function_base</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2438" x2="2685" y1="2479.84" y2="2479.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2438" x2="2685" y1="2487.84" y2="2487.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67" target="_top" title="\returns The return type of the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67" xlink:show="new" xlink:title="\returns The return type of the member function." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2493.84"/><ellipse cx="2448" cy="2498.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67" target="_top" title="\returns The return type of the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67" xlink:show="new" xlink:title="\returns The return type of the member function." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2457" y="2502.0504">return_type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73" target="_top" title="\returns Whether or not it is `virtual`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73" xlink:show="new" xlink:title="\returns Whether or not it is `virtual`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2506.6447"/><ellipse cx="2448" cy="2511.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73" target="_top" title="\returns Whether or not it is `virtual`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73" xlink:show="new" xlink:title="\returns Whether or not it is `virtual`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2457" y="2514.8551">is_virtual() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79" target="_top" title="\returns The `virtual`-ness of the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79" xlink:show="new" xlink:title="\returns The `virtual`-ness of the member function." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2519.4494"/><ellipse cx="2448" cy="2524.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79" target="_top" title="\returns The `virtual`-ness of the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79" xlink:show="new" xlink:title="\returns The `virtual`-ness of the member function." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2457" y="2527.6598">virtual_info() const : cpp_virtual const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85" target="_top" title="\returns The cv-qualifier on the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85" xlink:show="new" xlink:title="\returns The cv-qualifier on the member function." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2532.2541"/><ellipse cx="2448" cy="2537.2541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85" target="_top" title="\returns The cv-qualifier on the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85" xlink:show="new" xlink:title="\returns The cv-qualifier on the member function." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2457" y="2540.4645">cv_qualifier() const : cpp_cv</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91" target="_top" title="\returns The ref-qualifier on the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91" xlink:show="new" xlink:title="\returns The ref-qualifier on the member function." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2545.0588"/><ellipse cx="2448" cy="2550.0588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91" target="_top" title="\returns The ref-qualifier on the member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91" xlink:show="new" xlink:title="\returns The ref-qualifier on the member function." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2457" y="2553.2692">ref_qualifier() const : cpp_reference</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97" target="_top" title="\returns Whether or not the member function is `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97" xlink:show="new" xlink:title="\returns Whether or not the member function is `constexpr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2557.8634"/><ellipse cx="2448" cy="2562.8634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97" target="_top" title="\returns Whether or not the member function is `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97" xlink:show="new" xlink:title="\returns Whether or not the member function is `constexpr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2457" y="2566.0739">is_constexpr() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103" target="_top" title="\returns Whether or not the member function is `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103" xlink:show="new" xlink:title="\returns Whether or not the member function is `consteval`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2443" y="2570.6681"/><ellipse cx="2448" cy="2575.6681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103" target="_top" title="\returns Whether or not the member function is `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103" xlink:show="new" xlink:title="\returns Whether or not the member function is `consteval`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2457" y="2578.8786">is_consteval() const : bool</text></a><!--MD5=[2f6fca9b0a600297ca0b39a183c40819]
class C_0000008096--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L169" target="_top" title="A [cppast::cpp_entity]() modelling a member function." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L169" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a member function." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="60.8047" id="C_0000008096" style="stroke: #A80036; stroke-width: 1.5;" width="169" x="3350.5" y="2435.34"/><ellipse cx="3365.5" cy="2451.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3368.4688,2456.9806 Q3367.8906,2457.2775 3367.25,2457.4181 Q3366.6094,2457.5744 3365.9063,2457.5744 Q3363.4063,2457.5744 3362.0781,2455.9338 Q3360.7656,2454.2775 3360.7656,2451.1525 Q3360.7656,2448.0275 3362.0781,2446.3713 Q3363.4063,2444.715 3365.9063,2444.715 Q3366.6094,2444.715 3367.25,2444.8713 Q3367.9063,2445.0275 3368.4688,2445.3244 L3368.4688,2448.0431 Q3367.8438,2447.465 3367.25,2447.1994 Q3366.6563,2446.9181 3366.0313,2446.9181 Q3364.6875,2446.9181 3364,2447.9963 Q3363.3125,2449.0588 3363.3125,2451.1525 Q3363.3125,2453.2463 3364,2454.3244 Q3364.6875,2455.3869 3366.0313,2455.3869 Q3366.6563,2455.3869 3367.25,2455.1213 Q3367.8438,2454.84 3368.4688,2454.2619 L3368.4688,2456.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="3379.5" y="2455.4943">cpp_member_function</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3351.5" x2="3518.5" y1="2467.34" y2="2467.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3351.5" x2="3518.5" y1="2475.34" y2="2475.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3356.5" y="2481.34"/><ellipse cx="3361.5" cy="2486.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="3370.5" y="2489.5504">kind() : cpp_entity_kind</text></a><!--MD5=[e8dfb24ee6147af1ef5fc65ef8f88bfa]
class C_0000008104--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L191" target="_top" title="A [cppast::cpp_entity]() modelling a C++ conversion operator." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L191" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ conversion operator." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000008104" style="stroke: #A80036; stroke-width: 1.5;" width="160" x="3355" y="2531.84"/><ellipse cx="3374.05" cy="2547.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3377.0188,2553.4806 Q3376.4406,2553.7775 3375.8,2553.9181 Q3375.1594,2554.0744 3374.4563,2554.0744 Q3371.9563,2554.0744 3370.6281,2552.4338 Q3369.3156,2550.7775 3369.3156,2547.6525 Q3369.3156,2544.5275 3370.6281,2542.8713 Q3371.9563,2541.215 3374.4563,2541.215 Q3375.1594,2541.215 3375.8,2541.3713 Q3376.4563,2541.5275 3377.0188,2541.8244 L3377.0188,2544.5431 Q3376.3938,2543.965 3375.8,2543.6994 Q3375.2063,2543.4181 3374.5813,2543.4181 Q3373.2375,2543.4181 3372.55,2544.4963 Q3371.8625,2545.5588 3371.8625,2547.6525 Q3371.8625,2549.7463 3372.55,2550.8244 Q3373.2375,2551.8869 3374.5813,2551.8869 Q3375.2063,2551.8869 3375.8,2551.6213 Q3376.3938,2551.34 3377.0188,2550.7619 L3377.0188,2553.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="119" x="3388.95" y="2551.9943">cpp_conversion_op</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3356" x2="3514" y1="2563.84" y2="2563.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3356" x2="3514" y1="2571.84" y2="2571.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3361" y="2577.84"/><ellipse cx="3366" cy="2582.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="3375" y="2586.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214" target="_top" title="\returns Whether or not the conversion is `explicit`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214" xlink:show="new" xlink:title="\returns Whether or not the conversion is `explicit`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3361" y="2590.6447"/><ellipse cx="3366" cy="2595.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214" target="_top" title="\returns Whether or not the conversion is `explicit`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214" xlink:show="new" xlink:title="\returns Whether or not the conversion is `explicit`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3375" y="2598.8551">is_explicit() const : bool</text></a><!--MD5=[3dc08b997add0700965a14dfc210fb55]
class C_0000008114--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L232" target="_top" title="A [cppast::cpp_entity]() modelling a C++ constructor." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L232" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ constructor." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="99.2188" id="C_0000008114" style="stroke: #A80036; stroke-width: 1.5;" width="177" x="2473" y="2621.34"/><ellipse cx="2507.35" cy="2637.34" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2510.3188,2642.9806 Q2509.7406,2643.2775 2509.1,2643.4181 Q2508.4594,2643.5744 2507.7563,2643.5744 Q2505.2563,2643.5744 2503.9281,2641.9338 Q2502.6156,2640.2775 2502.6156,2637.1525 Q2502.6156,2634.0275 2503.9281,2632.3713 Q2505.2563,2630.715 2507.7563,2630.715 Q2508.4594,2630.715 2509.1,2630.8713 Q2509.7563,2631.0275 2510.3188,2631.3244 L2510.3188,2634.0431 Q2509.6938,2633.465 2509.1,2633.1994 Q2508.5063,2632.9181 2507.8813,2632.9181 Q2506.5375,2632.9181 2505.85,2633.9963 Q2505.1625,2635.0588 2505.1625,2637.1525 Q2505.1625,2639.2463 2505.85,2640.3244 Q2506.5375,2641.3869 2507.8813,2641.3869 Q2508.5063,2641.3869 2509.1,2641.1213 Q2509.6938,2640.84 2510.3188,2640.2619 L2510.3188,2642.9806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="102" x="2525.65" y="2641.4943">cpp_constructor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2474" x2="2649" y1="2653.34" y2="2653.34"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2474" x2="2649" y1="2661.34" y2="2661.34"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2479" y="2667.34"/><ellipse cx="2484" cy="2672.34" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2493" y="2675.5504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263" target="_top" title="\returns Whether or not the constructor is `explicit`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263" xlink:show="new" xlink:title="\returns Whether or not the constructor is `explicit`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2479" y="2680.1447"/><ellipse cx="2484" cy="2685.1447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263" target="_top" title="\returns Whether or not the constructor is `explicit`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263" xlink:show="new" xlink:title="\returns Whether or not the constructor is `explicit`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="2493" y="2688.3551">is_explicit() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269" target="_top" title="\returns Whether or not the constructor is `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269" xlink:show="new" xlink:title="\returns Whether or not the constructor is `constexpr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2479" y="2692.9494"/><ellipse cx="2484" cy="2697.9494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269" target="_top" title="\returns Whether or not the constructor is `constexpr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269" xlink:show="new" xlink:title="\returns Whether or not the constructor is `constexpr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2493" y="2701.1598">is_constexpr() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275" target="_top" title="\returns Whether or not the constructor is `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275" xlink:show="new" xlink:title="\returns Whether or not the constructor is `consteval`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2479" y="2705.7541"/><ellipse cx="2484" cy="2710.7541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275" target="_top" title="\returns Whether or not the constructor is `consteval`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275" xlink:show="new" xlink:title="\returns Whether or not the constructor is `consteval`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2493" y="2713.9645">is_consteval() const : bool</text></a><!--MD5=[eda1dc00cdbab42a1616c38345bfe20c]
class C_0000008122--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L295" target="_top" title="A [cppast::cpp_entity]() modelling a C++ destructor." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L295" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ destructor." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="86.4141" id="C_0000008122" style="stroke: #A80036; stroke-width: 1.5;" width="204" x="2459.5" y="2755.84"/><ellipse cx="2509.75" cy="2771.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2512.7188,2777.4806 Q2512.1406,2777.7775 2511.5,2777.9181 Q2510.8594,2778.0744 2510.1563,2778.0744 Q2507.6563,2778.0744 2506.3281,2776.4338 Q2505.0156,2774.7775 2505.0156,2771.6525 Q2505.0156,2768.5275 2506.3281,2766.8713 Q2507.6563,2765.215 2510.1563,2765.215 Q2510.8594,2765.215 2511.5,2765.3713 Q2512.1563,2765.5275 2512.7188,2765.8244 L2512.7188,2768.5431 Q2512.0938,2767.965 2511.5,2767.6994 Q2510.9063,2767.4181 2510.2813,2767.4181 Q2508.9375,2767.4181 2508.25,2768.4963 Q2507.5625,2769.5588 2507.5625,2771.6525 Q2507.5625,2773.7463 2508.25,2774.8244 Q2508.9375,2775.8869 2510.2813,2775.8869 Q2510.9063,2775.8869 2511.5,2775.6213 Q2512.0938,2775.34 2512.7188,2774.7619 L2512.7188,2777.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="95" x="2530.25" y="2775.9943">cpp_destructor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2460.5" x2="2662.5" y1="2787.84" y2="2787.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2460.5" x2="2662.5" y1="2795.84" y2="2795.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2465.5" y="2801.84"/><ellipse cx="2470.5" cy="2806.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2479.5" y="2810.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318" target="_top" title="\returns Whether or not it is `virtual`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318" xlink:show="new" xlink:title="\returns Whether or not it is `virtual`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2465.5" y="2814.6447"/><ellipse cx="2470.5" cy="2819.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318" target="_top" title="\returns Whether or not it is `virtual`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318" xlink:show="new" xlink:title="\returns Whether or not it is `virtual`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2479.5" y="2822.8551">is_virtual() const : bool</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324" target="_top" title="\returns The `virtual`-ness of the constructor." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324" xlink:show="new" xlink:title="\returns The `virtual`-ness of the constructor." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2465.5" y="2827.4494"/><ellipse cx="2470.5" cy="2832.4494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324" target="_top" title="\returns The `virtual`-ness of the constructor." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324" xlink:show="new" xlink:title="\returns The `virtual`-ness of the constructor." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2479.5" y="2835.6598">virtual_info() const : cpp_virtual</text></a><!--MD5=[d3ee2ac83f0d7b08cbfa2bed7faca3e4]
class C_0000008272--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L13" target="_top" title="A [cppast::cpp_entity]() modelling a C++ alias template." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L13" xlink:show="new" xlink:title="A [cppast::cpp_entity]() modelling a C++ alias template." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fx0o816tvee5d)" height="73.6094" id="C_0000008272" style="stroke: #A80036; stroke-width: 1.5;" width="242" x="2440.5" y="3132.84"/><ellipse cx="2487.25" cy="3148.84" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2490.2188,3154.4806 Q2489.6406,3154.7775 2489,3154.9181 Q2488.3594,3155.0744 2487.6563,3155.0744 Q2485.1563,3155.0744 2483.8281,3153.4338 Q2482.5156,3151.7775 2482.5156,3148.6525 Q2482.5156,3145.5275 2483.8281,3143.8713 Q2485.1563,3142.215 2487.6563,3142.215 Q2488.3594,3142.215 2489,3142.3713 Q2489.6563,3142.5275 2490.2188,3142.8244 L2490.2188,3145.5431 Q2489.5938,3144.965 2489,3144.6994 Q2488.4063,3144.4181 2487.7813,3144.4181 Q2486.4375,3144.4181 2485.75,3145.4963 Q2485.0625,3146.5588 2485.0625,3148.6525 Q2485.0625,3150.7463 2485.75,3151.8244 Q2486.4375,3152.8869 2487.7813,3152.8869 Q2488.4063,3152.8869 2489,3152.6213 Q2489.5938,3152.34 2490.2188,3151.7619 L2490.2188,3154.4806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="140" x="2507.75" y="3152.9943">cpp_variable_template</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2441.5" x2="2681.5" y1="3164.84" y2="3164.84"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2441.5" x2="2681.5" y1="3172.84" y2="3172.84"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2446.5" y="3178.84"/><ellipse cx="2451.5" cy="3183.84" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16" target="_top" title="kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16" xlink:show="new" xlink:title="kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="129" x="2460.5" y="3187.0504">kind() : cpp_entity_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26" target="_top" title="\returns A reference to the type variable that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the type variable that is being templated." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2446.5" y="3191.6447"/><ellipse cx="2451.5" cy="3196.6447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26" target="_top" title="\returns A reference to the type variable that is being templated." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26" xlink:show="new" xlink:title="\returns A reference to the type variable that is being templated." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="2460.5" y="3199.8551">variable() const : cpp_variable const&amp;</text></a><!--MD5=[6d32298ac20cac4b4ed1008b3e45f035]
reverse link C_0000007892 to C_0000006252--><path d="M434.24,1665.29 C578.38,1655.45 768.95,1642.45 918.49,1632.24 " fill="none" id="C_0000007892&lt;-C_0000006252" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="434.65,1672.27,414.22,1666.65,433.69,1658.31,434.65,1672.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[44301ecdc77752464f3386bb02423453]
reverse link C_0000007430 to C_0000006313--><path d="M1335.65,3008.77 C1480.11,2991.44 1683.89,2991.15 1826,3090.84 C1879.42,3128.31 1832.7,3187.19 1886,3224.84 C2054.41,3343.76 2308.91,3325.01 2452.32,3301.45 " fill="none" id="C_0000007430&lt;-C_0000006313" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1336.4,3015.74,1315.68,3011.33,1334.63,3001.85,1336.4,3015.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[223f74e4d556249d1ad0f6c446391900]
reverse link C_0000007484 to C_0000006323--><path d="M2805.65,3026.77 C2970.6,3016.55 3181.63,3003.47 3312.3,2995.38 " fill="none" id="C_0000007484&lt;-C_0000006323" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2805.91,3033.77,2785.52,3028.02,2805.05,3019.79,2805.91,3033.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0f288cc81f2d1a3c4cafdd4209df0298]
reverse link C_0000007892 to C_0000006381--><path d="M434.25,1694.39 C589.05,1704.95 797.4,1719.16 950.97,1729.64 " fill="none" id="C_0000007892&lt;-C_0000006381" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="433.69,1701.36,414.22,1693.02,434.65,1687.4,433.69,1701.36" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e5fb1467e19aa9fc827ee69c0065cf78]
reverse link C_0000007430 to C_0000006404--><path d="M1307.02,3007.72 C1455.33,2982.32 1682.97,2970.09 1826,3090.84 C1911,3162.6 1801.23,3261.8 1886,3333.84 C2035.95,3461.25 2278.43,3445.05 2428.17,3418.62 " fill="none" id="C_0000007430&lt;-C_0000006404" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1308.01,3014.66,1287.09,3011.3,1305.54,3000.88,1308.01,3014.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d8ae2402053b1fa2d1e018b93b106e43]
reverse link C_0000007430 to C_0000006423--><path d="M1419.8,3034.39 C1543.62,3027.38 1693.43,3013.86 1826,2987.84 C1853.45,2982.45 1858.55,2974.23 1886,2968.84 C2069.74,2932.73 2286.12,2920.27 2423.29,2916 " fill="none" id="C_0000007430&lt;-C_0000006423" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1420.12,3041.38,1399.77,3035.48,1419.36,3027.4,1420.12,3041.38" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[641def28ac45743a0ba17a1012bad2ba]
reverse link C_0000007484 to C_0000006433--><path d="M2805.63,3057.18 C2964.24,3067.19 3165.49,3079.89 3296.9,3088.18 " fill="none" id="C_0000007484&lt;-C_0000006433" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2805.04,3064.16,2785.52,3055.91,2805.92,3050.18,2805.04,3064.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2fe8aff8db1c30e70b0759650270493a]
reverse link C_0000007892 to C_0000006604--><path d="M432.81,1795.52 C453.11,1803.73 473.7,1811.04 494,1816.84 C632.65,1856.45 793.54,1871.97 922.34,1877.46 " fill="none" id="C_0000007892&lt;-C_0000006604" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="430.01,1801.93,414.27,1787.74,435.43,1789.02,430.01,1801.93" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1a0b7a2e450c96b83ef1c625560d8c8d]
reverse link C_0000007892 to C_0000006615--><path d="M330.67,1814.84 C376.13,1861.6 432.6,1909.38 494,1937.84 C569.09,1972.64 653.9,1993.8 737.19,2006.22 " fill="none" id="C_0000007892&lt;-C_0000006615" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="325.32,1819.37,316.61,1800.06,335.46,1809.73,325.32,1819.37" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e4f9641bcb5efa73dc187246f3ba4baf]
reverse link C_0000007892 to C_0000006644--><path d="M276.52,1818.19 C321.02,1909.94 392.84,2024.23 494,2084.84 C634.49,2169.01 822.18,2181.04 962.33,2174.9 " fill="none" id="C_0000007892&lt;-C_0000006644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="270.08,1820.94,267.85,1799.87,282.73,1814.95,270.08,1820.94" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f311fb105a1b7a6a5bf02018e03e498f]
reverse link C_0000007892 to C_0000006716--><path d="M251.37,1819.45 C286.79,1946.15 358.62,2126.91 494,2219.84 C600.07,2292.64 739,2314.95 862.43,2316.85 " fill="none" id="C_0000007892&lt;-C_0000006716" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="244.57,1821.13,246.09,1800,258.08,1817.47,244.57,1821.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8d5e68ce6930a21fe9b3132494bec799]
reverse link C_0000007892 to C_0000006844--><path d="M233.18,1539.57 C260.8,1257 338.22,634.58 494,498.84 C606.19,401.07 773.09,386.27 911.61,395.81 " fill="none" id="C_0000007892&lt;-C_0000006844" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="240.12,1540.49,231.24,1559.72,226.19,1539.14,240.12,1540.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b21c57a5a8235202e6a0a559274f7fc7]
reverse link C_0000006800 to C_0000006844--><path d="M302.15,297.61 C355.03,325.79 426.51,359.63 494,377.84 C525.62,386.36 558.36,393.75 591.59,400.15 " fill="none" id="C_0000006800&lt;-C_0000006844" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="298.51,303.6,284.26,287.92,305.18,291.29,298.51,303.6" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d7df53aca986cb5758bbf8aedd9ab9fb]
reverse link C_0000007892 to C_0000006868--><path d="M227.68,1820.27 C244.27,1997.28 301.08,2296.85 494,2449.84 C613.01,2544.21 783.92,2561.48 922.68,2555.8 " fill="none" id="C_0000007892&lt;-C_0000006868" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="220.69,1820.64,225.92,1800.11,234.63,1819.42,220.69,1820.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[87d388f53618f85c433972d5cc1569ea]
reverse link C_0000006868 to C_0000006910--><path d="M1417.38,2508 C1541.75,2497.11 1692.73,2479.12 1826,2449.84 C1853.45,2443.8 1858.54,2435.83 1886,2429.84 C2058.04,2392.31 2259.17,2373.71 2396.75,2364.74 " fill="none" id="C_0000006868&lt;-C_0000006910" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1417.78,2514.99,1397.25,2509.72,1416.59,2501.05,1417.78,2514.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[06406a99112a5b869086bd641788f93b]
reverse link C_0000007892 to C_0000007116--><path d="M243.38,1820.1 C283.31,2051.47 374.02,2497.48 494,2596.84 C567.41,2657.63 662.15,2686.41 756.99,2697.47 " fill="none" id="C_0000007892&lt;-C_0000007116" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="236.43,1820.99,239.96,1800.1,250.23,1818.63,236.43,1820.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[51e3d108856463ecacaa42e47981378a]
reverse link C_0000007892 to C_0000007165--><path d="M237.5,1820.16 C270.96,2078.61 355.58,2614.25 494,2731.84 C552.87,2781.84 626.14,2809.95 702.33,2824.18 " fill="none" id="C_0000007892&lt;-C_0000007165" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="230.54,1820.89,234.95,1800.16,244.43,1819.11,230.54,1820.89" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9be4156a54e691a80863d9f531e4e9dc]
reverse link C_0000007892 to C_0000007183--><path d="M233.56,1820.06 C261.79,2100.95 340.12,2717.32 494,2852.84 C639.78,2981.21 879.2,2970.79 1027.5,2948.19 " fill="none" id="C_0000007892&lt;-C_0000007183" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="226.58,1820.61,231.58,1800.02,240.51,1819.23,226.58,1820.61" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b0efe8fcacef9870bdf72aeebfe30092]
reverse link C_0000007892 to C_0000007430--><path d="M229.66,1820.29 C251.59,2125.61 320.46,2834.7 494,2987.84 C555.99,3042.54 755.62,3053.02 920.11,3051.6 " fill="none" id="C_0000007892&lt;-C_0000007430" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="222.64,1820.34,228.22,1799.9,236.61,1819.35,222.64,1820.34" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7de10a85186f8d315a9896c201504191]
reverse link C_0000007430 to C_0000007484--><path d="M1419.9,3041.84 C1683.39,3041.84 2087.6,3041.84 2337.38,3041.84 " fill="none" id="C_0000007430&lt;-C_0000007484" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1419.6,3048.83,1399.6,3041.84,1419.6,3034.83,1419.6,3048.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7803567ea602d5a5ef0398b40ef4e78b]
reverse link C_0000007892 to C_0000007515--><path d="M227.34,1820.11 C245.05,2142.58 306.7,2921.87 494,3089.84 C654.96,3234.18 934.65,3197.3 1074.42,3166.71 " fill="none" id="C_0000007892&lt;-C_0000007515" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="220.35,1820.35,226.26,1800,234.33,1819.6,220.35,1820.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[eed1ec31ec90813ca1f298d89524f5dc]
reverse link C_0000007892 to C_0000007532--><path d="M236.63,1539.63 C268.95,1277.21 352.24,727.54 494,607.84 C627.86,494.81 835.67,496.49 983.33,516.79 " fill="none" id="C_0000007892&lt;-C_0000007532" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="243.57,1540.53,234.2,1559.54,229.67,1538.84,243.57,1540.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[af35d82d38d826eabea417f7cfbb6573]
reverse link C_0000007892 to C_0000007536--><path d="M244.61,1539.63 C285.83,1312.42 377.74,879.22 494,780.84 C593.86,696.33 734.19,669.44 860.22,665.87 " fill="none" id="C_0000007892&lt;-C_0000007536" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="251.44,1541.18,241.01,1559.63,237.66,1538.7,251.44,1541.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d7e004b85ec97dce8f200bed10f4ecd2]
reverse link C_0000007892 to C_0000007566--><path d="M229.14,1539.61 C247.31,1366.48 305.86,1076.82 494,928.84 C583.14,858.73 701,831.33 812.71,824.26 " fill="none" id="C_0000007892&lt;-C_0000007566" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="236.09,1540.4,227.16,1559.61,222.16,1539.02,236.09,1540.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0e24c6e4999e6d046a6e6b064e280c78]
reverse link C_0000007892 to C_0000007672--><path d="M227.83,1539.41 C246.7,1212.38 310.88,413.88 494,230.84 C560.57,164.29 650.61,127.16 742.92,107.54 " fill="none" id="C_0000007892&lt;-C_0000007672" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="234.79,1540.21,226.67,1559.79,220.82,1539.42,234.79,1540.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[43848d639c6f4be8666c6142de9bf508]
reverse link C_0000006800 to C_0000007672--><path d="M347.56,207.76 C393.23,193.69 445.49,179.28 494,169.84 C573.84,154.3 659.83,142.47 742.62,133.49 " fill="none" id="C_0000006800&lt;-C_0000007672" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="349.59,214.46,328.41,213.76,345.41,201.1,349.59,214.46" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f59f926465af509c3ca033f1501fee79]
reverse link C_0000007672 to C_0000007680--><path d="M1597.44,86.81 C1717.52,81.58 1849.72,75.82 1976.69,70.28 " fill="none" id="C_0000007672&lt;-C_0000007680" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1597.39,93.82,1577.11,87.7,1596.78,79.83,1597.39,93.82" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[cb95acdc63fc2dbf1a8dfafacf8d5913]
reverse link C_0000007672 to C_0000007692--><path d="M1597.1,124.84 C1742.96,131.2 1906.72,138.34 2057.27,144.9 " fill="none" id="C_0000007672&lt;-C_0000007692" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1596.78,131.84,1577.11,123.97,1597.39,117.85,1596.78,131.84" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8ce2392d6a50a5fb3bc99555cc305516]
reverse link C_0000007892 to C_0000007726--><path d="M241.54,1539.93 C270.75,1395.26 339.12,1175.13 494,1062.84 C664.62,939.13 927.87,957.23 1066.43,978.19 " fill="none" id="C_0000007892&lt;-C_0000007726" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="248.36,1541.53,237.67,1559.83,234.62,1538.86,248.36,1541.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[37c283b0c478483bf27ad8f788d5fc0a]
reverse link C_0000007892 to C_0000007747--><path d="M257.91,1540.41 C296.48,1424.35 369.22,1265.37 494,1183.84 C569.57,1134.45 660.7,1109.56 750.93,1098.83 " fill="none" id="C_0000007892&lt;-C_0000007747" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="264.47,1542.86,251.67,1559.74,251.15,1538.56,264.47,1542.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bf56379bd5662ac89e5d3141e5545f67]
reverse link C_0000007892 to C_0000007767--><path d="M283.89,1541.89 C329.66,1458.4 400.08,1358.08 494,1304.84 C628.37,1228.65 803.03,1215.52 939.63,1220.45 " fill="none" id="C_0000007892&lt;-C_0000007767" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="289.96,1545.37,274.35,1559.7,277.62,1538.76,289.96,1545.37" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d1434060733e6b3ab05d05daa4a82c33]
reverse link C_0000007892 to C_0000007783--><path d="M332.32,1545.31 C377.54,1499.86 433.43,1453.84 494,1426.84 C637.08,1363.04 814.39,1349.59 949.93,1351.12 " fill="none" id="C_0000007892&lt;-C_0000007783" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="337.29,1550.24,318.33,1559.7,327.26,1540.48,337.29,1550.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[117cc35b6485cc4810e6576b4ed200a8]
reverse link C_0000007892 to C_0000007825--><path d="M230.14,1539.53 C252.99,1235.86 323.49,532.51 494,377.84 C500.56,371.88 507.32,366.22 514.26,360.84 " fill="none" id="C_0000007892&lt;-C_0000007825" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="237.09,1540.39,228.64,1559.82,223.13,1539.36,237.09,1540.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[12f5850c1100b777139d3f7d03fb97ec]
reverse link C_0000006800 to C_0000007825--><path d="M454.21,264.26 C467.16,265.01 480.44,265.77 493.98,266.55 " fill="none" id="C_0000006800&lt;-C_0000007825" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="453.7,271.24,434.14,263.11,454.51,257.27,453.7,271.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f4dab2516b89fc9d6ae33179ad6eb009]
reverse link C_0000007892 to C_0000007918--><path d="M433.08,1579.91 C453.39,1572.63 473.9,1566.09 494,1560.84 C585.77,1536.84 686.75,1521.34 781.69,1511.35 " fill="none" id="C_0000007892&lt;-C_0000007918" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="435.29,1586.56,414.11,1586.96,430.42,1573.44,435.29,1586.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f665fc22a6e8f17caec2722783ee2ed2]
reverse link C_0000007892 to C_0000007933--><path d="M234.85,1820.08 C258.6,1978.1 322.61,2229.13 494,2353.84 C663.65,2477.27 926.42,2449.98 1065.41,2423.52 " fill="none" id="C_0000007892&lt;-C_0000007933" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="227.86,1820.65,231.95,1799.86,241.72,1818.66,227.86,1820.65" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[231cc0ff5853ae9f9ba8a11fd3156581]
reverse link C_0000007933 to C_0000007941--><path d="M1274.94,2408.7 C1442.39,2416.34 1744.02,2420 1826,2353.84 C1899.87,2294.21 1812.94,2209.45 1886,2148.84 C1905.02,2133.06 1925.46,2119.42 1946.95,2107.67 " fill="none" id="C_0000007933&lt;-C_0000007941" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1274.35,2415.68,1254.71,2407.73,1275.02,2401.7,1274.35,2415.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[104f660ad47022eca312b91cf8441cbc]
reverse link C_0000007933 to C_0000007980--><path d="M1274.62,2409.73 C1443.05,2418.85 1747.57,2424.57 1826,2353.84 C1939.63,2251.36 1826.01,2155.59 1886,2014.84 C2051.47,1626.58 2406.98,1246.22 2523.03,1128.17 " fill="none" id="C_0000007933&lt;-C_0000007980" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1274.1,2416.71,1254.53,2408.59,1274.89,2402.74,1274.1,2416.71" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[de5eef38e9c8ac1c8582a513369b1133]
reverse link C_0000006800 to C_0000007980--><path d="M454.39,223.7 C839.48,182.91 1588.97,121.56 1826,230.84 C2216.5,410.86 2476.41,912.24 2543.38,1053.42 " fill="none" id="C_0000006800&lt;-C_0000007980" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="454.99,230.67,434.36,225.83,453.5,216.75,454.99,230.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[56fd4546d67ae2026402925f474f406a]
reverse link C_0000007933 to C_0000007997--><path d="M1274.7,2419.25 C1413.05,2434.88 1649.92,2443.41 1826,2353.84 C1862.82,2335.1 1849.43,2302.06 1886,2282.84 C2018.8,2213.01 2186.63,2196.11 2321.65,2196.75 " fill="none" id="C_0000007933&lt;-C_0000007997" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1273.64,2426.17,1254.61,2416.85,1275.3,2412.27,1273.64,2426.17" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[08b14940bd38b4ed60dc49d04bcaccd6]
reverse link C_0000006868 to C_0000008062--><path d="M1417.29,2522.55 C1719.35,2521.04 2208.92,2518.59 2436.66,2517.45 " fill="none" id="C_0000006868&lt;-C_0000008062" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1417.25,2529.55,1397.22,2522.65,1417.18,2515.55,1417.25,2529.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c96eaf6b16389fdae180534e939b4a94]
reverse link C_0000008062 to C_0000008096--><path d="M2706.54,2508.41 C2890.25,2497.66 3201.88,2479.42 3350.43,2470.73 " fill="none" id="C_0000008062&lt;-C_0000008096" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2706.81,2515.4,2686.44,2509.58,2706,2501.43,2706.81,2515.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[54306bb7cacbf86bc7ab27e8dfc38395]
reverse link C_0000008062 to C_0000008104--><path d="M2706.46,2525.43 C2892.02,2536.5 3208.19,2555.36 3354.9,2564.12 " fill="none" id="C_0000008062&lt;-C_0000008104" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2705.99,2532.41,2686.44,2524.23,2706.82,2518.43,2705.99,2532.41" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[286904a95ea10a34dd689466cbc4a8bc]
reverse link C_0000006868 to C_0000008114--><path d="M1417.46,2552.29 C1556.15,2567.55 1730.42,2586.52 1886,2602.84 C2096.55,2624.92 2344.22,2649.54 2472.9,2662.23 " fill="none" id="C_0000006868&lt;-C_0000008114" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1416.38,2559.21,1397.27,2550.07,1417.91,2545.3,1416.38,2559.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[65f6cd47c59773190471ffb8f6b1688d]
reverse link C_0000006868 to C_0000008122--><path d="M1417.56,2494.1 C1551.28,2492.03 1710.54,2512.16 1826,2597.84 C1880.36,2638.17 1831.22,2698.06 1886,2737.84 C2055.95,2861.24 2317.12,2842.13 2459.47,2819.31 " fill="none" id="C_0000006868&lt;-C_0000008122" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1417.34,2501.1,1397.18,2494.58,1417,2487.11,1417.34,2501.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[eb1211e9e26d442bd6bf0a936ed5347e]
reverse link C_0000007430 to C_0000008272--><path d="M1419.77,3041.69 C1544.05,3046.47 1694.26,3059.41 1826,3090.84 C1854.1,3097.54 1857.92,3109.04 1886,3115.84 C2075.97,3161.79 2303.91,3170.82 2440.22,3171.51 " fill="none" id="C_0000007430&lt;-C_0000008272" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1419.39,3048.68,1399.65,3040.98,1419.89,3034.69,1419.39,3048.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[43d46416dfab8a19a5bdc342e696e202]
@startuml
left to right direction
class "cpp_file" as C_0000006252
class C_0000006252 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L27{A [cppast::cpp_entity]() modelling a file. This is the top-level entity of the AST.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L30{kind}]]]
+unmatched_comments() const : type_safe::array_ref<cpp_doc_comment const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_file.hpp#L71{\returns The unmatched documentation comments.}]]]
}
class "cpp_class_template" as C_0000006313
class C_0000006313 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L13{A [cppast::cpp_entity]() modelling a class template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L16{kind}]]]
+class_() const : cpp_class const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L26{A reference to the class that is being templated.}]]]
}
class "cpp_class_template_specialization" as C_0000006323
class C_0000006323 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L42{A [cppast::cpp_entity]() modelling a class template specialization.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L45{kind}]]]
+class_() const : cpp_class const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class_template.hpp#L55{A reference to the class that is being specialized.}]]]
}
class "cpp_friend" as C_0000006381
class C_0000006381 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L19{A [cppast::cpp_entity]() representing a friend declaration. It can either declare or define a `friend` function (template), declare a `friend` class, or refer to an existing type.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L22{kind}]]]
{static} +build(std::unique_ptr<cpp_entity> e) : std::unique_ptr<cpp_friend> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L27{\returns A newly created friend declaring the given entity as `friend`. \notes The friend declaration itself will not be registered, but the referring entity is.}]]]
{static} +build(std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_friend> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L34{\returns A newly created friend declaring the given type as `friend`. \notes It will not be registered.}]]]
+entity() const : type_safe::optional_ref<cpp_entity const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L40{\returns An optional reference to the entity it declares as friend, or `nullptr`.}]]]
+type() const : type_safe::optional_ref<cpp_type const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_friend.hpp#L48{\returns An optional reference to the type it declares as friend, or `nullptr`.}]]]
}
class "cpp_alias_template" as C_0000006404
class C_0000006404 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L13{A [cppast::cpp_entity]() modelling a C++ alias template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L16{kind}]]]
+type_alias() const : cpp_type_alias const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_alias_template.hpp#L26{\returns A reference to the type alias that is being templated.}]]]
}
class "cpp_function_template" as C_0000006423
class C_0000006423 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L13{A [cppast::cpp_entity]() modelling a function template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L16{kind}]]]
+function() const : cpp_function_base const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L26{A reference to the function that is being templated.}]]]
}
class "cpp_function_template_specialization" as C_0000006433
class C_0000006433 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L42{A [cppast::cpp_entity]() modelling a function template specialization.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L45{kind}]]]
+function() const : cpp_function_base const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function_template.hpp#L59{A reference to the function that is being specialized.}]]]
}
class "cpp_access_specifier" as C_0000006604
class C_0000006604 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L37{A [cppast::cpp_entity]() modelling a C++ access specifier.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L40{kind}]]]
{static} +build(cpp_access_specifier_kind kind) : std::unique_ptr<cpp_access_specifier> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L45{\returns A newly created access specifier. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+access_specifier() const : cpp_access_specifier_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L51{\returns The kind of access specifier.}]]]
}
class "cpp_base_class" as C_0000006615
class C_0000006615 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L67{A [cppast::cpp_entity]() modelling a base class specifier.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L70{kind}]]]
{static} +build(std::string name, std::unique_ptr<cpp_type> base, cpp_access_specifier_kind access, bool is_virtual) : std::unique_ptr<cpp_base_class> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L75{\returns A newly created base class specifier. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to the specifier itself.}]]]
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L83{\returns The type of the base class.}]]]
+access_specifier() const : cpp_access_specifier_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L89{\returns The access specifier of the base class.}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L95{\returns Whether or not it is a `virtual` base class.}]]]
}
class "cpp_class" as C_0000006644
class C_0000006644 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L118{A [cppast::cpp_entity]() modelling a C++ class. This can either be a definition or just a forward declaration. If it is just a forward declaration, everything except the class type will not be available.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L123{kind}]]]
+class_kind() const : cpp_class_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L198{\returns The keyword used in the declaration of the class.}]]]
+is_final() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L204{\returns Whether or not the class was declared `final`.}]]]
+bases() const : detail::iteratable_intrusive_list<cpp_base_class> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_class.hpp#L210{\returns An iteratable object iterating over the [cppast::cpp_base_class]() specifiers.}]]]
}
class "cpp_static_assert" as C_0000006716
class C_0000006716 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L12{cpp_static_assert}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L15{kind}]]]
{static} +build(std::unique_ptr<cpp_expression> expr, std::string msg) : std::unique_ptr<cpp_static_assert> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L19{\returns A newly created `static_assert()` entity. \notes It will not be registered as nothing can refer to it.}]]]
+expression() const : cpp_expression const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L27{\returns A reference to the [cppast::cpp_expression]() that is being asserted.}]]]
+message() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_static_assert.hpp#L33{\returns A reference to the message of the assertion.}]]]
}
class "cpp_variable_base" as C_0000006800
class C_0000006800 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L16{Additional base class for all [cppast::cpp_entity]() modelling some kind of variable. Examples are [cppast::cpp_variable]() or [cppast::cpp_function_parameter](), or anything that is name/type/default-value triple.}]] {
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L20{\returns A reference to the [cppast::cpp_type]() of the variable.}]]]
+default_value() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_base.hpp#L26{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the default value.}]]]
}
class "cpp_function_parameter" as C_0000006844
class C_0000006844 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L16{A [cppast::cpp_entity]() modelling a function parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L19{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L22{\returns A newly created and registered function parameter.}]]]
{static} +build(std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def = nullptr) : std::unique_ptr<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L30{\returns A newly created unnamed function parameter. \notes It will not be registered, as nothing can refer to it.}]]]
}
class "cpp_function_base" as C_0000006868
class C_0000006868 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L68{Base class for all entities that are functions. It contains arguments and common flags.}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_function_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L73{\returns An iteratable object iterating over the [cppast::cpp_function_parameter]() entities.}]]]
+body_kind() const : cpp_function_body_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L80{\returns The [cppast::cpp_function_body_kind](). \notes This matches the [cppast::cpp_forward_declarable]() queries.}]]]
+noexcept_condition() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L89{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the given `noexcept` condition. \notes If this returns `nullptr`, the function has the implicit noexcept value (i.e. none, unless it is a destructor). \notes There is no way to di...}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L95{\returns Whether the function has an ellipsis.}]]]
+signature() const : std::string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L103{\returns The signature of the function, i.e. parameters and cv/ref-qualifiers if a member function. It has the form `(int,char,...) const`.}]]]
}
class "cpp_function" as C_0000006910
class C_0000006910 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L201{A [cppast::cpp_entity]() modelling a C++ function. \notes This is not a member function, use [cppast::cpp_member_function]() for that. It can be a `static` function of a class, however.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L204{kind}]]]
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L237{\returns A reference to the return [cppast::cpp_type]().}]]]
+storage_class() const : cpp_storage_class_specifiers [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L245{\returns The [cppast::cpp_storage_specifiers]() of the function. \notes If it is `cpp_storage_class_static` and inside a [cppast::cpp_class](), it is a `static` class function.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L251{\returns Whether the function is marked `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_function.hpp#L257{\returns Whether the function is marked `consteval`.}]]]
}
class "cpp_type_alias" as C_0000007116
class C_0000007116 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L14{A [cppast::cpp_entity]() modelling a type alias/typedef. \notes There is no distinction between `using` and `typedef` type aliases made in the AST.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L17{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L20{\returns A newly created and registered type alias.}]]]
{static} +build(std::string name, std::unique_ptr<cpp_type> type) : std::unique_ptr<cpp_type_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L25{\returns A newly created type alias that isn't registered. \notes This function is intendend for templated type aliases.}]]]
+underlying_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_type_alias.hpp#L28{\returns A reference to the aliased [cppast::cpp_type]().}]]]
}
class "cpp_enum_value" as C_0000007165
class C_0000007165 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L21{A [cppast::cpp_entity]() modelling the value of an [cppast::cpp_enum]().}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L24{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_expression> value = nullptr) : std::unique_ptr<cpp_enum_value> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L28{\returns A newly created and registered enum value. \notes `value` may be `nullptr`, in which case the enum has an implicit value.}]]]
+value() const : type_safe::optional_ref<cpp_expression const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L34{\returns A [ts::optional_ref]() to the [cppast::cpp_expression]() that is the enum value. \notes It only has an associated expression if the value is explictly given.}]]]
}
class "cpp_enum" as C_0000007183
class C_0000007183 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L53{A [cppast::cpp_entity]() modelling a C++ enumeration. This can either be a definition or just a forward declaration. If it is just forward declared, it will not have any children.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L58{kind}]]]
+underlying_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L108{\returns A reference to the underlying [cppast::cpp_type]() of the enum.}]]]
+has_explicit_type() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L114{\returns Whether or not the underlying type is explictly given.}]]]
+is_scoped() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_enum.hpp#L120{\returns Whether or not it is a scoped enumeration (i.e. an `enum class`).}]]]
}
class "cpp_template" as C_0000007430
class C_0000007430 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L21{Base class for all entities modelling a C++ template of some kind. It is a container of a single [cppast::cpp_entity]() that is the entity being templated.}]] {
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L26{\returns An iteratable object iterating over the [cppast::cpp_template_parameter]() entities. \notes These may be empty for a full specialization.}]]]
}
class "cpp_template_specialization" as C_0000007484
class C_0000007484 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L177{Base class for all entities modelling a C++ template specialization.}]] {
+primary_template() const : cpp_template_ref [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L181{\returns A reference to the template that is being specialized.}]]]
+arguments_exposed() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L187{\returns Whether or not the arguments are exposed.}]]]
+arguments() const : type_safe::array_ref<cpp_template_argument const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L196{\returns An iteratable object iterating over the [cppast::cpp_template_argument]()s. \requires The arguments are exposed, i.e. `arguments_exposed()` returns `true`. \notes For function template specializations it can be empty, meaning that the arguments...}]]]
+unexposed_arguments() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L206{\returns The unexposed arguments as string. \requires The arguments are not exposed, i.e. `arguments_exposed()` returns `false`. \notes For function template specializations it can be empty, meaning that the arguments are not explictly given but deduced...}]]]
+is_full_specialization() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template.hpp#L212{\returns Whether or not the specialization is a full specialization.}]]]
}
class "cpp_language_linkage" as C_0000007515
class C_0000007515 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L13{A [cppast::cpp_entity]() modelling a language linkage.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L17{kind}]]]
+is_block() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_language_linkage.hpp#L50{\returns `true` if the linkage is a block, `false` otherwise.}]]]
}
class "cpp_macro_parameter" as C_0000007532
class C_0000007532 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L15{A [cppast::cpp_entity]() modelling a macro parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L18{kind}]]]
{static} +build(std::string name) : std::unique_ptr<cpp_macro_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L23{\returns A newly built macro parameter. \notes It is not meant to be registered in the [cppast::cpp_entity_index]() as no other [cppast::cpp_entity]() can refer to it.}]]]
}
class "cpp_macro_definition" as C_0000007536
class C_0000007536 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L35{A [cppast::cpp_entity]() modelling a macro definition.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L38{kind}]]]
{static} +build_object_like(std::string name, std::string replacement) : std::unique_ptr<cpp_macro_definition> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L43{\returns A newly built object like macro. \notes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it.}]]]
+replacement() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L98{\returns The replacement text of the macro.}]]]
+is_object_like() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L104{\returns Whether or not it is an object like macro.}]]]
+is_function_like() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L110{\returns Whether or not it is a function like macro.}]]]
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L116{\returns Whether or not it is a variadic macro.}]]]
+parameters() const : detail::iteratable_intrusive_list<cpp_macro_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L123{\returns The parameters of the macro. \notes It has none if it is not a function like macro.}]]]
}
class "cpp_include_directive" as C_0000007566
class C_0000007566 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L154{A [cppast::cpp_entity]() modelling an `#include`.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L157{kind}]]]
{static} +build(cpp_file_ref const& target, cpp_include_kind kind, std::string full_path) : std::unique_ptr<cpp_include_directive> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L162{\returns A newly built include directive. \notes It is not meant to be registered in the [cppast::cpp_entity_index](), as no other [cppast::cpp_entity]() can refer to it.}]]]
+target() const : cpp_file_ref [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L171{\returns A reference to the [cppast::cpp_file]() it includes.}]]]
+include_kind() const : cpp_include_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L177{\returns The kind of include it is.}]]]
+full_path() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_preprocessor.hpp#L183{\returns The full path of the included file.}]]]
}
class "cpp_member_variable_base" as C_0000007672
class C_0000007672 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L13{Base class for all kinds of member variables.}]] {
+is_mutable() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L17{\returns Whether or not the member variable is declared `mutable`.}]]]
+cpp_member_variable_base(std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L22{cpp_member_variable_base}]]]
}
class "cpp_member_variable" as C_0000007680
class C_0000007680 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L33{A [cppast::cpp_entity]() modelling a C++ member variable.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L36{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, bool is_mutable) : std::unique_ptr<cpp_member_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L40{\returns A newly created and registered member variable. \notes `def` may be `nullptr` in which case there is no member initializer provided.}]]]
}
class "cpp_bitfield" as C_0000007692
class C_0000007692 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L53{A [cppast::cpp_entity]() modelling a C++ bitfield.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L56{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L60{\returns A newly created and registered bitfield. \notes It cannot have a member initializer, i.e. default value.}]]]
{static} +build(std::unique_ptr<cpp_type> type, unsigned int no_bits, bool is_mutable) : std::unique_ptr<cpp_bitfield> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L66{\returns A newly created unnamed bitfield. \notes It will not be registered, as it is unnamed.}]]]
+no_bits() const : unsigned int [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_variable.hpp#L70{\returns The number of bits of the bitfield.}]]]
}
class "cpp_namespace" as C_0000007726
class C_0000007726 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L15{A [cppast::cpp_entity]() modelling a namespace.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L19{kind}]]]
+is_inline() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L56{\returns Whether or not the namespace is an `inline namespace`.}]]]
+is_nested() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L62{\returns Whether or not the namespace is part of a C++17 nested namespace.}]]]
+is_anonymous() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L68{\returns Whether or not the namespace is anonymous.}]]]
}
class "cpp_namespace_alias" as C_0000007747
class C_0000007747 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L102{A [cppast::cpp_entity]() modelling a namespace alias.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L105{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, cpp_namespace_ref target) : std::unique_ptr<cpp_namespace_alias> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L108{\returns A newly created and registered namespace alias.}]]]
+target() const : cpp_namespace_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L114{\returns The [cppast::cpp_namespace_ref]() to the aliased namespace. \notes If the namespace aliases aliases another namespace alias, the target entity will still be the namespace, not the alias.}]]]
}
class "cpp_using_directive" as C_0000007767
class C_0000007767 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L133{A [cppast::cpp_entity]() modelling a using directive. A using directive is `using namespace std`, for example. \notes It does not have a name.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L136{kind}]]]
{static} +build(cpp_namespace_ref target) : std::unique_ptr<cpp_using_directive> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L141{\returns A newly created using directive. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+target() const : cpp_namespace_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L147{\returns The [cppast::cpp_namespace_ref]() that is being used.}]]]
}
class "cpp_using_declaration" as C_0000007783
class C_0000007783 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L164{A [cppast::cpp_entity]() modelling a using declaration. A using declaration is `using std::vector`, for example. \notes It does not have a name.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L167{kind}]]]
{static} +build(cpp_entity_ref target) : std::unique_ptr<cpp_using_declaration> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L172{\returns A newly created using declaration. \notes It is not meant to be registered at the [cppast::cpp_entity_index](), as nothing can refer to it.}]]]
+target() const : cpp_entity_ref const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_namespace.hpp#L179{\returns The [cppast::cpp_entity_ref]() that is being used. \notes The name of the reference is the same as the name of this entity.}]]]
}
class "cpp_variable" as C_0000007825
class C_0000007825 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L18{A [cppast::cpp_entity]() modelling a C++ variable. \notes This is not a member variable, use [cppast::cpp_member_variable]() for that. But it can be `static` member variable.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L23{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, std::unique_ptr<cpp_expression> def, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L27{\returns A newly created and registered variable. \notes The default value may be `nullptr` indicating no default value.}]]]
{static} +build_declaration(cpp_entity_id definition_id, std::string name, std::unique_ptr<cpp_type> type, cpp_storage_class_specifiers spec, bool is_constexpr) : std::unique_ptr<cpp_variable> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L35{\returns A newly created variable that is a declaration. A declaration will not be registered and it does not have the default value.}]]]
+storage_class() const : cpp_storage_class_specifiers [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L42{\returns The [cppast::cpp_storage_specifiers]() on that variable.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable.hpp#L48{\returns Whether the variable is marked `constexpr`.}]]]
}
abstract "cpp_entity" as C_0000007892
abstract C_0000007892 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L47{The base class for all entities in the C++ AST.}]] {
+cpp_entity(cpp_entity const& ) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L50{cpp_entity}]]]
+operator=(cpp_entity const& ) : cpp_entity& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L51{operator=}]]]
+~cpp_entity() : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L53{~cpp_entity}]]]
+kind() const : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L56{\returns The kind of the entity.}]]]
+name() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L63{\returns The name of the entity. The name is the string associated with the entity's declaration.}]]]
+scope_name() const : type_safe::optional<cpp_scope_name> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L70{\returns The name of the new scope created by the entity, if there is any.}]]]
+parent() const : type_safe::optional_ref<cpp_entity const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L76{\returns A [ts::optional_ref]() to the parent entity in the AST.}]]]
+comment() const : type_safe::optional_ref<std::string const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L106{\returns The documentation comment associated with that entity, if any. \notes A documentation comment can have three forms: * A C style doc comment. It is a C style comment starting with an additional `*`, i.e. `/**`. One space after the leading sequen...}]]]
+set_comment(type_safe::optional<std::string> comment) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L113{\effects Sets the associated comment. \requires The comment must not be empty, if there is one.}]]]
+attributes() const : cpp_attribute_list const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L119{\returns The list of attributes that are specified for that entity.}]]]
+add_attribute(cpp_attribute attr) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L125{\effects Adds an attribute for that entity.}]]]
+add_attribute(cpp_attribute_list const& list) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L131{\effects Adds multiple arguments for that entity.}]]]
+user_data() const : void* [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L137{\returns The specified user data.}]]]
+set_user_data(void* data) const : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L149{\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi...}]]]
+cpp_entity(std::string name) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L155{\effects Creates it giving it the the name.}]]]
}
class "cpp_unexposed_entity" as C_0000007918
class C_0000007918 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L187{A [cppast::cpp_entity]() that isn't exposed directly. The only information available is the raw source code.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L190{kind}]]]
{static} +build(cpp_entity_index const& index, cpp_entity_id id, std::string name, cpp_token_string spelling) : std::unique_ptr<cpp_entity> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L194{\returns A newly built and registered unexposed entity. \notes It will be registered as a declaration.}]]]
{static} +build(cpp_token_string spelling) : std::unique_ptr<cpp_entity> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L199{\returns A newly built unnamed unexposed entity. It will not be registered.}]]]
+spelling() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_entity.hpp#L202{\returns The spelling of that entity.}]]]
}
class "cpp_template_parameter" as C_0000007933
class C_0000007933 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L17{Base class for all entities modelling a template parameter of some kind.}]] {
+is_variadic() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L21{\returns Whether or not the parameter is variadic.}]]]
}
class "cpp_template_type_parameter" as C_0000007941
class C_0000007941 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L46{A [cppast::cpp_entity]() modelling a C++ template type parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L49{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, cpp_template_keyword kw, bool variadic, std::unique_ptr<cpp_type> default_type = nullptr) : std::unique_ptr<cpp_template_type_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L53{\returns A newly created and registered template type parameter. \notes The `default_type` may be `nullptr` in which case the parameter has no default.}]]]
+default_type() const : type_safe::optional_ref<cpp_type const> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L58{\returns A [ts::optional_ref]() to the default type.}]]]
+keyword() const : cpp_template_keyword [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L64{\returns The keyword used in the template parameter.}]]]
}
class "cpp_non_type_template_parameter" as C_0000007980
class C_0000007980 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L128{A [cppast::cpp_entity]() modelling a C++ non-type template parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L132{kind}]]]
{static} +build(cpp_entity_index const& idx, cpp_entity_id id, std::string name, std::unique_ptr<cpp_type> type, bool is_variadic, std::unique_ptr<cpp_expression> default_value = nullptr) : std::unique_ptr<cpp_non_type_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L136{\returns A newly created and registered non type template parameter. \notes The `default_value` may be `nullptr` in which case the parameter has no default.}]]]
}
class "cpp_template_template_parameter" as C_0000007997
class C_0000007997 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L164{A [cppast::cpp_entity]() modelling a C++ template template parameter.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L167{kind}]]]
+parameters() const : detail::iteratable_intrusive_list<cpp_template_parameter> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L213{\returns An iteratable object containing the template parameters of the template template parameter.}]]]
+keyword() const : cpp_template_keyword [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L219{\returns The keyword used in the template parameter.}]]]
+default_template() const : type_safe::optional<cpp_template_ref> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_template_parameter.hpp#L225{\returns A [ts::optional]() that is the default template.}]]]
}
class "cpp_member_function_base" as C_0000008062
class C_0000008062 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L63{Base classes for all regular member function. The two derived classes are [cppast::cpp_member_function]() and [cppast::cpp_conversion_op]().}]] {
+return_type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L67{\returns The return type of the member function.}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L73{\returns Whether or not it is `virtual`.}]]]
+virtual_info() const : cpp_virtual const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L79{\returns The `virtual`-ness of the member function.}]]]
+cv_qualifier() const : cpp_cv [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L85{\returns The cv-qualifier on the member function.}]]]
+ref_qualifier() const : cpp_reference [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L91{\returns The ref-qualifier on the member function.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L97{\returns Whether or not the member function is `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L103{\returns Whether or not the member function is `consteval`.}]]]
}
class "cpp_member_function" as C_0000008096
class C_0000008096 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L169{A [cppast::cpp_entity]() modelling a member function.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L172{kind}]]]
}
class "cpp_conversion_op" as C_0000008104
class C_0000008104 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L191{A [cppast::cpp_entity]() modelling a C++ conversion operator.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L194{kind}]]]
+is_explicit() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L214{\returns Whether or not the conversion is `explicit`.}]]]
}
class "cpp_constructor" as C_0000008114
class C_0000008114 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L232{A [cppast::cpp_entity]() modelling a C++ constructor.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L235{kind}]]]
+is_explicit() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L263{\returns Whether or not the constructor is `explicit`.}]]]
+is_constexpr() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L269{\returns Whether or not the constructor is `constexpr`.}]]]
+is_consteval() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L275{\returns Whether or not the constructor is `consteval`.}]]]
}
class "cpp_destructor" as C_0000008122
class C_0000008122 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L295{A [cppast::cpp_entity]() modelling a C++ destructor.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L298{kind}]]]
+is_virtual() const : bool [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L318{\returns Whether or not it is `virtual`.}]]]
+virtual_info() const : cpp_virtual [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_member_function.hpp#L324{\returns The `virtual`-ness of the constructor.}]]]
}
class "cpp_variable_template" as C_0000008272
class C_0000008272 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L13{A [cppast::cpp_entity]() modelling a C++ alias template.}]] {
{static} +kind() : cpp_entity_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L16{kind}]]]
+variable() const : cpp_variable const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_variable_template.hpp#L26{\returns A reference to the type variable that is being templated.}]]]
}
C_0000007892 <|- - C_0000006252
C_0000007430 <|- - C_0000006313
C_0000007484 <|- - C_0000006323
C_0000007892 <|- - C_0000006381
C_0000007430 <|- - C_0000006404
C_0000007430 <|- - C_0000006423
C_0000007484 <|- - C_0000006433
C_0000007892 <|- - C_0000006604
C_0000007892 <|- - C_0000006615
C_0000007892 <|- - C_0000006644
C_0000007892 <|- - C_0000006716
C_0000007892 <|- - C_0000006844
C_0000006800 <|- - C_0000006844
C_0000007892 <|- - C_0000006868
C_0000006868 <|- - C_0000006910
C_0000007892 <|- - C_0000007116
C_0000007892 <|- - C_0000007165
C_0000007892 <|- - C_0000007183
C_0000007892 <|- - C_0000007430
C_0000007430 <|- - C_0000007484
C_0000007892 <|- - C_0000007515
C_0000007892 <|- - C_0000007532
C_0000007892 <|- - C_0000007536
C_0000007892 <|- - C_0000007566
C_0000007892 <|- - C_0000007672
C_0000006800 <|- - C_0000007672
C_0000007672 <|- - C_0000007680
C_0000007672 <|- - C_0000007692
C_0000007892 <|- - C_0000007726
C_0000007892 <|- - C_0000007747
C_0000007892 <|- - C_0000007767
C_0000007892 <|- - C_0000007783
C_0000007892 <|- - C_0000007825
C_0000006800 <|- - C_0000007825
C_0000007892 <|- - C_0000007918
C_0000007892 <|- - C_0000007933
C_0000007933 <|- - C_0000007941
C_0000007933 <|- - C_0000007980
C_0000006800 <|- - C_0000007980
C_0000007933 <|- - C_0000007997
C_0000006868 <|- - C_0000008062
C_0000008062 <|- - C_0000008096
C_0000008062 <|- - C_0000008104
C_0000006868 <|- - C_0000008114
C_0000006868 <|- - C_0000008122
C_0000007430 <|- - C_0000008272
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.15+10-Ubuntu-0ubuntu0.21.10.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>