<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="380px" preserveAspectRatio="none" style="width:1279px;height:380px;" version="1.1" viewBox="0 0 1279 380" width="1279px" zoomAndPan="magnify"><defs><filter height="300%" id="f17o04k212gw15" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[3454e611ef6b1cdda346145a9031d850]
class C_0000000045--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L16" target="_top" title="The kind of a [cppast::cpp_expression]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L16" xlink:show="new" xlink:title="The kind of a [cppast::cpp_expression]()." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f17o04k212gw15)" height="73.6094" id="C_0000000045" style="stroke: #A80036; stroke-width: 1.5;" width="161" x="283.5" y="65.5"/><ellipse cx="298.5" cy="81.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M302.6094,87.5 L294.8906,87.5 L294.8906,75.1094 L302.6094,75.1094 L302.6094,77.2656 L297.3438,77.2656 L297.3438,79.9375 L302.1094,79.9375 L302.1094,82.0938 L297.3438,82.0938 L297.3438,85.3438 L302.6094,85.3438 L302.6094,87.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="129" x="312.5" y="85.6543">cpp_expression_kind</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="284.5" x2="443.5" y1="97.5" y2="97.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="289.5" y="111.7104">literal_t</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="289.5" y="124.5151">unexposed_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="284.5" x2="443.5" y1="131.1094" y2="131.1094"/></a><!--MD5=[cd66da18075da90dda89dbf60be15dd2]
class C_0000000051--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L24" target="_top" title="Base class for all C++ expressions." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L24" xlink:show="new" xlink:title="Base class for all C++ expressions." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f17o04k212gw15)" height="188.8516" id="C_0000000051" style="stroke: #A80036; stroke-width: 1.5;" width="341" x="479.5" y="8"/><ellipse cx="597.75" cy="24" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M597.8594,19.3438 L596.7031,24.4219 L599.0313,24.4219 L597.8594,19.3438 Z M596.375,17.1094 L599.3594,17.1094 L602.7188,29.5 L600.2656,29.5 L599.5,26.4375 L596.2188,26.4375 L595.4688,29.5 L593.0313,29.5 L596.375,17.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="96" x="618.25" y="28.1543">cpp_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="480.5" x2="819.5" y1="40" y2="40"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74" target="_top" title="type_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74" xlink:show="new" xlink:title="type_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="46"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="48"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74" target="_top" title="type_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74" xlink:show="new" xlink:title="type_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="499.5" y="54.2104">type_ : std::unique_ptr&lt;cpp_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="58.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="60.8047"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="499.5" y="67.0151">user_data_ : std::atomic&lt;void*&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="480.5" x2="819.5" y1="73.6094" y2="73.6094"/><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27" target="_top" title="cpp_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27" xlink:show="new" xlink:title="cpp_expression" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="79.6094"/><ellipse cx="490.5" cy="84.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27" target="_top" title="cpp_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27" xlink:show="new" xlink:title="cpp_expression" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="499.5" y="87.8198">cpp_expression(cpp_expression const&amp; ) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28" xlink:show="new" xlink:title="operator=" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="92.4141"/><ellipse cx="490.5" cy="97.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28" target="_top" title="operator=" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28" xlink:show="new" xlink:title="operator=" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="499.5" y="100.6245">operator=(cpp_expression const&amp; ) : cpp_expression&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30" target="_top" title="~cpp_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30" xlink:show="new" xlink:title="~cpp_expression" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="105.2188"/><ellipse cx="490.5" cy="110.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30" target="_top" title="~cpp_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30" xlink:show="new" xlink:title="~cpp_expression" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="499.5" y="113.4292">~cpp_expression() : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33" target="_top" title="\returns The [cppast::cpp_expression_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33" xlink:show="new" xlink:title="\returns The [cppast::cpp_expression_kind]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="118.0234"/><ellipse cx="490.5" cy="123.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33" target="_top" title="\returns The [cppast::cpp_expression_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33" xlink:show="new" xlink:title="\returns The [cppast::cpp_expression_kind]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="499.5" y="126.2339">kind() const : cpp_expression_kind</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39" target="_top" title="\returns The type of the expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39" xlink:show="new" xlink:title="\returns The type of the expression." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="130.8281"/><ellipse cx="490.5" cy="135.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39" target="_top" title="\returns The type of the expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39" xlink:show="new" xlink:title="\returns The type of the expression." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="499.5" y="139.0386">type() const : cpp_type const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="143.6328"/><ellipse cx="490.5" cy="148.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45" target="_top" title="\returns The specified user data." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45" xlink:show="new" xlink:title="\returns The specified user data." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="499.5" y="151.8433">user_data() const : void*</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="156.4375"/><ellipse cx="490.5" cy="161.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57" target="_top" title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57" xlink:show="new" xlink:title="\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi..." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="499.5" y="164.6479">set_user_data(void* data) const : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65" target="_top" title="\effects Creates it given the type. \requires The type must not be `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65" xlink:show="new" xlink:title="\effects Creates it given the type. \requires The type must not be `nullptr`." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="169.2422"/><polygon fill="#FFFF44" points="490.5,169.2422,494.5,173.2422,490.5,177.2422,486.5,173.2422" style="stroke: #B38D22; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65" target="_top" title="\effects Creates it given the type. \requires The type must not be `nullptr`." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65" xlink:show="new" xlink:title="\effects Creates it given the type. \requires The type must not be `nullptr`." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="499.5" y="177.4526">cpp_expression(std::unique_ptr&lt;cpp_type&gt; type) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72" target="_top" title="\returns The [cppast::cpp_expression_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72" xlink:show="new" xlink:title="\returns The [cppast::cpp_expression_kind]()." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="485.5" y="182.0469"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="184.0469"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72" target="_top" title="\returns The [cppast::cpp_expression_kind]()." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72" xlink:show="new" xlink:title="\returns The [cppast::cpp_expression_kind]()." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="262" x="499.5" y="190.2573">do_get_kind() const = 0 : cpp_expression_kind</text></a><!--MD5=[1da358a7dd77cd262f0d80fd4b9b2874]
class C_0000000083--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L81" target="_top" title="An unexposed [cppast::cpp_expression](). There is no further information than a string available." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L81" xlink:show="new" xlink:title="An unexposed [cppast::cpp_expression](). There is no further information than a string available." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f17o04k212gw15)" height="112.0234" id="C_0000000083" style="stroke: #A80036; stroke-width: 1.5;" width="640" x="6" y="257"/><ellipse cx="235.75" cy="273" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M238.7188,278.6406 Q238.1406,278.9375 237.5,279.0781 Q236.8594,279.2344 236.1563,279.2344 Q233.6563,279.2344 232.3281,277.5938 Q231.0156,275.9375 231.0156,272.8125 Q231.0156,269.6875 232.3281,268.0313 Q233.6563,266.375 236.1563,266.375 Q236.8594,266.375 237.5,266.5313 Q238.1563,266.6875 238.7188,266.9844 L238.7188,269.7031 Q238.0938,269.125 237.5,268.8594 Q236.9063,268.5781 236.2813,268.5781 Q234.9375,268.5781 234.25,269.6563 Q233.5625,270.7188 233.5625,272.8125 Q233.5625,274.9063 234.25,275.9844 Q234.9375,277.0469 236.2813,277.0469 Q236.9063,277.0469 237.5,276.7813 Q238.0938,276.5 238.7188,275.9219 L238.7188,278.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="172" x="256.25" y="277.1543">cpp_unexposed_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="645" y1="289" y2="289"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108" target="_top" title="str_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108" xlink:show="new" xlink:title="str_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="295"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="297"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108" target="_top" title="str_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108" xlink:show="new" xlink:title="str_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="26" y="303.2104">str_ : cpp_token_string</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="645" y1="309.8047" y2="309.8047"/><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85" target="_top" title="\returns A newly created unexposed expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85" xlink:show="new" xlink:title="\returns A newly created unexposed expression." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="315.8047"/><ellipse cx="17" cy="320.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85" target="_top" title="\returns A newly created unexposed expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85" xlink:show="new" xlink:title="\returns A newly created unexposed expression." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="614" x="26" y="324.0151">build(std::unique_ptr&lt;cpp_type&gt; type, cpp_token_string str) : std::unique_ptr&lt;cpp_unexposed_expression&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93" target="_top" title="\returns The expression as a string." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93" xlink:show="new" xlink:title="\returns The expression as a string." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="328.6094"/><ellipse cx="17" cy="333.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93" target="_top" title="\returns The expression as a string." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93" xlink:show="new" xlink:title="\returns The expression as a string." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="26" y="336.8198">expression() const : cpp_token_string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99" target="_top" title="cpp_unexposed_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99" xlink:show="new" xlink:title="cpp_unexposed_expression" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="341.4141"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="343.4141"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99" target="_top" title="cpp_unexposed_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99" xlink:show="new" xlink:title="cpp_unexposed_expression" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="506" x="26" y="349.6245">cpp_unexposed_expression(std::unique_ptr&lt;cpp_type&gt; type, cpp_token_string str) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103" target="_top" title="do_get_kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103" xlink:show="new" xlink:title="do_get_kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="354.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="356.2188"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103" target="_top" title="do_get_kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103" xlink:show="new" xlink:title="do_get_kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="26" y="362.4292">do_get_kind() const : cpp_expression_kind</text></a><!--MD5=[0cc037e1aab0fceda0e199767fdf8e11]
class C_0000000101--><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L112" target="_top" title="A [cppast::cpp_expression]() that is a literal." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L112" xlink:show="new" xlink:title="A [cppast::cpp_expression]() that is a literal." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f17o04k212gw15)" height="112.0234" id="C_0000000101" style="stroke: #A80036; stroke-width: 1.5;" width="587" x="681.5" y="257"/><ellipse cx="901.75" cy="273" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M904.7188,278.6406 Q904.1406,278.9375 903.5,279.0781 Q902.8594,279.2344 902.1563,279.2344 Q899.6563,279.2344 898.3281,277.5938 Q897.0156,275.9375 897.0156,272.8125 Q897.0156,269.6875 898.3281,268.0313 Q899.6563,266.375 902.1563,266.375 Q902.8594,266.375 903.5,266.5313 Q904.1563,266.6875 904.7188,266.9844 L904.7188,269.7031 Q904.0938,269.125 903.5,268.8594 Q902.9063,268.5781 902.2813,268.5781 Q900.9375,268.5781 900.25,269.6563 Q899.5625,270.7188 899.5625,272.8125 Q899.5625,274.9063 900.25,275.9844 Q900.9375,277.0469 902.2813,277.0469 Q902.9063,277.0469 903.5,276.7813 Q904.0938,276.5 904.7188,275.9219 L904.7188,278.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="922.25" y="277.1543">cpp_literal_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="682.5" x2="1267.5" y1="289" y2="289"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139" target="_top" title="value_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139" xlink:show="new" xlink:title="value_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="687.5" y="295"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="689.5" y="297"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139" target="_top" title="value_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139" xlink:show="new" xlink:title="value_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="701.5" y="303.2104">value_ : std::string</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="682.5" x2="1267.5" y1="309.8047" y2="309.8047"/><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116" target="_top" title="\returns A newly created literal expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116" xlink:show="new" xlink:title="\returns A newly created literal expression." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="687.5" y="315.8047"/><ellipse cx="692.5" cy="320.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116" target="_top" title="\returns A newly created literal expression." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116" xlink:show="new" xlink:title="\returns A newly created literal expression." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="561" x="701.5" y="324.0151">build(std::unique_ptr&lt;cpp_type&gt; type, std::string value) : std::unique_ptr&lt;cpp_literal_expression&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124" target="_top" title="\returns The value of the literal, as string." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124" xlink:show="new" xlink:title="\returns The value of the literal, as string." xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="687.5" y="328.6094"/><ellipse cx="692.5" cy="333.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124" target="_top" title="\returns The value of the literal, as string." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124" xlink:show="new" xlink:title="\returns The value of the literal, as string." xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="701.5" y="336.8198">value() const : std::string const&amp;</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130" target="_top" title="cpp_literal_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130" xlink:show="new" xlink:title="cpp_literal_expression" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="687.5" y="341.4141"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="689.5" y="343.4141"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130" target="_top" title="cpp_literal_expression" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130" xlink:show="new" xlink:title="cpp_literal_expression" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="701.5" y="349.6245">cpp_literal_expression(std::unique_ptr&lt;cpp_type&gt; type, std::string value) : void</text></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134" target="_top" title="do_get_kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134" xlink:show="new" xlink:title="do_get_kind" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="687.5" y="354.2188"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="689.5" y="356.2188"/></a><a href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134" target="_top" title="do_get_kind" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134" xlink:show="new" xlink:title="do_get_kind" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="701.5" y="362.4292">do_get_kind() const : cpp_expression_kind</text></a><!--MD5=[de7ec5445798509d13ec6815f29b6a77]
reverse link C_0000000051 to C_0000000083--><path d="M487.77,207.9 C461.44,224.84 435.12,241.78 411.58,256.92 " fill="none" id="C_0000000051&lt;-C_0000000083" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="483.98,202.01,504.59,197.08,491.56,213.79,483.98,202.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f441881df3bfe210ac709d66bc56f84]
reverse link C_0000000051 to C_0000000101--><path d="M812.74,207.9 C839.15,224.84 865.55,241.78 889.15,256.92 " fill="none" id="C_0000000051&lt;-C_0000000101" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="808.92,213.77,795.86,197.08,816.48,201.98,808.92,213.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1e2e8cf502e34f5db6a4626f3179851e]
@startuml
enum "cpp_expression_kind" as C_0000000045
enum C_0000000045 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L16{The kind of a [cppast::cpp_expression]().}]] {
literal_t
unexposed_t
}
abstract "cpp_expression" as C_0000000051
abstract C_0000000051 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L24{Base class for all C++ expressions.}]] {
+cpp_expression(cpp_expression const& ) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L27{cpp_expression}]]]
+operator=(cpp_expression const& ) : cpp_expression& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L28{operator=}]]]
+~cpp_expression() : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L30{~cpp_expression}]]]
+kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L33{\returns The [cppast::cpp_expression_kind]().}]]]
+type() const : cpp_type const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L39{\returns The type of the expression.}]]]
+user_data() const : void* [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L45{\returns The specified user data.}]]]
+set_user_data(void* data) const : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L57{\effects Sets some kind of user data. User data is just some kind of pointer, there are no requirements. The class will do no lifetime management. User data is useful if you need to store additional data for an entity without the need to maintain a regi...}]]]
#cpp_expression(std::unique_ptr<cpp_type> type) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L65{\effects Creates it given the type. \requires The type must not be `nullptr`.}]]]
{abstract} -do_get_kind() const = 0 : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L72{\returns The [cppast::cpp_expression_kind]().}]]]
-type_ : std::unique_ptr<cpp_type> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L74{type_}]]]
-user_data_ : std::atomic<void*> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L75{user_data_}]]]
}
class "cpp_unexposed_expression" as C_0000000083
class C_0000000083 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L81{An unexposed [cppast::cpp_expression](). There is no further information than a string available.}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_token_string str) : std::unique_ptr<cpp_unexposed_expression> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L85{\returns A newly created unexposed expression.}]]]
+expression() const : cpp_token_string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L93{\returns The expression as a string.}]]]
-cpp_unexposed_expression(std::unique_ptr<cpp_type> type, cpp_token_string str) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L99{cpp_unexposed_expression}]]]
-do_get_kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L103{do_get_kind}]]]
-str_ : cpp_token_string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L108{str_}]]]
}
class "cpp_literal_expression" as C_0000000101
class C_0000000101 [[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L112{A [cppast::cpp_expression]() that is a literal.}]] {
{static} +build(std::unique_ptr<cpp_type> type, std::string value) : std::unique_ptr<cpp_literal_expression> [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L116{\returns A newly created literal expression.}]]]
+value() const : std::string const& [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L124{\returns The value of the literal, as string.}]]]
-cpp_literal_expression(std::unique_ptr<cpp_type> type, std::string value) : void [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L130{cpp_literal_expression}]]]
-do_get_kind() const : cpp_expression_kind [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L134{do_get_kind}]]]
-value_ : std::string [[[https://github.com/foonathan/cppast/blob/19cbc378f8a6b3fe7d04b309784a3a0920de9e75/include/cppast/cpp_expression.hpp#L139{value_}]]]
}
C_0000000051 <|- - C_0000000083
C_0000000051 <|- - C_0000000101
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.15+10-Ubuntu-0ubuntu0.21.10.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>