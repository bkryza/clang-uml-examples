<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="618px" preserveAspectRatio="none" style="width:1518px;height:618px;" version="1.1" viewBox="0 0 1518 618" width="1518px" zoomAndPan="magnify"><defs><filter height="300%" id="f1rzi2y4nx1nkx" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[4c12a51903926c4184eed03e07bdd7c6]
class C_0001585653041236922459--><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L44" target="_top" title="Base class for all C++ types." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L44" xlink:show="new" xlink:title="Base class for all C++ types." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1rzi2y4nx1nkx)" height="176.0469" id="C_0001585653041236922459" style="stroke: #A80036; stroke-width: 1.5;" width="271" x="136" y="431"/><ellipse cx="238.75" cy="447" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M238.8594,442.3438 L237.7031,447.4219 L240.0313,447.4219 L238.8594,442.3438 Z M237.375,440.1094 L240.3594,440.1094 L243.7188,452.5 L241.2656,452.5 L240.5,449.4375 L237.2188,449.4375 L236.4688,452.5 L234.0313,452.5 L237.375,440.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="259.25" y="451.1543">cpp_type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="137" x2="406" y1="463" y2="463"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="142" y="469"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="144" y="471"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="156" y="477.2104">user_data_ : std::atomic&lt;void *&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="137" x2="406" y1="483.8047" y2="483.8047"/><ellipse cx="147" cy="494.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="156" y="498.0151">cpp_type(const cpp_type &amp; ) : void</text><ellipse cx="147" cy="507.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="156" y="510.8198">operator=(const cpp_type &amp; ) : cpp_type &amp;</text><ellipse cx="147" cy="520.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="156" y="523.6245">~cpp_type() = default : void</text><ellipse cx="147" cy="533.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="156" y="536.4292">kind() const : cpp_type_kind</text><ellipse cx="147" cy="546.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="156" y="549.2339">user_data() const : void *</text><ellipse cx="147" cy="558.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="156" y="562.0386">set_user_data(void * data) const : void</text><polygon fill="#FFFF44" points="147,566.6328,151,570.6328,147,574.6328,143,570.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="156" y="574.8433">cpp_type() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="144" y="581.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="225" x="156" y="587.6479">do_get_kind() const = 0 : cpp_type_kind</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="144" y="594.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="156" y="600.4526">on_insert(const cpp_type &amp; ) : void</text><!--MD5=[38d1077848c5cc3074880e3f02ae30cd]
class C_0002228471918600734475--><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L24" target="_top" title="Base class for all C++ expressions." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L24" xlink:show="new" xlink:title="Base class for all C++ expressions." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1rzi2y4nx1nkx)" height="188.8516" id="C_0002228471918600734475" style="stroke: #A80036; stroke-width: 1.5;" width="349" x="6" y="8"/><ellipse cx="128.25" cy="24" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M128.3594,19.3438 L127.2031,24.4219 L129.5313,24.4219 L128.3594,19.3438 Z M126.875,17.1094 L129.8594,17.1094 L133.2188,29.5 L130.7656,29.5 L130,26.4375 L126.7188,26.4375 L125.9688,29.5 L123.5313,29.5 L126.875,17.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="96" x="148.75" y="28.1543">cpp_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="354" y1="40" y2="40"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74" target="_top" title="type_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74" xlink:show="new" xlink:title="type_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="46"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="48"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74" target="_top" title="type_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74" xlink:show="new" xlink:title="type_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="26" y="54.2104">type_ : std::unique_ptr&lt;cpp_type&gt;</text></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="58.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="60.8047"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75" target="_top" title="user_data_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75" xlink:show="new" xlink:title="user_data_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="26" y="67.0151">user_data_ : std::atomic&lt;void *&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="354" y1="73.6094" y2="73.6094"/><ellipse cx="17" cy="84.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="26" y="87.8198">cpp_expression(const cpp_expression &amp; ) : void</text><ellipse cx="17" cy="97.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="26" y="100.6245">operator=(const cpp_expression &amp; ) : cpp_expression &amp;</text><ellipse cx="17" cy="110.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="26" y="113.4292">~cpp_expression() = default : void</text><ellipse cx="17" cy="123.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="26" y="126.2339">kind() const : cpp_expression_kind</text><ellipse cx="17" cy="135.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="26" y="139.0386">type() const : const cpp_type &amp;</text><ellipse cx="17" cy="148.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="26" y="151.8433">user_data() const : void *</text><ellipse cx="17" cy="161.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="26" y="164.6479">set_user_data(void * data) const : void</text><polygon fill="#FFFF44" points="17,169.2422,21,173.2422,17,177.2422,13,173.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="26" y="177.4526">cpp_expression(std::unique_ptr&lt;cpp_type&gt; type) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="184.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="262" x="26" y="190.2573">do_get_kind() const = 0 : cpp_expression_kind</text><!--MD5=[a7e5d8ce2ef9e291c277fff2a6f3c855]
class C_0000978206085606851269--><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L81" target="_top" title="An unexposed [cppast::cpp_expression](). There is no further information than a string available." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L81" xlink:show="new" xlink:title="An unexposed [cppast::cpp_expression](). There is no further information than a string available." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1rzi2y4nx1nkx)" height="112.0234" id="C_0000978206085606851269" style="stroke: #A80036; stroke-width: 1.5;" width="640" x="244.5" y="258"/><ellipse cx="474.25" cy="274" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M477.2188,279.6406 Q476.6406,279.9375 476,280.0781 Q475.3594,280.2344 474.6563,280.2344 Q472.1563,280.2344 470.8281,278.5938 Q469.5156,276.9375 469.5156,273.8125 Q469.5156,270.6875 470.8281,269.0313 Q472.1563,267.375 474.6563,267.375 Q475.3594,267.375 476,267.5313 Q476.6563,267.6875 477.2188,267.9844 L477.2188,270.7031 Q476.5938,270.125 476,269.8594 Q475.4063,269.5781 474.7813,269.5781 Q473.4375,269.5781 472.75,270.6563 Q472.0625,271.7188 472.0625,273.8125 Q472.0625,275.9063 472.75,276.9844 Q473.4375,278.0469 474.7813,278.0469 Q475.4063,278.0469 476,277.7813 Q476.5938,277.5 477.2188,276.9219 L477.2188,279.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="172" x="494.75" y="278.1543">cpp_unexposed_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="245.5" x2="883.5" y1="290" y2="290"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108" target="_top" title="str_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108" xlink:show="new" xlink:title="str_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="250.5" y="296"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="252.5" y="298"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108" target="_top" title="str_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108" xlink:show="new" xlink:title="str_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="264.5" y="304.2104">str_ : cpp_token_string</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="245.5" x2="883.5" y1="310.8047" y2="310.8047"/><ellipse cx="255.5" cy="321.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="614" x="264.5" y="325.0151">build(std::unique_ptr&lt;cpp_type&gt; type, cpp_token_string str) : std::unique_ptr&lt;cpp_unexposed_expression&gt;</text><ellipse cx="255.5" cy="334.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="264.5" y="337.8198">expression() const : const cpp_token_string &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="252.5" y="344.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="506" x="264.5" y="350.6245">cpp_unexposed_expression(std::unique_ptr&lt;cpp_type&gt; type, cpp_token_string str) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="252.5" y="357.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="264.5" y="363.4292">do_get_kind() const : cpp_expression_kind</text><!--MD5=[9ce27dad6ff5607624e74c4cf796696e]
class C_0001481645313438672561--><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L112" target="_top" title="A [cppast::cpp_expression]() that is a literal." xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L112" xlink:show="new" xlink:title="A [cppast::cpp_expression]() that is a literal." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1rzi2y4nx1nkx)" height="112.0234" id="C_0001481645313438672561" style="stroke: #A80036; stroke-width: 1.5;" width="587" x="920" y="258"/><ellipse cx="1140.25" cy="274" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1143.2188,279.6406 Q1142.6406,279.9375 1142,280.0781 Q1141.3594,280.2344 1140.6563,280.2344 Q1138.1563,280.2344 1136.8281,278.5938 Q1135.5156,276.9375 1135.5156,273.8125 Q1135.5156,270.6875 1136.8281,269.0313 Q1138.1563,267.375 1140.6563,267.375 Q1141.3594,267.375 1142,267.5313 Q1142.6563,267.6875 1143.2188,267.9844 L1143.2188,270.7031 Q1142.5938,270.125 1142,269.8594 Q1141.4063,269.5781 1140.7813,269.5781 Q1139.4375,269.5781 1138.75,270.6563 Q1138.0625,271.7188 1138.0625,273.8125 Q1138.0625,275.9063 1138.75,276.9844 Q1139.4375,278.0469 1140.7813,278.0469 Q1141.4063,278.0469 1142,277.7813 Q1142.5938,277.5 1143.2188,276.9219 L1143.2188,279.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="1160.75" y="278.1543">cpp_literal_expression</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="921" x2="1506" y1="290" y2="290"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139" target="_top" title="value_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139" xlink:show="new" xlink:title="value_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="926" y="296"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="928" y="298"/></a><a href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139" target="_top" title="value_" xlink:actuate="onRequest" xlink:href="https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139" xlink:show="new" xlink:title="value_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="940" y="304.2104">value_ : std::string</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="921" x2="1506" y1="310.8047" y2="310.8047"/><ellipse cx="931" cy="321.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="561" x="940" y="325.0151">build(std::unique_ptr&lt;cpp_type&gt; type, std::string value) : std::unique_ptr&lt;cpp_literal_expression&gt;</text><ellipse cx="931" cy="334.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="940" y="337.8198">value() const : const std::string &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="928" y="344.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="940" y="350.6245">cpp_literal_expression(std::unique_ptr&lt;cpp_type&gt; type, std::string value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="928" y="357.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="940" y="363.4292">do_get_kind() const : cpp_expression_kind</text><!--MD5=[02d43daa8b7b03173c2af277117b1393]
link C_0002228471918600734475 to C_0001585653041236922459--><path d="M135.55,197.32 C128.06,216.95 121.46,237.82 117.5,258 C107.92,306.85 105.15,321.78 117.5,370 C122.8,390.7 133.52,409.57 146.94,426.4 " fill="none" id="C_0002228471918600734475-&gt;C_0001585653041236922459" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="150.41,430.64,147.801,421.143,147.2415,426.7721,141.6124,426.2126,150.41,430.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9791a9f7d95f122f697c2bf1195e32f4]
reverse link C_0002228471918600734475 to C_0001585653041236922459--><path d="M165.27,210.21 C161.74,259.73 162.62,318.81 177.5,370 C183.58,390.9 193.59,411.67 204.87,430.75 " fill="none" id="C_0002228471918600734475&lt;-C_0001585653041236922459" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="166.32,197.18,161.8515,202.8398,165.3573,209.1413,169.8258,203.4816,166.32,197.18" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="180.5" y="311.5664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="190.5" y="318.5669">type_</text><!--MD5=[7776aeb207e8e400d48823f9f45c6a81]
link C_0000978206085606851269 to C_0001585653041236922459--><path d="M484.82,370.2 C459.06,388.05 429.79,408.33 401.37,428.02 " fill="none" id="C_0000978206085606851269-&gt;C_0001585653041236922459" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="397.18,430.92,406.8539,429.0719,401.2868,428.068,402.2907,422.501,397.18,430.92" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c02a1d54be50fc37a15c5f7613182716]
reverse link C_0002228471918600734475 to C_0000978206085606851269--><path d="M369.95,206.86 C402.32,224.52 434.79,242.23 463.67,257.99 " fill="none" id="C_0002228471918600734475&lt;-C_0000978206085606851269" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="366.21,212.79,352,197.07,372.91,200.5,366.21,212.79" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[890df95fa6d88b45e1286a18d96d9a95]
link C_0001481645313438672561 to C_0001585653041236922459--><path d="M958.27,370 C782.73,407.83 556.17,456.65 412.31,487.66 " fill="none" id="C_0001481645313438672561-&gt;C_0001585653041236922459" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="407.23,488.75,416.8724,490.7562,412.1169,487.6926,415.1805,482.9371,407.23,488.75" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8ae8e11f3e92b5017da0a0143b79a36a]
reverse link C_0002228471918600734475 to C_0001481645313438672561--><path d="M374.82,142.91 C535,175.39 763.98,221.83 942.23,257.98 " fill="none" id="C_0002228471918600734475&lt;-C_0001481645313438672561" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="373.36,149.76,355.15,138.92,376.14,136.04,373.36,149.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bc99c98b7729a80ebd77edcd535ebd2a]
@startuml
abstract "cpp_type" as C_0001585653041236922459
abstract C_0001585653041236922459 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L44{Base class for all C++ types.}]] {
+cpp_type(const cpp_type & ) : void
+operator=(const cpp_type & ) : cpp_type &
+~cpp_type() = default : void
+kind() const : cpp_type_kind
+user_data() const : void *
+set_user_data(void * data) const : void
#cpp_type() : void
{abstract} -do_get_kind() const = 0 : cpp_type_kind
-on_insert(const cpp_type & ) : void
-user_data_ : std::atomic<void *> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_type.hpp#L85{user_data_}]]]
}
abstract "cpp_expression" as C_0002228471918600734475
abstract C_0002228471918600734475 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L24{Base class for all C++ expressions.}]] {
+cpp_expression(const cpp_expression & ) : void
+operator=(const cpp_expression & ) : cpp_expression &
+~cpp_expression() = default : void
+kind() const : cpp_expression_kind
+type() const : const cpp_type &
+user_data() const : void *
+set_user_data(void * data) const : void
#cpp_expression(std::unique_ptr<cpp_type> type) : void
{abstract} -do_get_kind() const = 0 : cpp_expression_kind
-type_ : std::unique_ptr<cpp_type> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L74{type_}]]]
-user_data_ : std::atomic<void *> [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L75{user_data_}]]]
}
class "cpp_unexposed_expression" as C_0000978206085606851269
class C_0000978206085606851269 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L81{An unexposed [cppast::cpp_expression](). There is no further information than a string available.}]] {
{static} +build(std::unique_ptr<cpp_type> type, cpp_token_string str) : std::unique_ptr<cpp_unexposed_expression>
+expression() const : const cpp_token_string &
-cpp_unexposed_expression(std::unique_ptr<cpp_type> type, cpp_token_string str) : void
-do_get_kind() const : cpp_expression_kind
-str_ : cpp_token_string [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L108{str_}]]]
}
class "cpp_literal_expression" as C_0001481645313438672561
class C_0001481645313438672561 [[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L112{A [cppast::cpp_expression]() that is a literal.}]] {
{static} +build(std::unique_ptr<cpp_type> type, std::string value) : std::unique_ptr<cpp_literal_expression>
+value() const : const std::string &
-cpp_literal_expression(std::unique_ptr<cpp_type> type, std::string value) : void
-do_get_kind() const : cpp_expression_kind
-value_ : std::string [[[https://github.com/foonathan/cppast/blob/f81be80b524a88533f7e5eefd96fe10dc59cc289/include/cppast/cpp_expression.hpp#L139{value_}]]]
}
C_0002228471918600734475 ..> C_0001585653041236922459
C_0002228471918600734475 o- - C_0001585653041236922459 : -type_
C_0000978206085606851269 ..> C_0001585653041236922459
C_0002228471918600734475 <|- - C_0000978206085606851269
C_0001481645313438672561 ..> C_0001585653041236922459
C_0002228471918600734475 <|- - C_0001481645313438672561
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.16+8-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>