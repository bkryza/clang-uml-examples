@startuml
title App::Expression context
package [Base] as C_0000701777446892506059 {
class "Type" as C_0001299587473968259399
class C_0001299587473968259399 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L80{Type}]] {
+Type(const Base::Type & type) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L84{Type}]]]
+Type() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L85{Type}]]]
+~Type() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L87{~Type}]]]
..
+operator=(const Base::Type type) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L114{operator=}]]]
..
+operator!=(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L116{operator!=}]]]
+operator<(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L118{operator<}]]]
+operator<=(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L119{operator<=}]]]
+operator==(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L115{operator==}]]]
+operator>(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L121{operator>}]]]
+operator>=(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L120{operator>=}]]]
..
{static} +badType() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L123{badType}]]]
+createInstance() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L90{createInstance}]]]
{static} +createInstanceByName(const char * TypeName, bool bLoadModule = false) : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L92{createInstanceByName}]]]
{static} +createType(const Base::Type parent, const char * name, Base::Type::instantiationMethod method = nullptr) : const Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L109{createType}]]]
{static} +destruct() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L125{destruct}]]]
{static} +fromKey(unsigned int key) : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L98{fromKey}]]]
{static} +fromName(const char * name) : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L97{fromName}]]]
{static} +getAllDerivedFrom(const Base::Type type, std::vector<Type> & List) : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L103{getAllDerivedFrom}]]]
+getKey() const : unsigned int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L111{getKey}]]]
{static} #getModuleName(const char * ClassName) : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L128{getModuleName}]]]
+getName() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L99{getName}]]]
{static} +getNumTypes() : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L107{getNumTypes}]]]
+getParent() const : const Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L100{getParent}]]]
{static} +getTypeIfDerivedFrom(const char * name, const Base::Type parent, bool bLoadModule = false) : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L105{getTypeIfDerivedFrom}]]]
{static} +importModule(const char * TypeName) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L93{importModule}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L124{init}]]]
+isBad() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L112{isBad}]]]
+isDerivedFrom(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L101{isDerivedFrom}]]]
__
-index : unsigned int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L134{index}]]]
{static} -loadModuleSet : std::set<std::string> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L140{loadModuleSet}]]]
{static} -typedata : std::vector<TypeData *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L138{typedata}]]]
{static} -typemap : std::map<std::string,unsigned int> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/Type.h#L137{typemap}]]]
}
class "BaseClass" as C_0000118442831094660490
class C_0000118442831094660490 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L104{BaseClass}]] {
+BaseClass() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L124{BaseClass}]]]
+BaseClass(const Base::BaseClass &) = default : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L125{BaseClass}]]]
+~BaseClass() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L128{~BaseClass}]]]
..
+operator=(const Base::BaseClass &) = default : Base::BaseClass & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L126{operator=}]]]
..
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L116{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L107{getClassTypeId}]]]
+getPyObject() : PyObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L113{getPyObject}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L108{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L111{init}]]]
{static} #initSubclass(Base::Type & toInit, const char * ClassName, const char * ParentName, Type::instantiationMethod method = nullptr) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L120{initSubclass}]]]
+isDerivedFrom(const Base::Type type) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L109{isDerivedFrom}]]]
+setPyObject(PyObject *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L114{setPyObject}]]]
__
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/Base/BaseClass.h#L118{classTypeId}]]]
}
}
package [App] as C_0002285326295477687690 {
class "PropertyExpressionEngine::ExpressionInfo" as C_0002265584471313809397
class C_0002265584471313809397 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L86{PropertyExpressionEngine##ExpressionInfo}]] {
+operator=(const App::PropertyExpressionEngine::ExpressionInfo & other) : App::PropertyExpressionEngine::ExpressionInfo & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L100{operator=}]]]
..
+ExpressionInfo(std::shared_ptr<App::Expression> expression = std::shared_ptr<App::Expression>()) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L90{ExpressionInfo}]]]
+ExpressionInfo(const App::PropertyExpressionEngine::ExpressionInfo & other) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L95{ExpressionInfo}]]]
__
+busy : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L88{busy}]]]
+expression : std::shared_ptr<App::Expression> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L87{expression}]]]
}
class "DocumentObject" as C_0001679842198945066576
class C_0001679842198945066576 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L96{DocumentObject}]] {
+DocumentObject() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L132{DocumentObject}]]]
+~DocumentObject() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L133{~DocumentObject}]]]
..
+Save(Base::Writer & writer) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L427{Save}]]]
+_addBackLink(App::DocumentObject *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L274{_addBackLink}]]]
+_removeBackLink(App::DocumentObject *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L272{_removeBackLink}]]]
+addDynamicProperty(const char * type, const char * name = nullptr, const char * group = nullptr, const char * doc = nullptr, short attr = 0, bool ro = false, bool hidden = false) : App::Property * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L447{addDynamicProperty}]]]
+adjustRelativeLinks(const std::set<App::DocumentObject *> & inList, std::set<App::DocumentObject *> * visited = nullptr) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L529{adjustRelativeLinks}]]]
+allowDuplicateLabel() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L411{allowDuplicateLabel}]]]
+canLinkProperties() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L408{canLinkProperties}]]]
+canLoadPartial() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L538{canLoadPartial}]]]
+clearExpression(const App::ObjectIdentifier & path) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L433{clearExpression}]]]
+clearOutListCache() const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L235{clearOutListCache}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{create}]]]
+detachFromDocument() : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L146{detachFromDocument}]]]
+enforceRecompute() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L158{enforceRecompute}]]]
#execute() : App::DocumentObjectExecReturn * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L577{execute}]]]
#executeExtensions() : App::DocumentObjectExecReturn * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L582{executeExtensions}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{getClassTypeId}]]]
+getDocument() const : App::Document * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L148{getDocument}]]]
+getExportName(bool forced = false) const : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L140{getExportName}]]]
+getExpression(const App::ObjectIdentifier & path) const : const PropertyExpressionEngine::ExpressionInfo [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L435{getExpression}]]]
+getFirstParent() const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L387{getFirstParent}]]]
+getFullLabel() const : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L144{getFullLabel}]]]
+getFullName() const : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L142{getFullName}]]]
+getGroup() const : App::DocumentObjectGroup * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L261{getGroup}]]]
+getID() const : long [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L138{getID}]]]
+getInList() const : const std::vector<App::DocumentObject *> & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L242{getInList}]]]
+getInListEx(bool recursive) const : std::set<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L258{getInListEx}]]]
+getInListEx(std::set<App::DocumentObject *> & inSet, bool recursive, std::vector<App::DocumentObject *> * inList = nullptr) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L253{getInListEx}]]]
+getInListRecursive() const : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L245{getInListRecursive}]]]
+getLinkedObject(bool recurse = true, Base::Matrix4D * mat = nullptr, bool transform = false, int depth = 0) const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L404{getLinkedObject}]]]
+getNameInDocument() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L136{getNameInDocument}]]]
+getOldLabel() const : const std::string & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L439{getOldLabel}]]]
+getOutList() const : const std::vector<App::DocumentObject *> & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L226{getOutList}]]]
+getOutList(int option) const : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L227{getOutList}]]]
+getOutList(int option, std::vector<App::DocumentObject *> & res) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L228{getOutList}]]]
+getOutListOfProperty(App::Property *) const : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L231{getOutListOfProperty}]]]
+getOutListRecursive() const : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L233{getOutListRecursive}]]]
+getParents(int depth = 0) const : std::vector<std::pair<App::DocumentObject *,std::string>> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L384{getParents}]]]
+getPathsByOutList(App::DocumentObject * to) const : std::vector<std::list<App::DocumentObject *>> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L237{getPathsByOutList}]]]
#getPropertyData() const : const App::PropertyData & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{getPropertyData}]]]
{static} #getPropertyDataPtr() : const App::PropertyData * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{getPropertyDataPtr}]]]
+getPyObject() : PyObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L322{getPyObject}]]]
+getStatus() const : unsigned long [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L179{getStatus}]]]
+getStatusString() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L313{getStatusString}]]]
+getSubObject(const char * subname, PyObject ** pyObj = nullptr, Base::Matrix4D * mat = nullptr, bool transform = true, int depth = 0) const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L352{getSubObject}]]]
+getSubObjectList(const char * subname) const : std::vector<DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L356{getSubObjectList}]]]
+getSubObjects(int reason = 0) const : std::vector<std::string> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L381{getSubObjects}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{getTypeId}]]]
+getViewProviderName() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L115{getViewProviderName}]]]
+getViewProviderNameOverride() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L127{getViewProviderNameOverride}]]]
+getViewProviderNameStored() const : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L441{getViewProviderNameStored}]]]
+hasChildElement() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L207{hasChildElement}]]]
{static} +hasHiddenMarker(const char * subname) : const char * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L565{hasHiddenMarker}]]]
{static} +hiddenMarker() : const std::string & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L563{hiddenMarker}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{init}]]]
+isAttachedToDocument() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L145{isAttachedToDocument}]]]
+isElementVisible(const char * element) const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L204{isElementVisible}]]]
+isError() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L168{isError}]]]
+isExporting() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L184{isExporting}]]]
+isInInList(App::DocumentObject * objToTest) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L266{isInInList}]]]
+isInInListRecursive(App::DocumentObject * objToTest) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L264{isInInListRecursive}]]]
+isInOutList(App::DocumentObject * objToTest) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L270{isInOutList}]]]
+isInOutListRecursive(App::DocumentObject * objToTest) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L268{isInOutListRecursive}]]]
+isRecomputing() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L173{isRecomputing}]]]
+isRemoving() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L177{isRemoving}]]]
+isRestoring() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L175{isRestoring}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L156{isTouched}]]]
+isValid() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L169{isValid}]]]
+mustExecute() const : short [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L304{mustExecute}]]]
+mustRecompute() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L160{mustRecompute}]]]
#onBeforeChange(const App::Property * prop) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L605{onBeforeChange}]]]
+onBeforeChangeLabel(std::string & newLabel) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L419{onBeforeChangeLabel}]]]
#onChanged(const App::Property * prop) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L607{onChanged}]]]
#onDocumentRestored() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L609{onDocumentRestored}]]]
+onLostLinkToObject(App::DocumentObject *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L321{onLostLinkToObject}]]]
#onPropertyStatusChanged(const App::Property & prop, unsigned long oldStatus) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L620{onPropertyStatusChanged}]]]
#onSettingDocument() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L613{onSettingDocument}]]]
#onUndoRedoFinished() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L611{onUndoRedoFinished}]]]
+onUpdateElementReference(const App::Property *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L540{onUpdateElementReference}]]]
-printInvalidLinks() const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L623{printInvalidLinks}]]]
+purgeError() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L171{purgeError}]]]
+purgeTouched() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L162{purgeTouched}]]]
#recompute() : App::DocumentObjectExecReturn * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L569{recompute}]]]
+recomputeFeature(bool recursive = false) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L310{recomputeFeature}]]]
+redirectSubName(std::ostringstream & ss, App::DocumentObject * topParent, App::DocumentObject * child) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L555{redirectSubName}]]]
+removeDynamicProperty(const char * prop) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L445{removeDynamicProperty}]]]
+renameObjectIdentifiers(const std::map<App::ObjectIdentifier,App::ObjectIdentifier> & paths) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L437{renameObjectIdentifiers}]]]
#resetError() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L601{resetError}]]]
+resolve(const char * subname, App::DocumentObject ** parent = nullptr, std::string * childName = nullptr, const char ** subElement = nullptr, PyObject ** pyObj = nullptr, Base::Matrix4D * mat = nullptr, bool transform = true, int depth = 0) const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L464{resolve}]]]
+resolveRelativeLink(std::string & subname, App::DocumentObject *& link, std::string & linkSub) const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L512{resolveRelativeLink}]]]
#setDocument(App::Document * doc) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L602{setDocument}]]]
+setElementVisible(const char * element, bool visible) : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L197{setElementVisible}]]]
#setError() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L600{setError}]]]
+setExpression(const App::ObjectIdentifier & path, std::shared_ptr<App::Expression> expr) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L431{setExpression}]]]
+setStatus(App::ObjectStatus pos, bool on) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L181{setStatus}]]]
#setupObject() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L615{setupObject}]]]
+testIfLinkDAGCompatible(App::PropertyLinkSub & linkTo) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L290{testIfLinkDAGCompatible}]]]
+testIfLinkDAGCompatible(App::PropertyLinkSubList & linksTo) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L289{testIfLinkDAGCompatible}]]]
+testIfLinkDAGCompatible(const std::vector<DocumentObject *> & linksTo) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L288{testIfLinkDAGCompatible}]]]
+testIfLinkDAGCompatible(App::DocumentObject * linkTo) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L287{testIfLinkDAGCompatible}]]]
+testStatus(App::ObjectStatus pos) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L180{testStatus}]]]
+touch(bool noRecompute = false) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L154{touch}]]]
#unsetupObject() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L617{unsetupObject}]]]
__
+ExpressionEngine : App::PropertyExpressionEngine [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L104{ExpressionEngine}]]]
+Label : App::PropertyString [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L102{Label}]]]
+Label2 : App::PropertyString [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L103{Label2}]]]
#PythonObject : Py::SmartPtr [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L627{PythonObject}]]]
#StatusBits : std::bitset<32> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L598{StatusBits}]]]
{static} +StdReturn : App::DocumentObjectExecReturn * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L425{StdReturn}]]]
+Visibility : App::PropertyBool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L107{Visibility}]]]
-_Id : long [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L642{_Id}]]]
-_inList : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L647{_inList}]]]
-_outList : std::vector<App::DocumentObject *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L648{_outList}]]]
-_outListCached : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L650{_outListCached}]]]
-_outListMap : std::unordered_map<const char *,App::DocumentObject *,CStringHasher,CStringHasher> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L649{_outListMap}]]]
#_pDoc : App::Document * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L629{_pDoc}]]]
-_pcViewProviderName : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L639{_pcViewProviderName}]]]
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{classTypeId}]]]
#oldLabel : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L632{oldLabel}]]]
#pcNameInDocument : const std::string * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L635{pcNameInDocument}]]]
{static} -propertyData : App::PropertyData [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L98{propertyData}]]]
+signalBeforeChange : boost::signals2::signal<void (const App::DocumentObject &,const App::Property &)> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L110{signalBeforeChange}]]]
+signalChanged : boost::signals2::signal<void (const App::DocumentObject &,const App::Property &)> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/DocumentObject.h#L112{signalChanged}]]]
}
abstract "Expression" as C_0001726698442140218525
abstract C_0001726698442140218525 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/PropertyExpressionEngine.h#L44{Expression}]] {
+Expression(const App::DocumentObject * _owner) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L120{Expression}]]]
+~Expression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L122{~Expression}]]]
..
#_adjustLinks(const std::set<App::DocumentObject *> &, App::ExpressionVisitor &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L196{_adjustLinks}]]]
#_collectReplacement(std::map<ObjectIdentifier,ObjectIdentifier> &, const App::DocumentObject * parent, App::DocumentObject * oldObj, App::DocumentObject * newObj) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L203{_collectReplacement}]]]
{abstract} #_copy() const = 0 : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L193{_copy}]]]
#_getIdentifiers(std::map<App::ObjectIdentifier,bool> &) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L195{_getIdentifiers}]]]
{abstract} #_getPyValue() const = 0 : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L212{_getPyValue}]]]
#_importSubNames(const ObjectIdentifier::SubNameMap &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L199{_importSubNames}]]]
#_isIndexable() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L192{_isIndexable}]]]
#_moveCells(const App::CellAddress &, int, int, App::ExpressionVisitor &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L210{_moveCells}]]]
#_offsetCells(int, int, App::ExpressionVisitor &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L211{_offsetCells}]]]
#_relabeledDocument(const std::string &, const std::string &, App::ExpressionVisitor &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L198{_relabeledDocument}]]]
#_renameObjectIdentifier(const std::map<ObjectIdentifier,ObjectIdentifier> &, const App::ObjectIdentifier &, App::ExpressionVisitor &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L201{_renameObjectIdentifier}]]]
{abstract} #_toString(std::ostream & ss, bool persistent, int indent = 0) const = 0 : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L194{_toString}]]]
#_updateElementReference(App::DocumentObject *, bool, App::ExpressionVisitor &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L197{_updateElementReference}]]]
#_updateLabelReference(App::DocumentObject *, const std::string &, const char *) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L200{_updateLabelReference}]]]
#_visit(App::ExpressionVisitor &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L213{_visit}]]]
+addComponent(App::Expression::Component * component) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L173{addComponent}]]]
+adjustLinks(const std::set<App::DocumentObject *> & inList) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L159{adjustLinks}]]]
+copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L133{copy}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L116{create}]]]
{static} +createComponent(const std::string & n) : App::Expression::Component * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L177{createComponent}]]]
{static} +createComponent(App::Expression * e1, App::Expression * e2 = nullptr, App::Expression * e3 = nullptr, bool isRange = false) : App::Expression::Component * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L178{createComponent}]]]
+eval() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L126{eval}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L116{getClassTypeId}]]]
+getDepObjects(std::vector<std::string> * labels = nullptr) const : std::map<App::DocumentObject *,bool> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L148{getDepObjects}]]]
+getDepObjects(std::map<App::DocumentObject *,bool> &, std::vector<std::string> * labels = nullptr) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L149{getDepObjects}]]]
+getDeps(int option = DepNormal) const : App::ExpressionDeps [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L146{getDeps}]]]
+getDeps(App::ExpressionDeps & deps, int option = DepNormal) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L145{getDeps}]]]
+getIdentifiers() const : std::map<App::ObjectIdentifier,bool> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L138{getIdentifiers}]]]
+getIdentifiers(std::map<App::ObjectIdentifier,bool> &) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L137{getIdentifiers}]]]
+getOwner() const : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L170{getOwner}]]]
+getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L185{getPyValue}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L116{getTypeId}]]]
+getValueAsAny() const : boost::any [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L183{getValueAsAny}]]]
+hasComponent() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L181{hasComponent}]]]
+importSubNames(const std::map<std::string,std::string> & nameMap) const : App::ExpressionPtr [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L151{importSubNames}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L116{init}]]]
+isSame(const App::Expression & other, bool checkComment = true) const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L187{isSame}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L124{isTouched}]]]
{static} +parse(const App::DocumentObject * owner, const std::string & buffer) : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L131{parse}]]]
+priority() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L135{priority}]]]
+replaceObject(const App::DocumentObject * parent, App::DocumentObject * oldObj, App::DocumentObject * newObj) const : App::ExpressionPtr [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L156{replaceObject}]]]
{abstract} +simplify() const = 0 : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L161{simplify}]]]
+toString(std::ostream & os, bool persistent = false, bool checkPriority = false, int indent = 0) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L129{toString}]]]
+toString(bool persistent = false, bool checkPriority = false, int indent = 0) const : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L128{toString}]]]
+updateLabelReference(App::DocumentObject * obj, const std::string & ref, const char * newLabel) const : App::ExpressionPtr [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L153{updateLabelReference}]]]
+visit(App::ExpressionVisitor & v) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L163{visit}]]]
__
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L116{classTypeId}]]]
+comment : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L221{comment}]]]
#components : App::Expression::ComponentList [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L218{components}]]]
#owner : App::DocumentObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L216{owner}]]]
}
abstract "ExpressionVisitor" as C_0001161651732259613065
abstract C_0001161651732259613065 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ObjectIdentifier.h#L57{ExpressionVisitor}]] {
+~ExpressionVisitor() = default : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L58{~ExpressionVisitor}]]]
..
+aboutToChange() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L60{aboutToChange}]]]
#adjustLinks(App::Expression & e, const std::set<App::DocumentObject *> & inList) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L67{adjustLinks}]]]
+changed() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L61{changed}]]]
#collectReplacement(App::Expression & e, std::map<ObjectIdentifier,ObjectIdentifier> &, const App::DocumentObject * parent, App::DocumentObject * oldObj, App::DocumentObject * newObj) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L71{collectReplacement}]]]
#getIdentifiers(App::Expression & e, std::map<App::ObjectIdentifier,bool> &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L66{getIdentifiers}]]]
+getPropertyLink() : App::PropertyLinkBase * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L63{getPropertyLink}]]]
#importSubNames(App::Expression & e, const ObjectIdentifier::SubNameMap & subNameMap) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L74{importSubNames}]]]
#moveCells(App::Expression & e, const App::CellAddress & address, int rowCount, int colCount) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L77{moveCells}]]]
#offsetCells(App::Expression & e, int rowOffset, int colOffset) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L78{offsetCells}]]]
#relabeledDocument(App::Expression & e, const std::string & oldName, const std::string & newName) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L68{relabeledDocument}]]]
#renameObjectIdentifier(App::Expression & e, const std::map<ObjectIdentifier,ObjectIdentifier> &, const App::ObjectIdentifier &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L69{renameObjectIdentifier}]]]
+reset() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L62{reset}]]]
#updateElementReference(App::Expression & e, App::DocumentObject * feature, bool reverse) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L73{updateElementReference}]]]
#updateLabelReference(App::Expression & e, App::DocumentObject * obj, const std::string & ref, const char * newLabel) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L75{updateLabelReference}]]]
{abstract} +visit(App::Expression & e) = 0 : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L59{visit}]]]
__
}
enum "Expression##DepOption" as C_0000750274693666718562
enum C_0000750274693666718562 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L140{Expression##DepOption}]] {
DepNormal
DepHidden
DepAll
}
class "Expression::Exception" as C_0000706309232479511557
class C_0000706309232479511557 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L165{Expression##Exception}]] {
+Exception(const char * sMessage) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/Expression.h#L167{Exception}]]]
__
}
class "Expression::Component" as C_0000304021421058513917
class C_0000304021421058513917 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L42{Expression##Component}]] {
+operator=(const App::Expression::Component &) = deleted : App::Expression::Component & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L53{operator=}]]]
..
+Component(const std::string & n) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L48{Component}]]]
+Component(App::Expression * e1, App::Expression * e2, App::Expression * e3, bool isRange = false) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L49{Component}]]]
+Component(const ObjectIdentifier::Component & comp) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L50{Component}]]]
+Component(const App::Expression::Component & other) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L51{Component}]]]
+copy() const : App::Expression::Component * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L58{copy}]]]
+del(const App::Expression * owner, Py::Object & pyobj) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L63{del}]]]
+eval() const : App::Expression::Component * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L59{eval}]]]
+get(const App::Expression * owner, const Py::Object & pyobj) const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L61{get}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L56{isTouched}]]]
+set(const App::Expression * owner, Py::Object & pyobj, const Py::Object & value) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L62{set}]]]
+toString(std::ostream & ss, bool persistent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L57{toString}]]]
+visit(App::ExpressionVisitor & v) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L55{visit}]]]
+~Component() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L52{~Component}]]]
__
+comp : ObjectIdentifier::Component [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L43{comp}]]]
+e1 : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L44{e1}]]]
+e2 : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L45{e2}]]]
+e3 : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L46{e3}]]]
}
class "UnitExpression" as C_0002054172480387252704
class C_0002054172480387252704 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L73{UnitExpression}]] {
+UnitExpression(const App::DocumentObject * _owner = nullptr, const Base::Quantity & _quantity = Base::Quantity(), const std::string & _unitStr = std::string()) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L76{UnitExpression}]]]
+~UnitExpression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L78{~UnitExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L97{_copy}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L99{_getPyValue}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L98{_toString}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L74{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L74{getClassTypeId}]]]
+getQuantity() const : const Base::Quantity & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L90{getQuantity}]]]
+getScaler() const : double [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L94{getScaler}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L74{getTypeId}]]]
+getUnit() const : const Base::Unit & [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L88{getUnit}]]]
+getUnitString() const : const std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L92{getUnitString}]]]
+getValue() const : double [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L86{getValue}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L74{init}]]]
+setQuantity(const Base::Quantity & _quantity) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L84{setQuantity}]]]
+setUnit(const Base::Quantity & _quantity) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L82{setUnit}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L80{simplify}]]]
__
#cache : PyObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L102{cache}]]]
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L74{classTypeId}]]]
-quantity : Base::Quantity [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L105{quantity}]]]
-unitStr : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L106{unitStr}]]]
}
class "OperatorExpression" as C_0000904767571194909825
class C_0000904767571194909825 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L154{OperatorExpression}]] {
+OperatorExpression(const App::DocumentObject * _owner = nullptr, App::Expression * _left = nullptr, App::OperatorExpression::Operator _op = NONE, App::Expression * _right = nullptr) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L175{OperatorExpression}]]]
+~OperatorExpression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L177{~OperatorExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L192{_copy}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L194{_getPyValue}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L196{_toString}]]]
#_visit(App::ExpressionVisitor & v) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L198{_visit}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L155{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L155{getClassTypeId}]]]
+getLeft() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L187{getLeft}]]]
+getOperator() const : App::OperatorExpression::Operator [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L185{getOperator}]]]
+getRight() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L189{getRight}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L155{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L155{init}]]]
#isCommutative() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L200{isCommutative}]]]
#isLeftAssociative() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L202{isLeftAssociative}]]]
#isRightAssociative() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L204{isRightAssociative}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L179{isTouched}]]]
+priority() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L183{priority}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L181{simplify}]]]
__
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L155{classTypeId}]]]
#left : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L207{left}]]]
#op : App::OperatorExpression::Operator [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L206{op}]]]
#right : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L208{right}]]]
}
class "ConditionalExpression" as C_0002009305008265606506
class C_0002009305008265606506 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L211{ConditionalExpression}]] {
+ConditionalExpression(const App::DocumentObject * _owner = nullptr, App::Expression * _condition = nullptr, App::Expression * _trueExpr = nullptr, App::Expression * _falseExpr = nullptr) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L214{ConditionalExpression}]]]
+~ConditionalExpression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L216{~ConditionalExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L225{_copy}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L228{_getPyValue}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L227{_toString}]]]
#_visit(App::ExpressionVisitor & v) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L226{_visit}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L212{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L212{getClassTypeId}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L212{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L212{init}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L218{isTouched}]]]
+priority() const : int [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L222{priority}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L220{simplify}]]]
__
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L212{classTypeId}]]]
#condition : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L232{condition}]]]
#falseExpr : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L234{falseExpr}]]]
#trueExpr : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L233{trueExpr}]]]
}
class "PyObjectExpression" as C_0000313527682507228118
class C_0000313527682507228118 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L402{PyObjectExpression}]] {
+PyObjectExpression(const App::DocumentObject * _owner = nullptr, PyObject * pyobj = nullptr, bool owned = false) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L406{PyObjectExpression}]]]
+~PyObjectExpression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L412{~PyObjectExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L419{_copy}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L421{_getPyValue}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L420{_toString}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L403{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L403{getClassTypeId}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L403{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L403{init}]]]
+setPyValue(Py::Object pyobj) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L414{setPyValue}]]]
+setPyValue(PyObject * pyobj, bool owned = false) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L415{setPyValue}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L416{simplify}]]]
__
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L403{classTypeId}]]]
#pyObj : PyObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L424{pyObj}]]]
}
class "StringExpression" as C_0001606491078188674344
class C_0001606491078188674344 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L432{StringExpression}]] {
+StringExpression(const App::DocumentObject * _owner = nullptr, const std::string & _text = std::string()) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L435{StringExpression}]]]
+~StringExpression() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L436{~StringExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L442{_copy}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L444{_getPyValue}]]]
#_isIndexable() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L445{_isIndexable}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L443{_toString}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L433{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L433{getClassTypeId}]]]
+getText() const : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L440{getText}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L433{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L433{init}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L438{simplify}]]]
__
-cache : PyObject * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L449{cache}]]]
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L433{classTypeId}]]]
-text : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L448{text}]]]
}
class "RangeExpression" as C_0000352171901635375480
class C_0000352171901635375480 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L452{RangeExpression}]] {
+RangeExpression(const App::DocumentObject * _owner = nullptr, const std::string & begin = std::string(), const std::string & end = std::string()) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L455{RangeExpression}]]]
+~RangeExpression() = default : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L457{~RangeExpression}]]]
..
#_copy() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L466{_copy}]]]
#_getIdentifiers(std::map<App::ObjectIdentifier,bool> &) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L469{_getIdentifiers}]]]
#_getPyValue() const : Py::Object [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L468{_getPyValue}]]]
#_moveCells(const App::CellAddress &, int, int, App::ExpressionVisitor &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L472{_moveCells}]]]
#_offsetCells(int, int, App::ExpressionVisitor &) : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L473{_offsetCells}]]]
#_renameObjectIdentifier(const std::map<ObjectIdentifier,ObjectIdentifier> &, const App::ObjectIdentifier &, App::ExpressionVisitor &) : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L470{_renameObjectIdentifier}]]]
#_toString(std::ostream & ss, bool persistent, int indent) const : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L467{_toString}]]]
{static} +create() : void * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L453{create}]]]
{static} +getClassTypeId() : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L453{getClassTypeId}]]]
+getRange() const : App::Range [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L463{getRange}]]]
+getTypeId() const : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L453{getTypeId}]]]
{static} +init() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L453{init}]]]
+isTouched() const : bool [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L459{isTouched}]]]
+simplify() const : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L461{simplify}]]]
__
#begin : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L476{begin}]]]
{static} -classTypeId : Base::Type [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L453{classTypeId}]]]
#end : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L477{end}]]]
}
package [ExpressionParser] as C_0000905861183269213715 {
class "semantic_type" as C_0000674100793454684111
class C_0000674100793454684111 [[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L502{semantic_type}]] {
+semantic_type() : void [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L523{semantic_type}]]]
__
+arguments : std::vector<Expression *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L518{arguments}]]]
+component : Expression::Component * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L508{component}]]]
+components : std::deque<ObjectIdentifier::Component> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L511{components}]]]
+constant : semantic_type::(anonymous_14449001) [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L517{constant}]]]
+expr : App::Expression * [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L509{expr}]]]
+func : std::pair<FunctionExpression::Function,std::string> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L521{func}]]]
+fvalue : double [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L513{fvalue}]]]
+ivalue : long long [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L512{ivalue}]]]
+list : std::vector<Expression *> [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L519{list}]]]
+path : App::ObjectIdentifier [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L510{path}]]]
+quantity : semantic_type::(anonymous_14428700) [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L507{quantity}]]]
+string : std::string [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L520{string}]]]
+string_or_identifier : ObjectIdentifier::String [[[https://github.com/FreeCAD/FreeCAD/blob/f6708547a9bb3f71a4aaade12109f511a72c207c/src/App/ExpressionParser.h#L522{string_or_identifier}]]]
}
}
package [Meta] as C_0002283864520314866053 {
}
}
C_0000118442831094660490 --> C_0001299587473968259399 : -classTypeId
C_0002265584471313809397 --> C_0001726698442140218525 : +expression
C_0001679842198945066576 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 --> C_0001679842198945066576 : #owner
C_0001726698442140218525 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <.. C_0001161651732259613065 : +<<friend>>
C_0000118442831094660490 <|-- C_0001726698442140218525
C_0000750274693666718562 --+ C_0001726698442140218525
C_0000706309232479511557 --+ C_0001726698442140218525
C_0000304021421058513917 --+ C_0001726698442140218525
C_0000304021421058513917 --> C_0001726698442140218525 : +e1
C_0000304021421058513917 --> C_0001726698442140218525 : +e2
C_0000304021421058513917 --> C_0001726698442140218525 : +e3
C_0002054172480387252704 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <|-- C_0002054172480387252704
C_0000904767571194909825 --> C_0001726698442140218525 : #left
C_0000904767571194909825 --> C_0001726698442140218525 : #right
C_0000904767571194909825 --> C_0001299587473968259399 : -classTypeId
C_0002054172480387252704 <|-- C_0000904767571194909825
C_0002009305008265606506 --> C_0001726698442140218525 : #condition
C_0002009305008265606506 --> C_0001726698442140218525 : #trueExpr
C_0002009305008265606506 --> C_0001726698442140218525 : #falseExpr
C_0002009305008265606506 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <|-- C_0002009305008265606506
C_0000313527682507228118 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <|-- C_0000313527682507228118
C_0001606491078188674344 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <|-- C_0001606491078188674344
C_0000352171901635375480 --> C_0001299587473968259399 : -classTypeId
C_0001726698442140218525 <|-- C_0000352171901635375480
C_0000674100793454684111 --> C_0001726698442140218525 : +expr

'Generated with clang-uml, version 0.4.0-14-g26abb71
'LLVM version Ubuntu clang version 15.0.7
@enduml
