@startuml
title std::list emplace() sequence diagram
participant "clanguml_examples::list::emplace()" as C_0016263699868639456484 [[{emplace}]]
activate C_0016263699868639456484
participant "std::list<int,std::allocator<int>>" as C_0012688964058898021606
C_0016263699868639456484 -> C_0012688964058898021606 [[{}]] : list()
activate C_0012688964058898021606
deactivate C_0012688964058898021606
C_0016263699868639456484 -> C_0012688964058898021606 [[{}]] : end()
activate C_0012688964058898021606
participant "std::_List_iterator<int>" as C_0015791400372507591026
C_0012688964058898021606 -> C_0015791400372507591026 : _List_iterator(__detail::_List_node_base *)
activate C_0015791400372507591026
deactivate C_0015791400372507591026
C_0012688964058898021606 --> C_0016263699868639456484
deactivate C_0012688964058898021606
participant "std::_List_const_iterator<int>" as C_0016481197395156723564
C_0016263699868639456484 -> C_0016481197395156723564 [[{}]] : _List_const_iterator(const iterator &)
activate C_0016481197395156723564
deactivate C_0016481197395156723564
C_0016263699868639456484 -> C_0012688964058898021606 [[{}]] : emplace(const_iterator,int &&)
activate C_0012688964058898021606
C_0012688964058898021606 -> C_0012688964058898021606 : _M_create_node(int &&)
activate C_0012688964058898021606
participant "std::_List_base<int,std::allocator<int>>" as C_0008221085376594923905
C_0012688964058898021606 -> C_0008221085376594923905 : _M_get_node()
activate C_0008221085376594923905
participant "std::allocator_traits<std::allocator<std::_List_node<int>>>" as C_0001551730410201807116
C_0008221085376594923905 -> C_0001551730410201807116 : __allocate(allocator_type &,size_type)__
activate C_0001551730410201807116
participant "std::__new_allocator<std::_List_node<int>>" as C_0006573487053199071022
C_0001551730410201807116 -> C_0006573487053199071022 : allocate(size_type,const void *)
activate C_0006573487053199071022
alt
C_0006573487053199071022 -> C_0006573487053199071022 : **[**_M_max_size() const**]**
activate C_0006573487053199071022
C_0006573487053199071022 --> C_0006573487053199071022
deactivate C_0006573487053199071022
note over C_0006573487053199071022
_GLIBCXX_RESOLVE_LIB_DEFECTS
3190. allocator::allocate
sometimes returns too little
storage
end note
alt
participant "std::__throw_bad_array_new_length()" as C_0017195084916193522427
C_0006573487053199071022 -> C_0017195084916193522427 : 
activate C_0017195084916193522427
deactivate C_0017195084916193522427
end
participant "std::__throw_bad_alloc()" as C_0013352003183979330430
C_0006573487053199071022 -> C_0013352003183979330430 : 
activate C_0013352003183979330430
deactivate C_0013352003183979330430
end
alt
C_0006573487053199071022 --> C_0001551730410201807116
end
C_0006573487053199071022 --> C_0001551730410201807116
deactivate C_0006573487053199071022
C_0001551730410201807116 --> C_0008221085376594923905
deactivate C_0001551730410201807116
C_0008221085376594923905 --> C_0012688964058898021606
deactivate C_0008221085376594923905
C_0012688964058898021606 -> C_0008221085376594923905 : _M_get_Node_allocator()
activate C_0008221085376594923905
C_0008221085376594923905 --> C_0012688964058898021606
deactivate C_0008221085376594923905
participant "std::__allocated_ptr<std::allocator<std::_List_node<int>>>" as C_0001989690290086399833
C_0012688964058898021606 -> C_0001989690290086399833 : __allocated_ptr(std::allocator<std::_List_node<int>> &,pointer)
activate C_0001989690290086399833
participant "std::__addressof<std::allocator<std::_List_node<int>>>(std::allocator<std::_List_node<int>> &)" as C_0001314452755804900396
C_0001989690290086399833 -> C_0001314452755804900396 : 
activate C_0001314452755804900396
deactivate C_0001314452755804900396
deactivate C_0001989690290086399833
participant "std::_List_node<int>" as C_0011620124836104627274
C_0012688964058898021606 -> C_0011620124836104627274 : _M_valptr()
activate C_0011620124836104627274
participant "__gnu_cxx::__aligned_membuf<int>" as C_0001386050265178105811
C_0011620124836104627274 -> C_0001386050265178105811 : _M_ptr()
activate C_0001386050265178105811
C_0001386050265178105811 -> C_0001386050265178105811 : _M_addr()
activate C_0001386050265178105811
C_0001386050265178105811 --> C_0001386050265178105811
deactivate C_0001386050265178105811
C_0001386050265178105811 --> C_0011620124836104627274
deactivate C_0001386050265178105811
C_0011620124836104627274 --> C_0012688964058898021606
deactivate C_0011620124836104627274
C_0012688964058898021606 -> C_0001551730410201807116 : __construct(allocator_type &,int *,int &&)__
activate C_0001551730410201807116
C_0001551730410201807116 -> C_0006573487053199071022 : construct(int *,int &&)
activate C_0006573487053199071022
deactivate C_0006573487053199071022
deactivate C_0001551730410201807116
C_0012688964058898021606 -> C_0001989690290086399833 : operator=(std::nullptr_t)
activate C_0001989690290086399833
C_0001989690290086399833 --> C_0012688964058898021606
deactivate C_0001989690290086399833
C_0012688964058898021606 --> C_0012688964058898021606
deactivate C_0012688964058898021606
C_0012688964058898021606 -> C_0016481197395156723564 : _M_const_cast() const
activate C_0016481197395156723564
C_0016481197395156723564 -> C_0015791400372507591026 : _List_iterator(__detail::_List_node_base *)
activate C_0015791400372507591026
deactivate C_0015791400372507591026
C_0016481197395156723564 --> C_0012688964058898021606
deactivate C_0016481197395156723564
participant "std::__detail::_List_node_base" as C_0003061237274580542436
C_0012688964058898021606 -> C_0003061237274580542436 : _M_hook(_List_node_base *const)
activate C_0003061237274580542436
deactivate C_0003061237274580542436
C_0012688964058898021606 -> C_0008221085376594923905 : _M_inc_size(size_t)
activate C_0008221085376594923905
deactivate C_0008221085376594923905
C_0012688964058898021606 -> C_0015791400372507591026 : _List_iterator(__detail::_List_node_base *)
activate C_0015791400372507591026
deactivate C_0015791400372507591026
C_0012688964058898021606 --> C_0016263699868639456484
deactivate C_0012688964058898021606
deactivate C_0016263699868639456484

'Generated with clang-uml, version 0.6.1
'LLVM version Ubuntu clang version 19.1.1 (1ubuntu1)
@enduml
