@startuml
class "type_list<First,Other...>" as C_0001723716587279733623
class C_0001723716587279733623 {
}
class "type_list<Other...>" as C_0000401973545844492876
class C_0000401973545844492876 {
}
class "type_list<Type,Other...>" as C_0000496685335806935509
class C_0000496685335806935509 {
}
class "type_list" as C_0000816653833137337534
class C_0000816653833137337534 {
}
class "type_list<Type...>" as C_0000150299823092418682
class C_0000150299823092418682 {
}
class "value_list<Value,Other...>" as C_0001276342508473126665
class C_0001276342508473126665 {
}
class "value_list<Other...>" as C_0000669672540584988414
class C_0000669672540584988414 {
}
class "value_list<Value>" as C_0000114548431562228752
class C_0000114548431562228752 {
}
class "internal::dense_map_node<Key,Type>" as C_0001949040226502523653
class C_0001949040226502523653 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31{dense_map_node}]] {
+dense_map_node<Key, Type><Args...>(const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator,Args...>(std::allocator_arg_t , const Allocator & allocator, const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t , const Allocator & allocator, const dense_map_node<Key,Type> & other) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t , const Allocator & allocator, dense_map_node<Key,Type> && other) : void
+next : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54{next}]]]
+element : value_type [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55{element}]]]
}
class "internal::dense_map_iterator<It>" as C_0000861079117123945586
class C_0000861079117123945586 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
+dense_map_iterator<It>() : void
+dense_map_iterator<It>(const It iter) : void
+operator++() : dense_map_iterator<It> &
+operator++(int ) : dense_map_iterator<It>
+operator--() : dense_map_iterator<It> &
+operator--(int ) : dense_map_iterator<It>
+operator+=(const difference_type value) : dense_map_iterator<It> &
+operator+(const difference_type value) const : dense_map_iterator<It>
+operator-=(const difference_type value) : dense_map_iterator<It> &
+operator-(const difference_type value) const : dense_map_iterator<It>
+operator[](const difference_type value) const : reference
+operator->() const : pointer
+operator*() const : reference
+dense_map_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141{it}]]]
}
class "internal::dense_map_local_iterator<It>" as C_0002151284549161307803
class C_0002151284549161307803 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
+dense_map_local_iterator<It>() : void
+dense_map_local_iterator<It>(It iter, const std::size_t pos) : void
+operator++() : dense_map_local_iterator<It> &
+operator++(int ) : dense_map_local_iterator<It>
+operator->() const : pointer
+operator*() const : reference
+index() const : std::size_t
+dense_map_local_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_local_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230{offset}]]]
}
class "internal::dense_map_iterator<>" as C_0001271452795922285914
class C_0001271452795922285914 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61{dense_map_iterator}]] {
}
class "internal::dense_map_local_iterator<>" as C_0002270315657488311861
class C_0002270315657488311861 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182{dense_map_local_iterator}]] {
}
class "internal::dense_set_iterator<It>" as C_0002029187173053297188
class C_0002029187173053297188 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
+dense_set_iterator<It>() : void
+dense_set_iterator<It>(const It iter) : void
+operator++() : dense_set_iterator<It> &
+operator++(int ) : dense_set_iterator<It>
+operator--() : dense_set_iterator<It> &
+operator--(int ) : dense_set_iterator<It>
+operator+=(const difference_type value) : dense_set_iterator<It> &
+operator+(const difference_type value) const : dense_set_iterator<It>
+operator-=(const difference_type value) : dense_set_iterator<It> &
+operator-(const difference_type value) const : dense_set_iterator<It>
+operator[](const difference_type value) const : reference
+operator->() const : pointer
+operator*() const : reference
+dense_set_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109{it}]]]
}
class "internal::dense_set_local_iterator<It>" as C_0001736854889005654369
class C_0001736854889005654369 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
+dense_set_local_iterator<It>() : void
+dense_set_local_iterator<It>(It iter, const std::size_t pos) : void
+operator++() : dense_set_local_iterator<It> &
+operator++(int ) : dense_set_local_iterator<It>
+operator->() const : pointer
+operator*() const : reference
+index() const : std::size_t
+dense_set_local_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_local_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195{offset}]]]
}
class "internal::dense_set_local_iterator<>" as C_0000377880092827030616
class C_0000377880092827030616 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150{dense_set_local_iterator}]] {
}
class "internal::dense_set_iterator<>" as C_0000515821743975700101
class C_0000515821743975700101 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32{dense_set_iterator}]] {
}
class "compressed_pair<std::vector<std::size_t>,dense_map::hasher>" as C_0001686486826919845415
class C_0001686486826919845415 {
}
class "compressed_pair<std::vector<internal::dense_map_node<Key,Type>>,dense_map::key_equal>" as C_0000507249114974527684
class C_0000507249114974527684 {
}
class "dense_map<Key,Type,Hash=std::hash<Key>,KeyEqual=std::equal_to<Key>,Allocator=std::allocator<std::pair<const Key, Type> >>" as C_0001073675684695097120
class C_0001073675684695097120 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264{dense_map}]] {
-move_and_pop(const std::size_t pos) : void
-rehash_if_required() : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>() : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const hasher & hash, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const hasher & hash = hasher{}, const key_equal & equal = key_equal{}, const allocator_type & allocator = allocator_type{}) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & ) = default : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && ) = default : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && other, const allocator_type & allocator) : void
+operator=(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & ) = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
+operator=(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && ) = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
+get_allocator() const : allocator_type
+cbegin() const : const_iterator
+begin() const : const_iterator
+begin() : iterator
+cend() const : const_iterator
+end() const : const_iterator
+end() : iterator
+empty() const : bool
+size() const : size_type
+max_size() const : size_type
+clear() : void
+insert(const value_type & value) : std::pair<iterator,bool>
+insert(value_type && value) : std::pair<iterator,bool>
+erase(const_iterator pos) : iterator
+erase(const_iterator first, const_iterator last) : iterator
+erase(const key_type & key) : size_type
+swap(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other) : void
+at(const key_type & key) : mapped_type &
+at(const key_type & key) const : const mapped_type &
+operator[](const key_type & key) : mapped_type &
+operator[](key_type && key) : mapped_type &
+count(const key_type & key) const : size_type
+find(const key_type & key) : iterator
+find(const key_type & key) const : const_iterator
+equal_range(const key_type & key) : std::pair<iterator,iterator>
+equal_range(const key_type & key) const : std::pair<const_iterator,const_iterator>
+contains(const key_type & key) const : bool
+cbegin(const size_type index) const : const_local_iterator
+begin(const size_type index) const : const_local_iterator
+begin(const size_type index) : local_iterator
+cend(const size_type index) const : const_local_iterator
+end(const size_type index) const : const_local_iterator
+end(const size_type index) : local_iterator
+bucket_count() const : size_type
+max_bucket_count() const : size_type
+bucket_size(const size_type index) const : size_type
+bucket(const key_type & key) const : size_type
+load_factor() const : float
+max_load_factor() const : float
+max_load_factor(const float value) : void
+rehash(const size_type cnt) : void
+reserve(const size_type cnt) : void
+hash_function() const : hasher
+key_eq() const : key_equal
-key_to_bucket<Other>(const Other & key) : std::size_t
-constrained_find<Other>(const Other & key, std::size_t bucket) : auto
-constrained_find<Other>(const Other & key, std::size_t bucket) : auto
-insert_or_do_nothing<Other,Args...>(Other && key, Args &&... args) : auto
-insert_or_overwrite<Other,Arg>(Other && key, Arg && value) : auto
+insert<Arg>(Arg && value) : std::enable_if_t<std::is_constructible_v<value_type, Arg &&>, std::pair<iterator, _Bool> >
+insert<It>(It first, It last) : void
+insert_or_assign<Arg>(const key_type & key, Arg && value) : std::pair<iterator, _Bool>
+insert_or_assign<Arg>(key_type && key, Arg && value) : std::pair<iterator, _Bool>
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+try_emplace<Args...>(const key_type & key, Args &&... args) : std::pair<iterator, _Bool>
+try_emplace<Args...>(key_type && key, Args &&... args) : std::pair<iterator, _Bool>
+count<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+find<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+equal_range<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+equal_range<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+contains<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
-sparse : compressed_pair<sparse_container_type,hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035{sparse}]]]
-packed : compressed_pair<packed_container_type,key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036{packed}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037{threshold}]]]
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266{minimum_capacity}]]]
}
class "dense_map<Key,Type,=std::hash<Key>,=std::equal_to<Key>,=std::allocator<std::pair<const Key, Type> >>" as C_0001503042528880026519
class C_0001503042528880026519 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15{dense_map}]] {
}
class "dense_set<Type,=std::hash<Type>,=std::equal_to<Type>,=std::allocator<Type>>" as C_0002296068478642625070
class C_0002296068478642625070 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22{dense_set}]] {
}
class "compressed_pair<std::vector<std::size_t>,dense_set::hasher>" as C_0002082989189680990643
class C_0002082989189680990643 {
}
class "compressed_pair<std::vector<std::pair<std::size_t,Type>>,dense_set::key_equal>" as C_0001611725919328905677
class C_0001611725919328905677 {
}
class "dense_set<Type,Hash=std::hash<Type>,KeyEqual=std::equal_to<Type>,Allocator=std::allocator<Type>>" as C_0001428356275870265271
class C_0001428356275870265271 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228{dense_set}]] {
-move_and_pop(const std::size_t pos) : void
-rehash_if_required() : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>() : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const hasher & hash, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const hasher & hash = hasher{}, const key_equal & equal = key_equal{}, const allocator_type & allocator = allocator_type{}) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & ) = default : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && ) = default : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && other, const allocator_type & allocator) : void
+operator=(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & ) = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
+operator=(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && ) = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
+get_allocator() const : allocator_type
+cbegin() const : const_iterator
+begin() const : const_iterator
+begin() : iterator
+cend() const : const_iterator
+end() const : const_iterator
+end() : iterator
+empty() const : bool
+size() const : size_type
+max_size() const : size_type
+clear() : void
+insert(const value_type & value) : std::pair<iterator,bool>
+insert(value_type && value) : std::pair<iterator,bool>
+erase(const_iterator pos) : iterator
+erase(const_iterator first, const_iterator last) : iterator
+erase(const value_type & value) : size_type
+swap(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other) : void
+count(const value_type & key) const : size_type
+find(const value_type & value) : iterator
+find(const value_type & value) const : const_iterator
+equal_range(const value_type & value) : std::pair<iterator,iterator>
+equal_range(const value_type & value) const : std::pair<const_iterator,const_iterator>
+contains(const value_type & value) const : bool
+cbegin(const size_type index) const : const_local_iterator
+begin(const size_type index) const : const_local_iterator
+begin(const size_type index) : local_iterator
+cend(const size_type index) const : const_local_iterator
+end(const size_type index) const : const_local_iterator
+end(const size_type index) : local_iterator
+bucket_count() const : size_type
+max_bucket_count() const : size_type
+bucket_size(const size_type index) const : size_type
+bucket(const value_type & value) const : size_type
+load_factor() const : float
+max_load_factor() const : float
+max_load_factor(const float value) : void
+rehash(const size_type cnt) : void
+reserve(const size_type cnt) : void
+hash_function() const : hasher
+key_eq() const : key_equal
-value_to_bucket<Other>(const Other & value) : std::size_t
-constrained_find<Other>(const Other & value, std::size_t bucket) : auto
-constrained_find<Other>(const Other & value, std::size_t bucket) : auto
-insert_or_do_nothing<Other>(Other && value) : auto
+insert<It>(It first, It last) : void
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+count<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+find<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+equal_range<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+equal_range<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+contains<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
-sparse : compressed_pair<sparse_container_type,hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888{sparse}]]]
-packed : compressed_pair<packed_container_type,key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889{packed}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890{threshold}]]]
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230{minimum_capacity}]]]
}
C_0001723716587279733623 ..|> C_0000150299823092418682
C_0000401973545844492876 ..|> C_0001723716587279733623
C_0000496685335806935509 ..|> C_0001723716587279733623
C_0000150299823092418682 ..|> C_0001723716587279733623
C_0000507249114974527684 ..> C_0001949040226502523653
C_0001073675684695097120 o-- C_0001686486826919845415 : -sparse
C_0001073675684695097120 o-- C_0000507249114974527684 : -packed
C_0002082989189680990643 ..|> C_0001686486826919845415
C_0001428356275870265271 o-- C_0002082989189680990643 : -sparse
C_0001428356275870265271 o-- C_0001611725919328905677 : -packed

'Generated with clang-uml, version 0.3.5-2-g7e9944c
'LLVM version Ubuntu clang version 16.0.1 (++20230328073357+42d1b276f779-1~exp1~20230328073502.65)
@enduml
