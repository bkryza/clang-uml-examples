<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1639px" preserveAspectRatio="none" style="width:6723px;height:1639px;" version="1.1" viewBox="0 0 6723 1639" width="6723px" zoomAndPan="magnify"><defs><filter height="300%" id="fpfp2r9bky4xd" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[b82c2f0aad354ea181f7b1fd379c5c11]
class C_0001949040226502523653--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31" target="_top" title="dense_map_node" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31" xlink:show="new" xlink:title="dense_map_node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="124.8281" id="C_0001949040226502523653" style="stroke: #A80036; stroke-width: 1.5;" width="846" x="31" y="493.5"/><ellipse cx="336.25" cy="509.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M339.2188,515.1406 Q338.6406,515.4375 338,515.5781 Q337.3594,515.7344 336.6563,515.7344 Q334.1563,515.7344 332.8281,514.0938 Q331.5156,512.4375 331.5156,509.3125 Q331.5156,506.1875 332.8281,504.5313 Q334.1563,502.875 336.6563,502.875 Q337.3594,502.875 338,503.0313 Q338.6563,503.1875 339.2188,503.4844 L339.2188,506.2031 Q338.5938,505.625 338,505.3594 Q337.4063,505.0781 336.7813,505.0781 Q335.4375,505.0781 334.75,506.1563 Q334.0625,507.2188 334.0625,509.3125 Q334.0625,511.4063 334.75,512.4844 Q335.4375,513.5469 336.7813,513.5469 Q337.4063,513.5469 338,513.2813 Q338.5938,513 339.2188,512.4219 L339.2188,515.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="166" x="356.75" y="513.6543">internal::dense_map_node</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="59" x="821" y="490.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="822" y="502.6387">Key,Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="32" x2="876" y1="525.5" y2="525.5"/><ellipse cx="42" cy="536.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="490" x="51" y="539.7104">dense_map_node&lt;Key, Type&gt;&lt;Args...&gt;(const std::size_t pos, Args &amp;&amp;... args) : void</text><ellipse cx="42" cy="549.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="820" x="51" y="552.5151">dense_map_node&lt;Key, Type&gt;&lt;Allocator,Args...&gt;(std::allocator_arg_t, const Allocator &amp; allocator, const std::size_t pos, Args &amp;&amp;... args) : void</text><ellipse cx="42" cy="562.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="812" x="51" y="565.3198">dense_map_node&lt;Key, Type&gt;&lt;Allocator&gt;(std::allocator_arg_t, const Allocator &amp; allocator, const dense_map_node&lt;Key,Type&gt; &amp; other) : void</text><ellipse cx="42" cy="574.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="787" x="51" y="578.1245">dense_map_node&lt;Key, Type&gt;&lt;Allocator&gt;(std::allocator_arg_t, const Allocator &amp; allocator, dense_map_node&lt;Key,Type&gt; &amp;&amp; other) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="32" x2="876" y1="584.7188" y2="584.7188"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" target="_top" title="element" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" xlink:show="new" xlink:title="element" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="37" y="590.7188"/><ellipse cx="42" cy="595.7188" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" target="_top" title="element" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" xlink:show="new" xlink:title="element" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="51" y="598.9292">element : internal::dense_map_node::value_type</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" target="_top" title="next" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" xlink:show="new" xlink:title="next" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="37" y="603.5234"/><ellipse cx="42" cy="608.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" target="_top" title="next" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" xlink:show="new" xlink:title="next" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="51" y="611.7339">next : std::size_t</text></a><!--MD5=[02abd6e36b2bbb0c3d623c776acfbe6d]
class C_0001376588142308052157--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001376588142308052157" style="stroke: #A80036; stroke-width: 1.5;" width="251" x="1996.5" y="1272"/><ellipse cx="2011.5" cy="1288" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2014.4688,1293.6406 Q2013.8906,1293.9375 2013.25,1294.0781 Q2012.6094,1294.2344 2011.9063,1294.2344 Q2009.4063,1294.2344 2008.0781,1292.5938 Q2006.7656,1290.9375 2006.7656,1287.8125 Q2006.7656,1284.6875 2008.0781,1283.0313 Q2009.4063,1281.375 2011.9063,1281.375 Q2012.6094,1281.375 2013.25,1281.5313 Q2013.9063,1281.6875 2014.4688,1281.9844 L2014.4688,1284.7031 Q2013.8438,1284.125 2013.25,1283.8594 Q2012.6563,1283.5781 2012.0313,1283.5781 Q2010.6875,1283.5781 2010,1284.6563 Q2009.3125,1285.7188 2009.3125,1287.8125 Q2009.3125,1289.9063 2010,1290.9844 Q2010.6875,1292.0469 2012.0313,1292.0469 Q2012.6563,1292.0469 2013.25,1291.7813 Q2013.8438,1291.5 2014.4688,1290.9219 L2014.4688,1293.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="2025.5" y="1292.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="36" x="2214.5" y="1269"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="34" x="2215.5" y="1281.1387">Other</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1997.5" x2="2246.5" y1="1304" y2="1304"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1997.5" x2="2246.5" y1="1312" y2="1312"/></a><!--MD5=[bd216884ea10f16c6140157bd4dd90d3]
class C_0000861079117123945586--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="248.0703" id="C_0000861079117123945586" style="stroke: #A80036; stroke-width: 1.5;" width="1112" x="1566" y="1380"/><ellipse cx="2020.75" cy="1396" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2023.7188,1401.6406 Q2023.1406,1401.9375 2022.5,1402.0781 Q2021.8594,1402.2344 2021.1563,1402.2344 Q2018.6563,1402.2344 2017.3281,1400.5938 Q2016.0156,1398.9375 2016.0156,1395.8125 Q2016.0156,1392.6875 2017.3281,1391.0313 Q2018.6563,1389.375 2021.1563,1389.375 Q2021.8594,1389.375 2022.5,1389.5313 Q2023.1563,1389.6875 2023.7188,1389.9844 L2023.7188,1392.7031 Q2023.0938,1392.125 2022.5,1391.8594 Q2021.9063,1391.5781 2021.2813,1391.5781 Q2019.9375,1391.5781 2019.25,1392.6563 Q2018.5625,1393.7188 2018.5625,1395.8125 Q2018.5625,1397.9063 2019.25,1398.9844 Q2019.9375,1400.0469 2021.2813,1400.0469 Q2021.9063,1400.0469 2022.5,1399.7813 Q2023.0938,1399.5 2023.7188,1398.9219 L2023.7188,1401.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="2041.25" y="1400.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="2670" y="1377"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="2671" y="1389.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1567" x2="2677" y1="1412" y2="1412"/><ellipse cx="1577" cy="1423" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="1586" y="1426.2104">dense_map_iterator() noexcept : void</text><ellipse cx="1577" cy="1435.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1586" y="1439.0151">dense_map_iterator(const It iter) noexcept : void</text><ellipse cx="1577" cy="1448.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1086" x="1586" y="1451.8198">dense_map_iterator&lt;It&gt;&lt;Other,typename=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_map_iterator&lt;Other&gt; &amp; other) noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1567" x2="2677" y1="1458.4141" y2="1458.4141"/><ellipse cx="1577" cy="1469.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="1586" y="1472.6245">operator*() constexpr const noexcept : internal::dense_map_iterator::reference</text><ellipse cx="1577" cy="1482.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="696" x="1586" y="1485.4292">operator+(const internal::dense_map_iterator::difference_type value) constexpr const noexcept : dense_map_iterator&lt;It&gt;</text><ellipse cx="1577" cy="1495.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="1586" y="1498.2339">operator++() constexpr noexcept : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="1577" cy="1507.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="1586" y="1511.0386">operator++(int) constexpr noexcept : dense_map_iterator&lt;It&gt;</text><ellipse cx="1577" cy="1520.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="684" x="1586" y="1523.8433">operator+=(const internal::dense_map_iterator::difference_type value) constexpr noexcept : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="1577" cy="1533.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="691" x="1586" y="1536.6479">operator-(const internal::dense_map_iterator::difference_type value) constexpr const noexcept : dense_map_iterator&lt;It&gt;</text><ellipse cx="1577" cy="1546.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="1586" y="1549.4526">operator--() constexpr noexcept : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="1577" cy="1559.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="1586" y="1562.2573">operator--(int) constexpr noexcept : dense_map_iterator&lt;It&gt;</text><ellipse cx="1577" cy="1571.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="679" x="1586" y="1575.062">operator-=(const internal::dense_map_iterator::difference_type value) constexpr noexcept : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="1577" cy="1584.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="1586" y="1587.8667">operator-&gt;() constexpr const noexcept : internal::dense_map_iterator::pointer</text><ellipse cx="1577" cy="1597.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="784" x="1586" y="1600.6714">operator[](const internal::dense_map_iterator::difference_type value) constexpr const noexcept : internal::dense_map_iterator::reference</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1567" x2="2677" y1="1607.2656" y2="1607.2656"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1572" y="1613.2656"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1574" y="1615.2656"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="1586" y="1621.4761">it : It</text></a><!--MD5=[ed8a1d47aa2f18c40584f6baafdde514]
class C_0000897312785691592656--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000897312785691592656" style="stroke: #A80036; stroke-width: 1.5;" width="286" x="3405" y="1272"/><ellipse cx="3420" cy="1288" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3422.9688,1293.6406 Q3422.3906,1293.9375 3421.75,1294.0781 Q3421.1094,1294.2344 3420.4063,1294.2344 Q3417.9063,1294.2344 3416.5781,1292.5938 Q3415.2656,1290.9375 3415.2656,1287.8125 Q3415.2656,1284.6875 3416.5781,1283.0313 Q3417.9063,1281.375 3420.4063,1281.375 Q3421.1094,1281.375 3421.75,1281.5313 Q3422.4063,1281.6875 3422.9688,1281.9844 L3422.9688,1284.7031 Q3422.3438,1284.125 3421.75,1283.8594 Q3421.1563,1283.5781 3420.5313,1283.5781 Q3419.1875,1283.5781 3418.5,1284.6563 Q3417.8125,1285.7188 3417.8125,1287.8125 Q3417.8125,1289.9063 3418.5,1290.9844 Q3419.1875,1292.0469 3420.5313,1292.0469 Q3421.1563,1292.0469 3421.75,1291.7813 Q3422.3438,1291.5 3422.9688,1290.9219 L3422.9688,1293.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="3434" y="1292.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="36" x="3658" y="1269"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="34" x="3659" y="1281.1387">Other</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3406" x2="3690" y1="1304" y2="1304"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3406" x2="3690" y1="1312" y2="1312"/></a><!--MD5=[9bc7b4fa310d2f1181430de65e2efcd0]
class C_0002151284549161307803--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="192.0469" id="C_0002151284549161307803" style="stroke: #A80036; stroke-width: 1.5;" width="1176" x="2960" y="1408"/><ellipse cx="3429.25" cy="1424" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3432.2188,1429.6406 Q3431.6406,1429.9375 3431,1430.0781 Q3430.3594,1430.2344 3429.6563,1430.2344 Q3427.1563,1430.2344 3425.8281,1428.5938 Q3424.5156,1426.9375 3424.5156,1423.8125 Q3424.5156,1420.6875 3425.8281,1419.0313 Q3427.1563,1417.375 3429.6563,1417.375 Q3430.3594,1417.375 3431,1417.5313 Q3431.6563,1417.6875 3432.2188,1417.9844 L3432.2188,1420.7031 Q3431.5938,1420.125 3431,1419.8594 Q3430.4063,1419.5781 3429.7813,1419.5781 Q3428.4375,1419.5781 3427.75,1420.6563 Q3427.0625,1421.7188 3427.0625,1423.8125 Q3427.0625,1425.9063 3427.75,1426.9844 Q3428.4375,1428.0469 3429.7813,1428.0469 Q3430.4063,1428.0469 3431,1427.7813 Q3431.5938,1427.5 3432.2188,1426.9219 L3432.2188,1429.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="3449.75" y="1428.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="4128" y="1405"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="4129" y="1417.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2961" x2="4135" y1="1440" y2="1440"/><ellipse cx="2971" cy="1451" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2980" y="1454.2104">dense_map_local_iterator() noexcept : void</text><ellipse cx="2971" cy="1463.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="2980" y="1467.0151">dense_map_local_iterator(It iter, const std::size_t pos) noexcept : void</text><ellipse cx="2971" cy="1476.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1150" x="2980" y="1479.8198">dense_map_local_iterator&lt;It&gt;&lt;Other,typename=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_map_local_iterator&lt;Other&gt; &amp; other) noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2961" x2="4135" y1="1486.4141" y2="1486.4141"/><ellipse cx="2971" cy="1497.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="485" x="2980" y="1500.6245">operator*() constexpr const noexcept : internal::dense_map_local_iterator::reference</text><ellipse cx="2971" cy="1510.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="2980" y="1513.4292">operator++() constexpr noexcept : dense_map_local_iterator&lt;It&gt; &amp;</text><ellipse cx="2971" cy="1523.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="2980" y="1526.2339">operator++(int) constexpr noexcept : dense_map_local_iterator&lt;It&gt;</text><ellipse cx="2971" cy="1535.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="477" x="2980" y="1539.0386">operator-&gt;() constexpr const noexcept : internal::dense_map_local_iterator::pointer</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2961" x2="4135" y1="1545.6328" y2="1545.6328"/><ellipse cx="2971" cy="1556.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="2980" y="1559.8433">index() constexpr const noexcept : std::size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2961" x2="4135" y1="1566.4375" y2="1566.4375"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2966" y="1572.4375"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2968" y="1574.4375"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="2980" y="1580.6479">it : It</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" xlink:show="new" xlink:title="offset" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2966" y="1585.2422"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2968" y="1587.2422"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" xlink:show="new" xlink:title="offset" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2980" y="1593.4526">offset : std::size_t</text></a><!--MD5=[7e52990c0f0b35ac30b48709c541dcee]
class C_0001653959084428336991--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001653959084428336991" style="stroke: #A80036; stroke-width: 1.5;" width="525" x="1736.5" y="1164"/><ellipse cx="1751.5" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1754.4688,1185.6406 Q1753.8906,1185.9375 1753.25,1186.0781 Q1752.6094,1186.2344 1751.9063,1186.2344 Q1749.4063,1186.2344 1748.0781,1184.5938 Q1746.7656,1182.9375 1746.7656,1179.8125 Q1746.7656,1176.6875 1748.0781,1175.0313 Q1749.4063,1173.375 1751.9063,1173.375 Q1752.6094,1173.375 1753.25,1173.5313 Q1753.9063,1173.6875 1754.4688,1173.9844 L1754.4688,1176.7031 Q1753.8438,1176.125 1753.25,1175.8594 Q1752.6563,1175.5781 1752.0313,1175.5781 Q1750.6875,1175.5781 1750,1176.6563 Q1749.3125,1177.7188 1749.3125,1179.8125 Q1749.3125,1181.9063 1750,1182.9844 Q1750.6875,1184.0469 1752.0313,1184.0469 Q1752.6563,1184.0469 1753.25,1183.7813 Q1753.8438,1183.5 1754.4688,1182.9219 L1754.4688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="1765.5" y="1184.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="310" x="1954.5" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="1955.5" y="1173.1387">typename packed_container_type::const_iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1737.5" x2="2260.5" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1737.5" x2="2260.5" y1="1204" y2="1204"/></a><!--MD5=[fc3c8f11523fda5ac34e649b428e3d6f]
class C_0001467357144574951784--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001467357144574951784" style="stroke: #A80036; stroke-width: 1.5;" width="485" x="2296.5" y="1164"/><ellipse cx="2311.5" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2314.4688,1185.6406 Q2313.8906,1185.9375 2313.25,1186.0781 Q2312.6094,1186.2344 2311.9063,1186.2344 Q2309.4063,1186.2344 2308.0781,1184.5938 Q2306.7656,1182.9375 2306.7656,1179.8125 Q2306.7656,1176.6875 2308.0781,1175.0313 Q2309.4063,1173.375 2311.9063,1173.375 Q2312.6094,1173.375 2313.25,1173.5313 Q2313.9063,1173.6875 2314.4688,1173.9844 L2314.4688,1176.7031 Q2313.8438,1176.125 2313.25,1175.8594 Q2312.6563,1175.5781 2312.0313,1175.5781 Q2310.6875,1175.5781 2310,1176.6563 Q2309.3125,1177.7188 2309.3125,1179.8125 Q2309.3125,1181.9063 2310,1182.9844 Q2310.6875,1184.0469 2312.0313,1184.0469 Q2312.6563,1184.0469 2313.25,1183.7813 Q2313.8438,1183.5 2314.4688,1182.9219 L2314.4688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="2325.5" y="1184.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="270" x="2514.5" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="268" x="2515.5" y="1173.1387">typename packed_container_type::iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2297.5" x2="2780.5" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2297.5" x2="2780.5" y1="1204" y2="1204"/></a><!--MD5=[4526850c920f6af51281ced2b84127d6]
class C_0001059592200633017691--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001059592200633017691" style="stroke: #A80036; stroke-width: 1.5;" width="560" x="2817" y="1164"/><ellipse cx="2832" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2834.9688,1185.6406 Q2834.3906,1185.9375 2833.75,1186.0781 Q2833.1094,1186.2344 2832.4063,1186.2344 Q2829.9063,1186.2344 2828.5781,1184.5938 Q2827.2656,1182.9375 2827.2656,1179.8125 Q2827.2656,1176.6875 2828.5781,1175.0313 Q2829.9063,1173.375 2832.4063,1173.375 Q2833.1094,1173.375 2833.75,1173.5313 Q2834.4063,1173.6875 2834.9688,1173.9844 L2834.9688,1176.7031 Q2834.3438,1176.125 2833.75,1175.8594 Q2833.1563,1175.5781 2832.5313,1175.5781 Q2831.1875,1175.5781 2830.5,1176.6563 Q2829.8125,1177.7188 2829.8125,1179.8125 Q2829.8125,1181.9063 2830.5,1182.9844 Q2831.1875,1184.0469 2832.5313,1184.0469 Q2833.1563,1184.0469 2833.75,1183.7813 Q2834.3438,1183.5 2834.9688,1182.9219 L2834.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="2846" y="1184.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="310" x="3070" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="3071" y="1173.1387">typename packed_container_type::const_iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3376" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3376" y1="1204" y2="1204"/></a><!--MD5=[9d23357cd0f05b03b078f097e6701cef]
class C_0001333101687401183603--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001333101687401183603" style="stroke: #A80036; stroke-width: 1.5;" width="520" x="3412" y="1164"/><ellipse cx="3427" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3429.9688,1185.6406 Q3429.3906,1185.9375 3428.75,1186.0781 Q3428.1094,1186.2344 3427.4063,1186.2344 Q3424.9063,1186.2344 3423.5781,1184.5938 Q3422.2656,1182.9375 3422.2656,1179.8125 Q3422.2656,1176.6875 3423.5781,1175.0313 Q3424.9063,1173.375 3427.4063,1173.375 Q3428.1094,1173.375 3428.75,1173.5313 Q3429.4063,1173.6875 3429.9688,1173.9844 L3429.9688,1176.7031 Q3429.3438,1176.125 3428.75,1175.8594 Q3428.1563,1175.5781 3427.5313,1175.5781 Q3426.1875,1175.5781 3425.5,1176.6563 Q3424.8125,1177.7188 3424.8125,1179.8125 Q3424.8125,1181.9063 3425.5,1182.9844 Q3426.1875,1184.0469 3427.5313,1184.0469 Q3428.1563,1184.0469 3428.75,1183.7813 Q3429.3438,1183.5 3429.9688,1182.9219 L3429.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="3441" y="1184.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="270" x="3665" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="268" x="3666" y="1173.1387">typename packed_container_type::iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3413" x2="3931" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3413" x2="3931" y1="1204" y2="1204"/></a><!--MD5=[ecc33168cc21438664a09800f2cb3e0d]
class C_0001638501202125067276--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001638501202125067276" style="stroke: #A80036; stroke-width: 1.5;" width="315" x="912.5" y="532"/><ellipse cx="927.5" cy="548" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M930.4688,553.6406 Q929.8906,553.9375 929.25,554.0781 Q928.6094,554.2344 927.9063,554.2344 Q925.4063,554.2344 924.0781,552.5938 Q922.7656,550.9375 922.7656,547.8125 Q922.7656,544.6875 924.0781,543.0313 Q925.4063,541.375 927.9063,541.375 Q928.6094,541.375 929.25,541.5313 Q929.9063,541.6875 930.4688,541.9844 L930.4688,544.7031 Q929.8438,544.125 929.25,543.8594 Q928.6563,543.5781 928.0313,543.5781 Q926.6875,543.5781 926,544.6563 Q925.3125,545.7188 925.3125,547.8125 Q925.3125,549.9063 926,550.9844 Q926.6875,552.0469 928.0313,552.0469 Q928.6563,552.0469 929.25,551.7813 Q929.8438,551.5 930.4688,550.9219 L930.4688,553.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="941.5" y="552.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="65" x="1165.5" y="529"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="63" x="1166.5" y="541.1387">typename</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="913.5" x2="1226.5" y1="564" y2="564"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="913.5" x2="1226.5" y1="572" y2="572"/></a><!--MD5=[8db05f1f230a14e9cf3708021e7beeef]
class C_0002138822504316417237--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0002138822504316417237" style="stroke: #A80036; stroke-width: 1.5;" width="280" x="1263" y="532"/><ellipse cx="1278" cy="548" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1280.9688,553.6406 Q1280.3906,553.9375 1279.75,554.0781 Q1279.1094,554.2344 1278.4063,554.2344 Q1275.9063,554.2344 1274.5781,552.5938 Q1273.2656,550.9375 1273.2656,547.8125 Q1273.2656,544.6875 1274.5781,543.0313 Q1275.9063,541.375 1278.4063,541.375 Q1279.1094,541.375 1279.75,541.5313 Q1280.4063,541.6875 1280.9688,541.9844 L1280.9688,544.7031 Q1280.3438,544.125 1279.75,543.8594 Q1279.1563,543.5781 1278.5313,543.5781 Q1277.1875,543.5781 1276.5,544.6563 Q1275.8125,545.7188 1275.8125,547.8125 Q1275.8125,549.9063 1276.5,550.9844 Q1277.1875,552.0469 1278.5313,552.0469 Q1279.1563,552.0469 1279.75,551.7813 Q1280.3438,551.5 1280.9688,550.9219 L1280.9688,553.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="1292" y="552.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="65" x="1481" y="529"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="63" x="1482" y="541.1387">typename</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1264" x2="1542" y1="564" y2="564"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1264" x2="1542" y1="572" y2="572"/></a><!--MD5=[00a0183a8406abcd8e83e4f2cd57f590]
class C_0000049162385221685939--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000049162385221685939" style="stroke: #A80036; stroke-width: 1.5;" width="244" x="4598" y="1272"/><ellipse cx="4613" cy="1288" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4615.9688,1293.6406 Q4615.3906,1293.9375 4614.75,1294.0781 Q4614.1094,1294.2344 4613.4063,1294.2344 Q4610.9063,1294.2344 4609.5781,1292.5938 Q4608.2656,1290.9375 4608.2656,1287.8125 Q4608.2656,1284.6875 4609.5781,1283.0313 Q4610.9063,1281.375 4613.4063,1281.375 Q4614.1094,1281.375 4614.75,1281.5313 Q4615.4063,1281.6875 4615.9688,1281.9844 L4615.9688,1284.7031 Q4615.3438,1284.125 4614.75,1283.8594 Q4614.1563,1283.5781 4613.5313,1283.5781 Q4612.1875,1283.5781 4611.5,1284.6563 Q4610.8125,1285.7188 4610.8125,1287.8125 Q4610.8125,1289.9063 4611.5,1290.9844 Q4612.1875,1292.0469 4613.5313,1292.0469 Q4614.1563,1292.0469 4614.75,1291.7813 Q4615.3438,1291.5 4615.9688,1290.9219 L4615.9688,1293.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="4627" y="1292.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="36" x="4809" y="1269"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="34" x="4810" y="1281.1387">Other</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4599" x2="4841" y1="1304" y2="1304"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4599" x2="4841" y1="1312" y2="1312"/></a><!--MD5=[0b84dd7b943ca01825f61f48138f4fd7]
class C_0002029187173053297188--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="248.0703" id="C_0002029187173053297188" style="stroke: #A80036; stroke-width: 1.5;" width="1098" x="4171" y="1380"/><ellipse cx="4622.25" cy="1396" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4625.2188,1401.6406 Q4624.6406,1401.9375 4624,1402.0781 Q4623.3594,1402.2344 4622.6563,1402.2344 Q4620.1563,1402.2344 4618.8281,1400.5938 Q4617.5156,1398.9375 4617.5156,1395.8125 Q4617.5156,1392.6875 4618.8281,1391.0313 Q4620.1563,1389.375 4622.6563,1389.375 Q4623.3594,1389.375 4624,1389.5313 Q4624.6563,1389.6875 4625.2188,1389.9844 L4625.2188,1392.7031 Q4624.5938,1392.125 4624,1391.8594 Q4623.4063,1391.5781 4622.7813,1391.5781 Q4621.4375,1391.5781 4620.75,1392.6563 Q4620.0625,1393.7188 4620.0625,1395.8125 Q4620.0625,1397.9063 4620.75,1398.9844 Q4621.4375,1400.0469 4622.7813,1400.0469 Q4623.4063,1400.0469 4624,1399.7813 Q4624.5938,1399.5 4625.2188,1398.9219 L4625.2188,1401.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="4642.75" y="1400.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="5261" y="1377"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="5262" y="1389.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4172" x2="5268" y1="1412" y2="1412"/><ellipse cx="4182" cy="1423" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="4191" y="1426.2104">dense_set_iterator() noexcept : void</text><ellipse cx="4182" cy="1435.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="4191" y="1439.0151">dense_set_iterator(const It iter) noexcept : void</text><ellipse cx="4182" cy="1448.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1072" x="4191" y="1451.8198">dense_set_iterator&lt;It&gt;&lt;Other,typename=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_set_iterator&lt;Other&gt; &amp; other) noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4172" x2="5268" y1="1458.4141" y2="1458.4141"/><ellipse cx="4182" cy="1469.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="4191" y="1472.6245">operator*() constexpr const noexcept : internal::dense_set_iterator::reference</text><ellipse cx="4182" cy="1482.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="4191" y="1485.4292">operator+(const internal::dense_set_iterator::difference_type value) constexpr const noexcept : dense_set_iterator&lt;It&gt;</text><ellipse cx="4182" cy="1495.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="4191" y="1498.2339">operator++() constexpr noexcept : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="4182" cy="1507.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="4191" y="1511.0386">operator++(int) constexpr noexcept : dense_set_iterator&lt;It&gt;</text><ellipse cx="4182" cy="1520.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="670" x="4191" y="1523.8433">operator+=(const internal::dense_set_iterator::difference_type value) constexpr noexcept : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="4182" cy="1533.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="677" x="4191" y="1536.6479">operator-(const internal::dense_set_iterator::difference_type value) constexpr const noexcept : dense_set_iterator&lt;It&gt;</text><ellipse cx="4182" cy="1546.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="4191" y="1549.4526">operator--() constexpr noexcept : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="4182" cy="1559.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="4191" y="1562.2573">operator--(int) constexpr noexcept : dense_set_iterator&lt;It&gt;</text><ellipse cx="4182" cy="1571.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="665" x="4191" y="1575.062">operator-=(const internal::dense_set_iterator::difference_type value) constexpr noexcept : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="4182" cy="1584.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="438" x="4191" y="1587.8667">operator-&gt;() constexpr const noexcept : internal::dense_set_iterator::pointer</text><ellipse cx="4182" cy="1597.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="770" x="4191" y="1600.6714">operator[](const internal::dense_set_iterator::difference_type value) constexpr const noexcept : internal::dense_set_iterator::reference</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4172" x2="5268" y1="1607.2656" y2="1607.2656"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4177" y="1613.2656"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4179" y="1615.2656"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="4191" y="1621.4761">it : It</text></a><!--MD5=[e7ded10398324ed8d66fc4f565a1cbbf]
class C_0000722665158129243283--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000722665158129243283" style="stroke: #A80036; stroke-width: 1.5;" width="279" x="5988.5" y="1272"/><ellipse cx="6003.5" cy="1288" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6006.4688,1293.6406 Q6005.8906,1293.9375 6005.25,1294.0781 Q6004.6094,1294.2344 6003.9063,1294.2344 Q6001.4063,1294.2344 6000.0781,1292.5938 Q5998.7656,1290.9375 5998.7656,1287.8125 Q5998.7656,1284.6875 6000.0781,1283.0313 Q6001.4063,1281.375 6003.9063,1281.375 Q6004.6094,1281.375 6005.25,1281.5313 Q6005.9063,1281.6875 6006.4688,1281.9844 L6006.4688,1284.7031 Q6005.8438,1284.125 6005.25,1283.8594 Q6004.6563,1283.5781 6004.0313,1283.5781 Q6002.6875,1283.5781 6002,1284.6563 Q6001.3125,1285.7188 6001.3125,1287.8125 Q6001.3125,1289.9063 6002,1290.9844 Q6002.6875,1292.0469 6004.0313,1292.0469 Q6004.6563,1292.0469 6005.25,1291.7813 Q6005.8438,1291.5 6006.4688,1290.9219 L6006.4688,1293.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="6017.5" y="1292.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="36" x="6234.5" y="1269"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="34" x="6235.5" y="1281.1387">Other</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5989.5" x2="6266.5" y1="1304" y2="1304"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5989.5" x2="6266.5" y1="1312" y2="1312"/></a><!--MD5=[c1c488eac545d3c23f77b28bdf60204c]
class C_0001736854889005654369--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="192.0469" id="C_0001736854889005654369" style="stroke: #A80036; stroke-width: 1.5;" width="1162" x="5547" y="1408"/><ellipse cx="6012.75" cy="1424" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6015.7188,1429.6406 Q6015.1406,1429.9375 6014.5,1430.0781 Q6013.8594,1430.2344 6013.1563,1430.2344 Q6010.6563,1430.2344 6009.3281,1428.5938 Q6008.0156,1426.9375 6008.0156,1423.8125 Q6008.0156,1420.6875 6009.3281,1419.0313 Q6010.6563,1417.375 6013.1563,1417.375 Q6013.8594,1417.375 6014.5,1417.5313 Q6015.1563,1417.6875 6015.7188,1417.9844 L6015.7188,1420.7031 Q6015.0938,1420.125 6014.5,1419.8594 Q6013.9063,1419.5781 6013.2813,1419.5781 Q6011.9375,1419.5781 6011.25,1420.6563 Q6010.5625,1421.7188 6010.5625,1423.8125 Q6010.5625,1425.9063 6011.25,1426.9844 Q6011.9375,1428.0469 6013.2813,1428.0469 Q6013.9063,1428.0469 6014.5,1427.7813 Q6015.0938,1427.5 6015.7188,1426.9219 L6015.7188,1429.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="6033.25" y="1428.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="6701" y="1405"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="6702" y="1417.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5548" x2="6708" y1="1440" y2="1440"/><ellipse cx="5558" cy="1451" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="5567" y="1454.2104">dense_set_local_iterator() noexcept : void</text><ellipse cx="5558" cy="1463.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="5567" y="1467.0151">dense_set_local_iterator(It iter, const std::size_t pos) noexcept : void</text><ellipse cx="5558" cy="1476.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1136" x="5567" y="1479.8198">dense_set_local_iterator&lt;It&gt;&lt;Other,typename=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_set_local_iterator&lt;Other&gt; &amp; other) noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="5548" x2="6708" y1="1486.4141" y2="1486.4141"/><ellipse cx="5558" cy="1497.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="5567" y="1500.6245">operator*() constexpr const noexcept : internal::dense_set_local_iterator::reference</text><ellipse cx="5558" cy="1510.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="5567" y="1513.4292">operator++() constexpr noexcept : dense_set_local_iterator&lt;It&gt; &amp;</text><ellipse cx="5558" cy="1523.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="5567" y="1526.2339">operator++(int) constexpr noexcept : dense_set_local_iterator&lt;It&gt;</text><ellipse cx="5558" cy="1535.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="5567" y="1539.0386">operator-&gt;() constexpr const noexcept : internal::dense_set_local_iterator::pointer</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="5548" x2="6708" y1="1545.6328" y2="1545.6328"/><ellipse cx="5558" cy="1556.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="5567" y="1559.8433">index() constexpr const noexcept : std::size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5548" x2="6708" y1="1566.4375" y2="1566.4375"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5553" y="1572.4375"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5555" y="1574.4375"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="5567" y="1580.6479">it : It</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" xlink:show="new" xlink:title="offset" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="5553" y="1585.2422"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="5555" y="1587.2422"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" xlink:show="new" xlink:title="offset" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="5567" y="1593.4526">offset : std::size_t</text></a><!--MD5=[e1987c1e5a18dd915efa0a4a5f5f948f]
class C_0000560377495148252911--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000560377495148252911" style="stroke: #A80036; stroke-width: 1.5;" width="518" x="4339" y="1164"/><ellipse cx="4354" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4356.9688,1185.6406 Q4356.3906,1185.9375 4355.75,1186.0781 Q4355.1094,1186.2344 4354.4063,1186.2344 Q4351.9063,1186.2344 4350.5781,1184.5938 Q4349.2656,1182.9375 4349.2656,1179.8125 Q4349.2656,1176.6875 4350.5781,1175.0313 Q4351.9063,1173.375 4354.4063,1173.375 Q4355.1094,1173.375 4355.75,1173.5313 Q4356.4063,1173.6875 4356.9688,1173.9844 L4356.9688,1176.7031 Q4356.3438,1176.125 4355.75,1175.8594 Q4355.1563,1175.5781 4354.5313,1175.5781 Q4353.1875,1175.5781 4352.5,1176.6563 Q4351.8125,1177.7188 4351.8125,1179.8125 Q4351.8125,1181.9063 4352.5,1182.9844 Q4353.1875,1184.0469 4354.5313,1184.0469 Q4355.1563,1184.0469 4355.75,1183.7813 Q4356.3438,1183.5 4356.9688,1182.9219 L4356.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="4368" y="1184.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="310" x="4550" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="4551" y="1173.1387">typename packed_container_type::const_iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4340" x2="4856" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4340" x2="4856" y1="1204" y2="1204"/></a><!--MD5=[34f024237103cb7ccb802c11b06d8aaa]
class C_0000152036747823538986--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000152036747823538986" style="stroke: #A80036; stroke-width: 1.5;" width="478" x="4892" y="1164"/><ellipse cx="4907" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4909.9688,1185.6406 Q4909.3906,1185.9375 4908.75,1186.0781 Q4908.1094,1186.2344 4907.4063,1186.2344 Q4904.9063,1186.2344 4903.5781,1184.5938 Q4902.2656,1182.9375 4902.2656,1179.8125 Q4902.2656,1176.6875 4903.5781,1175.0313 Q4904.9063,1173.375 4907.4063,1173.375 Q4908.1094,1173.375 4908.75,1173.5313 Q4909.4063,1173.6875 4909.9688,1173.9844 L4909.9688,1176.7031 Q4909.3438,1176.125 4908.75,1175.8594 Q4908.1563,1175.5781 4907.5313,1175.5781 Q4906.1875,1175.5781 4905.5,1176.6563 Q4904.8125,1177.7188 4904.8125,1179.8125 Q4904.8125,1181.9063 4905.5,1182.9844 Q4906.1875,1184.0469 4907.5313,1184.0469 Q4908.1563,1184.0469 4908.75,1183.7813 Q4909.3438,1183.5 4909.9688,1182.9219 L4909.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="4921" y="1184.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="270" x="5103" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="268" x="5104" y="1173.1387">typename packed_container_type::iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4893" x2="5369" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4893" x2="5369" y1="1204" y2="1204"/></a><!--MD5=[e608e3805ab1a67f8bd25abdc9e8f348]
class C_0000412176680063565687--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0000412176680063565687" style="stroke: #A80036; stroke-width: 1.5;" width="553" x="5405.5" y="1164"/><ellipse cx="5420.5" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5423.4688,1185.6406 Q5422.8906,1185.9375 5422.25,1186.0781 Q5421.6094,1186.2344 5420.9063,1186.2344 Q5418.4063,1186.2344 5417.0781,1184.5938 Q5415.7656,1182.9375 5415.7656,1179.8125 Q5415.7656,1176.6875 5417.0781,1175.0313 Q5418.4063,1173.375 5420.9063,1173.375 Q5421.6094,1173.375 5422.25,1173.5313 Q5422.9063,1173.6875 5423.4688,1173.9844 L5423.4688,1176.7031 Q5422.8438,1176.125 5422.25,1175.8594 Q5421.6563,1175.5781 5421.0313,1175.5781 Q5419.6875,1175.5781 5419,1176.6563 Q5418.3125,1177.7188 5418.3125,1179.8125 Q5418.3125,1181.9063 5419,1182.9844 Q5419.6875,1184.0469 5421.0313,1184.0469 Q5421.6563,1184.0469 5422.25,1183.7813 Q5422.8438,1183.5 5423.4688,1182.9219 L5423.4688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="5434.5" y="1184.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="310" x="5651.5" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="308" x="5652.5" y="1173.1387">typename packed_container_type::const_iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5406.5" x2="5957.5" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5406.5" x2="5957.5" y1="1204" y2="1204"/></a><!--MD5=[767785d4f84979eecfbf57133aff2573]
class C_0001477017809704643123--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001477017809704643123" style="stroke: #A80036; stroke-width: 1.5;" width="513" x="5993.5" y="1164"/><ellipse cx="6008.5" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6011.4688,1185.6406 Q6010.8906,1185.9375 6010.25,1186.0781 Q6009.6094,1186.2344 6008.9063,1186.2344 Q6006.4063,1186.2344 6005.0781,1184.5938 Q6003.7656,1182.9375 6003.7656,1179.8125 Q6003.7656,1176.6875 6005.0781,1175.0313 Q6006.4063,1173.375 6008.9063,1173.375 Q6009.6094,1173.375 6010.25,1173.5313 Q6010.9063,1173.6875 6011.4688,1173.9844 L6011.4688,1176.7031 Q6010.8438,1176.125 6010.25,1175.8594 Q6009.6563,1175.5781 6009.0313,1175.5781 Q6007.6875,1175.5781 6007,1176.6563 Q6006.3125,1177.7188 6006.3125,1179.8125 Q6006.3125,1181.9063 6007,1182.9844 Q6007.6875,1184.0469 6009.0313,1184.0469 Q6009.6563,1184.0469 6010.25,1183.7813 Q6010.8438,1183.5 6011.4688,1182.9219 L6011.4688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="6022.5" y="1184.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="270" x="6239.5" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="268" x="6240.5" y="1173.1387">typename packed_container_type::iterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5994.5" x2="6505.5" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5994.5" x2="6505.5" y1="1204" y2="1204"/></a><!--MD5=[d3a2ce1e348cc606105b88808e4715bc]
class C_0001565515217260524899--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001565515217260524899" style="stroke: #A80036; stroke-width: 1.5;" width="273" x="317.5" y="1164"/><ellipse cx="332.5" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M335.4688,1185.6406 Q334.8906,1185.9375 334.25,1186.0781 Q333.6094,1186.2344 332.9063,1186.2344 Q330.4063,1186.2344 329.0781,1184.5938 Q327.7656,1182.9375 327.7656,1179.8125 Q327.7656,1176.6875 329.0781,1175.0313 Q330.4063,1173.375 332.9063,1173.375 Q333.6094,1173.375 334.25,1173.5313 Q334.9063,1173.6875 335.4688,1173.9844 L335.4688,1176.7031 Q334.8438,1176.125 334.25,1175.8594 Q333.6563,1175.5781 333.0313,1175.5781 Q331.6875,1175.5781 331,1176.6563 Q330.3125,1177.7188 330.3125,1179.8125 Q330.3125,1181.9063 331,1182.9844 Q331.6875,1184.0469 333.0313,1184.0469 Q333.6563,1184.0469 334.25,1183.7813 Q334.8438,1183.5 335.4688,1182.9219 L335.4688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="346.5" y="1184.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="65" x="528.5" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="63" x="529.5" y="1173.1387">typename</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="318.5" x2="589.5" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="318.5" x2="589.5" y1="1204" y2="1204"/></a><!--MD5=[3c8725603085034db1bc64181dcc709a]
class C_0001656541682645832012--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0001656541682645832012" style="stroke: #A80036; stroke-width: 1.5;" width="308" x="626" y="1164"/><ellipse cx="641" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M643.9688,1185.6406 Q643.3906,1185.9375 642.75,1186.0781 Q642.1094,1186.2344 641.4063,1186.2344 Q638.9063,1186.2344 637.5781,1184.5938 Q636.2656,1182.9375 636.2656,1179.8125 Q636.2656,1176.6875 637.5781,1175.0313 Q638.9063,1173.375 641.4063,1173.375 Q642.1094,1173.375 642.75,1173.5313 Q643.4063,1173.6875 643.9688,1173.9844 L643.9688,1176.7031 Q643.3438,1176.125 642.75,1175.8594 Q642.1563,1175.5781 641.5313,1175.5781 Q640.1875,1175.5781 639.5,1176.6563 Q638.8125,1177.7188 638.8125,1179.8125 Q638.8125,1181.9063 639.5,1182.9844 Q640.1875,1184.0469 641.5313,1184.0469 Q642.1563,1184.0469 642.75,1183.7813 Q643.3438,1183.5 643.9688,1182.9219 L643.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="655" y="1184.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="65" x="872" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="63" x="873" y="1173.1387">typename</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="627" x2="933" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="627" x2="933" y1="1204" y2="1204"/></a><!--MD5=[59287f6e7c84d3830311e092cfd33ef0]
class C_0001073675684695097120--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264" target="_top" title="dense_map" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264" xlink:show="new" xlink:title="dense_map" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="1096.375" id="C_0001073675684695097120" style="stroke: #A80036; stroke-width: 1.5;" width="1273" x="2181.5" y="8"/><ellipse cx="2404.25" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2407.2188,29.6406 Q2406.6406,29.9375 2406,30.0781 Q2405.3594,30.2344 2404.6563,30.2344 Q2402.1563,30.2344 2400.8281,28.5938 Q2399.5156,26.9375 2399.5156,23.8125 Q2399.5156,20.6875 2400.8281,19.0313 Q2402.1563,17.375 2404.6563,17.375 Q2405.3594,17.375 2406,17.5313 Q2406.6563,17.6875 2407.2188,17.9844 L2407.2188,20.7031 Q2406.5938,20.125 2406,19.8594 Q2405.4063,19.5781 2404.7813,19.5781 Q2403.4375,19.5781 2402.75,20.6563 Q2402.0625,21.7188 2402.0625,23.8125 Q2402.0625,25.9063 2402.75,26.9844 Q2403.4375,28.0469 2404.7813,28.0469 Q2405.4063,28.0469 2406,27.7813 Q2406.5938,27.5 2407.2188,26.9219 L2407.2188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="2424.75" y="28.1543">dense_map</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="745" x="2712.5" y="5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="743" x="2713.5" y="17.1387">Key,Type,Hash=std::hash&lt;Key&gt;,KeyEqual=std::equal_to&lt;Key&gt;,Allocator=std::allocator&lt;std::pair&lt;const Key, Type&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2182.5" x2="3453.5" y1="40" y2="40"/><ellipse cx="2192.5" cy="51" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2201.5" y="54.2104">dense_map() : void</text><ellipse cx="2192.5" cy="63.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="2201.5" y="67.0151">dense_map(const dense_map::allocator_type &amp; allocator) : void</text><ellipse cx="2192.5" cy="76.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="2201.5" y="79.8198">dense_map(const dense_map::size_type cnt, const dense_map::allocator_type &amp; allocator) : void</text><ellipse cx="2192.5" cy="89.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="757" x="2201.5" y="92.6245">dense_map(const dense_map::size_type cnt, const dense_map::hasher &amp; hash, const dense_map::allocator_type &amp; allocator) : void</text><ellipse cx="2192.5" cy="102.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1247" x="2201.5" y="105.4292">dense_map(const dense_map::size_type cnt, const dense_map::hasher &amp; hash = hasher{}, const dense_map::key_equal &amp; equal = key_equal{}, const dense_map::allocator_type &amp; allocator = allocator_type{}) : void</text><ellipse cx="2192.5" cy="115.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="691" x="2201.5" y="118.2339">dense_map(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;) = default : void</text><ellipse cx="2192.5" cy="127.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="932" x="2201.5" y="131.0386">dense_map(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; other, const dense_map::allocator_type &amp; allocator) : void</text><ellipse cx="2192.5" cy="140.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="721" x="2201.5" y="143.8433">dense_map(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp;) noexcept = default : void</text><ellipse cx="2192.5" cy="153.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="907" x="2201.5" y="156.6479">dense_map(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp; other, const dense_map::allocator_type &amp; allocator) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2182.5" x2="3453.5" y1="163.2422" y2="163.2422"/><ellipse cx="2192.5" cy="174.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1151" x="2201.5" y="177.4526">operator=(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;) = default : dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;</text><ellipse cx="2192.5" cy="187.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1181" x="2201.5" y="190.2573">operator=(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp;) noexcept = default : dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2182.5" x2="3453.5" y1="196.8516" y2="196.8516"/><ellipse cx="2192.5" cy="207.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="2201.5" y="211.062">operator[](const dense_map::key_type &amp; key) : dense_map::mapped_type &amp;</text><ellipse cx="2192.5" cy="220.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="2201.5" y="223.8667">operator[](dense_map::key_type &amp;&amp; key) : dense_map::mapped_type &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2182.5" x2="3453.5" y1="230.4609" y2="230.4609"/><ellipse cx="2192.5" cy="241.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="2201.5" y="244.6714">at(const dense_map::key_type &amp; key) const : const dense_map::mapped_type &amp;</text><ellipse cx="2192.5" cy="254.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="2201.5" y="257.4761">at(const dense_map::key_type &amp; key) : dense_map::mapped_type &amp;</text><ellipse cx="2192.5" cy="267.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="2201.5" y="270.2808">begin() const noexcept : dense_map::const_iterator</text><ellipse cx="2192.5" cy="279.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="2201.5" y="283.0854">begin() noexcept : dense_map::iterator</text><ellipse cx="2192.5" cy="292.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="2201.5" y="295.8901">begin(const dense_map::size_type index) : dense_map::local_iterator</text><ellipse cx="2192.5" cy="305.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="466" x="2201.5" y="308.6948">begin(const dense_map::size_type index) const : dense_map::const_local_iterator</text><ellipse cx="2192.5" cy="318.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="413" x="2201.5" y="321.4995">bucket(const dense_map::key_type &amp; key) const : dense_map::size_type</text><ellipse cx="2192.5" cy="331.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2201.5" y="334.3042">bucket_count() const : dense_map::size_type</text><ellipse cx="2192.5" cy="343.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="2201.5" y="347.1089">bucket_size(const dense_map::size_type index) const : dense_map::size_type</text><ellipse cx="2192.5" cy="356.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="2201.5" y="359.9136">cbegin(const dense_map::size_type index) const : dense_map::const_local_iterator</text><ellipse cx="2192.5" cy="369.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="2201.5" y="372.7183">cbegin() const noexcept : dense_map::const_iterator</text><ellipse cx="2192.5" cy="382.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="462" x="2201.5" y="385.5229">cend(const dense_map::size_type index) const : dense_map::const_local_iterator</text><ellipse cx="2192.5" cy="395.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="2201.5" y="398.3276">cend() const noexcept : dense_map::const_iterator</text><ellipse cx="2192.5" cy="407.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2201.5" y="411.1323">clear() noexcept : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="417.7266"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="2201.5" y="423.937">constrained_find&lt;Other&gt;(const Other &amp; key, std::size_t bucket) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="430.5313"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="2201.5" y="436.7417">constrained_find&lt;Other&gt;(const Other &amp; key, std::size_t bucket) const : auto</text><ellipse cx="2192.5" cy="446.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="2201.5" y="449.5464">contains(const dense_map::key_type &amp; key) const : bool</text><ellipse cx="2192.5" cy="459.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="946" x="2201.5" y="462.3511">contains&lt;Other&gt;(const Other &amp; key) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, _Bool&gt; &gt;</text><ellipse cx="2192.5" cy="471.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="2201.5" y="475.1558">count&lt;Other&gt;(const Other &amp; key) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, size_type&gt; &gt;</text><ellipse cx="2192.5" cy="484.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="407" x="2201.5" y="487.9604">count(const dense_map::key_type &amp; key) const : dense_map::size_type</text><ellipse cx="2192.5" cy="497.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="2201.5" y="500.7651">emplace&lt;Args...&gt;(Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2192.5" cy="510.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="2201.5" y="513.5698">empty() const noexcept : bool</text><ellipse cx="2192.5" cy="523.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="2201.5" y="526.3745">end(const dense_map::size_type index) : dense_map::local_iterator</text><ellipse cx="2192.5" cy="535.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="2201.5" y="539.1792">end(const dense_map::size_type index) const : dense_map::const_local_iterator</text><ellipse cx="2192.5" cy="548.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="2201.5" y="551.9839">end() noexcept : dense_map::iterator</text><ellipse cx="2192.5" cy="561.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2201.5" y="564.7886">end() const noexcept : dense_map::const_iterator</text><ellipse cx="2192.5" cy="574.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="2201.5" y="577.5933">equal_range(const dense_map::key_type &amp; key) const : std::pair&lt;const_iterator,const_iterator&gt;</text><ellipse cx="2192.5" cy="587.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="2201.5" y="590.3979">equal_range(const dense_map::key_type &amp; key) : std::pair&lt;iterator,iterator&gt;</text><ellipse cx="2192.5" cy="599.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1173" x="2201.5" y="603.2026">equal_range&lt;Other&gt;(const Other &amp; key) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;const_iterator, const_iterator&gt; &gt; &gt;</text><ellipse cx="2192.5" cy="612.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1064" x="2201.5" y="616.0073">equal_range&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;iterator, iterator&gt; &gt; &gt;</text><ellipse cx="2192.5" cy="625.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="2201.5" y="628.812">erase(const dense_map::key_type &amp; key) : dense_map::size_type</text><ellipse cx="2192.5" cy="638.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="2201.5" y="641.6167">erase(dense_map::const_iterator first, dense_map::const_iterator last) : dense_map::iterator</text><ellipse cx="2192.5" cy="651.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="2201.5" y="654.4214">erase(dense_map::const_iterator pos) : dense_map::iterator</text><ellipse cx="2192.5" cy="664.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="895" x="2201.5" y="667.2261">find&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, iterator&gt; &gt;</text><ellipse cx="2192.5" cy="676.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="967" x="2201.5" y="680.0308">find&lt;Other&gt;(const Other &amp; key) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, const_iterator&gt; &gt;</text><ellipse cx="2192.5" cy="689.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="2201.5" y="692.8354">find(const dense_map::key_type &amp; key) : dense_map::iterator</text><ellipse cx="2192.5" cy="702.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="2201.5" y="705.6401">find(const dense_map::key_type &amp; key) const : dense_map::const_iterator</text><ellipse cx="2192.5" cy="715.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="2201.5" y="718.4448">get_allocator() constexpr const noexcept : dense_map::allocator_type</text><ellipse cx="2192.5" cy="728.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="2201.5" y="731.2495">hash_function() const : dense_map::hasher</text><ellipse cx="2192.5" cy="740.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="2201.5" y="744.0542">insert(const dense_map::value_type &amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="2192.5" cy="753.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="2201.5" y="756.8589">insert(dense_map::value_type &amp;&amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="2192.5" cy="766.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="2201.5" y="769.6636">insert&lt;It&gt;(It first, It last) : void</text><ellipse cx="2192.5" cy="779.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="687" x="2201.5" y="782.4683">insert&lt;Arg&gt;(Arg &amp;&amp; value) : std::enable_if_t&lt;std::is_constructible_v&lt;value_type, Arg &amp;&amp;&gt;, std::pair&lt;iterator, _Bool&gt; &gt;</text><ellipse cx="2192.5" cy="792.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="2201.5" y="795.2729">insert_or_assign&lt;Arg&gt;(dense_map::key_type &amp;&amp; key, Arg &amp;&amp; value) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2192.5" cy="804.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="579" x="2201.5" y="808.0776">insert_or_assign&lt;Arg&gt;(const dense_map::key_type &amp; key, Arg &amp;&amp; value) : std::pair&lt;iterator, _Bool&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="814.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="2201.5" y="820.8823">insert_or_do_nothing&lt;Other,Args...&gt;(Other &amp;&amp; key, Args &amp;&amp;... args) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="827.4766"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="2201.5" y="833.687">insert_or_overwrite&lt;Other,Arg&gt;(Other &amp;&amp; key, Arg &amp;&amp; value) : auto</text><ellipse cx="2192.5" cy="843.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="2201.5" y="846.4917">key_eq() const : dense_map::key_equal</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="853.0859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="2201.5" y="859.2964">key_to_bucket&lt;Other&gt;(const Other &amp; key) const noexcept : std::size_t</text><ellipse cx="2192.5" cy="868.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2201.5" y="872.1011">load_factor() const : float</text><ellipse cx="2192.5" cy="881.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="2201.5" y="884.9058">max_bucket_count() const : dense_map::size_type</text><ellipse cx="2192.5" cy="894.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="2201.5" y="897.7104">max_load_factor(const float value) : void</text><ellipse cx="2192.5" cy="907.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2201.5" y="910.5151">max_load_factor() const : float</text><ellipse cx="2192.5" cy="920.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="2201.5" y="923.3198">max_size() const noexcept : dense_map::size_type</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="929.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2201.5" y="936.1245">move_and_pop(const std::size_t pos) : void</text><ellipse cx="2192.5" cy="945.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2201.5" y="948.9292">rehash(const dense_map::size_type cnt) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="955.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2201.5" y="961.7339">rehash_if_required() : void</text><ellipse cx="2192.5" cy="971.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="2201.5" y="974.5386">reserve(const dense_map::size_type cnt) : void</text><ellipse cx="2192.5" cy="984.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="2201.5" y="987.3433">size() const noexcept : dense_map::size_type</text><ellipse cx="2192.5" cy="996.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="598" x="2201.5" y="1000.1479">swap(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; other) : void</text><ellipse cx="2192.5" cy="1009.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="2201.5" y="1012.9526">try_emplace&lt;Args...&gt;(const dense_map::key_type &amp; key, Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2192.5" cy="1022.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="562" x="2201.5" y="1025.7573">try_emplace&lt;Args...&gt;(dense_map::key_type &amp;&amp; key, Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2182.5" x2="3453.5" y1="1032.3516" y2="1032.3516"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2187.5" y="1038.3516"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="1040.3516"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="171" x="2201.5" y="1046.562">default_threshold : const float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2187.5" y="1051.1563"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="1053.1563"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="210" x="2201.5" y="1059.3667">minimum_capacity : const std::size_t</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" xlink:show="new" xlink:title="packed" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2187.5" y="1063.9609"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="1065.9609"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" xlink:show="new" xlink:title="packed" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="506" x="2201.5" y="1072.1714">packed : compressed_pair&lt;dense_map::packed_container_type,dense_map::key_equal&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" xlink:show="new" xlink:title="sparse" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2187.5" y="1076.7656"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="1078.7656"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" xlink:show="new" xlink:title="sparse" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="490" x="2201.5" y="1084.9761">sparse : compressed_pair&lt;dense_map::sparse_container_type,dense_map::hasher&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" xlink:show="new" xlink:title="threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2187.5" y="1089.5703"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2189.5" y="1091.5703"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" xlink:show="new" xlink:title="threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2201.5" y="1097.7808">threshold : float</text></a><!--MD5=[7320dc4dcb2083e1941ab25e6de73a9a]
class C_0002013462517635721608--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22" target="_top" title="dense_set" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22" xlink:show="new" xlink:title="dense_set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0002013462517635721608" style="stroke: #A80036; stroke-width: 1.5;" width="732" x="969" y="1164"/><ellipse cx="984" cy="1180" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M986.9688,1185.6406 Q986.3906,1185.9375 985.75,1186.0781 Q985.1094,1186.2344 984.4063,1186.2344 Q981.9063,1186.2344 980.5781,1184.5938 Q979.2656,1182.9375 979.2656,1179.8125 Q979.2656,1176.6875 980.5781,1175.0313 Q981.9063,1173.375 984.4063,1173.375 Q985.1094,1173.375 985.75,1173.5313 Q986.4063,1173.6875 986.9688,1173.9844 L986.9688,1176.7031 Q986.3438,1176.125 985.75,1175.8594 Q985.1563,1175.5781 984.5313,1175.5781 Q983.1875,1175.5781 982.5,1176.6563 Q981.8125,1177.7188 981.8125,1179.8125 Q981.8125,1181.9063 982.5,1182.9844 Q983.1875,1184.0469 984.5313,1184.0469 Q985.1563,1184.0469 985.75,1183.7813 Q986.3438,1183.5 986.9688,1182.9219 L986.9688,1185.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="998" y="1184.1543">dense_set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="633" x="1071" y="1161"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="631" x="1072" y="1173.1387">Type,typename=std::hash&lt;Type&gt;,typename=std::equal_to&lt;Type&gt;,typename=std::allocator&lt;Type&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="970" x2="1700" y1="1196" y2="1196"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="970" x2="1700" y1="1204" y2="1204"/></a><!--MD5=[8e164126d651b34299a5e446e0fbb1be]
class C_0002133693157975512401--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15" target="_top" title="dense_map" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15" xlink:show="new" xlink:title="dense_map" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="48" id="C_0002133693157975512401" style="stroke: #A80036; stroke-width: 1.5;" width="896" x="6" y="1272"/><ellipse cx="21" cy="1288" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23.9688,1293.6406 Q23.3906,1293.9375 22.75,1294.0781 Q22.1094,1294.2344 21.4063,1294.2344 Q18.9063,1294.2344 17.5781,1292.5938 Q16.2656,1290.9375 16.2656,1287.8125 Q16.2656,1284.6875 17.5781,1283.0313 Q18.9063,1281.375 21.4063,1281.375 Q22.1094,1281.375 22.75,1281.5313 Q23.4063,1281.6875 23.9688,1281.9844 L23.9688,1284.7031 Q23.3438,1284.125 22.75,1283.8594 Q22.1563,1283.5781 21.5313,1283.5781 Q20.1875,1283.5781 19.5,1284.6563 Q18.8125,1285.7188 18.8125,1287.8125 Q18.8125,1289.9063 19.5,1290.9844 Q20.1875,1292.0469 21.5313,1292.0469 Q22.1563,1292.0469 22.75,1291.7813 Q23.3438,1291.5 23.9688,1290.9219 L23.9688,1293.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="35" y="1292.1543">dense_map</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="790" x="115" y="1269"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="788" x="116" y="1281.1387">Key,Type,typename=std::hash&lt;Key&gt;,typename=std::equal_to&lt;Key&gt;,typename=std::allocator&lt;std::pair&lt;const Key, Type&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="901" y1="1304" y2="1304"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="901" y1="1312" y2="1312"/></a><!--MD5=[4320e139eed08e1da86d5a2586562e08]
class C_0001428356275870265271--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228" target="_top" title="dense_set" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228" xlink:show="new" xlink:title="dense_set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fpfp2r9bky4xd)" height="960.3281" id="C_0001428356275870265271" style="stroke: #A80036; stroke-width: 1.5;" width="1238" x="4787" y="76"/><ellipse cx="5074.25" cy="92" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5077.2188,97.6406 Q5076.6406,97.9375 5076,98.0781 Q5075.3594,98.2344 5074.6563,98.2344 Q5072.1563,98.2344 5070.8281,96.5938 Q5069.5156,94.9375 5069.5156,91.8125 Q5069.5156,88.6875 5070.8281,87.0313 Q5072.1563,85.375 5074.6563,85.375 Q5075.3594,85.375 5076,85.5313 Q5076.6563,85.6875 5077.2188,85.9844 L5077.2188,88.7031 Q5076.5938,88.125 5076,87.8594 Q5075.4063,87.5781 5074.7813,87.5781 Q5073.4375,87.5781 5072.75,88.6563 Q5072.0625,89.7188 5072.0625,91.8125 Q5072.0625,93.9063 5072.75,94.9844 Q5073.4375,96.0469 5074.7813,96.0469 Q5075.4063,96.0469 5076,95.7813 Q5076.5938,95.5 5077.2188,94.9219 L5077.2188,97.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="5094.75" y="96.1543">dense_set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="588" x="5440" y="73"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="586" x="5441" y="85.1387">Type,Hash=std::hash&lt;Type&gt;,KeyEqual=std::equal_to&lt;Type&gt;,Allocator=std::allocator&lt;Type&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4788" x2="6024" y1="108" y2="108"/><ellipse cx="4798" cy="119" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="4807" y="122.2104">dense_set() : void</text><ellipse cx="4798" cy="131.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="4807" y="135.0151">dense_set(const dense_set::allocator_type &amp; allocator) : void</text><ellipse cx="4798" cy="144.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="533" x="4807" y="147.8198">dense_set(const dense_set::size_type cnt, const dense_set::allocator_type &amp; allocator) : void</text><ellipse cx="4798" cy="157.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="729" x="4807" y="160.6245">dense_set(const dense_set::size_type cnt, const dense_set::hasher &amp; hash, const dense_set::allocator_type &amp; allocator) : void</text><ellipse cx="4798" cy="170.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1212" x="4807" y="173.4292">dense_set(const dense_set::size_type cnt, const dense_set::hasher &amp; hash = hasher{}, const dense_set::key_equal &amp; equal = key_equal{}, const dense_set::allocator_type &amp; allocator = allocator_type{}) : void</text><ellipse cx="4798" cy="183.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="653" x="4807" y="186.2339">dense_set(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;) = default : void</text><ellipse cx="4798" cy="195.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="887" x="4807" y="199.0386">dense_set(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; other, const dense_set::allocator_type &amp; allocator) : void</text><ellipse cx="4798" cy="208.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="683" x="4807" y="211.8433">dense_set(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp;) noexcept = default : void</text><ellipse cx="4798" cy="221.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="862" x="4807" y="224.6479">dense_set(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp; other, const dense_set::allocator_type &amp; allocator) : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4788" x2="6024" y1="231.2422" y2="231.2422"/><ellipse cx="4798" cy="242.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1089" x="4807" y="245.4526">operator=(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;) = default : dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;</text><ellipse cx="4798" cy="255.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1119" x="4807" y="258.2573">operator=(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp;) noexcept = default : dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4788" x2="6024" y1="264.8516" y2="264.8516"/><ellipse cx="4798" cy="275.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4807" y="279.062">begin() const noexcept : dense_set::const_iterator</text><ellipse cx="4798" cy="288.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="4807" y="291.8667">begin() noexcept : dense_set::iterator</text><ellipse cx="4798" cy="301.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="4807" y="304.6714">begin(const dense_set::size_type index) : dense_set::local_iterator</text><ellipse cx="4798" cy="314.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="4807" y="317.4761">begin(const dense_set::size_type index) const : dense_set::const_local_iterator</text><ellipse cx="4798" cy="327.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="4807" y="330.2808">bucket(const dense_set::value_type &amp; value) const : dense_set::size_type</text><ellipse cx="4798" cy="339.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="4807" y="343.0854">bucket_count() const : dense_set::size_type</text><ellipse cx="4798" cy="352.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="4807" y="355.8901">bucket_size(const dense_set::size_type index) const : dense_set::size_type</text><ellipse cx="4798" cy="365.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="4807" y="368.6948">cbegin() const noexcept : dense_set::const_iterator</text><ellipse cx="4798" cy="378.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="4807" y="381.4995">cbegin(const dense_set::size_type index) const : dense_set::const_local_iterator</text><ellipse cx="4798" cy="391.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="4807" y="394.3042">cend() const noexcept : dense_set::const_iterator</text><ellipse cx="4798" cy="403.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="4807" y="407.1089">cend(const dense_set::size_type index) const : dense_set::const_local_iterator</text><ellipse cx="4798" cy="416.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="4807" y="419.9136">clear() noexcept : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="426.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="4807" y="432.7183">constrained_find&lt;Other&gt;(const Other &amp; value, std::size_t bucket) const : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="439.3125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="4807" y="445.5229">constrained_find&lt;Other&gt;(const Other &amp; value, std::size_t bucket) : auto</text><ellipse cx="4798" cy="455.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="957" x="4807" y="458.3276">contains&lt;Other&gt;(const Other &amp; value) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, _Bool&gt; &gt;</text><ellipse cx="4798" cy="467.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="4807" y="471.1323">contains(const dense_set::value_type &amp; value) const : bool</text><ellipse cx="4798" cy="480.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="404" x="4807" y="483.937">count(const dense_set::value_type &amp; key) const : dense_set::size_type</text><ellipse cx="4798" cy="493.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="4807" y="496.7417">count&lt;Other&gt;(const Other &amp; key) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, size_type&gt; &gt;</text><ellipse cx="4798" cy="506.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="4807" y="509.5464">emplace&lt;Args...&gt;(Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="4798" cy="519.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="4807" y="522.3511">empty() const noexcept : bool</text><ellipse cx="4798" cy="531.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="4807" y="535.1558">end() const noexcept : dense_set::const_iterator</text><ellipse cx="4798" cy="544.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="4807" y="547.9604">end() noexcept : dense_set::iterator</text><ellipse cx="4798" cy="557.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="4807" y="560.7651">end(const dense_set::size_type index) : dense_set::local_iterator</text><ellipse cx="4798" cy="570.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="442" x="4807" y="573.5698">end(const dense_set::size_type index) const : dense_set::const_local_iterator</text><ellipse cx="4798" cy="583.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1184" x="4807" y="586.3745">equal_range&lt;Other&gt;(const Other &amp; value) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;const_iterator, const_iterator&gt; &gt; &gt;</text><ellipse cx="4798" cy="595.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="4807" y="599.1792">equal_range(const dense_set::value_type &amp; value) : std::pair&lt;iterator,iterator&gt;</text><ellipse cx="4798" cy="608.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="563" x="4807" y="611.9839">equal_range(const dense_set::value_type &amp; value) const : std::pair&lt;const_iterator,const_iterator&gt;</text><ellipse cx="4798" cy="621.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1075" x="4807" y="624.7886">equal_range&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;iterator, iterator&gt; &gt; &gt;</text><ellipse cx="4798" cy="634.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="4807" y="637.5933">erase(const dense_set::value_type &amp; value) : dense_set::size_type</text><ellipse cx="4798" cy="647.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="4807" y="650.3979">erase(dense_set::const_iterator first, dense_set::const_iterator last) : dense_set::iterator</text><ellipse cx="4798" cy="659.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="4807" y="663.2026">erase(dense_set::const_iterator pos) : dense_set::iterator</text><ellipse cx="4798" cy="672.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="978" x="4807" y="676.0073">find&lt;Other&gt;(const Other &amp; value) const : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, const_iterator&gt; &gt;</text><ellipse cx="4798" cy="685.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="4807" y="688.812">find&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, iterator&gt; &gt;</text><ellipse cx="4798" cy="698.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="432" x="4807" y="701.6167">find(const dense_set::value_type &amp; value) const : dense_set::const_iterator</text><ellipse cx="4798" cy="711.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="4807" y="714.4214">find(const dense_set::value_type &amp; value) : dense_set::iterator</text><ellipse cx="4798" cy="724.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="4807" y="727.2261">get_allocator() constexpr const noexcept : dense_set::allocator_type</text><ellipse cx="4798" cy="736.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="4807" y="740.0308">hash_function() const : dense_set::hasher</text><ellipse cx="4798" cy="749.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="4807" y="752.8354">insert(const dense_set::value_type &amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="4798" cy="762.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="374" x="4807" y="765.6401">insert(dense_set::value_type &amp;&amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="4798" cy="775.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="4807" y="778.4448">insert&lt;It&gt;(It first, It last) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="785.0391"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="4807" y="791.2495">insert_or_do_nothing&lt;Other&gt;(Other &amp;&amp; value) : auto</text><ellipse cx="4798" cy="800.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="4807" y="804.0542">key_eq() const : dense_set::key_equal</text><ellipse cx="4798" cy="813.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4807" y="816.8589">load_factor() const : float</text><ellipse cx="4798" cy="826.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="4807" y="829.6636">max_bucket_count() const : dense_set::size_type</text><ellipse cx="4798" cy="839.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="4807" y="842.4683">max_load_factor(const float value) : void</text><ellipse cx="4798" cy="852.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="4807" y="855.2729">max_load_factor() const : float</text><ellipse cx="4798" cy="864.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="4807" y="868.0776">max_size() const noexcept : dense_set::size_type</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="874.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="4807" y="880.8823">move_and_pop(const std::size_t pos) : void</text><ellipse cx="4798" cy="890.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="4807" y="893.687">rehash(const dense_set::size_type cnt) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="900.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4807" y="906.4917">rehash_if_required() : void</text><ellipse cx="4798" cy="916.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="4807" y="919.2964">reserve(const dense_set::size_type cnt) : void</text><ellipse cx="4798" cy="928.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="4807" y="932.1011">size() const noexcept : dense_set::size_type</text><ellipse cx="4798" cy="941.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="4807" y="944.9058">swap(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; other) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="951.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="423" x="4807" y="957.7104">value_to_bucket&lt;Other&gt;(const Other &amp; value) const noexcept : std::size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4788" x2="6024" y1="964.3047" y2="964.3047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4793" y="970.3047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="972.3047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="171" x="4807" y="978.5151">default_threshold : const float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4793" y="983.1094"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="985.1094"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="210" x="4807" y="991.3198">minimum_capacity : const std::size_t</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" xlink:show="new" xlink:title="packed" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4793" y="995.9141"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="997.9141"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" xlink:show="new" xlink:title="packed" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="4807" y="1004.1245">packed : compressed_pair&lt;dense_set::packed_container_type,dense_set::key_equal&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" xlink:show="new" xlink:title="sparse" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4793" y="1008.7188"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="1010.7188"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" xlink:show="new" xlink:title="sparse" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="476" x="4807" y="1016.9292">sparse : compressed_pair&lt;dense_set::sparse_container_type,dense_set::hasher&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" xlink:show="new" xlink:title="threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4793" y="1021.5234"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4795" y="1023.5234"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" xlink:show="new" xlink:title="threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="4807" y="1029.7339">threshold : float</text></a><!--MD5=[a3fac86242b9335cdff4999b7150774f]
link C_0001376588142308052157 to C_0000861079117123945586--><path d="M2113.57,1320.23 C2112.01,1330.97 2110.87,1344.7 2110.16,1359.79 " fill="none" id="C_0001376588142308052157-&gt;C_0000861079117123945586" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2117.15,1360.14,2109.47,1379.89,2103.16,1359.66,2117.15,1360.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5070bbce314c29457a8fd2120ff4c5e5]
link C_0000861079117123945586 to C_0001376588142308052157--><path d="M2135.27,1379.89 C2134.8,1359.55 2133.6,1340.3 2131.67,1325.48 " fill="none" id="C_0000861079117123945586-&gt;C_0001376588142308052157" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2130.93,1320.23,2128.2277,1329.7009,2131.6291,1325.1809,2136.1491,1328.5823,2130.93,1320.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c500dbe4301bac8ceadbf6d860a07d04]
link C_0000897312785691592656 to C_0002151284549161307803--><path d="M3539.57,1320.23 C3537.08,1337.34 3535.67,1362 3535.33,1387.71 " fill="none" id="C_0000897312785691592656-&gt;C_0002151284549161307803" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3542.33,1387.95,3535.28,1407.93,3528.33,1387.92,3542.33,1387.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b02f898e3429196c2f4bc76353570aad]
link C_0002151284549161307803 to C_0000897312785691592656--><path d="M3561.46,1407.93 C3561.74,1377.81 3560.46,1346.78 3557.64,1325.23 " fill="none" id="C_0002151284549161307803-&gt;C_0000897312785691592656" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3556.93,1320.23,3554.2583,1329.7096,3557.6451,1325.1786,3562.1761,1328.5654,3556.93,1320.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[28dc78c24382831325099e4d5e547e8c]
link C_0001653959084428336991 to C_0001376588142308052157--><path d="M2025.69,1212 C2041.46,1225.59 2061.78,1243.1 2079.68,1258.53 " fill="none" id="C_0001653959084428336991-&gt;C_0001376588142308052157" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2084.36,1253.32,2094.94,1271.68,2075.22,1263.92,2084.36,1253.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fe60b2c55b2e3cb4e460ebeb1e8bce84]
link C_0001467357144574951784 to C_0001376588142308052157--><path d="M2448.52,1212 C2384.97,1228.16 2299.6,1249.85 2232.1,1267.01 " fill="none" id="C_0001467357144574951784-&gt;C_0001376588142308052157" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2233.77,1273.81,2212.67,1271.95,2230.32,1260.24,2233.77,1273.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[25de523f53f0751f636f2dcb32aee79f]
link C_0001059592200633017691 to C_0000897312785691592656--><path d="M3194.86,1212 C3264.04,1228.26 3357.11,1250.13 3430.33,1267.34 " fill="none" id="C_0001059592200633017691-&gt;C_0000897312785691592656" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3432.07,1260.56,3449.94,1271.95,3428.87,1274.19,3432.07,1260.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1a281a41fa3cb76c3180deaf1b92531a]
link C_0001333101687401183603 to C_0000897312785691592656--><path d="M3645.09,1212 C3629.2,1225.59 3608.71,1243.1 3590.66,1258.53 " fill="none" id="C_0001333101687401183603-&gt;C_0000897312785691592656" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3595.03,1264,3575.28,1271.68,3585.94,1253.36,3595.03,1264" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6c29670a810db531a6f7eaed24bef518]
link C_0000049162385221685939 to C_0002029187173053297188--><path d="M4711.57,1320.23 C4710.01,1330.97 4708.87,1344.7 4708.16,1359.79 " fill="none" id="C_0000049162385221685939-&gt;C_0002029187173053297188" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="4715.15,1360.14,4707.47,1379.89,4701.16,1359.66,4715.15,1360.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e24ec109f6616b04b7113a3b7b3bfa49]
link C_0002029187173053297188 to C_0000049162385221685939--><path d="M4733.27,1379.89 C4732.8,1359.55 4731.6,1340.3 4729.67,1325.48 " fill="none" id="C_0002029187173053297188-&gt;C_0000049162385221685939" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4728.93,1320.23,4726.2277,1329.7009,4729.6291,1325.1809,4734.1491,1328.5823,4728.93,1320.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7301c427e690c3c11802562a6c3b0365]
link C_0000722665158129243283 to C_0001736854889005654369--><path d="M6119.57,1320.23 C6117.08,1337.34 6115.67,1362 6115.33,1387.71 " fill="none" id="C_0000722665158129243283-&gt;C_0001736854889005654369" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="6122.33,1387.95,6115.28,1407.93,6108.33,1387.92,6122.33,1387.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b8f10e949d73ec7176438383739077a5]
link C_0001736854889005654369 to C_0000722665158129243283--><path d="M6141.46,1407.93 C6141.74,1377.81 6140.46,1346.78 6137.64,1325.23 " fill="none" id="C_0001736854889005654369-&gt;C_0000722665158129243283" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6136.93,1320.23,6134.2583,1329.7096,6137.6451,1325.1786,6142.1761,1328.5654,6136.93,1320.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c315919b799a0288a7f12ef6281c571a]
link C_0000560377495148252911 to C_0000049162385221685939--><path d="M4624.47,1212 C4640.11,1225.59 4660.27,1243.1 4678.03,1258.53 " fill="none" id="C_0000560377495148252911-&gt;C_0000049162385221685939" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="4682.65,1253.28,4693.16,1271.68,4673.47,1263.85,4682.65,1253.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[80c988f954c179cb9433d98522465ff9]
link C_0000152036747823538986 to C_0000049162385221685939--><path d="M5041.82,1212 C4979.32,1228.12 4895.41,1249.76 4828.94,1266.9 " fill="none" id="C_0000152036747823538986-&gt;C_0000049162385221685939" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="4830.48,1273.74,4809.36,1271.95,4826.98,1260.18,4830.48,1273.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ccbd1905d2e88dbc2b0b3cd362d61590]
link C_0000412176680063565687 to C_0000722665158129243283--><path d="M5778.78,1212 C5847.04,1228.22 5938.83,1250.04 6011.18,1267.23 " fill="none" id="C_0000412176680063565687-&gt;C_0000722665158129243283" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="6013.19,1260.52,6031.03,1271.95,6009.95,1274.14,6013.19,1260.52" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d2961ae6847f94f8b255df0ed62c7d52]
link C_0001477017809704643123 to C_0000722665158129243283--><path d="M6223.53,1212 C6207.89,1225.59 6187.73,1243.1 6169.97,1258.53 " fill="none" id="C_0001477017809704643123-&gt;C_0000722665158129243283" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="6174.53,1263.85,6154.84,1271.68,6165.35,1253.28,6174.53,1263.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0dd53fd4e338847213086a5183a4b062]
link C_0001073675684695097120 to C_0001653959084428336991--><path d="M2181.27,1046.79 C2118.07,1095.41 2065.43,1135.9 2033.23,1160.67 " fill="none" id="C_0001073675684695097120-&gt;C_0001653959084428336991" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2029.02,1163.91,2038.5969,1161.6114,2032.989,1160.869,2033.7313,1155.2611,2029.02,1163.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ae6d513b5c534d8c423698e734fac680]
link C_0001073675684695097120 to C_0001467357144574951784--><path d="M2575.62,1104.31 C2565.87,1126.32 2557.63,1144.93 2551.45,1158.88 " fill="none" id="C_0001073675684695097120-&gt;C_0001467357144574951784" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2549.27,1163.81,2556.5594,1157.1869,2551.2861,1159.2345,2549.2385,1153.9612,2549.27,1163.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ecc7ce58aae67baef3e6ab2e1521eecd]
link C_0001073675684695097120 to C_0001059592200633017691--><path d="M3060.38,1104.31 C3070.13,1126.32 3078.37,1144.93 3084.55,1158.88 " fill="none" id="C_0001073675684695097120-&gt;C_0001059592200633017691" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3086.73,1163.81,3086.7615,1153.9612,3084.7139,1159.2345,3079.4406,1157.1869,3086.73,1163.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c1eac9dbe39d8b1a90eebad379366f30]
link C_0001073675684695097120 to C_0001333101687401183603--><path d="M3454.57,1026.6 C3532.71,1084.25 3598.4,1132.71 3636.5,1160.81 " fill="none" id="C_0001073675684695097120-&gt;C_0001333101687401183603" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3640.55,1163.8,3635.6814,1155.2386,3636.5262,1160.8321,3630.9327,1161.6768,3640.55,1163.8" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a4348484402d8a11a79ab69705d74342]
link C_0001428356275870265271 to C_0000560377495148252911--><path d="M4791.54,1036.1 C4723.02,1089.52 4665.71,1134.21 4631.65,1160.76 " fill="none" id="C_0001428356275870265271-&gt;C_0000560377495148252911" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="4627.62,1163.91,4637.1781,1161.5348,4631.5645,1160.8373,4632.2619,1155.2236,4627.62,1163.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5f9f6c139ebdff139677544f56d7bc]
link C_0001428356275870265271 to C_0000152036747823538986--><path d="M5196.87,1036.1 C5174.09,1088.28 5154.96,1132.12 5143.28,1158.87 " fill="none" id="C_0001428356275870265271-&gt;C_0000152036747823538986" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="5141.18,1163.67,5148.4444,1157.0195,5143.1788,1159.0869,5141.1115,1153.8214,5141.18,1163.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6779e09efb66460a61a3326052755729]
link C_0001428356275870265271 to C_0000412176680063565687--><path d="M5615.89,1036.1 C5638.75,1088.28 5657.96,1132.12 5669.68,1158.87 " fill="none" id="C_0001428356275870265271-&gt;C_0000412176680063565687" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="5671.78,1163.67,5671.8485,1153.8214,5669.7812,1159.0869,5664.5156,1157.0195,5671.78,1163.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2af41ddb09acfc0a9594f64bda5e0dbd]
link C_0001428356275870265271 to C_0001477017809704643123--><path d="M6025.21,1019.21 C6106.75,1080.07 6175.61,1131.47 6214.87,1160.78 " fill="none" id="C_0001428356275870265271-&gt;C_0001477017809704643123" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6219.04,1163.89,6214.2203,1155.301,6215.0331,1160.8992,6209.435,1161.712,6219.04,1163.89" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[29473a514458cb1eccb07a949a3909ef]
link C_0001949040226502523653 to C_0001638501202125067276--><!--MD5=[f164ffa91d61c14e79dbd3324be91f3f]
link C_0001638501202125067276 to C_0002138822504316417237--><!--MD5=[ea05fc571aef05788e3b89e1c1b261e0]
link C_0001949040226502523653 to C_0001565515217260524899--><!--MD5=[fb2472cc2d821adfd6e905bbe6e856b9]
link C_0001565515217260524899 to C_0001656541682645832012--><!--MD5=[2fd4bb3702eeb57c1207b95cabfb5e25]
link C_0001656541682645832012 to C_0002013462517635721608--><!--MD5=[10b04ecedd83b1ffad1a978764d80f43]
link C_0001565515217260524899 to C_0002133693157975512401--><!--MD5=[fb90bc22aff3a67d34b67a2c6f9cbd98]
@startuml
class "internal::dense_map_node<Key,Type>" as C_0001949040226502523653
class C_0001949040226502523653 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31{dense_map_node}]] {
+dense_map_node<Key, Type><Args...>(const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator,Args...>(std::allocator_arg_t, const Allocator & allocator, const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t, const Allocator & allocator, const dense_map_node<Key,Type> & other) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t, const Allocator & allocator, dense_map_node<Key,Type> && other) : void
__
+element : internal::dense_map_node::value_type [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55{element}]]]
+next : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54{next}]]]
}
class "internal::dense_map_iterator<Other>" as C_0001376588142308052157
class C_0001376588142308052157 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
__
}
class "internal::dense_map_iterator<It>" as C_0000861079117123945586
class C_0000861079117123945586 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
+dense_map_iterator() noexcept : void
+dense_map_iterator(const It iter) noexcept : void
+dense_map_iterator<It><Other,typename=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_iterator<Other> & other) noexcept : void
..
+operator*() constexpr const noexcept : internal::dense_map_iterator::reference
+operator+(const internal::dense_map_iterator::difference_type value) constexpr const noexcept : dense_map_iterator<It>
+operator++() constexpr noexcept : dense_map_iterator<It> &
+operator++(int) constexpr noexcept : dense_map_iterator<It>
+operator+=(const internal::dense_map_iterator::difference_type value) constexpr noexcept : dense_map_iterator<It> &
+operator-(const internal::dense_map_iterator::difference_type value) constexpr const noexcept : dense_map_iterator<It>
+operator- -() constexpr noexcept : dense_map_iterator<It> &
+operator- -(int) constexpr noexcept : dense_map_iterator<It>
+operator-=(const internal::dense_map_iterator::difference_type value) constexpr noexcept : dense_map_iterator<It> &
+operator->() constexpr const noexcept : internal::dense_map_iterator::pointer
+operator[](const internal::dense_map_iterator::difference_type value) constexpr const noexcept : internal::dense_map_iterator::reference
__
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141{it}]]]
}
class "internal::dense_map_local_iterator<Other>" as C_0000897312785691592656
class C_0000897312785691592656 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
__
}
class "internal::dense_map_local_iterator<It>" as C_0002151284549161307803
class C_0002151284549161307803 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
+dense_map_local_iterator() noexcept : void
+dense_map_local_iterator(It iter, const std::size_t pos) noexcept : void
+dense_map_local_iterator<It><Other,typename=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_local_iterator<Other> & other) noexcept : void
..
+operator*() constexpr const noexcept : internal::dense_map_local_iterator::reference
+operator++() constexpr noexcept : dense_map_local_iterator<It> &
+operator++(int) constexpr noexcept : dense_map_local_iterator<It>
+operator->() constexpr const noexcept : internal::dense_map_local_iterator::pointer
..
+index() constexpr const noexcept : std::size_t
__
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230{offset}]]]
}
class "internal::dense_map_iterator<typename packed_container_type::const_iterator>" as C_0001653959084428336991
class C_0001653959084428336991 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
__
}
class "internal::dense_map_iterator<typename packed_container_type::iterator>" as C_0001467357144574951784
class C_0001467357144574951784 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
__
}
class "internal::dense_map_local_iterator<typename packed_container_type::const_iterator>" as C_0001059592200633017691
class C_0001059592200633017691 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
__
}
class "internal::dense_map_local_iterator<typename packed_container_type::iterator>" as C_0001333101687401183603
class C_0001333101687401183603 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
__
}
class "internal::dense_map_local_iterator<typename>" as C_0001638501202125067276
class C_0001638501202125067276 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182{dense_map_local_iterator}]] {
__
}
class "internal::dense_map_iterator<typename>" as C_0002138822504316417237
class C_0002138822504316417237 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61{dense_map_iterator}]] {
__
}
class "internal::dense_set_iterator<Other>" as C_0000049162385221685939
class C_0000049162385221685939 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
__
}
class "internal::dense_set_iterator<It>" as C_0002029187173053297188
class C_0002029187173053297188 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
+dense_set_iterator() noexcept : void
+dense_set_iterator(const It iter) noexcept : void
+dense_set_iterator<It><Other,typename=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_iterator<Other> & other) noexcept : void
..
+operator*() constexpr const noexcept : internal::dense_set_iterator::reference
+operator+(const internal::dense_set_iterator::difference_type value) constexpr const noexcept : dense_set_iterator<It>
+operator++() constexpr noexcept : dense_set_iterator<It> &
+operator++(int) constexpr noexcept : dense_set_iterator<It>
+operator+=(const internal::dense_set_iterator::difference_type value) constexpr noexcept : dense_set_iterator<It> &
+operator-(const internal::dense_set_iterator::difference_type value) constexpr const noexcept : dense_set_iterator<It>
+operator- -() constexpr noexcept : dense_set_iterator<It> &
+operator- -(int) constexpr noexcept : dense_set_iterator<It>
+operator-=(const internal::dense_set_iterator::difference_type value) constexpr noexcept : dense_set_iterator<It> &
+operator->() constexpr const noexcept : internal::dense_set_iterator::pointer
+operator[](const internal::dense_set_iterator::difference_type value) constexpr const noexcept : internal::dense_set_iterator::reference
__
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109{it}]]]
}
class "internal::dense_set_local_iterator<Other>" as C_0000722665158129243283
class C_0000722665158129243283 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
__
}
class "internal::dense_set_local_iterator<It>" as C_0001736854889005654369
class C_0001736854889005654369 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
+dense_set_local_iterator() noexcept : void
+dense_set_local_iterator(It iter, const std::size_t pos) noexcept : void
+dense_set_local_iterator<It><Other,typename=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_local_iterator<Other> & other) noexcept : void
..
+operator*() constexpr const noexcept : internal::dense_set_local_iterator::reference
+operator++() constexpr noexcept : dense_set_local_iterator<It> &
+operator++(int) constexpr noexcept : dense_set_local_iterator<It>
+operator->() constexpr const noexcept : internal::dense_set_local_iterator::pointer
..
+index() constexpr const noexcept : std::size_t
__
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195{offset}]]]
}
class "internal::dense_set_iterator<typename packed_container_type::const_iterator>" as C_0000560377495148252911
class C_0000560377495148252911 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
__
}
class "internal::dense_set_iterator<typename packed_container_type::iterator>" as C_0000152036747823538986
class C_0000152036747823538986 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
__
}
class "internal::dense_set_local_iterator<typename packed_container_type::const_iterator>" as C_0000412176680063565687
class C_0000412176680063565687 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
__
}
class "internal::dense_set_local_iterator<typename packed_container_type::iterator>" as C_0001477017809704643123
class C_0001477017809704643123 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
__
}
class "internal::dense_set_iterator<typename>" as C_0001565515217260524899
class C_0001565515217260524899 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32{dense_set_iterator}]] {
__
}
class "internal::dense_set_local_iterator<typename>" as C_0001656541682645832012
class C_0001656541682645832012 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150{dense_set_local_iterator}]] {
__
}
class "dense_map<Key,Type,Hash=std::hash<Key>,KeyEqual=std::equal_to<Key>,Allocator=std::allocator<std::pair<const Key, Type> >>" as C_0001073675684695097120
class C_0001073675684695097120 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264{dense_map}]] {
+dense_map() : void
+dense_map(const dense_map::allocator_type & allocator) : void
+dense_map(const dense_map::size_type cnt, const dense_map::allocator_type & allocator) : void
+dense_map(const dense_map::size_type cnt, const dense_map::hasher & hash, const dense_map::allocator_type & allocator) : void
+dense_map(const dense_map::size_type cnt, const dense_map::hasher & hash = hasher{}, const dense_map::key_equal & equal = key_equal{}, const dense_map::allocator_type & allocator = allocator_type{}) : void
+dense_map(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &) = default : void
+dense_map(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other, const dense_map::allocator_type & allocator) : void
+dense_map(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &&) noexcept = default : void
+dense_map(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && other, const dense_map::allocator_type & allocator) : void
..
+operator=(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &) = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
+operator=(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &&) noexcept = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
..
+operator[](const dense_map::key_type & key) : dense_map::mapped_type &
+operator[](dense_map::key_type && key) : dense_map::mapped_type &
..
+at(const dense_map::key_type & key) const : const dense_map::mapped_type &
+at(const dense_map::key_type & key) : dense_map::mapped_type &
+begin() const noexcept : dense_map::const_iterator
+begin() noexcept : dense_map::iterator
+begin(const dense_map::size_type index) : dense_map::local_iterator
+begin(const dense_map::size_type index) const : dense_map::const_local_iterator
+bucket(const dense_map::key_type & key) const : dense_map::size_type
+bucket_count() const : dense_map::size_type
+bucket_size(const dense_map::size_type index) const : dense_map::size_type
+cbegin(const dense_map::size_type index) const : dense_map::const_local_iterator
+cbegin() const noexcept : dense_map::const_iterator
+cend(const dense_map::size_type index) const : dense_map::const_local_iterator
+cend() const noexcept : dense_map::const_iterator
+clear() noexcept : void
-constrained_find<Other>(const Other & key, std::size_t bucket) : auto
-constrained_find<Other>(const Other & key, std::size_t bucket) const : auto
+contains(const dense_map::key_type & key) const : bool
+contains<Other>(const Other & key) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
+count<Other>(const Other & key) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+count(const dense_map::key_type & key) const : dense_map::size_type
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+empty() const noexcept : bool
+end(const dense_map::size_type index) : dense_map::local_iterator
+end(const dense_map::size_type index) const : dense_map::const_local_iterator
+end() noexcept : dense_map::iterator
+end() const noexcept : dense_map::const_iterator
+equal_range(const dense_map::key_type & key) const : std::pair<const_iterator,const_iterator>
+equal_range(const dense_map::key_type & key) : std::pair<iterator,iterator>
+equal_range<Other>(const Other & key) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+equal_range<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+erase(const dense_map::key_type & key) : dense_map::size_type
+erase(dense_map::const_iterator first, dense_map::const_iterator last) : dense_map::iterator
+erase(dense_map::const_iterator pos) : dense_map::iterator
+find<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find<Other>(const Other & key) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+find(const dense_map::key_type & key) : dense_map::iterator
+find(const dense_map::key_type & key) const : dense_map::const_iterator
+get_allocator() constexpr const noexcept : dense_map::allocator_type
+hash_function() const : dense_map::hasher
+insert(const dense_map::value_type & value) : std::pair<iterator,bool>
+insert(dense_map::value_type && value) : std::pair<iterator,bool>
+insert<It>(It first, It last) : void
+insert<Arg>(Arg && value) : std::enable_if_t<std::is_constructible_v<value_type, Arg &&>, std::pair<iterator, _Bool> >
+insert_or_assign<Arg>(dense_map::key_type && key, Arg && value) : std::pair<iterator, _Bool>
+insert_or_assign<Arg>(const dense_map::key_type & key, Arg && value) : std::pair<iterator, _Bool>
-insert_or_do_nothing<Other,Args...>(Other && key, Args &&... args) : auto
-insert_or_overwrite<Other,Arg>(Other && key, Arg && value) : auto
+key_eq() const : dense_map::key_equal
-key_to_bucket<Other>(const Other & key) const noexcept : std::size_t
+load_factor() const : float
+max_bucket_count() const : dense_map::size_type
+max_load_factor(const float value) : void
+max_load_factor() const : float
+max_size() const noexcept : dense_map::size_type
-move_and_pop(const std::size_t pos) : void
+rehash(const dense_map::size_type cnt) : void
-rehash_if_required() : void
+reserve(const dense_map::size_type cnt) : void
+size() const noexcept : dense_map::size_type
+swap(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other) : void
+try_emplace<Args...>(const dense_map::key_type & key, Args &&... args) : std::pair<iterator, _Bool>
+try_emplace<Args...>(dense_map::key_type && key, Args &&... args) : std::pair<iterator, _Bool>
__
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266{minimum_capacity}]]]
-packed : compressed_pair<dense_map::packed_container_type,dense_map::key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036{packed}]]]
-sparse : compressed_pair<dense_map::sparse_container_type,dense_map::hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035{sparse}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037{threshold}]]]
}
class "dense_set<Type,typename=std::hash<Type>,typename=std::equal_to<Type>,typename=std::allocator<Type>>" as C_0002013462517635721608
class C_0002013462517635721608 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22{dense_set}]] {
__
}
class "dense_map<Key,Type,typename=std::hash<Key>,typename=std::equal_to<Key>,typename=std::allocator<std::pair<const Key, Type> >>" as C_0002133693157975512401
class C_0002133693157975512401 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15{dense_map}]] {
__
}
class "dense_set<Type,Hash=std::hash<Type>,KeyEqual=std::equal_to<Type>,Allocator=std::allocator<Type>>" as C_0001428356275870265271
class C_0001428356275870265271 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228{dense_set}]] {
+dense_set() : void
+dense_set(const dense_set::allocator_type & allocator) : void
+dense_set(const dense_set::size_type cnt, const dense_set::allocator_type & allocator) : void
+dense_set(const dense_set::size_type cnt, const dense_set::hasher & hash, const dense_set::allocator_type & allocator) : void
+dense_set(const dense_set::size_type cnt, const dense_set::hasher & hash = hasher{}, const dense_set::key_equal & equal = key_equal{}, const dense_set::allocator_type & allocator = allocator_type{}) : void
+dense_set(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &) = default : void
+dense_set(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other, const dense_set::allocator_type & allocator) : void
+dense_set(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &&) noexcept = default : void
+dense_set(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && other, const dense_set::allocator_type & allocator) : void
..
+operator=(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &) = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
+operator=(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &&) noexcept = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
..
+begin() const noexcept : dense_set::const_iterator
+begin() noexcept : dense_set::iterator
+begin(const dense_set::size_type index) : dense_set::local_iterator
+begin(const dense_set::size_type index) const : dense_set::const_local_iterator
+bucket(const dense_set::value_type & value) const : dense_set::size_type
+bucket_count() const : dense_set::size_type
+bucket_size(const dense_set::size_type index) const : dense_set::size_type
+cbegin() const noexcept : dense_set::const_iterator
+cbegin(const dense_set::size_type index) const : dense_set::const_local_iterator
+cend() const noexcept : dense_set::const_iterator
+cend(const dense_set::size_type index) const : dense_set::const_local_iterator
+clear() noexcept : void
-constrained_find<Other>(const Other & value, std::size_t bucket) const : auto
-constrained_find<Other>(const Other & value, std::size_t bucket) : auto
+contains<Other>(const Other & value) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
+contains(const dense_set::value_type & value) const : bool
+count(const dense_set::value_type & key) const : dense_set::size_type
+count<Other>(const Other & key) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+empty() const noexcept : bool
+end() const noexcept : dense_set::const_iterator
+end() noexcept : dense_set::iterator
+end(const dense_set::size_type index) : dense_set::local_iterator
+end(const dense_set::size_type index) const : dense_set::const_local_iterator
+equal_range<Other>(const Other & value) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+equal_range(const dense_set::value_type & value) : std::pair<iterator,iterator>
+equal_range(const dense_set::value_type & value) const : std::pair<const_iterator,const_iterator>
+equal_range<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+erase(const dense_set::value_type & value) : dense_set::size_type
+erase(dense_set::const_iterator first, dense_set::const_iterator last) : dense_set::iterator
+erase(dense_set::const_iterator pos) : dense_set::iterator
+find<Other>(const Other & value) const : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+find<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find(const dense_set::value_type & value) const : dense_set::const_iterator
+find(const dense_set::value_type & value) : dense_set::iterator
+get_allocator() constexpr const noexcept : dense_set::allocator_type
+hash_function() const : dense_set::hasher
+insert(const dense_set::value_type & value) : std::pair<iterator,bool>
+insert(dense_set::value_type && value) : std::pair<iterator,bool>
+insert<It>(It first, It last) : void
-insert_or_do_nothing<Other>(Other && value) : auto
+key_eq() const : dense_set::key_equal
+load_factor() const : float
+max_bucket_count() const : dense_set::size_type
+max_load_factor(const float value) : void
+max_load_factor() const : float
+max_size() const noexcept : dense_set::size_type
-move_and_pop(const std::size_t pos) : void
+rehash(const dense_set::size_type cnt) : void
-rehash_if_required() : void
+reserve(const dense_set::size_type cnt) : void
+size() const noexcept : dense_set::size_type
+swap(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other) : void
-value_to_bucket<Other>(const Other & value) const noexcept : std::size_t
__
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230{minimum_capacity}]]]
-packed : compressed_pair<dense_set::packed_container_type,dense_set::key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889{packed}]]]
-sparse : compressed_pair<dense_set::sparse_container_type,dense_set::hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888{sparse}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890{threshold}]]]
}
C_0001376588142308052157 ..|> C_0000861079117123945586
C_0000861079117123945586 ..> C_0001376588142308052157
C_0000897312785691592656 ..|> C_0002151284549161307803
C_0002151284549161307803 ..> C_0000897312785691592656
C_0001653959084428336991 ..|> C_0001376588142308052157
C_0001467357144574951784 ..|> C_0001376588142308052157
C_0001059592200633017691 ..|> C_0000897312785691592656
C_0001333101687401183603 ..|> C_0000897312785691592656
C_0000049162385221685939 ..|> C_0002029187173053297188
C_0002029187173053297188 ..> C_0000049162385221685939
C_0000722665158129243283 ..|> C_0001736854889005654369
C_0001736854889005654369 ..> C_0000722665158129243283
C_0000560377495148252911 ..|> C_0000049162385221685939
C_0000152036747823538986 ..|> C_0000049162385221685939
C_0000412176680063565687 ..|> C_0000722665158129243283
C_0001477017809704643123 ..|> C_0000722665158129243283
C_0001073675684695097120 ..> C_0001653959084428336991
C_0001073675684695097120 ..> C_0001467357144574951784
C_0001073675684695097120 ..> C_0001059592200633017691
C_0001073675684695097120 ..> C_0001333101687401183603
C_0001428356275870265271 ..> C_0000560377495148252911
C_0001428356275870265271 ..> C_0000152036747823538986
C_0001428356275870265271 ..> C_0000412176680063565687
C_0001428356275870265271 ..> C_0001477017809704643123

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.19+7-post-Ubuntu-0ubuntu122.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>