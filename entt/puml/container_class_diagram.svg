<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2614px" preserveAspectRatio="none" style="width:5609px;height:2614px;" version="1.1" viewBox="0 0 5609 2614" width="5609px" zoomAndPan="magnify"><defs><filter height="300%" id="fdsmrlxy5o0kf" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[e485b9236e0677b5983f08d71091e2ab]
class C_0001723716587279733623--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001723716587279733623" style="stroke: #A80036; stroke-width: 1.5;" width="163" x="2714" y="1541"/><ellipse cx="2729" cy="1557" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2731.9688,1562.6406 Q2731.3906,1562.9375 2730.75,1563.0781 Q2730.1094,1563.2344 2729.4063,1563.2344 Q2726.9063,1563.2344 2725.5781,1561.5938 Q2724.2656,1559.9375 2724.2656,1556.8125 Q2724.2656,1553.6875 2725.5781,1552.0313 Q2726.9063,1550.375 2729.4063,1550.375 Q2730.1094,1550.375 2730.75,1550.5313 Q2731.4063,1550.6875 2731.9688,1550.9844 L2731.9688,1553.7031 Q2731.3438,1553.125 2730.75,1552.8594 Q2730.1563,1552.5781 2729.5313,1552.5781 Q2728.1875,1552.5781 2727.5,1553.6563 Q2726.8125,1554.7188 2726.8125,1556.8125 Q2726.8125,1558.9063 2727.5,1559.9844 Q2728.1875,1561.0469 2729.5313,1561.0469 Q2730.1563,1561.0469 2730.75,1560.7813 Q2731.3438,1560.5 2731.9688,1559.9219 L2731.9688,1562.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2743" y="1561.1543">type_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="78" x="2802" y="1538"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="2803" y="1550.1387">First,Other...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2715" x2="2876" y1="1573" y2="1573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2715" x2="2876" y1="1581" y2="1581"/><!--MD5=[6a01bbc4ee62ff4973ee939bbc6a0468]
class C_0000401973545844492876--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000401973545844492876" style="stroke: #A80036; stroke-width: 1.5;" width="133" x="2636" y="456"/><ellipse cx="2651" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2653.9688,477.6406 Q2653.3906,477.9375 2652.75,478.0781 Q2652.1094,478.2344 2651.4063,478.2344 Q2648.9063,478.2344 2647.5781,476.5938 Q2646.2656,474.9375 2646.2656,471.8125 Q2646.2656,468.6875 2647.5781,467.0313 Q2648.9063,465.375 2651.4063,465.375 Q2652.1094,465.375 2652.75,465.5313 Q2653.4063,465.6875 2653.9688,465.9844 L2653.9688,468.7031 Q2653.3438,468.125 2652.75,467.8594 Q2652.1563,467.5781 2651.5313,467.5781 Q2650.1875,467.5781 2649.5,468.6563 Q2648.8125,469.7188 2648.8125,471.8125 Q2648.8125,473.9063 2649.5,474.9844 Q2650.1875,476.0469 2651.5313,476.0469 Q2652.1563,476.0469 2652.75,475.7813 Q2653.3438,475.5 2653.9688,474.9219 L2653.9688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2665" y="476.1543">type_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="48" x="2724" y="453"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="2725" y="465.1387">Other...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2637" x2="2768" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2637" x2="2768" y1="496" y2="496"/><!--MD5=[f7b1ce25921e4ee6a8c04575492edfa0]
class C_0000496685335806935509--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000496685335806935509" style="stroke: #A80036; stroke-width: 1.5;" width="167" x="2804" y="456"/><ellipse cx="2819" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2821.9688,477.6406 Q2821.3906,477.9375 2820.75,478.0781 Q2820.1094,478.2344 2819.4063,478.2344 Q2816.9063,478.2344 2815.5781,476.5938 Q2814.2656,474.9375 2814.2656,471.8125 Q2814.2656,468.6875 2815.5781,467.0313 Q2816.9063,465.375 2819.4063,465.375 Q2820.1094,465.375 2820.75,465.5313 Q2821.4063,465.6875 2821.9688,465.9844 L2821.9688,468.7031 Q2821.3438,468.125 2820.75,467.8594 Q2820.1563,467.5781 2819.5313,467.5781 Q2818.1875,467.5781 2817.5,468.6563 Q2816.8125,469.7188 2816.8125,471.8125 Q2816.8125,473.9063 2817.5,474.9844 Q2818.1875,476.0469 2819.5313,476.0469 Q2820.1563,476.0469 2820.75,475.7813 Q2821.3438,475.5 2821.9688,474.9219 L2821.9688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2833" y="476.1543">type_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="82" x="2892" y="453"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="80" x="2893" y="465.1387">Type,Other...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2805" x2="2970" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2805" x2="2970" y1="496" y2="496"/><!--MD5=[6148bbf39386e6884f1c3a37d5bc37de]
class C_0000816653833137337534--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000816653833137337534" style="stroke: #A80036; stroke-width: 1.5;" width="83" x="465" y="456"/><ellipse cx="480" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M482.9688,477.6406 Q482.3906,477.9375 481.75,478.0781 Q481.1094,478.2344 480.4063,478.2344 Q477.9063,478.2344 476.5781,476.5938 Q475.2656,474.9375 475.2656,471.8125 Q475.2656,468.6875 476.5781,467.0313 Q477.9063,465.375 480.4063,465.375 Q481.1094,465.375 481.75,465.5313 Q482.4063,465.6875 482.9688,465.9844 L482.9688,468.7031 Q482.3438,468.125 481.75,467.8594 Q481.1563,467.5781 480.5313,467.5781 Q479.1875,467.5781 478.5,468.6563 Q477.8125,469.7188 477.8125,471.8125 Q477.8125,473.9063 478.5,474.9844 Q479.1875,476.0469 480.5313,476.0469 Q481.1563,476.0469 481.75,475.7813 Q482.3438,475.5 482.9688,474.9219 L482.9688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="494" y="476.1543">type_list</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="466" x2="547" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="466" x2="547" y1="496" y2="496"/><!--MD5=[442f4775273a873dcd68395488ee7552]
class C_0000150299823092418682--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000150299823092418682" style="stroke: #A80036; stroke-width: 1.5;" width="129" x="2731" y="2274"/><ellipse cx="2746" cy="2290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2748.9688,2295.6406 Q2748.3906,2295.9375 2747.75,2296.0781 Q2747.1094,2296.2344 2746.4063,2296.2344 Q2743.9063,2296.2344 2742.5781,2294.5938 Q2741.2656,2292.9375 2741.2656,2289.8125 Q2741.2656,2286.6875 2742.5781,2285.0313 Q2743.9063,2283.375 2746.4063,2283.375 Q2747.1094,2283.375 2747.75,2283.5313 Q2748.4063,2283.6875 2748.9688,2283.9844 L2748.9688,2286.7031 Q2748.3438,2286.125 2747.75,2285.8594 Q2747.1563,2285.5781 2746.5313,2285.5781 Q2745.1875,2285.5781 2744.5,2286.6563 Q2743.8125,2287.7188 2743.8125,2289.8125 Q2743.8125,2291.9063 2744.5,2292.9844 Q2745.1875,2294.0469 2746.5313,2294.0469 Q2747.1563,2294.0469 2747.75,2293.7813 Q2748.3438,2293.5 2748.9688,2292.9219 L2748.9688,2295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="2760" y="2294.1543">type_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="44" x="2819" y="2271"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="42" x="2820" y="2283.1387">Type...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="2859" y1="2306" y2="2306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="2859" y1="2314" y2="2314"/><!--MD5=[dba122445a36f167654618ace17aa89b]
class C_0001276342508473126665--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001276342508473126665" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="583.5" y="456"/><ellipse cx="598.5" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M601.4688,477.6406 Q600.8906,477.9375 600.25,478.0781 Q599.6094,478.2344 598.9063,478.2344 Q596.4063,478.2344 595.0781,476.5938 Q593.7656,474.9375 593.7656,471.8125 Q593.7656,468.6875 595.0781,467.0313 Q596.4063,465.375 598.9063,465.375 Q599.6094,465.375 600.25,465.5313 Q600.9063,465.6875 601.4688,465.9844 L601.4688,468.7031 Q600.8438,468.125 600.25,467.8594 Q599.6563,467.5781 599.0313,467.5781 Q597.6875,467.5781 597,468.6563 Q596.3125,469.7188 596.3125,471.8125 Q596.3125,473.9063 597,474.9844 Q597.6875,476.0469 599.0313,476.0469 Q599.6563,476.0469 600.25,475.7813 Q600.8438,475.5 601.4688,474.9219 L601.4688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="612.5" y="476.1543">value_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="87" x="677.5" y="453"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="85" x="678.5" y="465.1387">Value,Other...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="584.5" x2="760.5" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="584.5" x2="760.5" y1="496" y2="496"/><!--MD5=[80b4c8a766d5784b057aa28a7b75a901]
class C_0000669672540584988414--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000669672540584988414" style="stroke: #A80036; stroke-width: 1.5;" width="139" x="797" y="456"/><ellipse cx="812" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M814.9688,477.6406 Q814.3906,477.9375 813.75,478.0781 Q813.1094,478.2344 812.4063,478.2344 Q809.9063,478.2344 808.5781,476.5938 Q807.2656,474.9375 807.2656,471.8125 Q807.2656,468.6875 808.5781,467.0313 Q809.9063,465.375 812.4063,465.375 Q813.1094,465.375 813.75,465.5313 Q814.4063,465.6875 814.9688,465.9844 L814.9688,468.7031 Q814.3438,468.125 813.75,467.8594 Q813.1563,467.5781 812.5313,467.5781 Q811.1875,467.5781 810.5,468.6563 Q809.8125,469.7188 809.8125,471.8125 Q809.8125,473.9063 810.5,474.9844 Q811.1875,476.0469 812.5313,476.0469 Q813.1563,476.0469 813.75,475.7813 Q814.3438,475.5 814.9688,474.9219 L814.9688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="826" y="476.1543">value_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="48" x="891" y="453"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="892" y="465.1387">Other...</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="798" x2="935" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="798" x2="935" y1="496" y2="496"/><!--MD5=[5d983811bb68f4bf490dbb95eda629bd]
class C_0000114548431562228752--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000114548431562228752" style="stroke: #A80036; stroke-width: 1.5;" width="128" x="971.5" y="456"/><ellipse cx="986.5" cy="472" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M989.4688,477.6406 Q988.8906,477.9375 988.25,478.0781 Q987.6094,478.2344 986.9063,478.2344 Q984.4063,478.2344 983.0781,476.5938 Q981.7656,474.9375 981.7656,471.8125 Q981.7656,468.6875 983.0781,467.0313 Q984.4063,465.375 986.9063,465.375 Q987.6094,465.375 988.25,465.5313 Q988.9063,465.6875 989.4688,465.9844 L989.4688,468.7031 Q988.8438,468.125 988.25,467.8594 Q987.6563,467.5781 987.0313,467.5781 Q985.6875,467.5781 985,468.6563 Q984.3125,469.7188 984.3125,471.8125 Q984.3125,473.9063 985,474.9844 Q985.6875,476.0469 987.0313,476.0469 Q987.6563,476.0469 988.25,475.7813 Q988.8438,475.5 989.4688,474.9219 L989.4688,477.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="1000.5" y="476.1543">value_list</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="37" x="1065.5" y="453"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="35" x="1066.5" y="465.1387">Value</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="972.5" x2="1098.5" y1="488" y2="488"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="972.5" x2="1098.5" y1="496" y2="496"/><!--MD5=[b82c2f0aad354ea181f7b1fd379c5c11]
class C_0001949040226502523653--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31" target="_top" title="dense_map_node" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31" xlink:show="new" xlink:title="dense_map_node" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="124.8281" id="C_0001949040226502523653" style="stroke: #A80036; stroke-width: 1.5;" width="850" x="3189.5" y="2479"/><ellipse cx="3496.75" cy="2495" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3499.7188,2500.6406 Q3499.1406,2500.9375 3498.5,2501.0781 Q3497.8594,2501.2344 3497.1563,2501.2344 Q3494.6563,2501.2344 3493.3281,2499.5938 Q3492.0156,2497.9375 3492.0156,2494.8125 Q3492.0156,2491.6875 3493.3281,2490.0313 Q3494.6563,2488.375 3497.1563,2488.375 Q3497.8594,2488.375 3498.5,2488.5313 Q3499.1563,2488.6875 3499.7188,2488.9844 L3499.7188,2491.7031 Q3499.0938,2491.125 3498.5,2490.8594 Q3497.9063,2490.5781 3497.2813,2490.5781 Q3495.9375,2490.5781 3495.25,2491.6563 Q3494.5625,2492.7188 3494.5625,2494.8125 Q3494.5625,2496.9063 3495.25,2497.9844 Q3495.9375,2499.0469 3497.2813,2499.0469 Q3497.9063,2499.0469 3498.5,2498.7813 Q3499.0938,2498.5 3499.7188,2497.9219 L3499.7188,2500.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="166" x="3517.25" y="2499.1543">internal::dense_map_node</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="59" x="3983.5" y="2476"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="3984.5" y="2488.1387">Key,Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3190.5" x2="4038.5" y1="2511" y2="2511"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" target="_top" title="next" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" xlink:show="new" xlink:title="next" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3195.5" y="2517"/><ellipse cx="3200.5" cy="2522" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" target="_top" title="next" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54" xlink:show="new" xlink:title="next" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3209.5" y="2525.2104">next : std::size_t</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" target="_top" title="element" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" xlink:show="new" xlink:title="element" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3195.5" y="2529.8047"/><ellipse cx="3200.5" cy="2534.8047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" target="_top" title="element" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55" xlink:show="new" xlink:title="element" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="3209.5" y="2538.0151">element : value_type</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3190.5" x2="4038.5" y1="2544.6094" y2="2544.6094"/><ellipse cx="3200.5" cy="2555.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="490" x="3209.5" y="2558.8198">dense_map_node&lt;Key, Type&gt;&lt;Args...&gt;(const std::size_t pos, Args &amp;&amp;... args) : void</text><ellipse cx="3200.5" cy="2568.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="824" x="3209.5" y="2571.6245">dense_map_node&lt;Key, Type&gt;&lt;Allocator,Args...&gt;(std::allocator_arg_t , const Allocator &amp; allocator, const std::size_t pos, Args &amp;&amp;... args) : void</text><ellipse cx="3200.5" cy="2581.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="816" x="3209.5" y="2584.4292">dense_map_node&lt;Key, Type&gt;&lt;Allocator&gt;(std::allocator_arg_t , const Allocator &amp; allocator, const dense_map_node&lt;Key,Type&gt; &amp; other) : void</text><ellipse cx="3200.5" cy="2594.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="791" x="3209.5" y="2597.2339">dense_map_node&lt;Key, Type&gt;&lt;Allocator&gt;(std::allocator_arg_t , const Allocator &amp; allocator, dense_map_node&lt;Key,Type&gt; &amp;&amp; other) : void</text><!--MD5=[bd216884ea10f16c6140157bd4dd90d3]
class C_0000861079117123945586--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="240.0703" id="C_0000861079117123945586" style="stroke: #A80036; stroke-width: 1.5;" width="1001" x="6" y="1445"/><ellipse cx="405.25" cy="1461" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M408.2188,1466.6406 Q407.6406,1466.9375 407,1467.0781 Q406.3594,1467.2344 405.6563,1467.2344 Q403.1563,1467.2344 401.8281,1465.5938 Q400.5156,1463.9375 400.5156,1460.8125 Q400.5156,1457.6875 401.8281,1456.0313 Q403.1563,1454.375 405.6563,1454.375 Q406.3594,1454.375 407,1454.5313 Q407.6563,1454.6875 408.2188,1454.9844 L408.2188,1457.7031 Q407.5938,1457.125 407,1456.8594 Q406.4063,1456.5781 405.7813,1456.5781 Q404.4375,1456.5781 403.75,1457.6563 Q403.0625,1458.7188 403.0625,1460.8125 Q403.0625,1462.9063 403.75,1463.9844 Q404.4375,1465.0469 405.7813,1465.0469 Q406.4063,1465.0469 407,1464.7813 Q407.5938,1464.5 408.2188,1463.9219 L408.2188,1466.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="181" x="425.75" y="1465.1543">internal::dense_map_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="999" y="1442"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="1000" y="1454.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="1006" y1="1477" y2="1477"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="12" y="1483"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1485"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="26" y="1491.2104">it : It</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="1006" y1="1497.8047" y2="1497.8047"/><ellipse cx="17" cy="1508.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="26" y="1512.0151">dense_map_iterator&lt;It&gt;() : void</text><ellipse cx="17" cy="1521.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="26" y="1524.8198">dense_map_iterator&lt;It&gt;(const It iter) : void</text><ellipse cx="17" cy="1534.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="26" y="1537.6245">operator++() : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="17" cy="1547.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="26" y="1550.4292">operator++(int ) : dense_map_iterator&lt;It&gt;</text><ellipse cx="17" cy="1560.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="26" y="1563.2339">operator--() : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="17" cy="1572.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="26" y="1576.0386">operator--(int ) : dense_map_iterator&lt;It&gt;</text><ellipse cx="17" cy="1585.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="26" y="1588.8433">operator+=(const difference_type value) : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="17" cy="1598.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="408" x="26" y="1601.6479">operator+(const difference_type value) const : dense_map_iterator&lt;It&gt;</text><ellipse cx="17" cy="1611.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="26" y="1614.4526">operator-=(const difference_type value) : dense_map_iterator&lt;It&gt; &amp;</text><ellipse cx="17" cy="1624.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="26" y="1627.2573">operator-(const difference_type value) const : dense_map_iterator&lt;It&gt;</text><ellipse cx="17" cy="1636.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="26" y="1640.062">operator[](const difference_type value) const : reference</text><ellipse cx="17" cy="1649.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="26" y="1652.8667">operator-&gt;() const : pointer</text><ellipse cx="17" cy="1662.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="26" y="1665.6714">operator*() const : reference</text><ellipse cx="17" cy="1675.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="975" x="26" y="1678.4761">dense_map_iterator&lt;It&gt;&lt;Other,=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_map_iterator&lt;Other&gt; &amp; other) : void</text><!--MD5=[9bc7b4fa310d2f1181430de65e2efcd0]
class C_0002151284549161307803--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="176.0469" id="C_0002151284549161307803" style="stroke: #A80036; stroke-width: 1.5;" width="1065" x="1042" y="1477"/><ellipse cx="1455.75" cy="1493" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1458.7188,1498.6406 Q1458.1406,1498.9375 1457.5,1499.0781 Q1456.8594,1499.2344 1456.1563,1499.2344 Q1453.6563,1499.2344 1452.3281,1497.5938 Q1451.0156,1495.9375 1451.0156,1492.8125 Q1451.0156,1489.6875 1452.3281,1488.0313 Q1453.6563,1486.375 1456.1563,1486.375 Q1456.8594,1486.375 1457.5,1486.5313 Q1458.1563,1486.6875 1458.7188,1486.9844 L1458.7188,1489.7031 Q1458.0938,1489.125 1457.5,1488.8594 Q1456.9063,1488.5781 1456.2813,1488.5781 Q1454.9375,1488.5781 1454.25,1489.6563 Q1453.5625,1490.7188 1453.5625,1492.8125 Q1453.5625,1494.9063 1454.25,1495.9844 Q1454.9375,1497.0469 1456.2813,1497.0469 Q1456.9063,1497.0469 1457.5,1496.7813 Q1458.0938,1496.5 1458.7188,1495.9219 L1458.7188,1498.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="216" x="1476.25" y="1497.1543">internal::dense_map_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="2099" y="1474"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="2100" y="1486.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1043" x2="2106" y1="1509" y2="1509"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1048" y="1515"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1050" y="1517"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="1062" y="1523.2104">it : It</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" xlink:show="new" xlink:title="offset" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1048" y="1527.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1050" y="1529.8047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230" xlink:show="new" xlink:title="offset" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1062" y="1536.0151">offset : std::size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="1043" x2="2106" y1="1542.6094" y2="1542.6094"/><ellipse cx="1053" cy="1553.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="1062" y="1556.8198">dense_map_local_iterator&lt;It&gt;() : void</text><ellipse cx="1053" cy="1566.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="1062" y="1569.6245">dense_map_local_iterator&lt;It&gt;(It iter, const std::size_t pos) : void</text><ellipse cx="1053" cy="1579.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1062" y="1582.4292">operator++() : dense_map_local_iterator&lt;It&gt; &amp;</text><ellipse cx="1053" cy="1592.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="1062" y="1595.2339">operator++(int ) : dense_map_local_iterator&lt;It&gt;</text><ellipse cx="1053" cy="1604.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1062" y="1608.0386">operator-&gt;() const : pointer</text><ellipse cx="1053" cy="1617.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1062" y="1620.8433">operator*() const : reference</text><ellipse cx="1053" cy="1630.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1062" y="1633.6479">index() const : std::size_t</text><ellipse cx="1053" cy="1643.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1039" x="1062" y="1646.4526">dense_map_local_iterator&lt;It&gt;&lt;Other,=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_map_local_iterator&lt;Other&gt; &amp; other) : void</text><!--MD5=[fcb111032b6e122c509283ea36a24560]
class C_0001271452795922285914--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61" target="_top" title="dense_map_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61" xlink:show="new" xlink:title="dense_map_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001271452795922285914" style="stroke: #A80036; stroke-width: 1.5;" width="233" x="2142" y="1541"/><ellipse cx="2157" cy="1557" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2159.9688,1562.6406 Q2159.3906,1562.9375 2158.75,1563.0781 Q2158.1094,1563.2344 2157.4063,1563.2344 Q2154.9063,1563.2344 2153.5781,1561.5938 Q2152.2656,1559.9375 2152.2656,1556.8125 Q2152.2656,1553.6875 2153.5781,1552.0313 Q2154.9063,1550.375 2157.4063,1550.375 Q2158.1094,1550.375 2158.75,1550.5313 Q2159.4063,1550.6875 2159.9688,1550.9844 L2159.9688,1553.7031 Q2159.3438,1553.125 2158.75,1552.8594 Q2158.1563,1552.5781 2157.5313,1552.5781 Q2156.1875,1552.5781 2155.5,1553.6563 Q2154.8125,1554.7188 2154.8125,1556.8125 Q2154.8125,1558.9063 2155.5,1559.9844 Q2156.1875,1561.0469 2157.5313,1561.0469 Q2158.1563,1561.0469 2158.75,1560.7813 Q2159.3438,1560.5 2159.9688,1559.9219 L2159.9688,1562.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="201" x="2171" y="1561.1543">internal::dense_map_iterator&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2143" x2="2374" y1="1573" y2="1573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2143" x2="2374" y1="1581" y2="1581"/></a><!--MD5=[addb1a5d57a2761beb1a024182499b68]
class C_0002270315657488311861--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182" target="_top" title="dense_map_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182" xlink:show="new" xlink:title="dense_map_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0002270315657488311861" style="stroke: #A80036; stroke-width: 1.5;" width="268" x="2410.5" y="1541"/><ellipse cx="2425.5" cy="1557" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2428.4688,1562.6406 Q2427.8906,1562.9375 2427.25,1563.0781 Q2426.6094,1563.2344 2425.9063,1563.2344 Q2423.4063,1563.2344 2422.0781,1561.5938 Q2420.7656,1559.9375 2420.7656,1556.8125 Q2420.7656,1553.6875 2422.0781,1552.0313 Q2423.4063,1550.375 2425.9063,1550.375 Q2426.6094,1550.375 2427.25,1550.5313 Q2427.9063,1550.6875 2428.4688,1550.9844 L2428.4688,1553.7031 Q2427.8438,1553.125 2427.25,1552.8594 Q2426.6563,1552.5781 2426.0313,1552.5781 Q2424.6875,1552.5781 2424,1553.6563 Q2423.3125,1554.7188 2423.3125,1556.8125 Q2423.3125,1558.9063 2424,1559.9844 Q2424.6875,1561.0469 2426.0313,1561.0469 Q2426.6563,1561.0469 2427.25,1560.7813 Q2427.8438,1560.5 2428.4688,1559.9219 L2428.4688,1562.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="236" x="2439.5" y="1561.1543">internal::dense_map_local_iterator&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2411.5" x2="2677.5" y1="1573" y2="1573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2411.5" x2="2677.5" y1="1581" y2="1581"/></a><!--MD5=[0b84dd7b943ca01825f61f48138f4fd7]
class C_0002029187173053297188--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="240.0703" id="C_0002029187173053297188" style="stroke: #A80036; stroke-width: 1.5;" width="987" x="13" y="2178"/><ellipse cx="408.75" cy="2194" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M411.7188,2199.6406 Q411.1406,2199.9375 410.5,2200.0781 Q409.8594,2200.2344 409.1563,2200.2344 Q406.6563,2200.2344 405.3281,2198.5938 Q404.0156,2196.9375 404.0156,2193.8125 Q404.0156,2190.6875 405.3281,2189.0313 Q406.6563,2187.375 409.1563,2187.375 Q409.8594,2187.375 410.5,2187.5313 Q411.1563,2187.6875 411.7188,2187.9844 L411.7188,2190.7031 Q411.0938,2190.125 410.5,2189.8594 Q409.9063,2189.5781 409.2813,2189.5781 Q407.9375,2189.5781 407.25,2190.6563 Q406.5625,2191.7188 406.5625,2193.8125 Q406.5625,2195.9063 407.25,2196.9844 Q407.9375,2198.0469 409.2813,2198.0469 Q409.9063,2198.0469 410.5,2197.7813 Q411.0938,2197.5 411.7188,2196.9219 L411.7188,2199.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="429.25" y="2198.1543">internal::dense_set_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="992" y="2175"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="993" y="2187.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="14" x2="999" y1="2210" y2="2210"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="19" y="2216"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="21" y="2218"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="33" y="2224.2104">it : It</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="14" x2="999" y1="2230.8047" y2="2230.8047"/><ellipse cx="24" cy="2241.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="33" y="2245.0151">dense_set_iterator&lt;It&gt;() : void</text><ellipse cx="24" cy="2254.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="33" y="2257.8198">dense_set_iterator&lt;It&gt;(const It iter) : void</text><ellipse cx="24" cy="2267.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="33" y="2270.6245">operator++() : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="24" cy="2280.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="33" y="2283.4292">operator++(int ) : dense_set_iterator&lt;It&gt;</text><ellipse cx="24" cy="2293.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="33" y="2296.2339">operator--() : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="24" cy="2305.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="33" y="2309.0386">operator--(int ) : dense_set_iterator&lt;It&gt;</text><ellipse cx="24" cy="2318.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="33" y="2321.8433">operator+=(const difference_type value) : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="24" cy="2331.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="33" y="2334.6479">operator+(const difference_type value) const : dense_set_iterator&lt;It&gt;</text><ellipse cx="24" cy="2344.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="33" y="2347.4526">operator-=(const difference_type value) : dense_set_iterator&lt;It&gt; &amp;</text><ellipse cx="24" cy="2357.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="33" y="2360.2573">operator-(const difference_type value) const : dense_set_iterator&lt;It&gt;</text><ellipse cx="24" cy="2369.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="33" y="2373.062">operator[](const difference_type value) const : reference</text><ellipse cx="24" cy="2382.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="33" y="2385.8667">operator-&gt;() const : pointer</text><ellipse cx="24" cy="2395.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="33" y="2398.6714">operator*() const : reference</text><ellipse cx="24" cy="2408.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="961" x="33" y="2411.4761">dense_set_iterator&lt;It&gt;&lt;Other,=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_set_iterator&lt;Other&gt; &amp; other) : void</text><!--MD5=[c1c488eac545d3c23f77b28bdf60204c]
class C_0001736854889005654369--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="176.0469" id="C_0001736854889005654369" style="stroke: #A80036; stroke-width: 1.5;" width="1051" x="1035" y="2210"/><ellipse cx="1445.25" cy="2226" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1448.2188,2231.6406 Q1447.6406,2231.9375 1447,2232.0781 Q1446.3594,2232.2344 1445.6563,2232.2344 Q1443.1563,2232.2344 1441.8281,2230.5938 Q1440.5156,2228.9375 1440.5156,2225.8125 Q1440.5156,2222.6875 1441.8281,2221.0313 Q1443.1563,2219.375 1445.6563,2219.375 Q1446.3594,2219.375 1447,2219.5313 Q1447.6563,2219.6875 1448.2188,2219.9844 L1448.2188,2222.7031 Q1447.5938,2222.125 1447,2221.8594 Q1446.4063,2221.5781 1445.7813,2221.5781 Q1444.4375,2221.5781 1443.75,2222.6563 Q1443.0625,2223.7188 1443.0625,2225.8125 Q1443.0625,2227.9063 1443.75,2228.9844 Q1444.4375,2230.0469 1445.7813,2230.0469 Q1446.4063,2230.0469 1447,2229.7813 Q1447.5938,2229.5 1448.2188,2228.9219 L1448.2188,2231.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="209" x="1465.75" y="2230.1543">internal::dense_set_local_iterator</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="11" x="2078" y="2207"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="9" x="2079" y="2219.1387">It</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1036" x2="2085" y1="2242" y2="2242"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" xlink:show="new" xlink:title="it" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1041" y="2248"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1043" y="2250"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" target="_top" title="it" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194" xlink:show="new" xlink:title="it" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="1055" y="2256.2104">it : It</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" xlink:show="new" xlink:title="offset" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="1041" y="2260.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1043" y="2262.8047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" target="_top" title="offset" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195" xlink:show="new" xlink:title="offset" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1055" y="2269.0151">offset : std::size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="1036" x2="2085" y1="2275.6094" y2="2275.6094"/><ellipse cx="1046" cy="2286.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="1055" y="2289.8198">dense_set_local_iterator&lt;It&gt;() : void</text><ellipse cx="1046" cy="2299.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="1055" y="2302.6245">dense_set_local_iterator&lt;It&gt;(It iter, const std::size_t pos) : void</text><ellipse cx="1046" cy="2312.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="1055" y="2315.4292">operator++() : dense_set_local_iterator&lt;It&gt; &amp;</text><ellipse cx="1046" cy="2325.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="1055" y="2328.2339">operator++(int ) : dense_set_local_iterator&lt;It&gt;</text><ellipse cx="1046" cy="2337.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1055" y="2341.0386">operator-&gt;() const : pointer</text><ellipse cx="1046" cy="2350.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1055" y="2353.8433">operator*() const : reference</text><ellipse cx="1046" cy="2363.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1055" y="2366.6479">index() const : std::size_t</text><ellipse cx="1046" cy="2376.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1025" x="1055" y="2379.4526">dense_set_local_iterator&lt;It&gt;&lt;Other,=std::enable_if_t&lt;!std::is_same_v&lt;It, Other&gt; &amp;&amp; std::is_constructible_v&lt;It, Other&gt; &gt;&gt;(const dense_set_local_iterator&lt;Other&gt; &amp; other) : void</text><!--MD5=[edc669f160468fe96f54475116ce8346]
class C_0000377880092827030616--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150" target="_top" title="dense_set_local_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150" xlink:show="new" xlink:title="dense_set_local_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000377880092827030616" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="2121" y="2274"/><ellipse cx="2136" cy="2290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2138.9688,2295.6406 Q2138.3906,2295.9375 2137.75,2296.0781 Q2137.1094,2296.2344 2136.4063,2296.2344 Q2133.9063,2296.2344 2132.5781,2294.5938 Q2131.2656,2292.9375 2131.2656,2289.8125 Q2131.2656,2286.6875 2132.5781,2285.0313 Q2133.9063,2283.375 2136.4063,2283.375 Q2137.1094,2283.375 2137.75,2283.5313 Q2138.4063,2283.6875 2138.9688,2283.9844 L2138.9688,2286.7031 Q2138.3438,2286.125 2137.75,2285.8594 Q2137.1563,2285.5781 2136.5313,2285.5781 Q2135.1875,2285.5781 2134.5,2286.6563 Q2133.8125,2287.7188 2133.8125,2289.8125 Q2133.8125,2291.9063 2134.5,2292.9844 Q2135.1875,2294.0469 2136.5313,2294.0469 Q2137.1563,2294.0469 2137.75,2293.7813 Q2138.3438,2293.5 2138.9688,2292.9219 L2138.9688,2295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="229" x="2150" y="2294.1543">internal::dense_set_local_iterator&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2122" x2="2381" y1="2306" y2="2306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2122" x2="2381" y1="2314" y2="2314"/></a><!--MD5=[5538759c9023bf9da6d1531d81b7d5b3]
class C_0000515821743975700101--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32" target="_top" title="dense_set_iterator" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32" xlink:show="new" xlink:title="dense_set_iterator" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000515821743975700101" style="stroke: #A80036; stroke-width: 1.5;" width="226" x="2417.5" y="2274"/><ellipse cx="2432.5" cy="2290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2435.4688,2295.6406 Q2434.8906,2295.9375 2434.25,2296.0781 Q2433.6094,2296.2344 2432.9063,2296.2344 Q2430.4063,2296.2344 2429.0781,2294.5938 Q2427.7656,2292.9375 2427.7656,2289.8125 Q2427.7656,2286.6875 2429.0781,2285.0313 Q2430.4063,2283.375 2432.9063,2283.375 Q2433.6094,2283.375 2434.25,2283.5313 Q2434.9063,2283.6875 2435.4688,2283.9844 L2435.4688,2286.7031 Q2434.8438,2286.125 2434.25,2285.8594 Q2433.6563,2285.5781 2433.0313,2285.5781 Q2431.6875,2285.5781 2431,2286.6563 Q2430.3125,2287.7188 2430.3125,2289.8125 Q2430.3125,2291.9063 2431,2292.9844 Q2431.6875,2294.0469 2433.0313,2294.0469 Q2433.6563,2294.0469 2434.25,2293.7813 Q2434.8438,2293.5 2435.4688,2292.9219 L2435.4688,2295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="2446.5" y="2294.1543">internal::dense_set_iterator&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2418.5" x2="2642.5" y1="2306" y2="2306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2418.5" x2="2642.5" y1="2314" y2="2314"/></a><!--MD5=[d75741d25ca1ec10cbcf6b291d867807]
class C_0001686486826919845415--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001686486826919845415" style="stroke: #A80036; stroke-width: 1.5;" width="416" x="4152.5" y="2274"/><ellipse cx="4167.5" cy="2290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4170.4688,2295.6406 Q4169.8906,2295.9375 4169.25,2296.0781 Q4168.6094,2296.2344 4167.9063,2296.2344 Q4165.4063,2296.2344 4164.0781,2294.5938 Q4162.7656,2292.9375 4162.7656,2289.8125 Q4162.7656,2286.6875 4164.0781,2285.0313 Q4165.4063,2283.375 4167.9063,2283.375 Q4168.6094,2283.375 4169.25,2283.5313 Q4169.9063,2283.6875 4170.4688,2283.9844 L4170.4688,2286.7031 Q4169.8438,2286.125 4169.25,2285.8594 Q4168.6563,2285.5781 4168.0313,2285.5781 Q4166.6875,2285.5781 4166,2286.6563 Q4165.3125,2287.7188 4165.3125,2289.8125 Q4165.3125,2291.9063 4166,2292.9844 Q4166.6875,2294.0469 4168.0313,2294.0469 Q4168.6563,2294.0469 4169.25,2293.7813 Q4169.8438,2293.5 4170.4688,2292.9219 L4170.4688,2295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4181.5" y="2294.1543">compressed_pair</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="275" x="4296.5" y="2271"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="273" x="4297.5" y="2283.1387">std::vector&lt;std::size_t&gt;,dense_map::hasher</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4153.5" x2="4567.5" y1="2306" y2="2306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4153.5" x2="4567.5" y1="2314" y2="2314"/><!--MD5=[acdcb22263de5b8a25feaf25a3ec3ab8]
class C_0000507249114974527684--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0000507249114974527684" style="stroke: #A80036; stroke-width: 1.5;" width="617" x="3306" y="2274"/><ellipse cx="3321" cy="2290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3323.9688,2295.6406 Q3323.3906,2295.9375 3322.75,2296.0781 Q3322.1094,2296.2344 3321.4063,2296.2344 Q3318.9063,2296.2344 3317.5781,2294.5938 Q3316.2656,2292.9375 3316.2656,2289.8125 Q3316.2656,2286.6875 3317.5781,2285.0313 Q3318.9063,2283.375 3321.4063,2283.375 Q3322.1094,2283.375 3322.75,2283.5313 Q3323.4063,2283.6875 3323.9688,2283.9844 L3323.9688,2286.7031 Q3323.3438,2286.125 3322.75,2285.8594 Q3322.1563,2285.5781 3321.5313,2285.5781 Q3320.1875,2285.5781 3319.5,2286.6563 Q3318.8125,2287.7188 3318.8125,2289.8125 Q3318.8125,2291.9063 3319.5,2292.9844 Q3320.1875,2294.0469 3321.5313,2294.0469 Q3322.1563,2294.0469 3322.75,2293.7813 Q3323.3438,2293.5 3323.9688,2292.9219 L3323.9688,2295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="3335" y="2294.1543">compressed_pair</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="476" x="3450" y="2271"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="474" x="3451" y="2283.1387">std::vector&lt;internal::dense_map_node&lt;Key,Type&gt;&gt;,dense_map::key_equal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3307" x2="3922" y1="2306" y2="2306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3307" x2="3922" y1="2314" y2="2314"/><!--MD5=[59287f6e7c84d3830311e092cfd33ef0]
class C_0001073675684695097120--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264" target="_top" title="dense_map" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264" xlink:show="new" xlink:title="dense_map" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="1072.375" id="C_0001073675684695097120" style="stroke: #A80036; stroke-width: 1.5;" width="1404" x="2912.5" y="1029"/><ellipse cx="3200.75" cy="1045" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3203.7188,1050.6406 Q3203.1406,1050.9375 3202.5,1051.0781 Q3201.8594,1051.2344 3201.1563,1051.2344 Q3198.6563,1051.2344 3197.3281,1049.5938 Q3196.0156,1047.9375 3196.0156,1044.8125 Q3196.0156,1041.6875 3197.3281,1040.0313 Q3198.6563,1038.375 3201.1563,1038.375 Q3201.8594,1038.375 3202.5,1038.5313 Q3203.1563,1038.6875 3203.7188,1038.9844 L3203.7188,1041.7031 Q3203.0938,1041.125 3202.5,1040.8594 Q3201.9063,1040.5781 3201.2813,1040.5781 Q3199.9375,1040.5781 3199.25,1041.6563 Q3198.5625,1042.7188 3198.5625,1044.8125 Q3198.5625,1046.9063 3199.25,1047.9844 Q3199.9375,1049.0469 3201.2813,1049.0469 Q3201.9063,1049.0469 3202.5,1048.7813 Q3203.0938,1048.5 3203.7188,1047.9219 L3203.7188,1050.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="3221.25" y="1049.1543">dense_map</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="745" x="3574.5" y="1026"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="743" x="3575.5" y="1038.1387">Key,Type,Hash=std::hash&lt;Key&gt;,KeyEqual=std::equal_to&lt;Key&gt;,Allocator=std::allocator&lt;std::pair&lt;const Key, Type&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2913.5" x2="4315.5" y1="1061" y2="1061"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" xlink:show="new" xlink:title="sparse" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2918.5" y="1067"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1069"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035" xlink:show="new" xlink:title="sparse" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="2932.5" y="1075.2104">sparse : compressed_pair&lt;sparse_container_type,hasher&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" xlink:show="new" xlink:title="packed" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2918.5" y="1079.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1081.8047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036" xlink:show="new" xlink:title="packed" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="2932.5" y="1088.0151">packed : compressed_pair&lt;packed_container_type,key_equal&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" xlink:show="new" xlink:title="threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2918.5" y="1092.6094"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1094.6094"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037" xlink:show="new" xlink:title="threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="2932.5" y="1100.8198">threshold : float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2918.5" y="1105.4141"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1107.4141"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="171" x="2932.5" y="1113.6245">default_threshold : const float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2918.5" y="1118.2188"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1120.2188"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="210" x="2932.5" y="1126.4292">minimum_capacity : const std::size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="2913.5" x2="4315.5" y1="1133.0234" y2="1133.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1141.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2932.5" y="1147.2339">move_and_pop(const std::size_t pos) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1153.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2932.5" y="1160.0386">rehash_if_required() : void</text><ellipse cx="2923.5" cy="1169.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="536" x="2932.5" y="1172.8433">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;() : void</text><ellipse cx="2923.5" cy="1182.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="717" x="2932.5" y="1185.6479">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const allocator_type &amp; allocator) : void</text><ellipse cx="2923.5" cy="1195.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="833" x="2932.5" y="1198.4526">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const size_type cnt, const allocator_type &amp; allocator) : void</text><ellipse cx="2923.5" cy="1208.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="962" x="2932.5" y="1211.2573">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const size_type cnt, const hasher &amp; hash, const allocator_type &amp; allocator) : void</text><ellipse cx="2923.5" cy="1220.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1378" x="2932.5" y="1224.062">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const size_type cnt, const hasher &amp; hash = hasher{}, const key_equal &amp; equal = key_equal{}, const allocator_type &amp; allocator = allocator_type{}) : void</text><ellipse cx="2923.5" cy="1233.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1122" x="2932.5" y="1236.8667">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; ) = default : void</text><ellipse cx="2923.5" cy="1246.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1285" x="2932.5" y="1249.6714">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; other, const allocator_type &amp; allocator) : void</text><ellipse cx="2923.5" cy="1259.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1097" x="2932.5" y="1262.4761">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp; ) = default : void</text><ellipse cx="2923.5" cy="1272.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1260" x="2932.5" y="1275.2808">dense_map&lt;Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4&gt;(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp; other, const allocator_type &amp; allocator) : void</text><ellipse cx="2923.5" cy="1284.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1155" x="2932.5" y="1288.0854">operator=(const dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; ) = default : dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;</text><ellipse cx="2923.5" cy="1297.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1130" x="2932.5" y="1300.8901">operator=(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;&amp; ) = default : dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp;</text><ellipse cx="2923.5" cy="1310.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="2932.5" y="1313.6948">get_allocator() const : allocator_type</text><ellipse cx="2923.5" cy="1323.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="2932.5" y="1326.4995">cbegin() const : const_iterator</text><ellipse cx="2923.5" cy="1336.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2932.5" y="1339.3042">begin() const : const_iterator</text><ellipse cx="2923.5" cy="1348.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2932.5" y="1352.1089">begin() : iterator</text><ellipse cx="2923.5" cy="1361.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2932.5" y="1364.9136">cend() const : const_iterator</text><ellipse cx="2923.5" cy="1374.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="2932.5" y="1377.7183">end() const : const_iterator</text><ellipse cx="2923.5" cy="1387.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2932.5" y="1390.5229">end() : iterator</text><ellipse cx="2923.5" cy="1400.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2932.5" y="1403.3276">empty() const : bool</text><ellipse cx="2923.5" cy="1412.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2932.5" y="1416.1323">size() const : size_type</text><ellipse cx="2923.5" cy="1425.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2932.5" y="1428.937">max_size() const : size_type</text><ellipse cx="2923.5" cy="1438.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2932.5" y="1441.7417">clear() : void</text><ellipse cx="2923.5" cy="1451.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2932.5" y="1454.5464">insert(const value_type &amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="2923.5" cy="1464.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="2932.5" y="1467.3511">insert(value_type &amp;&amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="2923.5" cy="1476.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2932.5" y="1480.1558">erase(const_iterator pos) : iterator</text><ellipse cx="2923.5" cy="1489.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="2932.5" y="1492.9604">erase(const_iterator first, const_iterator last) : iterator</text><ellipse cx="2923.5" cy="1502.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="2932.5" y="1505.7651">erase(const key_type &amp; key) : size_type</text><ellipse cx="2923.5" cy="1515.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="598" x="2932.5" y="1518.5698">swap(dense_map&lt;Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4&gt; &amp; other) : void</text><ellipse cx="2923.5" cy="1528.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="2932.5" y="1531.3745">at(const key_type &amp; key) : mapped_type &amp;</text><ellipse cx="2923.5" cy="1540.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="2932.5" y="1544.1792">at(const key_type &amp; key) const : const mapped_type &amp;</text><ellipse cx="2923.5" cy="1553.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="2932.5" y="1556.9839">operator[](const key_type &amp; key) : mapped_type &amp;</text><ellipse cx="2923.5" cy="1566.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="2932.5" y="1569.7886">operator[](key_type &amp;&amp; key) : mapped_type &amp;</text><ellipse cx="2923.5" cy="1579.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="2932.5" y="1582.5933">count(const key_type &amp; key) const : size_type</text><ellipse cx="2923.5" cy="1592.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2932.5" y="1595.3979">find(const key_type &amp; key) : iterator</text><ellipse cx="2923.5" cy="1604.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="2932.5" y="1608.2026">find(const key_type &amp; key) const : const_iterator</text><ellipse cx="2923.5" cy="1617.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="2932.5" y="1621.0073">equal_range(const key_type &amp; key) : std::pair&lt;iterator,iterator&gt;</text><ellipse cx="2923.5" cy="1630.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="2932.5" y="1633.812">equal_range(const key_type &amp; key) const : std::pair&lt;const_iterator,const_iterator&gt;</text><ellipse cx="2923.5" cy="1643.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="2932.5" y="1646.6167">contains(const key_type &amp; key) const : bool</text><ellipse cx="2923.5" cy="1656.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="2932.5" y="1659.4214">cbegin(const size_type index) const : const_local_iterator</text><ellipse cx="2923.5" cy="1669.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="2932.5" y="1672.2261">begin(const size_type index) const : const_local_iterator</text><ellipse cx="2923.5" cy="1681.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2932.5" y="1685.0308">begin(const size_type index) : local_iterator</text><ellipse cx="2923.5" cy="1694.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="2932.5" y="1697.8354">cend(const size_type index) const : const_local_iterator</text><ellipse cx="2923.5" cy="1707.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="2932.5" y="1710.6401">end(const size_type index) const : const_local_iterator</text><ellipse cx="2923.5" cy="1720.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="2932.5" y="1723.4448">end(const size_type index) : local_iterator</text><ellipse cx="2923.5" cy="1733.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="2932.5" y="1736.2495">bucket_count() const : size_type</text><ellipse cx="2923.5" cy="1745.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="2932.5" y="1749.0542">max_bucket_count() const : size_type</text><ellipse cx="2923.5" cy="1758.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="2932.5" y="1761.8589">bucket_size(const size_type index) const : size_type</text><ellipse cx="2923.5" cy="1771.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2932.5" y="1774.6636">bucket(const key_type &amp; key) const : size_type</text><ellipse cx="2923.5" cy="1784.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2932.5" y="1787.4683">load_factor() const : float</text><ellipse cx="2923.5" cy="1797.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2932.5" y="1800.2729">max_load_factor() const : float</text><ellipse cx="2923.5" cy="1809.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="2932.5" y="1813.0776">max_load_factor(const float value) : void</text><ellipse cx="2923.5" cy="1822.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="2932.5" y="1825.8823">rehash(const size_type cnt) : void</text><ellipse cx="2923.5" cy="1835.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2932.5" y="1838.687">reserve(const size_type cnt) : void</text><ellipse cx="2923.5" cy="1848.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="2932.5" y="1851.4917">hash_function() const : hasher</text><ellipse cx="2923.5" cy="1861.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2932.5" y="1864.2964">key_eq() const : key_equal</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1870.8906"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="2932.5" y="1877.1011">key_to_bucket&lt;Other&gt;(const Other &amp; key) : std::size_t</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1883.6953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="2932.5" y="1889.9058">constrained_find&lt;Other&gt;(const Other &amp; key, std::size_t bucket) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1896.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="2932.5" y="1902.7104">constrained_find&lt;Other&gt;(const Other &amp; key, std::size_t bucket) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1909.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="2932.5" y="1915.5151">insert_or_do_nothing&lt;Other,Args...&gt;(Other &amp;&amp; key, Args &amp;&amp;... args) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2920.5" y="1922.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="2932.5" y="1928.3198">insert_or_overwrite&lt;Other,Arg&gt;(Other &amp;&amp; key, Arg &amp;&amp; value) : auto</text><ellipse cx="2923.5" cy="1937.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="687" x="2932.5" y="1941.1245">insert&lt;Arg&gt;(Arg &amp;&amp; value) : std::enable_if_t&lt;std::is_constructible_v&lt;value_type, Arg &amp;&amp;&gt;, std::pair&lt;iterator, _Bool&gt; &gt;</text><ellipse cx="2923.5" cy="1950.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="2932.5" y="1953.9292">insert&lt;It&gt;(It first, It last) : void</text><ellipse cx="2923.5" cy="1963.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="505" x="2932.5" y="1966.7339">insert_or_assign&lt;Arg&gt;(const key_type &amp; key, Arg &amp;&amp; value) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2923.5" cy="1976.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="2932.5" y="1979.5386">insert_or_assign&lt;Arg&gt;(key_type &amp;&amp; key, Arg &amp;&amp; value) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2923.5" cy="1989.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="2932.5" y="1992.3433">emplace&lt;Args...&gt;(Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2923.5" cy="2001.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="2932.5" y="2005.1479">try_emplace&lt;Args...&gt;(const key_type &amp; key, Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2923.5" cy="2014.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="2932.5" y="2017.9526">try_emplace&lt;Args...&gt;(key_type &amp;&amp; key, Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="2923.5" cy="2027.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="915" x="2932.5" y="2030.7573">count&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, size_type&gt; &gt;</text><ellipse cx="2923.5" cy="2040.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="895" x="2932.5" y="2043.562">find&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, iterator&gt; &gt;</text><ellipse cx="2923.5" cy="2053.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="932" x="2932.5" y="2056.3667">find&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, const_iterator&gt; &gt;</text><ellipse cx="2923.5" cy="2065.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1064" x="2932.5" y="2069.1714">equal_range&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;iterator, iterator&gt; &gt; &gt;</text><ellipse cx="2923.5" cy="2078.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1138" x="2932.5" y="2081.9761">equal_range&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;const_iterator, const_iterator&gt; &gt; &gt;</text><ellipse cx="2923.5" cy="2091.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="911" x="2932.5" y="2094.7808">contains&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, _Bool&gt; &gt;</text><!--MD5=[8e3c3b384452d0d035a3775cc305be7a]
class C_0001503042528880026519--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15" target="_top" title="dense_map" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15" xlink:show="new" xlink:title="dense_map" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001503042528880026519" style="stroke: #A80036; stroke-width: 1.5;" width="707" x="153" y="2517.5"/><ellipse cx="168" cy="2533.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M170.9688,2539.1406 Q170.3906,2539.4375 169.75,2539.5781 Q169.1094,2539.7344 168.4063,2539.7344 Q165.9063,2539.7344 164.5781,2538.0938 Q163.2656,2536.4375 163.2656,2533.3125 Q163.2656,2530.1875 164.5781,2528.5313 Q165.9063,2526.875 168.4063,2526.875 Q169.1094,2526.875 169.75,2527.0313 Q170.4063,2527.1875 170.9688,2527.4844 L170.9688,2530.2031 Q170.3438,2529.625 169.75,2529.3594 Q169.1563,2529.0781 168.5313,2529.0781 Q167.1875,2529.0781 166.5,2530.1563 Q165.8125,2531.2188 165.8125,2533.3125 Q165.8125,2535.4063 166.5,2536.4844 Q167.1875,2537.5469 168.5313,2537.5469 Q169.1563,2537.5469 169.75,2537.2813 Q170.3438,2537 170.9688,2536.4219 L170.9688,2539.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="72" x="182" y="2537.6543">dense_map</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="601" x="262" y="2514.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="599" x="263" y="2526.6387">Key,Type,=std::hash&lt;Key&gt;,=std::equal_to&lt;Key&gt;,=std::allocator&lt;std::pair&lt;const Key, Type&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="154" x2="859" y1="2549.5" y2="2549.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="154" x2="859" y1="2557.5" y2="2557.5"/></a><!--MD5=[3953ef4ed7734d76aeb032687d7ac076]
class C_0002296068478642625070--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22" target="_top" title="dense_set" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22" xlink:show="new" xlink:title="dense_set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0002296068478642625070" style="stroke: #A80036; stroke-width: 1.5;" width="543" x="895" y="2517.5"/><ellipse cx="910" cy="2533.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M912.9688,2539.1406 Q912.3906,2539.4375 911.75,2539.5781 Q911.1094,2539.7344 910.4063,2539.7344 Q907.9063,2539.7344 906.5781,2538.0938 Q905.2656,2536.4375 905.2656,2533.3125 Q905.2656,2530.1875 906.5781,2528.5313 Q907.9063,2526.875 910.4063,2526.875 Q911.1094,2526.875 911.75,2527.0313 Q912.4063,2527.1875 912.9688,2527.4844 L912.9688,2530.2031 Q912.3438,2529.625 911.75,2529.3594 Q911.1563,2529.0781 910.5313,2529.0781 Q909.1875,2529.0781 908.5,2530.1563 Q907.8125,2531.2188 907.8125,2533.3125 Q907.8125,2535.4063 908.5,2536.4844 Q909.1875,2537.5469 910.5313,2537.5469 Q911.1563,2537.5469 911.75,2537.2813 Q912.3438,2537 912.9688,2536.4219 L912.9688,2539.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="924" y="2537.6543">dense_set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="444" x="997" y="2514.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="442" x="998" y="2526.6387">Type,=std::hash&lt;Type&gt;,=std::equal_to&lt;Type&gt;,=std::allocator&lt;Type&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="896" x2="1437" y1="2549.5" y2="2549.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="896" x2="1437" y1="2557.5" y2="2557.5"/></a><!--MD5=[9682cc189bb7eb3282b174edc00585bf]
class C_0002082989189680990643--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0002082989189680990643" style="stroke: #A80036; stroke-width: 1.5;" width="408" x="4351.5" y="1541"/><ellipse cx="4366.5" cy="1557" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4369.4688,1562.6406 Q4368.8906,1562.9375 4368.25,1563.0781 Q4367.6094,1563.2344 4366.9063,1563.2344 Q4364.4063,1563.2344 4363.0781,1561.5938 Q4361.7656,1559.9375 4361.7656,1556.8125 Q4361.7656,1553.6875 4363.0781,1552.0313 Q4364.4063,1550.375 4366.9063,1550.375 Q4367.6094,1550.375 4368.25,1550.5313 Q4368.9063,1550.6875 4369.4688,1550.9844 L4369.4688,1553.7031 Q4368.8438,1553.125 4368.25,1552.8594 Q4367.6563,1552.5781 4367.0313,1552.5781 Q4365.6875,1552.5781 4365,1553.6563 Q4364.3125,1554.7188 4364.3125,1556.8125 Q4364.3125,1558.9063 4365,1559.9844 Q4365.6875,1561.0469 4367.0313,1561.0469 Q4367.6563,1561.0469 4368.25,1560.7813 Q4368.8438,1560.5 4369.4688,1559.9219 L4369.4688,1562.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4380.5" y="1561.1543">compressed_pair</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="267" x="4495.5" y="1538"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="265" x="4496.5" y="1550.1387">std::vector&lt;std::size_t&gt;,dense_set::hasher</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4352.5" x2="4758.5" y1="1573" y2="1573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4352.5" x2="4758.5" y1="1581" y2="1581"/><!--MD5=[0923c97ea5a22423702039648820341a]
class C_0001611725919328905677--><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="48" id="C_0001611725919328905677" style="stroke: #A80036; stroke-width: 1.5;" width="533" x="4795" y="1541"/><ellipse cx="4810" cy="1557" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4812.9688,1562.6406 Q4812.3906,1562.9375 4811.75,1563.0781 Q4811.1094,1563.2344 4810.4063,1563.2344 Q4807.9063,1563.2344 4806.5781,1561.5938 Q4805.2656,1559.9375 4805.2656,1556.8125 Q4805.2656,1553.6875 4806.5781,1552.0313 Q4807.9063,1550.375 4810.4063,1550.375 Q4811.1094,1550.375 4811.75,1550.5313 Q4812.4063,1550.6875 4812.9688,1550.9844 L4812.9688,1553.7031 Q4812.3438,1553.125 4811.75,1552.8594 Q4811.1563,1552.5781 4810.5313,1552.5781 Q4809.1875,1552.5781 4808.5,1553.6563 Q4807.8125,1554.7188 4807.8125,1556.8125 Q4807.8125,1558.9063 4808.5,1559.9844 Q4809.1875,1561.0469 4810.5313,1561.0469 Q4811.1563,1561.0469 4811.75,1560.7813 Q4812.3438,1560.5 4812.9688,1559.9219 L4812.9688,1562.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4824" y="1561.1543">compressed_pair</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="392" x="4939" y="1538"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="390" x="4940" y="1550.1387">std::vector&lt;std::pair&lt;std::size_t,Type&gt;&gt;,dense_set::key_equal</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4796" x2="5327" y1="1573" y2="1573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4796" x2="5327" y1="1581" y2="1581"/><!--MD5=[4320e139eed08e1da86d5a2586562e08]
class C_0001428356275870265271--><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228" target="_top" title="dense_set" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228" xlink:show="new" xlink:title="dense_set" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fdsmrlxy5o0kf)" height="944.3281" id="C_0001428356275870265271" style="stroke: #A80036; stroke-width: 1.5;" width="1369" x="4226" y="8"/><ellipse cx="4578.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4581.7188,29.6406 Q4581.1406,29.9375 4580.5,30.0781 Q4579.8594,30.2344 4579.1563,30.2344 Q4576.6563,30.2344 4575.3281,28.5938 Q4574.0156,26.9375 4574.0156,23.8125 Q4574.0156,20.6875 4575.3281,19.0313 Q4576.6563,17.375 4579.1563,17.375 Q4579.8594,17.375 4580.5,17.5313 Q4581.1563,17.6875 4581.7188,17.9844 L4581.7188,20.7031 Q4581.0938,20.125 4580.5,19.8594 Q4579.9063,19.5781 4579.2813,19.5781 Q4577.9375,19.5781 4577.25,20.6563 Q4576.5625,21.7188 4576.5625,23.8125 Q4576.5625,25.9063 4577.25,26.9844 Q4577.9375,28.0469 4579.2813,28.0469 Q4579.9063,28.0469 4580.5,27.7813 Q4581.0938,27.5 4581.7188,26.9219 L4581.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="4599.25" y="28.1543">dense_set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="588" x="5010" y="5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="586" x="5011" y="17.1387">Type,Hash=std::hash&lt;Type&gt;,KeyEqual=std::equal_to&lt;Type&gt;,Allocator=std::allocator&lt;Type&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4227" x2="5594" y1="40" y2="40"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" xlink:show="new" xlink:title="sparse" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4232" y="46"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="48"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" target="_top" title="sparse" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888" xlink:show="new" xlink:title="sparse" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="4246" y="54.2104">sparse : compressed_pair&lt;sparse_container_type,hasher&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" xlink:show="new" xlink:title="packed" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4232" y="58.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="60.8047"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" target="_top" title="packed" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889" xlink:show="new" xlink:title="packed" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="4246" y="67.0151">packed : compressed_pair&lt;packed_container_type,key_equal&gt;</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" xlink:show="new" xlink:title="threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4232" y="71.6094"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="73.6094"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" target="_top" title="threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890" xlink:show="new" xlink:title="threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="4246" y="79.8198">threshold : float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4232" y="84.4141"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="86.4141"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" target="_top" title="default_threshold" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229" xlink:show="new" xlink:title="default_threshold" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="171" x="4246" y="92.6245">default_threshold : const float</text></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4232" y="97.2188"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="99.2188"/></a><a href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" target="_top" title="minimum_capacity" xlink:actuate="onRequest" xlink:href="https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230" xlink:show="new" xlink:title="minimum_capacity" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="210" x="4246" y="105.4292">minimum_capacity : const std::size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4227" x2="5594" y1="112.0234" y2="112.0234"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="120.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="4246" y="126.2339">move_and_pop(const std::size_t pos) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="132.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4246" y="139.0386">rehash_if_required() : void</text><ellipse cx="4237" cy="148.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="501" x="4246" y="151.8433">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;() : void</text><ellipse cx="4237" cy="161.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="682" x="4246" y="164.6479">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const allocator_type &amp; allocator) : void</text><ellipse cx="4237" cy="174.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="798" x="4246" y="177.4526">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const size_type cnt, const allocator_type &amp; allocator) : void</text><ellipse cx="4237" cy="187.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="927" x="4246" y="190.2573">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const size_type cnt, const hasher &amp; hash, const allocator_type &amp; allocator) : void</text><ellipse cx="4237" cy="199.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1343" x="4246" y="203.062">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const size_type cnt, const hasher &amp; hash = hasher{}, const key_equal &amp; equal = key_equal{}, const allocator_type &amp; allocator = allocator_type{}) : void</text><ellipse cx="4237" cy="212.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1056" x="4246" y="215.8667">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; ) = default : void</text><ellipse cx="4237" cy="225.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1219" x="4246" y="228.6714">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; other, const allocator_type &amp; allocator) : void</text><ellipse cx="4237" cy="238.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1031" x="4246" y="241.4761">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp; ) = default : void</text><ellipse cx="4237" cy="251.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1194" x="4246" y="254.2808">dense_set&lt;Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3&gt;(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp; other, const allocator_type &amp; allocator) : void</text><ellipse cx="4237" cy="263.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1093" x="4246" y="267.0854">operator=(const dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; ) = default : dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;</text><ellipse cx="4237" cy="276.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1068" x="4246" y="279.8901">operator=(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;&amp; ) = default : dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp;</text><ellipse cx="4237" cy="289.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="4246" y="292.6948">get_allocator() const : allocator_type</text><ellipse cx="4237" cy="302.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="4246" y="305.4995">cbegin() const : const_iterator</text><ellipse cx="4237" cy="315.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="4246" y="318.3042">begin() const : const_iterator</text><ellipse cx="4237" cy="327.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="4246" y="331.1089">begin() : iterator</text><ellipse cx="4237" cy="340.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="4246" y="343.9136">cend() const : const_iterator</text><ellipse cx="4237" cy="353.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="4246" y="356.7183">end() const : const_iterator</text><ellipse cx="4237" cy="366.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4246" y="369.5229">end() : iterator</text><ellipse cx="4237" cy="379.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4246" y="382.3276">empty() const : bool</text><ellipse cx="4237" cy="391.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="4246" y="395.1323">size() const : size_type</text><ellipse cx="4237" cy="404.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="4246" y="407.937">max_size() const : size_type</text><ellipse cx="4237" cy="417.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="4246" y="420.7417">clear() : void</text><ellipse cx="4237" cy="430.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="4246" y="433.5464">insert(const value_type &amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="4237" cy="443.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="4246" y="446.3511">insert(value_type &amp;&amp; value) : std::pair&lt;iterator,bool&gt;</text><ellipse cx="4237" cy="455.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="4246" y="459.1558">erase(const_iterator pos) : iterator</text><ellipse cx="4237" cy="468.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="4246" y="471.9604">erase(const_iterator first, const_iterator last) : iterator</text><ellipse cx="4237" cy="481.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="4246" y="484.7651">erase(const value_type &amp; value) : size_type</text><ellipse cx="4237" cy="494.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="4246" y="497.5698">swap(dense_set&lt;Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3&gt; &amp; other) : void</text><ellipse cx="4237" cy="507.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="4246" y="510.3745">count(const value_type &amp; key) const : size_type</text><ellipse cx="4237" cy="519.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="4246" y="523.1792">find(const value_type &amp; value) : iterator</text><ellipse cx="4237" cy="532.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4246" y="535.9839">find(const value_type &amp; value) const : const_iterator</text><ellipse cx="4237" cy="545.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="4246" y="548.7886">equal_range(const value_type &amp; value) : std::pair&lt;iterator,iterator&gt;</text><ellipse cx="4237" cy="558.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="4246" y="561.5933">equal_range(const value_type &amp; value) const : std::pair&lt;const_iterator,const_iterator&gt;</text><ellipse cx="4237" cy="571.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="4246" y="574.3979">contains(const value_type &amp; value) const : bool</text><ellipse cx="4237" cy="583.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="4246" y="587.2026">cbegin(const size_type index) const : const_local_iterator</text><ellipse cx="4237" cy="596.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="4246" y="600.0073">begin(const size_type index) const : const_local_iterator</text><ellipse cx="4237" cy="609.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="4246" y="612.812">begin(const size_type index) : local_iterator</text><ellipse cx="4237" cy="622.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="4246" y="625.6167">cend(const size_type index) const : const_local_iterator</text><ellipse cx="4237" cy="635.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="4246" y="638.4214">end(const size_type index) const : const_local_iterator</text><ellipse cx="4237" cy="648.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="4246" y="651.2261">end(const size_type index) : local_iterator</text><ellipse cx="4237" cy="660.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="4246" y="664.0308">bucket_count() const : size_type</text><ellipse cx="4237" cy="673.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="4246" y="676.8354">max_bucket_count() const : size_type</text><ellipse cx="4237" cy="686.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="4246" y="689.6401">bucket_size(const size_type index) const : size_type</text><ellipse cx="4237" cy="699.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4246" y="702.4448">bucket(const value_type &amp; value) const : size_type</text><ellipse cx="4237" cy="712.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4246" y="715.2495">load_factor() const : float</text><ellipse cx="4237" cy="724.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="4246" y="728.0542">max_load_factor() const : float</text><ellipse cx="4237" cy="737.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="4246" y="740.8589">max_load_factor(const float value) : void</text><ellipse cx="4237" cy="750.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="4246" y="753.6636">rehash(const size_type cnt) : void</text><ellipse cx="4237" cy="763.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="4246" y="766.4683">reserve(const size_type cnt) : void</text><ellipse cx="4237" cy="776.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="4246" y="779.2729">hash_function() const : hasher</text><ellipse cx="4237" cy="788.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4246" y="792.0776">key_eq() const : key_equal</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="798.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="4246" y="804.8823">value_to_bucket&lt;Other&gt;(const Other &amp; value) : std::size_t</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="811.4766"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="4246" y="817.687">constrained_find&lt;Other&gt;(const Other &amp; value, std::size_t bucket) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="824.2813"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="4246" y="830.4917">constrained_find&lt;Other&gt;(const Other &amp; value, std::size_t bucket) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4234" y="837.0859"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="4246" y="843.2964">insert_or_do_nothing&lt;Other&gt;(Other &amp;&amp; value) : auto</text><ellipse cx="4237" cy="852.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="4246" y="856.1011">insert&lt;It&gt;(It first, It last) : void</text><ellipse cx="4237" cy="865.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="4246" y="868.9058">emplace&lt;Args...&gt;(Args &amp;&amp;... args) : std::pair&lt;iterator, _Bool&gt;</text><ellipse cx="4237" cy="878.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="915" x="4246" y="881.7104">count&lt;Other&gt;(const Other &amp; key) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, size_type&gt; &gt;</text><ellipse cx="4237" cy="891.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="906" x="4246" y="894.5151">find&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, iterator&gt; &gt;</text><ellipse cx="4237" cy="904.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="943" x="4246" y="907.3198">find&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, const_iterator&gt; &gt;</text><ellipse cx="4237" cy="916.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1075" x="4246" y="920.1245">equal_range&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;iterator, iterator&gt; &gt; &gt;</text><ellipse cx="4237" cy="929.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1149" x="4246" y="932.9292">equal_range&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, std::pair&lt;const_iterator, const_iterator&gt; &gt; &gt;</text><ellipse cx="4237" cy="942.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="922" x="4246" y="945.7339">contains&lt;Other&gt;(const Other &amp; value) : std::enable_if_t&lt;is_transparent_v&lt;hasher&gt; &amp;&amp; is_transparent_v&lt;key_equal&gt;, std::conditional_t&lt;false, Other, _Bool&gt; &gt;</text><!--MD5=[78fe5c7541b8dd83f999fe4f494381ca]
link C_0001723716587279733623 to C_0000150299823092418682--><path d="M2790.65,1589.08 C2780.67,1692.76 2780.15,2116.3 2789.07,2253.72 " fill="none" id="C_0001723716587279733623-&gt;C_0000150299823092418682" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2796.07,2253.42,2790.65,2273.91,2782.11,2254.52,2796.07,2253.42" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[63f00cc67c7b46037cc981788abaa142]
link C_0000150299823092418682 to C_0001723716587279733623--><path d="M2800.64,2273.91 C2811.2,2170.22 2811.76,1746.68 2802.31,1609.27 " fill="none" id="C_0000150299823092418682-&gt;C_0001723716587279733623" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2795.31,1609.59,2800.64,1589.08,2809.26,1608.44,2795.31,1609.59" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bb8bd3e9da5b648e4747716e148f8765]
link C_0000401973545844492876 to C_0001723716587279733623--><path d="M2704.49,504.12 C2716.19,640.37 2776.16,1338.77 2791.78,1520.65 " fill="none" id="C_0000401973545844492876-&gt;C_0001723716587279733623" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2798.76,1520.11,2793.49,1540.64,2784.81,1521.31,2798.76,1520.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[71d9c320161cb9d92c9c577a8993cbb1]
link C_0000496685335806935509 to C_0001723716587279733623--><path d="M2885.54,504.12 C2873.96,640.37 2814.63,1338.77 2799.18,1520.65 " fill="none" id="C_0000496685335806935509-&gt;C_0001723716587279733623" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2806.15,1521.3,2797.48,1540.64,2792.2,1520.11,2806.15,1521.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4cee16c933624787bd3b660ce9629ef1]
link C_0000507249114974527684 to C_0001949040226502523653--><path d="M3614.5,2322.16 C3614.5,2356.74 3614.5,2423.22 3614.5,2473.79 " fill="none" id="C_0000507249114974527684-&gt;C_0001949040226502523653" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3614.5,2478.94,3618.5,2469.94,3614.5,2473.94,3610.5,2469.94,3614.5,2478.94" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ac80f501f23b75f826c921c2e4a08eaa]
reverse link C_0001073675684695097120 to C_0001686486826919845415--><path d="M4170.11,2110.44 C4243.85,2182.7 4304.95,2242.56 4336.76,2273.74 " fill="none" id="C_0001073675684695097120&lt;-C_0001686486826919845415" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4160.59,2101.11,4162.0756,2108.1664,4169.1606,2109.5091,4167.675,2102.4527,4160.59,2101.11" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4202.5" y="2137.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="4212.5" y="2144.0669">sparse</text><!--MD5=[6232373e2df4736a644c9c0adf80ca43]
reverse link C_0001073675684695097120 to C_0000507249114974527684--><path d="M3614.5,2114.4 C3614.5,2184.88 3614.5,2243.13 3614.5,2273.74 " fill="none" id="C_0001073675684695097120&lt;-C_0000507249114974527684" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3614.5,2101.11,3610.5,2107.11,3614.5,2113.11,3618.5,2107.11,3614.5,2101.11" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3617.5" y="2137.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="46" x="3627.5" y="2144.0669">packed</text><!--MD5=[500ad3a0841dba72feee2108ac038b2f]
link C_0002082989189680990643 to C_0001686486826919845415--><path d="M4549.34,1589.08 C4521.63,1692.98 4408.24,2118.05 4371.82,2254.57 " fill="none" id="C_0002082989189680990643-&gt;C_0001686486826919845415" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="4378.58,2256.39,4366.66,2273.91,4365.05,2252.78,4378.58,2256.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fcd2acee0a3f0ae1f03b8dde83043cea]
reverse link C_0001428356275870265271 to C_0002082989189680990643--><path d="M4751.96,964.67 C4672.73,1206.37 4588.41,1463.6 4563.1,1540.81 " fill="none" id="C_0001428356275870265271&lt;-C_0002082989189680990643" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4756.08,952.08,4750.4126,956.5388,4752.3486,963.4851,4758.016,959.0264,4756.08,952.08" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4747.5" y="988.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="43" x="4757.5" y="995.0669">sparse</text><!--MD5=[2d2060cd042ebee671320bedceb1d4a4]
reverse link C_0001428356275870265271 to C_0001611725919328905677--><path d="M4977.99,965.03 C5011.67,1206.62 5047.51,1463.64 5058.27,1540.81 " fill="none" id="C_0001428356275870265271&lt;-C_0001611725919328905677" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4976.18,952.08,4973.0495,958.5762,4977.842,963.9644,4980.9724,957.4682,4976.18,952.08" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4984.5" y="988.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="46" x="4994.5" y="995.0669">packed</text><!--MD5=[b4687603bc6bfa216d23329807eb5df0]
link C_0000816653833137337534 to C_0001276342508473126665--><!--MD5=[8d7f1aa2300c0210585bd7dc977efd12]
link C_0001276342508473126665 to C_0000669672540584988414--><!--MD5=[f3157072849b755211aac3a4c19697e3]
link C_0000669672540584988414 to C_0000114548431562228752--><!--MD5=[e6eba539a9e31f0ee63f8d4856099ea1]
link C_0000816653833137337534 to C_0000861079117123945586--><!--MD5=[c2fc10e6089f8760d8c10762a08aee54]
link C_0000861079117123945586 to C_0002151284549161307803--><!--MD5=[3c3b40ad77f0d8423b7bf2c8150f887e]
link C_0002151284549161307803 to C_0001271452795922285914--><!--MD5=[ee00033904222ae81c902fd76640b04c]
link C_0001271452795922285914 to C_0002270315657488311861--><!--MD5=[9c2fc5b125b2c6af04d2653fdd2a0d5e]
link C_0000861079117123945586 to C_0002029187173053297188--><!--MD5=[0e13a022781ff5e45be5ca2cf3131a9d]
link C_0002029187173053297188 to C_0001736854889005654369--><!--MD5=[2ffe2dd6df3f6b426e48382a7fd567da]
link C_0001736854889005654369 to C_0000377880092827030616--><!--MD5=[9f72845abf5649479f3935be0305e581]
link C_0000377880092827030616 to C_0000515821743975700101--><!--MD5=[7f42fee257a8b4343806eace0ff3ead3]
link C_0002029187173053297188 to C_0001503042528880026519--><!--MD5=[c36873f59a47909c54cec681428d6eea]
link C_0001503042528880026519 to C_0002296068478642625070--><!--MD5=[f043777ee59007c01f5e89c33e737209]
@startuml
class "type_list<First,Other...>" as C_0001723716587279733623
class C_0001723716587279733623 {
}
class "type_list<Other...>" as C_0000401973545844492876
class C_0000401973545844492876 {
}
class "type_list<Type,Other...>" as C_0000496685335806935509
class C_0000496685335806935509 {
}
class "type_list" as C_0000816653833137337534
class C_0000816653833137337534 {
}
class "type_list<Type...>" as C_0000150299823092418682
class C_0000150299823092418682 {
}
class "value_list<Value,Other...>" as C_0001276342508473126665
class C_0001276342508473126665 {
}
class "value_list<Other...>" as C_0000669672540584988414
class C_0000669672540584988414 {
}
class "value_list<Value>" as C_0000114548431562228752
class C_0000114548431562228752 {
}
class "internal::dense_map_node<Key,Type>" as C_0001949040226502523653
class C_0001949040226502523653 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L31{dense_map_node}]] {
+dense_map_node<Key, Type><Args...>(const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator,Args...>(std::allocator_arg_t , const Allocator & allocator, const std::size_t pos, Args &&... args) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t , const Allocator & allocator, const dense_map_node<Key,Type> & other) : void
+dense_map_node<Key, Type><Allocator>(std::allocator_arg_t , const Allocator & allocator, dense_map_node<Key,Type> && other) : void
+next : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L54{next}]]]
+element : value_type [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L55{element}]]]
}
class "internal::dense_map_iterator<It>" as C_0000861079117123945586
class C_0000861079117123945586 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L59{dense_map_iterator}]] {
+dense_map_iterator<It>() : void
+dense_map_iterator<It>(const It iter) : void
+operator++() : dense_map_iterator<It> &
+operator++(int ) : dense_map_iterator<It>
+operator- -() : dense_map_iterator<It> &
+operator- -(int ) : dense_map_iterator<It>
+operator+=(const difference_type value) : dense_map_iterator<It> &
+operator+(const difference_type value) const : dense_map_iterator<It>
+operator-=(const difference_type value) : dense_map_iterator<It> &
+operator-(const difference_type value) const : dense_map_iterator<It>
+operator[](const difference_type value) const : reference
+operator->() const : pointer
+operator*() const : reference
+dense_map_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L141{it}]]]
}
class "internal::dense_map_local_iterator<It>" as C_0002151284549161307803
class C_0002151284549161307803 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L180{dense_map_local_iterator}]] {
+dense_map_local_iterator<It>() : void
+dense_map_local_iterator<It>(It iter, const std::size_t pos) : void
+operator++() : dense_map_local_iterator<It> &
+operator++(int ) : dense_map_local_iterator<It>
+operator->() const : pointer
+operator*() const : reference
+index() const : std::size_t
+dense_map_local_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_map_local_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L229{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L230{offset}]]]
}
class "internal::dense_map_iterator<>" as C_0001271452795922285914
class C_0001271452795922285914 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L61{dense_map_iterator}]] {
}
class "internal::dense_map_local_iterator<>" as C_0002270315657488311861
class C_0002270315657488311861 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L182{dense_map_local_iterator}]] {
}
class "internal::dense_set_iterator<It>" as C_0002029187173053297188
class C_0002029187173053297188 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L30{dense_set_iterator}]] {
+dense_set_iterator<It>() : void
+dense_set_iterator<It>(const It iter) : void
+operator++() : dense_set_iterator<It> &
+operator++(int ) : dense_set_iterator<It>
+operator- -() : dense_set_iterator<It> &
+operator- -(int ) : dense_set_iterator<It>
+operator+=(const difference_type value) : dense_set_iterator<It> &
+operator+(const difference_type value) const : dense_set_iterator<It>
+operator-=(const difference_type value) : dense_set_iterator<It> &
+operator-(const difference_type value) const : dense_set_iterator<It>
+operator[](const difference_type value) const : reference
+operator->() const : pointer
+operator*() const : reference
+dense_set_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L109{it}]]]
}
class "internal::dense_set_local_iterator<It>" as C_0001736854889005654369
class C_0001736854889005654369 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L148{dense_set_local_iterator}]] {
+dense_set_local_iterator<It>() : void
+dense_set_local_iterator<It>(It iter, const std::size_t pos) : void
+operator++() : dense_set_local_iterator<It> &
+operator++(int ) : dense_set_local_iterator<It>
+operator->() const : pointer
+operator*() const : reference
+index() const : std::size_t
+dense_set_local_iterator<It><Other,=std::enable_if_t<!std::is_same_v<It, Other> && std::is_constructible_v<It, Other> >>(const dense_set_local_iterator<Other> & other) : void
-it : It [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L194{it}]]]
-offset : std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L195{offset}]]]
}
class "internal::dense_set_local_iterator<>" as C_0000377880092827030616
class C_0000377880092827030616 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L150{dense_set_local_iterator}]] {
}
class "internal::dense_set_iterator<>" as C_0000515821743975700101
class C_0000515821743975700101 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L32{dense_set_iterator}]] {
}
class "compressed_pair<std::vector<std::size_t>,dense_map::hasher>" as C_0001686486826919845415
class C_0001686486826919845415 {
}
class "compressed_pair<std::vector<internal::dense_map_node<Key,Type>>,dense_map::key_equal>" as C_0000507249114974527684
class C_0000507249114974527684 {
}
class "dense_map<Key,Type,Hash=std::hash<Key>,KeyEqual=std::equal_to<Key>,Allocator=std::allocator<std::pair<const Key, Type> >>" as C_0001073675684695097120
class C_0001073675684695097120 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L264{dense_map}]] {
-move_and_pop(const std::size_t pos) : void
-rehash_if_required() : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>() : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const hasher & hash, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const size_type cnt, const hasher & hash = hasher{}, const key_equal & equal = key_equal{}, const allocator_type & allocator = allocator_type{}) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & ) = default : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other, const allocator_type & allocator) : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && ) = default : void
+dense_map<Key, Type, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4>(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && other, const allocator_type & allocator) : void
+operator=(const dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & ) = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
+operator=(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> && ) = default : dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> &
+get_allocator() const : allocator_type
+cbegin() const : const_iterator
+begin() const : const_iterator
+begin() : iterator
+cend() const : const_iterator
+end() const : const_iterator
+end() : iterator
+empty() const : bool
+size() const : size_type
+max_size() const : size_type
+clear() : void
+insert(const value_type & value) : std::pair<iterator,bool>
+insert(value_type && value) : std::pair<iterator,bool>
+erase(const_iterator pos) : iterator
+erase(const_iterator first, const_iterator last) : iterator
+erase(const key_type & key) : size_type
+swap(dense_map<Key,Type,type-parameter-0-2,type-parameter-0-3,type-parameter-0-4> & other) : void
+at(const key_type & key) : mapped_type &
+at(const key_type & key) const : const mapped_type &
+operator[](const key_type & key) : mapped_type &
+operator[](key_type && key) : mapped_type &
+count(const key_type & key) const : size_type
+find(const key_type & key) : iterator
+find(const key_type & key) const : const_iterator
+equal_range(const key_type & key) : std::pair<iterator,iterator>
+equal_range(const key_type & key) const : std::pair<const_iterator,const_iterator>
+contains(const key_type & key) const : bool
+cbegin(const size_type index) const : const_local_iterator
+begin(const size_type index) const : const_local_iterator
+begin(const size_type index) : local_iterator
+cend(const size_type index) const : const_local_iterator
+end(const size_type index) const : const_local_iterator
+end(const size_type index) : local_iterator
+bucket_count() const : size_type
+max_bucket_count() const : size_type
+bucket_size(const size_type index) const : size_type
+bucket(const key_type & key) const : size_type
+load_factor() const : float
+max_load_factor() const : float
+max_load_factor(const float value) : void
+rehash(const size_type cnt) : void
+reserve(const size_type cnt) : void
+hash_function() const : hasher
+key_eq() const : key_equal
-key_to_bucket<Other>(const Other & key) : std::size_t
-constrained_find<Other>(const Other & key, std::size_t bucket) : auto
-constrained_find<Other>(const Other & key, std::size_t bucket) : auto
-insert_or_do_nothing<Other,Args...>(Other && key, Args &&... args) : auto
-insert_or_overwrite<Other,Arg>(Other && key, Arg && value) : auto
+insert<Arg>(Arg && value) : std::enable_if_t<std::is_constructible_v<value_type, Arg &&>, std::pair<iterator, _Bool> >
+insert<It>(It first, It last) : void
+insert_or_assign<Arg>(const key_type & key, Arg && value) : std::pair<iterator, _Bool>
+insert_or_assign<Arg>(key_type && key, Arg && value) : std::pair<iterator, _Bool>
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+try_emplace<Args...>(const key_type & key, Args &&... args) : std::pair<iterator, _Bool>
+try_emplace<Args...>(key_type && key, Args &&... args) : std::pair<iterator, _Bool>
+count<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+find<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+equal_range<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+equal_range<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+contains<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
-sparse : compressed_pair<sparse_container_type,hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1035{sparse}]]]
-packed : compressed_pair<packed_container_type,key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1036{packed}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L1037{threshold}]]]
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L265{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_map.hpp#L266{minimum_capacity}]]]
}
class "dense_map<Key,Type,=std::hash<Key>,=std::equal_to<Key>,=std::allocator<std::pair<const Key, Type> >>" as C_0001503042528880026519
class C_0001503042528880026519 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L15{dense_map}]] {
}
class "dense_set<Type,=std::hash<Type>,=std::equal_to<Type>,=std::allocator<Type>>" as C_0002296068478642625070
class C_0002296068478642625070 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/fwd.hpp#L22{dense_set}]] {
}
class "compressed_pair<std::vector<std::size_t>,dense_set::hasher>" as C_0002082989189680990643
class C_0002082989189680990643 {
}
class "compressed_pair<std::vector<std::pair<std::size_t,Type>>,dense_set::key_equal>" as C_0001611725919328905677
class C_0001611725919328905677 {
}
class "dense_set<Type,Hash=std::hash<Type>,KeyEqual=std::equal_to<Type>,Allocator=std::allocator<Type>>" as C_0001428356275870265271
class C_0001428356275870265271 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L228{dense_set}]] {
-move_and_pop(const std::size_t pos) : void
-rehash_if_required() : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>() : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const hasher & hash, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const size_type cnt, const hasher & hash = hasher{}, const key_equal & equal = key_equal{}, const allocator_type & allocator = allocator_type{}) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & ) = default : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other, const allocator_type & allocator) : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && ) = default : void
+dense_set<Type, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3>(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && other, const allocator_type & allocator) : void
+operator=(const dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & ) = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
+operator=(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> && ) = default : dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> &
+get_allocator() const : allocator_type
+cbegin() const : const_iterator
+begin() const : const_iterator
+begin() : iterator
+cend() const : const_iterator
+end() const : const_iterator
+end() : iterator
+empty() const : bool
+size() const : size_type
+max_size() const : size_type
+clear() : void
+insert(const value_type & value) : std::pair<iterator,bool>
+insert(value_type && value) : std::pair<iterator,bool>
+erase(const_iterator pos) : iterator
+erase(const_iterator first, const_iterator last) : iterator
+erase(const value_type & value) : size_type
+swap(dense_set<Type,type-parameter-0-1,type-parameter-0-2,type-parameter-0-3> & other) : void
+count(const value_type & key) const : size_type
+find(const value_type & value) : iterator
+find(const value_type & value) const : const_iterator
+equal_range(const value_type & value) : std::pair<iterator,iterator>
+equal_range(const value_type & value) const : std::pair<const_iterator,const_iterator>
+contains(const value_type & value) const : bool
+cbegin(const size_type index) const : const_local_iterator
+begin(const size_type index) const : const_local_iterator
+begin(const size_type index) : local_iterator
+cend(const size_type index) const : const_local_iterator
+end(const size_type index) const : const_local_iterator
+end(const size_type index) : local_iterator
+bucket_count() const : size_type
+max_bucket_count() const : size_type
+bucket_size(const size_type index) const : size_type
+bucket(const value_type & value) const : size_type
+load_factor() const : float
+max_load_factor() const : float
+max_load_factor(const float value) : void
+rehash(const size_type cnt) : void
+reserve(const size_type cnt) : void
+hash_function() const : hasher
+key_eq() const : key_equal
-value_to_bucket<Other>(const Other & value) : std::size_t
-constrained_find<Other>(const Other & value, std::size_t bucket) : auto
-constrained_find<Other>(const Other & value, std::size_t bucket) : auto
-insert_or_do_nothing<Other>(Other && value) : auto
+insert<It>(It first, It last) : void
+emplace<Args...>(Args &&... args) : std::pair<iterator, _Bool>
+count<Other>(const Other & key) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, size_type> >
+find<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, iterator> >
+find<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, const_iterator> >
+equal_range<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<iterator, iterator> > >
+equal_range<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, std::pair<const_iterator, const_iterator> > >
+contains<Other>(const Other & value) : std::enable_if_t<is_transparent_v<hasher> && is_transparent_v<key_equal>, std::conditional_t<false, Other, _Bool> >
-sparse : compressed_pair<sparse_container_type,hasher> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L888{sparse}]]]
-packed : compressed_pair<packed_container_type,key_equal> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L889{packed}]]]
-threshold : float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L890{threshold}]]]
{static} -default_threshold : const float [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L229{default_threshold}]]]
{static} -minimum_capacity : const std::size_t [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/container/dense_set.hpp#L230{minimum_capacity}]]]
}
C_0001723716587279733623 ..|> C_0000150299823092418682
C_0000401973545844492876 ..|> C_0001723716587279733623
C_0000496685335806935509 ..|> C_0001723716587279733623
C_0000150299823092418682 ..|> C_0001723716587279733623
C_0000507249114974527684 ..> C_0001949040226502523653
C_0001073675684695097120 o- - C_0001686486826919845415 : -sparse
C_0001073675684695097120 o- - C_0000507249114974527684 : -packed
C_0002082989189680990643 ..|> C_0001686486826919845415
C_0001428356275870265271 o- - C_0002082989189680990643 : -sparse
C_0001428356275870265271 o- - C_0001611725919328905677 : -packed

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>