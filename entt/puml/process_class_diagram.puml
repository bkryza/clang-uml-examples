@startuml
class "process<Derived,Delta>" as C_0002250218767873034998
class C_0002250218767873034998 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/process.hpp#L70{process}]] {
+~process() noexcept : void
..
+abort(const bool immediately = false) : void
+alive() const noexcept : bool
#fail() noexcept : void
+finished() const noexcept : bool
-next() const noexcept : void
-next<Target=Derived>(std::integral_constant<state,state::uninitialized>) : decltype(std::declval<Target>().init() , void())
-next<Target=Derived>(std::integral_constant<state,state::running>, Delta delta, void * data) : decltype(std::declval<Target>().update(delta, data) , void())
-next<Target=Derived>(std::integral_constant<state,state::succeeded>) : decltype(std::declval<Target>().succeeded() , void())
-next<Target=Derived>(std::integral_constant<state,state::failed>) : decltype(std::declval<Target>().failed() , void())
-next<Target=Derived>(std::integral_constant<state,state::aborted>) : decltype(std::declval<Target>().aborted() , void())
#pause() noexcept : void
+paused() const noexcept : bool
+rejected() const noexcept : bool
#succeed() noexcept : void
+tick(const Delta delta, void * data = nullptr) : void
#unpause() noexcept : void
__
-current : process::state [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/process.hpp#L262{current}]]]
}
enum "process::state" as C_0000364718339823005686
enum C_0000364718339823005686 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/process.hpp#L71{process##state}]] {
uninitialized
running
paused
succeeded
failed
aborted
finished
rejected
}
class "process_adaptor<Func,Delta>" as C_0000987817905510358710
class C_0000987817905510358710 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/process.hpp#L70{process_adaptor}]] {
__
}
class "scheduler<Delta>" as C_0001693309150905075514
class C_0001693309150905075514 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L41{scheduler}]] {
+scheduler() : void
+scheduler(scheduler<Delta> &&) = default : void
..
+operator=(scheduler<Delta> &&) = default : scheduler<Delta> &
..
+abort(const bool immediately = false) : void
{static} -abort<Proc>(scheduler<Delta> & owner, std::size_t pos, const bool immediately) : void
+attach<Proc,Args...>(Args &&... args) : auto
+attach<Func>(Func && func) : auto
+clear() : void
{static} -deleter<Proc>(void * proc) : void
+empty() const noexcept : bool
+size() const noexcept : scheduler::size_type
+update(const Delta delta, void * data = nullptr) : void
{static} -update<Proc>(scheduler<Delta> & owner, std::size_t pos, const Delta delta, void * data) : _Bool
__
-handlers : std::vector<process_handler> [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L278{handlers}]]]
}
class "scheduler::process_handler" as C_0000844935833660429083
class C_0000844935833660429083 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L42{scheduler##process_handler}]] {
__
+abort : scheduler::process_handler::abort_fn_type * [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L50{abort}]]]
+instance : scheduler::process_handler::instance_type [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L48{instance}]]]
+next : scheduler::process_handler::next_type [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L51{next}]]]
+update : scheduler::process_handler::update_fn_type * [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L49{update}]]]
}
class "scheduler::continuation" as C_0001603671107212245628
class C_0001603671107212245628 [[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L54{scheduler##continuation}]] {
+continuation(scheduler::process_handler * ref) noexcept : void
+then<Proc,Args...>(Args &&... args) : struct scheduler::continuation
+then<Func>(Func && func) : struct scheduler::continuation
__
-handler : scheduler::process_handler * [[[https://github.com/skypjack/entt/blob/fef921132cae7588213d0f9bcd2fb9c8ffd8b7fc/src/entt/process/scheduler.hpp#L73{handler}]]]
}
C_0000364718339823005686 --+ C_0002250218767873034998
C_0000987817905510358710 ..|> C_0000987817905510358710
C_0000844935833660429083 --+ C_0001693309150905075514
C_0001603671107212245628 --+ C_0001693309150905075514

'Generated with clang-uml, version 0.3.6-29-g238bfb0
'LLVM version Ubuntu clang version 15.0.6
@enduml
