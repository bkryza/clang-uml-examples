@startuml
title clang-uml package diagram model
enum "clanguml::common::model::diagram_t" as C_0000911024010877522257
enum C_0000911024010877522257 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/enums.h#L24{diagram_t}]] {
kClass
kSequence
kPackage
kInclude
}
enum "clanguml::common::model::access_t" as C_0002077031342744882956
enum C_0002077031342744882956 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/enums.h#L26{access_t}]] {
kPublic
kProtected
kPrivate
kNone
}
enum "clanguml::common::model::relationship_t" as C_0000229140160180072950
enum C_0000229140160180072950 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/enums.h#L28{relationship_t}]] {
kNone
kExtension
kComposition
kAggregation
kContainment
kOwnership
kAssociation
kInstantiation
kFriendship
kAlias
kDependency
kConstraint
}
enum "clanguml::common::model::message_t" as C_0001623832985137466228
enum C_0001623832985137466228 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/enums.h#L44{message_t}]] {
kCall
kReturn
kIf
kElse
kElseIf
kIfEnd
kWhile
kWhileEnd
kDo
kDoEnd
kFor
kForEnd
kTry
kCatch
kTryEnd
kSwitch
kCase
kSwitchEnd
kConditional
kConditionalElse
kConditionalEnd
kNone
}
enum "clanguml::common::model::message_scope_t" as C_0000202859212831973510
enum C_0000202859212831973510 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/enums.h#L70{message_scope_t}]] {
kNormal
kCondition
}
class "clanguml::common::model::path<Sep>" as C_0001932252426145029507
class C_0001932252426145029507 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/path.h#L28{path}]] {
+path<Sep>() = default : void
+path<Sep>() : void
+path<Sep>() : void
+path<Sep>() : void
+operator=() = default : path<Sep> &
+path<Sep>() = default : void
+operator=() = default : path<Sep> &
+path<Sep>() : void
+path<Sep>() : void
+to_string() const : std::string
+is_empty() const : bool
+size() const : size_t
+operator|() const : path<Sep>
+operator|=() : void
+operator|() const : path<Sep>
+operator|=() : void
+operator[]() : std::string &
+operator[]() const : const std::string &
+append() : void
+append() : void
+pop_back() : void
+parent() const : std::optional<path<Sep>>
+starts_with() const : bool
+ends_with() const : bool
+common_path() const : path<Sep>
+relative_to() const : path<Sep>
+relative() const : std::string
+name() const : std::string
+begin() : __gnu_cxx::__normal_iterator<Sep>::container_type::iterator
+end() : __gnu_cxx::__normal_iterator<Sep>::container_type::iterator
+cbegin() const : __gnu_cxx::__normal_iterator<Sep>::container_type::const_iterator
+cend() const : __gnu_cxx::__normal_iterator<Sep>::container_type::const_iterator
+begin() const : __gnu_cxx::__normal_iterator<Sep>::container_type::const_iterator
+end() const : __gnu_cxx::__normal_iterator<Sep>::container_type::const_iterator
-path_ : clanguml::common::model::path::container_type [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/path.h#L224{path_}]]]
}
class "clanguml::common::model::ns_path_separator" as C_0001331923285602672865
class C_0001331923285602672865 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/namespace.h#L28{ns_path_separator}]] {
{static} +value : const std::string_view [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/namespace.h#L29{value}]]]
}
enum "clanguml::common::model::template_parameter_kind_t" as C_0000362408953172993523
enum C_0000362408953172993523 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L29{template_parameter_kind_t}]] {
template_type
template_template_type
non_type_template
argument
concept_constraint
}
class "clanguml::common::model::path<clanguml::common::model::ns_path_separator>" as C_0001618725806424907966
class C_0001618725806424907966 {
}
class "clanguml::common::model::template_parameter" as C_0000178138562743079529
class C_0000178138562743079529 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L45{template_parameter}]] {
{static} +make_template_type() : clanguml::common::model::template_parameter
{static} +make_template_template_type() : clanguml::common::model::template_parameter
{static} +make_non_type_template() : clanguml::common::model::template_parameter
{static} +make_argument() : clanguml::common::model::template_parameter
{static} +make_unexposed_argument() : clanguml::common::model::template_parameter
+set_type() : void
+type() const : std::optional<std::string>
+set_id() : void
+id() const : const std::optional<int64_t> &
+set_name() : void
+name() const : std::optional<std::string>
+set_default_value() : void
+default_value() const : const std::optional<std::string> &
+is_variadic() : void
+is_variadic() const : bool
+calculate_specialization_match() const : int
+is_template_parameter() const : bool
+is_template_parameter() : void
+is_template_template_parameter() const : bool
+is_template_template_parameter() : void
+to_string() const : std::string
+add_template_param() : void
+add_template_param() : void
+template_params() const : const std::vector<template_parameter> &
+clear_params() : void
+find_nested_relationships() const : bool
+set_concept_constraint() : void
+concept_constraint() const : const std::optional<std::string> &
+kind() const : clanguml::common::model::template_parameter_kind_t
+set_kind() : void
+is_unexposed() const : bool
+set_unexposed() : void
+set_function_template() : void
+is_function_template() const : bool
-template_parameter() = default : void
-type_ : std::optional<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L192{type_}]]]
-name_ : std::optional<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L195{name_}]]]
-default_value_ : std::optional<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L198{default_value_}]]]
-is_template_parameter_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L202{is_template_parameter_}]]]
-is_template_template_parameter_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L206{is_template_template_parameter_}]]]
-is_variadic_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L209{is_variadic_}]]]
-is_function_template_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L211{is_function_template_}]]]
-concept_constraint_ : std::optional<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L215{concept_constraint_}]]]
-id_ : std::optional<int64_t> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L221{id_}]]]
-is_unexposed_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_parameter.h#L223{is_unexposed_}]]]
}
class "clanguml::common::model::decorated_element" as C_0001117102382624673118
class C_0001117102382624673118 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/decorated_element.h#L37{decorated_element}]] {
+skip() const : bool
+skip_relationship() const : bool
+get_relationship() const : std::pair<relationship_t,std::string>
+style_spec() const : std::string
+decorators() const : const std::vector<std::shared_ptr<decorators::decorator>> &
+add_decorators() : void
+append() : void
+comment() const : std::optional<comment_t>
+set_comment() : void
-decorators_ : std::vector<std::shared_ptr<decorators::decorator>> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/decorated_element.h#L60{decorators_}]]]
-comment_ : std::optional<comment_t> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/decorated_element.h#L61{comment_}]]]
}
class "clanguml::common::model::stylable_element" as C_0002077846075979426940
class C_0002077846075979426940 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/stylable_element.h#L24{stylable_element}]] {
+set_style() : void
+style() const : std::string
-style_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/stylable_element.h#L30{style_}]]]
}
class "clanguml::common::model::relationship" as C_0002046336758797367926
class C_0002046336758797367926 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/relationship.h#L28{relationship}]] {
+relationship() : void
+~relationship() = default : void
+set_type() : void
+type() const : clanguml::common::model::relationship_t
+set_destination() : void
+destination() const : clanguml::common::id_t
+set_multiplicity_source() : void
+multiplicity_source() const : std::string
+set_multiplicity_destination() : void
+multiplicity_destination() const : std::string
+set_label() : void
+label() const : std::string
+set_access() : void
+access() const : clanguml::common::model::access_t
-destination_ : int64_t [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/relationship.h#L61{destination_}]]]
-multiplicity_source_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/relationship.h#L62{multiplicity_source_}]]]
-multiplicity_destination_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/relationship.h#L63{multiplicity_destination_}]]]
-label_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/relationship.h#L64{label_}]]]
}
class "clanguml::common::model::source_location" as C_0000895261582183440230
class C_0000895261582183440230 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_location.h#L25{source_location}]] {
+source_location() = default : void
+source_location() : void
+file() const : const std::string &
+set_file() : void
+file_relative() const : const std::string &
+set_file_relative() : void
+line() const : unsigned int
+set_line() : void
+location_id() const : unsigned int
+set_location_id() : void
-file_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_location.h#L52{file_}]]]
-file_relative_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_location.h#L53{file_relative_}]]]
-line_ : unsigned int [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_location.h#L54{line_}]]]
-hash_ : unsigned int [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_location.h#L55{hash_}]]]
}
class "clanguml::common::model::diagram_element" as C_0001073500714379115414
class C_0001073500714379115414 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_element.h#L34{diagram_element}]] {
+diagram_element() : void
+~diagram_element() = default : void
+id() const : clanguml::common::model::diagram_element::id_t
+set_id() : void
+alias() const : std::string
+set_name() : void
+name() const : std::string
+type_name() const : std::string
+full_name() const : std::string
+relationships() : std::vector<relationship> &
+relationships() const : const std::vector<relationship> &
+add_relationship() : void
+append() : void
+context() const : inja::json
+is_nested() const : bool
+nested() : void
+complete() const : bool
+complete() : void
-id_ : clanguml::common::model::diagram_element::id_t [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_element.h#L80{id_}]]]
-name_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_element.h#L81{name_}]]]
-nested_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_element.h#L83{nested_}]]]
-complete_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_element.h#L84{complete_}]]]
}
class "clanguml::common::model::nested_trait<T,Path>" as C_0000891208748219309562
class C_0000891208748219309562 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/nested_trait.h#L28{nested_trait}]] {
+nested_trait<T, Path>() = default : void
+nested_trait<T, Path>() : void
+nested_trait<T, Path>() = default : void
+operator=() : nested_trait<T,Path> &
+operator=() = default : nested_trait<T,Path> &
+~nested_trait<T, Path>() = default : void
+has_element() const : bool
+is_empty() const : bool
+begin() : auto
+end() : auto
+cbegin() const : auto
+cend() const : auto
+begin() const : auto
+end() const : auto
+print_tree() : void
+add_element<V=T>() : _Bool
+add_element<V=T>() : _Bool
+get_element<V=T>() : auto
+get_element_parent<V=T>() : auto
+get_element<V=T>() : auto
-elements_ : std::vector<std::unique_ptr<T>> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/nested_trait.h#L169{elements_}]]]
}
enum "clanguml::common::model::source_file_t" as C_0001490157860030300113
enum C_0001490157860030300113 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_file.h#L37{source_file_t}]] {
kDirectory
kHeader
kImplementation
}
class "clanguml::common::model::fs_path_sep" as C_0000640258162892495349
class C_0000640258162892495349 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_file.h#L41{fs_path_sep}]] {
{static} +value : const std::string_view [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_file.h#L45{value}]]]
}
class "clanguml::common::model::path<clanguml::common::model::fs_path_sep>" as C_0001035161069848456027
class C_0001035161069848456027 {
}
class "clanguml::common::model::source_file" as C_0000785714713072053129
class C_0000785714713072053129 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_file.h#L51{source_file}]] {
+source_file() = default : void
+source_file() : void
+set_path() : void
+set_absolute() : void
+is_absolute() const : bool
+set_type() : void
+type() const : clanguml::common::model::source_file_t
+source_file() : void
+source_file() = default : void
+operator=() : clanguml::common::model::source_file &
+operator=() : clanguml::common::model::source_file &
+operator==() const : bool
+path() const : const clanguml::common::model::filesystem_path &
+full_name() const : std::string
+full_path() const : clanguml::common::model::path<clanguml::common::model::fs_path_sep>
+fs_path() const : std::filesystem::path
+context() const : inja::json
-is_absolute_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/source_file.h#L131{is_absolute_}]]]
}
class "clanguml::common::model::element" as C_0002069520381434407937
class C_0002069520381434407937 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/element.h#L35{element}]] {
+element() : void
+~element() = default : void
+name_and_ns() const : std::string
+set_namespace() : void
+get_namespace() const : clanguml::common::model::namespace_
+get_relative_namespace() const : clanguml::common::model::namespace_
+path() const : const clanguml::common::model::namespace_ &
+full_name() const : std::string
+full_name_no_ns() const : std::string
+using_namespace() const : const clanguml::common::model::namespace_ &
+context() const : inja::json
}
class "clanguml::common::model::template_trait" as C_0000464715462505216589
class C_0000464715462505216589 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_trait.h#L28{template_trait}]] {
+render_template_params() const : std::ostream &
+set_base_template() : void
+base_template() const : std::string
+add_template() : void
+template_params() const : const std::vector<template_parameter> &
+calculate_template_specialization_match() const : int
+is_implicit() const : bool
+set_implicit() : void
-base_template_full_name_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_trait.h#L50{base_template_full_name_}]]]
-is_implicit_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/template_trait.h#L51{is_implicit_}]]]
}
abstract "clanguml::common::model::diagram" as C_0000197068985320835874
abstract C_0000197068985320835874 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram.h#L34{diagram}]] {
+diagram() : void
+~diagram() : void
{abstract} +type() const = 0 : clanguml::common::model::diagram_t
{abstract} +get() const = 0 : clanguml::common::optional_ref<clanguml::common::model::diagram_element>
{abstract} +get() const = 0 : clanguml::common::optional_ref<clanguml::common::model::diagram_element>
+get_with_namespace() const : clanguml::common::optional_ref<clanguml::common::model::diagram_element>
+diagram() : void
+diagram() : void
+operator=() : clanguml::common::model::diagram &
+operator=() : clanguml::common::model::diagram &
+set_name() : void
+name() const : std::string
+set_filter() : void
+set_complete() : void
+complete() const : bool
+should_include() const : bool
+should_include() const : bool
+should_include() const : bool
+should_include() const : bool
+should_include() const : bool
+should_include() const : bool
+has_element() const : bool
+should_include() const : bool
{abstract} +context() const = 0 : inja::json
-name_ : std::string [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram.h#L85{name_}]]]
-complete_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram.h#L87{complete_}]]]
}
class "clanguml::common::model::package" as C_0002143286684830686854
class C_0002143286684830686854 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/package.h#L34{package}]] {
+package() : void
+package() : void
+package() = default : void
+operator=() : clanguml::common::model::package &
+operator=() : clanguml::common::model::package &
+type_name() const : std::string
+full_name() const : std::string
+is_deprecated() const : bool
+set_deprecated() : void
+add_package() : void
-is_deprecated_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/package.h#L56{is_deprecated_}]]]
}
enum "clanguml::common::model::filter_t" as C_0001931666600378768700
enum C_0001931666600378768700 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L37{filter_t}]] {
kInclusive
kExclusive
}
class "clanguml::common::model::filter_visitor" as C_0000469458052685692314
class C_0000469458052685692314 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L57{filter_visitor}]] {
+filter_visitor() : void
+~filter_visitor() = default : void
+match() const : tvl::value_t
+match() const : tvl::value_t
+match() const : tvl::value_t
+match() const : tvl::value_t
+match() const : tvl::value_t
+match() const : tvl::value_t
+is_inclusive() const : bool
+is_exclusive() const : bool
+type() const : clanguml::common::model::filter_t
}
class "clanguml::common::model::anyof_filter" as C_0000605829206649563575
class C_0000605829206649563575 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L90{anyof_filter}]] {
+anyof_filter() : void
+~anyof_filter() = default : void
+match() const : tvl::value_t
+match() const : tvl::value_t
}
class "clanguml::common::model::namespace_filter" as C_0001816240256470820189
class C_0001816240256470820189 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L106{namespace_filter}]] {
+namespace_filter() : void
+~namespace_filter() = default : void
+match() const : tvl::value_t
+match() const : tvl::value_t
}
class "clanguml::common::model::element_filter" as C_0000690341236618660423
class C_0000690341236618660423 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L119{element_filter}]] {
+element_filter() : void
+~element_filter() = default : void
+match() const : tvl::value_t
-elements_ : std::vector<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L127{elements_}]]]
}
class "clanguml::common::model::subclass_filter" as C_0001389919526184251760
class C_0001389919526184251760 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L130{subclass_filter}]] {
+subclass_filter() : void
+~subclass_filter() = default : void
+match() const : tvl::value_t
-roots_ : std::vector<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L138{roots_}]]]
}
class "clanguml::common::model::parents_filter" as C_0001773753487119877542
class C_0001773753487119877542 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L141{parents_filter}]] {
+parents_filter() : void
+~parents_filter() = default : void
+match() const : tvl::value_t
-children_ : std::vector<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L149{children_}]]]
}
class "clanguml::common::model::edge_traversal_filter<DiagramT,ElementT,MatchOverrideT=common::model::element>" as C_0001979873989333693911
class C_0001979873989333693911 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L154{edge_traversal_filter}]] {
+edge_traversal_filter<DiagramT, ElementT, MatchOverrideT>() : void
+~edge_traversal_filter<DiagramT, ElementT, MatchOverrideT>() = default : void
+match() const : tvl::value_t
-add_parents() const : void
-init() const : void
-add_adjacent<C,D>() : _Bool
-roots_ : std::vector<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L287{roots_}]]]
-initialized_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L289{initialized_}]]]
-matching_elements_ : clanguml::common::reference_set<ElementT> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L290{matching_elements_}]]]
-forward_ : bool [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L291{forward_}]]]
}
class "clanguml::common::model::relationship_filter" as C_0001195713008101262477
class C_0001195713008101262477 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L294{relationship_filter}]] {
+relationship_filter() : void
+~relationship_filter() = default : void
+match() const : tvl::value_t
}
class "clanguml::common::model::access_filter" as C_0001098184343448999590
class C_0001098184343448999590 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L307{access_filter}]] {
+access_filter() : void
+~access_filter() = default : void
+match() const : tvl::value_t
}
class "clanguml::common::model::context_filter" as C_0002078668697238559556
class C_0002078668697238559556 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L318{context_filter}]] {
+context_filter() : void
+~context_filter() = default : void
+match() const : tvl::value_t
-context_ : std::vector<std::string> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L326{context_}]]]
}
class "clanguml::common::model::paths_filter" as C_0000831536458766184760
class C_0000831536458766184760 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L329{paths_filter}]] {
+paths_filter() : void
+~paths_filter() = default : void
+match() const : tvl::value_t
+match() const : tvl::value_t
-paths_ : std::vector<std::filesystem::path> [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L342{paths_}]]]
-root_ : std::filesystem::path [[[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L343{root_}]]]
}
class "clanguml::common::model::diagram_filter" as C_0002054140694270036745
class C_0002054140694270036745 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/common/model/diagram_filter.h#L346{diagram_filter}]] {
+diagram_filter() : void
+add_inclusive_filter() : void
+add_exclusive_filter() : void
+should_include() const : bool
-init_filters() : void
+should_include<T>() : _Bool
}
class "diagram" as C_0000148537001046167478
class C_0000148537001046167478 [[https://github.com/bkryza/clang-uml/blob/b74bdab7857376d2095452368a8c88870b8ee2c5/src/package_diagram/model/diagram.h#L28{diagram}]] {
+diagram() = default : void
+diagram() : void
+diagram() = default : void
+operator=() : diagram &
+operator=() = default : diagram &
+type() const : common::model::diagram_t
+packages() const : const common::reference_vector<clanguml::common::model::package> &
+get() const : clanguml::common::optional_ref<clanguml::common::model::diagram_element>
+get() const : clanguml::common::optional_ref<clanguml::common::model::diagram_element>
+add_package() : void
+get_package() const : clanguml::common::optional_ref<clanguml::common::model::package>
+get_package() const : clanguml::common::optional_ref<common::model::package>
+to_alias() const : std::string
+context() const : inja::json
}
C_0001618725806424907966 ..|> C_0001932252426145029507
C_0000178138562743079529 o-- C_0000362408953172993523 : -kind_
C_0000178138562743079529 o-- C_0000178138562743079529 : -template_params_
C_0002046336758797367926 o-- C_0000229140160180072950 : -type_
C_0002046336758797367926 o-- C_0002077031342744882956 : -access_
C_0001117102382624673118 <|-- C_0002046336758797367926
C_0002077846075979426940 <|-- C_0002046336758797367926
C_0001073500714379115414 o-- C_0002046336758797367926 : -relationships_
C_0001117102382624673118 <|-- C_0001073500714379115414
C_0000895261582183440230 <|-- C_0001073500714379115414
C_0001035161069848456027 ..|> C_0001932252426145029507
C_0000785714713072053129 o-- C_0001035161069848456027 : -path_
C_0000785714713072053129 o-- C_0001490157860030300113 : -type_
C_0001073500714379115414 <|-- C_0000785714713072053129
C_0002077846075979426940 <|-- C_0000785714713072053129
C_0002069520381434407937 o-- C_0001618725806424907966 : -ns_
C_0002069520381434407937 o-- C_0001618725806424907966 : -using_namespace_
C_0001073500714379115414 <|-- C_0002069520381434407937
C_0000464715462505216589 o-- C_0000178138562743079529 : -templates_
C_0000197068985320835874 o-- C_0002054140694270036745 : -filter_
C_0002069520381434407937 <|-- C_0002143286684830686854
C_0002077846075979426940 <|-- C_0002143286684830686854
C_0000469458052685692314 o-- C_0001931666600378768700 : -type_
C_0000605829206649563575 o-- C_0000469458052685692314 : -filters_
C_0000469458052685692314 <|-- C_0000605829206649563575
C_0001816240256470820189 o-- C_0001618725806424907966 : -namespaces_
C_0000469458052685692314 <|-- C_0001816240256470820189
C_0000469458052685692314 <|-- C_0000690341236618660423
C_0000469458052685692314 <|-- C_0001389919526184251760
C_0000469458052685692314 <|-- C_0001773753487119877542
C_0001979873989333693911 o-- C_0000229140160180072950 : -relationship_
C_0000469458052685692314 <|-- C_0001979873989333693911
C_0001195713008101262477 o-- C_0000229140160180072950 : -relationships_
C_0000469458052685692314 <|-- C_0001195713008101262477
C_0001098184343448999590 o-- C_0002077031342744882956 : -access_
C_0000469458052685692314 <|-- C_0001098184343448999590
C_0000469458052685692314 <|-- C_0002078668697238559556
C_0000469458052685692314 <|-- C_0000831536458766184760
C_0002054140694270036745 o-- C_0000469458052685692314 : -inclusive_
C_0002054140694270036745 o-- C_0000469458052685692314 : -exclusive_
C_0002054140694270036745 --> C_0000197068985320835874 : -diagram_
C_0000148537001046167478 o-- C_0002143286684830686854 : -packages_
C_0000197068985320835874 <|-- C_0000148537001046167478

'Generated with clang-uml, version 0.3.4-2-gc91fe43
'LLVM version Ubuntu clang version 15.0.6
@enduml
