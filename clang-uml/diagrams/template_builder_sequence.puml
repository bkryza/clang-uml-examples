@startuml
title Diagram element template builder sequence diagram
participant "common::visitor::template_builder<VisitorT>" as C_0016360515434730622068 [[{Class responsible for building all kinds of templates from Clang AST.}]]
[-> C_0016360515434730622068 : build()
activate C_0016360515434730622068
alt (templated_class_decl != nullptr) && templated_class_decl->hasDefinition()
loop templated_class_decl
participant "common::visitor::template_builder<VisitorT>::build(const clang::NamedDecl &,common::model::template_element &,const clang::NamedDecl *,const clang::TemplateDecl *,const clang::ArrayRef<clang::TemplateArgument>,std::string,std::optional<common::model::template_element *>)::(lambda src/common/visitor/template_builder.h:865:17)" as C_0002805691504337321714 [[{template_builder<VisitorT>::build(const clang::NamedDecl &,common::model::template_element &,const clang::NamedDecl *,const clang::TemplateDecl *,const clang::ArrayRef<clang::TemplateArgument>,std::string,std::optional<common::model::template_element *>)::(lambda src/common/visitor/template_builder.h:865:17)}]]
C_0016360515434730622068 -> C_0002805691504337321714 [[{}]] : operator()() const
activate C_0002805691504337321714
C_0002805691504337321714 --> C_0016360515434730622068
deactivate C_0002805691504337321714
end
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_template_arguments()
activate C_0016360515434730622068
loop template_args
note over C_0016360515434730622068
For now ignore the default
template arguments of templates
which do not match the inclusion
filters, to make the system
templates 'nicer' - i.e.
skipping the allocators and
comparators TODO: Change
this to ignore only when
the arguments are set to
default values, and add them
when they are specifically
overridden
end note
alt !diagram().should_include( namespace_{template_decl->getQualifiedNameAsString()})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
end
note over C_0016360515434730622068
Handle the template parameter/argument
based on its kind
end note
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : argument_process_dispatch()
activate C_0016360515434730622068
group switch
else clang::class TemplateArgument::Null
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_null_argument()
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Template
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_template_argument()
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Type
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_function_prototype()
activate C_0016360515434730622068
alt function_type == nullptr && type->isFunctionPointerType()
alt function_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
end
alt function_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Set function template return
type
end note
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Set function template argument
types
end note
alt function_type->isVariadic() && function_type->param_types().empty()
else
loop function_type
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
end
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_member_pointer()
activate C_0016360515434730622068
alt mp_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Handle a pointer to a data
member of a class
end note
alt mp_type->isMemberDataPointer()
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
alt member_class_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
else
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
alt member_class_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Add argument types
end note
loop function_type
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
end
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_array()
activate C_0016360515434730622068
alt array_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Set function template return
type
end note
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_type_argument()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_template_parm_type()
activate C_0016360515434730622068
alt type_parameter == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
participant "src/common/visitor/template_builder.cc" as C_0000072055526262722936
C_0016360515434730622068 -> C_0000072055526262722936 [[{}]] : map_type_parameter_to_template_parameter_name()
activate C_0000072055526262722936
alt type_parameter.find("type-parameter-") != 0
C_0000072055526262722936 --> C_0016360515434730622068
end
alt const auto *template_decl = llvm::dyn_cast<clang::ClassTemplateSpecializationDecl>(decl); template_decl != nullptr
C_0000072055526262722936 -> C_0000072055526262722936 [[{}]] : map_type_parameter_to_template_parameter()
activate C_0000072055526262722936
loop auto i = 0U; i < decl->getDescribedTemplateParams()->size(); i++
alt i == index0
C_0000072055526262722936 --> C_0000072055526262722936
end
end
C_0000072055526262722936 --> C_0000072055526262722936
deactivate C_0000072055526262722936
C_0000072055526262722936 --> C_0016360515434730622068
end
alt const auto *alias_decl = llvm::dyn_cast<clang::TypeAliasTemplateDecl>(decl); alias_decl != nullptr
C_0000072055526262722936 -> C_0000072055526262722936 [[{}]] : map_type_parameter_to_template_parameter()
activate C_0000072055526262722936
loop auto i = 0U; i < decl->getTemplateParameters()->size(); i++
alt i == index0
C_0000072055526262722936 --> C_0000072055526262722936
end
end
C_0000072055526262722936 --> C_0000072055526262722936
deactivate C_0000072055526262722936
C_0000072055526262722936 --> C_0016360515434730622068
end
note over C_0000072055526262722936
Fallback
end note
C_0000072055526262722936 --> C_0016360515434730622068
deactivate C_0000072055526262722936
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : config() const
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_template_specialization_type()
activate C_0016360515434730622068
alt nested_template_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
alt diagram().should_include( namespace_{template_decl->getQualifiedNameAsString()})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
else
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : build_from_template_specialization_type()
activate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : build()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : using_namespace() const
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
note over C_0016360515434730622068
Check if this template should
be simplified (e.g. system
template aliases such as
'std:basic_string<char>'
should be simply 'std::string')
end note
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : simplify_system_template() const
activate C_0016360515434730622068
alt ct.kind() == model::template_parameter_kind_t::template_type
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : config() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
alt simplified != full_name
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : using_namespace() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
alt nested_template_instantiation && diagram().should_include( namespace_{nested_template_instantiation_full_name})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
alt config_.generate_template_argument_dependencies()
alt diagram().should_include( namespace_{template_decl->getQualifiedNameAsString()})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
else
end
end
end
alt diagram().should_include( namespace_{nested_template_instantiation_full_name})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_decl_type()
activate C_0016360515434730622068
alt decl_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
note over C_0016360515434730622068
TODO
end note
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_typedef_type()
activate C_0016360515434730622068
alt typedef_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
note over C_0016360515434730622068
If this is a typedef/using
alias to a decltype - we're
not able to figure out anything
out of it probably
end note
alt typedef_type->getAs<clang::DecltypeType>() != nullptr
note over C_0016360515434730622068
Here we need to figure out
the parent context of this
alias, it can be a: - class/struct
end note
alt typedef_type->getDecl()->isCXXClassMember() && parent
C_0016360515434730622068 --> C_0016360515434730622068
end
note over C_0016360515434730622068
- namespace
end note
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_lambda()
activate C_0016360515434730622068
alt type_name.find("(lambda at ") != 0
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : config() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_record_type()
activate C_0016360515434730622068
alt record_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : config() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
alt class_template_specialization != nullptr
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : build_from_class_template_specialization()
activate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_template_arguments()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : find_instantiation_relationships() const
activate C_0016360515434730622068
deactivate C_0016360515434730622068
deactivate C_0016360515434730622068
alt tag_argument
alt config_.generate_template_argument_dependencies() && diagram().should_include(tag_argument->get_namespace())
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
end
end
else const auto *record_type_decl = record_type->getAsRecordDecl(); record_type_decl != nullptr
alt config_.generate_template_argument_dependencies() && diagram().should_include(namespace_{type_name})
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**diagram()**]**
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
end
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_enum_type()
activate C_0016360515434730622068
alt enum_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : try_as_builtin_type()
activate C_0016360515434730622068
alt builtin_type == nullptr
C_0016360515434730622068 --> C_0016360515434730622068
end
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : consume_context() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
alt argument
C_0016360515434730622068 --> C_0016360515434730622068
end
note over C_0016360515434730622068
fallback
end note
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Declaration
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_nullptr_argument()
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Integral
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_integral_argument()
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::TemplateExpansion
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_template_expansion()
activate C_0016360515434730622068
participant "common::visitor::template_builder<VisitorT>::process_template_expansion(const clang::TemplateArgument &)::(lambda src/common/visitor/template_builder.h:1127:50)" as C_0005671468901837607170 [[{template_builder<VisitorT>::process_template_expansion(const clang::TemplateArgument &)::(lambda src/common/visitor/template_builder.h:1127:50)}]]
C_0016360515434730622068 -> C_0005671468901837607170 [[{}]] : operator()() const
activate C_0005671468901837607170
deactivate C_0005671468901837607170
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Expression
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : process_expression_argument()
activate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : source_manager() const
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
else clang::class TemplateArgument::Pack
loop process_pack_argument
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : **[**process_pack_argument()**]**
activate C_0016360515434730622068
loop arg
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : argument_process_dispatch()
activate C_0016360515434730622068
deactivate C_0016360515434730622068
end
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
end
else clang::class TemplateArgument::StructuralValue
end
deactivate C_0016360515434730622068
note over C_0016360515434730622068
In case any of the template
arguments are base classes,
add them as parents of the
current template instantiation
class
end note
alt !template_base_params.empty()
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : add_base_classes()
activate C_0016360515434730622068
C_0016360515434730622068 --> C_0016360515434730622068
deactivate C_0016360515434730622068
end
loop arguments
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : using_namespace() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : simplify_system_template() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : using_namespace() const
activate C_0016360515434730622068
hnote over C_0016360515434730622068 : *
C_0016360515434730622068-[hidden]->C_0016360515434730622068
deactivate C_0016360515434730622068
end
end
deactivate C_0016360515434730622068
C_0016360515434730622068 -> C_0016360515434730622068 [[{}]] : find_instantiation_relationships() const
activate C_0016360515434730622068
deactivate C_0016360515434730622068
deactivate C_0016360515434730622068

'Generated with clang-uml, version 0.6.1
'LLVM version Ubuntu clang version 19.1.1 (1ubuntu1)
@enduml
