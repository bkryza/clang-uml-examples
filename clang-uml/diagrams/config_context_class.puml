@startuml
title clanguml::config::config context diagram
class "option<std::string>" as C_0005141071769497027029
class C_0005141071769497027029 [[classclanguml_1_1config_1_1option.html{option}]] {
__
}
class "option<std::vector<std::string>>" as C_0007293733225463007823
class C_0007293733225463007823 [[classclanguml_1_1config_1_1option.html{option}]] {
__
}
class "inheritable_diagram_options" as C_0000966232506125300666
class C_0000966232506125300666 [[structclanguml_1_1config_1_1inheritable__diagram__options.html{Represents subset of inheritable configuration options}]] {
+~inheritable_diagram_options() = default : void [[[{~inheritable_diagram_options}]]]
..
+generate_fully_qualified_name() const : bool [[[{Whether the diagram element should be fully qualified in diagram}]]]
+get_relative_to() : option<std::filesystem::path> & [[[{Get reference to `relative_to` diagram config option}]]]
+inherit(const inheritable_diagram_options & parent) : void [[[{inherit}]]]
+root_directory() const : std::filesystem::path [[[{Returns absolute path of the `relative_to` option}]]]
+simplify_template_type(std::string full_name) const : std::string [[[{simplify_template_type}]]]
__
+allow_empty_diagrams : option<bool> [[[{allow_empty_diagrams}]]]
+base_directory : option<std::filesystem::path> [[[{base_directory}]]]
+combine_free_functions_into_file_participants : option<bool> [[[{combine_free_functions_into_file_participants}]]]
+comment_parser : option<comment_parser_t> [[[{comment_parser}]]]
+debug_mode : option<bool> [[[{debug_mode}]]]
+exclude : option<filter> [[[{exclude}]]]
+filter_mode : option<filter_mode_t> [[[{filter_mode}]]]
+fold_repeated_activities : option<bool> [[[{fold_repeated_activities}]]]
+generate_concept_requirements : option<bool> [[[{generate_concept_requirements}]]]
+generate_condition_statements : option<bool> [[[{generate_condition_statements}]]]
+generate_links : option<generate_links_config> [[[{generate_links}]]]
+generate_message_comments : option<bool> [[[{generate_message_comments}]]]
+generate_metadata : option<bool> [[[{generate_metadata}]]]
+generate_method_arguments : option<method_arguments> [[[{generate_method_arguments}]]]
+generate_packages : option<bool> [[[{generate_packages}]]]
+generate_return_types : option<bool> [[[{generate_return_types}]]]
+generate_return_values : option<bool> [[[{generate_return_values}]]]
+generate_system_headers : option<bool> [[[{generate_system_headers}]]]
+generate_template_argument_dependencies : option<bool> [[[{generate_template_argument_dependencies}]]]
+git : option<git_config> [[[{git}]]]
+glob : option<glob_t> [[[{glob}]]]
+graphml : option<struct graphml> [[[{graphml}]]]
+group_methods : option<bool> [[[{group_methods}]]]
+include : option<filter> [[[{include}]]]
+include_relations_also_as_members : option<bool> [[[{include_relations_also_as_members}]]]
+include_system_headers : option<bool> [[[{include_system_headers}]]]
+inline_lambda_messages : option<bool> [[[{inline_lambda_messages}]]]
+layout : option<layout_hints> [[[{layout}]]]
+member_order : option<member_order_t> [[[{member_order}]]]
+mermaid : option<struct mermaid> [[[{mermaid}]]]
+message_comment_width : option<unsigned int> [[[{message_comment_width}]]]
+message_name_width : option<unsigned int> [[[{message_name_width}]]]
+package_type : option<package_type_t> [[[{package_type}]]]
+participants_order : option<std::vector<std::string>> [[[{participants_order}]]]
+puml : option<plantuml> [[[{puml}]]]
+relationship_hints : option<relationship_hints_t> [[[{relationship_hints}]]]
#relative_to : option<std::filesystem::path> [[[{relative_to}]]]
+skip_redundant_dependencies : option<bool> [[[{skip_redundant_dependencies}]]]
+type_aliases : option<type_aliases_t> [[[{type_aliases}]]]
+user_data : option<inja::json> [[[{user_data}]]]
+using_module : option<std::string> [[[{using_module}]]]
+using_namespace : option<common::model::namespace_> [[[{using_namespace}]]]
}
abstract "diagram" as C_0003201952778923380387
abstract C_0003201952778923380387 [[structclanguml_1_1config_1_1diagram.html{Common diagram configuration type}]] {
+~diagram() = default : void [[[{~diagram}]]]
..
+get_together_group(const std::string & full_name) const : std::optional<std::string> [[[{get_together_group}]]]
+glob_translation_units(const std::vector<std::string> & compilation_database_files, bool is_fixed = false) const : std::vector<std::string> [[[{Filter translation units based on glob patterns}]]]
+initialize_type_aliases() : void [[[{Initialize predefined set of C++ type aliases}]]]
+make_module_relative(const std::optional<std::string> & maybe_module) const : std::vector<std::string> [[[{Make module path relative to `using_module` configuration option}]]]
+make_path_relative(const std::filesystem::path & p) const : std::filesystem::path [[[{Make path relative to the `relative_to` config option}]]]
{abstract} +type() const = 0 : common::model::diagram_t [[[{type}]]]
__
+name : std::string [[[{name}]]]
+title : option<std::string> [[[{title}]]]
}
class "option<std::vector<clanguml::common::or_regex<std::string>>>" as C_0003538140626756349514
class C_0003538140626756349514 [[classclanguml_1_1config_1_1option.html{option}]] {
__
}
class "option<std::map<std::string,diagram_template>>" as C_0014736060310644810284
class C_0014736060310644810284 [[classclanguml_1_1config_1_1option.html{option}]] {
__
}
class "config" as C_0007149951276107284798
class C_0007149951276107284798 [[structclanguml_1_1config_1_1config.html{Represents entire configuration file}]] {
+inherit() : void [[[{inherit}]]]
+initialize_diagram_templates() : void [[[{initialize_diagram_templates}]]]
__
+add_compile_flags : option<std::vector<std::string>> [[[{add_compile_flags}]]]
+compilation_database_dir : option<std::string> [[[{compilation_database_dir}]]]
+diagram_templates : option<std::map<std::string,diagram_template>> [[[{diagram_templates}]]]
+diagrams : std::map<std::string,std::shared_ptr<diagram>> [[[{diagrams}]]]
+output_directory : option<std::string> [[[{output_directory}]]]
+query_driver : option<std::string> [[[{query_driver}]]]
+remove_compile_flags : option<std::vector<common::string_or_regex>> [[[{remove_compile_flags}]]]
}
C_0000966232506125300666 o-- C_0005141071769497027029 [[{using_module}]] : +using_module
C_0000966232506125300666 o-- C_0007293733225463007823 [[{participants_order}]] : +participants_order
C_0003201952778923380387 o-- C_0005141071769497027029 [[{title}]] : +title
C_0000966232506125300666 <|-- C_0003201952778923380387
C_0007149951276107284798 o-- C_0005141071769497027029 [[{compilation_database_dir}]] : +compilation_database_dir
C_0007149951276107284798 o-- C_0007293733225463007823 [[{add_compile_flags}]] : +add_compile_flags
C_0007149951276107284798 o-- C_0003538140626756349514 [[{remove_compile_flags}]] : +remove_compile_flags
C_0007149951276107284798 o-- C_0005141071769497027029 [[{query_driver}]] : +query_driver
C_0007149951276107284798 o-- C_0005141071769497027029 [[{output_directory}]] : +output_directory
C_0007149951276107284798 o-- C_0014736060310644810284 [[{diagram_templates}]] : +diagram_templates
C_0007149951276107284798 o-- C_0003201952778923380387 [[{diagrams}]] : +diagrams
C_0000966232506125300666 <|-- C_0007149951276107284798

'Generated with clang-uml, version 0.6.1
'LLVM version Ubuntu clang version 19.1.1 (1ubuntu1)
@enduml
