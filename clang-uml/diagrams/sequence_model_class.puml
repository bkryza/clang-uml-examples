@startuml
title Sequence diagram model
package [common] as C_0000316605034920222648 {
package [model] as C_0000083721806430512831 {
enum "message_t" as C_0001623832985137466228
enum C_0001623832985137466228 [[enumclanguml_1_1common_1_1model_1_1message__t.html{message_t}]] {
kCall
kReturn
kIf
kElse
kElseIf
kIfEnd
kWhile
kWhileEnd
kDo
kDoEnd
kFor
kForEnd
kTry
kCatch
kTryEnd
kSwitch
kCase
kSwitchEnd
kConditional
kConditionalElse
kConditionalEnd
kNone
}
enum "message_scope_t" as C_0000202859212831973510
enum C_0000202859212831973510 [[enumclanguml_1_1common_1_1model_1_1message__scope__t.html{message_scope_t}]] {
kNormal
kCondition
}
class "diagram_element" as C_0001073500714379115414
class C_0001073500714379115414 [[classclanguml_1_1common_1_1model_1_1diagram__element.html{Base class for standalone diagram elements.}]] {
+add_relationship() : void [[[{add_relationship}]]]
+alias() const : std::string [[[{Return elements' diagram alias.}]]]
+append() : void [[[{append}]]]
+complete() const : bool [[[{complete}]]]
+complete() : void [[[{complete}]]]
+context() const : inja::json [[[{context}]]]
+full_name() const : std::string [[[{Return the elements fully qualified name.}]]]
+id() const : id_t [[[{Returns diagram element id.}]]]
+is_nested() const : bool [[[{is_nested}]]]
+name() const : std::string [[[{name}]]]
+nested() : void [[[{nested}]]]
+relationships() : std::vector<relationship> & [[[{relationships}]]]
+relationships() const : const std::vector<relationship> & [[[{relationships}]]]
+set_id() : void [[[{set_id}]]]
+set_name() : void [[[{set_name}]]]
+type_name() const : std::string [[[{type_name}]]]
__
-complete_ : bool [[[{complete_}]]]
-id_ : id_t [[[{id_}]]]
-name_ : std::string [[[{name_}]]]
-nested_ : bool [[[{nested_}]]]
-relationships_ : std::vector<relationship> [[[{relationships_}]]]
}
abstract "diagram" as C_0000197068985320835874
abstract C_0000197068985320835874 [[classclanguml_1_1common_1_1model_1_1diagram.html{Base class for all diagram models}]] {
+complete() const : bool [[[{Whether the diagram is complete.}]]]
{abstract} +context() const = 0 : inja::json [[[{context}]]]
+filter() const : const diagram_filter & [[[{filter}]]]
+finalize() : void [[[{Once the diagram is complete, run any final processing.}]]]
{abstract} +get() const = 0 : common::optional_ref<common::model::diagram_element> [[[{get}]]]
{abstract} +get() const = 0 : common::optional_ref<common::model::diagram_element> [[[{get}]]]
+get_with_namespace() const : common::optional_ref<common::model::diagram_element> [[[{get_with_namespace}]]]
+has_element() const : bool [[[{has_element}]]]
+name() const : std::string [[[{name}]]]
+set_complete() : void [[[{Set diagram in a complete state.}]]]
+set_filter() : void [[[{set_filter}]]]
+set_name() : void [[[{set_name}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
+should_include() const = deleted : bool [[[{should_include}]]]
+should_include() const : bool [[[{should_include}]]]
{abstract} +type() const = 0 : diagram_t [[[{Return type of the diagram.}]]]
__
-complete_ : bool [[[{complete_}]]]
-filter_ : std::unique_ptr<diagram_filter> [[[{filter_}]]]
-name_ : std::string [[[{name_}]]]
}
}
}
package [sequence_diagram] as C_0001521862840957629236 {
package [model] as C_0002206969880830639264 {
class "participant" as C_0001400215772842495226
class C_0001400215772842495226 [[structclanguml_1_1sequence__diagram_1_1model_1_1participant.html{Base class for various types of sequence diagram participants}]] {
+to_string() const : std::string [[[{Create a string representation of the participant}]]]
+type_name() const : std::string [[[{type_name}]]]
__
+stereotype_ : stereotype_t [[[{stereotype_}]]]
}
class "class_" as C_0000885514871619471610
class C_0000885514871619471610 [[structclanguml_1_1sequence__diagram_1_1model_1_1class__.html{Sequence diagram participant representing a class.}]] {
+full_name() const : std::string [[[{full_name}]]]
+full_name_no_ns() const : std::string [[[{full_name_no_ns}]]]
+is_abstract() const : bool [[[{Check if class is a abstract.}]]]
+is_alias() const : bool [[[{Check if class is a typedef/using alias.}]]]
+is_alias() : void [[[{Set whether the class is an alias}]]]
+is_lambda() const : bool [[[{Check if the class is lambda}]]]
+is_lambda() : void [[[{Set whether the class is a lambda.}]]]
+is_struct() const : bool [[[{Check if class is a struct.}]]]
+is_struct() : void [[[{Set whether the class is a struct.}]]]
+is_template() const : bool [[[{Check if class is a template.}]]]
+is_template() : void [[[{Set whether the class is a template instantiation.}]]]
+is_template_instantiation() const : bool [[[{Check if class is a template instantiation.}]]]
+is_template_instantiation() : void [[[{Set whether the class is a template instantiation.}]]]
+type_name() const : std::string [[[{type_name}]]]
__
-full_name_ : std::string [[[{full_name_}]]]
-is_alias_ : bool [[[{is_alias_}]]]
-is_lambda_ : bool [[[{is_lambda_}]]]
-is_struct_ : bool [[[{is_struct_}]]]
-is_template_ : bool [[[{is_template_}]]]
-is_template_instantiation_ : bool [[[{is_template_instantiation_}]]]
}
class "function" as C_0000232638456031681828
class C_0000232638456031681828 [[structclanguml_1_1sequence__diagram_1_1model_1_1function.html{Participant mode representing a free function.}]] {
+add_parameter() : void [[[{Add a function parameter}]]]
+full_name() const : std::string [[[{full_name}]]]
+full_name_no_ns() const : std::string [[[{full_name_no_ns}]]]
+is_const() const : bool [[[{Check if function is const}]]]
+is_const() : void [[[{Set whether the function is const}]]]
+is_operator() const : bool [[[{Check, if the method is an operator}]]]
+is_operator() : void [[[{Set whether the method is an operator}]]]
+is_static() const : bool [[[{Check, if the function is static}]]]
+is_static() : void [[[{Set whether the function is static}]]]
+is_void() const : bool [[[{Check, if the function has no return value}]]]
+is_void() : void [[[{Set whether the function has a return value}]]]
+message_name() const : std::string [[[{Render function name as message label}]]]
+parameters() const : const std::vector<std::string> & [[[{Get the list of function parameters}]]]
+return_type() : void [[[{Set functions return type}]]]
+return_type() const : const std::string & [[[{Get function return type}]]]
+type_name() const : std::string [[[{type_name}]]]
__
-is_const_ : bool [[[{is_const_}]]]
-is_operator_ : bool [[[{is_operator_}]]]
-is_static_ : bool [[[{is_static_}]]]
-is_void_ : bool [[[{is_void_}]]]
-parameters_ : std::vector<std::string> [[[{parameters_}]]]
-return_type_ : std::string [[[{return_type_}]]]
}
class "method" as C_0000817665972547784504
class C_0000817665972547784504 [[structclanguml_1_1sequence__diagram_1_1model_1_1method.html{Participant model representing a method}]] {
+alias() const : std::string [[[{Get the participant PlantUML alias}]]]
+class_full_name() const : const auto & [[[{Get the class full name.}]]]
+class_id() const : diagram_element::id_t [[[{Get the class id}]]]
+full_name() const : std::string [[[{full_name}]]]
+is_assignment() : void [[[{Set whether the method is an assignment operator}]]]
+is_assignment() const : bool [[[{Check, if the method is an assignment operator}]]]
+is_constructor() : void [[[{Set whether the method is a constructor}]]]
+is_constructor() const : bool [[[{Check, if the method is a constructor}]]]
+is_defaulted() : void [[[{Set whether the method is defaulted}]]]
+is_defaulted() const : bool [[[{Check, if the method is defaulted}]]]
+message_name() const : std::string [[[{message_name}]]]
+method_name() const : std::string [[[{Get method name}]]]
+set_class_full_name() : void [[[{Set full qualified name of the class}]]]
+set_class_id() : void [[[{Set the id of the participant to which this method belongs to.}]]]
+set_method_name() : void [[[{Set method name}]]]
+to_string() const : std::string [[[{Create a string representation of the participant}]]]
+type_name() const : std::string [[[{type_name}]]]
__
-class_full_name_ : std::string [[[{class_full_name_}]]]
-class_id_ : diagram_element::id_t [[[{class_id_}]]]
-is_assignment_ : bool [[[{is_assignment_}]]]
-is_constructor_ : bool [[[{is_constructor_}]]]
-is_defaulted_ : bool [[[{is_defaulted_}]]]
-method_name_ : std::string [[[{method_name_}]]]
}
class "function_template" as C_0002280191967493310558
class C_0002280191967493310558 [[structclanguml_1_1sequence__diagram_1_1model_1_1function__template.html{Participant model representing a function template.}]] {
+full_name() const : std::string [[[{full_name}]]]
+full_name_no_ns() const : std::string [[[{full_name_no_ns}]]]
+message_name() const : std::string [[[{Render function name as message label}]]]
+type_name() const : std::string [[[{type_name}]]]
__
}
class "message" as C_0002228653068706235818
class C_0002228653068706235818 [[classclanguml_1_1sequence__diagram_1_1model_1_1message.html{Model of a sequence diagram message.}]] {
+condition_text() : void [[[{Set condition text for block statements (e.g. if( <THIS  TEXT>))}]]]
+condition_text() const : std::optional<std::string> [[[{Get condition text}]]]
+from() const : common::model::diagram_element::id_t [[[{Get the id of source of message}]]]
+in_static_declaration_context() const : bool [[[{in_static_declaration_context}]]]
+in_static_declaration_context() : void [[[{in_static_declaration_context}]]]
+message_name() const : const std::string & [[[{Get the message label}]]]
+message_scope() const : common::model::message_scope_t [[[{Get message scope}]]]
+return_type() const : const std::string & [[[{Get the return message type label}]]]
+set_from() : void [[[{Set the id of message source participant}]]]
+set_message_name() : void [[[{Set the message label}]]]
+set_message_scope() : void [[[{Set message scope}]]]
+set_return_type() : void [[[{Set the return message type label}]]]
+set_to() : void [[[{Set the id of the message target}]]]
+set_type() : void [[[{Set message type}]]]
+to() const : common::model::diagram_element::id_t [[[{Get the id of the message target}]]]
+type() const : common::model::message_t [[[{Get message type}]]]
__
-condition_text_ : std::optional<std::string> [[[{condition_text_}]]]
-from_ : common::model::diagram_element::id_t [[[{from_}]]]
-in_static_declaration_context_ : bool [[[{in_static_declaration_context_}]]]
-message_name_ : std::string [[[{message_name_}]]]
-return_type_ : std::string [[[{return_type_}]]]
-scope_ : common::model::message_scope_t [[[{scope_}]]]
-to_ : common::model::diagram_element::id_t [[[{to_}]]]
-type_ : common::model::message_t [[[{type_}]]]
}
class "activity" as C_0000460030520790196523
class C_0000460030520790196523 [[classclanguml_1_1sequence__diagram_1_1model_1_1activity.html{Model of a sequence diagram activity}]] {
+add_message() : void [[[{Add a message call to the activity}]]]
+from() const : common::model::diagram_element::id_t [[[{Get the id of activity parent participant}]]]
+messages() : std::vector<message> & [[[{Get list of messages in the activity}]]]
+messages() const : const std::vector<message> & [[[{Get list of messages in the activity}]]]
__
-from_ : common::model::diagram_element::id_t [[[{from_}]]]
-messages_ : std::vector<message> [[[{messages_}]]]
}
class "diagram" as C_0000924044572035510976
class C_0000924044572035510976 [[classclanguml_1_1sequence__diagram_1_1model_1_1diagram.html{Model of a sequence diagram}]] {
+active_participants() const : const std::set<common::model::diagram_element::id_t> & [[[{Get all active participants in the diagram}]]]
+active_participants() : std::set<common::model::diagram_element::id_t> & [[[{Get all active participants in the diagram}]]]
+add_active_participant() : void [[[{Set participant with `id` as active}]]]
+add_block_message() : void [[[{Add block message to the current activity}]]]
+add_case_stmt_message() : void [[[{Add `switch` block `case` statement}]]]
+add_message() : void [[[{Add message to current activity}]]]
+add_participant() : void [[[{Add sequence diagram participant}]]]
+context() const : inja::json [[[{Return the elements JSON context for inja templates.}]]]
+end_block_message() : void [[[{End current block message}]]]
+finalize() : void [[[{Once the diagram is complete, run any final processing.}]]]
-fold_or_end_block_statement() const : void [[[{fold_or_end_block_statement}]]]
+get() const : common::optional_ref<common::model::diagram_element> [[[{Search for element in the diagram by fully qualified name.}]]]
+get() const : common::optional_ref<common::model::diagram_element> [[[{Search for element in the diagram by id.}]]]
+get_activity() : activity & [[[{Get reference to current activity of a participant}]]]
+get_activity() const : const activity & [[[{Get reference to current activity of a participant}]]]
+get_all_from_to_message_chains() const : std::vector<message_chain_t> [[[{Generate a list of message chains matching a from_to constraint}]]]
+get_from_activity_id() const : common::model::diagram_element::id_t [[[{Get id of a 'from' activity}]]]
+get_participant<T>() const : common::optional_ref<T>
+get_to_activity_id() const : common::model::diagram_element::id_t [[[{Get id of a 'to' activity}]]]
-is_begin_block_message() : bool [[[{is_begin_block_message}]]]
-is_end_block_message() : bool [[[{is_end_block_message}]]]
+list_from_values() const : std::vector<std::string> [[[{Get list of all possible 'from' values in the model}]]]
+list_to_values() const : std::vector<std::string> [[[{Get list of all possible 'to' values in the model}]]]
+participants() const : const std::map<common::model::diagram_element::id_t,std::unique_ptr<participant>> & [[[{Get map of all participants in the diagram}]]]
+participants() : std::map<common::model::diagram_element::id_t,std::unique_ptr<participant>> & [[[{Get map of all participants in the diagram}]]]
+print() const : void [[[{Debug method for printing entire diagram to console.}]]]
+sequences() const : const std::map<common::model::diagram_element::id_t,activity> & [[[{Get all sequences in the diagram}]]]
+sequences() : std::map<common::model::diagram_element::id_t,activity> & [[[{Get all sequences in the diagram}]]]
+should_include() const : bool [[[{Convenience `should_include` overload for participant}]]]
+to_alias() const : std::string [[[{Convert element full name to PlantUML alias.}]]]
+type() const : common::model::diagram_t [[[{Get the diagram model type - in this case sequence.}]]]
__
-active_participants_ : std::set<common::model::diagram_element::id_t> [[[{active_participants_}]]]
-participants_ : std::map<common::model::diagram_element::id_t,std::unique_ptr<participant>> [[[{participants_}]]]
-sequences_ : std::map<common::model::diagram_element::id_t,activity> [[[{sequences_}]]]
-started_ : bool [[[{started_}]]]
}
}
}
C_0001400215772842495226 <|-- C_0000885514871619471610
C_0001400215772842495226 <|-- C_0000232638456031681828
C_0000232638456031681828 <|-- C_0000817665972547784504
C_0000232638456031681828 <|-- C_0002280191967493310558
C_0002228653068706235818 o-- C_0001623832985137466228 : -type_
C_0002228653068706235818 o-- C_0000202859212831973510 : -scope_
C_0001073500714379115414 <|-- C_0002228653068706235818
C_0000460030520790196523 o-- C_0002228653068706235818 : -messages_
C_0000924044572035510976 o-- C_0000460030520790196523 : -sequences_
C_0000924044572035510976 o-- C_0001400215772842495226 : -participants_
C_0000197068985320835874 <|-- C_0000924044572035510976

'Generated with clang-uml, version 0.4.0-7-g8a6b497
'LLVM version Ubuntu clang version 16.0.6 (++20230710042027+7cbf1a259152-1~exp1~20230710162048.105)
@enduml
