<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2852px" preserveAspectRatio="none" style="width:7188px;height:2852px;" version="1.1" viewBox="0 0 7188 2852" width="7188px" zoomAndPan="magnify"><defs><filter height="300%" id="fwphukj57clkj" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[af0a7ff7db33a62256b72072a2c62cae]
class C_0001663594882877424244--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" target="_top" title="ExecutorWithPriorityImpl" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" xlink:show="new" xlink:title="ExecutorWithPriorityImpl" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="124.8281" id="C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.5;" width="858" x="6" y="1789.58"/><ellipse cx="306.25" cy="1805.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M309.2188,1811.2206 Q308.6406,1811.5175 308,1811.6581 Q307.3594,1811.8144 306.6563,1811.8144 Q304.1563,1811.8144 302.8281,1810.1738 Q301.5156,1808.5175 301.5156,1805.3925 Q301.5156,1802.2675 302.8281,1800.6113 Q304.1563,1798.955 306.6563,1798.955 Q307.3594,1798.955 308,1799.1113 Q308.6563,1799.2675 309.2188,1799.5644 L309.2188,1802.2831 Q308.5938,1801.705 308,1801.4394 Q307.4063,1801.1581 306.7813,1801.1581 Q305.4375,1801.1581 304.75,1802.2363 Q304.0625,1803.2988 304.0625,1805.3925 Q304.0625,1807.4863 304.75,1808.5644 Q305.4375,1809.6269 306.7813,1809.6269 Q307.4063,1809.6269 308,1809.3613 Q308.5938,1809.08 309.2188,1808.5019 L309.2188,1811.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="193" x="326.75" y="1809.7343">detail::ExecutorWithPriorityImpl</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="54" x="813" y="1786.58"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="52" x="814" y="1798.7187">Callback</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1821.58" y2="1821.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1829.58" y2="1829.58"/><ellipse cx="17" cy="1840.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="832" x="26" y="1843.7904">create(Executor::KeepAlive&lt;Executor&gt; executor, Callback &amp;&amp; callback) : Executor::KeepAlive&lt;ExecutorWithPriorityImpl&lt;std::decay_t&lt;Callback&gt;&gt;&gt;</text><ellipse cx="17" cy="1853.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="26" y="1856.5951">ExecutorWithPriorityImpl&lt;Callback&gt;(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : void</text><ellipse cx="17" cy="1866.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="547" x="26" y="1869.3998">operator=(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="1878.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="26" y="1882.2045">ExecutorWithPriorityImpl&lt;Callback&gt;(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : void</text><ellipse cx="17" cy="1891.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="522" x="26" y="1895.0092">operator=(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="1904.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="1907.8139">add(Func func) : void</text></a><!--MD5=[2031eb5f8f6622e1fb649add07766b1c]
class C_0002222099135672593686--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" target="_top" title="Executor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" xlink:show="new" xlink:title="Executor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="163.2422" id="C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.5;" width="477" x="925" y="1770.58"/><ellipse cx="1131.25" cy="1786.58" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1131.3594,1781.9238 L1130.2031,1787.0019 L1132.5313,1787.0019 L1131.3594,1781.9238 Z M1129.875,1779.6894 L1132.8594,1779.6894 L1136.2188,1792.08 L1133.7656,1792.08 L1133,1789.0175 L1129.7188,1789.0175 L1128.9688,1792.08 L1126.5313,1792.08 L1129.875,1779.6894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="56" x="1151.75" y="1790.7343">Executor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1802.58" y2="1802.58"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1808.58"/><ellipse cx="936" cy="1813.58" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="945" y="1816.7904">LO_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1821.3847"/><ellipse cx="936" cy="1826.3847" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="945" y="1829.5951">MID_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1834.1894"/><ellipse cx="936" cy="1839.1894" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="112" x="945" y="1842.3998">HI_PRI : const int8_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1848.9941" y2="1848.9941"/><ellipse cx="936" cy="1859.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="945" y="1863.2045">~Executor() : void</text><ellipse cx="936" cy="1872.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="945" y="1876.0092">add(Func ) = 0 : void</text><ellipse cx="936" cy="1885.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="945" y="1888.8139">addWithPriority(Func , int8_t priority) : void</text><ellipse cx="936" cy="1898.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="945" y="1901.6186">getNumPriorities() const : uint8_t</text><ellipse cx="936" cy="1911.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="447" x="945" y="1914.4233">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT * executor) : KeepAlive&lt;ExecutorT&gt;</text><ellipse cx="936" cy="1924.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="451" x="945" y="1927.2279">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT &amp; executor) : KeepAlive&lt;ExecutorT&gt;</text><!--MD5=[eac2427df85742fb1d237bf28f3b9ebb]
class C_0001968432200878677255--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" target="_top" title="QueuedImmediateExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" xlink:show="new" xlink:title="QueuedImmediateExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="73.6094" id="C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="1851.5" y="141.08"/><ellipse cx="1893.5" cy="157.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1896.4688,162.7206 Q1895.8906,163.0175 1895.25,163.1581 Q1894.6094,163.3144 1893.9063,163.3144 Q1891.4063,163.3144 1890.0781,161.6737 Q1888.7656,160.0175 1888.7656,156.8925 Q1888.7656,153.7675 1890.0781,152.1112 Q1891.4063,150.455 1893.9063,150.455 Q1894.6094,150.455 1895.25,150.6112 Q1895.9063,150.7675 1896.4688,151.0644 L1896.4688,153.7831 Q1895.8438,153.205 1895.25,152.9394 Q1894.6563,152.6581 1894.0313,152.6581 Q1892.6875,152.6581 1892,153.7362 Q1891.3125,154.7987 1891.3125,156.8925 Q1891.3125,158.9862 1892,160.0644 Q1892.6875,161.1269 1894.0313,161.1269 Q1894.6563,161.1269 1895.25,160.8612 Q1895.8438,160.58 1896.4688,160.0019 L1896.4688,162.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="169" x="1913.5" y="161.2343">QueuedImmediateExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1852.5" x2="2111.5" y1="173.08" y2="173.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1852.5" x2="2111.5" y1="181.08" y2="181.08"/><ellipse cx="1862.5" cy="192.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="1871.5" y="195.2904">instance() : QueuedImmediateExecutor &amp;</text><ellipse cx="1862.5" cy="204.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1871.5" y="208.0951">add(Func callback) : void</text></a><!--MD5=[e39d5cb1daa64537bcdef5f48ceb7e5e]
class C_0000481841646641149488--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" target="_top" title="DrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" xlink:show="new" xlink:title="DrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="73.6094" id="C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.5;" width="229" x="1867.5" y="250.08"/><ellipse cx="1924.75" cy="266.08" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1924.8594,261.4237 L1923.7031,266.5019 L1926.0313,266.5019 L1924.8594,261.4237 Z M1923.375,259.1894 L1926.3594,259.1894 L1929.7188,271.58 L1927.2656,271.58 L1926.5,268.5175 L1923.2188,268.5175 L1922.4688,271.58 L1920.0313,271.58 L1923.375,259.1894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="1945.25" y="270.2343">DrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1868.5" x2="2095.5" y1="282.08" y2="282.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1868.5" x2="2095.5" y1="290.08" y2="290.08"/><ellipse cx="1878.5" cy="301.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1887.5" y="304.2904">~DrivableExecutor() = default : void</text><ellipse cx="1878.5" cy="313.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1887.5" y="317.0951">drive() = 0 : void</text></a><!--MD5=[533c44690536949bf73673dd85860041]
class C_0000769434624932181431--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" target="_top" title="TimedDrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" xlink:show="new" xlink:title="TimedDrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="214.4609" id="C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.5;" width="589" x="2908" y="20.08"/><ellipse cx="3127.25" cy="36.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3130.2188,41.7206 Q3129.6406,42.0175 3129,42.1581 Q3128.3594,42.3144 3127.6563,42.3144 Q3125.1563,42.3144 3123.8281,40.6737 Q3122.5156,39.0175 3122.5156,35.8925 Q3122.5156,32.7675 3123.8281,31.1112 Q3125.1563,29.455 3127.6563,29.455 Q3128.3594,29.455 3129,29.6112 Q3129.6563,29.7675 3130.2188,30.0644 L3130.2188,32.7831 Q3129.5938,32.205 3129,31.9394 Q3128.4063,31.6581 3127.7813,31.6581 Q3126.4375,31.6581 3125.75,32.7362 Q3125.0625,33.7987 3125.0625,35.8925 Q3125.0625,37.9862 3125.75,39.0644 Q3126.4375,40.1269 3127.7813,40.1269 Q3128.4063,40.1269 3129,39.8612 Q3129.5938,39.58 3130.2188,39.0019 L3130.2188,41.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="3147.75" y="40.2343">TimedDrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2909" x2="3496" y1="52.08" y2="52.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2909" x2="3496" y1="60.08" y2="60.08"/><ellipse cx="2919" cy="71.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2928" y="74.2904">TimedDrivableExecutor() : void</text><ellipse cx="2919" cy="83.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="2928" y="87.0951">~TimedDrivableExecutor() : void</text><ellipse cx="2919" cy="96.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2928" y="99.8998">drive() : void</text><ellipse cx="2919" cy="109.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2928" y="112.7045">try_drive() : bool</text><ellipse cx="2919" cy="122.2987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2928" y="125.5092">add(Func ) : void</text><ellipse cx="2919" cy="135.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2928" y="138.3139">run() : size_t</text><ellipse cx="2919" cy="147.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2928" y="151.1186">drain() : size_t</text><ellipse cx="2919" cy="160.7128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2928" y="163.9233">wait() : void</text><ellipse cx="2919" cy="173.5175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2928" y="176.7279">try_wait() : bool</text><ellipse cx="2919" cy="186.3222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="2928" y="189.5326">try_drive_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2919" cy="199.1269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="563" x="2928" y="202.3373">try_drive_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text><ellipse cx="2919" cy="211.9316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="2928" y="215.142">try_wait_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2919" cy="224.7362" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="558" x="2928" y="227.9467">try_wait_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text></a><!--MD5=[b291e34916abaf3d21badf1de86aae69]
class C_0002145523347961259416--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" target="_top" title="IOExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" xlink:show="new" xlink:title="IOExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="73.6094" id="C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="4114.5" y="340.08"/><ellipse cx="4185.25" cy="356.08" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4185.3594,351.4237 L4184.2031,356.5019 L4186.5313,356.5019 L4185.3594,351.4237 Z M4183.875,349.1894 L4186.8594,349.1894 L4190.2188,361.58 L4187.7656,361.58 L4187,358.5175 L4183.7188,358.5175 L4182.9688,361.58 L4180.5313,361.58 L4183.875,349.1894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="4205.75" y="360.2343">IOExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4115.5" x2="4331.5" y1="372.08" y2="372.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4115.5" x2="4331.5" y1="380.08" y2="380.08"/><ellipse cx="4125.5" cy="391.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="4134.5" y="394.2904">~IOExecutor() = default : void</text><ellipse cx="4125.5" cy="403.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="192" x="4134.5" y="407.0951">getEventBase() = 0 : EventBase *</text></a><!--MD5=[bdef50c016f6dbeac54a3e0ea6a4bc7d]
class C_0001347291497865252100--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" target="_top" title="DefaultKeepAliveExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" xlink:show="new" xlink:title="DefaultKeepAliveExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="73.6094" id="C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.5;" width="222" x="3091.5" y="2252.08"/><ellipse cx="3120.45" cy="2268.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3123.4188,2273.7206 Q3122.8406,2274.0175 3122.2,2274.1581 Q3121.5594,2274.3144 3120.8563,2274.3144 Q3118.3563,2274.3144 3117.0281,2272.6738 Q3115.7156,2271.0175 3115.7156,2267.8925 Q3115.7156,2264.7675 3117.0281,2263.1113 Q3118.3563,2261.455 3120.8563,2261.455 Q3121.5594,2261.455 3122.2,2261.6113 Q3122.8563,2261.7675 3123.4188,2262.0644 L3123.4188,2264.7831 Q3122.7938,2264.205 3122.2,2263.9394 Q3121.6063,2263.6581 3120.9813,2263.6581 Q3119.6375,2263.6581 3118.95,2264.7363 Q3118.2625,2265.7988 3118.2625,2267.8925 Q3118.2625,2269.9863 3118.95,2271.0644 Q3119.6375,2272.1269 3120.9813,2272.1269 Q3121.6063,2272.1269 3122.2,2271.8613 Q3122.7938,2271.58 3123.4188,2271.0019 L3123.4188,2273.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="159" x="3137.55" y="2272.2343">DefaultKeepAliveExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3092.5" x2="3312.5" y1="2284.08" y2="2284.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3092.5" x2="3312.5" y1="2292.08" y2="2292.08"/><ellipse cx="3102.5" cy="2303.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3111.5" y="2306.2904">~DefaultKeepAliveExecutor() : void</text><ellipse cx="3102.5" cy="2315.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3111.5" y="2319.0951">weakRef() : Executor::KeepAlive&lt;&gt;</text></a><!--MD5=[343663e47d76253bb0dfc7fb21c3ae29]
class C_0001932117148827315960--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" target="_top" title="DefaultKeepAliveExecutor##WeakRef" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" xlink:show="new" xlink:title="DefaultKeepAliveExecutor##WeakRef" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="99.2188" id="C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1691.5" y="2297.58"/><ellipse cx="1867.25" cy="2313.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1870.2188,2319.2206 Q1869.6406,2319.5175 1869,2319.6581 Q1868.3594,2319.8144 1867.6563,2319.8144 Q1865.1563,2319.8144 1863.8281,2318.1738 Q1862.5156,2316.5175 1862.5156,2313.3925 Q1862.5156,2310.2675 1863.8281,2308.6113 Q1865.1563,2306.955 1867.6563,2306.955 Q1868.3594,2306.955 1869,2307.1113 Q1869.6563,2307.2675 1870.2188,2307.5644 L1870.2188,2310.2831 Q1869.5938,2309.705 1869,2309.4394 Q1868.4063,2309.1581 1867.7813,2309.1581 Q1866.4375,2309.1581 1865.75,2310.2363 Q1865.0625,2311.2988 1865.0625,2313.3925 Q1865.0625,2315.4863 1865.75,2316.5644 Q1866.4375,2317.6269 1867.7813,2317.6269 Q1868.4063,2317.6269 1869,2317.3613 Q1869.5938,2317.08 1870.2188,2316.5019 L1870.2188,2319.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="221" x="1887.75" y="2317.7343">DefaultKeepAliveExecutor::WeakRef</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1692.5" x2="2271.5" y1="2329.58" y2="2329.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1692.5" x2="2271.5" y1="2337.58" y2="2337.58"/><ellipse cx="1702.5" cy="2348.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="555" x="1711.5" y="2351.7904">create(std::shared_ptr&lt;ControlBlock&gt; controlBlock, Executor * executor) : Executor::KeepAlive&lt;&gt;</text><ellipse cx="1702.5" cy="2361.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1711.5" y="2364.5951">add(Func f) : void</text><ellipse cx="1702.5" cy="2374.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1711.5" y="2377.3998">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="1702.5" cy="2386.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1711.5" y="2390.2045">getNumPriorities() const : uint8_t</text></a><!--MD5=[b5e014653e631123d50dd7debc45a978]
class C_0002292058893312396804--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" target="_top" title="ThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" xlink:show="new" xlink:title="ThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="291.2891" id="C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.5;" width="823" x="3812" y="2061.58"/><ellipse cx="4156.25" cy="2077.58" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4156.3594,2072.9238 L4155.2031,2078.0019 L4157.5313,2078.0019 L4156.3594,2072.9238 Z M4154.875,2070.6894 L4157.8594,2070.6894 L4161.2188,2083.08 L4158.7656,2083.08 L4158,2080.0175 L4154.7188,2080.0175 L4153.9688,2083.08 L4151.5313,2083.08 L4154.875,2070.6894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126" x="4176.75" y="2081.7343">ThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3813" x2="4634" y1="2093.58" y2="2093.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3813" x2="4634" y1="2101.58" y2="2101.58"/><ellipse cx="3823" cy="2112.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="797" x="3832" y="2115.7904">ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory, bool isWaitForAll = false) : void</text><ellipse cx="3823" cy="2125.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3832" y="2128.5951">~ThreadPoolExecutor() : void</text><ellipse cx="3823" cy="2138.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="3832" y="2141.3998">add(Func func) = 0 : void</text><ellipse cx="3823" cy="2150.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="3832" y="2154.2045">add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void</text><ellipse cx="3823" cy="2163.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="3832" y="2167.0092">setThreadFactory(std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="3823" cy="2176.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="3832" y="2179.8139">getThreadFactory() const : std::shared_ptr&lt;ThreadFactory&gt;</text><ellipse cx="3823" cy="2189.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3832" y="2192.6186">numThreads() const : size_t</text><ellipse cx="3823" cy="2202.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3832" y="2205.4233">setNumThreads(size_t numThreads) : void</text><ellipse cx="3823" cy="2215.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3832" y="2218.2279">numActiveThreads() const : size_t</text><ellipse cx="3823" cy="2227.8222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3832" y="2231.0326">stop() : void</text><ellipse cx="3823" cy="2240.6269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3832" y="2243.8373">join() : void</text><ellipse cx="3823" cy="2253.4316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="332" x="3832" y="2256.642">withAll(FunctionRef&lt;void (ThreadPoolExecutor &amp;)&gt; f) : void</text><ellipse cx="3823" cy="2266.2363" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3832" y="2269.4467">getPoolStats() const : ThreadPoolExecutor::PoolStats</text><ellipse cx="3823" cy="2279.0409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3832" y="2282.2514">getPendingTaskCount() const : size_t</text><ellipse cx="3823" cy="2291.8456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3832" y="2295.0561">getName() const : const std::string &amp;</text><ellipse cx="3823" cy="2304.6503" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="3832" y="2307.8608">subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void</text><ellipse cx="3823" cy="2317.455" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3832" y="2320.6654">addObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3823" cy="2330.2597" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3832" y="2333.4701">removeObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3823" cy="2343.0644" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3832" y="2346.2748">setThreadDeathTimeout(std::chrono::milliseconds timeout) : void</text></a><!--MD5=[946b31b7442aaf60dac9cea044c2bbbe]
class C_0001740134810840364719--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" target="_top" title="CPUThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" xlink:show="new" xlink:title="CPUThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="240.0703" id="C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.5;" width="1385" x="4766" y="2068.08"/><ellipse cx="5378.75" cy="2084.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5381.7188,2089.7206 Q5381.1406,2090.0175 5380.5,2090.1581 Q5379.8594,2090.3144 5379.1563,2090.3144 Q5376.6563,2090.3144 5375.3281,2088.6738 Q5374.0156,2087.0175 5374.0156,2083.8925 Q5374.0156,2080.7675 5375.3281,2079.1113 Q5376.6563,2077.455 5379.1563,2077.455 Q5379.8594,2077.455 5380.5,2077.6113 Q5381.1563,2077.7675 5381.7188,2078.0644 L5381.7188,2080.7831 Q5381.0938,2080.205 5380.5,2079.9394 Q5379.9063,2079.6581 5379.2813,2079.6581 Q5377.9375,2079.6581 5377.25,2080.7363 Q5376.5625,2081.7988 5376.5625,2083.8925 Q5376.5625,2085.9863 5377.25,2087.0644 Q5377.9375,2088.1269 5379.2813,2088.1269 Q5379.9063,2088.1269 5380.5,2087.8613 Q5381.0938,2087.58 5381.7188,2087.0019 L5381.7188,2089.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="151" x="5399.25" y="2088.2343">CPUThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4767" x2="6150" y1="2100.08" y2="2100.08"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4772" y="2106.08"/><ellipse cx="4777" cy="2111.08" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="207" x="4786" y="2114.2904">kDefaultMaxQueueSize : const size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4767" x2="6150" y1="2120.8847" y2="2120.8847"/><ellipse cx="4777" cy="2131.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1257" x="4786" y="2135.0951">CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2144.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="4786" y="2147.8998">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2157.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4786" y="2160.7045">CPUThreadPoolExecutor(size_t numThreads) : void</text><ellipse cx="4777" cy="2170.2988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="4786" y="2173.5092">CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4777" cy="2183.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="666" x="4786" y="2186.3139">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4777" cy="2195.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1047" x="4786" y="2199.1186">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2208.7128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4786" y="2211.9233">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2221.5175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4786" y="2224.7279">~CPUThreadPoolExecutor() : void</text><ellipse cx="4777" cy="2234.3222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4786" y="2237.5326">add(Func func) : void</text><ellipse cx="4777" cy="2247.1269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4786" y="2250.3373">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4777" cy="2259.9316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4786" y="2263.142">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="4777" cy="2272.7363" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="4786" y="2275.9467">add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4777" cy="2285.5409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="4786" y="2288.7514">getTaskQueueSize() const : size_t</text><ellipse cx="4777" cy="2298.3456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4786" y="2301.5561">getNumPriorities() const : uint8_t</text><!--MD5=[de9d69c684837cdd83d5314dbeaaea39]
class C_0001218209673148292552--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" target="_top" title="ScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" xlink:show="new" xlink:title="ScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="124.8281" id="C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.5;" width="425" x="1769.5" y="628.58"/><ellipse cx="1916.75" cy="644.58" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1916.8594,639.9237 L1915.7031,645.0019 L1918.0313,645.0019 L1916.8594,639.9237 Z M1915.375,637.6894 L1918.3594,637.6894 L1921.7188,650.08 L1919.2656,650.08 L1918.5,647.0175 L1915.2188,647.0175 L1914.4688,650.08 L1912.0313,650.08 L1915.375,637.6894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="1937.25" y="648.7343">ScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1770.5" x2="2193.5" y1="660.58" y2="660.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1770.5" x2="2193.5" y1="668.58" y2="668.58"/><ellipse cx="1780.5" cy="679.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1789.5" y="682.7904">~ScheduledExecutor() = default : void</text><ellipse cx="1780.5" cy="692.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="1789.5" y="695.5951">add(Func ) = 0 : void</text><ellipse cx="1780.5" cy="705.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1789.5" y="708.3998">schedule(Func &amp;&amp; a) : void</text><ellipse cx="1780.5" cy="717.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1789.5" y="721.2045">schedule(Func &amp;&amp; a, const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="1780.5" cy="730.7987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="1789.5" y="734.0092">scheduleAt(Func &amp;&amp; , const ScheduledExecutor::TimePoint &amp; ) : void</text><ellipse cx="1780.5" cy="743.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1789.5" y="746.8139">now() : ScheduledExecutor::TimePoint</text></a><!--MD5=[e43e6b0f73d65f42e1986cd71f7d317c]
class C_0000155178671636628489--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" target="_top" title="SequencedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" xlink:show="new" xlink:title="SequencedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="60.8047" id="C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.5;" width="190" x="1887" y="975.58"/><ellipse cx="1916.4" cy="991.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1919.3688,997.2206 Q1918.7906,997.5175 1918.15,997.6581 Q1917.5094,997.8144 1916.8063,997.8144 Q1914.3063,997.8144 1912.9781,996.1737 Q1911.6656,994.5175 1911.6656,991.3925 Q1911.6656,988.2675 1912.9781,986.6112 Q1914.3063,984.955 1916.8063,984.955 Q1917.5094,984.955 1918.15,985.1112 Q1918.8063,985.2675 1919.3688,985.5644 L1919.3688,988.2831 Q1918.7438,987.705 1918.15,987.4394 Q1917.5563,987.1581 1916.9313,987.1581 Q1915.5875,987.1581 1914.9,988.2362 Q1914.2125,989.2987 1914.2125,991.3925 Q1914.2125,993.4862 1914.9,994.5644 Q1915.5875,995.6269 1916.9313,995.6269 Q1917.5563,995.6269 1918.15,995.3612 Q1918.7438,995.08 1919.3688,994.5019 L1919.3688,997.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="126" x="1933.6" y="995.7343">SequencedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1888" x2="2076" y1="1007.58" y2="1007.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1888" x2="2076" y1="1015.58" y2="1015.58"/><ellipse cx="1898" cy="1026.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1907" y="1029.7904">~SequencedExecutor() : void</text></a><!--MD5=[411d68fd5f298e02cc7be27b9b9671fb]
class C_0001970350906198958245--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135" target="_top" title="EventBase" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135" xlink:show="new" xlink:title="EventBase" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="829.0859" id="C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.5;" width="895" x="6282" y="7.58"/><ellipse cx="6692.25" cy="23.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6695.2188,29.2206 Q6694.6406,29.5175 6694,29.6581 Q6693.3594,29.8144 6692.6563,29.8144 Q6690.1563,29.8144 6688.8281,28.1737 Q6687.5156,26.5175 6687.5156,23.3925 Q6687.5156,20.2675 6688.8281,18.6112 Q6690.1563,16.955 6692.6563,16.955 Q6693.3594,16.955 6694,17.1112 Q6694.6563,17.2675 6695.2188,17.5644 L6695.2188,20.2831 Q6694.5938,19.705 6694,19.4394 Q6693.4063,19.1581 6692.7813,19.1581 Q6691.4375,19.1581 6690.75,20.2362 Q6690.0625,21.2987 6690.0625,23.3925 Q6690.0625,25.4862 6690.75,26.5644 Q6691.4375,27.6269 6692.7813,27.6269 Q6693.4063,27.6269 6694,27.3612 Q6694.5938,27.08 6695.2188,26.5019 L6695.2188,29.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="6712.75" y="27.7343">EventBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6283" x2="7176" y1="39.58" y2="39.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6283" x2="7176" y1="47.58" y2="47.58"/><ellipse cx="6293" cy="58.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="6302" y="61.7904">EventBase(std::chrono::milliseconds tickInterval) : void</text><ellipse cx="6293" cy="71.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="6302" y="74.5951">EventBase() : void</text><ellipse cx="6293" cy="84.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6302" y="87.3998">EventBase(bool enableTimeMeasurement) : void</text><ellipse cx="6293" cy="96.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="6302" y="100.2045">EventBase(const EventBase &amp; ) : void</text><ellipse cx="6293" cy="109.7987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="6302" y="113.0092">operator=(const EventBase &amp; ) : EventBase &amp;</text><ellipse cx="6293" cy="122.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="6302" y="125.8139">EventBase(event_base * evb, bool enableTimeMeasurement = true) : void</text><ellipse cx="6293" cy="135.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="6302" y="138.6186">EventBase(EventBase::Options options) : void</text><ellipse cx="6293" cy="148.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="6302" y="151.4233">~EventBase() : void</text><ellipse cx="6293" cy="161.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="6302" y="164.2279">loop() : bool</text><ellipse cx="6293" cy="173.8222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="6302" y="177.0326">loopIgnoreKeepAlive() : bool</text><ellipse cx="6293" cy="186.6269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="6302" y="189.8373">loopOnce(int flags = 0) : bool</text><ellipse cx="6293" cy="199.4316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="6302" y="202.642">loopForever() : void</text><ellipse cx="6293" cy="212.2362" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="6302" y="215.4467">terminateLoopSoon() : void</text><ellipse cx="6293" cy="225.0409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="869" x="6302" y="228.2514">runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr&lt;RequestContext&gt; rctx = RequestContext::saveContext()) : void</text><ellipse cx="6293" cy="237.8456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="6302" y="241.0561">runInLoop(EventBase::Func c, bool thisIteration = false) : void</text><ellipse cx="6293" cy="250.6503" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="6302" y="253.8608">runOnDestruction(EventBase::OnDestructionCallback &amp; callback) : void</text><ellipse cx="6293" cy="263.455" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="6302" y="266.6654">runOnDestruction(EventBase::Func f) : void</text><ellipse cx="6293" cy="276.2597" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="6302" y="279.4701">runBeforeLoop(EventBase::LoopCallback * callback) : void</text><ellipse cx="6293" cy="289.0644" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="6302" y="292.2748">runInEventBaseThread(EventBase::Func fn) : void</text><ellipse cx="6293" cy="301.8691" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="6302" y="305.0795">runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void</text><ellipse cx="6293" cy="314.6737" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="6302" y="317.8842">runInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="6293" cy="327.4784" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="6302" y="330.6889">runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="6293" cy="340.2831" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="6302" y="343.4936">setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void</text><ellipse cx="6293" cy="353.0878" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="6302" y="356.2983">setLoadAvgMsec(std::chrono::milliseconds ms) : void</text><ellipse cx="6293" cy="365.8925" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="6302" y="369.1029">resetLoadAvg(double value = 0.0) : void</text><ellipse cx="6293" cy="378.6972" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="6302" y="381.9076">getAvgLoopTime() const : double</text><ellipse cx="6293" cy="391.5019" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="6302" y="394.7123">isRunning() const : bool</text><ellipse cx="6293" cy="404.3066" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6302" y="407.517">waitUntilRunning() : void</text><ellipse cx="6293" cy="417.1112" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="6302" y="420.3217">getNotificationQueueSize() const : size_t</text><ellipse cx="6293" cy="429.9159" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="6302" y="433.1264">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="6293" cy="442.7206" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6302" y="445.9311">isInEventBaseThread() const : bool</text><ellipse cx="6293" cy="455.5253" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="6302" y="458.7358">inRunningEventBaseThread() const : bool</text><ellipse cx="6293" cy="468.33" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="6302" y="471.5404">checkIsInEventBaseThread() const : void</text><ellipse cx="6293" cy="481.1347" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="6302" y="484.3451">dcheckIsInEventBaseThread() const : void</text><ellipse cx="6293" cy="493.9394" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="6302" y="497.1498">timer() : HHWheelTimer &amp;</text><ellipse cx="6293" cy="506.7441" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="6302" y="509.9545">getBackend() : EventBaseBackendBase *</text><ellipse cx="6293" cy="519.5487" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="6302" y="522.7592">getLibeventBase() const : event_base *</text><ellipse cx="6293" cy="532.3534" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="6302" y="535.5639">getLibeventVersion() : const char *</text><ellipse cx="6293" cy="545.1581" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="6302" y="548.3686">getLibeventMethod() : const char *</text><ellipse cx="6293" cy="557.9628" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="6302" y="561.1733">bumpHandlingTime() : void</text><ellipse cx="6293" cy="570.7675" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="6302" y="573.9779">setObserver(const std::shared_ptr&lt;EventBaseObserver&gt; &amp; observer) : void</text><ellipse cx="6293" cy="583.5722" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="6302" y="586.7826">getObserver() : const std::shared_ptr&lt;EventBaseObserver&gt; &amp;</text><ellipse cx="6293" cy="596.3769" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="6302" y="599.5873">setExecutionObserver(ExecutionObserver * observer) : void</text><ellipse cx="6293" cy="609.1816" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="6302" y="612.392">getExecutionObserver() : ExecutionObserver *</text><ellipse cx="6293" cy="621.9862" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="6302" y="625.1967">setName(const std::string &amp; name) : void</text><ellipse cx="6293" cy="634.7909" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="6302" y="638.0014">getName() : const std::string &amp;</text><ellipse cx="6293" cy="647.5956" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="6302" y="650.8061">add(Cob fn) : void</text><ellipse cx="6293" cy="660.4003" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="6302" y="663.6108">drive() : void</text><ellipse cx="6293" cy="673.205" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="6302" y="676.4154">scheduleAt(EventBase::Func &amp;&amp; fn, const ScheduledExecutor::TimePoint &amp; timeout) : void</text><ellipse cx="6293" cy="686.0097" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="6302" y="689.2201">attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void</text><ellipse cx="6293" cy="698.8144" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="6302" y="702.0248">detachTimeoutManager(AsyncTimeout * obj) : void</text><ellipse cx="6293" cy="711.6191" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="6302" y="714.8295">scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool</text><ellipse cx="6293" cy="724.4237" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="6302" y="727.6342">cancelTimeout(AsyncTimeout * obj) : void</text><ellipse cx="6293" cy="737.2284" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6302" y="740.4389">isInTimeoutManagerThread() : bool</text><ellipse cx="6293" cy="750.0331" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="6302" y="753.2436">getVirtualEventBase() : VirtualEventBase &amp;</text><ellipse cx="6293" cy="762.8378" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="6302" y="766.0483">getEventBase() : EventBase *</text><ellipse cx="6293" cy="775.6425" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="6302" y="778.8529">getDefaultBackend() : std::unique_ptr&lt;EventBaseBackendBase&gt;</text><ellipse cx="6293" cy="788.4472" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="6302" y="791.6576">runInEventBaseThread&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="801.2519" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="6302" y="804.4623">runInEventBaseThreadAlwaysEnqueue&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="814.0566" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="6302" y="817.267">runInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="826.8612" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="6302" y="830.0717">runImmediatelyOrRunInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text></a><!--MD5=[3945712266c557f24486d79132d211c5]
class C_0000260170505900481834--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" target="_top" title="IOThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" xlink:show="new" xlink:title="IOThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="150.4375" id="C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.5;" width="1525" x="4696" y="520.08"/><ellipse cx="5385.25" cy="536.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5388.2188,541.7206 Q5387.6406,542.0175 5387,542.1581 Q5386.3594,542.3144 5385.6563,542.3144 Q5383.1563,542.3144 5381.8281,540.6737 Q5380.5156,539.0175 5380.5156,535.8925 Q5380.5156,532.7675 5381.8281,531.1112 Q5383.1563,529.455 5385.6563,529.455 Q5386.3594,529.455 5387,529.6112 Q5387.6563,529.7675 5388.2188,530.0644 L5388.2188,532.7831 Q5387.5938,532.205 5387,531.9394 Q5386.4063,531.6581 5385.7813,531.6581 Q5384.4375,531.6581 5383.75,532.7362 Q5383.0625,533.7987 5383.0625,535.8925 Q5383.0625,537.9862 5383.75,539.0644 Q5384.4375,540.1269 5385.7813,540.1269 Q5386.4063,540.1269 5387,539.8612 Q5387.5938,539.58 5388.2188,539.0019 L5388.2188,541.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="5405.75" y="540.2343">IOThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4697" x2="6220" y1="552.08" y2="552.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4697" x2="6220" y1="560.08" y2="560.08"/><ellipse cx="4707" cy="571.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1388" x="4716" y="574.2904">IOThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4707" cy="583.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1499" x="4716" y="587.0951">IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4707" cy="596.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4716" y="599.8998">~IOThreadPoolExecutor() : void</text><ellipse cx="4707" cy="609.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4716" y="612.7045">add(Func func) : void</text><ellipse cx="4707" cy="622.2987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4716" y="625.5092">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4707" cy="635.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="4716" y="638.3139">getEventBase() : EventBase *</text><ellipse cx="4707" cy="647.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="382" x="4716" y="651.1186">getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *</text><ellipse cx="4707" cy="660.7128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="4716" y="663.9233">getEventBaseManager() : EventBaseManager *</text></a><!--MD5=[88ae743009cf121755e429a0e099ad9e]
class C_0002235860541734359952--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" target="_top" title="ManualExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" xlink:show="new" xlink:title="ManualExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="240.0703" id="C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.5;" width="426" x="2989.5" y="512.08"/><ellipse cx="3148.25" cy="528.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3151.2188,533.7206 Q3150.6406,534.0175 3150,534.1581 Q3149.3594,534.3144 3148.6563,534.3144 Q3146.1563,534.3144 3144.8281,532.6737 Q3143.5156,531.0175 3143.5156,527.8925 Q3143.5156,524.7675 3144.8281,523.1112 Q3146.1563,521.455 3148.6563,521.455 Q3149.3594,521.455 3150,521.6112 Q3150.6563,521.7675 3151.2188,522.0644 L3151.2188,524.7831 Q3150.5938,524.205 3150,523.9394 Q3149.4063,523.6581 3148.7813,523.6581 Q3147.4375,523.6581 3146.75,524.7362 Q3146.0625,525.7987 3146.0625,527.8925 Q3146.0625,529.9862 3146.75,531.0644 Q3147.4375,532.1269 3148.7813,532.1269 Q3149.4063,532.1269 3150,531.8612 Q3150.5938,531.58 3151.2188,531.0019 L3151.2188,533.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="3168.75" y="532.2343">ManualExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2990.5" x2="3414.5" y1="544.08" y2="544.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2990.5" x2="3414.5" y1="552.08" y2="552.08"/><ellipse cx="3000.5" cy="563.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3009.5" y="566.2904">~ManualExecutor() : void</text><ellipse cx="3000.5" cy="575.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3009.5" y="579.0951">add(Func ) : void</text><ellipse cx="3000.5" cy="588.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3009.5" y="591.8998">run() : size_t</text><ellipse cx="3000.5" cy="601.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3009.5" y="604.7045">drain() : size_t</text><ellipse cx="3000.5" cy="614.2987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="3009.5" y="617.5092">wait() : void</text><ellipse cx="3000.5" cy="627.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3009.5" y="630.3139">makeProgress() : void</text><ellipse cx="3000.5" cy="639.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3009.5" y="643.1186">drive() : void</text><ellipse cx="3000.5" cy="652.7128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="3009.5" y="655.9233">scheduleAt(Func &amp;&amp; f, const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="3000.5" cy="665.5175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="3009.5" y="668.7279">advance(const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="3000.5" cy="678.3222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="3009.5" y="681.5326">advanceTo(const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="3000.5" cy="691.1269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="3009.5" y="694.3373">now() : ScheduledExecutor::TimePoint</text><ellipse cx="3000.5" cy="703.9316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3009.5" y="707.142">clear() : std::size_t</text><ellipse cx="3000.5" cy="716.7362" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3009.5" y="719.9467">keepAliveAcquire() : bool</text><ellipse cx="3000.5" cy="729.5409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3009.5" y="732.7514">keepAliveRelease() : void</text><ellipse cx="3000.5" cy="742.3456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="3009.5" y="745.5561">waitFor&lt;F&gt;(const F &amp; f) : void</text></a><!--MD5=[86bf37f6e210254ac551127751e3ab47]
class C_0001956570166673420631--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" target="_top" title="MeteredExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" xlink:show="new" xlink:title="MeteredExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="112.0234" id="C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.5;" width="378" x="4034.5" y="2478.08"/><ellipse cx="4165.75" cy="2494.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4168.7188,2499.7206 Q4168.1406,2500.0175 4167.5,2500.1581 Q4166.8594,2500.3144 4166.1563,2500.3144 Q4163.6563,2500.3144 4162.3281,2498.6738 Q4161.0156,2497.0175 4161.0156,2493.8925 Q4161.0156,2490.7675 4162.3281,2489.1113 Q4163.6563,2487.455 4166.1563,2487.455 Q4166.8594,2487.455 4167.5,2487.6113 Q4168.1563,2487.7675 4168.7188,2488.0644 L4168.7188,2490.7831 Q4168.0938,2490.205 4167.5,2489.9394 Q4166.9063,2489.6581 4166.2813,2489.6581 Q4164.9375,2489.6581 4164.25,2490.7363 Q4163.5625,2491.7988 4163.5625,2493.8925 Q4163.5625,2495.9863 4164.25,2497.0644 Q4164.9375,2498.1269 4166.2813,2498.1269 Q4166.9063,2498.1269 4167.5,2497.8613 Q4168.0938,2497.58 4168.7188,2497.0019 L4168.7188,2499.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4186.25" y="2498.2343">MeteredExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4035.5" x2="4411.5" y1="2510.08" y2="2510.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4035.5" x2="4411.5" y1="2518.08" y2="2518.08"/><ellipse cx="4045.5" cy="2529.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="4054.5" y="2532.2904">MeteredExecutor(std::unique_ptr&lt;Executor&gt; exe) : void</text><ellipse cx="4045.5" cy="2541.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="4054.5" y="2545.0951">MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void</text><ellipse cx="4045.5" cy="2554.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="4054.5" y="2557.8998">~MeteredExecutor() : void</text><ellipse cx="4045.5" cy="2567.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4054.5" y="2570.7045">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="4045.5" cy="2580.2988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4054.5" y="2583.5092">add(Func func) : void</text></a><!--MD5=[f8810983e380b6f94822d53c6adb6631]
class C_0000587962468506435170--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" target="_top" title="StrandExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" xlink:show="new" xlink:title="StrandExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="137.6328" id="C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.5;" width="757" x="2824" y="960.08"/><ellipse cx="3149.75" cy="976.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3152.7188,981.7206 Q3152.1406,982.0175 3151.5,982.1581 Q3150.8594,982.3144 3150.1563,982.3144 Q3147.6563,982.3144 3146.3281,980.6737 Q3145.0156,979.0175 3145.0156,975.8925 Q3145.0156,972.7675 3146.3281,971.1112 Q3147.6563,969.455 3150.1563,969.455 Q3150.8594,969.455 3151.5,969.6112 Q3152.1563,969.7675 3152.7188,970.0644 L3152.7188,972.7831 Q3152.0938,972.205 3151.5,971.9394 Q3150.9063,971.6581 3150.2813,971.6581 Q3148.9375,971.6581 3148.25,972.7362 Q3147.5625,973.7987 3147.5625,975.8925 Q3147.5625,977.9862 3148.25,979.0644 Q3148.9375,980.1269 3150.2813,980.1269 Q3150.9063,980.1269 3151.5,979.8612 Q3152.0938,979.58 3152.7188,979.0019 L3152.7188,981.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="3170.25" y="980.2343">StrandExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2825" x2="3580" y1="992.08" y2="992.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2825" x2="3580" y1="1000.08" y2="1000.08"/><ellipse cx="2835" cy="1011.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="272" x="2844" y="1014.2904">create() : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="1023.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="504" x="2844" y="1027.0951">create(std::shared_ptr&lt;StrandContext&gt; context) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="1036.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="491" x="2844" y="1039.8998">create(Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="1049.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="731" x="2844" y="1052.7045">create(std::shared_ptr&lt;StrandContext&gt; context, Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="1062.2988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2844" y="1065.5092">add(Func f) : void</text><ellipse cx="2835" cy="1075.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2844" y="1078.3139">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="2835" cy="1087.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2844" y="1091.1186">getNumPriorities() const : uint8_t</text></a><!--MD5=[4deb5614033ac86d675ee075ba2ead14]
class C_0001206661724003471988--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" target="_top" title="FiberManager" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" xlink:show="new" xlink:title="FiberManager" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="572.9922" id="C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.5;" width="886" x="1539" y="1143.58"/><ellipse cx="1913.25" cy="1159.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1916.2188,1165.2206 Q1915.6406,1165.5175 1915,1165.6581 Q1914.3594,1165.8144 1913.6563,1165.8144 Q1911.1563,1165.8144 1909.8281,1164.1738 Q1908.5156,1162.5175 1908.5156,1159.3925 Q1908.5156,1156.2675 1909.8281,1154.6113 Q1911.1563,1152.955 1913.6563,1152.955 Q1914.3594,1152.955 1915,1153.1113 Q1915.6563,1153.2675 1916.2188,1153.5644 L1916.2188,1156.2831 Q1915.5938,1155.705 1915,1155.4394 Q1914.4063,1155.1581 1913.7813,1155.1581 Q1912.4375,1155.1581 1911.75,1156.2363 Q1911.0625,1157.2988 1911.0625,1159.3925 Q1911.0625,1161.4863 1911.75,1162.5644 Q1912.4375,1163.6269 1913.7813,1163.6269 Q1914.4063,1163.6269 1915,1163.3613 Q1915.5938,1163.08 1916.2188,1162.5019 L1916.2188,1165.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="129" x="1933.75" y="1163.7343">fibers::FiberManager</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2424" y1="1175.58" y2="1175.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2424" y1="1183.58" y2="1183.58"/><ellipse cx="1550" cy="1194.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="1559" y="1197.7904">FiberManager(const fibers::FiberManager &amp; ) : void</text><ellipse cx="1550" cy="1207.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="1559" y="1210.5951">operator=(const fibers::FiberManager &amp; ) : fibers::FiberManager &amp;</text><ellipse cx="1550" cy="1220.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="684" x="1559" y="1223.3998">FiberManager(std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="1232.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="1559" y="1236.2045">~FiberManager() : void</text><ellipse cx="1550" cy="1245.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1559" y="1249.0092">loopController() : fibers::LoopController &amp;</text><ellipse cx="1550" cy="1258.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1559" y="1261.8139">loopController() const : const fibers::LoopController &amp;</text><ellipse cx="1550" cy="1271.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1559" y="1274.6186">loopUntilNoReady() : void</text><ellipse cx="1550" cy="1284.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1559" y="1287.4233">loopUntilNoReadyImpl() : void</text><ellipse cx="1550" cy="1297.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1559" y="1300.2279">runEagerFiberImpl(fibers::Fiber * ) : void</text><ellipse cx="1550" cy="1309.8222" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1559" y="1313.0326">shouldRunLoopRemote() : bool</text><ellipse cx="1550" cy="1322.6269" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1559" y="1325.8373">hasTasks() const : bool</text><ellipse cx="1550" cy="1335.4316" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1559" y="1338.642">numActiveTasks() const : size_t</text><ellipse cx="1550" cy="1348.2363" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1559" y="1351.4467">hasReadyTasks() const : bool</text><ellipse cx="1550" cy="1361.0409" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1559" y="1364.2514">setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void</text><ellipse cx="1550" cy="1373.8456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1559" y="1377.0561">add(Func f) : void</text><ellipse cx="1550" cy="1386.6503" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1559" y="1389.8608">fibersAllocated() const : size_t</text><ellipse cx="1550" cy="1399.455" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1559" y="1402.6654">fibersPoolSize() const : size_t</text><ellipse cx="1550" cy="1412.2597" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1559" y="1415.4701">hasActiveFiber() const : bool</text><ellipse cx="1550" cy="1425.0644" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="1559" y="1428.2748">getCurrentTaskRunningTime() const : Optional&lt;std::chrono::nanoseconds&gt;</text><ellipse cx="1550" cy="1437.8691" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="1441.0795">currentFiber() const : fibers::Fiber *</text><ellipse cx="1550" cy="1450.6738" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="1453.8842">stackHighWatermark() const : size_t</text><ellipse cx="1550" cy="1463.4784" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1559" y="1466.6889">yield() : void</text><ellipse cx="1550" cy="1476.2831" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="1559" y="1479.4936">setObserver(ExecutionObserver * observer) : void</text><ellipse cx="1550" cy="1489.0878" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1559" y="1492.2983">getObserver() : ExecutionObserver *</text><ellipse cx="1550" cy="1501.8925" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="1559" y="1505.1029">setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void</text><ellipse cx="1550" cy="1514.6972" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1559" y="1517.9076">runQueueSize() const : size_t</text><ellipse cx="1550" cy="1527.5019" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="247" x="1559" y="1530.7123">getFiberManager() : fibers::FiberManager &amp;</text><ellipse cx="1550" cy="1540.3066" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="283" x="1559" y="1543.517">getFiberManagerUnsafe() : fibers::FiberManager *</text><ellipse cx="1550" cy="1553.1113" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="1559" y="1556.3217">getOptions() const : const fibers::FiberManager::Options &amp;</text><ellipse cx="1550" cy="1565.9159" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="860" x="1559" y="1569.1264">FiberManager&lt;LocalT&gt;(LocalType&lt;LocalT&gt; , std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="1578.7206" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="1559" y="1581.9311">addTask&lt;F&gt;(F &amp;&amp; func, fibers::TaskOptions taskOptions = TaskOptions()) : void</text><ellipse cx="1550" cy="1591.5253" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="1559" y="1594.7358">addTaskFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1604.33" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1559" y="1607.5404">addTaskEager&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1617.1347" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="1559" y="1620.3451">addTaskEagerFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1629.9394" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1559" y="1633.1498">addTaskRemote&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1642.7441" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="1559" y="1645.9545">addTaskRemoteFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1655.5488" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1559" y="1658.7592">addTaskFinally&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1668.3534" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="1559" y="1671.5639">addTaskFinallyEager&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1681.1581" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="1559" y="1684.3686">runInMainContext&lt;F&gt;(F &amp;&amp; func) : invoke_result_t&lt;F&gt;</text><ellipse cx="1550" cy="1693.9628" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1559" y="1697.1733">local&lt;T&gt;() : T &amp;</text><ellipse cx="1550" cy="1706.7675" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="132" x="1559" y="1709.9779">localThread&lt;T&gt;() : T &amp;</text></a><!--MD5=[ba7273969468a5ac8bf1d40283557580]
class C_0000346702971661703291--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" target="_top" title="WaitExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" xlink:show="new" xlink:title="WaitExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="112.0234" id="C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.5;" width="371" x="1796.5" y="1752.08"/><ellipse cx="1888.75" cy="1768.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1891.7188,1773.7206 Q1891.1406,1774.0175 1890.5,1774.1581 Q1889.8594,1774.3144 1889.1563,1774.3144 Q1886.6563,1774.3144 1885.3281,1772.6738 Q1884.0156,1771.0175 1884.0156,1767.8925 Q1884.0156,1764.7675 1885.3281,1763.1113 Q1886.6563,1761.455 1889.1563,1761.455 Q1889.8594,1761.455 1890.5,1761.6113 Q1891.1563,1761.7675 1891.7188,1762.0644 L1891.7188,1764.7831 Q1891.0938,1764.205 1890.5,1763.9394 Q1889.9063,1763.6581 1889.2813,1763.6581 Q1887.9375,1763.6581 1887.25,1764.7363 Q1886.5625,1765.7988 1886.5625,1767.8925 Q1886.5625,1769.9863 1887.25,1771.0644 Q1887.9375,1772.1269 1889.2813,1772.1269 Q1889.9063,1772.1269 1890.5,1771.8613 Q1891.0938,1771.58 1891.7188,1771.0019 L1891.7188,1773.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="178" x="1909.25" y="1772.2343">futures::detail::WaitExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1797.5" x2="2166.5" y1="1784.08" y2="1784.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1797.5" x2="2166.5" y1="1792.08" y2="1792.08"/><ellipse cx="1807.5" cy="1803.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1816.5" y="1806.2904">add(Func func) : void</text><ellipse cx="1807.5" cy="1815.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1816.5" y="1819.0951">drive() : void</text><ellipse cx="1807.5" cy="1828.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1816.5" y="1831.8998">driveUntil(Clock::time_point deadline) : bool</text><ellipse cx="1807.5" cy="1841.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1816.5" y="1844.7045">detach() : void</text><ellipse cx="1807.5" cy="1854.2988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="1816.5" y="1857.5092">create() : Executor::KeepAlive&lt;futures::detail::WaitExecutor&gt;</text></a><!--MD5=[667ed72eb2108e1d2d692e666b9ea841]
class C_0001612067402701865715--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" target="_top" title="InlineExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" xlink:show="new" xlink:title="InlineExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="73.6094" id="C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.5;" width="187" x="1888.5" y="1944.08"/><ellipse cx="1933.75" cy="1960.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1936.7188,1965.7206 Q1936.1406,1966.0175 1935.5,1966.1581 Q1934.8594,1966.3144 1934.1563,1966.3144 Q1931.6563,1966.3144 1930.3281,1964.6738 Q1929.0156,1963.0175 1929.0156,1959.8925 Q1929.0156,1956.7675 1930.3281,1955.1113 Q1931.6563,1953.455 1934.1563,1953.455 Q1934.8594,1953.455 1935.5,1953.6113 Q1936.1563,1953.7675 1936.7188,1954.0644 L1936.7188,1956.7831 Q1936.0938,1956.205 1935.5,1955.9394 Q1934.9063,1955.6581 1934.2813,1955.6581 Q1932.9375,1955.6581 1932.25,1956.7363 Q1931.5625,1957.7988 1931.5625,1959.8925 Q1931.5625,1961.9863 1932.25,1963.0644 Q1932.9375,1964.1269 1934.2813,1964.1269 Q1934.9063,1964.1269 1935.5,1963.8613 Q1936.0938,1963.58 1936.7188,1963.0019 L1936.7188,1965.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="1954.25" y="1964.2343">InlineExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1889.5" x2="2074.5" y1="1976.08" y2="1976.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1889.5" x2="2074.5" y1="1984.08" y2="1984.08"/><ellipse cx="1899.5" cy="1995.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="161" x="1908.5" y="1998.2904">instance() : InlineExecutor &amp;</text><ellipse cx="1899.5" cy="2007.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1908.5" y="2011.0951">add(Func f) : void</text></a><!--MD5=[3310bdfe54858106abec0578bfe16154]
class C_0001123262130157209492--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" target="_top" title="TimekeeperScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" xlink:show="new" xlink:title="TimekeeperScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="137.6328" id="C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.5;" width="1097" x="2654" y="787.08"/><ellipse cx="3101.25" cy="803.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3104.2188,808.7206 Q3103.6406,809.0175 3103,809.1581 Q3102.3594,809.3144 3101.6563,809.3144 Q3099.1563,809.3144 3097.8281,807.6737 Q3096.5156,806.0175 3096.5156,802.8925 Q3096.5156,799.7675 3097.8281,798.1112 Q3099.1563,796.455 3101.6563,796.455 Q3102.3594,796.455 3103,796.6112 Q3103.6563,796.7675 3104.2188,797.0644 L3104.2188,799.7831 Q3103.5938,799.205 3103,798.9394 Q3102.4063,798.6581 3101.7813,798.6581 Q3100.4375,798.6581 3099.75,799.7362 Q3099.0625,800.7987 3099.0625,802.8925 Q3099.0625,804.9862 3099.75,806.0644 Q3100.4375,807.1269 3101.7813,807.1269 Q3102.4063,807.1269 3103,806.8612 Q3103.5938,806.58 3104.2188,806.0019 L3104.2188,808.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="3121.75" y="807.2343">TimekeeperScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2655" x2="3750" y1="819.08" y2="819.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2655" x2="3750" y1="827.08" y2="827.08"/><ellipse cx="2665" cy="838.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="2674" y="841.2904">TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &amp; ) : void</text><ellipse cx="2665" cy="850.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="2674" y="854.0951">operator=(const TimekeeperScheduledExecutor &amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2665" cy="863.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="2674" y="866.8998">TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &amp;&amp; ) : void</text><ellipse cx="2665" cy="876.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="2674" y="879.7045">operator=(TimekeeperScheduledExecutor &amp;&amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2665" cy="889.2987" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1071" x="2674" y="892.5092">create(Executor::KeepAlive&lt;&gt; parent, Function&lt;std::shared_ptr&lt;Timekeeper&gt; ()&gt; getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive&lt;TimekeeperScheduledExecutor&gt;</text><ellipse cx="2665" cy="902.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2674" y="905.3139">add(Func func) : void</text><ellipse cx="2665" cy="914.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="420" x="2674" y="918.1186">scheduleAt(Func &amp;&amp; func, const ScheduledExecutor::TimePoint &amp; t) : void</text></a><!--MD5=[af034c985d0d2b969f7008656fc559c3]
class C_0001402712402381953994--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" target="_top" title="SerialExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" xlink:show="new" xlink:title="SerialExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="163.2422" id="C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.5;" width="771" x="2817" y="1204.58"/><ellipse cx="3153.25" cy="1220.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3156.2188,1226.2206 Q3155.6406,1226.5175 3155,1226.6581 Q3154.3594,1226.8144 3153.6563,1226.8144 Q3151.1563,1226.8144 3149.8281,1225.1738 Q3148.5156,1223.5175 3148.5156,1220.3925 Q3148.5156,1217.2675 3149.8281,1215.6113 Q3151.1563,1213.955 3153.6563,1213.955 Q3154.3594,1213.955 3155,1214.1113 Q3155.6563,1214.2675 3156.2188,1214.5644 L3156.2188,1217.2831 Q3155.5938,1216.705 3155,1216.4394 Q3154.4063,1216.1581 3153.7813,1216.1581 Q3152.4375,1216.1581 3151.75,1217.2363 Q3151.0625,1218.2988 3151.0625,1220.3925 Q3151.0625,1222.4863 3151.75,1223.5644 Q3152.4375,1224.6269 3153.7813,1224.6269 Q3154.4063,1224.6269 3155,1224.3613 Q3155.5938,1224.08 3156.2188,1223.5019 L3156.2188,1226.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="3173.75" y="1224.7343">SerialExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3587" y1="1236.58" y2="1236.58"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3587" y1="1244.58" y2="1244.58"/><ellipse cx="2828" cy="1255.58" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2837" y="1258.7904">SerialExecutor(const SerialExecutor &amp; ) : void</text><ellipse cx="2828" cy="1268.3847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="2837" y="1271.5951">operator=(const SerialExecutor &amp; ) : SerialExecutor &amp;</text><ellipse cx="2828" cy="1281.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2837" y="1284.3998">SerialExecutor(SerialExecutor &amp;&amp; ) : void</text><ellipse cx="2828" cy="1293.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2837" y="1297.2045">operator=(SerialExecutor &amp;&amp; ) : SerialExecutor &amp;</text><ellipse cx="2828" cy="1306.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="745" x="2837" y="1310.0092">create(Executor::KeepAlive&lt;Executor&gt; parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive&lt;SerialExecutor&gt;</text><ellipse cx="2828" cy="1319.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="551" x="2837" y="1322.8139">createUnique(std::shared_ptr&lt;Executor&gt; parent = getCPUExecutor()) : SerialExecutor::UniquePtr</text><ellipse cx="2828" cy="1332.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2837" y="1335.6186">add(Func func) : void</text><ellipse cx="2828" cy="1345.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2837" y="1348.4233">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="2828" cy="1358.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2837" y="1361.2279">getNumPriorities() const : uint8_t</text></a><!--MD5=[1b407b8a48c2e9a551c6d8a1a18940a0]
class C_0000470362430235503729--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" target="_top" title="ThreadedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" xlink:show="new" xlink:title="ThreadedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="137.6328" id="C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.5;" width="610" x="1677" y="2053.08"/><ellipse cx="1920.25" cy="2069.08" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1923.2188,2074.7206 Q1922.6406,2075.0175 1922,2075.1581 Q1921.3594,2075.3144 1920.6563,2075.3144 Q1918.1563,2075.3144 1916.8281,2073.6738 Q1915.5156,2072.0175 1915.5156,2068.8925 Q1915.5156,2065.7675 1916.8281,2064.1113 Q1918.1563,2062.455 1920.6563,2062.455 Q1921.3594,2062.455 1922,2062.6113 Q1922.6563,2062.7675 1923.2188,2063.0644 L1923.2188,2065.7831 Q1922.5938,2065.205 1922,2064.9394 Q1921.4063,2064.6581 1920.7813,2064.6581 Q1919.4375,2064.6581 1918.75,2065.7363 Q1918.0625,2066.7988 1918.0625,2068.8925 Q1918.0625,2070.9863 1918.75,2072.0644 Q1919.4375,2073.1269 1920.7813,2073.1269 Q1921.4063,2073.1269 1922,2072.8613 Q1922.5938,2072.58 1923.2188,2072.0019 L1923.2188,2074.7206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="1940.75" y="2073.2343">ThreadedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1678" x2="2286" y1="2085.08" y2="2085.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1678" x2="2286" y1="2093.08" y2="2093.08"/><ellipse cx="1688" cy="2104.08" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="1697" y="2107.2904">ThreadedExecutor(std::shared_ptr&lt;ThreadFactory&gt; threadFactory = newDefaultThreadFactory()) : void</text><ellipse cx="1688" cy="2116.8847" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1697" y="2120.0951">~ThreadedExecutor() : void</text><ellipse cx="1688" cy="2129.6894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1697" y="2132.8998">ThreadedExecutor(const ThreadedExecutor &amp; ) : void</text><ellipse cx="1688" cy="2142.4941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1697" y="2145.7045">ThreadedExecutor(ThreadedExecutor &amp;&amp; ) : void</text><ellipse cx="1688" cy="2155.2988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="1697" y="2158.5092">operator=(const ThreadedExecutor &amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1688" cy="2168.1034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1697" y="2171.3139">operator=(ThreadedExecutor &amp;&amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1688" cy="2180.9081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1697" y="2184.1186">add(Func func) : void</text></a><!--MD5=[82b5c747f5a02a065abf0a634d41cbf4]
class C_0000560396763155385774--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" target="_top" title="SoftRealTimeExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" xlink:show="new" xlink:title="SoftRealTimeExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="48" id="C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.5;" width="169" x="2455" y="2414.08"/><ellipse cx="2470" cy="2430.08" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2470.1094,2425.4238 L2468.9531,2430.5019 L2471.2813,2430.5019 L2470.1094,2425.4238 Z M2468.625,2423.1894 L2471.6094,2423.1894 L2474.9688,2435.58 L2472.5156,2435.58 L2471.75,2432.5175 L2468.4688,2432.5175 L2467.7188,2435.58 L2465.2813,2435.58 L2468.625,2423.1894 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="2484" y="2434.2343">SoftRealTimeExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2456" x2="2623" y1="2446.08" y2="2446.08"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2456" x2="2623" y1="2454.08" y2="2454.08"/></a><!--MD5=[4c5ac55a9490dced79f9e191b33f25b1]
class C_0000586027154664049253--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" target="_top" title="EDFThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" xlink:show="new" xlink:title="EDFThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fwphukj57clkj)" height="163.2422" id="C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.5;" width="976" x="4970.5" y="2343.58"/><ellipse cx="5379.25" cy="2359.58" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5382.2188,2365.2206 Q5381.6406,2365.5175 5381,2365.6581 Q5380.3594,2365.8144 5379.6563,2365.8144 Q5377.1563,2365.8144 5375.8281,2364.1738 Q5374.5156,2362.5175 5374.5156,2359.3925 Q5374.5156,2356.2675 5375.8281,2354.6113 Q5377.1563,2352.955 5379.6563,2352.955 Q5380.3594,2352.955 5381,2353.1113 Q5381.6563,2353.2675 5382.2188,2353.5644 L5382.2188,2356.2831 Q5381.5938,2355.705 5381,2355.4394 Q5380.4063,2355.1581 5379.7813,2355.1581 Q5378.4375,2355.1581 5377.75,2356.2363 Q5377.0625,2357.2988 5377.0625,2359.3925 Q5377.0625,2361.4863 5377.75,2362.5644 Q5378.4375,2363.6269 5379.7813,2363.6269 Q5380.4063,2363.6269 5381,2363.3613 Q5381.5938,2363.08 5382.2188,2362.5019 L5382.2188,2365.2206 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="150" x="5399.75" y="2363.7343">EDFThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4971.5" x2="5945.5" y1="2375.58" y2="2375.58"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4976.5" y="2381.58"/><ellipse cx="4981.5" cy="2386.58" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4990.5" y="2389.7904">kEarliestDeadline : const uint64_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4976.5" y="2394.3847"/><ellipse cx="4981.5" cy="2399.3847" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="182" x="4990.5" y="2402.5951">kLatestDeadline : const uint64_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4971.5" x2="5945.5" y1="2409.1894" y2="2409.1894"/><ellipse cx="4981.5" cy="2420.1894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="4990.5" y="2423.3998">EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("EDFThreadPool")) : void</text><ellipse cx="4981.5" cy="2432.9941" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="4990.5" y="2436.2045">~EDFThreadPoolExecutor() : void</text><ellipse cx="4981.5" cy="2445.7988" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4990.5" y="2449.0092">add(Func f) : void</text><ellipse cx="4981.5" cy="2458.6034" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4990.5" y="2461.8139">add(Func f, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="2471.4081" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4990.5" y="2474.6186">add(Func f, std::size_t total, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="2484.2128" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="4990.5" y="2487.4233">add(std::vector&lt;Func&gt; fs, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="2497.0175" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="4990.5" y="2500.2279">deadlineExecutor(uint64_t deadline) : Executor::KeepAlive&lt;&gt;</text><!--MD5=[0507f50678c26aafd20e9031c16ac1d0]
link C_0001663594882877424244 to C_0002222099135672593686--><path d="M864.12,1864.65 C882.97,1864.54 901.59,1864.39 919.74,1864.18 " fill="none" id="C_0001663594882877424244-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="924.85,1864.13,915.8049,1860.2331,919.8503,1864.1871,915.8963,1868.2326,924.85,1864.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d44102866279698d641a58659b4220ed]
reverse link C_0002222099135672593686 to C_0001663594882877424244--><path d="M904.75,1839.1 C891.39,1838.96 877.82,1838.86 864.12,1838.77 " fill="none" id="C_0002222099135672593686&lt;-C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="904.93,1832.1,924.85,1839.32,904.78,1846.1,904.93,1832.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9bfe04d74fcca5e380cd86fc2508ab2b]
reverse link C_0002222099135672593686 to C_0001968432200878677255--><path d="M1171.44,1750.22 C1193.89,1444.69 1272.47,542.24 1432,301.08 C1519.91,168.19 1718.7,154.72 1851.36,162.43 " fill="none" id="C_0002222099135672593686&lt;-C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1178.41,1750.88,1169.98,1770.32,1164.45,1749.86,1178.41,1750.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c5cdfc8ff258542796370a43a8a6d5bc]
reverse link C_0002222099135672593686 to C_0000481841646641149488--><path d="M1167.42,1750.3 C1178.44,1444.52 1227.94,543.19 1432,351.08 C1547.72,242.14 1743.5,247.37 1867.31,264.65 " fill="none" id="C_0002222099135672593686&lt;-C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1174.41,1750.68,1166.72,1770.42,1160.42,1750.19,1174.41,1750.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6d6cc176091032b9e9a6d8f3477fd2ab]
reverse link C_0000481841646641149488 to C_0000769434624932181431--><path d="M2116.53,270.84 C2204.25,260.08 2321.49,245.52 2425,232.08 C2584.69,211.35 2762.73,187.34 2908,167.52 " fill="none" id="C_0000481841646641149488&lt;-C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2117.3,277.8,2096.6,273.28,2115.6,263.9,2117.3,277.8" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4cd26f58d593a6e58c5c951cd50a788]
link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4332.9,384.62 C4664.58,398.27 5679.38,418 6276.48,424.03 " fill="none" id="C_0002145523347961259416-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6281.73,424.08,6272.7763,419.9774,6276.7303,424.0229,6272.6849,427.9769,6281.73,424.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dec116c53a2d170dff43443e961da53]
reverse link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4352.9,373 C4704.73,371.57 5696.85,387.98 6281.73,403.43 " fill="none" id="C_0002145523347961259416&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4352.93,380,4332.9,373.1,4352.86,366,4352.93,380" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[956e3c6898026d390548bc98624d6186]
reverse link C_0002222099135672593686 to C_0002145523347961259416--><path d="M1179.25,1750.26 C1220.94,1478.43 1349.11,747.08 1539,611.08 C1960.67,309.09 3666.25,354.75 4114.27,372.33 " fill="none" id="C_0002222099135672593686&lt;-C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1186.15,1751.45,1176.22,1770.17,1172.31,1749.34,1186.15,1751.45" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbe4f6025306bddd8773b75a56f8d272]
reverse link C_0002222099135672593686 to C_0001347291497865252100--><path d="M1233.7,1949.44 C1300.82,2035.04 1411.07,2154.27 1539,2209.08 C1680.81,2269.84 2743.01,2284.9 3091.28,2288.22 " fill="none" id="C_0002222099135672593686&lt;-C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1228.16,1953.71,1221.48,1933.6,1239.24,1945.16,1228.16,1953.71" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[286dc64e0630f8c70451157496c94824]
link C_0001932117148827315960 to C_0001347291497865252100--><path d="M2272.54,2333.3 C2528.02,2321.14 2888.16,2303.99 3076.16,2295.05 " fill="none" id="C_0001932117148827315960-&gt;C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3083.3291" cy="2294.7009" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3075.3381" x2="3091.32" y1="2295.0818" y2="2294.32"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3082.9482" x2="3083.71" y1="2286.71" y2="2302.6918"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1691.21,2330.65 C1602.42,2318.58 1508.17,2294.21 1432,2245.08 C1318.02,2171.57 1242.31,2030.38 1201.37,1938.56 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1199.33,1933.95,1199.3243,1943.7989,1201.358,1938.5202,1206.6367,1940.554,1199.33,1933.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1812.86,2396.59 C1697.52,2420.34 1545.41,2430.66 1432,2362.08 C1279.26,2269.72 1209.46,2058.15 1181.2,1938.56 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1180.05,1933.64,1178.2114,1943.3157,1181.192,1938.5078,1185.9999,1941.4885,1180.05,1933.64" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1435" y="2351.1464"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="1445" y="2358.1469">executor_</text><!--MD5=[f4091570a50e50d543407bc69d17a718]
reverse link C_0002222099135672593686 to C_0001932117148827315960--><path d="M1196.37,1952.63 C1235.97,2053.32 1313.2,2203.46 1432,2280.08 C1508.17,2329.21 1602.42,2353.58 1691.21,2363.91 " fill="none" id="C_0002222099135672593686&lt;-C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1189.78,1954.99,1189.18,1933.81,1202.85,1950,1189.78,1954.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a391c4085ec82253d9730dd224003987]
reverse link C_0001347291497865252100 to C_0002292058893312396804--><path d="M3333.82,2278.59 C3454.66,2268.87 3641.06,2253.87 3811.99,2240.11 " fill="none" id="C_0001347291497865252100&lt;-C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3334.02,2285.6,3313.52,2280.23,3332.89,2271.64,3334.02,2285.6" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e81e9ddbd832a715a37127e28d03ab94]
reverse link C_0002292058893312396804 to C_0001740134810840364719--><path d="M4655.08,2200.44 C4691.29,2199.89 4728.43,2199.31 4765.96,2198.74 " fill="none" id="C_0002292058893312396804&lt;-C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4655.18,2207.44,4635.07,2200.75,4654.96,2193.45,4655.18,2207.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8fc612c63803be1a9f3540f6bd40d2f0]
reverse link C_0002222099135672593686 to C_0001218209673148292552--><path d="M1178.91,1750.36 C1213.14,1522.53 1306,981.12 1432,852.08 C1519.87,762.09 1655.13,721.73 1769.4,703.93 " fill="none" id="C_0002222099135672593686&lt;-C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1185.79,1751.68,1175.92,1770.44,1171.94,1749.62,1185.79,1751.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[455db288e65f9217baffdaa9cf7f7dc9]
reverse link C_0002222099135672593686 to C_0000155178671636628489--><path d="M1166.21,1750.35 C1175.1,1578.65 1220,1233.56 1432,1064.08 C1561.79,960.32 1767.59,970.5 1886.91,987.88 " fill="none" id="C_0002222099135672593686&lt;-C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1173.2,1750.74,1165.29,1770.4,1159.21,1750.1,1173.2,1750.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9b8d25b1a905ec17cebf74be6e4d1ef]
reverse link C_0000481841646641149488 to C_0001970350906198958245--><path d="M2117.12,287.08 C2341.54,287.08 2807.37,287.08 3201.5,287.08 C3201.5,287.08 3201.5,287.08 5459.5,287.08 C5733.68,287.08 6039.31,318.63 6281.92,351.22 " fill="none" id="C_0000481841646641149488&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2116.81,294.08,2096.81,287.08,2116.81,280.08,2116.81,294.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13714c40570251b1727355460ed628a2]
reverse link C_0000155178671636628489 to C_0001970350906198958245--><path d="M2097.03,1025.43 C2273.89,1055.31 2599.71,1109.83 2654,1115.08 C3152.81,1163.36 3279.86,1151.08 3781,1151.08 C3781,1151.08 3781,1151.08 5459.5,1151.08 C5759.63,1151.08 6052.97,995.87 6281.89,828.68 " fill="none" id="C_0000155178671636628489&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2095.82,1032.32,2077.27,1022.09,2098.16,1018.52,2095.82,1032.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[85ac5256db58d12eb58da4f0bfa4fa8f]
reverse link C_0001218209673148292552 to C_0001970350906198958245--><path d="M2214.76,668.37 C2283.61,657.63 2358.4,641.93 2425,619.08 C2534.68,581.44 2541.9,523.74 2654,494.08 C2826.56,448.42 5259.95,430 6281.78,424.25 " fill="none" id="C_0001218209673148292552&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2215.37,675.35,2194.55,671.41,2213.29,661.51,2215.37,675.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[accd7d2ab1e2b7c177a3edb9e3f55c72]
link C_0000260170505900481834 to C_0001970350906198958245--><path d="M6052.54,520.06 C6119.84,511.16 6187.42,502.05 6252,493.08 C6260.15,491.95 6268.37,490.8 6276.65,489.64 " fill="none" id="C_0000260170505900481834-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6281.82,488.91,6272.3491,486.2077,6276.8691,489.6091,6273.4677,494.1291,6281.82,488.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6a40fe925e9209b42fe1a8440e6b087b]
reverse link C_0002292058893312396804 to C_0000260170505900481834--><path d="M4348.03,2045.59 C4609.75,1703.41 5211.57,916.61 5400,670.25 " fill="none" id="C_0002292058893312396804&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4353.53,2049.91,4335.82,2061.54,4342.41,2041.4,4353.53,2049.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5276268b626ef7b54a98769403cb5439]
reverse link C_0002145523347961259416 to C_0000260170505900481834--><path d="M4352.4,399.69 C4512.28,427.96 4794.01,477.77 5032.98,520.02 " fill="none" id="C_0002145523347961259416&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4351.05,406.56,4332.57,396.19,4353.48,392.78,4351.05,406.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ab611552766336439f9b6ed347c4215c]
reverse link C_0000481841646641149488 to C_0002235860541734359952--><path d="M2115.95,324.72 C2326.36,384.3 2737.94,500.83 2989.45,572.04 " fill="none" id="C_0000481841646641149488&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2113.88,331.41,2096.54,319.23,2117.69,317.94,2113.88,331.41" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f76a078fe6562592f931aa95ad9663c]
reverse link C_0001218209673148292552 to C_0002235860541734359952--><path d="M2214.79,679.86 C2438.08,669.05 2772.98,652.83 2989.39,642.35 " fill="none" id="C_0001218209673148292552&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2214.87,686.86,2194.55,680.84,2214.19,672.88,2214.87,686.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3ab65a7e84903ff36ad19183ae4fbd24]
reverse link C_0000155178671636628489 to C_0002235860541734359952--><path d="M2080.46,968.39 C2210.19,918.98 2447.3,831.29 2654,769.08 C2763.66,736.07 2887.3,704.65 2989.31,680.24 " fill="none" id="C_0000155178671636628489&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2082.92,974.95,2061.73,975.54,2077.92,961.87,2082.92,974.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6921ed0d28362e9667150d5319fe2776]
link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4034.46,2562.08 C3477.86,2640.83 1851.31,2840.14 1432,2547.08 C1230.79,2406.45 1180.9,2092.1 1168.55,1939.09 " fill="none" id="C_0001956570166673420631-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1168.12,1933.72,1164.8526,1943.0111,1168.5199,1938.704,1172.8269,1942.3713,1168.12,1933.72" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[99d55ebf5c4bd3f71851e99b5adaf196]
reverse link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4021.12,2539.85 C3481.57,2553.79 2012.39,2581.3 1539,2483.08 C1488.65,2472.63 1469.03,2474.75 1432,2439.08 C1284.49,2297 1211.22,2058.36 1181.4,1933.62 " fill="none" id="C_0001956570166673420631&lt;-C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4034.47,2539.51,4028.3665,2535.6698,4022.4742,2539.8267,4028.5777,2543.667,4034.47,2539.51" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2483.5" y="2538.1464"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="2493.5" y="2545.1469">ownedExecutor_</text><!--MD5=[a517c54ec156d68ee25be864ae687f6d]
reverse link C_0001347291497865252100 to C_0001956570166673420631--><path d="M3333.13,2320.25 C3510.67,2362.93 3830.61,2439.86 4034.47,2488.87 " fill="none" id="C_0001347291497865252100&lt;-C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3331.33,2327.01,3313.52,2315.53,3334.6,2313.4,3331.33,2327.01" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9209e2fb2cca13a1bd53142f4af5317e]
reverse link C_0000155178671636628489 to C_0000587962468506435170--><path d="M2097.15,1008.23 C2261.72,1011.34 2573.38,1017.22 2823.75,1021.95 " fill="none" id="C_0000155178671636628489&lt;-C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2096.96,1015.23,2077.09,1007.86,2097.22,1001.23,2096.96,1015.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0a8abd6ab6b72d3d723f8e27fc307bfc]
reverse link C_0002222099135672593686 to C_0001206661724003471988--><path d="M1340.44,1761.14 C1399.58,1730.58 1468.47,1694.98 1538.71,1658.67 " fill="none" id="C_0002222099135672593686&lt;-C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1343.39,1767.5,1322.41,1770.46,1336.97,1755.06,1343.39,1767.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[135cc1a411e5fe5d6356ee66905451c6]
reverse link C_0002222099135672593686 to C_0000346702971661703291--><path d="M1422.12,1838.2 C1543.55,1831.65 1685.66,1824 1796.19,1818.04 " fill="none" id="C_0002222099135672593686&lt;-C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1422.38,1845.19,1402.04,1839.28,1421.63,1831.21,1422.38,1845.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dd8f29c1989340f5d3fd880405cabcb]
link C_0001612067402701865715 to C_0001612067402701865715--><path d="M1889.2,1944.03 C1876.36,1925.56 1907.29,1909.08 1982,1909.08 C2050.29,1909.08 2082,1922.85 2077.14,1939.32 " fill="none" id="C_0001612067402701865715-&gt;C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2074.8,1944.03,2082.3946,1937.7593,2077.0303,1939.555,2075.2346,1934.1907,2074.8,1944.03" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1959" y="1893.1464"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="1969" y="1900.1469">cache</text><!--MD5=[ca88da5f247437352a79e15a35decac2]
reverse link C_0002222099135672593686 to C_0001612067402701865715--><path d="M1422.25,1892.8 C1581.38,1917.94 1775.98,1948.69 1888.49,1966.46 " fill="none" id="C_0002222099135672593686&lt;-C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1420.7,1899.64,1402.04,1889.61,1422.88,1885.82,1420.7,1899.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[89eb8d3ac6b14cbcc2f2be4548fd3da0]
link C_0001123262130157209492 to C_0002222099135672593686--><path d="M2653.79,830.65 C2324.67,829.8 1900.91,854.4 1539,958.08 C1487,972.98 1466.51,974.43 1432,1016.08 C1244.82,1242.01 1187.88,1600.97 1171.16,1765.07 " fill="none" id="C_0001123262130157209492-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1170.63,1770.35,1175.5106,1761.7955,1171.1303,1765.3751,1167.5507,1760.9949,1170.63,1770.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9bc685a0c95c6f0f42cb945c35073ec]
reverse link C_0001218209673148292552 to C_0001123262130157209492--><path d="M2214.61,722.44 C2349.77,740.75 2525.87,764.59 2691.84,787.07 " fill="none" id="C_0001218209673148292552&lt;-C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2213.43,729.35,2194.55,719.73,2215.31,715.47,2213.43,729.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c90348528aae1f72fa3dfd98dc4bf126]
link C_0001402712402381953994 to C_0002222099135672593686--><path d="M2816.53,1286.92 C2693.32,1272.05 2561.41,1238.96 2455,1171.08 C2434.74,1158.15 2446.19,1137.42 2425,1126.08 C2338.2,1079.63 1623.07,1074.85 1539,1126.08 C1306.42,1267.8 1212.04,1605.44 1179.4,1765.31 " fill="none" id="C_0001402712402381953994-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1178.35,1770.45,1184.0464,1762.4156,1179.3361,1765.5482,1176.2035,1760.8379,1178.35,1770.45" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e207bfffdf80fcc13f6dcb609a0d553]
reverse link C_0000155178671636628489 to C_0001402712402381953994--><path d="M2097.51,992.26 C2194.02,986.85 2331.02,994.5 2425,1064.08 C2450.9,1083.25 2430.11,1109.62 2455,1130.08 C2525.2,1187.79 2565.2,1157.76 2654,1177.08 C2706.56,1188.51 2762.06,1200.11 2816.76,1211.27 " fill="none" id="C_0000155178671636628489&lt;-C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2097.68,999.27,2077.26,993.62,2096.74,985.3,2097.68,999.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5881062226b0dc1facde97fd853f45]
reverse link C_0002222099135672593686 to C_0000470362430235503729--><path d="M1327.13,1943.02 C1391.53,1975.95 1467.21,2010.94 1539,2035.08 C1582.92,2049.85 1630.19,2062.45 1676.9,2073.08 " fill="none" id="C_0002222099135672593686&lt;-C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1323.84,1949.19,1309.28,1933.79,1330.26,1936.75,1323.84,1949.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4dc2b8b28f130daed24dc78f6ab3324]
reverse link C_0002222099135672593686 to C_0000560396763155385774--><path d="M1183.61,1953.31 C1213.23,2079.91 1283.1,2293.01 1432,2400.08 C1594.59,2516.99 2225.6,2468.76 2454.75,2446.76 " fill="none" id="C_0002222099135672593686&lt;-C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1176.77,1954.82,1179.2,1933.77,1190.43,1951.73,1176.77,1954.82" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[20b939e7521107461b4dab031da0529a]
reverse link C_0000560396763155385774 to C_0000586027154664049253--><path d="M2644.41,2437.62 C3012.13,2435.98 4267.28,2430.38 4970.33,2427.25 " fill="none" id="C_0000560396763155385774&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2644.3,2444.62,2624.26,2437.71,2644.23,2430.62,2644.3,2444.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b64a71dfe9bdf716efdc37867f26125a]
reverse link C_0002292058893312396804 to C_0000586027154664049253--><path d="M4654.92,2317.91 C4668.75,2320.77 4682.47,2323.5 4696,2326.08 C4784.32,2342.91 4878.95,2357.74 4970.44,2370.46 " fill="none" id="C_0002292058893312396804&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4653.44,2324.76,4635.3,2313.8,4656.32,2311.05,4653.44,2324.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbe220306e9b4c1f429f24baf3a0ebe3]
@startuml
left to right direction
class "detail::ExecutorWithPriorityImpl<Callback>" as C_0001663594882877424244
class C_0001663594882877424244 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22{ExecutorWithPriorityImpl}]] {
{static} +create(Executor::KeepAlive<Executor> executor, Callback && callback) : Executor::KeepAlive<ExecutorWithPriorityImpl<std::decay_t<Callback>>>
+ExecutorWithPriorityImpl<Callback>(const ExecutorWithPriorityImpl<Callback> & ) : void
+operator=(const ExecutorWithPriorityImpl<Callback> & ) : ExecutorWithPriorityImpl<Callback> &
+ExecutorWithPriorityImpl<Callback>(ExecutorWithPriorityImpl<Callback> && ) : void
+operator=(ExecutorWithPriorityImpl<Callback> && ) : ExecutorWithPriorityImpl<Callback> &
+add(Func func) : void
}
abstract "Executor" as C_0002222099135672593686
abstract C_0002222099135672593686 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53{Executor}]] {
+~Executor() : void
{abstract} +add(Func ) = 0 : void
+addWithPriority(Func , int8_t priority) : void
+getNumPriorities() const : uint8_t
{static} +getKeepAliveToken<ExecutorT>(ExecutorT * executor) : KeepAlive<ExecutorT>
{static} +getKeepAliveToken<ExecutorT>(ExecutorT & executor) : KeepAlive<ExecutorT>
{static} +LO_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68{LO_PRI}]]]
{static} +MID_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69{MID_PRI}]]]
{static} +HI_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70{HI_PRI}]]]
}
class "QueuedImmediateExecutor" as C_0001968432200878677255
class C_0001968432200878677255 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31{QueuedImmediateExecutor}]] {
{static} +instance() : QueuedImmediateExecutor &
+add(Func callback) : void
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
{abstract} +drive() = 0 : void
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() : void
+drive() : void
+try_drive() : bool
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+try_wait() : bool
+try_drive_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_drive_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
+try_wait_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_wait_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
}
abstract "IOExecutor" as C_0002145523347961259416
abstract C_0002145523347961259416 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40{IOExecutor}]] {
+~IOExecutor() = default : void
{abstract} +getEventBase() = 0 : EventBase *
}
class "DefaultKeepAliveExecutor" as C_0001347291497865252100
class C_0001347291497865252100 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30{DefaultKeepAliveExecutor}]] {
+~DefaultKeepAliveExecutor() : void
+weakRef() : Executor::KeepAlive<>
}
class "DefaultKeepAliveExecutor::WeakRef" as C_0001932117148827315960
class C_0001932117148827315960 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59{DefaultKeepAliveExecutor##WeakRef}]] {
{static} +create(std::shared_ptr<ControlBlock> controlBlock, Executor * executor) : Executor::KeepAlive<>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
abstract "ThreadPoolExecutor" as C_0002292058893312396804
abstract C_0002292058893312396804 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67{ThreadPoolExecutor}]] {
+ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory, bool isWaitForAll = false) : void
+~ThreadPoolExecutor() : void
{abstract} +add(Func func) = 0 : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void
+setThreadFactory(std::shared_ptr<ThreadFactory> threadFactory) : void
+getThreadFactory() const : std::shared_ptr<ThreadFactory>
+numThreads() const : size_t
+setNumThreads(size_t numThreads) : void
+numActiveThreads() const : size_t
+stop() : void
+join() : void
{static} +withAll(FunctionRef<void (ThreadPoolExecutor &)> f) : void
+getPoolStats() const : ThreadPoolExecutor::PoolStats
+getPendingTaskCount() const : size_t
+getName() const : const std::string &
+subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void
+addObserver(std::shared_ptr<Observer> ) : void
+removeObserver(std::shared_ptr<Observer> ) : void
+setThreadDeathTimeout(std::chrono::milliseconds timeout) : void
}
class "CPUThreadPoolExecutor" as C_0001740134810840364719
class C_0001740134810840364719 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68{CPUThreadPoolExecutor}]] {
+CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads) : void
+CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+~CPUThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+addWithPriority(Func func, int8_t priority) : void
+add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getTaskQueueSize() const : size_t
+getNumPriorities() const : uint8_t
{static} +kDefaultMaxQueueSize : const size_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153{kDefaultMaxQueueSize}]]]
}
abstract "ScheduledExecutor" as C_0001218209673148292552
abstract C_0001218209673148292552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28{ScheduledExecutor}]] {
+~ScheduledExecutor() = default : void
{abstract} +add(Func ) = 0 : void
+schedule(Func && a) : void
+schedule(Func && a, const ScheduledExecutor::Duration & dur) : void
+scheduleAt(Func && , const ScheduledExecutor::TimePoint & ) : void
+now() : ScheduledExecutor::TimePoint
}
class "SequencedExecutor" as C_0000155178671636628489
class C_0000155178671636628489 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27{SequencedExecutor}]] {
+~SequencedExecutor() : void
}
class "EventBase" as C_0001970350906198958245
class C_0001970350906198958245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135{EventBase}]] {
+EventBase(std::chrono::milliseconds tickInterval) : void
+EventBase() : void
+EventBase(bool enableTimeMeasurement) : void
+EventBase(const EventBase & ) : void
+operator=(const EventBase & ) : EventBase &
+EventBase(event_base * evb, bool enableTimeMeasurement = true) : void
+EventBase(EventBase::Options options) : void
+~EventBase() : void
+loop() : bool
+loopIgnoreKeepAlive() : bool
+loopOnce(int flags = 0) : bool
+loopForever() : void
+terminateLoopSoon() : void
+runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr<RequestContext> rctx = RequestContext::saveContext()) : void
+runInLoop(EventBase::Func c, bool thisIteration = false) : void
+runOnDestruction(EventBase::OnDestructionCallback & callback) : void
+runOnDestruction(EventBase::Func f) : void
+runBeforeLoop(EventBase::LoopCallback * callback) : void
+runInEventBaseThread(EventBase::Func fn) : void
+runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void
+runInEventBaseThreadAndWait(EventBase::Func fn) : void
+runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void
+setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void
+setLoadAvgMsec(std::chrono::milliseconds ms) : void
+resetLoadAvg(double value = 0.0) : void
+getAvgLoopTime() const : double
+isRunning() const : bool
+waitUntilRunning() : void
+getNotificationQueueSize() const : size_t
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+isInEventBaseThread() const : bool
+inRunningEventBaseThread() const : bool
+checkIsInEventBaseThread() const : void
+dcheckIsInEventBaseThread() const : void
+timer() : HHWheelTimer &
+getBackend() : EventBaseBackendBase *
+getLibeventBase() const : event_base *
{static} +getLibeventVersion() : const char *
{static} +getLibeventMethod() : const char *
+bumpHandlingTime() : void
+setObserver(const std::shared_ptr<EventBaseObserver> & observer) : void
+getObserver() : const std::shared_ptr<EventBaseObserver> &
+setExecutionObserver(ExecutionObserver * observer) : void
+getExecutionObserver() : ExecutionObserver *
+setName(const std::string & name) : void
+getName() : const std::string &
+add(Cob fn) : void
+drive() : void
+scheduleAt(EventBase::Func && fn, const ScheduledExecutor::TimePoint & timeout) : void
+attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void
+detachTimeoutManager(AsyncTimeout * obj) : void
+scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool
+cancelTimeout(AsyncTimeout * obj) : void
+isInTimeoutManagerThread() : bool
+getVirtualEventBase() : VirtualEventBase &
+getEventBase() : EventBase *
{static} +getDefaultBackend() : std::unique_ptr<EventBaseBackendBase>
+runInEventBaseThread<T>(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAlwaysEnqueue<T>(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) : void
+runImmediatelyOrRunInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) : void
}
class "IOThreadPoolExecutor" as C_0000260170505900481834
class C_0000260170505900481834 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58{IOThreadPoolExecutor}]] {
+IOThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+~IOThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getEventBase() : EventBase *
{static} +getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *
+getEventBaseManager() : EventBaseManager *
}
class "ManualExecutor" as C_0002235860541734359952
class C_0002235860541734359952 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38{ManualExecutor}]] {
+~ManualExecutor() : void
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+makeProgress() : void
+drive() : void
+scheduleAt(Func && f, const ScheduledExecutor::TimePoint & t) : void
+advance(const ScheduledExecutor::Duration & dur) : void
+advanceTo(const ScheduledExecutor::TimePoint & t) : void
+now() : ScheduledExecutor::TimePoint
+clear() : std::size_t
+keepAliveAcquire() : bool
+keepAliveRelease() : void
+waitFor<F>(const F & f) : void
}
class "MeteredExecutor" as C_0001956570166673420631
class C_0001956570166673420631 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41{MeteredExecutor}]] {
+MeteredExecutor(std::unique_ptr<Executor> exe) : void
+MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void
+~MeteredExecutor() : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+add(Func func) : void
}
class "StrandExecutor" as C_0000587962468506435170
class C_0000587962468506435170 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122{StrandExecutor}]] {
{static} +create() : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context) : Executor::KeepAlive<StrandExecutor>
{static} +create(Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context, Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
class "fibers::FiberManager" as C_0001206661724003471988
class C_0001206661724003471988 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80{FiberManager}]] {
+FiberManager(const fibers::FiberManager & ) : void
+operator=(const fibers::FiberManager & ) : fibers::FiberManager &
+FiberManager(std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+~FiberManager() : void
+loopController() : fibers::LoopController &
+loopController() const : const fibers::LoopController &
+loopUntilNoReady() : void
+loopUntilNoReadyImpl() : void
+runEagerFiberImpl(fibers::Fiber * ) : void
+shouldRunLoopRemote() : bool
+hasTasks() const : bool
+numActiveTasks() const : size_t
+hasReadyTasks() const : bool
+setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void
+add(Func f) : void
+fibersAllocated() const : size_t
+fibersPoolSize() const : size_t
+hasActiveFiber() const : bool
+getCurrentTaskRunningTime() const : Optional<std::chrono::nanoseconds>
+currentFiber() const : fibers::Fiber *
+stackHighWatermark() const : size_t
+yield() : void
+setObserver(ExecutionObserver * observer) : void
+getObserver() : ExecutionObserver *
+setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void
+runQueueSize() const : size_t
{static} +getFiberManager() : fibers::FiberManager &
{static} +getFiberManagerUnsafe() : fibers::FiberManager *
+getOptions() const : const fibers::FiberManager::Options &
+FiberManager<LocalT>(LocalType<LocalT> , std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+addTask<F>(F && func, fibers::TaskOptions taskOptions = TaskOptions()) : void
+addTaskFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskEager<F>(F && func) : void
+addTaskEagerFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskRemote<F>(F && func) : void
+addTaskRemoteFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskFinally<F,G>(F && func, G && finally) : void
+addTaskFinallyEager<F,G>(F && func, G && finally) : void
+runInMainContext<F>(F && func) : invoke_result_t<F>
+local<T>() : T &
{static} +localThread<T>() : T &
}
class "futures::detail::WaitExecutor" as C_0000346702971661703291
class C_0000346702971661703291 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478{WaitExecutor}]] {
+add(Func func) : void
+drive() : void
+driveUntil(Clock::time_point deadline) : bool
+detach() : void
{static} +create() : Executor::KeepAlive<futures::detail::WaitExecutor>
}
class "InlineExecutor" as C_0001612067402701865715
class C_0001612067402701865715 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30{InlineExecutor}]] {
{static} +instance() : InlineExecutor &
+add(Func f) : void
}
class "TimekeeperScheduledExecutor" as C_0001123262130157209492
class C_0001123262130157209492 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35{TimekeeperScheduledExecutor}]] {
+TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor & ) : void
+operator=(const TimekeeperScheduledExecutor & ) : TimekeeperScheduledExecutor &
+TimekeeperScheduledExecutor(TimekeeperScheduledExecutor && ) : void
+operator=(TimekeeperScheduledExecutor && ) : TimekeeperScheduledExecutor &
{static} +create(Executor::KeepAlive<> parent, Function<std::shared_ptr<Timekeeper> ()> getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive<TimekeeperScheduledExecutor>
+add(Func func) : void
+scheduleAt(Func && func, const ScheduledExecutor::TimePoint & t) : void
}
class "SerialExecutor" as C_0001402712402381953994
class C_0001402712402381953994 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53{SerialExecutor}]] {
+SerialExecutor(const SerialExecutor & ) : void
+operator=(const SerialExecutor & ) : SerialExecutor &
+SerialExecutor(SerialExecutor && ) : void
+operator=(SerialExecutor && ) : SerialExecutor &
{static} +create(Executor::KeepAlive<Executor> parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive<SerialExecutor>
{static} +createUnique(std::shared_ptr<Executor> parent = getCPUExecutor()) : SerialExecutor::UniquePtr
+add(Func func) : void
+addWithPriority(Func func, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
class "ThreadedExecutor" as C_0000470362430235503729
class C_0000470362430235503729 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55{ThreadedExecutor}]] {
+ThreadedExecutor(std::shared_ptr<ThreadFactory> threadFactory = newDefaultThreadFactory()) : void
+~ThreadedExecutor() : void
+ThreadedExecutor(const ThreadedExecutor & ) : void
+ThreadedExecutor(ThreadedExecutor && ) : void
+operator=(const ThreadedExecutor & ) : ThreadedExecutor &
+operator=(ThreadedExecutor && ) : ThreadedExecutor &
+add(Func func) : void
}
abstract "SoftRealTimeExecutor" as C_0000560396763155385774
abstract C_0000560396763155385774 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26{SoftRealTimeExecutor}]] {
}
class "EDFThreadPoolExecutor" as C_0000586027154664049253
class C_0000586027154664049253 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34{EDFThreadPoolExecutor}]] {
+EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("EDFThreadPool")) : void
+~EDFThreadPoolExecutor() : void
+add(Func f) : void
+add(Func f, uint64_t deadline) : void
+add(Func f, std::size_t total, uint64_t deadline) : void
+add(std::vector<Func> fs, uint64_t deadline) : void
+deadlineExecutor(uint64_t deadline) : Executor::KeepAlive<>
{static} +kEarliestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40{kEarliestDeadline}]]]
{static} +kLatestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41{kLatestDeadline}]]]
}
C_0001663594882877424244 ..> C_0002222099135672593686
C_0002222099135672593686 <|- - C_0001663594882877424244
C_0002222099135672593686 <|- - C_0001968432200878677255
C_0002222099135672593686 <|- - C_0000481841646641149488
C_0000481841646641149488 <|- - C_0000769434624932181431
C_0002145523347961259416 ..> C_0001970350906198958245
C_0002222099135672593686 <|- - C_0002145523347961259416
C_0002222099135672593686 <|- - C_0001347291497865252100
C_0001932117148827315960 - -+ C_0001347291497865252100
C_0001932117148827315960 ..> C_0002222099135672593686
C_0001932117148827315960 - -> C_0002222099135672593686 : -executor_
C_0002222099135672593686 <|- - C_0001932117148827315960
C_0001347291497865252100 <|- - C_0002292058893312396804
C_0002292058893312396804 <|- - C_0001740134810840364719
C_0002222099135672593686 <|- - C_0001218209673148292552
C_0002222099135672593686 <|- - C_0000155178671636628489
C_0000481841646641149488 <|- - C_0001970350906198958245
C_0002145523347961259416 <|- - C_0001970350906198958245
C_0000155178671636628489 <|- - C_0001970350906198958245
C_0001218209673148292552 <|- - C_0001970350906198958245
C_0000260170505900481834 ..> C_0001970350906198958245
C_0002292058893312396804 <|- - C_0000260170505900481834
C_0002145523347961259416 <|- - C_0000260170505900481834
C_0000481841646641149488 <|- - C_0002235860541734359952
C_0001218209673148292552 <|- - C_0002235860541734359952
C_0000155178671636628489 <|- - C_0002235860541734359952
C_0001956570166673420631 ..> C_0002222099135672593686
C_0001956570166673420631 o- - C_0002222099135672593686 : -ownedExecutor_
C_0001347291497865252100 <|- - C_0001956570166673420631
C_0000155178671636628489 <|- - C_0000587962468506435170
C_0002222099135672593686 <|- - C_0001206661724003471988
C_0002222099135672593686 <|- - C_0000346702971661703291
C_0001612067402701865715 - -> C_0001612067402701865715 : -cache
C_0002222099135672593686 <|- - C_0001612067402701865715
C_0001123262130157209492 ..> C_0002222099135672593686
C_0001218209673148292552 <|- - C_0001123262130157209492
C_0001402712402381953994 ..> C_0002222099135672593686
C_0000155178671636628489 <|- - C_0001402712402381953994
C_0002222099135672593686 <|- - C_0000470362430235503729
C_0002222099135672593686 <|- - C_0000560396763155385774
C_0000560396763155385774 <|- - C_0000586027154664049253
C_0002292058893312396804 <|- - C_0000586027154664049253

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>