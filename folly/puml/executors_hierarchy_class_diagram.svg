<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3422px" preserveAspectRatio="none" style="width:6104px;height:3422px;" version="1.1" viewBox="0 0 6104 3422" width="6104px" zoomAndPan="magnify"><defs><filter height="300%" id="fb2qbphz7hh40" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[af0a7ff7db33a62256b72072a2c62cae]
class C_0001663594882877424244--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" target="_top" title="ExecutorWithPriorityImpl" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" xlink:show="new" xlink:title="ExecutorWithPriorityImpl" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="124.8281" id="C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.5;" width="858" x="6" y="2000.5"/><ellipse cx="306.25" cy="2016.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M309.2188,2022.1406 Q308.6406,2022.4375 308,2022.5781 Q307.3594,2022.7344 306.6563,2022.7344 Q304.1563,2022.7344 302.8281,2021.0938 Q301.5156,2019.4375 301.5156,2016.3125 Q301.5156,2013.1875 302.8281,2011.5313 Q304.1563,2009.875 306.6563,2009.875 Q307.3594,2009.875 308,2010.0313 Q308.6563,2010.1875 309.2188,2010.4844 L309.2188,2013.2031 Q308.5938,2012.625 308,2012.3594 Q307.4063,2012.0781 306.7813,2012.0781 Q305.4375,2012.0781 304.75,2013.1563 Q304.0625,2014.2188 304.0625,2016.3125 Q304.0625,2018.4063 304.75,2019.4844 Q305.4375,2020.5469 306.7813,2020.5469 Q307.4063,2020.5469 308,2020.2813 Q308.5938,2020 309.2188,2019.4219 L309.2188,2022.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="193" x="326.75" y="2020.6543">detail::ExecutorWithPriorityImpl</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="54" x="813" y="1997.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="52" x="814" y="2009.6387">Callback</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="2032.5" y2="2032.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="2040.5" y2="2040.5"/><ellipse cx="17" cy="2051.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="832" x="26" y="2054.7104">create(Executor::KeepAlive&lt;Executor&gt; executor, Callback &amp;&amp; callback) : Executor::KeepAlive&lt;ExecutorWithPriorityImpl&lt;std::decay_t&lt;Callback&gt;&gt;&gt;</text><ellipse cx="17" cy="2064.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="26" y="2067.5151">ExecutorWithPriorityImpl&lt;Callback&gt;(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : void</text><ellipse cx="17" cy="2077.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="547" x="26" y="2080.3198">operator=(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="2089.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="26" y="2093.1245">ExecutorWithPriorityImpl&lt;Callback&gt;(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : void</text><ellipse cx="17" cy="2102.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="522" x="26" y="2105.9292">operator=(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="2115.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="2118.7339">add(Func func) : void</text></a><!--MD5=[2031eb5f8f6622e1fb649add07766b1c]
class C_0002222099135672593686--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" target="_top" title="An Executor accepts units of work with add(), which should be threadsafe." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" xlink:show="new" xlink:title="An Executor accepts units of work with add(), which should be threadsafe." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="163.2422" id="C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.5;" width="403" x="925" y="1981.5"/><ellipse cx="1094.25" cy="1997.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1094.3594,1992.8438 L1093.2031,1997.9219 L1095.5313,1997.9219 L1094.3594,1992.8438 Z M1092.875,1990.6094 L1095.8594,1990.6094 L1099.2188,2003 L1096.7656,2003 L1096,1999.9375 L1092.7188,1999.9375 L1091.9688,2003 L1089.5313,2003 L1092.875,1990.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="56" x="1114.75" y="2001.6543">Executor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1327" y1="2013.5" y2="2013.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="2019.5"/><ellipse cx="936" cy="2024.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="945" y="2027.7104">LO_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="2032.3047"/><ellipse cx="936" cy="2037.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="945" y="2040.5151">MID_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="2045.1094"/><ellipse cx="936" cy="2050.1094" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="112" x="945" y="2053.3198">HI_PRI : const int8_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1327" y1="2059.9141" y2="2059.9141"/><ellipse cx="936" cy="2070.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="945" y="2074.1245">~Executor() : void</text><ellipse cx="936" cy="2083.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="945" y="2086.9292">add(Func ) = 0 : void</text><ellipse cx="936" cy="2096.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="945" y="2099.7339">addWithPriority(Func , int8_t priority) : void</text><ellipse cx="936" cy="2109.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="945" y="2112.5386">getNumPriorities() const : uint8_t</text><ellipse cx="936" cy="2122.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="373" x="945" y="2125.3433">getKeepAliveToken(ExecutorT * executor) : KeepAlive&lt;ExecutorT&gt;</text><ellipse cx="936" cy="2134.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="377" x="945" y="2138.1479">getKeepAliveToken(ExecutorT &amp; executor) : KeepAlive&lt;ExecutorT&gt;</text><!--MD5=[eac2427df85742fb1d237bf28f3b9ebb]
class C_0001968432200878677255--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" target="_top" title="Runs inline like InlineExecutor, but with a queue so that any tasks added  to this executor by one of its own callbacks will be queued instead of  executed inline (nested). This is usually better behavior than Inline." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" xlink:show="new" xlink:title="Runs inline like InlineExecutor, but with a queue so that any tasks added  to this executor by one of its own callbacks will be queued instead of  executed inline (nested). This is usually better behavior than Inline." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="73.6094" id="C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="1750.5" y="629"/><ellipse cx="1792.5" cy="645" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1795.4688,650.6406 Q1794.8906,650.9375 1794.25,651.0781 Q1793.6094,651.2344 1792.9063,651.2344 Q1790.4063,651.2344 1789.0781,649.5938 Q1787.7656,647.9375 1787.7656,644.8125 Q1787.7656,641.6875 1789.0781,640.0313 Q1790.4063,638.375 1792.9063,638.375 Q1793.6094,638.375 1794.25,638.5313 Q1794.9063,638.6875 1795.4688,638.9844 L1795.4688,641.7031 Q1794.8438,641.125 1794.25,640.8594 Q1793.6563,640.5781 1793.0313,640.5781 Q1791.6875,640.5781 1791,641.6563 Q1790.3125,642.7188 1790.3125,644.8125 Q1790.3125,646.9063 1791,647.9844 Q1791.6875,649.0469 1793.0313,649.0469 Q1793.6563,649.0469 1794.25,648.7813 Q1794.8438,648.5 1795.4688,647.9219 L1795.4688,650.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="169" x="1812.5" y="649.1543">QueuedImmediateExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1751.5" x2="2010.5" y1="661" y2="661"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1751.5" x2="2010.5" y1="669" y2="669"/><ellipse cx="1761.5" cy="680" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="1770.5" y="683.2104">instance() : QueuedImmediateExecutor &amp;</text><ellipse cx="1761.5" cy="692.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1770.5" y="696.0151">add(Func callback) : void</text></a><!--MD5=[e43e6b0f73d65f42e1986cd71f7d317c]
class C_0000155178671636628489--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" target="_top" title="SequencedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" xlink:show="new" xlink:title="SequencedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="60.8047" id="C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.5;" width="190" x="1786" y="1478.5"/><ellipse cx="1815.4" cy="1494.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1818.3688,1500.1406 Q1817.7906,1500.4375 1817.15,1500.5781 Q1816.5094,1500.7344 1815.8063,1500.7344 Q1813.3063,1500.7344 1811.9781,1499.0938 Q1810.6656,1497.4375 1810.6656,1494.3125 Q1810.6656,1491.1875 1811.9781,1489.5313 Q1813.3063,1487.875 1815.8063,1487.875 Q1816.5094,1487.875 1817.15,1488.0313 Q1817.8063,1488.1875 1818.3688,1488.4844 L1818.3688,1491.2031 Q1817.7438,1490.625 1817.15,1490.3594 Q1816.5563,1490.0781 1815.9313,1490.0781 Q1814.5875,1490.0781 1813.9,1491.1563 Q1813.2125,1492.2188 1813.2125,1494.3125 Q1813.2125,1496.4063 1813.9,1497.4844 Q1814.5875,1498.5469 1815.9313,1498.5469 Q1816.5563,1498.5469 1817.15,1498.2813 Q1817.7438,1498 1818.3688,1497.4219 L1818.3688,1500.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="126" x="1832.6" y="1498.6543">SequencedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1787" x2="1975" y1="1510.5" y2="1510.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1787" x2="1975" y1="1518.5" y2="1518.5"/><ellipse cx="1797" cy="1529.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1806" y="1532.7104">~SequencedExecutor() : void</text></a><!--MD5=[f8810983e380b6f94822d53c6adb6631]
class C_0000587962468506435170--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" target="_top" title="StrandExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" xlink:show="new" xlink:title="StrandExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="137.6328" id="C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.5;" width="757" x="2696" y="1216"/><ellipse cx="3021.75" cy="1232" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3024.7188,1237.6406 Q3024.1406,1237.9375 3023.5,1238.0781 Q3022.8594,1238.2344 3022.1563,1238.2344 Q3019.6563,1238.2344 3018.3281,1236.5938 Q3017.0156,1234.9375 3017.0156,1231.8125 Q3017.0156,1228.6875 3018.3281,1227.0313 Q3019.6563,1225.375 3022.1563,1225.375 Q3022.8594,1225.375 3023.5,1225.5313 Q3024.1563,1225.6875 3024.7188,1225.9844 L3024.7188,1228.7031 Q3024.0938,1228.125 3023.5,1227.8594 Q3022.9063,1227.5781 3022.2813,1227.5781 Q3020.9375,1227.5781 3020.25,1228.6563 Q3019.5625,1229.7188 3019.5625,1231.8125 Q3019.5625,1233.9063 3020.25,1234.9844 Q3020.9375,1236.0469 3022.2813,1236.0469 Q3022.9063,1236.0469 3023.5,1235.7813 Q3024.0938,1235.5 3024.7188,1234.9219 L3024.7188,1237.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="3042.25" y="1236.1543">StrandExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2697" x2="3452" y1="1248" y2="1248"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2697" x2="3452" y1="1256" y2="1256"/><ellipse cx="2707" cy="1267" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="272" x="2716" y="1270.2104">create() : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2707" cy="1279.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="504" x="2716" y="1283.0151">create(std::shared_ptr&lt;StrandContext&gt; context) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2707" cy="1292.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="491" x="2716" y="1295.8198">create(Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2707" cy="1305.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="731" x="2716" y="1308.6245">create(std::shared_ptr&lt;StrandContext&gt; context, Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2707" cy="1318.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2716" y="1321.4292">add(Func f) : void</text><ellipse cx="2707" cy="1331.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2716" y="1334.2339">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="2707" cy="1343.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2716" y="1347.0386">getNumPriorities() const : uint8_t</text></a><!--MD5=[b291e34916abaf3d21badf1de86aae69]
class C_0002145523347961259416--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" target="_top" title="IOExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" xlink:show="new" xlink:title="IOExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="73.6094" id="C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="1772" y="738"/><ellipse cx="1842.75" cy="754" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1842.8594,749.3438 L1841.7031,754.4219 L1844.0313,754.4219 L1842.8594,749.3438 Z M1841.375,747.1094 L1844.3594,747.1094 L1847.7188,759.5 L1845.2656,759.5 L1844.5,756.4375 L1841.2188,756.4375 L1840.4688,759.5 L1838.0313,759.5 L1841.375,747.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="1863.25" y="758.1543">IOExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1773" x2="1989" y1="770" y2="770"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1773" x2="1989" y1="778" y2="778"/><ellipse cx="1783" cy="789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1792" y="792.2104">~IOExecutor() = default : void</text><ellipse cx="1783" cy="801.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="192" x="1792" y="805.0151">getEventBase() = 0 : EventBase *</text></a><!--MD5=[411d68fd5f298e02cc7be27b9b9671fb]
class C_0001970350906198958245--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22" target="_top" title="EventBase" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22" xlink:show="new" xlink:title="EventBase" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="829.0859" id="C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.5;" width="895" x="2627" y="351.5"/><ellipse cx="3037.25" cy="367.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3040.2188,373.1406 Q3039.6406,373.4375 3039,373.5781 Q3038.3594,373.7344 3037.6563,373.7344 Q3035.1563,373.7344 3033.8281,372.0938 Q3032.5156,370.4375 3032.5156,367.3125 Q3032.5156,364.1875 3033.8281,362.5313 Q3035.1563,360.875 3037.6563,360.875 Q3038.3594,360.875 3039,361.0313 Q3039.6563,361.1875 3040.2188,361.4844 L3040.2188,364.2031 Q3039.5938,363.625 3039,363.3594 Q3038.4063,363.0781 3037.7813,363.0781 Q3036.4375,363.0781 3035.75,364.1563 Q3035.0625,365.2188 3035.0625,367.3125 Q3035.0625,369.4063 3035.75,370.4844 Q3036.4375,371.5469 3037.7813,371.5469 Q3038.4063,371.5469 3039,371.2813 Q3039.5938,371 3040.2188,370.4219 L3040.2188,373.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="3057.75" y="371.6543">EventBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2628" x2="3521" y1="383.5" y2="383.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2628" x2="3521" y1="391.5" y2="391.5"/><ellipse cx="2638" cy="402.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="2647" y="405.7104">EventBase(std::chrono::milliseconds tickInterval) : void</text><ellipse cx="2638" cy="415.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2647" y="418.5151">EventBase() : void</text><ellipse cx="2638" cy="428.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="2647" y="431.3198">EventBase(bool enableTimeMeasurement) : void</text><ellipse cx="2638" cy="440.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="2647" y="444.1245">EventBase(const EventBase &amp; ) : void</text><ellipse cx="2638" cy="453.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2647" y="456.9292">operator=(const EventBase &amp; ) : EventBase &amp;</text><ellipse cx="2638" cy="466.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="2647" y="469.7339">EventBase(event_base * evb, bool enableTimeMeasurement = true) : void</text><ellipse cx="2638" cy="479.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="2647" y="482.5386">EventBase(EventBase::Options options) : void</text><ellipse cx="2638" cy="492.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2647" y="495.3433">~EventBase() : void</text><ellipse cx="2638" cy="504.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2647" y="508.1479">loop() : bool</text><ellipse cx="2638" cy="517.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="2647" y="520.9526">loopIgnoreKeepAlive() : bool</text><ellipse cx="2638" cy="530.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2647" y="533.7573">loopOnce(int flags = 0) : bool</text><ellipse cx="2638" cy="543.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2647" y="546.562">loopForever() : void</text><ellipse cx="2638" cy="556.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2647" y="559.3667">terminateLoopSoon() : void</text><ellipse cx="2638" cy="568.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="869" x="2647" y="572.1714">runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr&lt;RequestContext&gt; rctx = RequestContext::saveContext()) : void</text><ellipse cx="2638" cy="581.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="2647" y="584.9761">runInLoop(EventBase::Func c, bool thisIteration = false) : void</text><ellipse cx="2638" cy="594.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="2647" y="597.7808">runOnDestruction(EventBase::OnDestructionCallback &amp; callback) : void</text><ellipse cx="2638" cy="607.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="2647" y="610.5854">runOnDestruction(EventBase::Func f) : void</text><ellipse cx="2638" cy="620.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="2647" y="623.3901">runBeforeLoop(EventBase::LoopCallback * callback) : void</text><ellipse cx="2638" cy="632.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="2647" y="636.1948">runInEventBaseThread(EventBase::Func fn) : void</text><ellipse cx="2638" cy="645.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="2647" y="648.9995">runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void</text><ellipse cx="2638" cy="658.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="2647" y="661.8042">runInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="2638" cy="671.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="2647" y="674.6089">runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="2638" cy="684.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="2647" y="687.4136">setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void</text><ellipse cx="2638" cy="697.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="2647" y="700.2183">setLoadAvgMsec(std::chrono::milliseconds ms) : void</text><ellipse cx="2638" cy="709.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2647" y="713.0229">resetLoadAvg(double value = 0.0) : void</text><ellipse cx="2638" cy="722.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2647" y="725.8276">getAvgLoopTime() const : double</text><ellipse cx="2638" cy="735.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="2647" y="738.6323">isRunning() const : bool</text><ellipse cx="2638" cy="748.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2647" y="751.437">waitUntilRunning() : void</text><ellipse cx="2638" cy="761.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="2647" y="764.2417">getNotificationQueueSize() const : size_t</text><ellipse cx="2638" cy="773.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2647" y="777.0464">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="2638" cy="786.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2647" y="789.8511">isInEventBaseThread() const : bool</text><ellipse cx="2638" cy="799.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="2647" y="802.6558">inRunningEventBaseThread() const : bool</text><ellipse cx="2638" cy="812.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="2647" y="815.4604">checkIsInEventBaseThread() const : void</text><ellipse cx="2638" cy="825.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="2647" y="828.2651">dcheckIsInEventBaseThread() const : void</text><ellipse cx="2638" cy="837.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2647" y="841.0698">timer() : HHWheelTimer &amp;</text><ellipse cx="2638" cy="850.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="2647" y="853.8745">getBackend() : EventBaseBackendBase *</text><ellipse cx="2638" cy="863.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="2647" y="866.6792">getLibeventBase() const : event_base *</text><ellipse cx="2638" cy="876.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="2647" y="879.4839">getLibeventVersion() : const char *</text><ellipse cx="2638" cy="889.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="2647" y="892.2886">getLibeventMethod() : const char *</text><ellipse cx="2638" cy="901.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2647" y="905.0933">bumpHandlingTime() : void</text><ellipse cx="2638" cy="914.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="2647" y="917.8979">setObserver(const std::shared_ptr&lt;EventBaseObserver&gt; &amp; observer) : void</text><ellipse cx="2638" cy="927.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="2647" y="930.7026">getObserver() : const std::shared_ptr&lt;EventBaseObserver&gt; &amp;</text><ellipse cx="2638" cy="940.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="2647" y="943.5073">setExecutionObserver(ExecutionObserver * observer) : void</text><ellipse cx="2638" cy="953.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="2647" y="956.312">getExecutionObserver() : ExecutionObserver *</text><ellipse cx="2638" cy="965.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2647" y="969.1167">setName(const std::string &amp; name) : void</text><ellipse cx="2638" cy="978.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2647" y="981.9214">getName() : const std::string &amp;</text><ellipse cx="2638" cy="991.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2647" y="994.7261">add(Cob fn) : void</text><ellipse cx="2638" cy="1004.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2647" y="1007.5308">drive() : void</text><ellipse cx="2638" cy="1017.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="2647" y="1020.3354">scheduleAt(EventBase::Func &amp;&amp; fn, const ScheduledExecutor::TimePoint &amp; timeout) : void</text><ellipse cx="2638" cy="1029.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="2647" y="1033.1401">attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void</text><ellipse cx="2638" cy="1042.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="2647" y="1045.9448">detachTimeoutManager(AsyncTimeout * obj) : void</text><ellipse cx="2638" cy="1055.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="2647" y="1058.7495">scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool</text><ellipse cx="2638" cy="1068.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2647" y="1071.5542">cancelTimeout(AsyncTimeout * obj) : void</text><ellipse cx="2638" cy="1081.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2647" y="1084.3589">isInTimeoutManagerThread() : bool</text><ellipse cx="2638" cy="1093.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2647" y="1097.1636">getVirtualEventBase() : VirtualEventBase &amp;</text><ellipse cx="2638" cy="1106.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="2647" y="1109.9683">getEventBase() : EventBase *</text><ellipse cx="2638" cy="1119.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="2647" y="1122.7729">getDefaultBackend() : std::unique_ptr&lt;EventBaseBackendBase&gt;</text><ellipse cx="2638" cy="1132.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="2647" y="1135.5776">runInEventBaseThread(void (*)(T *) fn, T * arg) : void</text><ellipse cx="2638" cy="1145.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="2647" y="1148.3823">runInEventBaseThreadAlwaysEnqueue(void (*)(T *) fn, T * arg) : void</text><ellipse cx="2638" cy="1157.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="2647" y="1161.187">runInEventBaseThreadAndWait(void (*)(T *) fn, T * arg) : void</text><ellipse cx="2638" cy="1170.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="449" x="2647" y="1173.9917">runImmediatelyOrRunInEventBaseThreadAndWait(void (*)(T *) fn, T * arg) : void</text></a><!--MD5=[e39d5cb1daa64537bcdef5f48ceb7e5e]
class C_0000481841646641149488--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" target="_top" title="DrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" xlink:show="new" xlink:title="DrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="73.6094" id="C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.5;" width="229" x="1766.5" y="990"/><ellipse cx="1823.75" cy="1006" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1823.8594,1001.3438 L1822.7031,1006.4219 L1825.0313,1006.4219 L1823.8594,1001.3438 Z M1822.375,999.1094 L1825.3594,999.1094 L1828.7188,1011.5 L1826.2656,1011.5 L1825.5,1008.4375 L1822.2188,1008.4375 L1821.4688,1011.5 L1819.0313,1011.5 L1822.375,999.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="1844.25" y="1010.1543">DrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1767.5" x2="1994.5" y1="1022" y2="1022"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1767.5" x2="1994.5" y1="1030" y2="1030"/><ellipse cx="1777.5" cy="1041" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1786.5" y="1044.2104">~DrivableExecutor() = default : void</text><ellipse cx="1777.5" cy="1053.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1786.5" y="1057.0151">drive() = 0 : void</text></a><!--MD5=[533c44690536949bf73673dd85860041]
class C_0000769434624932181431--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" target="_top" title="TimedDrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" xlink:show="new" xlink:title="TimedDrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="214.4609" id="C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.5;" width="489" x="2830" y="103"/><ellipse cx="2999.25" cy="119" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3002.2188,124.6406 Q3001.6406,124.9375 3001,125.0781 Q3000.3594,125.2344 2999.6563,125.2344 Q2997.1563,125.2344 2995.8281,123.5938 Q2994.5156,121.9375 2994.5156,118.8125 Q2994.5156,115.6875 2995.8281,114.0313 Q2997.1563,112.375 2999.6563,112.375 Q3000.3594,112.375 3001,112.5313 Q3001.6563,112.6875 3002.2188,112.9844 L3002.2188,115.7031 Q3001.5938,115.125 3001,114.8594 Q3000.4063,114.5781 2999.7813,114.5781 Q2998.4375,114.5781 2997.75,115.6563 Q2997.0625,116.7188 2997.0625,118.8125 Q2997.0625,120.9063 2997.75,121.9844 Q2998.4375,123.0469 2999.7813,123.0469 Q3000.4063,123.0469 3001,122.7813 Q3001.5938,122.5 3002.2188,121.9219 L3002.2188,124.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="3019.75" y="123.1543">TimedDrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2831" x2="3318" y1="135" y2="135"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2831" x2="3318" y1="143" y2="143"/><ellipse cx="2841" cy="154" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2850" y="157.2104">TimedDrivableExecutor() : void</text><ellipse cx="2841" cy="166.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="2850" y="170.0151">~TimedDrivableExecutor() : void</text><ellipse cx="2841" cy="179.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2850" y="182.8198">drive() : void</text><ellipse cx="2841" cy="192.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2850" y="195.6245">try_drive() : bool</text><ellipse cx="2841" cy="205.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2850" y="208.4292">add(Func ) : void</text><ellipse cx="2841" cy="218.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2850" y="221.2339">run() : size_t</text><ellipse cx="2841" cy="230.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2850" y="234.0386">drain() : size_t</text><ellipse cx="2841" cy="243.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2850" y="246.8433">wait() : void</text><ellipse cx="2841" cy="256.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2850" y="259.6479">try_wait() : bool</text><ellipse cx="2841" cy="269.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="2850" y="272.4526">try_drive_for(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2841" cy="282.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="2850" y="285.2573">try_drive_until(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text><ellipse cx="2841" cy="294.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="2850" y="298.062">try_wait_for(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2841" cy="307.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="2850" y="310.8667">try_wait_until(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text></a><!--MD5=[de9d69c684837cdd83d5314dbeaaea39]
class C_0001218209673148292552--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" target="_top" title="ScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" xlink:show="new" xlink:title="ScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="124.8281" id="C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.5;" width="425" x="1668.5" y="1589.5"/><ellipse cx="1815.75" cy="1605.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1815.8594,1600.8438 L1814.7031,1605.9219 L1817.0313,1605.9219 L1815.8594,1600.8438 Z M1814.375,1598.6094 L1817.3594,1598.6094 L1820.7188,1611 L1818.2656,1611 L1817.5,1607.9375 L1814.2188,1607.9375 L1813.4688,1611 L1811.0313,1611 L1814.375,1598.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="1836.25" y="1609.6543">ScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1669.5" x2="2092.5" y1="1621.5" y2="1621.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1669.5" x2="2092.5" y1="1629.5" y2="1629.5"/><ellipse cx="1679.5" cy="1640.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1688.5" y="1643.7104">~ScheduledExecutor() = default : void</text><ellipse cx="1679.5" cy="1653.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="1688.5" y="1656.5151">add(Func ) = 0 : void</text><ellipse cx="1679.5" cy="1666.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1688.5" y="1669.3198">schedule(Func &amp;&amp; a) : void</text><ellipse cx="1679.5" cy="1678.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1688.5" y="1682.1245">schedule(Func &amp;&amp; a, const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="1679.5" cy="1691.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="1688.5" y="1694.9292">scheduleAt(Func &amp;&amp; , const ScheduledExecutor::TimePoint &amp; ) : void</text><ellipse cx="1679.5" cy="1704.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1688.5" y="1707.7339">now() : ScheduledExecutor::TimePoint</text></a><!--MD5=[4deb5614033ac86d675ee075ba2ead14]
class C_0001206661724003471988--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" target="_top" title="@class FiberManager  @brief Single-threaded task execution engine.  FiberManager allows semi-parallel task execution on the same thread. Each  task can notify FiberManager that it is blocked on something (via await())  call. This will pause execution of..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" xlink:show="new" xlink:title="@class FiberManager  @brief Single-threaded task execution engine.  FiberManager allows semi-parallel task execution on the same thread. Each  task can notify FiberManager that it is blocked on something (via await())  call. This will pause execution of..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="572.9922" id="C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.5;" width="832" x="1465" y="2364.5"/><ellipse cx="1812.25" cy="2380.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1815.2188,2386.1406 Q1814.6406,2386.4375 1814,2386.5781 Q1813.3594,2386.7344 1812.6563,2386.7344 Q1810.1563,2386.7344 1808.8281,2385.0938 Q1807.5156,2383.4375 1807.5156,2380.3125 Q1807.5156,2377.1875 1808.8281,2375.5313 Q1810.1563,2373.875 1812.6563,2373.875 Q1813.3594,2373.875 1814,2374.0313 Q1814.6563,2374.1875 1815.2188,2374.4844 L1815.2188,2377.2031 Q1814.5938,2376.625 1814,2376.3594 Q1813.4063,2376.0781 1812.7813,2376.0781 Q1811.4375,2376.0781 1810.75,2377.1563 Q1810.0625,2378.2188 1810.0625,2380.3125 Q1810.0625,2382.4063 1810.75,2383.4844 Q1811.4375,2384.5469 1812.7813,2384.5469 Q1813.4063,2384.5469 1814,2384.2813 Q1814.5938,2384 1815.2188,2383.4219 L1815.2188,2386.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="129" x="1832.75" y="2384.6543">fibers::FiberManager</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1466" x2="2296" y1="2396.5" y2="2396.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1466" x2="2296" y1="2404.5" y2="2404.5"/><ellipse cx="1476" cy="2415.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="1485" y="2418.7104">FiberManager(const fibers::FiberManager &amp; ) : void</text><ellipse cx="1476" cy="2428.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="1485" y="2431.5151">operator=(const fibers::FiberManager &amp; ) : fibers::FiberManager &amp;</text><ellipse cx="1476" cy="2441.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="684" x="1485" y="2444.3198">FiberManager(std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1476" cy="2453.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="1485" y="2457.1245">~FiberManager() : void</text><ellipse cx="1476" cy="2466.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1485" y="2469.9292">loopController() : fibers::LoopController &amp;</text><ellipse cx="1476" cy="2479.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1485" y="2482.7339">loopController() const : const fibers::LoopController &amp;</text><ellipse cx="1476" cy="2492.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1485" y="2495.5386">loopUntilNoReady() : void</text><ellipse cx="1476" cy="2505.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1485" y="2508.3433">loopUntilNoReadyImpl() : void</text><ellipse cx="1476" cy="2517.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1485" y="2521.1479">runEagerFiberImpl(fibers::Fiber * ) : void</text><ellipse cx="1476" cy="2530.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1485" y="2533.9526">shouldRunLoopRemote() : bool</text><ellipse cx="1476" cy="2543.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1485" y="2546.7573">hasTasks() const : bool</text><ellipse cx="1476" cy="2556.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1485" y="2559.562">numActiveTasks() const : size_t</text><ellipse cx="1476" cy="2569.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1485" y="2572.3667">hasReadyTasks() const : bool</text><ellipse cx="1476" cy="2581.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1485" y="2585.1714">setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void</text><ellipse cx="1476" cy="2594.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1485" y="2597.9761">add(Func f) : void</text><ellipse cx="1476" cy="2607.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1485" y="2610.7808">fibersAllocated() const : size_t</text><ellipse cx="1476" cy="2620.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1485" y="2623.5854">fibersPoolSize() const : size_t</text><ellipse cx="1476" cy="2633.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1485" y="2636.3901">hasActiveFiber() const : bool</text><ellipse cx="1476" cy="2645.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="1485" y="2649.1948">getCurrentTaskRunningTime() const : Optional&lt;std::chrono::nanoseconds&gt;</text><ellipse cx="1476" cy="2658.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1485" y="2661.9995">currentFiber() const : fibers::Fiber *</text><ellipse cx="1476" cy="2671.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1485" y="2674.8042">stackHighWatermark() const : size_t</text><ellipse cx="1476" cy="2684.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1485" y="2687.6089">yield() : void</text><ellipse cx="1476" cy="2697.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="1485" y="2700.4136">setObserver(ExecutionObserver * observer) : void</text><ellipse cx="1476" cy="2710.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1485" y="2713.2183">getObserver() : ExecutionObserver *</text><ellipse cx="1476" cy="2722.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="1485" y="2726.0229">setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void</text><ellipse cx="1476" cy="2735.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1485" y="2738.8276">runQueueSize() const : size_t</text><ellipse cx="1476" cy="2748.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="247" x="1485" y="2751.6323">getFiberManager() : fibers::FiberManager &amp;</text><ellipse cx="1476" cy="2761.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="283" x="1485" y="2764.437">getFiberManagerUnsafe() : fibers::FiberManager *</text><ellipse cx="1476" cy="2774.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="1485" y="2777.2417">getOptions() const : const fibers::FiberManager::Options &amp;</text><ellipse cx="1476" cy="2786.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="806" x="1485" y="2790.0464">FiberManager(LocalType&lt;LocalT&gt; , std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1476" cy="2799.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="1485" y="2802.8511">addTask(F &amp;&amp; func, fibers::TaskOptions taskOptions = TaskOptions()) : void</text><ellipse cx="1476" cy="2812.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="1485" y="2815.6558">addTaskFuture(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1476" cy="2825.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1485" y="2828.4604">addTaskEager(F &amp;&amp; func) : void</text><ellipse cx="1476" cy="2838.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="1485" y="2841.2651">addTaskEagerFuture(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1476" cy="2850.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1485" y="2854.0698">addTaskRemote(F &amp;&amp; func) : void</text><ellipse cx="1476" cy="2863.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="1485" y="2866.8745">addTaskRemoteFuture(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1476" cy="2876.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="1485" y="2879.6792">addTaskFinally(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1476" cy="2889.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="1485" y="2892.4839">addTaskFinallyEager(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1476" cy="2902.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="1485" y="2905.2886">runInMainContext(F &amp;&amp; func) : invoke_result_t&lt;F&gt;</text><ellipse cx="1476" cy="2914.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1485" y="2918.0933">local() : T &amp;</text><ellipse cx="1476" cy="2927.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="107" x="1485" y="2930.8979">localThread() : T &amp;</text></a><!--MD5=[ba7273969468a5ac8bf1d40283557580]
class C_0000346702971661703291--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" target="_top" title="WaitExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" xlink:show="new" xlink:title="WaitExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="112.0234" id="C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.5;" width="371" x="1695.5" y="2973"/><ellipse cx="1787.75" cy="2989" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1790.7188,2994.6406 Q1790.1406,2994.9375 1789.5,2995.0781 Q1788.8594,2995.2344 1788.1563,2995.2344 Q1785.6563,2995.2344 1784.3281,2993.5938 Q1783.0156,2991.9375 1783.0156,2988.8125 Q1783.0156,2985.6875 1784.3281,2984.0313 Q1785.6563,2982.375 1788.1563,2982.375 Q1788.8594,2982.375 1789.5,2982.5313 Q1790.1563,2982.6875 1790.7188,2982.9844 L1790.7188,2985.7031 Q1790.0938,2985.125 1789.5,2984.8594 Q1788.9063,2984.5781 1788.2813,2984.5781 Q1786.9375,2984.5781 1786.25,2985.6563 Q1785.5625,2986.7188 1785.5625,2988.8125 Q1785.5625,2990.9063 1786.25,2991.9844 Q1786.9375,2993.0469 1788.2813,2993.0469 Q1788.9063,2993.0469 1789.5,2992.7813 Q1790.0938,2992.5 1790.7188,2991.9219 L1790.7188,2994.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="178" x="1808.25" y="2993.1543">futures::detail::WaitExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1696.5" x2="2065.5" y1="3005" y2="3005"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1696.5" x2="2065.5" y1="3013" y2="3013"/><ellipse cx="1706.5" cy="3024" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1715.5" y="3027.2104">add(Func func) : void</text><ellipse cx="1706.5" cy="3036.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1715.5" y="3040.0151">drive() : void</text><ellipse cx="1706.5" cy="3049.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1715.5" y="3052.8198">driveUntil(Clock::time_point deadline) : bool</text><ellipse cx="1706.5" cy="3062.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1715.5" y="3065.6245">detach() : void</text><ellipse cx="1706.5" cy="3075.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="1715.5" y="3078.4292">create() : Executor::KeepAlive&lt;futures::detail::WaitExecutor&gt;</text></a><!--MD5=[667ed72eb2108e1d2d692e666b9ea841]
class C_0001612067402701865715--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" target="_top" title="When work is &quot;queued&quot;, execute it immediately inline. Usually when you think you want this, you actually want a QueuedImmediateExecutor." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" xlink:show="new" xlink:title="When work is &quot;queued&quot;, execute it immediately inline. Usually when you think you want this, you actually want a QueuedImmediateExecutor." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="73.6094" id="C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.5;" width="187" x="1787.5" y="3165"/><ellipse cx="1832.75" cy="3181" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1835.7188,3186.6406 Q1835.1406,3186.9375 1834.5,3187.0781 Q1833.8594,3187.2344 1833.1563,3187.2344 Q1830.6563,3187.2344 1829.3281,3185.5938 Q1828.0156,3183.9375 1828.0156,3180.8125 Q1828.0156,3177.6875 1829.3281,3176.0313 Q1830.6563,3174.375 1833.1563,3174.375 Q1833.8594,3174.375 1834.5,3174.5313 Q1835.1563,3174.6875 1835.7188,3174.9844 L1835.7188,3177.7031 Q1835.0938,3177.125 1834.5,3176.8594 Q1833.9063,3176.5781 1833.2813,3176.5781 Q1831.9375,3176.5781 1831.25,3177.6563 Q1830.5625,3178.7188 1830.5625,3180.8125 Q1830.5625,3182.9063 1831.25,3183.9844 Q1831.9375,3185.0469 1833.2813,3185.0469 Q1833.9063,3185.0469 1834.5,3184.7813 Q1835.0938,3184.5 1835.7188,3183.9219 L1835.7188,3186.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="1853.25" y="3185.1543">InlineExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1788.5" x2="1973.5" y1="3197" y2="3197"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1788.5" x2="1973.5" y1="3205" y2="3205"/><ellipse cx="1798.5" cy="3216" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="161" x="1807.5" y="3219.2104">instance() : InlineExecutor &amp;</text><ellipse cx="1798.5" cy="3228.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1807.5" y="3232.0151">add(Func f) : void</text></a><!--MD5=[3310bdfe54858106abec0578bfe16154]
class C_0001123262130157209492--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" target="_top" title="TimekeeperScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" xlink:show="new" xlink:title="TimekeeperScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="137.6328" id="C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.5;" width="1097" x="2526" y="1863"/><ellipse cx="2973.25" cy="1879" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2976.2188,1884.6406 Q2975.6406,1884.9375 2975,1885.0781 Q2974.3594,1885.2344 2973.6563,1885.2344 Q2971.1563,1885.2344 2969.8281,1883.5938 Q2968.5156,1881.9375 2968.5156,1878.8125 Q2968.5156,1875.6875 2969.8281,1874.0313 Q2971.1563,1872.375 2973.6563,1872.375 Q2974.3594,1872.375 2975,1872.5313 Q2975.6563,1872.6875 2976.2188,1872.9844 L2976.2188,1875.7031 Q2975.5938,1875.125 2975,1874.8594 Q2974.4063,1874.5781 2973.7813,1874.5781 Q2972.4375,1874.5781 2971.75,1875.6563 Q2971.0625,1876.7188 2971.0625,1878.8125 Q2971.0625,1880.9063 2971.75,1881.9844 Q2972.4375,1883.0469 2973.7813,1883.0469 Q2974.4063,1883.0469 2975,1882.7813 Q2975.5938,1882.5 2976.2188,1881.9219 L2976.2188,1884.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="2993.75" y="1883.1543">TimekeeperScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2527" x2="3622" y1="1895" y2="1895"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2527" x2="3622" y1="1903" y2="1903"/><ellipse cx="2537" cy="1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="2546" y="1917.2104">TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &amp; ) : void</text><ellipse cx="2537" cy="1926.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="2546" y="1930.0151">operator=(const TimekeeperScheduledExecutor &amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2537" cy="1939.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="2546" y="1942.8198">TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &amp;&amp; ) : void</text><ellipse cx="2537" cy="1952.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="2546" y="1955.6245">operator=(TimekeeperScheduledExecutor &amp;&amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2537" cy="1965.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1071" x="2546" y="1968.4292">create(Executor::KeepAlive&lt;&gt; parent, Function&lt;std::shared_ptr&lt;Timekeeper&gt; ()&gt; getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive&lt;TimekeeperScheduledExecutor&gt;</text><ellipse cx="2537" cy="1978.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2546" y="1981.2339">add(Func func) : void</text><ellipse cx="2537" cy="1990.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="420" x="2546" y="1994.0386">scheduleAt(Func &amp;&amp; func, const ScheduledExecutor::TimePoint &amp; t) : void</text></a><!--MD5=[bdef50c016f6dbeac54a3e0ea6a4bc7d]
class C_0001347291497865252100--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" target="_top" title="An Executor accepts units of work with add(), which should be threadsafe." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" xlink:show="new" xlink:title="An Executor accepts units of work with add(), which should be threadsafe." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="73.6094" id="C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.5;" width="222" x="2963.5" y="2107"/><ellipse cx="2992.45" cy="2123" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2995.4188,2128.6406 Q2994.8406,2128.9375 2994.2,2129.0781 Q2993.5594,2129.2344 2992.8563,2129.2344 Q2990.3563,2129.2344 2989.0281,2127.5938 Q2987.7156,2125.9375 2987.7156,2122.8125 Q2987.7156,2119.6875 2989.0281,2118.0313 Q2990.3563,2116.375 2992.8563,2116.375 Q2993.5594,2116.375 2994.2,2116.5313 Q2994.8563,2116.6875 2995.4188,2116.9844 L2995.4188,2119.7031 Q2994.7938,2119.125 2994.2,2118.8594 Q2993.6063,2118.5781 2992.9813,2118.5781 Q2991.6375,2118.5781 2990.95,2119.6563 Q2990.2625,2120.7188 2990.2625,2122.8125 Q2990.2625,2124.9063 2990.95,2125.9844 Q2991.6375,2127.0469 2992.9813,2127.0469 Q2993.6063,2127.0469 2994.2,2126.7813 Q2994.7938,2126.5 2995.4188,2125.9219 L2995.4188,2128.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="159" x="3009.55" y="2127.1543">DefaultKeepAliveExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2964.5" x2="3184.5" y1="2139" y2="2139"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2964.5" x2="3184.5" y1="2147" y2="2147"/><ellipse cx="2974.5" cy="2158" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2983.5" y="2161.2104">~DefaultKeepAliveExecutor() : void</text><ellipse cx="2974.5" cy="2170.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2983.5" y="2174.0151">weakRef() : Executor::KeepAlive&lt;&gt;</text></a><!--MD5=[343663e47d76253bb0dfc7fb21c3ae29]
class C_0001932117148827315960--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" target="_top" title="DefaultKeepAliveExecutor##WeakRef" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" xlink:show="new" xlink:title="DefaultKeepAliveExecutor##WeakRef" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="99.2188" id="C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1590.5" y="2087.5"/><ellipse cx="1766.25" cy="2103.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1769.2188,2109.1406 Q1768.6406,2109.4375 1768,2109.5781 Q1767.3594,2109.7344 1766.6563,2109.7344 Q1764.1563,2109.7344 1762.8281,2108.0938 Q1761.5156,2106.4375 1761.5156,2103.3125 Q1761.5156,2100.1875 1762.8281,2098.5313 Q1764.1563,2096.875 1766.6563,2096.875 Q1767.3594,2096.875 1768,2097.0313 Q1768.6563,2097.1875 1769.2188,2097.4844 L1769.2188,2100.2031 Q1768.5938,2099.625 1768,2099.3594 Q1767.4063,2099.0781 1766.7813,2099.0781 Q1765.4375,2099.0781 1764.75,2100.1563 Q1764.0625,2101.2188 1764.0625,2103.3125 Q1764.0625,2105.4063 1764.75,2106.4844 Q1765.4375,2107.5469 1766.7813,2107.5469 Q1767.4063,2107.5469 1768,2107.2813 Q1768.5938,2107 1769.2188,2106.4219 L1769.2188,2109.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="221" x="1786.75" y="2107.6543">DefaultKeepAliveExecutor::WeakRef</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1591.5" x2="2170.5" y1="2119.5" y2="2119.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1591.5" x2="2170.5" y1="2127.5" y2="2127.5"/><ellipse cx="1601.5" cy="2138.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="555" x="1610.5" y="2141.7104">create(std::shared_ptr&lt;ControlBlock&gt; controlBlock, Executor * executor) : Executor::KeepAlive&lt;&gt;</text><ellipse cx="1601.5" cy="2151.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1610.5" y="2154.5151">add(Func f) : void</text><ellipse cx="1601.5" cy="2164.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1610.5" y="2167.3198">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="1601.5" cy="2176.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1610.5" y="2180.1245">getNumPriorities() const : uint8_t</text></a><!--MD5=[b5e014653e631123d50dd7debc45a978]
class C_0002292058893312396804--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" target="_top" title="ThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" xlink:show="new" xlink:title="ThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="291.2891" id="C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.5;" width="823" x="3684" y="1998.5"/><ellipse cx="4028.25" cy="2014.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4028.3594,2009.8438 L4027.2031,2014.9219 L4029.5313,2014.9219 L4028.3594,2009.8438 Z M4026.875,2007.6094 L4029.8594,2007.6094 L4033.2188,2020 L4030.7656,2020 L4030,2016.9375 L4026.7188,2016.9375 L4025.9688,2020 L4023.5313,2020 L4026.875,2007.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126" x="4048.75" y="2018.6543">ThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3685" x2="4506" y1="2030.5" y2="2030.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3685" x2="4506" y1="2038.5" y2="2038.5"/><ellipse cx="3695" cy="2049.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="797" x="3704" y="2052.7104">ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory, bool isWaitForAll = false) : void</text><ellipse cx="3695" cy="2062.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3704" y="2065.5151">~ThreadPoolExecutor() : void</text><ellipse cx="3695" cy="2075.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="3704" y="2078.3198">add(Func func) = 0 : void</text><ellipse cx="3695" cy="2087.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="3704" y="2091.1245">add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void</text><ellipse cx="3695" cy="2100.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="3704" y="2103.9292">setThreadFactory(std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="3695" cy="2113.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="3704" y="2116.7339">getThreadFactory() const : std::shared_ptr&lt;ThreadFactory&gt;</text><ellipse cx="3695" cy="2126.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3704" y="2129.5386">numThreads() const : size_t</text><ellipse cx="3695" cy="2139.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3704" y="2142.3433">setNumThreads(size_t numThreads) : void</text><ellipse cx="3695" cy="2151.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3704" y="2155.1479">numActiveThreads() const : size_t</text><ellipse cx="3695" cy="2164.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3704" y="2167.9526">stop() : void</text><ellipse cx="3695" cy="2177.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3704" y="2180.7573">join() : void</text><ellipse cx="3695" cy="2190.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="332" x="3704" y="2193.562">withAll(FunctionRef&lt;void (ThreadPoolExecutor &amp;)&gt; f) : void</text><ellipse cx="3695" cy="2203.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3704" y="2206.3667">getPoolStats() const : ThreadPoolExecutor::PoolStats</text><ellipse cx="3695" cy="2215.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3704" y="2219.1714">getPendingTaskCount() const : size_t</text><ellipse cx="3695" cy="2228.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3704" y="2231.9761">getName() const : const std::string &amp;</text><ellipse cx="3695" cy="2241.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="3704" y="2244.7808">subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void</text><ellipse cx="3695" cy="2254.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3704" y="2257.5854">addObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3695" cy="2267.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3704" y="2270.3901">removeObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3695" cy="2279.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3704" y="2283.1948">setThreadDeathTimeout(std::chrono::milliseconds timeout) : void</text></a><!--MD5=[3945712266c557f24486d79132d211c5]
class C_0000260170505900481834--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" target="_top" title="A Thread Pool for IO bound tasks  @note Uses event_fd for notification, and waking an epoll loop.  There is one queue (NotificationQueue specifically) per thread/epoll.  If the thread is already running and not waiting on epoll,  we don't make any addit..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" xlink:show="new" xlink:title="A Thread Pool for IO bound tasks  @note Uses event_fd for notification, and waking an epoll loop.  There is one queue (NotificationQueue specifically) per thread/epoll.  If the thread is already running and not waiting on epoll,  we don't make any addit..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="150.4375" id="C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.5;" width="1525" x="4568" y="827"/><ellipse cx="5257.25" cy="843" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5260.2188,848.6406 Q5259.6406,848.9375 5259,849.0781 Q5258.3594,849.2344 5257.6563,849.2344 Q5255.1563,849.2344 5253.8281,847.5938 Q5252.5156,845.9375 5252.5156,842.8125 Q5252.5156,839.6875 5253.8281,838.0313 Q5255.1563,836.375 5257.6563,836.375 Q5258.3594,836.375 5259,836.5313 Q5259.6563,836.6875 5260.2188,836.9844 L5260.2188,839.7031 Q5259.5938,839.125 5259,838.8594 Q5258.4063,838.5781 5257.7813,838.5781 Q5256.4375,838.5781 5255.75,839.6563 Q5255.0625,840.7188 5255.0625,842.8125 Q5255.0625,844.9063 5255.75,845.9844 Q5256.4375,847.0469 5257.7813,847.0469 Q5258.4063,847.0469 5259,846.7813 Q5259.5938,846.5 5260.2188,845.9219 L5260.2188,848.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="5277.75" y="847.1543">IOThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4569" x2="6092" y1="859" y2="859"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4569" x2="6092" y1="867" y2="867"/><ellipse cx="4579" cy="878" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1388" x="4588" y="881.2104">IOThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4579" cy="890.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1499" x="4588" y="894.0151">IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4579" cy="903.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4588" y="906.8198">~IOThreadPoolExecutor() : void</text><ellipse cx="4579" cy="916.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4588" y="919.6245">add(Func func) : void</text><ellipse cx="4579" cy="929.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4588" y="932.4292">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4579" cy="942.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="4588" y="945.2339">getEventBase() : EventBase *</text><ellipse cx="4579" cy="954.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="382" x="4588" y="958.0386">getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *</text><ellipse cx="4579" cy="967.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="4588" y="970.8433">getEventBaseManager() : EventBaseManager *</text></a><!--MD5=[af034c985d0d2b969f7008656fc559c3]
class C_0001402712402381953994--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" target="_top" title="@class SerialExecutor  @brief Executor that guarantees serial non-concurrent execution of added      tasks  SerialExecutor is similar to boost asio's strand concept. A SerialExecutor  has a parent executor which is given at construction time (defaults t..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" xlink:show="new" xlink:title="@class SerialExecutor  @brief Executor that guarantees serial non-concurrent execution of added      tasks  SerialExecutor is similar to boost asio's strand concept. A SerialExecutor  has a parent executor which is given at construction time (defaults t..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="163.2422" id="C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.5;" width="771" x="2689" y="1664.5"/><ellipse cx="3025.25" cy="1680.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3028.2188,1686.1406 Q3027.6406,1686.4375 3027,1686.5781 Q3026.3594,1686.7344 3025.6563,1686.7344 Q3023.1563,1686.7344 3021.8281,1685.0938 Q3020.5156,1683.4375 3020.5156,1680.3125 Q3020.5156,1677.1875 3021.8281,1675.5313 Q3023.1563,1673.875 3025.6563,1673.875 Q3026.3594,1673.875 3027,1674.0313 Q3027.6563,1674.1875 3028.2188,1674.4844 L3028.2188,1677.2031 Q3027.5938,1676.625 3027,1676.3594 Q3026.4063,1676.0781 3025.7813,1676.0781 Q3024.4375,1676.0781 3023.75,1677.1563 Q3023.0625,1678.2188 3023.0625,1680.3125 Q3023.0625,1682.4063 3023.75,1683.4844 Q3024.4375,1684.5469 3025.7813,1684.5469 Q3026.4063,1684.5469 3027,1684.2813 Q3027.5938,1684 3028.2188,1683.4219 L3028.2188,1686.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="3045.75" y="1684.6543">SerialExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2690" x2="3459" y1="1696.5" y2="1696.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2690" x2="3459" y1="1704.5" y2="1704.5"/><ellipse cx="2700" cy="1715.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2709" y="1718.7104">SerialExecutor(const SerialExecutor &amp; ) : void</text><ellipse cx="2700" cy="1728.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="2709" y="1731.5151">operator=(const SerialExecutor &amp; ) : SerialExecutor &amp;</text><ellipse cx="2700" cy="1741.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2709" y="1744.3198">SerialExecutor(SerialExecutor &amp;&amp; ) : void</text><ellipse cx="2700" cy="1753.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2709" y="1757.1245">operator=(SerialExecutor &amp;&amp; ) : SerialExecutor &amp;</text><ellipse cx="2700" cy="1766.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="745" x="2709" y="1769.9292">create(Executor::KeepAlive&lt;Executor&gt; parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive&lt;SerialExecutor&gt;</text><ellipse cx="2700" cy="1779.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="551" x="2709" y="1782.7339">createUnique(std::shared_ptr&lt;Executor&gt; parent = getCPUExecutor()) : SerialExecutor::UniquePtr</text><ellipse cx="2700" cy="1792.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2709" y="1795.5386">add(Func func) : void</text><ellipse cx="2700" cy="1805.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2709" y="1808.3433">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="2700" cy="1817.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2709" y="1821.1479">getNumPriorities() const : uint8_t</text></a><!--MD5=[1b407b8a48c2e9a551c6d8a1a18940a0]
class C_0000470362430235503729--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" target="_top" title="*  ThreadedExecutor  An executor for blocking tasks.  This executor runs each task in its own thread. It works well for tasks  which mostly sleep, but works poorly for tasks which mostly compute.  For each task given to the executor with `add`, the exec..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" xlink:show="new" xlink:title="*  ThreadedExecutor  An executor for blocking tasks.  This executor runs each task in its own thread. It works well for tasks  which mostly sleep, but works poorly for tasks which mostly compute.  For each task given to the executor with `add`, the exec..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="137.6328" id="C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.5;" width="610" x="1576" y="3274"/><ellipse cx="1819.25" cy="3290" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1822.2188,3295.6406 Q1821.6406,3295.9375 1821,3296.0781 Q1820.3594,3296.2344 1819.6563,3296.2344 Q1817.1563,3296.2344 1815.8281,3294.5938 Q1814.5156,3292.9375 1814.5156,3289.8125 Q1814.5156,3286.6875 1815.8281,3285.0313 Q1817.1563,3283.375 1819.6563,3283.375 Q1820.3594,3283.375 1821,3283.5313 Q1821.6563,3283.6875 1822.2188,3283.9844 L1822.2188,3286.7031 Q1821.5938,3286.125 1821,3285.8594 Q1820.4063,3285.5781 1819.7813,3285.5781 Q1818.4375,3285.5781 1817.75,3286.6563 Q1817.0625,3287.7188 1817.0625,3289.8125 Q1817.0625,3291.9063 1817.75,3292.9844 Q1818.4375,3294.0469 1819.7813,3294.0469 Q1820.4063,3294.0469 1821,3293.7813 Q1821.5938,3293.5 1822.2188,3292.9219 L1822.2188,3295.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="1839.75" y="3294.1543">ThreadedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1577" x2="2185" y1="3306" y2="3306"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1577" x2="2185" y1="3314" y2="3314"/><ellipse cx="1587" cy="3325" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="1596" y="3328.2104">ThreadedExecutor(std::shared_ptr&lt;ThreadFactory&gt; threadFactory = newDefaultThreadFactory()) : void</text><ellipse cx="1587" cy="3337.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1596" y="3341.0151">~ThreadedExecutor() : void</text><ellipse cx="1587" cy="3350.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1596" y="3353.8198">ThreadedExecutor(const ThreadedExecutor &amp; ) : void</text><ellipse cx="1587" cy="3363.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1596" y="3366.6245">ThreadedExecutor(ThreadedExecutor &amp;&amp; ) : void</text><ellipse cx="1587" cy="3376.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="1596" y="3379.4292">operator=(const ThreadedExecutor &amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1587" cy="3389.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1596" y="3392.2339">operator=(ThreadedExecutor &amp;&amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1587" cy="3401.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1596" y="3405.0386">add(Func func) : void</text></a><!--MD5=[946b31b7442aaf60dac9cea044c2bbbe]
class C_0001740134810840364719--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" target="_top" title="A Thread pool for CPU bound tasks.  @note A single queue backed by folly/LifoSem and folly/MPMC queue.  Because of this contention can be quite high,  since all the worker threads and all the producer threads hit  the same queue. MPMC queue excels in th..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" xlink:show="new" xlink:title="A Thread pool for CPU bound tasks.  @note A single queue backed by folly/LifoSem and folly/MPMC queue.  Because of this contention can be quite high,  since all the worker threads and all the producer threads hit  the same queue. MPMC queue excels in th..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="240.0703" id="C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.5;" width="1385" x="4638" y="2063"/><ellipse cx="5250.75" cy="2079" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5253.7188,2084.6406 Q5253.1406,2084.9375 5252.5,2085.0781 Q5251.8594,2085.2344 5251.1563,2085.2344 Q5248.6563,2085.2344 5247.3281,2083.5938 Q5246.0156,2081.9375 5246.0156,2078.8125 Q5246.0156,2075.6875 5247.3281,2074.0313 Q5248.6563,2072.375 5251.1563,2072.375 Q5251.8594,2072.375 5252.5,2072.5313 Q5253.1563,2072.6875 5253.7188,2072.9844 L5253.7188,2075.7031 Q5253.0938,2075.125 5252.5,2074.8594 Q5251.9063,2074.5781 5251.2813,2074.5781 Q5249.9375,2074.5781 5249.25,2075.6563 Q5248.5625,2076.7188 5248.5625,2078.8125 Q5248.5625,2080.9063 5249.25,2081.9844 Q5249.9375,2083.0469 5251.2813,2083.0469 Q5251.9063,2083.0469 5252.5,2082.7813 Q5253.0938,2082.5 5253.7188,2081.9219 L5253.7188,2084.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="151" x="5271.25" y="2083.1543">CPUThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4639" x2="6022" y1="2095" y2="2095"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4644" y="2101"/><ellipse cx="4649" cy="2106" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="207" x="4658" y="2109.2104">kDefaultMaxQueueSize : const size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4639" x2="6022" y1="2115.8047" y2="2115.8047"/><ellipse cx="4649" cy="2126.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1257" x="4658" y="2130.0151">CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4649" cy="2139.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="4658" y="2142.8198">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4649" cy="2152.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4658" y="2155.6245">CPUThreadPoolExecutor(size_t numThreads) : void</text><ellipse cx="4649" cy="2165.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="4658" y="2168.4292">CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4649" cy="2178.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="666" x="4658" y="2181.2339">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4649" cy="2190.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1047" x="4658" y="2194.0386">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4649" cy="2203.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4658" y="2206.8433">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4649" cy="2216.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4658" y="2219.6479">~CPUThreadPoolExecutor() : void</text><ellipse cx="4649" cy="2229.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4658" y="2232.4526">add(Func func) : void</text><ellipse cx="4649" cy="2242.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4658" y="2245.2573">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4649" cy="2254.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4658" y="2258.062">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="4649" cy="2267.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="4658" y="2270.8667">add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4649" cy="2280.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="4658" y="2283.6714">getTaskQueueSize() const : size_t</text><ellipse cx="4649" cy="2293.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4658" y="2296.4761">getNumPriorities() const : uint8_t</text><!--MD5=[88ae743009cf121755e429a0e099ad9e]
class C_0002235860541734359952--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" target="_top" title="A ManualExecutor only does work when you turn the crank, by calling run() or indirectly with makeProgress() or waitFor(). The clock for a manual executor starts at 0 and advances only when you ask it to. i.e. time is also under manual control. NB No att..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" xlink:show="new" xlink:title="A ManualExecutor only does work when you turn the crank, by calling run() or indirectly with makeProgress() or waitFor(). The clock for a manual executor starts at 0 and advances only when you ask it to. i.e. time is also under manual control. NB No att..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="240.0703" id="C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.5;" width="426" x="2861.5" y="1389"/><ellipse cx="3020.25" cy="1405" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3023.2188,1410.6406 Q3022.6406,1410.9375 3022,1411.0781 Q3021.3594,1411.2344 3020.6563,1411.2344 Q3018.1563,1411.2344 3016.8281,1409.5938 Q3015.5156,1407.9375 3015.5156,1404.8125 Q3015.5156,1401.6875 3016.8281,1400.0313 Q3018.1563,1398.375 3020.6563,1398.375 Q3021.3594,1398.375 3022,1398.5313 Q3022.6563,1398.6875 3023.2188,1398.9844 L3023.2188,1401.7031 Q3022.5938,1401.125 3022,1400.8594 Q3021.4063,1400.5781 3020.7813,1400.5781 Q3019.4375,1400.5781 3018.75,1401.6563 Q3018.0625,1402.7188 3018.0625,1404.8125 Q3018.0625,1406.9063 3018.75,1407.9844 Q3019.4375,1409.0469 3020.7813,1409.0469 Q3021.4063,1409.0469 3022,1408.7813 Q3022.5938,1408.5 3023.2188,1407.9219 L3023.2188,1410.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="3040.75" y="1409.1543">ManualExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2862.5" x2="3286.5" y1="1421" y2="1421"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2862.5" x2="3286.5" y1="1429" y2="1429"/><ellipse cx="2872.5" cy="1440" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2881.5" y="1443.2104">~ManualExecutor() : void</text><ellipse cx="2872.5" cy="1452.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2881.5" y="1456.0151">add(Func ) : void</text><ellipse cx="2872.5" cy="1465.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2881.5" y="1468.8198">run() : size_t</text><ellipse cx="2872.5" cy="1478.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2881.5" y="1481.6245">drain() : size_t</text><ellipse cx="2872.5" cy="1491.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2881.5" y="1494.4292">wait() : void</text><ellipse cx="2872.5" cy="1504.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2881.5" y="1507.2339">makeProgress() : void</text><ellipse cx="2872.5" cy="1516.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2881.5" y="1520.0386">drive() : void</text><ellipse cx="2872.5" cy="1529.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="2881.5" y="1532.8433">scheduleAt(Func &amp;&amp; f, const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="2872.5" cy="1542.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="2881.5" y="1545.6479">advance(const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="2872.5" cy="1555.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="2881.5" y="1558.4526">advanceTo(const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="2872.5" cy="1568.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2881.5" y="1571.2573">now() : ScheduledExecutor::TimePoint</text><ellipse cx="2872.5" cy="1580.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2881.5" y="1584.062">clear() : std::size_t</text><ellipse cx="2872.5" cy="1593.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2881.5" y="1596.8667">keepAliveAcquire() : bool</text><ellipse cx="2872.5" cy="1606.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2881.5" y="1609.6714">keepAliveRelease() : void</text><ellipse cx="2872.5" cy="1619.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="2881.5" y="1622.4761">waitFor(const F &amp; f) : void</text></a><!--MD5=[86bf37f6e210254ac551127751e3ab47]
class C_0001956570166673420631--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" target="_top" title="MeteredExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" xlink:show="new" xlink:title="MeteredExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="112.0234" id="C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.5;" width="378" x="3906.5" y="2324"/><ellipse cx="4037.75" cy="2340" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4040.7188,2345.6406 Q4040.1406,2345.9375 4039.5,2346.0781 Q4038.8594,2346.2344 4038.1563,2346.2344 Q4035.6563,2346.2344 4034.3281,2344.5938 Q4033.0156,2342.9375 4033.0156,2339.8125 Q4033.0156,2336.6875 4034.3281,2335.0313 Q4035.6563,2333.375 4038.1563,2333.375 Q4038.8594,2333.375 4039.5,2333.5313 Q4040.1563,2333.6875 4040.7188,2333.9844 L4040.7188,2336.7031 Q4040.0938,2336.125 4039.5,2335.8594 Q4038.9063,2335.5781 4038.2813,2335.5781 Q4036.9375,2335.5781 4036.25,2336.6563 Q4035.5625,2337.7188 4035.5625,2339.8125 Q4035.5625,2341.9063 4036.25,2342.9844 Q4036.9375,2344.0469 4038.2813,2344.0469 Q4038.9063,2344.0469 4039.5,2343.7813 Q4040.0938,2343.5 4040.7188,2342.9219 L4040.7188,2345.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4058.25" y="2344.1543">MeteredExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3907.5" x2="4283.5" y1="2356" y2="2356"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3907.5" x2="4283.5" y1="2364" y2="2364"/><ellipse cx="3917.5" cy="2375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="3926.5" y="2378.2104">MeteredExecutor(std::unique_ptr&lt;Executor&gt; exe) : void</text><ellipse cx="3917.5" cy="2387.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="3926.5" y="2391.0151">MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void</text><ellipse cx="3917.5" cy="2400.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3926.5" y="2403.8198">~MeteredExecutor() : void</text><ellipse cx="3917.5" cy="2413.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3926.5" y="2416.6245">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="3917.5" cy="2426.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="3926.5" y="2429.4292">add(Func func) : void</text></a><!--MD5=[82b5c747f5a02a065abf0a634d41cbf4]
class C_0000560396763155385774--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" target="_top" title="SoftRealTimeExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" xlink:show="new" xlink:title="SoftRealTimeExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="48" id="C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.5;" width="169" x="2327" y="1951"/><ellipse cx="2342" cy="1967" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2342.1094,1962.3438 L2340.9531,1967.4219 L2343.2813,1967.4219 L2342.1094,1962.3438 Z M2340.625,1960.1094 L2343.6094,1960.1094 L2346.9688,1972.5 L2344.5156,1972.5 L2343.75,1969.4375 L2340.4688,1969.4375 L2339.7188,1972.5 L2337.2813,1972.5 L2340.625,1960.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="2356" y="1971.1543">SoftRealTimeExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2328" x2="2495" y1="1983" y2="1983"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2328" x2="2495" y1="1991" y2="1991"/></a><!--MD5=[4c5ac55a9490dced79f9e191b33f25b1]
class C_0000586027154664049253--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" target="_top" title="`EDFThreadPoolExecutor` is a `SoftRealTimeExecutor` that implements  the earliest-deadline-first scheduling policy." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" xlink:show="new" xlink:title="`EDFThreadPoolExecutor` is a `SoftRealTimeExecutor` that implements  the earliest-deadline-first scheduling policy." xlink:type="simple"><rect fill="#FEFECE" filter="url(#fb2qbphz7hh40)" height="163.2422" id="C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.5;" width="976" x="4842.5" y="1864.5"/><ellipse cx="5251.25" cy="1880.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5254.2188,1886.1406 Q5253.6406,1886.4375 5253,1886.5781 Q5252.3594,1886.7344 5251.6563,1886.7344 Q5249.1563,1886.7344 5247.8281,1885.0938 Q5246.5156,1883.4375 5246.5156,1880.3125 Q5246.5156,1877.1875 5247.8281,1875.5313 Q5249.1563,1873.875 5251.6563,1873.875 Q5252.3594,1873.875 5253,1874.0313 Q5253.6563,1874.1875 5254.2188,1874.4844 L5254.2188,1877.2031 Q5253.5938,1876.625 5253,1876.3594 Q5252.4063,1876.0781 5251.7813,1876.0781 Q5250.4375,1876.0781 5249.75,1877.1563 Q5249.0625,1878.2188 5249.0625,1880.3125 Q5249.0625,1882.4063 5249.75,1883.4844 Q5250.4375,1884.5469 5251.7813,1884.5469 Q5252.4063,1884.5469 5253,1884.2813 Q5253.5938,1884 5254.2188,1883.4219 L5254.2188,1886.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="150" x="5271.75" y="1884.6543">EDFThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4843.5" x2="5817.5" y1="1896.5" y2="1896.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4848.5" y="1902.5"/><ellipse cx="4853.5" cy="1907.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4862.5" y="1910.7104">kEarliestDeadline : const uint64_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4848.5" y="1915.3047"/><ellipse cx="4853.5" cy="1920.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="182" x="4862.5" y="1923.5151">kLatestDeadline : const uint64_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4843.5" x2="5817.5" y1="1930.1094" y2="1930.1094"/><ellipse cx="4853.5" cy="1941.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="4862.5" y="1944.3198">EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("EDFThreadPool")) : void</text><ellipse cx="4853.5" cy="1953.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="4862.5" y="1957.1245">~EDFThreadPoolExecutor() : void</text><ellipse cx="4853.5" cy="1966.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4862.5" y="1969.9292">add(Func f) : void</text><ellipse cx="4853.5" cy="1979.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4862.5" y="1982.7339">add(Func f, uint64_t deadline) : void</text><ellipse cx="4853.5" cy="1992.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4862.5" y="1995.5386">add(Func f, std::size_t total, uint64_t deadline) : void</text><ellipse cx="4853.5" cy="2005.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="4862.5" y="2008.3433">add(std::vector&lt;Func&gt; fs, uint64_t deadline) : void</text><ellipse cx="4853.5" cy="2017.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="4862.5" y="2021.1479">deadlineExecutor(uint64_t deadline) : Executor::KeepAlive&lt;&gt;</text><!--MD5=[0507f50678c26aafd20e9031c16ac1d0]
link C_0001663594882877424244 to C_0002222099135672593686--><path d="M864.34,2075.41 C883.27,2075.25 901.84,2075.04 919.8,2074.78 " fill="none" id="C_0001663594882877424244-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="924.85,2074.7,915.7938,2070.829,919.8505,2074.7714,915.9081,2078.8282,924.85,2074.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d44102866279698d641a58659b4220ed]
reverse link C_0002222099135672593686 to C_0001663594882877424244--><path d="M904.46,2050.3 C891.33,2050.13 877.93,2049.98 864.34,2049.86 " fill="none" id="C_0002222099135672593686&lt;-C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="904.96,2043.31,924.85,2050.61,904.75,2057.31,904.96,2043.31" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9bfe04d74fcca5e380cd86fc2508ab2b]
reverse link C_0002222099135672593686 to C_0001968432200878677255--><path d="M1137.77,1961.02 C1168.73,1675.8 1271.18,880.31 1465,720 C1543.52,655.05 1660.56,645.06 1750.35,649.3 " fill="none" id="C_0002222099135672593686&lt;-C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1144.71,1961.91,1135.62,1981.05,1130.79,1960.42,1144.71,1961.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[455db288e65f9217baffdaa9cf7f7dc9]
reverse link C_0002222099135672593686 to C_0000155178671636628489--><path d="M1166.32,1962.57 C1216.56,1847.36 1315.75,1662.71 1465,1572 C1562.77,1512.58 1696.71,1502.34 1785.68,1503.32 " fill="none" id="C_0002222099135672593686&lt;-C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1172.68,1965.5,1158.38,1981.14,1159.81,1960,1172.68,1965.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9209e2fb2cca13a1bd53142f4af5317e]
reverse link C_0000155178671636628489 to C_0000587962468506435170--><path d="M1995.91,1482.6 C2124.32,1453.3 2339.51,1405.6 2526,1371 C2580.75,1360.84 2638.73,1350.88 2695.68,1341.55 " fill="none" id="C_0000155178671636628489&lt;-C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1997.12,1489.5,1976.07,1487.14,1994,1475.85,1997.12,1489.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[956e3c6898026d390548bc98624d6186]
reverse link C_0002222099135672593686 to C_0002145523347961259416--><path d="M1132.39,1961.18 C1147.61,1751.47 1209.98,1266.42 1465,972 C1545.02,879.61 1677.96,827.24 1771.78,800.08 " fill="none" id="C_0002222099135672593686&lt;-C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1139.37,1961.72,1131.02,1981.19,1125.41,1960.76,1139.37,1961.72" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9b8d25b1a905ec17cebf74be6e4d1ef]
reverse link C_0000481841646641149488 to C_0001970350906198958245--><path d="M2015.44,997.77 C2163.15,965.41 2409.16,911.52 2626.81,863.85 " fill="none" id="C_0000481841646641149488&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2016.74,1004.65,1995.71,1002.09,2013.75,990.97,2016.74,1004.65" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dec116c53a2d170dff43443e961da53]
reverse link C_0002145523347961259416 to C_0001970350906198958245--><path d="M2010.16,774.03 C2157.22,772.92 2406.48,771.04 2626.73,769.37 " fill="none" id="C_0002145523347961259416&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2010.16,781.03,1990.1,774.18,2010.05,767.03,2010.16,781.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13714c40570251b1727355460ed628a2]
reverse link C_0000155178671636628489 to C_0001970350906198958245--><path d="M1929.44,1464.51 C2008.06,1392.17 2172.08,1246.96 2327,1146 C2420.81,1084.86 2525.73,1026.12 2626.58,973.87 " fill="none" id="C_0000155178671636628489&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1933.87,1469.95,1914.44,1478.39,1924.37,1459.67,1933.87,1469.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[85ac5256db58d12eb58da4f0bfa4fa8f]
reverse link C_0001218209673148292552 to C_0001970350906198958245--><path d="M2113.41,1631.71 C2177.14,1617.77 2243.42,1594.77 2297,1557 C2451.68,1447.96 2399.05,1338.36 2526,1198 C2557.17,1163.54 2591.29,1129.71 2626.79,1097.08 " fill="none" id="C_0001218209673148292552&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2114.72,1638.58,2093.72,1635.75,2111.91,1624.87,2114.72,1638.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c5cdfc8ff258542796370a43a8a6d5bc]
reverse link C_0002222099135672593686 to C_0000481841646641149488--><path d="M1170.49,1962.94 C1213.25,1867.08 1283.11,1719.72 1358,1600 C1500.91,1371.54 1739.64,1149.89 1836.85,1064.18 " fill="none" id="C_0002222099135672593686&lt;-C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1176.82,1965.95,1162.31,1981.4,1164.02,1960.28,1176.82,1965.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6d6cc176091032b9e9a6d8f3477fd2ab]
reverse link C_0000481841646641149488 to C_0000769434624932181431--><path d="M2014.75,989.91 C2104.06,959.21 2219.24,907.69 2297,829 C2467.38,656.58 2337.53,486.44 2526,334 C2611.06,265.2 2726.79,232.9 2829.94,218.31 " fill="none" id="C_0000481841646641149488&lt;-C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2016.72,996.63,1995.54,996.34,2012.28,983.35,2016.72,996.63" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8fc612c63803be1a9f3540f6bd40d2f0]
reverse link C_0002222099135672593686 to C_0001218209673148292552--><path d="M1179.19,1963.94 C1219.14,1897.22 1280.65,1812.79 1358,1764 C1450.31,1705.78 1568.14,1677.42 1668.48,1663.77 " fill="none" id="C_0002222099135672593686&lt;-C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1185.13,1967.64,1168.99,1981.37,1173.05,1960.57,1185.13,1967.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0a8abd6ab6b72d3d723f8e27fc307bfc]
reverse link C_0002222099135672593686 to C_0001206661724003471988--><path d="M1197.03,2160.83 C1239.55,2216.49 1297.32,2285.21 1358,2337 C1391.28,2365.41 1427.44,2392.83 1464.68,2418.85 " fill="none" id="C_0002222099135672593686&lt;-C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1191.36,2164.93,1184.89,2144.75,1202.53,2156.5,1191.36,2164.93" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[135cc1a411e5fe5d6356ee66905451c6]
reverse link C_0002222099135672593686 to C_0000346702971661703291--><path d="M1134.42,2164.86 C1152.98,2352.53 1220.62,2752.16 1465,2955 C1528.56,3007.76 1616.76,3028.38 1695.5,3034.95 " fill="none" id="C_0002222099135672593686&lt;-C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1127.43,2165.24,1132.54,2144.67,1141.37,2163.94,1127.43,2165.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dd8f29c1989340f5d3fd880405cabcb]
link C_0001612067402701865715 to C_0001612067402701865715--><path d="M1792.93,3164.95 C1780.75,3146.48 1810.1,3130 1881,3130 C1945.81,3130 1975.9,3143.77 1971.29,3160.24 " fill="none" id="C_0001612067402701865715-&gt;C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1969.07,3164.95,1976.5264,3158.5155,1971.2024,3160.4275,1969.2904,3155.1036,1969.07,3164.95" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1858" y="3114.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="1868" y="3121.0669">cache</text><!--MD5=[ca88da5f247437352a79e15a35decac2]
reverse link C_0002222099135672593686 to C_0001612067402701865715--><path d="M1145.04,2164.64 C1188.55,2403.57 1309.29,2989.26 1465,3102 C1560.3,3171 1696.99,3192.88 1787.09,3199.54 " fill="none" id="C_0002222099135672593686&lt;-C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1138.1,2165.58,1141.43,2144.66,1151.87,2163.1,1138.1,2165.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[89eb8d3ac6b14cbcc2f2be4548fd3da0]
link C_0001123262130157209492 to C_0002222099135672593686--><path d="M2525.79,1911.98 C2213.83,1907.61 1816.31,1913.92 1465,1956 C1421.51,1961.21 1376.09,1971.81 1333.17,1984.39 " fill="none" id="C_0001123262130157209492-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1328.22,1985.86,1337.9836,1987.1532,1333.0161,1984.4469,1335.7225,1979.4794,1328.22,1985.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9bc685a0c95c6f0f42cb945c35073ec]
reverse link C_0001218209673148292552 to C_0001123262130157209492--><path d="M2085.99,1720.75 C2211.73,1761.22 2376.9,1810.97 2526,1845 C2553.56,1851.29 2582.01,1857.28 2610.77,1862.96 " fill="none" id="C_0001218209673148292552&lt;-C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2083.82,1727.41,2066.95,1714.6,2088.13,1714.09,2083.82,1727.41" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbe4f6025306bddd8773b75a56f8d272]
reverse link C_0002222099135672593686 to C_0001347291497865252100--><path d="M1348.27,2056.16 C1351.54,2056.1 1354.78,2056.05 1358,2056 C1392.22,2055.48 1400.78,2055.72 1435,2056 C1818.15,2059.11 1914.43,2048.7 2297,2070 C2535.14,2083.26 2813.14,2113.3 2963.44,2130.76 " fill="none" id="C_0002222099135672593686&lt;-C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1348.14,2063.16,1328.01,2056.55,1347.87,2049.16,1348.14,2063.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[286dc64e0630f8c70451157496c94824]
link C_0001932117148827315960 to C_0001347291497865252100--><path d="M2171.57,2138.7 C2419.8,2140.16 2765.41,2142.19 2948.35,2143.26 " fill="none" id="C_0001932117148827315960-&gt;C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="2955.3901" cy="2143.3043" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="2947.3903" x2="2963.39" y1="2143.2586" y2="2143.35"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="2955.4358" x2="2955.3444" y1="2135.3044" y2="2151.3042"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1590.45,2095.35 C1504.73,2086.27 1412.65,2077.54 1333.37,2071.06 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1328.17,2070.64,1336.8213,2075.3469,1333.154,2071.0399,1337.4611,2067.3726,1328.17,2070.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1590.43,2167.13 C1514.32,2169.11 1432.64,2165.91 1358,2152 C1348.75,2150.28 1339.4,2148.2 1330.02,2145.83 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1325.12,2144.57,1332.8432,2150.6817,1329.9631,2145.8129,1334.8318,2142.9328,1325.12,2144.57" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1361" y="2141.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="1371" y="2148.0669">executor_</text><!--MD5=[f4091570a50e50d543407bc69d17a718]
reverse link C_0002222099135672593686 to C_0001932117148827315960--><path d="M1348.23,2096.43 C1424.02,2104.94 1510.03,2113.64 1590.45,2120.97 " fill="none" id="C_0002222099135672593686&lt;-C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1347.25,2103.37,1328.17,2094.16,1348.83,2089.46,1347.25,2103.37" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a391c4085ec82253d9730dd224003987]
reverse link C_0001347291497865252100 to C_0002292058893312396804--><path d="M3205.82,2144 C3326.66,2144 3513.06,2144 3683.99,2144 " fill="none" id="C_0001347291497865252100&lt;-C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3205.52,2151,3185.52,2144,3205.52,2137,3205.52,2151" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6a40fe925e9209b42fe1a8440e6b087b]
reverse link C_0002292058893312396804 to C_0000260170505900481834--><path d="M4255.12,1984.22 C4523.79,1713.59 5058.3,1175.18 5254.79,977.26 " fill="none" id="C_0002292058893312396804&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4260.02,1989.22,4240.96,1998.49,4250.08,1979.36,4260.02,1989.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5276268b626ef7b54a98769403cb5439]
reverse link C_0002145523347961259416 to C_0000260170505900481834--><path d="M2010.26,790.62 C2099.91,794.41 2217.37,784.16 2297,720 C2530.62,531.77 2280.5,257.44 2526,85 C2725.48,-55.12 3385.27,31.03 3623,85 C4268.84,231.63 4955.92,654.08 5218.65,826.93 " fill="none" id="C_0002145523347961259416&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2009.73,797.6,1990.14,789.52,2010.49,783.63,2009.73,797.6" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c90348528aae1f72fa3dfd98dc4bf126]
link C_0001402712402381953994 to C_0002222099135672593686--><path d="M2688.87,1761.41 C2360.75,1780.1 1877.93,1820.74 1465,1908 C1399.06,1921.93 1330.7,1950.33 1272.89,1979.06 " fill="none" id="C_0001402712402381953994-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1268.4,1981.3,1278.2393,1980.8654,1272.875,1979.0697,1274.6707,1973.7054,1268.4,1981.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e207bfffdf80fcc13f6dcb609a0d553]
reverse link C_0000155178671636628489 to C_0001402712402381953994--><path d="M1996.43,1521.31 C2080.31,1531.56 2196.58,1548.32 2297,1572 C2401.1,1596.55 2422.28,1619.89 2526,1646 C2578.36,1659.18 2633.94,1671.37 2688.85,1682.37 " fill="none" id="C_0000155178671636628489&lt;-C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1995.39,1528.24,1976.37,1518.91,1997.06,1514.34,1995.39,1528.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5881062226b0dc1facde97fd853f45]
reverse link C_0002222099135672593686 to C_0000470362430235503729--><path d="M1140.17,2165.04 C1175.4,2429.77 1284.02,3126.98 1465,3256 C1498.12,3279.61 1536.27,3297.08 1575.74,3309.96 " fill="none" id="C_0002222099135672593686&lt;-C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1133.19,2165.62,1137.52,2144.87,1147.07,2163.79,1133.19,2165.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e81e9ddbd832a715a37127e28d03ab94]
reverse link C_0002292058893312396804 to C_0001740134810840364719--><path d="M4527.08,2157.62 C4563.29,2158.76 4600.43,2159.94 4637.96,2161.13 " fill="none" id="C_0002292058893312396804&lt;-C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4526.84,2164.62,4507.07,2156.99,4527.28,2150.62,4526.84,2164.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ab611552766336439f9b6ed347c4215c]
reverse link C_0000481841646641149488 to C_0002235860541734359952--><path d="M1956.72,1074.73 C2073.87,1147.74 2309.79,1287.45 2526,1371 C2633.78,1412.65 2758.38,1445.2 2861.47,1468.2 " fill="none" id="C_0000481841646641149488&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1952.87,1080.58,1939.63,1064.03,1960.3,1068.71,1952.87,1080.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f76a078fe6562592f931aa95ad9663c]
reverse link C_0001218209673148292552 to C_0002235860541734359952--><path d="M2113.62,1624.2 C2330.29,1598.2 2651.19,1559.68 2861.32,1534.46 " fill="none" id="C_0001218209673148292552&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2114.34,1631.17,2093.64,1626.6,2112.67,1617.27,2114.34,1631.17" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3ab65a7e84903ff36ad19183ae4fbd24]
reverse link C_0000155178671636628489 to C_0002235860541734359952--><path d="M1996.52,1509 C2195.65,1509 2608.52,1509 2861.25,1509 " fill="none" id="C_0000155178671636628489&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1996.49,1516,1976.49,1509,1996.49,1502,1996.49,1516" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6921ed0d28362e9667150d5319fe2776]
link C_0001956570166673420631 to C_0002222099135672593686--><path d="M3906.44,2375.61 C3307.37,2361.17 1475.98,2313.38 1358,2266 C1296.03,2241.12 1239.53,2192 1197.98,2148.32 " fill="none" id="C_0001956570166673420631-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1194.51,2144.65,1197.7655,2153.9453,1197.9368,2148.291,1203.5911,2148.4623,1194.51,2144.65" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[99d55ebf5c4bd3f71851e99b5adaf196]
reverse link C_0001956570166673420631 to C_0002222099135672593686--><path d="M3893.3,2354.92 C3809.78,2345.15 3711.81,2334.52 3623,2327 C3144.38,2286.49 1937.37,2291.08 1465,2204 C1403.49,2192.66 1339.35,2169.17 1283.7,2144.56 " fill="none" id="C_0001956570166673420631&lt;-C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3906.31,2356.45,3900.8167,2351.7785,3894.3917,2355.0525,3899.885,2359.724,3906.31,2356.45" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355.5" y="2264.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="2365.5" y="2271.0669">ownedExecutor_</text><!--MD5=[a517c54ec156d68ee25be864ae687f6d]
reverse link C_0001347291497865252100 to C_0001956570166673420631--><path d="M3205.71,2122.72 C3334.21,2109.42 3529.07,2110.98 3654,2214 C3687.51,2241.63 3651.27,2278.45 3684,2307 C3744.41,2359.7 3829.38,2380.47 3906.35,2387.06 " fill="none" id="C_0001347291497865252100&lt;-C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3206.33,2129.69,3185.67,2124.97,3204.77,2115.78,3206.33,2129.69" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4dc2b8b28f130daed24dc78f6ab3324]
reverse link C_0002222099135672593686 to C_0000560396763155385774--><path d="M1348.31,2009.36 C1351.56,2008.88 1354.79,2008.43 1358,2008 C1715.88,1960.2 2148,1966.51 2326.8,1971.89 " fill="none" id="C_0002222099135672593686&lt;-C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1349.04,2016.33,1328.19,2012.58,1346.83,2002.51,1349.04,2016.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[20b939e7521107461b4dab031da0529a]
reverse link C_0000560396763155385774 to C_0000586027154664049253--><path d="M2483.24,2006.27 C2497.16,2011.14 2511.84,2015.41 2526,2018 C2765.79,2061.9 3388.22,2083.64 3623,2018 C3653.54,2009.46 3653.55,1989.86 3684,1981 C4061.93,1871 4509.57,1869.24 4842.48,1891.09 " fill="none" id="C_0000560396763155385774&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2480.45,2012.7,2464.2,1999.1,2485.38,1999.6,2480.45,2012.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b64a71dfe9bdf716efdc37867f26125a]
reverse link C_0002292058893312396804 to C_0000586027154664049253--><path d="M4527.39,2052.11 C4541.07,2049.65 4554.63,2047.27 4568,2045 C4656.47,2029.98 4751.07,2016.02 4842.45,2003.59 " fill="none" id="C_0002292058893312396804&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4528.19,2059.08,4507.26,2055.78,4525.68,2045.31,4528.19,2059.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c2fd3e74ff427b94522909949ce96ca8]
@startuml
left to right direction
class "detail::ExecutorWithPriorityImpl<Callback>" as C_0001663594882877424244
class C_0001663594882877424244 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22{ExecutorWithPriorityImpl}]] {
{static} +create(Executor::KeepAlive<Executor> executor, Callback && callback) : Executor::KeepAlive<ExecutorWithPriorityImpl<std::decay_t<Callback>>>
+ExecutorWithPriorityImpl<Callback>(const ExecutorWithPriorityImpl<Callback> & ) : void
+operator=(const ExecutorWithPriorityImpl<Callback> & ) : ExecutorWithPriorityImpl<Callback> &
+ExecutorWithPriorityImpl<Callback>(ExecutorWithPriorityImpl<Callback> && ) : void
+operator=(ExecutorWithPriorityImpl<Callback> && ) : ExecutorWithPriorityImpl<Callback> &
+add(Func func) : void
}
abstract "Executor" as C_0002222099135672593686
abstract C_0002222099135672593686 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53{An Executor accepts units of work with add(), which should be threadsafe.}]] {
+~Executor() : void
{abstract} +add(Func ) = 0 : void
+addWithPriority(Func , int8_t priority) : void
+getNumPriorities() const : uint8_t
{static} +getKeepAliveToken(ExecutorT * executor) : KeepAlive<ExecutorT>
{static} +getKeepAliveToken(ExecutorT & executor) : KeepAlive<ExecutorT>
{static} +LO_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68{LO_PRI}]]]
{static} +MID_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69{MID_PRI}]]]
{static} +HI_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70{HI_PRI}]]]
}
class "QueuedImmediateExecutor" as C_0001968432200878677255
class C_0001968432200878677255 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31{Runs inline like InlineExecutor, but with a queue so that any tasks added  to this executor by one of its own callbacks will be queued instead of  executed inline (nested). This is usually better behavior than Inline.}]] {
{static} +instance() : QueuedImmediateExecutor &
+add(Func callback) : void
}
class "SequencedExecutor" as C_0000155178671636628489
class C_0000155178671636628489 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27{SequencedExecutor}]] {
+~SequencedExecutor() : void
}
class "StrandExecutor" as C_0000587962468506435170
class C_0000587962468506435170 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122{StrandExecutor}]] {
{static} +create() : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context) : Executor::KeepAlive<StrandExecutor>
{static} +create(Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context, Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
abstract "IOExecutor" as C_0002145523347961259416
abstract C_0002145523347961259416 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40{IOExecutor}]] {
+~IOExecutor() = default : void
{abstract} +getEventBase() = 0 : EventBase *
}
class "EventBase" as C_0001970350906198958245
class C_0001970350906198958245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22{EventBase}]] {
+EventBase(std::chrono::milliseconds tickInterval) : void
+EventBase() : void
+EventBase(bool enableTimeMeasurement) : void
+EventBase(const EventBase & ) : void
+operator=(const EventBase & ) : EventBase &
+EventBase(event_base * evb, bool enableTimeMeasurement = true) : void
+EventBase(EventBase::Options options) : void
+~EventBase() : void
+loop() : bool
+loopIgnoreKeepAlive() : bool
+loopOnce(int flags = 0) : bool
+loopForever() : void
+terminateLoopSoon() : void
+runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr<RequestContext> rctx = RequestContext::saveContext()) : void
+runInLoop(EventBase::Func c, bool thisIteration = false) : void
+runOnDestruction(EventBase::OnDestructionCallback & callback) : void
+runOnDestruction(EventBase::Func f) : void
+runBeforeLoop(EventBase::LoopCallback * callback) : void
+runInEventBaseThread(EventBase::Func fn) : void
+runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void
+runInEventBaseThreadAndWait(EventBase::Func fn) : void
+runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void
+setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void
+setLoadAvgMsec(std::chrono::milliseconds ms) : void
+resetLoadAvg(double value = 0.0) : void
+getAvgLoopTime() const : double
+isRunning() const : bool
+waitUntilRunning() : void
+getNotificationQueueSize() const : size_t
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+isInEventBaseThread() const : bool
+inRunningEventBaseThread() const : bool
+checkIsInEventBaseThread() const : void
+dcheckIsInEventBaseThread() const : void
+timer() : HHWheelTimer &
+getBackend() : EventBaseBackendBase *
+getLibeventBase() const : event_base *
{static} +getLibeventVersion() : const char *
{static} +getLibeventMethod() : const char *
+bumpHandlingTime() : void
+setObserver(const std::shared_ptr<EventBaseObserver> & observer) : void
+getObserver() : const std::shared_ptr<EventBaseObserver> &
+setExecutionObserver(ExecutionObserver * observer) : void
+getExecutionObserver() : ExecutionObserver *
+setName(const std::string & name) : void
+getName() : const std::string &
+add(Cob fn) : void
+drive() : void
+scheduleAt(EventBase::Func && fn, const ScheduledExecutor::TimePoint & timeout) : void
+attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void
+detachTimeoutManager(AsyncTimeout * obj) : void
+scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool
+cancelTimeout(AsyncTimeout * obj) : void
+isInTimeoutManagerThread() : bool
+getVirtualEventBase() : VirtualEventBase &
+getEventBase() : EventBase *
{static} +getDefaultBackend() : std::unique_ptr<EventBaseBackendBase>
+runInEventBaseThread(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAlwaysEnqueue(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAndWait(void (*)(T *) fn, T * arg) : void
+runImmediatelyOrRunInEventBaseThreadAndWait(void (*)(T *) fn, T * arg) : void
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
{abstract} +drive() = 0 : void
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() : void
+drive() : void
+try_drive() : bool
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+try_wait() : bool
+try_drive_for(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_drive_until(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
+try_wait_for(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_wait_until(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
}
abstract "ScheduledExecutor" as C_0001218209673148292552
abstract C_0001218209673148292552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28{ScheduledExecutor}]] {
+~ScheduledExecutor() = default : void
{abstract} +add(Func ) = 0 : void
+schedule(Func && a) : void
+schedule(Func && a, const ScheduledExecutor::Duration & dur) : void
+scheduleAt(Func && , const ScheduledExecutor::TimePoint & ) : void
+now() : ScheduledExecutor::TimePoint
}
class "fibers::FiberManager" as C_0001206661724003471988
class C_0001206661724003471988 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80{@class FiberManager  @brief Single-threaded task execution engine.  FiberManager allows semi-parallel task execution on the same thread. Each  task can notify FiberManager that it is blocked on something (via await())  call. This will pause execution of...}]] {
+FiberManager(const fibers::FiberManager & ) : void
+operator=(const fibers::FiberManager & ) : fibers::FiberManager &
+FiberManager(std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+~FiberManager() : void
+loopController() : fibers::LoopController &
+loopController() const : const fibers::LoopController &
+loopUntilNoReady() : void
+loopUntilNoReadyImpl() : void
+runEagerFiberImpl(fibers::Fiber * ) : void
+shouldRunLoopRemote() : bool
+hasTasks() const : bool
+numActiveTasks() const : size_t
+hasReadyTasks() const : bool
+setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void
+add(Func f) : void
+fibersAllocated() const : size_t
+fibersPoolSize() const : size_t
+hasActiveFiber() const : bool
+getCurrentTaskRunningTime() const : Optional<std::chrono::nanoseconds>
+currentFiber() const : fibers::Fiber *
+stackHighWatermark() const : size_t
+yield() : void
+setObserver(ExecutionObserver * observer) : void
+getObserver() : ExecutionObserver *
+setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void
+runQueueSize() const : size_t
{static} +getFiberManager() : fibers::FiberManager &
{static} +getFiberManagerUnsafe() : fibers::FiberManager *
+getOptions() const : const fibers::FiberManager::Options &
+FiberManager(LocalType<LocalT> , std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+addTask(F && func, fibers::TaskOptions taskOptions = TaskOptions()) : void
+addTaskFuture(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskEager(F && func) : void
+addTaskEagerFuture(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskRemote(F && func) : void
+addTaskRemoteFuture(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskFinally(F && func, G && finally) : void
+addTaskFinallyEager(F && func, G && finally) : void
+runInMainContext(F && func) : invoke_result_t<F>
+local() : T &
{static} +localThread() : T &
}
class "futures::detail::WaitExecutor" as C_0000346702971661703291
class C_0000346702971661703291 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478{WaitExecutor}]] {
+add(Func func) : void
+drive() : void
+driveUntil(Clock::time_point deadline) : bool
+detach() : void
{static} +create() : Executor::KeepAlive<futures::detail::WaitExecutor>
}
class "InlineExecutor" as C_0001612067402701865715
class C_0001612067402701865715 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30{When work is "queued", execute it immediately inline. Usually when you think you want this, you actually want a QueuedImmediateExecutor.}]] {
{static} +instance() : InlineExecutor &
+add(Func f) : void
}
class "TimekeeperScheduledExecutor" as C_0001123262130157209492
class C_0001123262130157209492 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35{TimekeeperScheduledExecutor}]] {
+TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor & ) : void
+operator=(const TimekeeperScheduledExecutor & ) : TimekeeperScheduledExecutor &
+TimekeeperScheduledExecutor(TimekeeperScheduledExecutor && ) : void
+operator=(TimekeeperScheduledExecutor && ) : TimekeeperScheduledExecutor &
{static} +create(Executor::KeepAlive<> parent, Function<std::shared_ptr<Timekeeper> ()> getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive<TimekeeperScheduledExecutor>
+add(Func func) : void
+scheduleAt(Func && func, const ScheduledExecutor::TimePoint & t) : void
}
class "DefaultKeepAliveExecutor" as C_0001347291497865252100
class C_0001347291497865252100 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30{An Executor accepts units of work with add(), which should be threadsafe.}]] {
+~DefaultKeepAliveExecutor() : void
+weakRef() : Executor::KeepAlive<>
}
class "DefaultKeepAliveExecutor::WeakRef" as C_0001932117148827315960
class C_0001932117148827315960 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59{DefaultKeepAliveExecutor##WeakRef}]] {
{static} +create(std::shared_ptr<ControlBlock> controlBlock, Executor * executor) : Executor::KeepAlive<>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
abstract "ThreadPoolExecutor" as C_0002292058893312396804
abstract C_0002292058893312396804 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67{ThreadPoolExecutor}]] {
+ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory, bool isWaitForAll = false) : void
+~ThreadPoolExecutor() : void
{abstract} +add(Func func) = 0 : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void
+setThreadFactory(std::shared_ptr<ThreadFactory> threadFactory) : void
+getThreadFactory() const : std::shared_ptr<ThreadFactory>
+numThreads() const : size_t
+setNumThreads(size_t numThreads) : void
+numActiveThreads() const : size_t
+stop() : void
+join() : void
{static} +withAll(FunctionRef<void (ThreadPoolExecutor &)> f) : void
+getPoolStats() const : ThreadPoolExecutor::PoolStats
+getPendingTaskCount() const : size_t
+getName() const : const std::string &
+subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void
+addObserver(std::shared_ptr<Observer> ) : void
+removeObserver(std::shared_ptr<Observer> ) : void
+setThreadDeathTimeout(std::chrono::milliseconds timeout) : void
}
class "IOThreadPoolExecutor" as C_0000260170505900481834
class C_0000260170505900481834 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58{A Thread Pool for IO bound tasks  @note Uses event_fd for notification, and waking an epoll loop.  There is one queue (NotificationQueue specifically) per thread/epoll.  If the thread is already running and not waiting on epoll,  we don't make any addit...}]] {
+IOThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+~IOThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getEventBase() : EventBase *
{static} +getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *
+getEventBaseManager() : EventBaseManager *
}
class "SerialExecutor" as C_0001402712402381953994
class C_0001402712402381953994 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53{@class SerialExecutor  @brief Executor that guarantees serial non-concurrent execution of added      tasks  SerialExecutor is similar to boost asio's strand concept. A SerialExecutor  has a parent executor which is given at construction time (defaults t...}]] {
+SerialExecutor(const SerialExecutor & ) : void
+operator=(const SerialExecutor & ) : SerialExecutor &
+SerialExecutor(SerialExecutor && ) : void
+operator=(SerialExecutor && ) : SerialExecutor &
{static} +create(Executor::KeepAlive<Executor> parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive<SerialExecutor>
{static} +createUnique(std::shared_ptr<Executor> parent = getCPUExecutor()) : SerialExecutor::UniquePtr
+add(Func func) : void
+addWithPriority(Func func, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
class "ThreadedExecutor" as C_0000470362430235503729
class C_0000470362430235503729 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55{*  ThreadedExecutor  An executor for blocking tasks.  This executor runs each task in its own thread. It works well for tasks  which mostly sleep, but works poorly for tasks which mostly compute.  For each task given to the executor with `add`, the exec...}]] {
+ThreadedExecutor(std::shared_ptr<ThreadFactory> threadFactory = newDefaultThreadFactory()) : void
+~ThreadedExecutor() : void
+ThreadedExecutor(const ThreadedExecutor & ) : void
+ThreadedExecutor(ThreadedExecutor && ) : void
+operator=(const ThreadedExecutor & ) : ThreadedExecutor &
+operator=(ThreadedExecutor && ) : ThreadedExecutor &
+add(Func func) : void
}
class "CPUThreadPoolExecutor" as C_0001740134810840364719
class C_0001740134810840364719 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68{A Thread pool for CPU bound tasks.  @note A single queue backed by folly/LifoSem and folly/MPMC queue.  Because of this contention can be quite high,  since all the worker threads and all the producer threads hit  the same queue. MPMC queue excels in th...}]] {
+CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads) : void
+CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+~CPUThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+addWithPriority(Func func, int8_t priority) : void
+add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getTaskQueueSize() const : size_t
+getNumPriorities() const : uint8_t
{static} +kDefaultMaxQueueSize : const size_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153{kDefaultMaxQueueSize}]]]
}
class "ManualExecutor" as C_0002235860541734359952
class C_0002235860541734359952 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38{A ManualExecutor only does work when you turn the crank, by calling run() or indirectly with makeProgress() or waitFor(). The clock for a manual executor starts at 0 and advances only when you ask it to. i.e. time is also under manual control. NB No att...}]] {
+~ManualExecutor() : void
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+makeProgress() : void
+drive() : void
+scheduleAt(Func && f, const ScheduledExecutor::TimePoint & t) : void
+advance(const ScheduledExecutor::Duration & dur) : void
+advanceTo(const ScheduledExecutor::TimePoint & t) : void
+now() : ScheduledExecutor::TimePoint
+clear() : std::size_t
+keepAliveAcquire() : bool
+keepAliveRelease() : void
+waitFor(const F & f) : void
}
class "MeteredExecutor" as C_0001956570166673420631
class C_0001956570166673420631 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41{MeteredExecutor}]] {
+MeteredExecutor(std::unique_ptr<Executor> exe) : void
+MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void
+~MeteredExecutor() : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+add(Func func) : void
}
abstract "SoftRealTimeExecutor" as C_0000560396763155385774
abstract C_0000560396763155385774 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26{SoftRealTimeExecutor}]] {
}
class "EDFThreadPoolExecutor" as C_0000586027154664049253
class C_0000586027154664049253 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34{`EDFThreadPoolExecutor` is a `SoftRealTimeExecutor` that implements  the earliest-deadline-first scheduling policy.}]] {
+EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("EDFThreadPool")) : void
+~EDFThreadPoolExecutor() : void
+add(Func f) : void
+add(Func f, uint64_t deadline) : void
+add(Func f, std::size_t total, uint64_t deadline) : void
+add(std::vector<Func> fs, uint64_t deadline) : void
+deadlineExecutor(uint64_t deadline) : Executor::KeepAlive<>
{static} +kEarliestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40{kEarliestDeadline}]]]
{static} +kLatestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41{kLatestDeadline}]]]
}
C_0001663594882877424244 ..> C_0002222099135672593686
C_0002222099135672593686 <|- - C_0001663594882877424244
C_0002222099135672593686 <|- - C_0001968432200878677255
C_0002222099135672593686 <|- - C_0000155178671636628489
C_0000155178671636628489 <|- - C_0000587962468506435170
C_0002222099135672593686 <|- - C_0002145523347961259416
C_0000481841646641149488 <|- - C_0001970350906198958245
C_0002145523347961259416 <|- - C_0001970350906198958245
C_0000155178671636628489 <|- - C_0001970350906198958245
C_0001218209673148292552 <|- - C_0001970350906198958245
C_0002222099135672593686 <|- - C_0000481841646641149488
C_0000481841646641149488 <|- - C_0000769434624932181431
C_0002222099135672593686 <|- - C_0001218209673148292552
C_0002222099135672593686 <|- - C_0001206661724003471988
C_0002222099135672593686 <|- - C_0000346702971661703291
C_0001612067402701865715 - -> C_0001612067402701865715 : -cache
C_0002222099135672593686 <|- - C_0001612067402701865715
C_0001123262130157209492 ..> C_0002222099135672593686
C_0001218209673148292552 <|- - C_0001123262130157209492
C_0002222099135672593686 <|- - C_0001347291497865252100
C_0001932117148827315960 - -+ C_0001347291497865252100
C_0001932117148827315960 ..> C_0002222099135672593686
C_0001932117148827315960 - -> C_0002222099135672593686 : -executor_
C_0002222099135672593686 <|- - C_0001932117148827315960
C_0001347291497865252100 <|- - C_0002292058893312396804
C_0002292058893312396804 <|- - C_0000260170505900481834
C_0002145523347961259416 <|- - C_0000260170505900481834
C_0001402712402381953994 ..> C_0002222099135672593686
C_0000155178671636628489 <|- - C_0001402712402381953994
C_0002222099135672593686 <|- - C_0000470362430235503729
C_0002292058893312396804 <|- - C_0001740134810840364719
C_0000481841646641149488 <|- - C_0002235860541734359952
C_0001218209673148292552 <|- - C_0002235860541734359952
C_0000155178671636628489 <|- - C_0002235860541734359952
C_0001956570166673420631 ..> C_0002222099135672593686
C_0001956570166673420631 o- - C_0002222099135672593686 : -ownedExecutor_
C_0001347291497865252100 <|- - C_0001956570166673420631
C_0002222099135672593686 <|- - C_0000560396763155385774
C_0000560396763155385774 <|- - C_0000586027154664049253
C_0002292058893312396804 <|- - C_0000586027154664049253
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.16+8-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>