<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2630px" preserveAspectRatio="none" style="width:7188px;height:2630px;" version="1.1" viewBox="0 0 7188 2630" width="7188px" zoomAndPan="magnify"><defs><filter height="300%" id="fl3ip7jlcch5k" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[af0a7ff7db33a62256b72072a2c62cae]
class C_0001663594882877424244--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" target="_top" title="ExecutorWithPriorityImpl" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" xlink:show="new" xlink:title="ExecutorWithPriorityImpl" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="124.8281" id="C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.5;" width="858" x="6" y="1668.64"/><ellipse cx="306.25" cy="1684.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M309.2188,1690.2806 Q308.6406,1690.5775 308,1690.7181 Q307.3594,1690.8744 306.6563,1690.8744 Q304.1563,1690.8744 302.8281,1689.2337 Q301.5156,1687.5775 301.5156,1684.4525 Q301.5156,1681.3275 302.8281,1679.6712 Q304.1563,1678.015 306.6563,1678.015 Q307.3594,1678.015 308,1678.1712 Q308.6563,1678.3275 309.2188,1678.6244 L309.2188,1681.3431 Q308.5938,1680.765 308,1680.4994 Q307.4063,1680.2181 306.7813,1680.2181 Q305.4375,1680.2181 304.75,1681.2962 Q304.0625,1682.3587 304.0625,1684.4525 Q304.0625,1686.5462 304.75,1687.6244 Q305.4375,1688.6869 306.7813,1688.6869 Q307.4063,1688.6869 308,1688.4212 Q308.5938,1688.14 309.2188,1687.5619 L309.2188,1690.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="193" x="326.75" y="1688.7943">detail::ExecutorWithPriorityImpl</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="54" x="813" y="1665.64"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="52" x="814" y="1677.7787">Callback</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1700.64" y2="1700.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1708.64" y2="1708.64"/><ellipse cx="17" cy="1719.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="832" x="26" y="1722.8504">create(Executor::KeepAlive&lt;Executor&gt; executor, Callback &amp;&amp; callback) : Executor::KeepAlive&lt;ExecutorWithPriorityImpl&lt;std::decay_t&lt;Callback&gt;&gt;&gt;</text><ellipse cx="17" cy="1732.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="26" y="1735.6551">ExecutorWithPriorityImpl&lt;Callback&gt;(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : void</text><ellipse cx="17" cy="1745.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="547" x="26" y="1748.4598">operator=(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="1758.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="26" y="1761.2645">ExecutorWithPriorityImpl&lt;Callback&gt;(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : void</text><ellipse cx="17" cy="1770.8587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="522" x="26" y="1774.0692">operator=(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp; ) : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="1783.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="1786.8739">add(Func func) : void</text></a><!--MD5=[2031eb5f8f6622e1fb649add07766b1c]
class C_0002222099135672593686--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" target="_top" title="Executor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" xlink:show="new" xlink:title="Executor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="163.2422" id="C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.5;" width="477" x="925" y="1649.64"/><ellipse cx="1131.25" cy="1665.64" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1131.3594,1660.9837 L1130.2031,1666.0619 L1132.5313,1666.0619 L1131.3594,1660.9837 Z M1129.875,1658.7494 L1132.8594,1658.7494 L1136.2188,1671.14 L1133.7656,1671.14 L1133,1668.0775 L1129.7188,1668.0775 L1128.9688,1671.14 L1126.5313,1671.14 L1129.875,1658.7494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="56" x="1151.75" y="1669.7943">Executor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1681.64" y2="1681.64"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1687.64"/><ellipse cx="936" cy="1692.64" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="945" y="1695.8504">LO_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1700.4447"/><ellipse cx="936" cy="1705.4447" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="945" y="1708.6551">MID_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1713.2494"/><ellipse cx="936" cy="1718.2494" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="112" x="945" y="1721.4598">HI_PRI : const int8_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1728.0541" y2="1728.0541"/><ellipse cx="936" cy="1739.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="945" y="1742.2645">~Executor() : void</text><ellipse cx="936" cy="1751.8587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="945" y="1755.0692">add(Func ) = 0 : void</text><ellipse cx="936" cy="1764.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="945" y="1767.8739">addWithPriority(Func , int8_t priority) : void</text><ellipse cx="936" cy="1777.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="945" y="1780.6786">getNumPriorities() const : uint8_t</text><ellipse cx="936" cy="1790.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="447" x="945" y="1793.4833">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT * executor) : KeepAlive&lt;ExecutorT&gt;</text><ellipse cx="936" cy="1803.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="451" x="945" y="1806.2879">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT &amp; executor) : KeepAlive&lt;ExecutorT&gt;</text><!--MD5=[eac2427df85742fb1d237bf28f3b9ebb]
class C_0001968432200878677255--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" target="_top" title="QueuedImmediateExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" xlink:show="new" xlink:title="QueuedImmediateExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="73.6094" id="C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="1851.5" y="15.14"/><ellipse cx="1893.5" cy="31.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1896.4688,36.7806 Q1895.8906,37.0775 1895.25,37.2181 Q1894.6094,37.3744 1893.9063,37.3744 Q1891.4063,37.3744 1890.0781,35.7337 Q1888.7656,34.0775 1888.7656,30.9525 Q1888.7656,27.8275 1890.0781,26.1712 Q1891.4063,24.515 1893.9063,24.515 Q1894.6094,24.515 1895.25,24.6712 Q1895.9063,24.8275 1896.4688,25.1244 L1896.4688,27.8431 Q1895.8438,27.265 1895.25,26.9994 Q1894.6563,26.7181 1894.0313,26.7181 Q1892.6875,26.7181 1892,27.7962 Q1891.3125,28.8587 1891.3125,30.9525 Q1891.3125,33.0462 1892,34.1244 Q1892.6875,35.1869 1894.0313,35.1869 Q1894.6563,35.1869 1895.25,34.9212 Q1895.8438,34.64 1896.4688,34.0619 L1896.4688,36.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="169" x="1913.5" y="35.2943">QueuedImmediateExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1852.5" x2="2111.5" y1="47.14" y2="47.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1852.5" x2="2111.5" y1="55.14" y2="55.14"/><ellipse cx="1862.5" cy="66.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="1871.5" y="69.3504">instance() : QueuedImmediateExecutor &amp;</text><ellipse cx="1862.5" cy="78.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1871.5" y="82.1551">add(Func callback) : void</text></a><!--MD5=[e43e6b0f73d65f42e1986cd71f7d317c]
class C_0000155178671636628489--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" target="_top" title="SequencedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" xlink:show="new" xlink:title="SequencedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="60.8047" id="C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.5;" width="190" x="1887" y="315.64"/><ellipse cx="1916.4" cy="331.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1919.3688,337.2806 Q1918.7906,337.5775 1918.15,337.7181 Q1917.5094,337.8744 1916.8063,337.8744 Q1914.3063,337.8744 1912.9781,336.2337 Q1911.6656,334.5775 1911.6656,331.4525 Q1911.6656,328.3275 1912.9781,326.6712 Q1914.3063,325.015 1916.8063,325.015 Q1917.5094,325.015 1918.15,325.1712 Q1918.8063,325.3275 1919.3688,325.6244 L1919.3688,328.3431 Q1918.7438,327.765 1918.15,327.4994 Q1917.5563,327.2181 1916.9313,327.2181 Q1915.5875,327.2181 1914.9,328.2962 Q1914.2125,329.3587 1914.2125,331.4525 Q1914.2125,333.5462 1914.9,334.6244 Q1915.5875,335.6869 1916.9313,335.6869 Q1917.5563,335.6869 1918.15,335.4212 Q1918.7438,335.14 1919.3688,334.5619 L1919.3688,337.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="126" x="1933.6" y="335.7943">SequencedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1888" x2="2076" y1="347.64" y2="347.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1888" x2="2076" y1="355.64" y2="355.64"/><ellipse cx="1898" cy="366.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1907" y="369.8504">~SequencedExecutor() : void</text></a><!--MD5=[f8810983e380b6f94822d53c6adb6631]
class C_0000587962468506435170--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" target="_top" title="StrandExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" xlink:show="new" xlink:title="StrandExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="137.6328" id="C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.5;" width="757" x="2824" y="277.14"/><ellipse cx="3149.75" cy="293.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3152.7188,298.7806 Q3152.1406,299.0775 3151.5,299.2181 Q3150.8594,299.3744 3150.1563,299.3744 Q3147.6563,299.3744 3146.3281,297.7337 Q3145.0156,296.0775 3145.0156,292.9525 Q3145.0156,289.8275 3146.3281,288.1712 Q3147.6563,286.515 3150.1563,286.515 Q3150.8594,286.515 3151.5,286.6712 Q3152.1563,286.8275 3152.7188,287.1244 L3152.7188,289.8431 Q3152.0938,289.265 3151.5,288.9994 Q3150.9063,288.7181 3150.2813,288.7181 Q3148.9375,288.7181 3148.25,289.7962 Q3147.5625,290.8587 3147.5625,292.9525 Q3147.5625,295.0462 3148.25,296.1244 Q3148.9375,297.1869 3150.2813,297.1869 Q3150.9063,297.1869 3151.5,296.9212 Q3152.0938,296.64 3152.7188,296.0619 L3152.7188,298.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="3170.25" y="297.2943">StrandExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2825" x2="3580" y1="309.14" y2="309.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2825" x2="3580" y1="317.14" y2="317.14"/><ellipse cx="2835" cy="328.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="272" x="2844" y="331.3504">create() : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="340.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="504" x="2844" y="344.1551">create(std::shared_ptr&lt;StrandContext&gt; context) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="353.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="491" x="2844" y="356.9598">create(Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="366.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="731" x="2844" y="369.7645">create(std::shared_ptr&lt;StrandContext&gt; context, Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2835" cy="379.3587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2844" y="382.5692">add(Func f) : void</text><ellipse cx="2835" cy="392.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2844" y="395.3739">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="2835" cy="404.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2844" y="408.1786">getNumPriorities() const : uint8_t</text></a><!--MD5=[b291e34916abaf3d21badf1de86aae69]
class C_0002145523347961259416--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" target="_top" title="IOExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" xlink:show="new" xlink:title="IOExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="73.6094" id="C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="4114.5" y="1045.14"/><ellipse cx="4185.25" cy="1061.14" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4185.3594,1056.4838 L4184.2031,1061.5619 L4186.5313,1061.5619 L4185.3594,1056.4838 Z M4183.875,1054.2494 L4186.8594,1054.2494 L4190.2188,1066.64 L4187.7656,1066.64 L4187,1063.5775 L4183.7188,1063.5775 L4182.9688,1066.64 L4180.5313,1066.64 L4183.875,1054.2494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="4205.75" y="1065.2943">IOExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4115.5" x2="4331.5" y1="1077.14" y2="1077.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4115.5" x2="4331.5" y1="1085.14" y2="1085.14"/><ellipse cx="4125.5" cy="1096.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="4134.5" y="1099.3504">~IOExecutor() = default : void</text><ellipse cx="4125.5" cy="1108.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="192" x="4134.5" y="1112.1551">getEventBase() = 0 : EventBase *</text></a><!--MD5=[411d68fd5f298e02cc7be27b9b9671fb]
class C_0001970350906198958245--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22" target="_top" title="EventBase" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22" xlink:show="new" xlink:title="EventBase" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="829.0859" id="C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.5;" width="895" x="6282" y="667.64"/><ellipse cx="6692.25" cy="683.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6695.2188,689.2806 Q6694.6406,689.5775 6694,689.7181 Q6693.3594,689.8744 6692.6563,689.8744 Q6690.1563,689.8744 6688.8281,688.2338 Q6687.5156,686.5775 6687.5156,683.4525 Q6687.5156,680.3275 6688.8281,678.6713 Q6690.1563,677.015 6692.6563,677.015 Q6693.3594,677.015 6694,677.1713 Q6694.6563,677.3275 6695.2188,677.6244 L6695.2188,680.3431 Q6694.5938,679.765 6694,679.4994 Q6693.4063,679.2181 6692.7813,679.2181 Q6691.4375,679.2181 6690.75,680.2963 Q6690.0625,681.3588 6690.0625,683.4525 Q6690.0625,685.5463 6690.75,686.6244 Q6691.4375,687.6869 6692.7813,687.6869 Q6693.4063,687.6869 6694,687.4213 Q6694.5938,687.14 6695.2188,686.5619 L6695.2188,689.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="6712.75" y="687.7943">EventBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6283" x2="7176" y1="699.64" y2="699.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6283" x2="7176" y1="707.64" y2="707.64"/><ellipse cx="6293" cy="718.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="6302" y="721.8504">EventBase(std::chrono::milliseconds tickInterval) : void</text><ellipse cx="6293" cy="731.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="6302" y="734.6551">EventBase() : void</text><ellipse cx="6293" cy="744.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6302" y="747.4598">EventBase(bool enableTimeMeasurement) : void</text><ellipse cx="6293" cy="757.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="6302" y="760.2645">EventBase(const EventBase &amp; ) : void</text><ellipse cx="6293" cy="769.8588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="6302" y="773.0692">operator=(const EventBase &amp; ) : EventBase &amp;</text><ellipse cx="6293" cy="782.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="6302" y="785.8739">EventBase(event_base * evb, bool enableTimeMeasurement = true) : void</text><ellipse cx="6293" cy="795.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="6302" y="798.6786">EventBase(EventBase::Options options) : void</text><ellipse cx="6293" cy="808.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="6302" y="811.4833">~EventBase() : void</text><ellipse cx="6293" cy="821.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="6302" y="824.2879">loop() : bool</text><ellipse cx="6293" cy="833.8822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="6302" y="837.0926">loopIgnoreKeepAlive() : bool</text><ellipse cx="6293" cy="846.6869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="6302" y="849.8973">loopOnce(int flags = 0) : bool</text><ellipse cx="6293" cy="859.4916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="6302" y="862.702">loopForever() : void</text><ellipse cx="6293" cy="872.2963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="6302" y="875.5067">terminateLoopSoon() : void</text><ellipse cx="6293" cy="885.1009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="869" x="6302" y="888.3114">runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr&lt;RequestContext&gt; rctx = RequestContext::saveContext()) : void</text><ellipse cx="6293" cy="897.9056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="6302" y="901.1161">runInLoop(EventBase::Func c, bool thisIteration = false) : void</text><ellipse cx="6293" cy="910.7103" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="6302" y="913.9208">runOnDestruction(EventBase::OnDestructionCallback &amp; callback) : void</text><ellipse cx="6293" cy="923.515" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="6302" y="926.7254">runOnDestruction(EventBase::Func f) : void</text><ellipse cx="6293" cy="936.3197" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="6302" y="939.5301">runBeforeLoop(EventBase::LoopCallback * callback) : void</text><ellipse cx="6293" cy="949.1244" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="6302" y="952.3348">runInEventBaseThread(EventBase::Func fn) : void</text><ellipse cx="6293" cy="961.9291" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="6302" y="965.1395">runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void</text><ellipse cx="6293" cy="974.7338" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="6302" y="977.9442">runInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="6293" cy="987.5384" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="6302" y="990.7489">runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void</text><ellipse cx="6293" cy="1000.3431" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="6302" y="1003.5536">setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void</text><ellipse cx="6293" cy="1013.1478" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="6302" y="1016.3583">setLoadAvgMsec(std::chrono::milliseconds ms) : void</text><ellipse cx="6293" cy="1025.9525" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="6302" y="1029.1629">resetLoadAvg(double value = 0.0) : void</text><ellipse cx="6293" cy="1038.7572" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="6302" y="1041.9676">getAvgLoopTime() const : double</text><ellipse cx="6293" cy="1051.5619" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="6302" y="1054.7723">isRunning() const : bool</text><ellipse cx="6293" cy="1064.3666" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6302" y="1067.577">waitUntilRunning() : void</text><ellipse cx="6293" cy="1077.1713" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="6302" y="1080.3817">getNotificationQueueSize() const : size_t</text><ellipse cx="6293" cy="1089.9759" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="6302" y="1093.1864">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="6293" cy="1102.7806" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6302" y="1105.9911">isInEventBaseThread() const : bool</text><ellipse cx="6293" cy="1115.5853" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="6302" y="1118.7958">inRunningEventBaseThread() const : bool</text><ellipse cx="6293" cy="1128.39" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="6302" y="1131.6004">checkIsInEventBaseThread() const : void</text><ellipse cx="6293" cy="1141.1947" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="6302" y="1144.4051">dcheckIsInEventBaseThread() const : void</text><ellipse cx="6293" cy="1153.9994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="6302" y="1157.2098">timer() : HHWheelTimer &amp;</text><ellipse cx="6293" cy="1166.8041" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="6302" y="1170.0145">getBackend() : EventBaseBackendBase *</text><ellipse cx="6293" cy="1179.6088" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="6302" y="1182.8192">getLibeventBase() const : event_base *</text><ellipse cx="6293" cy="1192.4134" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="6302" y="1195.6239">getLibeventVersion() : const char *</text><ellipse cx="6293" cy="1205.2181" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="6302" y="1208.4286">getLibeventMethod() : const char *</text><ellipse cx="6293" cy="1218.0228" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="6302" y="1221.2333">bumpHandlingTime() : void</text><ellipse cx="6293" cy="1230.8275" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="6302" y="1234.0379">setObserver(const std::shared_ptr&lt;EventBaseObserver&gt; &amp; observer) : void</text><ellipse cx="6293" cy="1243.6322" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="6302" y="1246.8426">getObserver() : const std::shared_ptr&lt;EventBaseObserver&gt; &amp;</text><ellipse cx="6293" cy="1256.4369" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="6302" y="1259.6473">setExecutionObserver(ExecutionObserver * observer) : void</text><ellipse cx="6293" cy="1269.2416" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="6302" y="1272.452">getExecutionObserver() : ExecutionObserver *</text><ellipse cx="6293" cy="1282.0463" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="6302" y="1285.2567">setName(const std::string &amp; name) : void</text><ellipse cx="6293" cy="1294.8509" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="6302" y="1298.0614">getName() : const std::string &amp;</text><ellipse cx="6293" cy="1307.6556" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="6302" y="1310.8661">add(Cob fn) : void</text><ellipse cx="6293" cy="1320.4603" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="6302" y="1323.6708">drive() : void</text><ellipse cx="6293" cy="1333.265" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="6302" y="1336.4754">scheduleAt(EventBase::Func &amp;&amp; fn, const ScheduledExecutor::TimePoint &amp; timeout) : void</text><ellipse cx="6293" cy="1346.0697" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="6302" y="1349.2801">attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void</text><ellipse cx="6293" cy="1358.8744" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="6302" y="1362.0848">detachTimeoutManager(AsyncTimeout * obj) : void</text><ellipse cx="6293" cy="1371.6791" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="6302" y="1374.8895">scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool</text><ellipse cx="6293" cy="1384.4838" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="6302" y="1387.6942">cancelTimeout(AsyncTimeout * obj) : void</text><ellipse cx="6293" cy="1397.2884" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6302" y="1400.4989">isInTimeoutManagerThread() : bool</text><ellipse cx="6293" cy="1410.0931" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="6302" y="1413.3036">getVirtualEventBase() : VirtualEventBase &amp;</text><ellipse cx="6293" cy="1422.8978" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="6302" y="1426.1083">getEventBase() : EventBase *</text><ellipse cx="6293" cy="1435.7025" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="6302" y="1438.9129">getDefaultBackend() : std::unique_ptr&lt;EventBaseBackendBase&gt;</text><ellipse cx="6293" cy="1448.5072" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="6302" y="1451.7176">runInEventBaseThread&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="1461.3119" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="6302" y="1464.5223">runInEventBaseThreadAlwaysEnqueue&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="1474.1166" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="6302" y="1477.327">runInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text><ellipse cx="6293" cy="1486.9213" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="6302" y="1490.1317">runImmediatelyOrRunInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) : void</text></a><!--MD5=[e39d5cb1daa64537bcdef5f48ceb7e5e]
class C_0000481841646641149488--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" target="_top" title="DrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" xlink:show="new" xlink:title="DrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="73.6094" id="C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.5;" width="229" x="1867.5" y="520.14"/><ellipse cx="1924.75" cy="536.14" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1924.8594,531.4838 L1923.7031,536.5619 L1926.0313,536.5619 L1924.8594,531.4838 Z M1923.375,529.2494 L1926.3594,529.2494 L1929.7188,541.64 L1927.2656,541.64 L1926.5,538.5775 L1923.2188,538.5775 L1922.4688,541.64 L1920.0313,541.64 L1923.375,529.2494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="1945.25" y="540.2943">DrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1868.5" x2="2095.5" y1="552.14" y2="552.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1868.5" x2="2095.5" y1="560.14" y2="560.14"/><ellipse cx="1878.5" cy="571.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1887.5" y="574.3504">~DrivableExecutor() = default : void</text><ellipse cx="1878.5" cy="583.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1887.5" y="587.1551">drive() = 0 : void</text></a><!--MD5=[533c44690536949bf73673dd85860041]
class C_0000769434624932181431--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" target="_top" title="TimedDrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" xlink:show="new" xlink:title="TimedDrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="214.4609" id="C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.5;" width="589" x="2908" y="450.14"/><ellipse cx="3127.25" cy="466.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3130.2188,471.7806 Q3129.6406,472.0775 3129,472.2181 Q3128.3594,472.3744 3127.6563,472.3744 Q3125.1563,472.3744 3123.8281,470.7338 Q3122.5156,469.0775 3122.5156,465.9525 Q3122.5156,462.8275 3123.8281,461.1713 Q3125.1563,459.515 3127.6563,459.515 Q3128.3594,459.515 3129,459.6713 Q3129.6563,459.8275 3130.2188,460.1244 L3130.2188,462.8431 Q3129.5938,462.265 3129,461.9994 Q3128.4063,461.7181 3127.7813,461.7181 Q3126.4375,461.7181 3125.75,462.7963 Q3125.0625,463.8588 3125.0625,465.9525 Q3125.0625,468.0463 3125.75,469.1244 Q3126.4375,470.1869 3127.7813,470.1869 Q3128.4063,470.1869 3129,469.9213 Q3129.5938,469.64 3130.2188,469.0619 L3130.2188,471.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="3147.75" y="470.2943">TimedDrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2909" x2="3496" y1="482.14" y2="482.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2909" x2="3496" y1="490.14" y2="490.14"/><ellipse cx="2919" cy="501.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2928" y="504.3504">TimedDrivableExecutor() : void</text><ellipse cx="2919" cy="513.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="2928" y="517.1551">~TimedDrivableExecutor() : void</text><ellipse cx="2919" cy="526.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2928" y="529.9598">drive() : void</text><ellipse cx="2919" cy="539.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2928" y="542.7645">try_drive() : bool</text><ellipse cx="2919" cy="552.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2928" y="555.5692">add(Func ) : void</text><ellipse cx="2919" cy="565.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2928" y="568.3739">run() : size_t</text><ellipse cx="2919" cy="577.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2928" y="581.1786">drain() : size_t</text><ellipse cx="2919" cy="590.7728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2928" y="593.9833">wait() : void</text><ellipse cx="2919" cy="603.5775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2928" y="606.7879">try_wait() : bool</text><ellipse cx="2919" cy="616.3822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="2928" y="619.5926">try_drive_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2919" cy="629.1869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="563" x="2928" y="632.3973">try_drive_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text><ellipse cx="2919" cy="641.9916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="491" x="2928" y="645.202">try_wait_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="2919" cy="654.7963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="558" x="2928" y="658.0067">try_wait_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text></a><!--MD5=[de9d69c684837cdd83d5314dbeaaea39]
class C_0001218209673148292552--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" target="_top" title="ScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" xlink:show="new" xlink:title="ScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="124.8281" id="C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.5;" width="425" x="1769.5" y="1610.64"/><ellipse cx="1916.75" cy="1626.64" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1916.8594,1621.9837 L1915.7031,1627.0619 L1918.0313,1627.0619 L1916.8594,1621.9837 Z M1915.375,1619.7494 L1918.3594,1619.7494 L1921.7188,1632.14 L1919.2656,1632.14 L1918.5,1629.0775 L1915.2188,1629.0775 L1914.4688,1632.14 L1912.0313,1632.14 L1915.375,1619.7494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="1937.25" y="1630.7943">ScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1770.5" x2="2193.5" y1="1642.64" y2="1642.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1770.5" x2="2193.5" y1="1650.64" y2="1650.64"/><ellipse cx="1780.5" cy="1661.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1789.5" y="1664.8504">~ScheduledExecutor() = default : void</text><ellipse cx="1780.5" cy="1674.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="1789.5" y="1677.6551">add(Func ) = 0 : void</text><ellipse cx="1780.5" cy="1687.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1789.5" y="1690.4598">schedule(Func &amp;&amp; a) : void</text><ellipse cx="1780.5" cy="1700.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1789.5" y="1703.2645">schedule(Func &amp;&amp; a, const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="1780.5" cy="1712.8587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="1789.5" y="1716.0692">scheduleAt(Func &amp;&amp; , const ScheduledExecutor::TimePoint &amp; ) : void</text><ellipse cx="1780.5" cy="1725.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1789.5" y="1728.8739">now() : ScheduledExecutor::TimePoint</text></a><!--MD5=[4deb5614033ac86d675ee075ba2ead14]
class C_0001206661724003471988--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" target="_top" title="FiberManager" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" xlink:show="new" xlink:title="FiberManager" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="572.9922" id="C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.5;" width="886" x="1539" y="700.64"/><ellipse cx="1913.25" cy="716.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1916.2188,722.2806 Q1915.6406,722.5775 1915,722.7181 Q1914.3594,722.8744 1913.6563,722.8744 Q1911.1563,722.8744 1909.8281,721.2338 Q1908.5156,719.5775 1908.5156,716.4525 Q1908.5156,713.3275 1909.8281,711.6713 Q1911.1563,710.015 1913.6563,710.015 Q1914.3594,710.015 1915,710.1713 Q1915.6563,710.3275 1916.2188,710.6244 L1916.2188,713.3431 Q1915.5938,712.765 1915,712.4994 Q1914.4063,712.2181 1913.7813,712.2181 Q1912.4375,712.2181 1911.75,713.2963 Q1911.0625,714.3588 1911.0625,716.4525 Q1911.0625,718.5463 1911.75,719.6244 Q1912.4375,720.6869 1913.7813,720.6869 Q1914.4063,720.6869 1915,720.4213 Q1915.5938,720.14 1916.2188,719.5619 L1916.2188,722.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="129" x="1933.75" y="720.7943">fibers::FiberManager</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2424" y1="732.64" y2="732.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2424" y1="740.64" y2="740.64"/><ellipse cx="1550" cy="751.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="1559" y="754.8504">FiberManager(const fibers::FiberManager &amp; ) : void</text><ellipse cx="1550" cy="764.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="1559" y="767.6551">operator=(const fibers::FiberManager &amp; ) : fibers::FiberManager &amp;</text><ellipse cx="1550" cy="777.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="684" x="1559" y="780.4598">FiberManager(std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="790.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="1559" y="793.2645">~FiberManager() : void</text><ellipse cx="1550" cy="802.8588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1559" y="806.0692">loopController() : fibers::LoopController &amp;</text><ellipse cx="1550" cy="815.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1559" y="818.8739">loopController() const : const fibers::LoopController &amp;</text><ellipse cx="1550" cy="828.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1559" y="831.6786">loopUntilNoReady() : void</text><ellipse cx="1550" cy="841.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1559" y="844.4833">loopUntilNoReadyImpl() : void</text><ellipse cx="1550" cy="854.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1559" y="857.2879">runEagerFiberImpl(fibers::Fiber * ) : void</text><ellipse cx="1550" cy="866.8822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1559" y="870.0926">shouldRunLoopRemote() : bool</text><ellipse cx="1550" cy="879.6869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1559" y="882.8973">hasTasks() const : bool</text><ellipse cx="1550" cy="892.4916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1559" y="895.702">numActiveTasks() const : size_t</text><ellipse cx="1550" cy="905.2963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1559" y="908.5067">hasReadyTasks() const : bool</text><ellipse cx="1550" cy="918.1009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1559" y="921.3114">setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void</text><ellipse cx="1550" cy="930.9056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1559" y="934.1161">add(Func f) : void</text><ellipse cx="1550" cy="943.7103" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1559" y="946.9208">fibersAllocated() const : size_t</text><ellipse cx="1550" cy="956.515" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1559" y="959.7254">fibersPoolSize() const : size_t</text><ellipse cx="1550" cy="969.3197" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1559" y="972.5301">hasActiveFiber() const : bool</text><ellipse cx="1550" cy="982.1244" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="1559" y="985.3348">getCurrentTaskRunningTime() const : Optional&lt;std::chrono::nanoseconds&gt;</text><ellipse cx="1550" cy="994.9291" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="998.1395">currentFiber() const : fibers::Fiber *</text><ellipse cx="1550" cy="1007.7338" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="1010.9442">stackHighWatermark() const : size_t</text><ellipse cx="1550" cy="1020.5384" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1559" y="1023.7489">yield() : void</text><ellipse cx="1550" cy="1033.3431" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="1559" y="1036.5536">setObserver(ExecutionObserver * observer) : void</text><ellipse cx="1550" cy="1046.1478" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1559" y="1049.3583">getObserver() : ExecutionObserver *</text><ellipse cx="1550" cy="1058.9525" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="1559" y="1062.1629">setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void</text><ellipse cx="1550" cy="1071.7572" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1559" y="1074.9676">runQueueSize() const : size_t</text><ellipse cx="1550" cy="1084.5619" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="247" x="1559" y="1087.7723">getFiberManager() : fibers::FiberManager &amp;</text><ellipse cx="1550" cy="1097.3666" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="283" x="1559" y="1100.577">getFiberManagerUnsafe() : fibers::FiberManager *</text><ellipse cx="1550" cy="1110.1713" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="1559" y="1113.3817">getOptions() const : const fibers::FiberManager::Options &amp;</text><ellipse cx="1550" cy="1122.9759" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="860" x="1559" y="1126.1864">FiberManager&lt;LocalT&gt;(LocalType&lt;LocalT&gt; , std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="1135.7806" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="1559" y="1138.9911">addTask&lt;F&gt;(F &amp;&amp; func, fibers::TaskOptions taskOptions = TaskOptions()) : void</text><ellipse cx="1550" cy="1148.5853" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="1559" y="1151.7958">addTaskFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1161.39" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1559" y="1164.6004">addTaskEager&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1174.1947" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="1559" y="1177.4051">addTaskEagerFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1186.9994" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1559" y="1190.2098">addTaskRemote&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1199.8041" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="1559" y="1203.0145">addTaskRemoteFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1212.6088" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1559" y="1215.8192">addTaskFinally&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1225.4134" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="1559" y="1228.6239">addTaskFinallyEager&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1238.2181" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="1559" y="1241.4286">runInMainContext&lt;F&gt;(F &amp;&amp; func) : invoke_result_t&lt;F&gt;</text><ellipse cx="1550" cy="1251.0228" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1559" y="1254.2333">local&lt;T&gt;() : T &amp;</text><ellipse cx="1550" cy="1263.8275" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="132" x="1559" y="1267.0379">localThread&lt;T&gt;() : T &amp;</text></a><!--MD5=[ba7273969468a5ac8bf1d40283557580]
class C_0000346702971661703291--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" target="_top" title="WaitExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" xlink:show="new" xlink:title="WaitExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="112.0234" id="C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.5;" width="371" x="1796.5" y="1309.14"/><ellipse cx="1888.75" cy="1325.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1891.7188,1330.7806 Q1891.1406,1331.0775 1890.5,1331.2181 Q1889.8594,1331.3744 1889.1563,1331.3744 Q1886.6563,1331.3744 1885.3281,1329.7338 Q1884.0156,1328.0775 1884.0156,1324.9525 Q1884.0156,1321.8275 1885.3281,1320.1713 Q1886.6563,1318.515 1889.1563,1318.515 Q1889.8594,1318.515 1890.5,1318.6713 Q1891.1563,1318.8275 1891.7188,1319.1244 L1891.7188,1321.8431 Q1891.0938,1321.265 1890.5,1320.9994 Q1889.9063,1320.7181 1889.2813,1320.7181 Q1887.9375,1320.7181 1887.25,1321.7963 Q1886.5625,1322.8588 1886.5625,1324.9525 Q1886.5625,1327.0463 1887.25,1328.1244 Q1887.9375,1329.1869 1889.2813,1329.1869 Q1889.9063,1329.1869 1890.5,1328.9213 Q1891.0938,1328.64 1891.7188,1328.0619 L1891.7188,1330.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="178" x="1909.25" y="1329.2943">futures::detail::WaitExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1797.5" x2="2166.5" y1="1341.14" y2="1341.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1797.5" x2="2166.5" y1="1349.14" y2="1349.14"/><ellipse cx="1807.5" cy="1360.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1816.5" y="1363.3504">add(Func func) : void</text><ellipse cx="1807.5" cy="1372.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1816.5" y="1376.1551">drive() : void</text><ellipse cx="1807.5" cy="1385.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1816.5" y="1388.9598">driveUntil(Clock::time_point deadline) : bool</text><ellipse cx="1807.5" cy="1398.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1816.5" y="1401.7645">detach() : void</text><ellipse cx="1807.5" cy="1411.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="1816.5" y="1414.5692">create() : Executor::KeepAlive&lt;futures::detail::WaitExecutor&gt;</text></a><!--MD5=[667ed72eb2108e1d2d692e666b9ea841]
class C_0001612067402701865715--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" target="_top" title="InlineExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" xlink:show="new" xlink:title="InlineExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="73.6094" id="C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.5;" width="187" x="1888.5" y="1501.14"/><ellipse cx="1933.75" cy="1517.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1936.7188,1522.7806 Q1936.1406,1523.0775 1935.5,1523.2181 Q1934.8594,1523.3744 1934.1563,1523.3744 Q1931.6563,1523.3744 1930.3281,1521.7337 Q1929.0156,1520.0775 1929.0156,1516.9525 Q1929.0156,1513.8275 1930.3281,1512.1712 Q1931.6563,1510.515 1934.1563,1510.515 Q1934.8594,1510.515 1935.5,1510.6712 Q1936.1563,1510.8275 1936.7188,1511.1244 L1936.7188,1513.8431 Q1936.0938,1513.265 1935.5,1512.9994 Q1934.9063,1512.7181 1934.2813,1512.7181 Q1932.9375,1512.7181 1932.25,1513.7962 Q1931.5625,1514.8587 1931.5625,1516.9525 Q1931.5625,1519.0462 1932.25,1520.1244 Q1932.9375,1521.1869 1934.2813,1521.1869 Q1934.9063,1521.1869 1935.5,1520.9212 Q1936.0938,1520.64 1936.7188,1520.0619 L1936.7188,1522.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="1954.25" y="1521.2943">InlineExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1889.5" x2="2074.5" y1="1533.14" y2="1533.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1889.5" x2="2074.5" y1="1541.14" y2="1541.14"/><ellipse cx="1899.5" cy="1552.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="161" x="1908.5" y="1555.3504">instance() : InlineExecutor &amp;</text><ellipse cx="1899.5" cy="1564.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1908.5" y="1568.1551">add(Func f) : void</text></a><!--MD5=[3310bdfe54858106abec0578bfe16154]
class C_0001123262130157209492--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" target="_top" title="TimekeeperScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" xlink:show="new" xlink:title="TimekeeperScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="137.6328" id="C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.5;" width="1097" x="2654" y="1688.14"/><ellipse cx="3101.25" cy="1704.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3104.2188,1709.7806 Q3103.6406,1710.0775 3103,1710.2181 Q3102.3594,1710.3744 3101.6563,1710.3744 Q3099.1563,1710.3744 3097.8281,1708.7337 Q3096.5156,1707.0775 3096.5156,1703.9525 Q3096.5156,1700.8275 3097.8281,1699.1712 Q3099.1563,1697.515 3101.6563,1697.515 Q3102.3594,1697.515 3103,1697.6712 Q3103.6563,1697.8275 3104.2188,1698.1244 L3104.2188,1700.8431 Q3103.5938,1700.265 3103,1699.9994 Q3102.4063,1699.7181 3101.7813,1699.7181 Q3100.4375,1699.7181 3099.75,1700.7962 Q3099.0625,1701.8587 3099.0625,1703.9525 Q3099.0625,1706.0462 3099.75,1707.1244 Q3100.4375,1708.1869 3101.7813,1708.1869 Q3102.4063,1708.1869 3103,1707.9212 Q3103.5938,1707.64 3104.2188,1707.0619 L3104.2188,1709.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="3121.75" y="1708.2943">TimekeeperScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2655" x2="3750" y1="1720.14" y2="1720.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2655" x2="3750" y1="1728.14" y2="1728.14"/><ellipse cx="2665" cy="1739.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="2674" y="1742.3504">TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &amp; ) : void</text><ellipse cx="2665" cy="1751.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="2674" y="1755.1551">operator=(const TimekeeperScheduledExecutor &amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2665" cy="1764.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="2674" y="1767.9598">TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &amp;&amp; ) : void</text><ellipse cx="2665" cy="1777.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="2674" y="1780.7645">operator=(TimekeeperScheduledExecutor &amp;&amp; ) : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2665" cy="1790.3587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1071" x="2674" y="1793.5692">create(Executor::KeepAlive&lt;&gt; parent, Function&lt;std::shared_ptr&lt;Timekeeper&gt; ()&gt; getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive&lt;TimekeeperScheduledExecutor&gt;</text><ellipse cx="2665" cy="1803.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2674" y="1806.3739">add(Func func) : void</text><ellipse cx="2665" cy="1815.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="420" x="2674" y="1819.1786">scheduleAt(Func &amp;&amp; func, const ScheduledExecutor::TimePoint &amp; t) : void</text></a><!--MD5=[bdef50c016f6dbeac54a3e0ea6a4bc7d]
class C_0001347291497865252100--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" target="_top" title="DefaultKeepAliveExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" xlink:show="new" xlink:title="DefaultKeepAliveExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="73.6094" id="C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.5;" width="222" x="3091.5" y="2145.14"/><ellipse cx="3120.45" cy="2161.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3123.4188,2166.7806 Q3122.8406,2167.0775 3122.2,2167.2181 Q3121.5594,2167.3744 3120.8563,2167.3744 Q3118.3563,2167.3744 3117.0281,2165.7338 Q3115.7156,2164.0775 3115.7156,2160.9525 Q3115.7156,2157.8275 3117.0281,2156.1713 Q3118.3563,2154.515 3120.8563,2154.515 Q3121.5594,2154.515 3122.2,2154.6713 Q3122.8563,2154.8275 3123.4188,2155.1244 L3123.4188,2157.8431 Q3122.7938,2157.265 3122.2,2156.9994 Q3121.6063,2156.7181 3120.9813,2156.7181 Q3119.6375,2156.7181 3118.95,2157.7963 Q3118.2625,2158.8588 3118.2625,2160.9525 Q3118.2625,2163.0463 3118.95,2164.1244 Q3119.6375,2165.1869 3120.9813,2165.1869 Q3121.6063,2165.1869 3122.2,2164.9213 Q3122.7938,2164.64 3123.4188,2164.0619 L3123.4188,2166.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="159" x="3137.55" y="2165.2943">DefaultKeepAliveExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3092.5" x2="3312.5" y1="2177.14" y2="2177.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3092.5" x2="3312.5" y1="2185.14" y2="2185.14"/><ellipse cx="3102.5" cy="2196.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3111.5" y="2199.3504">~DefaultKeepAliveExecutor() : void</text><ellipse cx="3102.5" cy="2208.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3111.5" y="2212.1551">weakRef() : Executor::KeepAlive&lt;&gt;</text></a><!--MD5=[343663e47d76253bb0dfc7fb21c3ae29]
class C_0001932117148827315960--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" target="_top" title="DefaultKeepAliveExecutor##WeakRef" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" xlink:show="new" xlink:title="DefaultKeepAliveExecutor##WeakRef" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="99.2188" id="C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1691.5" y="2086.64"/><ellipse cx="1867.25" cy="2102.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1870.2188,2108.2806 Q1869.6406,2108.5775 1869,2108.7181 Q1868.3594,2108.8744 1867.6563,2108.8744 Q1865.1563,2108.8744 1863.8281,2107.2338 Q1862.5156,2105.5775 1862.5156,2102.4525 Q1862.5156,2099.3275 1863.8281,2097.6713 Q1865.1563,2096.015 1867.6563,2096.015 Q1868.3594,2096.015 1869,2096.1713 Q1869.6563,2096.3275 1870.2188,2096.6244 L1870.2188,2099.3431 Q1869.5938,2098.765 1869,2098.4994 Q1868.4063,2098.2181 1867.7813,2098.2181 Q1866.4375,2098.2181 1865.75,2099.2963 Q1865.0625,2100.3588 1865.0625,2102.4525 Q1865.0625,2104.5463 1865.75,2105.6244 Q1866.4375,2106.6869 1867.7813,2106.6869 Q1868.4063,2106.6869 1869,2106.4213 Q1869.5938,2106.14 1870.2188,2105.5619 L1870.2188,2108.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="221" x="1887.75" y="2106.7943">DefaultKeepAliveExecutor::WeakRef</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1692.5" x2="2271.5" y1="2118.64" y2="2118.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1692.5" x2="2271.5" y1="2126.64" y2="2126.64"/><ellipse cx="1702.5" cy="2137.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="555" x="1711.5" y="2140.8504">create(std::shared_ptr&lt;ControlBlock&gt; controlBlock, Executor * executor) : Executor::KeepAlive&lt;&gt;</text><ellipse cx="1702.5" cy="2150.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1711.5" y="2153.6551">add(Func f) : void</text><ellipse cx="1702.5" cy="2163.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1711.5" y="2166.4598">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="1702.5" cy="2176.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1711.5" y="2179.2645">getNumPriorities() const : uint8_t</text></a><!--MD5=[b5e014653e631123d50dd7debc45a978]
class C_0002292058893312396804--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" target="_top" title="ThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" xlink:show="new" xlink:title="ThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="291.2891" id="C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.5;" width="823" x="3812" y="1959.64"/><ellipse cx="4156.25" cy="1975.64" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4156.3594,1970.9837 L4155.2031,1976.0619 L4157.5313,1976.0619 L4156.3594,1970.9837 Z M4154.875,1968.7494 L4157.8594,1968.7494 L4161.2188,1981.14 L4158.7656,1981.14 L4158,1978.0775 L4154.7188,1978.0775 L4153.9688,1981.14 L4151.5313,1981.14 L4154.875,1968.7494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126" x="4176.75" y="1979.7943">ThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3813" x2="4634" y1="1991.64" y2="1991.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3813" x2="4634" y1="1999.64" y2="1999.64"/><ellipse cx="3823" cy="2010.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="797" x="3832" y="2013.8504">ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory, bool isWaitForAll = false) : void</text><ellipse cx="3823" cy="2023.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3832" y="2026.6551">~ThreadPoolExecutor() : void</text><ellipse cx="3823" cy="2036.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="3832" y="2039.4598">add(Func func) = 0 : void</text><ellipse cx="3823" cy="2049.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="3832" y="2052.2645">add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void</text><ellipse cx="3823" cy="2061.8588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="3832" y="2065.0692">setThreadFactory(std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="3823" cy="2074.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="3832" y="2077.8739">getThreadFactory() const : std::shared_ptr&lt;ThreadFactory&gt;</text><ellipse cx="3823" cy="2087.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3832" y="2090.6786">numThreads() const : size_t</text><ellipse cx="3823" cy="2100.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3832" y="2103.4833">setNumThreads(size_t numThreads) : void</text><ellipse cx="3823" cy="2113.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3832" y="2116.2879">numActiveThreads() const : size_t</text><ellipse cx="3823" cy="2125.8822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3832" y="2129.0926">stop() : void</text><ellipse cx="3823" cy="2138.6869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3832" y="2141.8973">join() : void</text><ellipse cx="3823" cy="2151.4916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="332" x="3832" y="2154.702">withAll(FunctionRef&lt;void (ThreadPoolExecutor &amp;)&gt; f) : void</text><ellipse cx="3823" cy="2164.2963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3832" y="2167.5067">getPoolStats() const : ThreadPoolExecutor::PoolStats</text><ellipse cx="3823" cy="2177.1009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3832" y="2180.3114">getPendingTaskCount() const : size_t</text><ellipse cx="3823" cy="2189.9056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3832" y="2193.1161">getName() const : const std::string &amp;</text><ellipse cx="3823" cy="2202.7103" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="3832" y="2205.9208">subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void</text><ellipse cx="3823" cy="2215.515" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3832" y="2218.7254">addObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3823" cy="2228.3197" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3832" y="2231.5301">removeObserver(std::shared_ptr&lt;Observer&gt; ) : void</text><ellipse cx="3823" cy="2241.1244" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3832" y="2244.3348">setThreadDeathTimeout(std::chrono::milliseconds timeout) : void</text></a><!--MD5=[3945712266c557f24486d79132d211c5]
class C_0000260170505900481834--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" target="_top" title="IOThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" xlink:show="new" xlink:title="IOThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="150.4375" id="C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.5;" width="1525" x="4696" y="1152.14"/><ellipse cx="5385.25" cy="1168.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5388.2188,1173.7806 Q5387.6406,1174.0775 5387,1174.2181 Q5386.3594,1174.3744 5385.6563,1174.3744 Q5383.1563,1174.3744 5381.8281,1172.7338 Q5380.5156,1171.0775 5380.5156,1167.9525 Q5380.5156,1164.8275 5381.8281,1163.1713 Q5383.1563,1161.515 5385.6563,1161.515 Q5386.3594,1161.515 5387,1161.6713 Q5387.6563,1161.8275 5388.2188,1162.1244 L5388.2188,1164.8431 Q5387.5938,1164.265 5387,1163.9994 Q5386.4063,1163.7181 5385.7813,1163.7181 Q5384.4375,1163.7181 5383.75,1164.7963 Q5383.0625,1165.8588 5383.0625,1167.9525 Q5383.0625,1170.0463 5383.75,1171.1244 Q5384.4375,1172.1869 5385.7813,1172.1869 Q5386.4063,1172.1869 5387,1171.9213 Q5387.5938,1171.64 5388.2188,1171.0619 L5388.2188,1173.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="5405.75" y="1172.2943">IOThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4697" x2="6220" y1="1184.14" y2="1184.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4697" x2="6220" y1="1192.14" y2="1192.14"/><ellipse cx="4707" cy="1203.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1388" x="4716" y="1206.3504">IOThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4707" cy="1215.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1499" x="4716" y="1219.1551">IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4707" cy="1228.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4716" y="1231.9598">~IOThreadPoolExecutor() : void</text><ellipse cx="4707" cy="1241.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4716" y="1244.7645">add(Func func) : void</text><ellipse cx="4707" cy="1254.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4716" y="1257.5692">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4707" cy="1267.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="4716" y="1270.3739">getEventBase() : EventBase *</text><ellipse cx="4707" cy="1279.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="382" x="4716" y="1283.1786">getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *</text><ellipse cx="4707" cy="1292.7728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="4716" y="1295.9833">getEventBaseManager() : EventBaseManager *</text></a><!--MD5=[af034c985d0d2b969f7008656fc559c3]
class C_0001402712402381953994--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" target="_top" title="SerialExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" xlink:show="new" xlink:title="SerialExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="163.2422" id="C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.5;" width="771" x="2817" y="7.64"/><ellipse cx="3153.25" cy="23.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3156.2188,29.2806 Q3155.6406,29.5775 3155,29.7181 Q3154.3594,29.8744 3153.6563,29.8744 Q3151.1563,29.8744 3149.8281,28.2337 Q3148.5156,26.5775 3148.5156,23.4525 Q3148.5156,20.3275 3149.8281,18.6712 Q3151.1563,17.015 3153.6563,17.015 Q3154.3594,17.015 3155,17.1712 Q3155.6563,17.3275 3156.2188,17.6244 L3156.2188,20.3431 Q3155.5938,19.765 3155,19.4994 Q3154.4063,19.2181 3153.7813,19.2181 Q3152.4375,19.2181 3151.75,20.2962 Q3151.0625,21.3587 3151.0625,23.4525 Q3151.0625,25.5462 3151.75,26.6244 Q3152.4375,27.6869 3153.7813,27.6869 Q3154.4063,27.6869 3155,27.4212 Q3155.5938,27.14 3156.2188,26.5619 L3156.2188,29.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="3173.75" y="27.7943">SerialExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3587" y1="39.64" y2="39.64"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2818" x2="3587" y1="47.64" y2="47.64"/><ellipse cx="2828" cy="58.64" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2837" y="61.8504">SerialExecutor(const SerialExecutor &amp; ) : void</text><ellipse cx="2828" cy="71.4447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="2837" y="74.6551">operator=(const SerialExecutor &amp; ) : SerialExecutor &amp;</text><ellipse cx="2828" cy="84.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2837" y="87.4598">SerialExecutor(SerialExecutor &amp;&amp; ) : void</text><ellipse cx="2828" cy="97.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2837" y="100.2645">operator=(SerialExecutor &amp;&amp; ) : SerialExecutor &amp;</text><ellipse cx="2828" cy="109.8587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="745" x="2837" y="113.0692">create(Executor::KeepAlive&lt;Executor&gt; parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive&lt;SerialExecutor&gt;</text><ellipse cx="2828" cy="122.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="551" x="2837" y="125.8739">createUnique(std::shared_ptr&lt;Executor&gt; parent = getCPUExecutor()) : SerialExecutor::UniquePtr</text><ellipse cx="2828" cy="135.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2837" y="138.6786">add(Func func) : void</text><ellipse cx="2828" cy="148.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2837" y="151.4833">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="2828" cy="161.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2837" y="164.2879">getNumPriorities() const : uint8_t</text></a><!--MD5=[1b407b8a48c2e9a551c6d8a1a18940a0]
class C_0000470362430235503729--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" target="_top" title="ThreadedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" xlink:show="new" xlink:title="ThreadedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="137.6328" id="C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.5;" width="610" x="1677" y="1842.14"/><ellipse cx="1920.25" cy="1858.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1923.2188,1863.7806 Q1922.6406,1864.0775 1922,1864.2181 Q1921.3594,1864.3744 1920.6563,1864.3744 Q1918.1563,1864.3744 1916.8281,1862.7337 Q1915.5156,1861.0775 1915.5156,1857.9525 Q1915.5156,1854.8275 1916.8281,1853.1712 Q1918.1563,1851.515 1920.6563,1851.515 Q1921.3594,1851.515 1922,1851.6712 Q1922.6563,1851.8275 1923.2188,1852.1244 L1923.2188,1854.8431 Q1922.5938,1854.265 1922,1853.9994 Q1921.4063,1853.7181 1920.7813,1853.7181 Q1919.4375,1853.7181 1918.75,1854.7962 Q1918.0625,1855.8587 1918.0625,1857.9525 Q1918.0625,1860.0462 1918.75,1861.1244 Q1919.4375,1862.1869 1920.7813,1862.1869 Q1921.4063,1862.1869 1922,1861.9212 Q1922.5938,1861.64 1923.2188,1861.0619 L1923.2188,1863.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="1940.75" y="1862.2943">ThreadedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1678" x2="2286" y1="1874.14" y2="1874.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1678" x2="2286" y1="1882.14" y2="1882.14"/><ellipse cx="1688" cy="1893.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="1697" y="1896.3504">ThreadedExecutor(std::shared_ptr&lt;ThreadFactory&gt; threadFactory = newDefaultThreadFactory()) : void</text><ellipse cx="1688" cy="1905.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1697" y="1909.1551">~ThreadedExecutor() : void</text><ellipse cx="1688" cy="1918.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1697" y="1921.9598">ThreadedExecutor(const ThreadedExecutor &amp; ) : void</text><ellipse cx="1688" cy="1931.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1697" y="1934.7645">ThreadedExecutor(ThreadedExecutor &amp;&amp; ) : void</text><ellipse cx="1688" cy="1944.3587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="1697" y="1947.5692">operator=(const ThreadedExecutor &amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1688" cy="1957.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="1697" y="1960.3739">operator=(ThreadedExecutor &amp;&amp; ) : ThreadedExecutor &amp;</text><ellipse cx="1688" cy="1969.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1697" y="1973.1786">add(Func func) : void</text></a><!--MD5=[946b31b7442aaf60dac9cea044c2bbbe]
class C_0001740134810840364719--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" target="_top" title="CPUThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" xlink:show="new" xlink:title="CPUThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="240.0703" id="C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.5;" width="1385" x="4766" y="2024.14"/><ellipse cx="5378.75" cy="2040.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5381.7188,2045.7806 Q5381.1406,2046.0775 5380.5,2046.2181 Q5379.8594,2046.3744 5379.1563,2046.3744 Q5376.6563,2046.3744 5375.3281,2044.7337 Q5374.0156,2043.0775 5374.0156,2039.9525 Q5374.0156,2036.8275 5375.3281,2035.1712 Q5376.6563,2033.515 5379.1563,2033.515 Q5379.8594,2033.515 5380.5,2033.6712 Q5381.1563,2033.8275 5381.7188,2034.1244 L5381.7188,2036.8431 Q5381.0938,2036.265 5380.5,2035.9994 Q5379.9063,2035.7181 5379.2813,2035.7181 Q5377.9375,2035.7181 5377.25,2036.7962 Q5376.5625,2037.8587 5376.5625,2039.9525 Q5376.5625,2042.0462 5377.25,2043.1244 Q5377.9375,2044.1869 5379.2813,2044.1869 Q5379.9063,2044.1869 5380.5,2043.9212 Q5381.0938,2043.64 5381.7188,2043.0619 L5381.7188,2045.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="151" x="5399.25" y="2044.2943">CPUThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4767" x2="6150" y1="2056.14" y2="2056.14"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4772" y="2062.14"/><ellipse cx="4777" cy="2067.14" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="207" x="4786" y="2070.3504">kDefaultMaxQueueSize : const size_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4767" x2="6150" y1="2076.9447" y2="2076.9447"/><ellipse cx="4777" cy="2087.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1257" x="4786" y="2091.1551">CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2100.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="4786" y="2103.9598">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2113.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4786" y="2116.7645">CPUThreadPoolExecutor(size_t numThreads) : void</text><ellipse cx="4777" cy="2126.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="4786" y="2129.5692">CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4777" cy="2139.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="666" x="4786" y="2142.3739">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4777" cy="2151.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1047" x="4786" y="2155.1786">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2164.7728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4786" y="2167.9833">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4777" cy="2177.5775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4786" y="2180.7879">~CPUThreadPoolExecutor() : void</text><ellipse cx="4777" cy="2190.3822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4786" y="2193.5926">add(Func func) : void</text><ellipse cx="4777" cy="2203.1869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4786" y="2206.3973">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4777" cy="2215.9916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4786" y="2219.202">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="4777" cy="2228.7963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="4786" y="2232.0067">add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4777" cy="2241.6009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="4786" y="2244.8114">getTaskQueueSize() const : size_t</text><ellipse cx="4777" cy="2254.4056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4786" y="2257.6161">getNumPriorities() const : uint8_t</text><!--MD5=[88ae743009cf121755e429a0e099ad9e]
class C_0002235860541734359952--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" target="_top" title="ManualExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" xlink:show="new" xlink:title="ManualExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="240.0703" id="C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.5;" width="426" x="2989.5" y="699.14"/><ellipse cx="3148.25" cy="715.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3151.2188,720.7806 Q3150.6406,721.0775 3150,721.2181 Q3149.3594,721.3744 3148.6563,721.3744 Q3146.1563,721.3744 3144.8281,719.7338 Q3143.5156,718.0775 3143.5156,714.9525 Q3143.5156,711.8275 3144.8281,710.1713 Q3146.1563,708.515 3148.6563,708.515 Q3149.3594,708.515 3150,708.6713 Q3150.6563,708.8275 3151.2188,709.1244 L3151.2188,711.8431 Q3150.5938,711.265 3150,710.9994 Q3149.4063,710.7181 3148.7813,710.7181 Q3147.4375,710.7181 3146.75,711.7963 Q3146.0625,712.8588 3146.0625,714.9525 Q3146.0625,717.0463 3146.75,718.1244 Q3147.4375,719.1869 3148.7813,719.1869 Q3149.4063,719.1869 3150,718.9213 Q3150.5938,718.64 3151.2188,718.0619 L3151.2188,720.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="3168.75" y="719.2943">ManualExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2990.5" x2="3414.5" y1="731.14" y2="731.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2990.5" x2="3414.5" y1="739.14" y2="739.14"/><ellipse cx="3000.5" cy="750.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3009.5" y="753.3504">~ManualExecutor() : void</text><ellipse cx="3000.5" cy="762.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3009.5" y="766.1551">add(Func ) : void</text><ellipse cx="3000.5" cy="775.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3009.5" y="778.9598">run() : size_t</text><ellipse cx="3000.5" cy="788.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3009.5" y="791.7645">drain() : size_t</text><ellipse cx="3000.5" cy="801.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="3009.5" y="804.5692">wait() : void</text><ellipse cx="3000.5" cy="814.1634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3009.5" y="817.3739">makeProgress() : void</text><ellipse cx="3000.5" cy="826.9681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3009.5" y="830.1786">drive() : void</text><ellipse cx="3000.5" cy="839.7728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="3009.5" y="842.9833">scheduleAt(Func &amp;&amp; f, const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="3000.5" cy="852.5775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="3009.5" y="855.7879">advance(const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="3000.5" cy="865.3822" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="3009.5" y="868.5926">advanceTo(const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="3000.5" cy="878.1869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="3009.5" y="881.3973">now() : ScheduledExecutor::TimePoint</text><ellipse cx="3000.5" cy="890.9916" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3009.5" y="894.202">clear() : std::size_t</text><ellipse cx="3000.5" cy="903.7963" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3009.5" y="907.0067">keepAliveAcquire() : bool</text><ellipse cx="3000.5" cy="916.6009" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3009.5" y="919.8114">keepAliveRelease() : void</text><ellipse cx="3000.5" cy="929.4056" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="3009.5" y="932.6161">waitFor&lt;F&gt;(const F &amp; f) : void</text></a><!--MD5=[86bf37f6e210254ac551127751e3ab47]
class C_0001956570166673420631--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" target="_top" title="MeteredExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" xlink:show="new" xlink:title="MeteredExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="112.0234" id="C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.5;" width="378" x="4034.5" y="2285.14"/><ellipse cx="4165.75" cy="2301.14" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4168.7188,2306.7806 Q4168.1406,2307.0775 4167.5,2307.2181 Q4166.8594,2307.3744 4166.1563,2307.3744 Q4163.6563,2307.3744 4162.3281,2305.7338 Q4161.0156,2304.0775 4161.0156,2300.9525 Q4161.0156,2297.8275 4162.3281,2296.1713 Q4163.6563,2294.515 4166.1563,2294.515 Q4166.8594,2294.515 4167.5,2294.6713 Q4168.1563,2294.8275 4168.7188,2295.1244 L4168.7188,2297.8431 Q4168.0938,2297.265 4167.5,2296.9994 Q4166.9063,2296.7181 4166.2813,2296.7181 Q4164.9375,2296.7181 4164.25,2297.7963 Q4163.5625,2298.8588 4163.5625,2300.9525 Q4163.5625,2303.0463 4164.25,2304.1244 Q4164.9375,2305.1869 4166.2813,2305.1869 Q4166.9063,2305.1869 4167.5,2304.9213 Q4168.0938,2304.64 4168.7188,2304.0619 L4168.7188,2306.7806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4186.25" y="2305.2943">MeteredExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4035.5" x2="4411.5" y1="2317.14" y2="2317.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4035.5" x2="4411.5" y1="2325.14" y2="2325.14"/><ellipse cx="4045.5" cy="2336.14" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="4054.5" y="2339.3504">MeteredExecutor(std::unique_ptr&lt;Executor&gt; exe) : void</text><ellipse cx="4045.5" cy="2348.9447" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="4054.5" y="2352.1551">MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void</text><ellipse cx="4045.5" cy="2361.7494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="4054.5" y="2364.9598">~MeteredExecutor() : void</text><ellipse cx="4045.5" cy="2374.5541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4054.5" y="2377.7645">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="4045.5" cy="2387.3588" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4054.5" y="2390.5692">add(Func func) : void</text></a><!--MD5=[82b5c747f5a02a065abf0a634d41cbf4]
class C_0000560396763155385774--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" target="_top" title="SoftRealTimeExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" xlink:show="new" xlink:title="SoftRealTimeExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="48" id="C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.5;" width="169" x="2455" y="1946.14"/><ellipse cx="2470" cy="1962.14" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2470.1094,1957.4837 L2468.9531,1962.5619 L2471.2813,1962.5619 L2470.1094,1957.4837 Z M2468.625,1955.2494 L2471.6094,1955.2494 L2474.9688,1967.64 L2472.5156,1967.64 L2471.75,1964.5775 L2468.4688,1964.5775 L2467.7188,1967.64 L2465.2813,1967.64 L2468.625,1955.2494 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="2484" y="1966.2943">SoftRealTimeExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2456" x2="2623" y1="1978.14" y2="1978.14"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2456" x2="2623" y1="1986.14" y2="1986.14"/></a><!--MD5=[4c5ac55a9490dced79f9e191b33f25b1]
class C_0000586027154664049253--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" target="_top" title="EDFThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" xlink:show="new" xlink:title="EDFThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#fl3ip7jlcch5k)" height="163.2422" id="C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.5;" width="976" x="4970.5" y="1825.64"/><ellipse cx="5379.25" cy="1841.64" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5382.2188,1847.2806 Q5381.6406,1847.5775 5381,1847.7181 Q5380.3594,1847.8744 5379.6563,1847.8744 Q5377.1563,1847.8744 5375.8281,1846.2337 Q5374.5156,1844.5775 5374.5156,1841.4525 Q5374.5156,1838.3275 5375.8281,1836.6712 Q5377.1563,1835.015 5379.6563,1835.015 Q5380.3594,1835.015 5381,1835.1712 Q5381.6563,1835.3275 5382.2188,1835.6244 L5382.2188,1838.3431 Q5381.5938,1837.765 5381,1837.4994 Q5380.4063,1837.2181 5379.7813,1837.2181 Q5378.4375,1837.2181 5377.75,1838.2962 Q5377.0625,1839.3587 5377.0625,1841.4525 Q5377.0625,1843.5462 5377.75,1844.6244 Q5378.4375,1845.6869 5379.7813,1845.6869 Q5380.4063,1845.6869 5381,1845.4212 Q5381.5938,1845.14 5382.2188,1844.5619 L5382.2188,1847.2806 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="150" x="5399.75" y="1845.7943">EDFThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4971.5" x2="5945.5" y1="1857.64" y2="1857.64"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4976.5" y="1863.64"/><ellipse cx="4981.5" cy="1868.64" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4990.5" y="1871.8504">kEarliestDeadline : const uint64_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4976.5" y="1876.4447"/><ellipse cx="4981.5" cy="1881.4447" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="182" x="4990.5" y="1884.6551">kLatestDeadline : const uint64_t</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="4971.5" x2="5945.5" y1="1891.2494" y2="1891.2494"/><ellipse cx="4981.5" cy="1902.2494" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="4990.5" y="1905.4598">EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("EDFThreadPool")) : void</text><ellipse cx="4981.5" cy="1915.0541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="4990.5" y="1918.2645">~EDFThreadPoolExecutor() : void</text><ellipse cx="4981.5" cy="1927.8587" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4990.5" y="1931.0692">add(Func f) : void</text><ellipse cx="4981.5" cy="1940.6634" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4990.5" y="1943.8739">add(Func f, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="1953.4681" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4990.5" y="1956.6786">add(Func f, std::size_t total, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="1966.2728" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="4990.5" y="1969.4833">add(std::vector&lt;Func&gt; fs, uint64_t deadline) : void</text><ellipse cx="4981.5" cy="1979.0775" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="4990.5" y="1982.2879">deadlineExecutor(uint64_t deadline) : Executor::KeepAlive&lt;&gt;</text><!--MD5=[0507f50678c26aafd20e9031c16ac1d0]
link C_0001663594882877424244 to C_0002222099135672593686--><path d="M864.12,1743.71 C882.97,1743.6 901.59,1743.45 919.74,1743.25 " fill="none" id="C_0001663594882877424244-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="924.85,1743.19,915.8049,1739.2931,919.8503,1743.2471,915.8963,1747.2926,924.85,1743.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d44102866279698d641a58659b4220ed]
reverse link C_0002222099135672593686 to C_0001663594882877424244--><path d="M904.75,1718.16 C891.39,1718.03 877.82,1717.92 864.12,1717.84 " fill="none" id="C_0002222099135672593686&lt;-C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="904.93,1711.16,924.85,1718.39,904.78,1725.16,904.93,1711.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9bfe04d74fcca5e380cd86fc2508ab2b]
reverse link C_0002222099135672593686 to C_0001968432200878677255--><path d="M1166.02,1629.42 C1173.05,1308.35 1212.44,325.39 1432,116.14 C1542.27,11.05 1726.9,11.68 1851.26,27.33 " fill="none" id="C_0002222099135672593686&lt;-C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1173.01,1629.74,1165.6,1649.59,1159.01,1629.45,1173.01,1629.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[455db288e65f9217baffdaa9cf7f7dc9]
reverse link C_0002222099135672593686 to C_0000155178671636628489--><path d="M1178.08,1629.44 C1212.93,1379.9 1311.33,745.11 1432,572.14 C1536.53,422.31 1759.5,371.62 1886.78,354.61 " fill="none" id="C_0002222099135672593686&lt;-C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1184.97,1630.7,1175.29,1649.55,1171.1,1628.78,1184.97,1630.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9209e2fb2cca13a1bd53142f4af5317e]
reverse link C_0000155178671636628489 to C_0000587962468506435170--><path d="M2097.15,346.14 C2261.72,346.14 2573.38,346.14 2823.75,346.14 " fill="none" id="C_0000155178671636628489&lt;-C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2097.09,353.14,2077.09,346.14,2097.09,339.14,2097.09,353.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4cd26f58d593a6e58c5c951cd50a788]
link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4332.9,1087.74 C4664.58,1095.42 5679.38,1096.92 6276.48,1092.22 " fill="none" id="C_0002145523347961259416-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6281.73,1092.18,6272.7073,1088.2315,6276.7301,1092.2086,6272.753,1096.2314,6281.73,1092.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dec116c53a2d170dff43443e961da53]
reverse link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4352.9,1075.75 C4704.73,1068 5696.85,1066.59 6281.73,1071.52 " fill="none" id="C_0002145523347961259416&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4353.05,1082.75,4332.9,1076.22,4352.73,1068.75,4353.05,1082.75" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[956e3c6898026d390548bc98624d6186]
reverse link C_0002222099135672593686 to C_0002145523347961259416--><path d="M1165.26,1629.23 C1173.08,1411.7 1225.71,903.88 1539,683.14 C1619.48,626.44 2352.35,616.71 2425,683.14 C2480.16,733.58 2400.76,966.71 2455,1018.14 C2923.6,1462.49 3815.18,1219.94 4118.48,1119.21 " fill="none" id="C_0002222099135672593686&lt;-C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1172.25,1629.58,1164.64,1649.35,1158.26,1629.14,1172.25,1629.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9b8d25b1a905ec17cebf74be6e4d1ef]
reverse link C_0000481841646641149488 to C_0001970350906198958245--><path d="M2117,542.84 C2215.59,540.22 2345.75,554.6 2425,634.14 C2481.01,690.35 2413.3,742.63 2455,810.14 C2512.65,903.47 2550.93,918.6 2654,956.14 C2883.13,1039.6 2957.64,992.14 3201.5,992.14 C3201.5,992.14 3201.5,992.14 5459.5,992.14 C5733.1,992.14 6039.05,1013.22 6281.98,1034.97 " fill="none" id="C_0000481841646641149488&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2117.04,549.85,2096.78,543.63,2116.49,535.86,2117.04,549.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13714c40570251b1727355460ed628a2]
reverse link C_0000155178671636628489 to C_0001970350906198958245--><path d="M2097.54,339.32 C2187.02,333.13 2314.33,322.45 2425,306.14 C2527.79,290.99 2551.02,272.93 2654,259.14 C2895.67,226.78 2957.67,224.14 3201.5,224.14 C3201.5,224.14 3201.5,224.14 5459.5,224.14 C5807.55,224.14 6131.4,448.39 6364.82,667.59 " fill="none" id="C_0000155178671636628489&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2097.77,346.32,2077.35,340.68,2096.83,332.35,2097.77,346.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[85ac5256db58d12eb58da4f0bfa4fa8f]
reverse link C_0001218209673148292552 to C_0001970350906198958245--><path d="M2214.7,1632.64 C2540.45,1576.3 3105.01,1481.14 3201.5,1481.14 C3201.5,1481.14 3201.5,1481.14 5459.5,1481.14 C5805.52,1481.14 5892.9,1429.06 6221,1319.14 C6241.05,1312.42 6261.36,1305.14 6281.74,1297.42 " fill="none" id="C_0001218209673148292552&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2215.46,1639.61,2194.56,1636.12,2213.07,1625.81,2215.46,1639.61" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c5cdfc8ff258542796370a43a8a6d5bc]
reverse link C_0002222099135672593686 to C_0000481841646641149488--><path d="M1174.35,1629.45 C1200.56,1381.32 1280.58,755.34 1432,621.14 C1550.58,516.05 1744.6,519.9 1867.4,535.88 " fill="none" id="C_0002222099135672593686&lt;-C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1181.3,1630.29,1172.26,1649.46,1167.37,1628.84,1181.3,1630.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6d6cc176091032b9e9a6d8f3477fd2ab]
reverse link C_0000481841646641149488 to C_0000769434624932181431--><path d="M2116.55,557.14 C2305.59,557.14 2656.18,557.14 2907.71,557.14 " fill="none" id="C_0000481841646641149488&lt;-C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2116.54,564.14,2096.54,557.14,2116.54,550.14,2116.54,564.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8fc612c63803be1a9f3540f6bd40d2f0]
reverse link C_0002222099135672593686 to C_0001218209673148292552--><path d="M1422.33,1712.83 C1534.1,1704.89 1663.36,1695.71 1769.38,1688.18 " fill="none" id="C_0002222099135672593686&lt;-C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1422.48,1719.83,1402.04,1714.27,1421.49,1705.87,1422.48,1719.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0a8abd6ab6b72d3d723f8e27fc307bfc]
reverse link C_0002222099135672593686 to C_0001206661724003471988--><path d="M1235.79,1633.22 C1306.68,1539.5 1421.55,1397.12 1539,1291.14 C1545.48,1285.29 1552.08,1279.47 1558.78,1273.66 " fill="none" id="C_0002222099135672593686&lt;-C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1241.34,1637.49,1223.72,1649.27,1230.15,1629.08,1241.34,1637.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[135cc1a411e5fe5d6356ee66905451c6]
reverse link C_0002222099135672593686 to C_0000346702971661703291--><path d="M1258.49,1635.51 C1329.34,1569.32 1432.27,1485.01 1539,1438.14 C1619.38,1402.84 1714.81,1384.48 1796.38,1374.98 " fill="none" id="C_0002222099135672593686&lt;-C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1263.21,1640.68,1243.87,1649.34,1253.59,1630.51,1263.21,1640.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dd8f29c1989340f5d3fd880405cabcb]
link C_0001612067402701865715 to C_0001612067402701865715--><path d="M1889.2,1501.1 C1876.36,1482.62 1907.29,1466.14 1982,1466.14 C2050.29,1466.14 2082,1479.91 2077.14,1496.39 " fill="none" id="C_0001612067402701865715-&gt;C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2074.8,1501.1,2082.3946,1494.8293,2077.0303,1496.625,2075.2346,1491.2607,2074.8,1501.1" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1959" y="1450.2064"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="1969" y="1457.2069">cache</text><!--MD5=[ca88da5f247437352a79e15a35decac2]
reverse link C_0002222099135672593686 to C_0001612067402701865715--><path d="M1378.53,1642.71 C1430.35,1623.98 1486.08,1606 1539,1593.14 C1657.72,1564.29 1798.26,1550.1 1888.47,1543.47 " fill="none" id="C_0002222099135672593686&lt;-C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1380.82,1649.33,1359.63,1649.64,1376,1636.18,1380.82,1649.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[89eb8d3ac6b14cbcc2f2be4548fd3da0]
link C_0001123262130157209492 to C_0002222099135672593686--><path d="M2653.82,1763.57 C2329.58,1765.44 1910.8,1764.5 1539,1753.14 C1496.38,1751.84 1451.06,1749.76 1407.21,1747.4 " fill="none" id="C_0001123262130157209492-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1402.15,1747.12,1410.9192,1751.6033,1407.1426,1747.3918,1411.3541,1743.6152,1402.15,1747.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9bc685a0c95c6f0f42cb945c35073ec]
reverse link C_0001218209673148292552 to C_0001123262130157209492--><path d="M2214.68,1689.11 C2339.54,1697.72 2499.32,1708.74 2653.78,1719.38 " fill="none" id="C_0001218209673148292552&lt;-C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2214.02,1696.09,2194.55,1687.73,2214.98,1682.12,2214.02,1696.09" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbe4f6025306bddd8773b75a56f8d272]
reverse link C_0002222099135672593686 to C_0001347291497865252100--><path d="M1202.17,1831.33 C1255.19,1954.05 1365.23,2151.97 1539,2203.14 C1830.78,2289.06 2768.87,2219.28 3091.38,2191.93 " fill="none" id="C_0002222099135672593686&lt;-C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1195.63,1833.83,1194.3,1812.68,1208.53,1828.39,1195.63,1833.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[286dc64e0630f8c70451157496c94824]
link C_0001932117148827315960 to C_0001347291497865252100--><path d="M2272.54,2147.07 C2528.02,2156.72 2888.16,2170.31 3076.16,2177.41 " fill="none" id="C_0001932117148827315960-&gt;C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3083.3258" cy="2177.6752" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3075.3316" x2="3091.32" y1="2177.3703" y2="2177.98"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3083.6306" x2="3083.021" y1="2169.681" y2="2185.6694"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1691.29,2144.02 C1603.47,2139.07 1509.76,2122.16 1432,2079.14 C1326.16,2020.59 1250.99,1900.43 1207.81,1817.63 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1205.27,1812.73,1205.8683,1822.5607,1207.5745,1817.1673,1212.9679,1818.8735,1205.27,1812.73" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1691.49,2139.04 C1603.69,2129.44 1509.93,2107.96 1432,2064.14 C1330.92,2007.3 1253.51,1895.64 1208.57,1817.35 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1205.93,1812.71,1206.9049,1822.5105,1208.403,1817.0556,1213.8579,1818.5537,1205.93,1812.71" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1435" y="2053.2064"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="1445" y="2060.2069">executor_</text><!--MD5=[f4091570a50e50d543407bc69d17a718]
reverse link C_0002222099135672593686 to C_0001932117148827315960--><path d="M1201.38,1831.32 C1243.31,1922.87 1320.7,2052.57 1432,2114.14 C1509.76,2157.16 1603.47,2174.07 1691.29,2177.34 " fill="none" id="C_0002222099135672593686&lt;-C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1194.96,1834.1,1193.22,1812.98,1207.75,1828.41,1194.96,1834.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a391c4085ec82253d9730dd224003987]
reverse link C_0001347291497865252100 to C_0002292058893312396804--><path d="M3333.82,2172.29 C3454.66,2163.16 3641.06,2149.08 3811.99,2136.16 " fill="none" id="C_0001347291497865252100&lt;-C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3333.99,2179.3,3313.52,2173.83,3332.93,2165.34,3333.99,2179.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[accd7d2ab1e2b7c177a3edb9e3f55c72]
link C_0000260170505900481834 to C_0001970350906198958245--><path d="M6116.3,1152.09 C6170.5,1145.9 6224.47,1139.73 6276.65,1133.77 " fill="none" id="C_0000260170505900481834-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6281.69,1133.2,6272.2911,1130.257,6276.7229,1133.7726,6273.2073,1138.2043,6281.69,1133.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6a40fe925e9209b42fe1a8440e6b087b]
reverse link C_0002292058893312396804 to C_0000260170505900481834--><path d="M4445.71,1947.62 C4713.07,1757.24 5151.97,1444.7 5352.11,1302.19 " fill="none" id="C_0002292058893312396804&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4449.49,1953.52,4429.14,1959.42,4441.37,1942.12,4449.49,1953.52" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5276268b626ef7b54a98769403cb5439]
reverse link C_0002145523347961259416 to C_0000260170505900481834--><path d="M4352.74,1097.22 C4466.52,1110.6 4641.83,1131.22 4819.52,1152.12 " fill="none" id="C_0002145523347961259416&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4351.62,1104.14,4332.57,1094.85,4353.25,1090.24,4351.62,1104.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c90348528aae1f72fa3dfd98dc4bf126]
link C_0001402712402381953994 to C_0002222099135672593686--><path d="M2816.69,95.85 C2390.59,110.39 1737.52,155.98 1539,298.14 C1314.4,458.97 1203.01,1359.26 1173.01,1644.47 " fill="none" id="C_0001402712402381953994-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1172.48,1649.45,1177.4065,1640.9219,1173.0071,1644.4779,1169.4511,1640.0785,1172.48,1649.45" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e207bfffdf80fcc13f6dcb609a0d553]
reverse link C_0000155178671636628489 to C_0001402712402381953994--><path d="M2091.31,309.2 C2186.27,277.92 2328.51,233.72 2455,205.14 C2571.74,178.76 2700.1,156.45 2816.97,138.66 " fill="none" id="C_0000155178671636628489&lt;-C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2093.27,315.92,2072.08,315.57,2088.87,302.63,2093.27,315.92" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5881062226b0dc1facde97fd853f45]
reverse link C_0002222099135672593686 to C_0000470362430235503729--><path d="M1421.82,1812.62 C1425.23,1813.48 1428.63,1814.32 1432,1815.14 C1510.74,1834.3 1596.72,1851.2 1676.77,1865.27 " fill="none" id="C_0002222099135672593686&lt;-C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1419.76,1819.32,1402.15,1807.53,1423.27,1805.77,1419.76,1819.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e81e9ddbd832a715a37127e28d03ab94]
reverse link C_0002292058893312396804 to C_0001740134810840364719--><path d="M4655.08,2118.76 C4691.29,2119.91 4728.43,2121.08 4765.96,2122.27 " fill="none" id="C_0002292058893312396804&lt;-C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4654.84,2125.76,4635.07,2118.13,4655.28,2111.76,4654.84,2125.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ab611552766336439f9b6ed347c4215c]
reverse link C_0000481841646641149488 to C_0002235860541734359952--><path d="M2116.61,541.7 C2213,538.08 2340.52,549.8 2425,621.14 C2458.18,649.16 2421.76,686.19 2455,714.14 C2601.74,837.55 2825,854.1 2989.15,845.68 " fill="none" id="C_0000481841646641149488&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2116.86,548.69,2096.54,542.69,2116.17,534.71,2116.86,548.69" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f76a078fe6562592f931aa95ad9663c]
reverse link C_0001218209673148292552 to C_0002235860541734359952--><path d="M2214.83,1679.71 C2290.55,1670.15 2369.38,1645.89 2425,1592.14 C2469.83,1548.83 2422.93,1508.59 2455,1455.14 C2588.03,1233.4 2825.95,1050.92 2997.49,939.15 " fill="none" id="C_0001218209673148292552&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2215.27,1686.7,2194.62,1681.93,2213.74,1672.79,2215.27,1686.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3ab65a7e84903ff36ad19183ae4fbd24]
reverse link C_0000155178671636628489 to C_0002235860541734359952--><path d="M2096.57,375.2 C2188.48,401.27 2319.52,444.33 2425,502.14 C2538.28,564.23 2537.97,624.35 2654,681.14 C2758.88,732.48 2884.71,765.92 2989.27,787 " fill="none" id="C_0000155178671636628489&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2094.67,381.93,2077.29,369.81,2098.43,368.45,2094.67,381.93" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6921ed0d28362e9667150d5319fe2776]
link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4034.12,2366.85 C3478.4,2438.74 1858.09,2618.7 1432,2336.14 C1255.06,2218.8 1194.17,1955.42 1174,1818.13 " fill="none" id="C_0001956570166673420631-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1173.24,1812.89,1170.5645,1822.3685,1173.9531,1817.8389,1178.4827,1821.2275,1173.24,1812.89" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[99d55ebf5c4bd3f71851e99b5adaf196]
reverse link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4020.65,2345.48 C3479.91,2355.33 2008.03,2370.17 1539,2252.14 C1336.72,2201.24 1229.99,1946.06 1187.26,1812.67 " fill="none" id="C_0001956570166673420631&lt;-C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4034.03,2345.23,4027.9606,2341.3361,4022.0319,2345.441,4028.1012,2349.3349,4034.03,2345.23" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2483.5" y="2327.2064"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="2493.5" y="2334.2069">ownedExecutor_</text><!--MD5=[a517c54ec156d68ee25be864ae687f6d]
reverse link C_0001347291497865252100 to C_0001956570166673420631--><path d="M3333.4,2202.41 C3510.99,2230.12 3830.71,2280.01 4034.47,2311.8 " fill="none" id="C_0001347291497865252100&lt;-C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3332.2,2209.31,3313.52,2199.31,3334.36,2195.48,3332.2,2209.31" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4dc2b8b28f130daed24dc78f6ab3324]
reverse link C_0002222099135672593686 to C_0000560396763155385774--><path d="M1261.36,1826.22 C1331.9,1888.46 1433.25,1964.31 1539,1998.14 C1914.05,2118.15 2034.1,2045.65 2425,1998.14 C2434.77,1996.95 2444.91,1995.21 2454.94,1993.17 " fill="none" id="C_0002222099135672593686&lt;-C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1256.56,1831.32,1246.34,1812.76,1265.9,1820.89,1256.56,1831.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[20b939e7521107461b4dab031da0529a]
reverse link C_0000560396763155385774 to C_0000586027154664049253--><path d="M2644.22,1967.83 C2861.04,1963.01 3378.15,1951.53 3812,1942.14 C4201.41,1933.71 4642.66,1924.34 4970.14,1917.41 " fill="none" id="C_0000560396763155385774&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2644.34,1974.83,2624.18,1968.28,2644.02,1960.83,2644.34,1974.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b64a71dfe9bdf716efdc37867f26125a]
reverse link C_0002292058893312396804 to C_0000586027154664049253--><path d="M4655.4,2014.23 C4669.08,2011.77 4682.64,2009.41 4696,2007.14 C4784.49,1992.16 4879.1,1978.14 4970.48,1965.61 " fill="none" id="C_0002292058893312396804&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4656.21,2021.19,4635.28,2017.88,4653.71,2007.42,4656.21,2021.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bec919f3171850e0e61eba2c6e1cee73]
@startuml
left to right direction
class "detail::ExecutorWithPriorityImpl<Callback>" as C_0001663594882877424244
class C_0001663594882877424244 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22{ExecutorWithPriorityImpl}]] {
{static} +create(Executor::KeepAlive<Executor> executor, Callback && callback) : Executor::KeepAlive<ExecutorWithPriorityImpl<std::decay_t<Callback>>>
+ExecutorWithPriorityImpl<Callback>(const ExecutorWithPriorityImpl<Callback> & ) : void
+operator=(const ExecutorWithPriorityImpl<Callback> & ) : ExecutorWithPriorityImpl<Callback> &
+ExecutorWithPriorityImpl<Callback>(ExecutorWithPriorityImpl<Callback> && ) : void
+operator=(ExecutorWithPriorityImpl<Callback> && ) : ExecutorWithPriorityImpl<Callback> &
+add(Func func) : void
}
abstract "Executor" as C_0002222099135672593686
abstract C_0002222099135672593686 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53{Executor}]] {
+~Executor() : void
{abstract} +add(Func ) = 0 : void
+addWithPriority(Func , int8_t priority) : void
+getNumPriorities() const : uint8_t
{static} +getKeepAliveToken<ExecutorT>(ExecutorT * executor) : KeepAlive<ExecutorT>
{static} +getKeepAliveToken<ExecutorT>(ExecutorT & executor) : KeepAlive<ExecutorT>
{static} +LO_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68{LO_PRI}]]]
{static} +MID_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69{MID_PRI}]]]
{static} +HI_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70{HI_PRI}]]]
}
class "QueuedImmediateExecutor" as C_0001968432200878677255
class C_0001968432200878677255 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31{QueuedImmediateExecutor}]] {
{static} +instance() : QueuedImmediateExecutor &
+add(Func callback) : void
}
class "SequencedExecutor" as C_0000155178671636628489
class C_0000155178671636628489 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27{SequencedExecutor}]] {
+~SequencedExecutor() : void
}
class "StrandExecutor" as C_0000587962468506435170
class C_0000587962468506435170 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122{StrandExecutor}]] {
{static} +create() : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context) : Executor::KeepAlive<StrandExecutor>
{static} +create(Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context, Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
abstract "IOExecutor" as C_0002145523347961259416
abstract C_0002145523347961259416 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40{IOExecutor}]] {
+~IOExecutor() = default : void
{abstract} +getEventBase() = 0 : EventBase *
}
class "EventBase" as C_0001970350906198958245
class C_0001970350906198958245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L22{EventBase}]] {
+EventBase(std::chrono::milliseconds tickInterval) : void
+EventBase() : void
+EventBase(bool enableTimeMeasurement) : void
+EventBase(const EventBase & ) : void
+operator=(const EventBase & ) : EventBase &
+EventBase(event_base * evb, bool enableTimeMeasurement = true) : void
+EventBase(EventBase::Options options) : void
+~EventBase() : void
+loop() : bool
+loopIgnoreKeepAlive() : bool
+loopOnce(int flags = 0) : bool
+loopForever() : void
+terminateLoopSoon() : void
+runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr<RequestContext> rctx = RequestContext::saveContext()) : void
+runInLoop(EventBase::Func c, bool thisIteration = false) : void
+runOnDestruction(EventBase::OnDestructionCallback & callback) : void
+runOnDestruction(EventBase::Func f) : void
+runBeforeLoop(EventBase::LoopCallback * callback) : void
+runInEventBaseThread(EventBase::Func fn) : void
+runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) : void
+runInEventBaseThreadAndWait(EventBase::Func fn) : void
+runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) : void
+setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void
+setLoadAvgMsec(std::chrono::milliseconds ms) : void
+resetLoadAvg(double value = 0.0) : void
+getAvgLoopTime() const : double
+isRunning() const : bool
+waitUntilRunning() : void
+getNotificationQueueSize() const : size_t
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+isInEventBaseThread() const : bool
+inRunningEventBaseThread() const : bool
+checkIsInEventBaseThread() const : void
+dcheckIsInEventBaseThread() const : void
+timer() : HHWheelTimer &
+getBackend() : EventBaseBackendBase *
+getLibeventBase() const : event_base *
{static} +getLibeventVersion() : const char *
{static} +getLibeventMethod() : const char *
+bumpHandlingTime() : void
+setObserver(const std::shared_ptr<EventBaseObserver> & observer) : void
+getObserver() : const std::shared_ptr<EventBaseObserver> &
+setExecutionObserver(ExecutionObserver * observer) : void
+getExecutionObserver() : ExecutionObserver *
+setName(const std::string & name) : void
+getName() : const std::string &
+add(Cob fn) : void
+drive() : void
+scheduleAt(EventBase::Func && fn, const ScheduledExecutor::TimePoint & timeout) : void
+attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void
+detachTimeoutManager(AsyncTimeout * obj) : void
+scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool
+cancelTimeout(AsyncTimeout * obj) : void
+isInTimeoutManagerThread() : bool
+getVirtualEventBase() : VirtualEventBase &
+getEventBase() : EventBase *
{static} +getDefaultBackend() : std::unique_ptr<EventBaseBackendBase>
+runInEventBaseThread<T>(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAlwaysEnqueue<T>(void (*)(T *) fn, T * arg) : void
+runInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) : void
+runImmediatelyOrRunInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) : void
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
{abstract} +drive() = 0 : void
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() : void
+drive() : void
+try_drive() : bool
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+try_wait() : bool
+try_drive_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_drive_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
+try_wait_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_wait_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
}
abstract "ScheduledExecutor" as C_0001218209673148292552
abstract C_0001218209673148292552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28{ScheduledExecutor}]] {
+~ScheduledExecutor() = default : void
{abstract} +add(Func ) = 0 : void
+schedule(Func && a) : void
+schedule(Func && a, const ScheduledExecutor::Duration & dur) : void
+scheduleAt(Func && , const ScheduledExecutor::TimePoint & ) : void
+now() : ScheduledExecutor::TimePoint
}
class "fibers::FiberManager" as C_0001206661724003471988
class C_0001206661724003471988 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80{FiberManager}]] {
+FiberManager(const fibers::FiberManager & ) : void
+operator=(const fibers::FiberManager & ) : fibers::FiberManager &
+FiberManager(std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+~FiberManager() : void
+loopController() : fibers::LoopController &
+loopController() const : const fibers::LoopController &
+loopUntilNoReady() : void
+loopUntilNoReadyImpl() : void
+runEagerFiberImpl(fibers::Fiber * ) : void
+shouldRunLoopRemote() : bool
+hasTasks() const : bool
+numActiveTasks() const : size_t
+hasReadyTasks() const : bool
+setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void
+add(Func f) : void
+fibersAllocated() const : size_t
+fibersPoolSize() const : size_t
+hasActiveFiber() const : bool
+getCurrentTaskRunningTime() const : Optional<std::chrono::nanoseconds>
+currentFiber() const : fibers::Fiber *
+stackHighWatermark() const : size_t
+yield() : void
+setObserver(ExecutionObserver * observer) : void
+getObserver() : ExecutionObserver *
+setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void
+runQueueSize() const : size_t
{static} +getFiberManager() : fibers::FiberManager &
{static} +getFiberManagerUnsafe() : fibers::FiberManager *
+getOptions() const : const fibers::FiberManager::Options &
+FiberManager<LocalT>(LocalType<LocalT> , std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+addTask<F>(F && func, fibers::TaskOptions taskOptions = TaskOptions()) : void
+addTaskFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskEager<F>(F && func) : void
+addTaskEagerFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskRemote<F>(F && func) : void
+addTaskRemoteFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskFinally<F,G>(F && func, G && finally) : void
+addTaskFinallyEager<F,G>(F && func, G && finally) : void
+runInMainContext<F>(F && func) : invoke_result_t<F>
+local<T>() : T &
{static} +localThread<T>() : T &
}
class "futures::detail::WaitExecutor" as C_0000346702971661703291
class C_0000346702971661703291 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478{WaitExecutor}]] {
+add(Func func) : void
+drive() : void
+driveUntil(Clock::time_point deadline) : bool
+detach() : void
{static} +create() : Executor::KeepAlive<futures::detail::WaitExecutor>
}
class "InlineExecutor" as C_0001612067402701865715
class C_0001612067402701865715 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30{InlineExecutor}]] {
{static} +instance() : InlineExecutor &
+add(Func f) : void
}
class "TimekeeperScheduledExecutor" as C_0001123262130157209492
class C_0001123262130157209492 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35{TimekeeperScheduledExecutor}]] {
+TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor & ) : void
+operator=(const TimekeeperScheduledExecutor & ) : TimekeeperScheduledExecutor &
+TimekeeperScheduledExecutor(TimekeeperScheduledExecutor && ) : void
+operator=(TimekeeperScheduledExecutor && ) : TimekeeperScheduledExecutor &
{static} +create(Executor::KeepAlive<> parent, Function<std::shared_ptr<Timekeeper> ()> getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive<TimekeeperScheduledExecutor>
+add(Func func) : void
+scheduleAt(Func && func, const ScheduledExecutor::TimePoint & t) : void
}
class "DefaultKeepAliveExecutor" as C_0001347291497865252100
class C_0001347291497865252100 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30{DefaultKeepAliveExecutor}]] {
+~DefaultKeepAliveExecutor() : void
+weakRef() : Executor::KeepAlive<>
}
class "DefaultKeepAliveExecutor::WeakRef" as C_0001932117148827315960
class C_0001932117148827315960 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59{DefaultKeepAliveExecutor##WeakRef}]] {
{static} +create(std::shared_ptr<ControlBlock> controlBlock, Executor * executor) : Executor::KeepAlive<>
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
abstract "ThreadPoolExecutor" as C_0002292058893312396804
abstract C_0002292058893312396804 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67{ThreadPoolExecutor}]] {
+ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory, bool isWaitForAll = false) : void
+~ThreadPoolExecutor() : void
{abstract} +add(Func func) = 0 : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void
+setThreadFactory(std::shared_ptr<ThreadFactory> threadFactory) : void
+getThreadFactory() const : std::shared_ptr<ThreadFactory>
+numThreads() const : size_t
+setNumThreads(size_t numThreads) : void
+numActiveThreads() const : size_t
+stop() : void
+join() : void
{static} +withAll(FunctionRef<void (ThreadPoolExecutor &)> f) : void
+getPoolStats() const : ThreadPoolExecutor::PoolStats
+getPendingTaskCount() const : size_t
+getName() const : const std::string &
+subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void
+addObserver(std::shared_ptr<Observer> ) : void
+removeObserver(std::shared_ptr<Observer> ) : void
+setThreadDeathTimeout(std::chrono::milliseconds timeout) : void
}
class "IOThreadPoolExecutor" as C_0000260170505900481834
class C_0000260170505900481834 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58{IOThreadPoolExecutor}]] {
+IOThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+~IOThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getEventBase() : EventBase *
{static} +getEventBase(ThreadPoolExecutor::ThreadHandle * ) : EventBase *
+getEventBaseManager() : EventBaseManager *
}
class "SerialExecutor" as C_0001402712402381953994
class C_0001402712402381953994 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53{SerialExecutor}]] {
+SerialExecutor(const SerialExecutor & ) : void
+operator=(const SerialExecutor & ) : SerialExecutor &
+SerialExecutor(SerialExecutor && ) : void
+operator=(SerialExecutor && ) : SerialExecutor &
{static} +create(Executor::KeepAlive<Executor> parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive<SerialExecutor>
{static} +createUnique(std::shared_ptr<Executor> parent = getCPUExecutor()) : SerialExecutor::UniquePtr
+add(Func func) : void
+addWithPriority(Func func, int8_t priority) : void
+getNumPriorities() const : uint8_t
}
class "ThreadedExecutor" as C_0000470362430235503729
class C_0000470362430235503729 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55{ThreadedExecutor}]] {
+ThreadedExecutor(std::shared_ptr<ThreadFactory> threadFactory = newDefaultThreadFactory()) : void
+~ThreadedExecutor() : void
+ThreadedExecutor(const ThreadedExecutor & ) : void
+ThreadedExecutor(ThreadedExecutor && ) : void
+operator=(const ThreadedExecutor & ) : ThreadedExecutor &
+operator=(ThreadedExecutor && ) : ThreadedExecutor &
+add(Func func) : void
}
class "CPUThreadPoolExecutor" as C_0001740134810840364719
class C_0001740134810840364719 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68{CPUThreadPoolExecutor}]] {
+CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads) : void
+CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+~CPUThreadPoolExecutor() : void
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+addWithPriority(Func func, int8_t priority) : void
+add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getTaskQueueSize() const : size_t
+getNumPriorities() const : uint8_t
{static} +kDefaultMaxQueueSize : const size_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153{kDefaultMaxQueueSize}]]]
}
class "ManualExecutor" as C_0002235860541734359952
class C_0002235860541734359952 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38{ManualExecutor}]] {
+~ManualExecutor() : void
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+makeProgress() : void
+drive() : void
+scheduleAt(Func && f, const ScheduledExecutor::TimePoint & t) : void
+advance(const ScheduledExecutor::Duration & dur) : void
+advanceTo(const ScheduledExecutor::TimePoint & t) : void
+now() : ScheduledExecutor::TimePoint
+clear() : std::size_t
+keepAliveAcquire() : bool
+keepAliveRelease() : void
+waitFor<F>(const F & f) : void
}
class "MeteredExecutor" as C_0001956570166673420631
class C_0001956570166673420631 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41{MeteredExecutor}]] {
+MeteredExecutor(std::unique_ptr<Executor> exe) : void
+MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void
+~MeteredExecutor() : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+add(Func func) : void
}
abstract "SoftRealTimeExecutor" as C_0000560396763155385774
abstract C_0000560396763155385774 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26{SoftRealTimeExecutor}]] {
}
class "EDFThreadPoolExecutor" as C_0000586027154664049253
class C_0000586027154664049253 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34{EDFThreadPoolExecutor}]] {
+EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("EDFThreadPool")) : void
+~EDFThreadPoolExecutor() : void
+add(Func f) : void
+add(Func f, uint64_t deadline) : void
+add(Func f, std::size_t total, uint64_t deadline) : void
+add(std::vector<Func> fs, uint64_t deadline) : void
+deadlineExecutor(uint64_t deadline) : Executor::KeepAlive<>
{static} +kEarliestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40{kEarliestDeadline}]]]
{static} +kLatestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41{kLatestDeadline}]]]
}
C_0001663594882877424244 ..> C_0002222099135672593686
C_0002222099135672593686 <|- - C_0001663594882877424244
C_0002222099135672593686 <|- - C_0001968432200878677255
C_0002222099135672593686 <|- - C_0000155178671636628489
C_0000155178671636628489 <|- - C_0000587962468506435170
C_0002145523347961259416 ..> C_0001970350906198958245
C_0002222099135672593686 <|- - C_0002145523347961259416
C_0000481841646641149488 <|- - C_0001970350906198958245
C_0002145523347961259416 <|- - C_0001970350906198958245
C_0000155178671636628489 <|- - C_0001970350906198958245
C_0001218209673148292552 <|- - C_0001970350906198958245
C_0002222099135672593686 <|- - C_0000481841646641149488
C_0000481841646641149488 <|- - C_0000769434624932181431
C_0002222099135672593686 <|- - C_0001218209673148292552
C_0002222099135672593686 <|- - C_0001206661724003471988
C_0002222099135672593686 <|- - C_0000346702971661703291
C_0001612067402701865715 - -> C_0001612067402701865715 : -cache
C_0002222099135672593686 <|- - C_0001612067402701865715
C_0001123262130157209492 ..> C_0002222099135672593686
C_0001218209673148292552 <|- - C_0001123262130157209492
C_0002222099135672593686 <|- - C_0001347291497865252100
C_0001932117148827315960 - -+ C_0001347291497865252100
C_0001932117148827315960 ..> C_0002222099135672593686
C_0001932117148827315960 - -> C_0002222099135672593686 : -executor_
C_0002222099135672593686 <|- - C_0001932117148827315960
C_0001347291497865252100 <|- - C_0002292058893312396804
C_0000260170505900481834 ..> C_0001970350906198958245
C_0002292058893312396804 <|- - C_0000260170505900481834
C_0002145523347961259416 <|- - C_0000260170505900481834
C_0001402712402381953994 ..> C_0002222099135672593686
C_0000155178671636628489 <|- - C_0001402712402381953994
C_0002222099135672593686 <|- - C_0000470362430235503729
C_0002292058893312396804 <|- - C_0001740134810840364719
C_0000481841646641149488 <|- - C_0002235860541734359952
C_0001218209673148292552 <|- - C_0002235860541734359952
C_0000155178671636628489 <|- - C_0002235860541734359952
C_0001956570166673420631 ..> C_0002222099135672593686
C_0001956570166673420631 o- - C_0002222099135672593686 : -ownedExecutor_
C_0001347291497865252100 <|- - C_0001956570166673420631
C_0002222099135672593686 <|- - C_0000560396763155385774
C_0000560396763155385774 <|- - C_0000586027154664049253
C_0002292058893312396804 <|- - C_0000586027154664049253
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.18+10-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>