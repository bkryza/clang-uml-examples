<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="2913px" preserveAspectRatio="none" style="width:7183px;height:2913px;" version="1.1" viewBox="0 0 7183 2913" width="7183px" zoomAndPan="magnify"><defs><filter height="300%" id="ffx0oppb4oy5y" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[af0a7ff7db33a62256b72072a2c62cae]
class C_0001663594882877424244--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" target="_top" title="ExecutorWithPriorityImpl" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22" xlink:show="new" xlink:title="ExecutorWithPriorityImpl" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="140.8281" id="C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.5;" width="858" x="6" y="1825.5"/><ellipse cx="306.25" cy="1841.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M309.2188,1847.1406 Q308.6406,1847.4375 308,1847.5781 Q307.3594,1847.7344 306.6563,1847.7344 Q304.1563,1847.7344 302.8281,1846.0938 Q301.5156,1844.4375 301.5156,1841.3125 Q301.5156,1838.1875 302.8281,1836.5313 Q304.1563,1834.875 306.6563,1834.875 Q307.3594,1834.875 308,1835.0313 Q308.6563,1835.1875 309.2188,1835.4844 L309.2188,1838.2031 Q308.5938,1837.625 308,1837.3594 Q307.4063,1837.0781 306.7813,1837.0781 Q305.4375,1837.0781 304.75,1838.1563 Q304.0625,1839.2188 304.0625,1841.3125 Q304.0625,1843.4063 304.75,1844.4844 Q305.4375,1845.5469 306.7813,1845.5469 Q307.4063,1845.5469 308,1845.2813 Q308.5938,1845 309.2188,1844.4219 L309.2188,1847.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="193" x="326.75" y="1845.6543">detail::ExecutorWithPriorityImpl</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="54" x="813" y="1822.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="52" x="814" y="1834.6387">Callback</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1857.5" y2="1857.5"/><ellipse cx="17" cy="1868.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="26" y="1871.7104">ExecutorWithPriorityImpl(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp;) = deleted : void</text><ellipse cx="17" cy="1881.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="26" y="1884.5151">ExecutorWithPriorityImpl(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp;) = deleted : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="7" x2="863" y1="1891.1094" y2="1891.1094"/><ellipse cx="17" cy="1902.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="602" x="26" y="1905.3198">operator=(const ExecutorWithPriorityImpl&lt;Callback&gt; &amp;) = deleted : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><ellipse cx="17" cy="1914.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="26" y="1918.1245">operator=(ExecutorWithPriorityImpl&lt;Callback&gt; &amp;&amp;) = deleted : ExecutorWithPriorityImpl&lt;Callback&gt; &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="7" x2="863" y1="1924.7188" y2="1924.7188"/><ellipse cx="17" cy="1935.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="26" y="1938.9292">add(Func func) : void</text><ellipse cx="17" cy="1948.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="832" x="26" y="1951.7339">create(Executor::KeepAlive&lt;Executor&gt; executor, Callback &amp;&amp; callback) : Executor::KeepAlive&lt;ExecutorWithPriorityImpl&lt;std::decay_t&lt;Callback&gt;&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="863" y1="1958.3281" y2="1958.3281"/></a><!--MD5=[2031eb5f8f6622e1fb649add07766b1c]
class C_0002222099135672593686--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" target="_top" title="Executor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53" xlink:show="new" xlink:title="Executor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="171.2422" id="C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.5;" width="477" x="925" y="1810.5"/><ellipse cx="1131.25" cy="1826.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1131.3594,1821.8438 L1130.2031,1826.9219 L1132.5313,1826.9219 L1131.3594,1821.8438 Z M1129.875,1819.6094 L1132.8594,1819.6094 L1136.2188,1832 L1133.7656,1832 L1133,1828.9375 L1129.7188,1828.9375 L1128.9688,1832 L1126.5313,1832 L1129.875,1819.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="56" x="1151.75" y="1830.6543">Executor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1842.5" y2="1842.5"/><ellipse cx="936" cy="1853.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="945" y="1856.7104">~Executor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="926" x2="1401" y1="1863.3047" y2="1863.3047"/><ellipse cx="936" cy="1874.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="115" x="945" y="1877.5151">add(Func) = 0 : void</text><ellipse cx="936" cy="1887.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="945" y="1890.3198">addWithPriority(Func, int8_t priority) : void</text><ellipse cx="936" cy="1899.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="447" x="945" y="1903.1245">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT * executor) : KeepAlive&lt;ExecutorT&gt;</text><ellipse cx="936" cy="1912.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="451" x="945" y="1915.9292">getKeepAliveToken&lt;ExecutorT&gt;(ExecutorT &amp; executor) : KeepAlive&lt;ExecutorT&gt;</text><ellipse cx="936" cy="1925.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="945" y="1928.7339">getNumPriorities() const : uint8_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="926" x2="1401" y1="1935.3281" y2="1935.3281"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1941.3281"/><ellipse cx="936" cy="1946.3281" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" target="_top" title="HI_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70" xlink:show="new" xlink:title="HI_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="112" x="945" y="1949.5386">HI_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1954.1328"/><ellipse cx="936" cy="1959.1328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" target="_top" title="LO_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68" xlink:show="new" xlink:title="LO_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="116" x="945" y="1962.3433">LO_PRI : const int8_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="931" y="1966.9375"/><ellipse cx="936" cy="1971.9375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" target="_top" title="MID_PRI" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69" xlink:show="new" xlink:title="MID_PRI" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="121" x="945" y="1975.1479">MID_PRI : const int8_t</text></a><!--MD5=[eac2427df85742fb1d237bf28f3b9ebb]
class C_0001968432200878677255--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" target="_top" title="QueuedImmediateExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31" xlink:show="new" xlink:title="QueuedImmediateExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="73.6094" id="C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.5;" width="261" x="1849.5" y="139"/><ellipse cx="1891.5" cy="155" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1894.4688,160.6406 Q1893.8906,160.9375 1893.25,161.0781 Q1892.6094,161.2344 1891.9063,161.2344 Q1889.4063,161.2344 1888.0781,159.5938 Q1886.7656,157.9375 1886.7656,154.8125 Q1886.7656,151.6875 1888.0781,150.0313 Q1889.4063,148.375 1891.9063,148.375 Q1892.6094,148.375 1893.25,148.5313 Q1893.9063,148.6875 1894.4688,148.9844 L1894.4688,151.7031 Q1893.8438,151.125 1893.25,150.8594 Q1892.6563,150.5781 1892.0313,150.5781 Q1890.6875,150.5781 1890,151.6563 Q1889.3125,152.7188 1889.3125,154.8125 Q1889.3125,156.9063 1890,157.9844 Q1890.6875,159.0469 1892.0313,159.0469 Q1892.6563,159.0469 1893.25,158.7813 Q1893.8438,158.5 1894.4688,157.9219 L1894.4688,160.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="169" x="1911.5" y="159.1543">QueuedImmediateExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1850.5" x2="2109.5" y1="171" y2="171"/><ellipse cx="1860.5" cy="182" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1869.5" y="185.2104">add(Func callback) : void</text><ellipse cx="1860.5" cy="194.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="1869.5" y="198.0151">instance() : QueuedImmediateExecutor &amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1850.5" x2="2109.5" y1="204.6094" y2="204.6094"/></a><!--MD5=[e39d5cb1daa64537bcdef5f48ceb7e5e]
class C_0000481841646641149488--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" target="_top" title="DrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" xlink:show="new" xlink:title="DrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="81.6094" id="C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.5;" width="229" x="1865.5" y="248"/><ellipse cx="1922.75" cy="264" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1922.8594,259.3438 L1921.7031,264.4219 L1924.0313,264.4219 L1922.8594,259.3438 Z M1921.375,257.1094 L1924.3594,257.1094 L1927.7188,269.5 L1925.2656,269.5 L1924.5,266.4375 L1921.2188,266.4375 L1920.4688,269.5 L1918.0313,269.5 L1921.375,257.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="1943.25" y="268.1543">DrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1866.5" x2="2093.5" y1="280" y2="280"/><ellipse cx="1876.5" cy="291" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1885.5" y="294.2104">~DrivableExecutor() = default : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1866.5" x2="2093.5" y1="300.8047" y2="300.8047"/><ellipse cx="1876.5" cy="311.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="1885.5" y="315.0151">drive() = 0 : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1866.5" x2="2093.5" y1="321.6094" y2="321.6094"/></a><!--MD5=[533c44690536949bf73673dd85860041]
class C_0000769434624932181431--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" target="_top" title="TimedDrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" xlink:show="new" xlink:title="TimedDrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="222.4609" id="C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.5;" width="644" x="2875.5" y="14"/><ellipse cx="3122.25" cy="30" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3125.2188,35.6406 Q3124.6406,35.9375 3124,36.0781 Q3123.3594,36.2344 3122.6563,36.2344 Q3120.1563,36.2344 3118.8281,34.5938 Q3117.5156,32.9375 3117.5156,29.8125 Q3117.5156,26.6875 3118.8281,25.0313 Q3120.1563,23.375 3122.6563,23.375 Q3123.3594,23.375 3124,23.5313 Q3124.6563,23.6875 3125.2188,23.9844 L3125.2188,26.7031 Q3124.5938,26.125 3124,25.8594 Q3123.4063,25.5781 3122.7813,25.5781 Q3121.4375,25.5781 3120.75,26.6563 Q3120.0625,27.7188 3120.0625,29.8125 Q3120.0625,31.9063 3120.75,32.9844 Q3121.4375,34.0469 3122.7813,34.0469 Q3123.4063,34.0469 3124,33.7813 Q3124.5938,33.5 3125.2188,32.9219 L3125.2188,35.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="3142.75" y="34.1543">TimedDrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2876.5" x2="3518.5" y1="46" y2="46"/><ellipse cx="2886.5" cy="57" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2895.5" y="60.2104">TimedDrivableExecutor() : void</text><ellipse cx="2886.5" cy="69.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="2895.5" y="73.0151">~TimedDrivableExecutor() noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2876.5" x2="3518.5" y1="79.6094" y2="79.6094"/><ellipse cx="2886.5" cy="90.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="2895.5" y="93.8198">add(Func) : void</text><ellipse cx="2886.5" cy="103.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2895.5" y="106.6245">drain() noexcept : size_t</text><ellipse cx="2886.5" cy="116.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2895.5" y="119.4292">drive() noexcept : void</text><ellipse cx="2886.5" cy="129.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2895.5" y="132.2339">run() noexcept : size_t</text><ellipse cx="2886.5" cy="141.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2895.5" y="145.0386">try_drive() noexcept : bool</text><ellipse cx="2886.5" cy="154.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="2895.5" y="157.8433">try_drive_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) noexcept : _Bool</text><ellipse cx="2886.5" cy="167.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="618" x="2895.5" y="170.6479">try_drive_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) noexcept : _Bool</text><ellipse cx="2886.5" cy="180.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2895.5" y="183.4526">try_wait() noexcept : bool</text><ellipse cx="2886.5" cy="193.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="546" x="2895.5" y="196.2573">try_wait_for&lt;Rep,Period&gt;(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) noexcept : _Bool</text><ellipse cx="2886.5" cy="205.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="613" x="2895.5" y="209.062">try_wait_until&lt;Clock,Duration&gt;(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) noexcept : _Bool</text><ellipse cx="2886.5" cy="218.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2895.5" y="221.8667">wait() noexcept : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2876.5" x2="3518.5" y1="228.4609" y2="228.4609"/></a><!--MD5=[b291e34916abaf3d21badf1de86aae69]
class C_0002145523347961259416--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" target="_top" title="IOExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40" xlink:show="new" xlink:title="IOExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="81.6094" id="C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.5;" width="218" x="4109.5" y="342"/><ellipse cx="4180.25" cy="358" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4180.3594,353.3438 L4179.2031,358.4219 L4181.5313,358.4219 L4180.3594,353.3438 Z M4178.875,351.1094 L4181.8594,351.1094 L4185.2188,363.5 L4182.7656,363.5 L4182,360.4375 L4178.7188,360.4375 L4177.9688,363.5 L4175.5313,363.5 L4178.875,351.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="4200.75" y="362.1543">IOExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4110.5" x2="4326.5" y1="374" y2="374"/><ellipse cx="4120.5" cy="385" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="4129.5" y="388.2104">~IOExecutor() = default : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4110.5" x2="4326.5" y1="394.8047" y2="394.8047"/><ellipse cx="4120.5" cy="405.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="192" x="4129.5" y="409.0151">getEventBase() = 0 : EventBase *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4110.5" x2="4326.5" y1="415.6094" y2="415.6094"/></a><!--MD5=[bdef50c016f6dbeac54a3e0ea6a4bc7d]
class C_0001347291497865252100--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" target="_top" title="DefaultKeepAliveExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30" xlink:show="new" xlink:title="DefaultKeepAliveExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="81.6094" id="C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.5;" width="222" x="3086.5" y="2305"/><ellipse cx="3115.45" cy="2321" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3118.4188,2326.6406 Q3117.8406,2326.9375 3117.2,2327.0781 Q3116.5594,2327.2344 3115.8563,2327.2344 Q3113.3563,2327.2344 3112.0281,2325.5938 Q3110.7156,2323.9375 3110.7156,2320.8125 Q3110.7156,2317.6875 3112.0281,2316.0313 Q3113.3563,2314.375 3115.8563,2314.375 Q3116.5594,2314.375 3117.2,2314.5313 Q3117.8563,2314.6875 3118.4188,2314.9844 L3118.4188,2317.7031 Q3117.7938,2317.125 3117.2,2316.8594 Q3116.6063,2316.5781 3115.9813,2316.5781 Q3114.6375,2316.5781 3113.95,2317.6563 Q3113.2625,2318.7188 3113.2625,2320.8125 Q3113.2625,2322.9063 3113.95,2323.9844 Q3114.6375,2325.0469 3115.9813,2325.0469 Q3116.6063,2325.0469 3117.2,2324.7813 Q3117.7938,2324.5 3118.4188,2323.9219 L3118.4188,2326.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="159" x="3132.55" y="2325.1543">DefaultKeepAliveExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3087.5" x2="3307.5" y1="2337" y2="2337"/><ellipse cx="3097.5" cy="2348" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3106.5" y="2351.2104">~DefaultKeepAliveExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="3087.5" x2="3307.5" y1="2357.8047" y2="2357.8047"/><ellipse cx="3097.5" cy="2368.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3106.5" y="2372.0151">weakRef() : Executor::KeepAlive&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3087.5" x2="3307.5" y1="2378.6094" y2="2378.6094"/></a><!--MD5=[343663e47d76253bb0dfc7fb21c3ae29]
class C_0001932117148827315960--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" target="_top" title="DefaultKeepAliveExecutor##WeakRef" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59" xlink:show="new" xlink:title="DefaultKeepAliveExecutor##WeakRef" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="99.2188" id="C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.5;" width="581" x="1689.5" y="2357.5"/><ellipse cx="1865.25" cy="2373.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1868.2188,2379.1406 Q1867.6406,2379.4375 1867,2379.5781 Q1866.3594,2379.7344 1865.6563,2379.7344 Q1863.1563,2379.7344 1861.8281,2378.0938 Q1860.5156,2376.4375 1860.5156,2373.3125 Q1860.5156,2370.1875 1861.8281,2368.5313 Q1863.1563,2366.875 1865.6563,2366.875 Q1866.3594,2366.875 1867,2367.0313 Q1867.6563,2367.1875 1868.2188,2367.4844 L1868.2188,2370.2031 Q1867.5938,2369.625 1867,2369.3594 Q1866.4063,2369.0781 1865.7813,2369.0781 Q1864.4375,2369.0781 1863.75,2370.1563 Q1863.0625,2371.2188 1863.0625,2373.3125 Q1863.0625,2375.4063 1863.75,2376.4844 Q1864.4375,2377.5469 1865.7813,2377.5469 Q1866.4063,2377.5469 1867,2377.2813 Q1867.5938,2377 1868.2188,2376.4219 L1868.2188,2379.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="221" x="1885.75" y="2377.6543">DefaultKeepAliveExecutor::WeakRef</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1690.5" x2="2269.5" y1="2389.5" y2="2389.5"/><ellipse cx="1700.5" cy="2400.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1709.5" y="2403.7104">add(Func f) : void</text><ellipse cx="1700.5" cy="2413.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1709.5" y="2416.5151">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="1700.5" cy="2426.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="555" x="1709.5" y="2429.3198">create(std::shared_ptr&lt;ControlBlock&gt; controlBlock, Executor * executor) : Executor::KeepAlive&lt;&gt;</text><ellipse cx="1700.5" cy="2438.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1709.5" y="2442.1245">getNumPriorities() const : uint8_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1690.5" x2="2269.5" y1="2448.7188" y2="2448.7188"/></a><!--MD5=[b5e014653e631123d50dd7debc45a978]
class C_0002292058893312396804--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" target="_top" title="ThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67" xlink:show="new" xlink:title="ThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="299.2891" id="C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.5;" width="823" x="3807" y="2119.5"/><ellipse cx="4151.25" cy="2135.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4151.3594,2130.8438 L4150.2031,2135.9219 L4152.5313,2135.9219 L4151.3594,2130.8438 Z M4149.875,2128.6094 L4152.8594,2128.6094 L4156.2188,2141 L4153.7656,2141 L4153,2137.9375 L4149.7188,2137.9375 L4148.9688,2141 L4146.5313,2141 L4149.875,2128.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="126" x="4171.75" y="2139.6543">ThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3808" x2="4629" y1="2151.5" y2="2151.5"/><ellipse cx="3818" cy="2162.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="797" x="3827" y="2165.7104">ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory, bool isWaitForAll = false) : void</text><ellipse cx="3818" cy="2175.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3827" y="2178.5151">~ThreadPoolExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="3808" x2="4629" y1="2185.1094" y2="2185.1094"/><ellipse cx="3818" cy="2196.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="3827" y="2199.3198">add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void</text><ellipse cx="3818" cy="2208.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="143" x="3827" y="2212.1245">add(Func func) = 0 : void</text><ellipse cx="3818" cy="2221.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3827" y="2224.9292">addObserver(std::shared_ptr&lt;Observer&gt;) : void</text><ellipse cx="3818" cy="2234.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3827" y="2237.7339">getName() const : const std::string &amp;</text><ellipse cx="3818" cy="2247.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3827" y="2250.5386">getPendingTaskCount() const : size_t</text><ellipse cx="3818" cy="2260.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3827" y="2263.3433">getPoolStats() const : ThreadPoolExecutor::PoolStats</text><ellipse cx="3818" cy="2272.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="341" x="3827" y="2276.1479">getThreadFactory() const : std::shared_ptr&lt;ThreadFactory&gt;</text><ellipse cx="3818" cy="2285.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3827" y="2288.9526">join() : void</text><ellipse cx="3818" cy="2298.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3827" y="2301.7573">numActiveThreads() const : size_t</text><ellipse cx="3818" cy="2311.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3827" y="2314.562">numThreads() const : size_t</text><ellipse cx="3818" cy="2324.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="3827" y="2327.3667">removeObserver(std::shared_ptr&lt;Observer&gt;) : void</text><ellipse cx="3818" cy="2336.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3827" y="2340.1714">setNumThreads(size_t numThreads) : void</text><ellipse cx="3818" cy="2349.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3827" y="2352.9761">setThreadDeathTimeout(std::chrono::milliseconds timeout) : void</text><ellipse cx="3818" cy="2362.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="3827" y="2365.7808">setThreadFactory(std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="3818" cy="2375.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3827" y="2378.5854">stop() : void</text><ellipse cx="3818" cy="2388.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="3827" y="2391.3901">subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void</text><ellipse cx="3818" cy="2400.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="332" x="3827" y="2404.1948">withAll(FunctionRef&lt;void (ThreadPoolExecutor &amp;)&gt; f) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3808" x2="4629" y1="2410.7891" y2="2410.7891"/></a><!--MD5=[946b31b7442aaf60dac9cea044c2bbbe]
class C_0001740134810840364719--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" target="_top" title="CPUThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68" xlink:show="new" xlink:title="CPUThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="248.0703" id="C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.5;" width="1385" x="4761" y="2114"/><ellipse cx="5373.75" cy="2130" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5376.7188,2135.6406 Q5376.1406,2135.9375 5375.5,2136.0781 Q5374.8594,2136.2344 5374.1563,2136.2344 Q5371.6563,2136.2344 5370.3281,2134.5938 Q5369.0156,2132.9375 5369.0156,2129.8125 Q5369.0156,2126.6875 5370.3281,2125.0313 Q5371.6563,2123.375 5374.1563,2123.375 Q5374.8594,2123.375 5375.5,2123.5313 Q5376.1563,2123.6875 5376.7188,2123.9844 L5376.7188,2126.7031 Q5376.0938,2126.125 5375.5,2125.8594 Q5374.9063,2125.5781 5374.2813,2125.5781 Q5372.9375,2125.5781 5372.25,2126.6563 Q5371.5625,2127.7188 5371.5625,2129.8125 Q5371.5625,2131.9063 5372.25,2132.9844 Q5372.9375,2134.0469 5374.2813,2134.0469 Q5374.9063,2134.0469 5375.5,2133.7813 Q5376.0938,2133.5 5376.7188,2132.9219 L5376.7188,2135.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="151" x="5394.25" y="2134.1543">CPUThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4762" x2="6145" y1="2146" y2="2146"/><ellipse cx="4772" cy="2157" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1257" x="4781" y="2160.2104">CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4772" cy="2169.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1359" x="4781" y="2173.0151">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::unique_ptr&lt;BlockingQueue&lt;CPUTask&gt;&gt; taskQueue, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4772" cy="2182.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="4781" y="2185.8198">CPUThreadPoolExecutor(size_t numThreads) : void</text><ellipse cx="4772" cy="2195.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="4781" y="2198.6245">CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4772" cy="2208.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="666" x="4781" y="2211.4292">CPUThreadPoolExecutor(std::pair&lt;size_t,size_t&gt; numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory) : void</text><ellipse cx="4772" cy="2221.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1047" x="4781" y="2224.2339">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4772" cy="2233.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1175" x="4781" y="2237.0386">CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("CPUThreadPool")) : void</text><ellipse cx="4772" cy="2246.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4781" y="2249.8433">~CPUThreadPoolExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4762" x2="6145" y1="2256.4375" y2="2256.4375"/><ellipse cx="4772" cy="2267.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4781" y="2270.6479">add(Func func) : void</text><ellipse cx="4772" cy="2280.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4781" y="2283.4526">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4772" cy="2293.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="586" x="4781" y="2296.2573">add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4772" cy="2305.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4781" y="2309.062">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="4772" cy="2318.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="4781" y="2321.8667">getNumPriorities() const : uint8_t</text><ellipse cx="4772" cy="2331.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="4781" y="2334.6714">getTaskQueueSize() const : size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4762" x2="6145" y1="2341.2656" y2="2341.2656"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4767" y="2347.2656"/><ellipse cx="4772" cy="2352.2656" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" target="_top" title="kDefaultMaxQueueSize" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153" xlink:show="new" xlink:title="kDefaultMaxQueueSize" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="207" x="4781" y="2355.4761">kDefaultMaxQueueSize : const size_t</text></a><!--MD5=[de9d69c684837cdd83d5314dbeaaea39]
class C_0001218209673148292552--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" target="_top" title="ScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28" xlink:show="new" xlink:title="ScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="132.8281" id="C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.5;" width="425" x="1767.5" y="638.5"/><ellipse cx="1914.75" cy="654.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1914.8594,649.8438 L1913.7031,654.9219 L1916.0313,654.9219 L1914.8594,649.8438 Z M1913.375,647.6094 L1916.3594,647.6094 L1919.7188,660 L1917.2656,660 L1916.5,656.9375 L1913.2188,656.9375 L1912.4688,660 L1910.0313,660 L1913.375,647.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="1935.25" y="658.6543">ScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1768.5" x2="2191.5" y1="670.5" y2="670.5"/><ellipse cx="1778.5" cy="681.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1787.5" y="684.7104">~ScheduledExecutor() = default : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1768.5" x2="2191.5" y1="691.3047" y2="691.3047"/><ellipse cx="1778.5" cy="702.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="115" x="1787.5" y="705.5151">add(Func) = 0 : void</text><ellipse cx="1778.5" cy="715.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1787.5" y="718.3198">now() : ScheduledExecutor::TimePoint</text><ellipse cx="1778.5" cy="727.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1787.5" y="731.1245">schedule(Func &amp;&amp; a) : void</text><ellipse cx="1778.5" cy="740.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1787.5" y="743.9292">schedule(Func &amp;&amp; a, const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="1778.5" cy="753.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="1787.5" y="756.7339">scheduleAt(Func &amp;&amp;, const ScheduledExecutor::TimePoint &amp;) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1768.5" x2="2191.5" y1="763.3281" y2="763.3281"/></a><!--MD5=[e43e6b0f73d65f42e1986cd71f7d317c]
class C_0000155178671636628489--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" target="_top" title="SequencedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27" xlink:show="new" xlink:title="SequencedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="60.8047" id="C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.5;" width="190" x="1885" y="1003.5"/><ellipse cx="1914.4" cy="1019.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1917.3688,1025.1406 Q1916.7906,1025.4375 1916.15,1025.5781 Q1915.5094,1025.7344 1914.8063,1025.7344 Q1912.3063,1025.7344 1910.9781,1024.0938 Q1909.6656,1022.4375 1909.6656,1019.3125 Q1909.6656,1016.1875 1910.9781,1014.5313 Q1912.3063,1012.875 1914.8063,1012.875 Q1915.5094,1012.875 1916.15,1013.0313 Q1916.8063,1013.1875 1917.3688,1013.4844 L1917.3688,1016.2031 Q1916.7438,1015.625 1916.15,1015.3594 Q1915.5563,1015.0781 1914.9313,1015.0781 Q1913.5875,1015.0781 1912.9,1016.1563 Q1912.2125,1017.2188 1912.2125,1019.3125 Q1912.2125,1021.4063 1912.9,1022.4844 Q1913.5875,1023.5469 1914.9313,1023.5469 Q1915.5563,1023.5469 1916.15,1023.2813 Q1916.7438,1023 1917.3688,1022.4219 L1917.3688,1025.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="126" x="1931.6" y="1023.6543">SequencedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1886" x2="2074" y1="1035.5" y2="1035.5"/><ellipse cx="1896" cy="1046.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1905" y="1049.7104">~SequencedExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1886" x2="2074" y1="1056.3047" y2="1056.3047"/></a><!--MD5=[411d68fd5f298e02cc7be27b9b9671fb]
class C_0001970350906198958245--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135" target="_top" title="EventBase" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135" xlink:show="new" xlink:title="EventBase" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="845.0859" id="C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.5;" width="895" x="6277" y="7.5"/><ellipse cx="6687.25" cy="23.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6690.2188,29.1406 Q6689.6406,29.4375 6689,29.5781 Q6688.3594,29.7344 6687.6563,29.7344 Q6685.1563,29.7344 6683.8281,28.0938 Q6682.5156,26.4375 6682.5156,23.3125 Q6682.5156,20.1875 6683.8281,18.5313 Q6685.1563,16.875 6687.6563,16.875 Q6688.3594,16.875 6689,17.0313 Q6689.6563,17.1875 6690.2188,17.4844 L6690.2188,20.2031 Q6689.5938,19.625 6689,19.3594 Q6688.4063,19.0781 6687.7813,19.0781 Q6686.4375,19.0781 6685.75,20.1563 Q6685.0625,21.2188 6685.0625,23.3125 Q6685.0625,25.4063 6685.75,26.4844 Q6686.4375,27.5469 6687.7813,27.5469 Q6688.4063,27.5469 6689,27.2813 Q6689.5938,27 6690.2188,26.4219 L6690.2188,29.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="6707.75" y="27.6543">EventBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6278" x2="7171" y1="39.5" y2="39.5"/><ellipse cx="6288" cy="50.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="6297" y="53.7104">EventBase(std::chrono::milliseconds tickInterval) : void</text><ellipse cx="6288" cy="63.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="6297" y="66.5151">EventBase() : void</text><ellipse cx="6288" cy="76.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="6297" y="79.3198">EventBase(bool enableTimeMeasurement) : void</text><ellipse cx="6288" cy="88.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6297" y="92.1245">EventBase(const EventBase &amp;) = deleted : void</text><ellipse cx="6288" cy="101.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="6297" y="104.9292">EventBase(event_base * evb, bool enableTimeMeasurement = true) : void</text><ellipse cx="6288" cy="114.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="6297" y="117.7339">EventBase(EventBase::Options options) : void</text><ellipse cx="6288" cy="127.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="6297" y="130.5386">~EventBase() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="6278" x2="7171" y1="137.1328" y2="137.1328"/><ellipse cx="6288" cy="148.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="6297" y="151.3433">operator=(const EventBase &amp;) = deleted : EventBase &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="6278" x2="7171" y1="157.9375" y2="157.9375"/><ellipse cx="6288" cy="168.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="6297" y="172.1479">add(Cob fn) : void</text><ellipse cx="6288" cy="181.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="516" x="6297" y="184.9526">attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void</text><ellipse cx="6288" cy="194.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="6297" y="197.7573">bumpHandlingTime() : void</text><ellipse cx="6288" cy="207.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="6297" y="210.562">cancelTimeout(AsyncTimeout * obj) : void</text><ellipse cx="6288" cy="220.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="6297" y="223.3667">checkIsInEventBaseThread() const : void</text><ellipse cx="6288" cy="232.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="6297" y="236.1714">dcheckIsInEventBaseThread() const : void</text><ellipse cx="6288" cy="245.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="6297" y="248.9761">detachTimeoutManager(AsyncTimeout * obj) : void</text><ellipse cx="6288" cy="258.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="6297" y="261.7808">drive() : void</text><ellipse cx="6288" cy="271.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="6297" y="274.5854">getAvgLoopTime() const : double</text><ellipse cx="6288" cy="284.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="6297" y="287.3901">getBackend() : EventBaseBackendBase *</text><ellipse cx="6288" cy="296.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="367" x="6297" y="300.1948">getDefaultBackend() : std::unique_ptr&lt;EventBaseBackendBase&gt;</text><ellipse cx="6288" cy="309.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="6297" y="312.9995">getEventBase() : EventBase *</text><ellipse cx="6288" cy="322.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="6297" y="325.8042">getExecutionObserver() : ExecutionObserver *</text><ellipse cx="6288" cy="335.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="6297" y="338.6089">getLibeventBase() const : event_base *</text><ellipse cx="6288" cy="348.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="6297" y="351.4136">getLibeventMethod() : const char *</text><ellipse cx="6288" cy="361.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="198" x="6297" y="364.2183">getLibeventVersion() : const char *</text><ellipse cx="6288" cy="373.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="6297" y="377.0229">getName() : const std::string &amp;</text><ellipse cx="6288" cy="386.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="6297" y="389.8276">getNotificationQueueSize() const : size_t</text><ellipse cx="6288" cy="399.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="6297" y="402.6323">getObserver() : const std::shared_ptr&lt;EventBaseObserver&gt; &amp;</text><ellipse cx="6288" cy="412.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="6297" y="415.437">getVirtualEventBase() : VirtualEventBase &amp;</text><ellipse cx="6288" cy="425.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="6297" y="428.2417">inRunningEventBaseThread() const : bool</text><ellipse cx="6288" cy="437.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6297" y="441.0464">isInEventBaseThread() const : bool</text><ellipse cx="6288" cy="450.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="6297" y="453.8511">isInTimeoutManagerThread() : bool</text><ellipse cx="6288" cy="463.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="6297" y="466.6558">isRunning() const : bool</text><ellipse cx="6288" cy="476.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="6297" y="479.4604">loop() : bool</text><ellipse cx="6288" cy="489.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="6297" y="492.2651">loopForever() : void</text><ellipse cx="6288" cy="501.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="6297" y="505.0698">loopIgnoreKeepAlive() : bool</text><ellipse cx="6288" cy="514.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="6297" y="517.8745">loopOnce(int flags = 0) : bool</text><ellipse cx="6288" cy="527.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="6297" y="530.6792">resetLoadAvg(double value = 0.0) : void</text><ellipse cx="6288" cy="540.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="6297" y="543.4839">runBeforeLoop(EventBase::LoopCallback * callback) : void</text><ellipse cx="6288" cy="553.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="529" x="6297" y="556.2886">runImmediatelyOrRunInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) noexcept : void</text><ellipse cx="6288" cy="565.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="484" x="6297" y="569.0933">runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void</text><ellipse cx="6288" cy="578.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="6297" y="581.8979">runInEventBaseThread&lt;T&gt;(void (*)(T *) fn, T * arg) noexcept : void</text><ellipse cx="6288" cy="591.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="6297" y="594.7026">runInEventBaseThread(EventBase::Func fn) noexcept : void</text><ellipse cx="6288" cy="604.2969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="6297" y="607.5073">runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) noexcept : void</text><ellipse cx="6288" cy="617.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="6297" y="620.312">runInEventBaseThreadAlwaysEnqueue&lt;T&gt;(void (*)(T *) fn, T * arg) noexcept : void</text><ellipse cx="6288" cy="629.9063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="425" x="6297" y="633.1167">runInEventBaseThreadAndWait&lt;T&gt;(void (*)(T *) fn, T * arg) noexcept : void</text><ellipse cx="6288" cy="642.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="6297" y="645.9214">runInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void</text><ellipse cx="6288" cy="655.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="6297" y="658.7261">runInLoop(EventBase::Func c, bool thisIteration = false) : void</text><ellipse cx="6288" cy="668.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="869" x="6297" y="671.5308">runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr&lt;RequestContext&gt; rctx = RequestContext::saveContext()) : void</text><ellipse cx="6288" cy="681.125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="6297" y="684.3354">runOnDestruction(EventBase::Func f) : void</text><ellipse cx="6288" cy="693.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="402" x="6297" y="697.1401">runOnDestruction(EventBase::OnDestructionCallback &amp; callback) : void</text><ellipse cx="6288" cy="706.7344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="514" x="6297" y="709.9448">scheduleAt(EventBase::Func &amp;&amp; fn, const ScheduledExecutor::TimePoint &amp; timeout) : void</text><ellipse cx="6288" cy="719.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="6297" y="722.7495">scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool</text><ellipse cx="6288" cy="732.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="6297" y="735.5542">setExecutionObserver(ExecutionObserver * observer) : void</text><ellipse cx="6288" cy="745.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="6297" y="748.3589">setLoadAvgMsec(std::chrono::milliseconds ms) : void</text><ellipse cx="6288" cy="757.9531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="545" x="6297" y="761.1636">setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void</text><ellipse cx="6288" cy="770.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="6297" y="773.9683">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><ellipse cx="6288" cy="783.5625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="6297" y="786.7729">setName(const std::string &amp; name) : void</text><ellipse cx="6288" cy="796.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="6297" y="799.5776">setObserver(const std::shared_ptr&lt;EventBaseObserver&gt; &amp; observer) : void</text><ellipse cx="6288" cy="809.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="6297" y="812.3823">terminateLoopSoon() : void</text><ellipse cx="6288" cy="821.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="6297" y="825.187">timer() : HHWheelTimer &amp;</text><ellipse cx="6288" cy="834.7813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6297" y="837.9917">waitUntilRunning() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6278" x2="7171" y1="844.5859" y2="844.5859"/></a><!--MD5=[3945712266c557f24486d79132d211c5]
class C_0000260170505900481834--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" target="_top" title="IOThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58" xlink:show="new" xlink:title="IOThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="158.4375" id="C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.5;" width="1525" x="4691" y="530"/><ellipse cx="5380.25" cy="546" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5383.2188,551.6406 Q5382.6406,551.9375 5382,552.0781 Q5381.3594,552.2344 5380.6563,552.2344 Q5378.1563,552.2344 5376.8281,550.5938 Q5375.5156,548.9375 5375.5156,545.8125 Q5375.5156,542.6875 5376.8281,541.0313 Q5378.1563,539.375 5380.6563,539.375 Q5381.3594,539.375 5382,539.5313 Q5382.6563,539.6875 5383.2188,539.9844 L5383.2188,542.7031 Q5382.5938,542.125 5382,541.8594 Q5381.4063,541.5781 5380.7813,541.5781 Q5379.4375,541.5781 5378.75,542.6563 Q5378.0625,543.7188 5378.0625,545.8125 Q5378.0625,547.9063 5378.75,548.9844 Q5379.4375,550.0469 5380.7813,550.0469 Q5381.4063,550.0469 5382,549.7813 Q5382.5938,549.5 5383.2188,548.9219 L5383.2188,551.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="138" x="5400.75" y="550.1543">IOThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4692" x2="6215" y1="562" y2="562"/><ellipse cx="4702" cy="573" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1388" x="4711" y="576.2104">IOThreadPoolExecutor(size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4702" cy="585.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1499" x="4711" y="589.0151">IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void</text><ellipse cx="4702" cy="598.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="4711" y="601.8198">~IOThreadPoolExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4692" x2="6215" y1="608.4141" y2="608.4141"/><ellipse cx="4702" cy="619.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4711" y="622.6245">add(Func func) : void</text><ellipse cx="4702" cy="632.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4711" y="635.4292">add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void</text><ellipse cx="4702" cy="645.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="4711" y="648.2339">getEventBase() : EventBase *</text><ellipse cx="4702" cy="657.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="378" x="4711" y="661.0386">getEventBase(ThreadPoolExecutor::ThreadHandle *) : EventBase *</text><ellipse cx="4702" cy="670.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="4711" y="673.8433">getEventBaseManager() : EventBaseManager *</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4692" x2="6215" y1="680.4375" y2="680.4375"/></a><!--MD5=[88ae743009cf121755e429a0e099ad9e]
class C_0002235860541734359952--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" target="_top" title="ManualExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38" xlink:show="new" xlink:title="ManualExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="248.0703" id="C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.5;" width="426" x="2984.5" y="518"/><ellipse cx="3143.25" cy="534" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3146.2188,539.6406 Q3145.6406,539.9375 3145,540.0781 Q3144.3594,540.2344 3143.6563,540.2344 Q3141.1563,540.2344 3139.8281,538.5938 Q3138.5156,536.9375 3138.5156,533.8125 Q3138.5156,530.6875 3139.8281,529.0313 Q3141.1563,527.375 3143.6563,527.375 Q3144.3594,527.375 3145,527.5313 Q3145.6563,527.6875 3146.2188,527.9844 L3146.2188,530.7031 Q3145.5938,530.125 3145,529.8594 Q3144.4063,529.5781 3143.7813,529.5781 Q3142.4375,529.5781 3141.75,530.6563 Q3141.0625,531.7188 3141.0625,533.8125 Q3141.0625,535.9063 3141.75,536.9844 Q3142.4375,538.0469 3143.7813,538.0469 Q3144.4063,538.0469 3145,537.7813 Q3145.5938,537.5 3146.2188,536.9219 L3146.2188,539.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="100" x="3163.75" y="538.1543">ManualExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2985.5" x2="3409.5" y1="550" y2="550"/><ellipse cx="2995.5" cy="561" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3004.5" y="564.2104">~ManualExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2985.5" x2="3409.5" y1="570.8047" y2="570.8047"/><ellipse cx="2995.5" cy="581.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="3004.5" y="585.0151">add(Func) : void</text><ellipse cx="2995.5" cy="594.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="3004.5" y="597.8198">advance(const ScheduledExecutor::Duration &amp; dur) : void</text><ellipse cx="2995.5" cy="607.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="3004.5" y="610.6245">advanceTo(const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="2995.5" cy="620.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3004.5" y="623.4292">clear() : std::size_t</text><ellipse cx="2995.5" cy="633.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3004.5" y="636.2339">drain() : size_t</text><ellipse cx="2995.5" cy="645.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3004.5" y="649.0386">drive() : void</text><ellipse cx="2995.5" cy="658.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="3004.5" y="661.8433">keepAliveAcquire() noexcept : bool</text><ellipse cx="2995.5" cy="671.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3004.5" y="674.6479">keepAliveRelease() noexcept : void</text><ellipse cx="2995.5" cy="684.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3004.5" y="687.4526">makeProgress() : void</text><ellipse cx="2995.5" cy="697.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="3004.5" y="700.2573">now() : ScheduledExecutor::TimePoint</text><ellipse cx="2995.5" cy="709.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3004.5" y="713.062">run() : size_t</text><ellipse cx="2995.5" cy="722.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="3004.5" y="725.8667">scheduleAt(Func &amp;&amp; f, const ScheduledExecutor::TimePoint &amp; t) : void</text><ellipse cx="2995.5" cy="735.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="3004.5" y="738.6714">wait() : void</text><ellipse cx="2995.5" cy="748.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="3004.5" y="751.4761">waitFor&lt;F&gt;(const F &amp; f) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2985.5" x2="3409.5" y1="758.0703" y2="758.0703"/></a><!--MD5=[86bf37f6e210254ac551127751e3ab47]
class C_0001956570166673420631--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" target="_top" title="MeteredExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41" xlink:show="new" xlink:title="MeteredExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="120.0234" id="C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.5;" width="378" x="4029.5" y="2536"/><ellipse cx="4160.75" cy="2552" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4163.7188,2557.6406 Q4163.1406,2557.9375 4162.5,2558.0781 Q4161.8594,2558.2344 4161.1563,2558.2344 Q4158.6563,2558.2344 4157.3281,2556.5938 Q4156.0156,2554.9375 4156.0156,2551.8125 Q4156.0156,2548.6875 4157.3281,2547.0313 Q4158.6563,2545.375 4161.1563,2545.375 Q4161.8594,2545.375 4162.5,2545.5313 Q4163.1563,2545.6875 4163.7188,2545.9844 L4163.7188,2548.7031 Q4163.0938,2548.125 4162.5,2547.8594 Q4161.9063,2547.5781 4161.2813,2547.5781 Q4159.9375,2547.5781 4159.25,2548.6563 Q4158.5625,2549.7188 4158.5625,2551.8125 Q4158.5625,2553.9063 4159.25,2554.9844 Q4159.9375,2556.0469 4161.2813,2556.0469 Q4161.9063,2556.0469 4162.5,2555.7813 Q4163.0938,2555.5 4163.7188,2554.9219 L4163.7188,2557.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="4181.25" y="2556.1543">MeteredExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4030.5" x2="4406.5" y1="2568" y2="2568"/><ellipse cx="4040.5" cy="2579" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="4049.5" y="2582.2104">MeteredExecutor(std::unique_ptr&lt;Executor&gt; exe) : void</text><ellipse cx="4040.5" cy="2591.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="4049.5" y="2595.0151">MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void</text><ellipse cx="4040.5" cy="2604.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="4049.5" y="2607.8198">~MeteredExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4030.5" x2="4406.5" y1="2614.4141" y2="2614.4141"/><ellipse cx="4040.5" cy="2625.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4049.5" y="2628.6245">add(Func func) : void</text><ellipse cx="4040.5" cy="2638.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="4049.5" y="2641.4292">setMaxReadAtOnce(uint32_t maxAtOnce) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4030.5" x2="4406.5" y1="2648.0234" y2="2648.0234"/></a><!--MD5=[f8810983e380b6f94822d53c6adb6631]
class C_0000587962468506435170--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" target="_top" title="StrandExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122" xlink:show="new" xlink:title="StrandExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="137.6328" id="C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.5;" width="757" x="2819" y="990"/><ellipse cx="3144.75" cy="1006" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3147.7188,1011.6406 Q3147.1406,1011.9375 3146.5,1012.0781 Q3145.8594,1012.2344 3145.1563,1012.2344 Q3142.6563,1012.2344 3141.3281,1010.5938 Q3140.0156,1008.9375 3140.0156,1005.8125 Q3140.0156,1002.6875 3141.3281,1001.0313 Q3142.6563,999.375 3145.1563,999.375 Q3145.8594,999.375 3146.5,999.5313 Q3147.1563,999.6875 3147.7188,999.9844 L3147.7188,1002.7031 Q3147.0938,1002.125 3146.5,1001.8594 Q3145.9063,1001.5781 3145.2813,1001.5781 Q3143.9375,1001.5781 3143.25,1002.6563 Q3142.5625,1003.7188 3142.5625,1005.8125 Q3142.5625,1007.9063 3143.25,1008.9844 Q3143.9375,1010.0469 3145.2813,1010.0469 Q3145.9063,1010.0469 3146.5,1009.7813 Q3147.0938,1009.5 3147.7188,1008.9219 L3147.7188,1011.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="3165.25" y="1010.1543">StrandExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2820" x2="3575" y1="1022" y2="1022"/><ellipse cx="2830" cy="1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2839" y="1036.2104">add(Func f) : void</text><ellipse cx="2830" cy="1045.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="2839" y="1049.0151">addWithPriority(Func f, int8_t priority) : void</text><ellipse cx="2830" cy="1058.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="272" x="2839" y="1061.8198">create() : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2830" cy="1071.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="504" x="2839" y="1074.6245">create(std::shared_ptr&lt;StrandContext&gt; context) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2830" cy="1084.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="491" x="2839" y="1087.4292">create(Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2830" cy="1097.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="731" x="2839" y="1100.2339">create(std::shared_ptr&lt;StrandContext&gt; context, Executor::KeepAlive&lt;&gt; parentExecutor) : Executor::KeepAlive&lt;StrandExecutor&gt;</text><ellipse cx="2830" cy="1109.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2839" y="1113.0386">getNumPriorities() const : uint8_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2820" x2="3575" y1="1119.6328" y2="1119.6328"/></a><!--MD5=[4deb5614033ac86d675ee075ba2ead14]
class C_0001206661724003471988--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" target="_top" title="FiberManager" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80" xlink:show="new" xlink:title="FiberManager" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="588.9922" id="C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.5;" width="882" x="1539" y="1171.5"/><ellipse cx="1911.25" cy="1187.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1914.2188,1193.1406 Q1913.6406,1193.4375 1913,1193.5781 Q1912.3594,1193.7344 1911.6563,1193.7344 Q1909.1563,1193.7344 1907.8281,1192.0938 Q1906.5156,1190.4375 1906.5156,1187.3125 Q1906.5156,1184.1875 1907.8281,1182.5313 Q1909.1563,1180.875 1911.6563,1180.875 Q1912.3594,1180.875 1913,1181.0313 Q1913.6563,1181.1875 1914.2188,1181.4844 L1914.2188,1184.2031 Q1913.5938,1183.625 1913,1183.3594 Q1912.4063,1183.0781 1911.7813,1183.0781 Q1910.4375,1183.0781 1909.75,1184.1563 Q1909.0625,1185.2188 1909.0625,1187.3125 Q1909.0625,1189.4063 1909.75,1190.4844 Q1910.4375,1191.5469 1911.7813,1191.5469 Q1912.4063,1191.5469 1913,1191.2813 Q1913.5938,1191 1914.2188,1190.4219 L1914.2188,1193.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="129" x="1931.75" y="1191.6543">fibers::FiberManager</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2420" y1="1203.5" y2="1203.5"/><ellipse cx="1550" cy="1214.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="1559" y="1217.7104">FiberManager(const fibers::FiberManager &amp;) = deleted : void</text><ellipse cx="1550" cy="1227.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="684" x="1559" y="1230.5151">FiberManager(std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="1240.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="856" x="1559" y="1243.3198">FiberManager&lt;LocalT&gt;(LocalType&lt;LocalT&gt;, std::unique_ptr&lt;LoopController&gt; loopController, fibers::FiberManager::Options options = Options()) : void</text><ellipse cx="1550" cy="1252.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="1559" y="1256.1245">~FiberManager() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1540" x2="2420" y1="1262.7188" y2="1262.7188"/><ellipse cx="1550" cy="1273.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="436" x="1559" y="1276.9292">operator=(const fibers::FiberManager &amp;) = deleted : fibers::FiberManager &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1540" x2="2420" y1="1283.5234" y2="1283.5234"/><ellipse cx="1550" cy="1294.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1559" y="1297.7339">add(Func f) : void</text><ellipse cx="1550" cy="1307.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="1559" y="1310.5386">addTask&lt;F&gt;(F &amp;&amp; func, fibers::TaskOptions taskOptions = TaskOptions()) : void</text><ellipse cx="1550" cy="1320.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="1559" y="1323.3433">addTaskEager&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1332.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="1559" y="1336.1479">addTaskEagerFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1345.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="1559" y="1348.9526">addTaskFinally&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1358.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="1559" y="1361.7573">addTaskFinallyEager&lt;F,G&gt;(F &amp;&amp; func, G &amp;&amp; finally) : void</text><ellipse cx="1550" cy="1371.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="1559" y="1374.562">addTaskFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1384.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="1559" y="1387.3667">addTaskRemote&lt;F&gt;(F &amp;&amp; func) : void</text><ellipse cx="1550" cy="1396.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="1559" y="1400.1714">addTaskRemoteFuture&lt;F&gt;(F &amp;&amp; func) : Future&lt;lift_unit_t&lt;invoke_result_t&lt;F&gt; &gt; &gt;</text><ellipse cx="1550" cy="1409.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="1412.9761">currentFiber() const : fibers::Fiber *</text><ellipse cx="1550" cy="1422.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1559" y="1425.7808">fibersAllocated() const : size_t</text><ellipse cx="1550" cy="1435.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1559" y="1438.5854">fibersPoolSize() const : size_t</text><ellipse cx="1550" cy="1448.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="1559" y="1451.3901">getCurrentTaskRunningTime() const : Optional&lt;std::chrono::nanoseconds&gt;</text><ellipse cx="1550" cy="1460.9844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="247" x="1559" y="1464.1948">getFiberManager() : fibers::FiberManager &amp;</text><ellipse cx="1550" cy="1473.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="283" x="1559" y="1476.9995">getFiberManagerUnsafe() : fibers::FiberManager *</text><ellipse cx="1550" cy="1486.5938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="1559" y="1489.8042">getObserver() : ExecutionObserver *</text><ellipse cx="1550" cy="1499.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="1559" y="1502.6089">getOptions() const : const fibers::FiberManager::Options &amp;</text><ellipse cx="1550" cy="1512.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="1559" y="1515.4136">hasActiveFiber() const : bool</text><ellipse cx="1550" cy="1525.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1559" y="1528.2183">hasReadyTasks() const : bool</text><ellipse cx="1550" cy="1537.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="1559" y="1541.0229">hasTasks() const : bool</text><ellipse cx="1550" cy="1550.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1559" y="1553.8276">local&lt;T&gt;() : T &amp;</text><ellipse cx="1550" cy="1563.4219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="132" x="1559" y="1566.6323">localThread&lt;T&gt;() : T &amp;</text><ellipse cx="1550" cy="1576.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1559" y="1579.437">loopController() const : const fibers::LoopController &amp;</text><ellipse cx="1550" cy="1589.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1559" y="1592.2417">loopController() : fibers::LoopController &amp;</text><ellipse cx="1550" cy="1601.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1559" y="1605.0464">loopUntilNoReady() : void</text><ellipse cx="1550" cy="1614.6406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1559" y="1617.8511">loopUntilNoReadyImpl() : void</text><ellipse cx="1550" cy="1627.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="1559" y="1630.6558">numActiveTasks() const noexcept : size_t</text><ellipse cx="1550" cy="1640.25" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="1559" y="1643.4604">runEagerFiberImpl(fibers::Fiber *) : void</text><ellipse cx="1550" cy="1653.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="1559" y="1656.2651">runInMainContext&lt;F&gt;(F &amp;&amp; func) : invoke_result_t&lt;F&gt;</text><ellipse cx="1550" cy="1665.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1559" y="1669.0698">runQueueSize() const : size_t</text><ellipse cx="1550" cy="1678.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1559" y="1681.8745">setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void</text><ellipse cx="1550" cy="1691.4688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="1559" y="1694.6792">setObserver(ExecutionObserver * observer) : void</text><ellipse cx="1550" cy="1704.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="409" x="1559" y="1707.4839">setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void</text><ellipse cx="1550" cy="1717.0781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="1559" y="1720.2886">shouldRunLoopRemote() : bool</text><ellipse cx="1550" cy="1729.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1559" y="1733.0933">stackHighWatermark() const : size_t</text><ellipse cx="1550" cy="1742.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1559" y="1745.8979">yield() : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1540" x2="2420" y1="1752.4922" y2="1752.4922"/></a><!--MD5=[ba7273969468a5ac8bf1d40283557580]
class C_0000346702971661703291--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" target="_top" title="WaitExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478" xlink:show="new" xlink:title="WaitExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="112.0234" id="C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.5;" width="371" x="1794.5" y="1796"/><ellipse cx="1886.75" cy="1812" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1889.7188,1817.6406 Q1889.1406,1817.9375 1888.5,1818.0781 Q1887.8594,1818.2344 1887.1563,1818.2344 Q1884.6563,1818.2344 1883.3281,1816.5938 Q1882.0156,1814.9375 1882.0156,1811.8125 Q1882.0156,1808.6875 1883.3281,1807.0313 Q1884.6563,1805.375 1887.1563,1805.375 Q1887.8594,1805.375 1888.5,1805.5313 Q1889.1563,1805.6875 1889.7188,1805.9844 L1889.7188,1808.7031 Q1889.0938,1808.125 1888.5,1807.8594 Q1887.9063,1807.5781 1887.2813,1807.5781 Q1885.9375,1807.5781 1885.25,1808.6563 Q1884.5625,1809.7188 1884.5625,1811.8125 Q1884.5625,1813.9063 1885.25,1814.9844 Q1885.9375,1816.0469 1887.2813,1816.0469 Q1887.9063,1816.0469 1888.5,1815.7813 Q1889.0938,1815.5 1889.7188,1814.9219 L1889.7188,1817.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="178" x="1907.25" y="1816.1543">futures::detail::WaitExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1795.5" x2="2164.5" y1="1828" y2="1828"/><ellipse cx="1805.5" cy="1839" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1814.5" y="1842.2104">add(Func func) : void</text><ellipse cx="1805.5" cy="1851.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="345" x="1814.5" y="1855.0151">create() : Executor::KeepAlive&lt;futures::detail::WaitExecutor&gt;</text><ellipse cx="1805.5" cy="1864.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="1814.5" y="1867.8198">detach() : void</text><ellipse cx="1805.5" cy="1877.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1814.5" y="1880.6245">drive() : void</text><ellipse cx="1805.5" cy="1890.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1814.5" y="1893.4292">driveUntil(Clock::time_point deadline) : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1795.5" x2="2164.5" y1="1900.0234" y2="1900.0234"/></a><!--MD5=[667ed72eb2108e1d2d692e666b9ea841]
class C_0001612067402701865715--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" target="_top" title="InlineExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30" xlink:show="new" xlink:title="InlineExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="73.6094" id="C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.5;" width="242" x="1859" y="1988"/><ellipse cx="1931.75" cy="2004" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1934.7188,2009.6406 Q1934.1406,2009.9375 1933.5,2010.0781 Q1932.8594,2010.2344 1932.1563,2010.2344 Q1929.6563,2010.2344 1928.3281,2008.5938 Q1927.0156,2006.9375 1927.0156,2003.8125 Q1927.0156,2000.6875 1928.3281,1999.0313 Q1929.6563,1997.375 1932.1563,1997.375 Q1932.8594,1997.375 1933.5,1997.5313 Q1934.1563,1997.6875 1934.7188,1997.9844 L1934.7188,2000.7031 Q1934.0938,2000.125 1933.5,1999.8594 Q1932.9063,1999.5781 1932.2813,1999.5781 Q1930.9375,1999.5781 1930.25,2000.6563 Q1929.5625,2001.7188 1929.5625,2003.8125 Q1929.5625,2005.9063 1930.25,2006.9844 Q1930.9375,2008.0469 1932.2813,2008.0469 Q1932.9063,2008.0469 1933.5,2007.7813 Q1934.0938,2007.5 1934.7188,2006.9219 L1934.7188,2009.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="1952.25" y="2008.1543">InlineExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1860" x2="2100" y1="2020" y2="2020"/><ellipse cx="1870" cy="2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1879" y="2034.2104">add(Func f) : void</text><ellipse cx="1870" cy="2043.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="216" x="1879" y="2047.0151">instance() noexcept : InlineExecutor &amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1860" x2="2100" y1="2053.6094" y2="2053.6094"/></a><!--MD5=[3310bdfe54858106abec0578bfe16154]
class C_0001123262130157209492--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" target="_top" title="TimekeeperScheduledExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35" xlink:show="new" xlink:title="TimekeeperScheduledExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="153.6328" id="C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.5;" width="1097" x="2649" y="801"/><ellipse cx="3096.25" cy="817" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3099.2188,822.6406 Q3098.6406,822.9375 3098,823.0781 Q3097.3594,823.2344 3096.6563,823.2344 Q3094.1563,823.2344 3092.8281,821.5938 Q3091.5156,819.9375 3091.5156,816.8125 Q3091.5156,813.6875 3092.8281,812.0313 Q3094.1563,810.375 3096.6563,810.375 Q3097.3594,810.375 3098,810.5313 Q3098.6563,810.6875 3099.2188,810.9844 L3099.2188,813.7031 Q3098.5938,813.125 3098,812.8594 Q3097.4063,812.5781 3096.7813,812.5781 Q3095.4375,812.5781 3094.75,813.6563 Q3094.0625,814.7188 3094.0625,816.8125 Q3094.0625,818.9063 3094.75,819.9844 Q3095.4375,821.0469 3096.7813,821.0469 Q3097.4063,821.0469 3098,820.7813 Q3098.5938,820.5 3099.2188,819.9219 L3099.2188,822.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="194" x="3116.75" y="821.1543">TimekeeperScheduledExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2650" x2="3745" y1="833" y2="833"/><ellipse cx="2660" cy="844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="501" x="2669" y="847.2104">TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &amp;) = deleted : void</text><ellipse cx="2660" cy="856.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="476" x="2669" y="860.0151">TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &amp;&amp;) = deleted : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2650" x2="3745" y1="866.6094" y2="866.6094"/><ellipse cx="2660" cy="877.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="2669" y="880.8198">operator=(const TimekeeperScheduledExecutor &amp;) = deleted : TimekeeperScheduledExecutor &amp;</text><ellipse cx="2660" cy="890.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="2669" y="893.6245">operator=(TimekeeperScheduledExecutor &amp;&amp;) = deleted : TimekeeperScheduledExecutor &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2650" x2="3745" y1="900.2188" y2="900.2188"/><ellipse cx="2660" cy="911.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2669" y="914.4292">add(Func func) : void</text><ellipse cx="2660" cy="924.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="1071" x="2669" y="927.2339">create(Executor::KeepAlive&lt;&gt; parent, Function&lt;std::shared_ptr&lt;Timekeeper&gt; ()&gt; getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive&lt;TimekeeperScheduledExecutor&gt;</text><ellipse cx="2660" cy="936.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="420" x="2669" y="940.0386">scheduleAt(Func &amp;&amp; func, const ScheduledExecutor::TimePoint &amp; t) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2650" x2="3745" y1="946.6328" y2="946.6328"/></a><!--MD5=[af034c985d0d2b969f7008656fc559c3]
class C_0001402712402381953994--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" target="_top" title="SerialExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53" xlink:show="new" xlink:title="SerialExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="179.2422" id="C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.5;" width="771" x="2812" y="1234.5"/><ellipse cx="3148.25" cy="1250.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3151.2188,1256.1406 Q3150.6406,1256.4375 3150,1256.5781 Q3149.3594,1256.7344 3148.6563,1256.7344 Q3146.1563,1256.7344 3144.8281,1255.0938 Q3143.5156,1253.4375 3143.5156,1250.3125 Q3143.5156,1247.1875 3144.8281,1245.5313 Q3146.1563,1243.875 3148.6563,1243.875 Q3149.3594,1243.875 3150,1244.0313 Q3150.6563,1244.1875 3151.2188,1244.4844 L3151.2188,1247.2031 Q3150.5938,1246.625 3150,1246.3594 Q3149.4063,1246.0781 3148.7813,1246.0781 Q3147.4375,1246.0781 3146.75,1247.1563 Q3146.0625,1248.2188 3146.0625,1250.3125 Q3146.0625,1252.4063 3146.75,1253.4844 Q3147.4375,1254.5469 3148.7813,1254.5469 Q3149.4063,1254.5469 3150,1254.2813 Q3150.5938,1254 3151.2188,1253.4219 L3151.2188,1256.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="90" x="3168.75" y="1254.6543">SerialExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2813" x2="3582" y1="1266.5" y2="1266.5"/><ellipse cx="2823" cy="1277.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="2832" y="1280.7104">SerialExecutor(const SerialExecutor &amp;) = deleted : void</text><ellipse cx="2823" cy="1290.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="2832" y="1293.5151">SerialExecutor(SerialExecutor &amp;&amp;) = deleted : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2813" x2="3582" y1="1300.1094" y2="1300.1094"/><ellipse cx="2823" cy="1311.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="2832" y="1314.3198">operator=(const SerialExecutor &amp;) = deleted : SerialExecutor &amp;</text><ellipse cx="2823" cy="1323.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="2832" y="1327.1245">operator=(SerialExecutor &amp;&amp;) = deleted : SerialExecutor &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="2813" x2="3582" y1="1333.7188" y2="1333.7188"/><ellipse cx="2823" cy="1344.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2832" y="1347.9292">add(Func func) : void</text><ellipse cx="2823" cy="1357.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="2832" y="1360.7339">addWithPriority(Func func, int8_t priority) : void</text><ellipse cx="2823" cy="1370.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="745" x="2832" y="1373.5386">create(Executor::KeepAlive&lt;Executor&gt; parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive&lt;SerialExecutor&gt;</text><ellipse cx="2823" cy="1383.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="551" x="2832" y="1386.3433">createUnique(std::shared_ptr&lt;Executor&gt; parent = getCPUExecutor()) : SerialExecutor::UniquePtr</text><ellipse cx="2823" cy="1395.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2832" y="1399.1479">getNumPriorities() const : uint8_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2813" x2="3582" y1="1405.7422" y2="1405.7422"/></a><!--MD5=[1b407b8a48c2e9a551c6d8a1a18940a0]
class C_0000470362430235503729--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" target="_top" title="ThreadedExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55" xlink:show="new" xlink:title="ThreadedExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="153.6328" id="C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.5;" width="610" x="1675" y="2097"/><ellipse cx="1918.25" cy="2113" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1921.2188,2118.6406 Q1920.6406,2118.9375 1920,2119.0781 Q1919.3594,2119.2344 1918.6563,2119.2344 Q1916.1563,2119.2344 1914.8281,2117.5938 Q1913.5156,2115.9375 1913.5156,2112.8125 Q1913.5156,2109.6875 1914.8281,2108.0313 Q1916.1563,2106.375 1918.6563,2106.375 Q1919.3594,2106.375 1920,2106.5313 Q1920.6563,2106.6875 1921.2188,2106.9844 L1921.2188,2109.7031 Q1920.5938,2109.125 1920,2108.8594 Q1919.4063,2108.5781 1918.7813,2108.5781 Q1917.4375,2108.5781 1916.75,2109.6563 Q1916.0625,2110.7188 1916.0625,2112.8125 Q1916.0625,2114.9063 1916.75,2115.9844 Q1917.4375,2117.0469 1918.7813,2117.0469 Q1919.4063,2117.0469 1920,2116.7813 Q1920.5938,2116.5 1921.2188,2115.9219 L1921.2188,2118.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="115" x="1938.75" y="2117.1543">ThreadedExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1676" x2="2284" y1="2129" y2="2129"/><ellipse cx="1686" cy="2140" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="1695" y="2143.2104">ThreadedExecutor(std::shared_ptr&lt;ThreadFactory&gt; threadFactory = newDefaultThreadFactory()) : void</text><ellipse cx="1686" cy="2152.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="1695" y="2156.0151">ThreadedExecutor(const ThreadedExecutor &amp;) = deleted : void</text><ellipse cx="1686" cy="2165.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="1695" y="2168.8198">ThreadedExecutor(ThreadedExecutor &amp;&amp;) = deleted : void</text><ellipse cx="1686" cy="2178.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1695" y="2181.6245">~ThreadedExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1676" x2="2284" y1="2188.2188" y2="2188.2188"/><ellipse cx="1686" cy="2199.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="1695" y="2202.4292">operator=(const ThreadedExecutor &amp;) = deleted : ThreadedExecutor &amp;</text><ellipse cx="1686" cy="2212.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="1695" y="2215.2339">operator=(ThreadedExecutor &amp;&amp;) = deleted : ThreadedExecutor &amp;</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="1676" x2="2284" y1="2221.8281" y2="2221.8281"/><ellipse cx="1686" cy="2232.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1695" y="2236.0386">add(Func func) : void</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1676" x2="2284" y1="2242.6328" y2="2242.6328"/></a><!--MD5=[82b5c747f5a02a065abf0a634d41cbf4]
class C_0000560396763155385774--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" target="_top" title="SoftRealTimeExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26" xlink:show="new" xlink:title="SoftRealTimeExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="48" id="C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.5;" width="168" x="2451" y="2473"/><ellipse cx="2466" cy="2489" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2468.9688,2494.6406 Q2468.3906,2494.9375 2467.75,2495.0781 Q2467.1094,2495.2344 2466.4063,2495.2344 Q2463.9063,2495.2344 2462.5781,2493.5938 Q2461.2656,2491.9375 2461.2656,2488.8125 Q2461.2656,2485.6875 2462.5781,2484.0313 Q2463.9063,2482.375 2466.4063,2482.375 Q2467.1094,2482.375 2467.75,2482.5313 Q2468.4063,2482.6875 2468.9688,2482.9844 L2468.9688,2485.7031 Q2468.3438,2485.125 2467.75,2484.8594 Q2467.1563,2484.5781 2466.5313,2484.5781 Q2465.1875,2484.5781 2464.5,2485.6563 Q2463.8125,2486.7188 2463.8125,2488.8125 Q2463.8125,2490.9063 2464.5,2491.9844 Q2465.1875,2493.0469 2466.5313,2493.0469 Q2467.1563,2493.0469 2467.75,2492.7813 Q2468.3438,2492.5 2468.9688,2491.9219 L2468.9688,2494.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="136" x="2480" y="2493.1543">SoftRealTimeExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2452" x2="2618" y1="2505" y2="2505"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2452" x2="2618" y1="2513" y2="2513"/></a><!--MD5=[4c5ac55a9490dced79f9e191b33f25b1]
class C_0000586027154664049253--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" target="_top" title="EDFThreadPoolExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34" xlink:show="new" xlink:title="EDFThreadPoolExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#ffx0oppb4oy5y)" height="171.2422" id="C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.5;" width="976" x="4965.5" y="2397.5"/><ellipse cx="5374.25" cy="2413.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5377.2188,2419.1406 Q5376.6406,2419.4375 5376,2419.5781 Q5375.3594,2419.7344 5374.6563,2419.7344 Q5372.1563,2419.7344 5370.8281,2418.0938 Q5369.5156,2416.4375 5369.5156,2413.3125 Q5369.5156,2410.1875 5370.8281,2408.5313 Q5372.1563,2406.875 5374.6563,2406.875 Q5375.3594,2406.875 5376,2407.0313 Q5376.6563,2407.1875 5377.2188,2407.4844 L5377.2188,2410.2031 Q5376.5938,2409.625 5376,2409.3594 Q5375.4063,2409.0781 5374.7813,2409.0781 Q5373.4375,2409.0781 5372.75,2410.1563 Q5372.0625,2411.2188 5372.0625,2413.3125 Q5372.0625,2415.4063 5372.75,2416.4844 Q5373.4375,2417.5469 5374.7813,2417.5469 Q5375.4063,2417.5469 5376,2417.2813 Q5376.5938,2417 5377.2188,2416.4219 L5377.2188,2419.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="150" x="5394.75" y="2417.6543">EDFThreadPoolExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4966.5" x2="5940.5" y1="2429.5" y2="2429.5"/><ellipse cx="4976.5" cy="2440.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="950" x="4985.5" y="2443.7104">EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr&lt;ThreadFactory&gt; threadFactory = std::make_shared&lt;NamedThreadFactory&gt;("EDFThreadPool")) : void</text><ellipse cx="4976.5" cy="2453.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="4985.5" y="2456.5151">~EDFThreadPoolExecutor() : void</text><line style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 1.0,2.0;" x1="4966.5" x2="5940.5" y1="2463.1094" y2="2463.1094"/><ellipse cx="4976.5" cy="2474.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4985.5" y="2477.3198">add(Func f) : void</text><ellipse cx="4976.5" cy="2486.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="4985.5" y="2490.1245">add(Func f, uint64_t deadline) : void</text><ellipse cx="4976.5" cy="2499.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="4985.5" y="2502.9292">add(Func f, std::size_t total, uint64_t deadline) : void</text><ellipse cx="4976.5" cy="2512.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="4985.5" y="2515.7339">add(std::vector&lt;Func&gt; fs, uint64_t deadline) : void</text><ellipse cx="4976.5" cy="2525.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="4985.5" y="2528.5386">deadlineExecutor(uint64_t deadline) : Executor::KeepAlive&lt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4966.5" x2="5940.5" y1="2535.1328" y2="2535.1328"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4971.5" y="2541.1328"/><ellipse cx="4976.5" cy="2546.1328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" target="_top" title="kEarliestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40" xlink:show="new" xlink:title="kEarliestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="190" x="4985.5" y="2549.3433">kEarliestDeadline : const uint64_t</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="4971.5" y="2553.9375"/><ellipse cx="4976.5" cy="2558.9375" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" target="_top" title="kLatestDeadline" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41" xlink:show="new" xlink:title="kLatestDeadline" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="182" x="4985.5" y="2562.1479">kLatestDeadline : const uint64_t</text></a><!--MD5=[0507f50678c26aafd20e9031c16ac1d0]
link C_0001663594882877424244 to C_0002222099135672593686--><path d="M864.12,1908.57 C882.97,1908.46 901.59,1908.31 919.74,1908.11 " fill="none" id="C_0001663594882877424244-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="924.85,1908.05,915.8049,1904.1531,919.8503,1908.1071,915.8963,1912.1526,924.85,1908.05" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d44102866279698d641a58659b4220ed]
reverse link C_0002222099135672593686 to C_0001663594882877424244--><path d="M904.75,1883.02 C891.39,1882.89 877.82,1882.78 864.12,1882.7 " fill="none" id="C_0002222099135672593686&lt;-C_0001663594882877424244" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="904.93,1876.02,924.85,1883.25,904.78,1890.02,904.93,1876.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9bfe04d74fcca5e380cd86fc2508ab2b]
reverse link C_0002222099135672593686 to C_0001968432200878677255--><path d="M1171.87,1790.05 C1195.29,1476.23 1275.86,557.77 1432,307 C1516.39,171.47 1716.11,155.62 1849.42,161.87 " fill="none" id="C_0002222099135672593686&lt;-C_0001968432200878677255" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1178.83,1790.85,1170.37,1810.28,1164.86,1789.81,1178.83,1790.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c5cdfc8ff258542796370a43a8a6d5bc]
reverse link C_0002222099135672593686 to C_0000481841646641149488--><path d="M1167.13,1790.04 C1177.28,1475.16 1224.48,554.71 1432,357 C1546.67,247.76 1741.69,251.34 1865.24,267.53 " fill="none" id="C_0002222099135672593686&lt;-C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1174.12,1790.56,1166.5,1810.33,1160.13,1790.12,1174.12,1790.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6d6cc176091032b9e9a6d8f3477fd2ab]
reverse link C_0000481841646641149488 to C_0000769434624932181431--><path d="M2114.34,271.17 C2201.59,259.49 2318.07,243.87 2421,230 C2570.29,209.89 2735.73,187.5 2875.33,168.58 " fill="none" id="C_0000481841646641149488&lt;-C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2115.26,278.11,2094.5,273.82,2113.4,264.23,2115.26,278.11" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4cd26f58d593a6e58c5c951cd50a788]
link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4327.9,390.63 C4659.58,404.55 5674.38,425.09 6271.48,431.59 " fill="none" id="C_0002145523347961259416-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6276.73,431.65,6267.7763,427.5474,6271.7303,431.5929,6267.6849,435.5469,6276.73,431.65" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dec116c53a2d170dff43443e961da53]
reverse link C_0002145523347961259416 to C_0001970350906198958245--><path d="M4347.9,379.02 C4699.73,377.87 5691.85,395.08 6276.73,410.99 " fill="none" id="C_0002145523347961259416&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4347.93,386.02,4327.9,379.11,4347.87,372.02,4347.93,386.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[956e3c6898026d390548bc98624d6186]
reverse link C_0002222099135672593686 to C_0002145523347961259416--><path d="M1179.22,1790.16 C1220.5,1510.46 1347.05,763.4 1539,621 C1954.84,312.52 3660.93,359.93 4109.2,378.1 " fill="none" id="C_0002222099135672593686&lt;-C_0002145523347961259416" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1186.1,1791.48,1176.28,1810.26,1172.25,1789.46,1186.1,1791.48" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fbe4f6025306bddd8773b75a56f8d272]
reverse link C_0002222099135672593686 to C_0001347291497865252100--><path d="M1232.78,1997.84 C1299.2,2087.25 1408.95,2211.72 1539,2269 C1679.71,2330.98 2738.56,2343.14 3086.25,2345.47 " fill="none" id="C_0002222099135672593686&lt;-C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1227.04,2001.85,1220.88,1981.57,1238.34,1993.58,1227.04,2001.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[286dc64e0630f8c70451157496c94824]
link C_0001932117148827315960 to C_0001347291497865252100--><path d="M2270.6,2392.47 C2525.31,2379.69 2883.85,2361.69 3071.25,2352.29 " fill="none" id="C_0001932117148827315960-&gt;C_0001347291497865252100" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3078.3798" cy="2351.9261" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3070.3896" x2="3086.37" y1="2352.3222" y2="2351.53"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3077.9837" x2="3078.7759" y1="2343.9359" y2="2359.9163"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1689.39,2391.13 C1601,2379.07 1507.36,2354.56 1432,2305 C1315.74,2228.54 1240.68,2082.25 1200.51,1986.74 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1198.51,1981.94,1198.29,1991.7864,1200.4381,1986.5533,1205.6713,1988.7014,1198.51,1981.94" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[22154f4fc1582ea3b4a3ae1c28ae7c8e]
link C_0001932117148827315960 to C_0002222099135672593686--><path d="M1812.45,2456.54 C1697.25,2480.61 1544.97,2491.29 1432,2422 C1276.74,2326.77 1208.11,2110.13 1180.67,1986.63 " fill="none" id="C_0001932117148827315960-&gt;C_0002222099135672593686-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1179.55,1981.55,1177.5707,1991.1979,1180.621,1986.4339,1185.385,1989.4843,1179.55,1981.55" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1435" y="2411.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="63" x="1445" y="2418.0669">executor_</text><!--MD5=[f4091570a50e50d543407bc69d17a718]
reverse link C_0002222099135672593686 to C_0001932117148827315960--><path d="M1195.67,2000.59 C1234.51,2104.94 1310.9,2260.36 1432,2340 C1507.36,2389.56 1601,2414.07 1689.39,2424.4 " fill="none" id="C_0002222099135672593686&lt;-C_0001932117148827315960" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1189.07,2002.92,1188.86,1981.73,1202.24,1998.16,1189.07,2002.92" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a391c4085ec82253d9730dd224003987]
reverse link C_0001347291497865252100 to C_0002292058893312396804--><path d="M3328.82,2336.16 C3449.66,2327.02 3636.06,2312.94 3806.99,2300.02 " fill="none" id="C_0001347291497865252100&lt;-C_0002292058893312396804" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3328.99,2343.16,3308.52,2337.69,3327.93,2329.2,3328.99,2343.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e81e9ddbd832a715a37127e28d03ab94]
reverse link C_0002292058893312396804 to C_0001740134810840364719--><path d="M4650.08,2258.18 C4686.29,2257.27 4723.43,2256.33 4760.96,2255.39 " fill="none" id="C_0002292058893312396804&lt;-C_0001740134810840364719" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4650.24,2265.18,4630.07,2258.68,4649.89,2251.18,4650.24,2265.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8fc612c63803be1a9f3540f6bd40d2f0]
reverse link C_0002222099135672593686 to C_0001218209673148292552--><path d="M1179.06,1790.6 C1213.26,1557.52 1305.48,1008.55 1432,876 C1518.91,784.96 1653.49,742.14 1767.41,722.11 " fill="none" id="C_0002222099135672593686&lt;-C_0001218209673148292552" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1185.97,1791.7,1176.17,1810.48,1172.12,1789.68,1185.97,1791.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[455db288e65f9217baffdaa9cf7f7dc9]
reverse link C_0002222099135672593686 to C_0000155178671636628489--><path d="M1165.59,1790.45 C1173.64,1614.77 1217.44,1264.66 1432,1092 C1560.9,988.28 1765.86,998.38 1884.89,1015.75 " fill="none" id="C_0002222099135672593686&lt;-C_0000155178671636628489" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1172.58,1790.77,1164.79,1810.48,1158.59,1790.21,1172.58,1790.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9b8d25b1a905ec17cebf74be6e4d1ef]
reverse link C_0000481841646641149488 to C_0001970350906198958245--><path d="M2114.79,289 C2338.65,289 2803.34,289 3196.5,289 C3196.5,289 3196.5,289 5454.5,289 C5728.68,289 6034.15,321.92 6276.67,355.94 " fill="none" id="C_0000481841646641149488&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2114.53,296,2094.53,289,2114.53,282,2114.53,296" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13714c40570251b1727355460ed628a2]
reverse link C_0000155178671636628489 to C_0001970350906198958245--><path d="M2095.13,1053.82 C2271.32,1084.28 2594.99,1139.68 2649,1145 C3147.73,1194.19 3274.86,1181 3776,1181 C3776,1181 3776,1181 5454.5,1181 C5755.94,1181 6048.56,1022.12 6276.69,850.51 " fill="none" id="C_0000155178671636628489&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2093.69,1060.67,2075.18,1050.37,2096.08,1046.88,2093.69,1060.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[85ac5256db58d12eb58da4f0bfa4fa8f]
reverse link C_0001218209673148292552 to C_0001970350906198958245--><path d="M2212.71,680.26 C2281.05,668.9 2355.14,652.52 2421,629 C2530.65,589.85 2536.67,530.61 2649,500 C2821.22,453.07 5254.81,436.63 6276.74,431.78 " fill="none" id="C_0001218209673148292552&lt;-C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2213.51,687.22,2192.66,683.47,2211.29,673.39,2213.51,687.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[accd7d2ab1e2b7c177a3edb9e3f55c72]
link C_0000260170505900481834 to C_0001970350906198958245--><path d="M6054.52,529.98 C6119.51,521.05 6184.65,511.95 6247,503 C6255.15,501.83 6263.37,500.65 6271.65,499.45 " fill="none" id="C_0000260170505900481834-&gt;C_0001970350906198958245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="6276.82,498.7,6267.3415,496.0245,6271.8711,499.4131,6268.4825,503.9427,6276.82,498.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6a40fe925e9209b42fe1a8440e6b087b]
reverse link C_0002292058893312396804 to C_0000260170505900481834--><path d="M4342.52,2103.38 C4603.35,1752.23 5203.53,944.19 5393.63,688.26 " fill="none" id="C_0002292058893312396804&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4348.09,2107.61,4330.55,2119.5,4336.86,2099.27,4348.09,2107.61" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5276268b626ef7b54a98769403cb5439]
reverse link C_0002145523347961259416 to C_0000260170505900481834--><path d="M4347.7,406.5 C4506.14,435.54 4783.9,486.45 5021.26,529.96 " fill="none" id="C_0002145523347961259416&lt;-C_0000260170505900481834" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4345.98,413.3,4327.57,402.81,4348.5,399.53,4345.98,413.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ab611552766336439f9b6ed347c4215c]
reverse link C_0000481841646641149488 to C_0002235860541734359952--><path d="M2113.89,327.6 C2323.65,388.51 2733.39,507.51 2984.24,580.36 " fill="none" id="C_0000481841646641149488&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2111.79,334.28,2094.53,321.97,2115.69,320.83,2111.79,334.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f76a078fe6562592f931aa95ad9663c]
reverse link C_0001218209673148292552 to C_0002235860541734359952--><path d="M2212.9,692.98 C2435.46,681.45 2768.72,664.18 2984.4,653 " fill="none" id="C_0001218209673148292552&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2213.06,699.98,2192.72,694.03,2212.33,686,2213.06,699.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3ab65a7e84903ff36ad19183ae4fbd24]
reverse link C_0000155178671636628489 to C_0002235860541734359952--><path d="M2073.53,995.62 C2201.47,943.39 2440.26,848.89 2649,783 C2758.51,748.44 2882.29,716.01 2984.41,691 " fill="none" id="C_0000155178671636628489&lt;-C_0002235860541734359952" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2075.88,1002.22,2054.72,1003.32,2070.58,989.27,2075.88,1002.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6921ed0d28362e9667150d5319fe2776]
link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4029.2,2624 C3472.84,2702.61 1849.31,2901.04 1432,2607 C1228.03,2463.28 1179.44,2143.65 1167.97,1986.62 " fill="none" id="C_0001956570166673420631-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1167.61,1981.57,1164.2633,1990.8328,1167.9673,1986.5572,1172.2428,1990.2612,1167.61,1981.57" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[99d55ebf5c4bd3f71851e99b5adaf196]
reverse link C_0001956570166673420631 to C_0002222099135672593686--><path d="M4016,2601.6 C3477.06,2615.05 2011.34,2641.19 1539,2543 C1488.66,2532.54 1468.85,2534.86 1432,2499 C1282.61,2353.65 1210.43,2110.19 1181.18,1981.59 " fill="none" id="C_0001956570166673420631&lt;-C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4029.34,2601.27,4023.2408,2597.4229,4017.3438,2601.5732,4023.443,2605.4203,4029.34,2601.27" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2479" y="2598.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="104" x="2489" y="2605.0669">ownedExecutor_</text><!--MD5=[a517c54ec156d68ee25be864ae687f6d]
reverse link C_0001347291497865252100 to C_0001956570166673420631--><path d="M3328.13,2377.81 C3505.67,2421.36 3825.61,2499.86 4029.47,2549.87 " fill="none" id="C_0001347291497865252100&lt;-C_0001956570166673420631" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3326.28,2384.56,3308.52,2373,3329.61,2370.96,3326.28,2384.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9209e2fb2cca13a1bd53142f4af5317e]
reverse link C_0000155178671636628489 to C_0000587962468506435170--><path d="M2095.35,1036.36 C2259.46,1039.73 2569.47,1046.11 2818.84,1051.24 " fill="none" id="C_0000155178671636628489&lt;-C_0000587962468506435170" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2094.97,1043.35,2075.11,1035.94,2095.25,1029.35,2094.97,1043.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0a8abd6ab6b72d3d723f8e27fc307bfc]
reverse link C_0002222099135672593686 to C_0001206661724003471988--><path d="M1344.65,1800.9 C1402.87,1770.16 1470.19,1734.62 1538.77,1698.42 " fill="none" id="C_0002222099135672593686&lt;-C_0001206661724003471988" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1347.84,1807.13,1326.88,1810.28,1341.3,1794.75,1347.84,1807.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[135cc1a411e5fe5d6356ee66905451c6]
reverse link C_0002222099135672593686 to C_0000346702971661703291--><path d="M1421.99,1882.09 C1542.86,1875.56 1684.18,1867.93 1794.23,1861.98 " fill="none" id="C_0002222099135672593686&lt;-C_0000346702971661703291" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1422.35,1889.08,1402,1883.17,1421.6,1875.1,1422.35,1889.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4dd8f29c1989340f5d3fd880405cabcb]
link C_0001612067402701865715 to C_0001612067402701865715--><path d="M1887.56,1987.96 C1874.77,1969.48 1905.59,1953 1980,1953 C2048.02,1953 2079.61,1966.77 2074.77,1983.25 " fill="none" id="C_0001612067402701865715-&gt;C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2072.44,1987.96,2080.0185,1981.6699,2074.6589,1983.4793,2072.8494,1978.1197,2072.44,1987.96" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1957" y="1937.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="38" x="1967" y="1944.0669">cache</text><!--MD5=[ca88da5f247437352a79e15a35decac2]
reverse link C_0002222099135672593686 to C_0001612067402701865715--><path d="M1421.97,1936.78 C1568.25,1959.95 1744.48,1987.86 1858.99,2006 " fill="none" id="C_0002222099135672593686&lt;-C_0001612067402701865715" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1420.66,1943.66,1402,1933.62,1422.85,1929.83,1420.66,1943.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[89eb8d3ac6b14cbcc2f2be4548fd3da0]
link C_0001123262130157209492 to C_0002222099135672593686--><path d="M2648.94,855.21 C2320.99,855.85 1899.19,882.08 1539,986 C1487.03,1001 1466.4,1002.26 1432,1044 C1243.05,1273.34 1187.08,1636.86 1170.89,1805.08 " fill="none" id="C_0001123262130157209492-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1170.38,1810.49,1175.2118,1801.9078,1170.852,1805.5123,1167.2475,1801.1526,1170.38,1810.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9bc685a0c95c6f0f42cb945c35073ec]
reverse link C_0001218209673148292552 to C_0001123262130157209492--><path d="M2212.61,737.97 C2338.47,755.88 2499.79,778.84 2655.24,800.97 " fill="none" id="C_0001218209673148292552&lt;-C_0001123262130157209492" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2211.54,744.89,2192.72,735.14,2213.51,731.03,2211.54,744.89" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c90348528aae1f72fa3dfd98dc4bf126]
link C_0001402712402381953994 to C_0002222099135672593686--><path d="M2811.99,1321.43 C2688.6,1305.33 2556.67,1270.7 2451,1201 C2430.31,1187.36 2442.73,1165.91 2421,1154 C2335.06,1106.9 1622.46,1102.64 1539,1154 C1304.07,1298.59 1211.17,1641.02 1179.19,1805.18 " fill="none" id="C_0001402712402381953994-&gt;C_0002222099135672593686" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1178.17,1810.46,1183.7985,1802.3779,1179.1148,1805.5501,1175.9426,1800.8663,1178.17,1810.46" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e207bfffdf80fcc13f6dcb609a0d553]
reverse link C_0000155178671636628489 to C_0001402712402381953994--><path d="M2095.2,1020.06 C2191.4,1014.58 2327.85,1022.19 2421,1092 C2447.43,1111.81 2425.61,1138.87 2451,1160 C2458.88,1166.56 2633.52,1205.14 2811.77,1243.23 " fill="none" id="C_0000155178671636628489&lt;-C_0001402712402381953994" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2095.44,1027.06,2075.01,1021.44,2094.48,1013.1,2095.44,1027.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5881062226b0dc1facde97fd853f45]
reverse link C_0002222099135672593686 to C_0000470362430235503729--><path d="M1336.67,1990.97 C1399.01,2022.43 1470.86,2055.39 1539,2079 C1582.29,2094 1628.83,2107.12 1674.85,2118.42 " fill="none" id="C_0002222099135672593686&lt;-C_0000470362430235503729" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1333.14,1997.03,1318.5,1981.71,1339.5,1984.56,1333.14,1997.03" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c4dc2b8b28f130daed24dc78f6ab3324]
reverse link C_0002222099135672593686 to C_0000560396763155385774--><path d="M1182.97,2001.32 C1211.78,2131.67 1280.66,2349.89 1432,2460 C1593.37,2577.42 2222.88,2528.12 2450.93,2505.78 " fill="none" id="C_0002222099135672593686&lt;-C_0000560396763155385774" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1176.08,2002.59,1178.76,1981.57,1189.77,1999.67,1176.08,2002.59" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[20b939e7521107461b4dab031da0529a]
reverse link C_0000560396763155385774 to C_0000586027154664049253--><path d="M2639.47,2496.51 C3006.54,2494.74 4261.93,2488.72 4965.18,2485.34 " fill="none" id="C_0000560396763155385774&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2639.4,2503.51,2619.36,2496.6,2639.33,2489.51,2639.4,2503.51" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b64a71dfe9bdf716efdc37867f26125a]
reverse link C_0002292058893312396804 to C_0000586027154664049253--><path d="M4649.81,2372.11 C4663.68,2374.85 4677.44,2377.5 4691,2380 C4779.39,2396.35 4873.99,2411.22 4965.43,2424.27 " fill="none" id="C_0002292058893312396804&lt;-C_0000586027154664049253" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4648.36,2378.95,4630.13,2368.15,4651.11,2365.23,4648.36,2378.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bc9c339a204c6c2cd3dfc33fb694f970]
@startuml
left to right direction
class "detail::ExecutorWithPriorityImpl<Callback>" as C_0001663594882877424244
class C_0001663594882877424244 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22{ExecutorWithPriorityImpl}]] {
+ExecutorWithPriorityImpl(const ExecutorWithPriorityImpl<Callback> &) = deleted : void
+ExecutorWithPriorityImpl(ExecutorWithPriorityImpl<Callback> &&) = deleted : void
..
+operator=(const ExecutorWithPriorityImpl<Callback> &) = deleted : ExecutorWithPriorityImpl<Callback> &
+operator=(ExecutorWithPriorityImpl<Callback> &&) = deleted : ExecutorWithPriorityImpl<Callback> &
..
+add(Func func) : void
{static} +create(Executor::KeepAlive<Executor> executor, Callback && callback) : Executor::KeepAlive<ExecutorWithPriorityImpl<std::decay_t<Callback>>>
__
}
abstract "Executor" as C_0002222099135672593686
abstract C_0002222099135672593686 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53{Executor}]] {
+~Executor() : void
..
{abstract} +add(Func) = 0 : void
+addWithPriority(Func, int8_t priority) : void
{static} +getKeepAliveToken<ExecutorT>(ExecutorT * executor) : KeepAlive<ExecutorT>
{static} +getKeepAliveToken<ExecutorT>(ExecutorT & executor) : KeepAlive<ExecutorT>
+getNumPriorities() const : uint8_t
__
{static} +HI_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70{HI_PRI}]]]
{static} +LO_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68{LO_PRI}]]]
{static} +MID_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69{MID_PRI}]]]
}
class "QueuedImmediateExecutor" as C_0001968432200878677255
class C_0001968432200878677255 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31{QueuedImmediateExecutor}]] {
+add(Func callback) : void
{static} +instance() : QueuedImmediateExecutor &
__
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
..
{abstract} +drive() = 0 : void
__
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() noexcept : void
..
+add(Func) : void
+drain() noexcept : size_t
+drive() noexcept : void
+run() noexcept : size_t
+try_drive() noexcept : bool
+try_drive_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) noexcept : _Bool
+try_drive_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) noexcept : _Bool
+try_wait() noexcept : bool
+try_wait_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) noexcept : _Bool
+try_wait_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) noexcept : _Bool
+wait() noexcept : void
__
}
abstract "IOExecutor" as C_0002145523347961259416
abstract C_0002145523347961259416 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40{IOExecutor}]] {
+~IOExecutor() = default : void
..
{abstract} +getEventBase() = 0 : EventBase *
__
}
class "DefaultKeepAliveExecutor" as C_0001347291497865252100
class C_0001347291497865252100 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30{DefaultKeepAliveExecutor}]] {
+~DefaultKeepAliveExecutor() : void
..
+weakRef() : Executor::KeepAlive<>
__
}
class "DefaultKeepAliveExecutor::WeakRef" as C_0001932117148827315960
class C_0001932117148827315960 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59{DefaultKeepAliveExecutor##WeakRef}]] {
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
{static} +create(std::shared_ptr<ControlBlock> controlBlock, Executor * executor) : Executor::KeepAlive<>
+getNumPriorities() const : uint8_t
__
}
abstract "ThreadPoolExecutor" as C_0002292058893312396804
abstract C_0002292058893312396804 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67{ThreadPoolExecutor}]] {
+ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory, bool isWaitForAll = false) : void
+~ThreadPoolExecutor() : void
..
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void
{abstract} +add(Func func) = 0 : void
+addObserver(std::shared_ptr<Observer>) : void
+getName() const : const std::string &
+getPendingTaskCount() const : size_t
+getPoolStats() const : ThreadPoolExecutor::PoolStats
+getThreadFactory() const : std::shared_ptr<ThreadFactory>
+join() : void
+numActiveThreads() const : size_t
+numThreads() const : size_t
+removeObserver(std::shared_ptr<Observer>) : void
+setNumThreads(size_t numThreads) : void
+setThreadDeathTimeout(std::chrono::milliseconds timeout) : void
+setThreadFactory(std::shared_ptr<ThreadFactory> threadFactory) : void
+stop() : void
+subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void
{static} +withAll(FunctionRef<void (ThreadPoolExecutor &)> f) : void
__
}
class "CPUThreadPoolExecutor" as C_0001740134810840364719
class C_0001740134810840364719 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68{CPUThreadPoolExecutor}]] {
+CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads) : void
+CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+~CPUThreadPoolExecutor() : void
..
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+addWithPriority(Func func, int8_t priority) : void
+getNumPriorities() const : uint8_t
+getTaskQueueSize() const : size_t
__
{static} +kDefaultMaxQueueSize : const size_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153{kDefaultMaxQueueSize}]]]
}
abstract "ScheduledExecutor" as C_0001218209673148292552
abstract C_0001218209673148292552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28{ScheduledExecutor}]] {
+~ScheduledExecutor() = default : void
..
{abstract} +add(Func) = 0 : void
+now() : ScheduledExecutor::TimePoint
+schedule(Func && a) : void
+schedule(Func && a, const ScheduledExecutor::Duration & dur) : void
+scheduleAt(Func &&, const ScheduledExecutor::TimePoint &) : void
__
}
class "SequencedExecutor" as C_0000155178671636628489
class C_0000155178671636628489 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27{SequencedExecutor}]] {
+~SequencedExecutor() : void
__
}
class "EventBase" as C_0001970350906198958245
class C_0001970350906198958245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135{EventBase}]] {
+EventBase(std::chrono::milliseconds tickInterval) : void
+EventBase() : void
+EventBase(bool enableTimeMeasurement) : void
+EventBase(const EventBase &) = deleted : void
+EventBase(event_base * evb, bool enableTimeMeasurement = true) : void
+EventBase(EventBase::Options options) : void
+~EventBase() : void
..
+operator=(const EventBase &) = deleted : EventBase &
..
+add(Cob fn) : void
+attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void
+bumpHandlingTime() : void
+cancelTimeout(AsyncTimeout * obj) : void
+checkIsInEventBaseThread() const : void
+dcheckIsInEventBaseThread() const : void
+detachTimeoutManager(AsyncTimeout * obj) : void
+drive() : void
+getAvgLoopTime() const : double
+getBackend() : EventBaseBackendBase *
{static} +getDefaultBackend() : std::unique_ptr<EventBaseBackendBase>
+getEventBase() : EventBase *
+getExecutionObserver() : ExecutionObserver *
+getLibeventBase() const : event_base *
{static} +getLibeventMethod() : const char *
{static} +getLibeventVersion() : const char *
+getName() : const std::string &
+getNotificationQueueSize() const : size_t
+getObserver() : const std::shared_ptr<EventBaseObserver> &
+getVirtualEventBase() : VirtualEventBase &
+inRunningEventBaseThread() const : bool
+isInEventBaseThread() const : bool
+isInTimeoutManagerThread() : bool
+isRunning() const : bool
+loop() : bool
+loopForever() : void
+loopIgnoreKeepAlive() : bool
+loopOnce(int flags = 0) : bool
+resetLoadAvg(double value = 0.0) : void
+runBeforeLoop(EventBase::LoopCallback * callback) : void
+runImmediatelyOrRunInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) noexcept : void
+runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void
+runInEventBaseThread<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThread(EventBase::Func fn) noexcept : void
+runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) noexcept : void
+runInEventBaseThreadAlwaysEnqueue<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void
+runInLoop(EventBase::Func c, bool thisIteration = false) : void
+runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr<RequestContext> rctx = RequestContext::saveContext()) : void
+runOnDestruction(EventBase::Func f) : void
+runOnDestruction(EventBase::OnDestructionCallback & callback) : void
+scheduleAt(EventBase::Func && fn, const ScheduledExecutor::TimePoint & timeout) : void
+scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool
+setExecutionObserver(ExecutionObserver * observer) : void
+setLoadAvgMsec(std::chrono::milliseconds ms) : void
+setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+setName(const std::string & name) : void
+setObserver(const std::shared_ptr<EventBaseObserver> & observer) : void
+terminateLoopSoon() : void
+timer() : HHWheelTimer &
+waitUntilRunning() : void
__
}
class "IOThreadPoolExecutor" as C_0000260170505900481834
class C_0000260170505900481834 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58{IOThreadPoolExecutor}]] {
+IOThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+~IOThreadPoolExecutor() : void
..
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getEventBase() : EventBase *
{static} +getEventBase(ThreadPoolExecutor::ThreadHandle *) : EventBase *
+getEventBaseManager() : EventBaseManager *
__
}
class "ManualExecutor" as C_0002235860541734359952
class C_0002235860541734359952 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38{ManualExecutor}]] {
+~ManualExecutor() : void
..
+add(Func) : void
+advance(const ScheduledExecutor::Duration & dur) : void
+advanceTo(const ScheduledExecutor::TimePoint & t) : void
+clear() : std::size_t
+drain() : size_t
+drive() : void
+keepAliveAcquire() noexcept : bool
+keepAliveRelease() noexcept : void
+makeProgress() : void
+now() : ScheduledExecutor::TimePoint
+run() : size_t
+scheduleAt(Func && f, const ScheduledExecutor::TimePoint & t) : void
+wait() : void
+waitFor<F>(const F & f) : void
__
}
class "MeteredExecutor" as C_0001956570166673420631
class C_0001956570166673420631 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41{MeteredExecutor}]] {
+MeteredExecutor(std::unique_ptr<Executor> exe) : void
+MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void
+~MeteredExecutor() : void
..
+add(Func func) : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
__
}
class "StrandExecutor" as C_0000587962468506435170
class C_0000587962468506435170 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122{StrandExecutor}]] {
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
{static} +create() : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context) : Executor::KeepAlive<StrandExecutor>
{static} +create(Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context, Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
+getNumPriorities() const : uint8_t
__
}
class "fibers::FiberManager" as C_0001206661724003471988
class C_0001206661724003471988 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80{FiberManager}]] {
+FiberManager(const fibers::FiberManager &) = deleted : void
+FiberManager(std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+FiberManager<LocalT>(LocalType<LocalT>, std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+~FiberManager() : void
..
+operator=(const fibers::FiberManager &) = deleted : fibers::FiberManager &
..
+add(Func f) : void
+addTask<F>(F && func, fibers::TaskOptions taskOptions = TaskOptions()) : void
+addTaskEager<F>(F && func) : void
+addTaskEagerFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskFinally<F,G>(F && func, G && finally) : void
+addTaskFinallyEager<F,G>(F && func, G && finally) : void
+addTaskFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskRemote<F>(F && func) : void
+addTaskRemoteFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+currentFiber() const : fibers::Fiber *
+fibersAllocated() const : size_t
+fibersPoolSize() const : size_t
+getCurrentTaskRunningTime() const : Optional<std::chrono::nanoseconds>
{static} +getFiberManager() : fibers::FiberManager &
{static} +getFiberManagerUnsafe() : fibers::FiberManager *
+getObserver() : ExecutionObserver *
+getOptions() const : const fibers::FiberManager::Options &
+hasActiveFiber() const : bool
+hasReadyTasks() const : bool
+hasTasks() const : bool
+local<T>() : T &
{static} +localThread<T>() : T &
+loopController() const : const fibers::LoopController &
+loopController() : fibers::LoopController &
+loopUntilNoReady() : void
+loopUntilNoReadyImpl() : void
+numActiveTasks() const noexcept : size_t
+runEagerFiberImpl(fibers::Fiber *) : void
+runInMainContext<F>(F && func) : invoke_result_t<F>
+runQueueSize() const : size_t
+setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void
+setObserver(ExecutionObserver * observer) : void
+setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void
+shouldRunLoopRemote() : bool
+stackHighWatermark() const : size_t
+yield() : void
__
}
class "futures::detail::WaitExecutor" as C_0000346702971661703291
class C_0000346702971661703291 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478{WaitExecutor}]] {
+add(Func func) : void
{static} +create() : Executor::KeepAlive<futures::detail::WaitExecutor>
+detach() : void
+drive() : void
+driveUntil(Clock::time_point deadline) : bool
__
}
class "InlineExecutor" as C_0001612067402701865715
class C_0001612067402701865715 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30{InlineExecutor}]] {
+add(Func f) : void
{static} +instance() noexcept : InlineExecutor &
__
}
class "TimekeeperScheduledExecutor" as C_0001123262130157209492
class C_0001123262130157209492 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35{TimekeeperScheduledExecutor}]] {
+TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &) = deleted : void
+TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &&) = deleted : void
..
+operator=(const TimekeeperScheduledExecutor &) = deleted : TimekeeperScheduledExecutor &
+operator=(TimekeeperScheduledExecutor &&) = deleted : TimekeeperScheduledExecutor &
..
+add(Func func) : void
{static} +create(Executor::KeepAlive<> parent, Function<std::shared_ptr<Timekeeper> ()> getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive<TimekeeperScheduledExecutor>
+scheduleAt(Func && func, const ScheduledExecutor::TimePoint & t) : void
__
}
class "SerialExecutor" as C_0001402712402381953994
class C_0001402712402381953994 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53{SerialExecutor}]] {
+SerialExecutor(const SerialExecutor &) = deleted : void
+SerialExecutor(SerialExecutor &&) = deleted : void
..
+operator=(const SerialExecutor &) = deleted : SerialExecutor &
+operator=(SerialExecutor &&) = deleted : SerialExecutor &
..
+add(Func func) : void
+addWithPriority(Func func, int8_t priority) : void
{static} +create(Executor::KeepAlive<Executor> parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive<SerialExecutor>
{static} +createUnique(std::shared_ptr<Executor> parent = getCPUExecutor()) : SerialExecutor::UniquePtr
+getNumPriorities() const : uint8_t
__
}
class "ThreadedExecutor" as C_0000470362430235503729
class C_0000470362430235503729 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55{ThreadedExecutor}]] {
+ThreadedExecutor(std::shared_ptr<ThreadFactory> threadFactory = newDefaultThreadFactory()) : void
+ThreadedExecutor(const ThreadedExecutor &) = deleted : void
+ThreadedExecutor(ThreadedExecutor &&) = deleted : void
+~ThreadedExecutor() : void
..
+operator=(const ThreadedExecutor &) = deleted : ThreadedExecutor &
+operator=(ThreadedExecutor &&) = deleted : ThreadedExecutor &
..
+add(Func func) : void
__
}
class "SoftRealTimeExecutor" as C_0000560396763155385774
class C_0000560396763155385774 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26{SoftRealTimeExecutor}]] {
__
}
class "EDFThreadPoolExecutor" as C_0000586027154664049253
class C_0000586027154664049253 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34{EDFThreadPoolExecutor}]] {
+EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("EDFThreadPool")) : void
+~EDFThreadPoolExecutor() : void
..
+add(Func f) : void
+add(Func f, uint64_t deadline) : void
+add(Func f, std::size_t total, uint64_t deadline) : void
+add(std::vector<Func> fs, uint64_t deadline) : void
+deadlineExecutor(uint64_t deadline) : Executor::KeepAlive<>
__
{static} +kEarliestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40{kEarliestDeadline}]]]
{static} +kLatestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41{kLatestDeadline}]]]
}
C_0001663594882877424244 ..> C_0002222099135672593686
C_0002222099135672593686 <|- - C_0001663594882877424244
C_0002222099135672593686 <|- - C_0001968432200878677255
C_0002222099135672593686 <|- - C_0000481841646641149488
C_0000481841646641149488 <|- - C_0000769434624932181431
C_0002145523347961259416 ..> C_0001970350906198958245
C_0002222099135672593686 <|- - C_0002145523347961259416
C_0002222099135672593686 <|- - C_0001347291497865252100
C_0001932117148827315960 - -+ C_0001347291497865252100
C_0001932117148827315960 ..> C_0002222099135672593686
C_0001932117148827315960 - -> C_0002222099135672593686 : -executor_
C_0002222099135672593686 <|- - C_0001932117148827315960
C_0001347291497865252100 <|- - C_0002292058893312396804
C_0002292058893312396804 <|- - C_0001740134810840364719
C_0002222099135672593686 <|- - C_0001218209673148292552
C_0002222099135672593686 <|- - C_0000155178671636628489
C_0000481841646641149488 <|- - C_0001970350906198958245
C_0002145523347961259416 <|- - C_0001970350906198958245
C_0000155178671636628489 <|- - C_0001970350906198958245
C_0001218209673148292552 <|- - C_0001970350906198958245
C_0000260170505900481834 ..> C_0001970350906198958245
C_0002292058893312396804 <|- - C_0000260170505900481834
C_0002145523347961259416 <|- - C_0000260170505900481834
C_0000481841646641149488 <|- - C_0002235860541734359952
C_0001218209673148292552 <|- - C_0002235860541734359952
C_0000155178671636628489 <|- - C_0002235860541734359952
C_0001956570166673420631 ..> C_0002222099135672593686
C_0001956570166673420631 o- - C_0002222099135672593686 : -ownedExecutor_
C_0001347291497865252100 <|- - C_0001956570166673420631
C_0000155178671636628489 <|- - C_0000587962468506435170
C_0002222099135672593686 <|- - C_0001206661724003471988
C_0002222099135672593686 <|- - C_0000346702971661703291
C_0001612067402701865715 - -> C_0001612067402701865715 : -cache
C_0002222099135672593686 <|- - C_0001612067402701865715
C_0001123262130157209492 ..> C_0002222099135672593686
C_0001218209673148292552 <|- - C_0001123262130157209492
C_0001402712402381953994 ..> C_0002222099135672593686
C_0000155178671636628489 <|- - C_0001402712402381953994
C_0002222099135672593686 <|- - C_0000470362430235503729
C_0002222099135672593686 <|- - C_0000560396763155385774
C_0000560396763155385774 <|- - C_0000586027154664049253
C_0002292058893312396804 <|- - C_0000586027154664049253

@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.19+7-post-Ubuntu-0ubuntu122.04.1
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>