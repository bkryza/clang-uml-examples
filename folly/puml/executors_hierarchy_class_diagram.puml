@startuml
left to right direction
class "detail::ExecutorWithPriorityImpl<Callback>" as C_0001663594882877424244
class C_0001663594882877424244 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ExecutorWithPriority-inl.h#L22{ExecutorWithPriorityImpl}]] {
+ExecutorWithPriorityImpl(const ExecutorWithPriorityImpl<Callback> &) = deleted : void
+ExecutorWithPriorityImpl(ExecutorWithPriorityImpl<Callback> &&) = deleted : void
..
+operator=(const ExecutorWithPriorityImpl<Callback> &) = deleted : ExecutorWithPriorityImpl<Callback> &
+operator=(ExecutorWithPriorityImpl<Callback> &&) = deleted : ExecutorWithPriorityImpl<Callback> &
..
+add(Func func) : void
{static} +create(Executor::KeepAlive<Executor> executor, Callback && callback) : Executor::KeepAlive<ExecutorWithPriorityImpl<std::decay_t<Callback>>>
__
}
abstract "Executor" as C_0002222099135672593686
abstract C_0002222099135672593686 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L53{Executor}]] {
+~Executor() : void
..
{abstract} +add(Func) = 0 : void
+addWithPriority(Func, int8_t priority) : void
{static} +getKeepAliveToken<ExecutorT>(ExecutorT * executor) : KeepAlive<ExecutorT>
{static} +getKeepAliveToken<ExecutorT>(ExecutorT & executor) : KeepAlive<ExecutorT>
+getNumPriorities() const : uint8_t
__
{static} +HI_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L70{HI_PRI}]]]
{static} +LO_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L68{LO_PRI}]]]
{static} +MID_PRI : const int8_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Executor.h#L69{MID_PRI}]]]
}
class "QueuedImmediateExecutor" as C_0001968432200878677255
class C_0001968432200878677255 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/QueuedImmediateExecutor.h#L31{QueuedImmediateExecutor}]] {
+add(Func callback) : void
{static} +instance() : QueuedImmediateExecutor &
__
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
..
{abstract} +drive() = 0 : void
__
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() noexcept : void
..
+add(Func) : void
+drain() noexcept : size_t
+drive() noexcept : void
+run() noexcept : size_t
+try_drive() noexcept : bool
+try_drive_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) noexcept : _Bool
+try_drive_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) noexcept : _Bool
+try_wait() noexcept : bool
+try_wait_for<Rep,Period>(const std::chrono::duration<Rep,Period> & timeout) noexcept : _Bool
+try_wait_until<Clock,Duration>(const std::chrono::time_point<Clock,Duration> & deadline) noexcept : _Bool
+wait() noexcept : void
__
}
abstract "IOExecutor" as C_0002145523347961259416
abstract C_0002145523347961259416 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOExecutor.h#L40{IOExecutor}]] {
+~IOExecutor() = default : void
..
{abstract} +getEventBase() = 0 : EventBase *
__
}
class "DefaultKeepAliveExecutor" as C_0001347291497865252100
class C_0001347291497865252100 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L30{DefaultKeepAliveExecutor}]] {
+~DefaultKeepAliveExecutor() : void
..
+weakRef() : Executor::KeepAlive<>
__
}
class "DefaultKeepAliveExecutor::WeakRef" as C_0001932117148827315960
class C_0001932117148827315960 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/DefaultKeepAliveExecutor.h#L59{DefaultKeepAliveExecutor##WeakRef}]] {
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
{static} +create(std::shared_ptr<ControlBlock> controlBlock, Executor * executor) : Executor::KeepAlive<>
+getNumPriorities() const : uint8_t
__
}
abstract "ThreadPoolExecutor" as C_0002292058893312396804
abstract C_0002292058893312396804 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadPoolExecutor.h#L67{ThreadPoolExecutor}]] {
+ThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory, bool isWaitForAll = false) : void
+~ThreadPoolExecutor() : void
..
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback) : void
{abstract} +add(Func func) = 0 : void
+addObserver(std::shared_ptr<Observer>) : void
+getName() const : const std::string &
+getPendingTaskCount() const : size_t
+getPoolStats() const : ThreadPoolExecutor::PoolStats
+getThreadFactory() const : std::shared_ptr<ThreadFactory>
+join() : void
+numActiveThreads() const : size_t
+numThreads() const : size_t
+removeObserver(std::shared_ptr<Observer>) : void
+setNumThreads(size_t numThreads) : void
+setThreadDeathTimeout(std::chrono::milliseconds timeout) : void
+setThreadFactory(std::shared_ptr<ThreadFactory> threadFactory) : void
+stop() : void
+subscribeToTaskStats(ThreadPoolExecutor::TaskStatsCallback cb) : void
{static} +withAll(FunctionRef<void (ThreadPoolExecutor &)> f) : void
__
}
class "CPUThreadPoolExecutor" as C_0001740134810840364719
class C_0001740134810840364719 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L68{CPUThreadPoolExecutor}]] {
+CPUThreadPoolExecutor(size_t numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::unique_ptr<BlockingQueue<CPUTask>> taskQueue, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads) : void
+CPUThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(std::pair<size_t,size_t> numThreads, std::shared_ptr<ThreadFactory> threadFactory) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+CPUThreadPoolExecutor(size_t numThreads, int8_t numPriorities, size_t maxQueueSize, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("CPUThreadPool")) : void
+~CPUThreadPoolExecutor() : void
..
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+add(Func func, int8_t priority, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+addWithPriority(Func func, int8_t priority) : void
+getNumPriorities() const : uint8_t
+getTaskQueueSize() const : size_t
__
{static} +kDefaultMaxQueueSize : const size_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/CPUThreadPoolExecutor.h#L153{kDefaultMaxQueueSize}]]]
}
abstract "ScheduledExecutor" as C_0001218209673148292552
abstract C_0001218209673148292552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ScheduledExecutor.h#L28{ScheduledExecutor}]] {
+~ScheduledExecutor() = default : void
..
{abstract} +add(Func) = 0 : void
+now() : ScheduledExecutor::TimePoint
+schedule(Func && a) : void
+schedule(Func && a, const ScheduledExecutor::Duration & dur) : void
+scheduleAt(Func &&, const ScheduledExecutor::TimePoint &) : void
__
}
class "SequencedExecutor" as C_0000155178671636628489
class C_0000155178671636628489 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SequencedExecutor.h#L27{SequencedExecutor}]] {
+~SequencedExecutor() : void
__
}
class "EventBase" as C_0001970350906198958245
class C_0001970350906198958245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/io/async/EventBase.h#L135{EventBase}]] {
+EventBase(std::chrono::milliseconds tickInterval) : void
+EventBase() : void
+EventBase(bool enableTimeMeasurement) : void
+EventBase(const EventBase &) = deleted : void
+EventBase(event_base * evb, bool enableTimeMeasurement = true) : void
+EventBase(EventBase::Options options) : void
+~EventBase() : void
..
+operator=(const EventBase &) = deleted : EventBase &
..
+add(Cob fn) : void
+attachTimeoutManager(AsyncTimeout * obj, TimeoutManager::InternalEnum internal) : void
+bumpHandlingTime() : void
+cancelTimeout(AsyncTimeout * obj) : void
+checkIsInEventBaseThread() const : void
+dcheckIsInEventBaseThread() const : void
+detachTimeoutManager(AsyncTimeout * obj) : void
+drive() : void
+getAvgLoopTime() const : double
+getBackend() : EventBaseBackendBase *
{static} +getDefaultBackend() : std::unique_ptr<EventBaseBackendBase>
+getEventBase() : EventBase *
+getExecutionObserver() : ExecutionObserver *
+getLibeventBase() const : event_base *
{static} +getLibeventMethod() : const char *
{static} +getLibeventVersion() : const char *
+getName() : const std::string &
+getNotificationQueueSize() const : size_t
+getObserver() : const std::shared_ptr<EventBaseObserver> &
+getVirtualEventBase() : VirtualEventBase &
+inRunningEventBaseThread() const : bool
+isInEventBaseThread() const : bool
+isInTimeoutManagerThread() : bool
+isRunning() const : bool
+loop() : bool
+loopForever() : void
+loopIgnoreKeepAlive() : bool
+loopOnce(int flags = 0) : bool
+resetLoadAvg(double value = 0.0) : void
+runBeforeLoop(EventBase::LoopCallback * callback) : void
+runImmediatelyOrRunInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) noexcept : void
+runImmediatelyOrRunInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void
+runInEventBaseThread<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThread(EventBase::Func fn) noexcept : void
+runInEventBaseThreadAlwaysEnqueue(EventBase::Func fn) noexcept : void
+runInEventBaseThreadAlwaysEnqueue<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThreadAndWait<T>(void (*)(T *) fn, T * arg) noexcept : void
+runInEventBaseThreadAndWait(EventBase::Func fn) noexcept : void
+runInLoop(EventBase::Func c, bool thisIteration = false) : void
+runInLoop(EventBase::LoopCallback * callback, bool thisIteration = false, std::shared_ptr<RequestContext> rctx = RequestContext::saveContext()) : void
+runOnDestruction(EventBase::Func f) : void
+runOnDestruction(EventBase::OnDestructionCallback & callback) : void
+scheduleAt(EventBase::Func && fn, const ScheduledExecutor::TimePoint & timeout) : void
+scheduleTimeout(AsyncTimeout * obj, TimeoutManager::timeout_type timeout) : bool
+setExecutionObserver(ExecutionObserver * observer) : void
+setLoadAvgMsec(std::chrono::milliseconds ms) : void
+setMaxLatency(std::chrono::microseconds maxLatency, EventBase::Func maxLatencyCob) : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
+setName(const std::string & name) : void
+setObserver(const std::shared_ptr<EventBaseObserver> & observer) : void
+terminateLoopSoon() : void
+timer() : HHWheelTimer &
+waitUntilRunning() : void
__
}
class "IOThreadPoolExecutor" as C_0000260170505900481834
class C_0000260170505900481834 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/IOThreadPoolExecutor.h#L58{IOThreadPoolExecutor}]] {
+IOThreadPoolExecutor(size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+IOThreadPoolExecutor(size_t maxThreads, size_t minThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("IOThreadPool"), EventBaseManager * ebm = folly::EventBaseManager::get(), bool waitForAll = false) : void
+~IOThreadPoolExecutor() : void
..
+add(Func func) : void
+add(Func func, std::chrono::milliseconds expiration, Func expireCallback = nullptr) : void
+getEventBase() : EventBase *
{static} +getEventBase(ThreadPoolExecutor::ThreadHandle *) : EventBase *
+getEventBaseManager() : EventBaseManager *
__
}
class "ManualExecutor" as C_0002235860541734359952
class C_0002235860541734359952 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ManualExecutor.h#L38{ManualExecutor}]] {
+~ManualExecutor() : void
..
+add(Func) : void
+advance(const ScheduledExecutor::Duration & dur) : void
+advanceTo(const ScheduledExecutor::TimePoint & t) : void
+clear() : std::size_t
+drain() : size_t
+drive() : void
+keepAliveAcquire() noexcept : bool
+keepAliveRelease() noexcept : void
+makeProgress() : void
+now() : ScheduledExecutor::TimePoint
+run() : size_t
+scheduleAt(Func && f, const ScheduledExecutor::TimePoint & t) : void
+wait() : void
+waitFor<F>(const F & f) : void
__
}
class "MeteredExecutor" as C_0001956570166673420631
class C_0001956570166673420631 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/MeteredExecutor.h#L41{MeteredExecutor}]] {
+MeteredExecutor(std::unique_ptr<Executor> exe) : void
+MeteredExecutor(MeteredExecutor::KeepAlive keepAlive) : void
+~MeteredExecutor() : void
..
+add(Func func) : void
+setMaxReadAtOnce(uint32_t maxAtOnce) : void
__
}
class "StrandExecutor" as C_0000587962468506435170
class C_0000587962468506435170 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/StrandExecutor.h#L122{StrandExecutor}]] {
+add(Func f) : void
+addWithPriority(Func f, int8_t priority) : void
{static} +create() : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context) : Executor::KeepAlive<StrandExecutor>
{static} +create(Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
{static} +create(std::shared_ptr<StrandContext> context, Executor::KeepAlive<> parentExecutor) : Executor::KeepAlive<StrandExecutor>
+getNumPriorities() const : uint8_t
__
}
class "fibers::FiberManager" as C_0001206661724003471988
class C_0001206661724003471988 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/fibers/FiberManagerInternal.h#L80{FiberManager}]] {
+FiberManager(const fibers::FiberManager &) = deleted : void
+FiberManager(std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+FiberManager<LocalT>(LocalType<LocalT>, std::unique_ptr<LoopController> loopController, fibers::FiberManager::Options options = Options()) : void
+~FiberManager() : void
..
+operator=(const fibers::FiberManager &) = deleted : fibers::FiberManager &
..
+add(Func f) : void
+addTask<F>(F && func, fibers::TaskOptions taskOptions = TaskOptions()) : void
+addTaskEager<F>(F && func) : void
+addTaskEagerFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskFinally<F,G>(F && func, G && finally) : void
+addTaskFinallyEager<F,G>(F && func, G && finally) : void
+addTaskFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+addTaskRemote<F>(F && func) : void
+addTaskRemoteFuture<F>(F && func) : Future<lift_unit_t<invoke_result_t<F> > >
+currentFiber() const : fibers::Fiber *
+fibersAllocated() const : size_t
+fibersPoolSize() const : size_t
+getCurrentTaskRunningTime() const : Optional<std::chrono::nanoseconds>
{static} +getFiberManager() : fibers::FiberManager &
{static} +getFiberManagerUnsafe() : fibers::FiberManager *
+getObserver() : ExecutionObserver *
+getOptions() const : const fibers::FiberManager::Options &
+hasActiveFiber() const : bool
+hasReadyTasks() const : bool
+hasTasks() const : bool
+local<T>() : T &
{static} +localThread<T>() : T &
+loopController() const : const fibers::LoopController &
+loopController() : fibers::LoopController &
+loopUntilNoReady() : void
+loopUntilNoReadyImpl() : void
+numActiveTasks() const noexcept : size_t
+runEagerFiberImpl(fibers::Fiber *) : void
+runInMainContext<F>(F && func) : invoke_result_t<F>
+runQueueSize() const : size_t
+setExceptionCallback(fibers::FiberManager::ExceptionCallback ec) : void
+setObserver(ExecutionObserver * observer) : void
+setPreemptRunner(fibers::InlineFunctionRunner * preemptRunner) : void
+shouldRunLoopRemote() : bool
+stackHighWatermark() const : size_t
+yield() : void
__
}
class "futures::detail::WaitExecutor" as C_0000346702971661703291
class C_0000346702971661703291 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L478{WaitExecutor}]] {
+add(Func func) : void
{static} +create() : Executor::KeepAlive<futures::detail::WaitExecutor>
+detach() : void
+drive() : void
+driveUntil(Clock::time_point deadline) : bool
__
}
class "InlineExecutor" as C_0001612067402701865715
class C_0001612067402701865715 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/InlineExecutor.h#L30{InlineExecutor}]] {
+add(Func f) : void
{static} +instance() noexcept : InlineExecutor &
__
}
class "TimekeeperScheduledExecutor" as C_0001123262130157209492
class C_0001123262130157209492 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimekeeperScheduledExecutor.h#L35{TimekeeperScheduledExecutor}]] {
+TimekeeperScheduledExecutor(const TimekeeperScheduledExecutor &) = deleted : void
+TimekeeperScheduledExecutor(TimekeeperScheduledExecutor &&) = deleted : void
..
+operator=(const TimekeeperScheduledExecutor &) = deleted : TimekeeperScheduledExecutor &
+operator=(TimekeeperScheduledExecutor &&) = deleted : TimekeeperScheduledExecutor &
..
+add(Func func) : void
{static} +create(Executor::KeepAlive<> parent, Function<std::shared_ptr<Timekeeper> ()> getTimekeeper = detail::getTimekeeperSingleton) : Executor::KeepAlive<TimekeeperScheduledExecutor>
+scheduleAt(Func && func, const ScheduledExecutor::TimePoint & t) : void
__
}
class "SerialExecutor" as C_0001402712402381953994
class C_0001402712402381953994 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SerialExecutor.h#L53{SerialExecutor}]] {
+SerialExecutor(const SerialExecutor &) = deleted : void
+SerialExecutor(SerialExecutor &&) = deleted : void
..
+operator=(const SerialExecutor &) = deleted : SerialExecutor &
+operator=(SerialExecutor &&) = deleted : SerialExecutor &
..
+add(Func func) : void
+addWithPriority(Func func, int8_t priority) : void
{static} +create(Executor::KeepAlive<Executor> parent = getKeepAliveToken(getCPUExecutor().get())) : Executor::KeepAlive<SerialExecutor>
{static} +createUnique(std::shared_ptr<Executor> parent = getCPUExecutor()) : SerialExecutor::UniquePtr
+getNumPriorities() const : uint8_t
__
}
class "ThreadedExecutor" as C_0000470362430235503729
class C_0000470362430235503729 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/ThreadedExecutor.h#L55{ThreadedExecutor}]] {
+ThreadedExecutor(std::shared_ptr<ThreadFactory> threadFactory = newDefaultThreadFactory()) : void
+ThreadedExecutor(const ThreadedExecutor &) = deleted : void
+ThreadedExecutor(ThreadedExecutor &&) = deleted : void
+~ThreadedExecutor() : void
..
+operator=(const ThreadedExecutor &) = deleted : ThreadedExecutor &
+operator=(ThreadedExecutor &&) = deleted : ThreadedExecutor &
..
+add(Func func) : void
__
}
class "SoftRealTimeExecutor" as C_0000560396763155385774
class C_0000560396763155385774 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/SoftRealTimeExecutor.h#L26{SoftRealTimeExecutor}]] {
__
}
class "EDFThreadPoolExecutor" as C_0000586027154664049253
class C_0000586027154664049253 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L34{EDFThreadPoolExecutor}]] {
+EDFThreadPoolExecutor(std::size_t numThreads, std::shared_ptr<ThreadFactory> threadFactory = std::make_shared<NamedThreadFactory>("EDFThreadPool")) : void
+~EDFThreadPoolExecutor() : void
..
+add(Func f) : void
+add(Func f, uint64_t deadline) : void
+add(Func f, std::size_t total, uint64_t deadline) : void
+add(std::vector<Func> fs, uint64_t deadline) : void
+deadlineExecutor(uint64_t deadline) : Executor::KeepAlive<>
__
{static} +kEarliestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L40{kEarliestDeadline}]]]
{static} +kLatestDeadline : const uint64_t [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/EDFThreadPoolExecutor.h#L41{kLatestDeadline}]]]
}
C_0001663594882877424244 ..> C_0002222099135672593686
C_0002222099135672593686 <|-- C_0001663594882877424244
C_0002222099135672593686 <|-- C_0001968432200878677255
C_0002222099135672593686 <|-- C_0000481841646641149488
C_0000481841646641149488 <|-- C_0000769434624932181431
C_0002145523347961259416 ..> C_0001970350906198958245
C_0002222099135672593686 <|-- C_0002145523347961259416
C_0002222099135672593686 <|-- C_0001347291497865252100
C_0001932117148827315960 --+ C_0001347291497865252100
C_0001932117148827315960 ..> C_0002222099135672593686
C_0001932117148827315960 --> C_0002222099135672593686 : -executor_
C_0002222099135672593686 <|-- C_0001932117148827315960
C_0001347291497865252100 <|-- C_0002292058893312396804
C_0002292058893312396804 <|-- C_0001740134810840364719
C_0002222099135672593686 <|-- C_0001218209673148292552
C_0002222099135672593686 <|-- C_0000155178671636628489
C_0000481841646641149488 <|-- C_0001970350906198958245
C_0002145523347961259416 <|-- C_0001970350906198958245
C_0000155178671636628489 <|-- C_0001970350906198958245
C_0001218209673148292552 <|-- C_0001970350906198958245
C_0000260170505900481834 ..> C_0001970350906198958245
C_0002292058893312396804 <|-- C_0000260170505900481834
C_0002145523347961259416 <|-- C_0000260170505900481834
C_0000481841646641149488 <|-- C_0002235860541734359952
C_0001218209673148292552 <|-- C_0002235860541734359952
C_0000155178671636628489 <|-- C_0002235860541734359952
C_0001956570166673420631 ..> C_0002222099135672593686
C_0001956570166673420631 o-- C_0002222099135672593686 : -ownedExecutor_
C_0001347291497865252100 <|-- C_0001956570166673420631
C_0000155178671636628489 <|-- C_0000587962468506435170
C_0002222099135672593686 <|-- C_0001206661724003471988
C_0002222099135672593686 <|-- C_0000346702971661703291
C_0001612067402701865715 --> C_0001612067402701865715 : -cache
C_0002222099135672593686 <|-- C_0001612067402701865715
C_0001123262130157209492 ..> C_0002222099135672593686
C_0001218209673148292552 <|-- C_0001123262130157209492
C_0001402712402381953994 ..> C_0002222099135672593686
C_0000155178671636628489 <|-- C_0001402712402381953994
C_0002222099135672593686 <|-- C_0000470362430235503729
C_0002222099135672593686 <|-- C_0000560396763155385774
C_0000560396763155385774 <|-- C_0000586027154664049253
C_0002292058893312396804 <|-- C_0000586027154664049253

'Generated with clang-uml, version 0.3.6-29-g238bfb0
'LLVM version Ubuntu clang version 15.0.6
@enduml
