<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3921px" preserveAspectRatio="none" style="width:4056px;height:3921px;" version="1.1" viewBox="0 0 4056 3921" width="4056px" zoomAndPan="magnify"><defs><filter height="300%" id="f1pc2vtwu1560r" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[cf783620a584c64bd1efc066c2bded96]
class C_0001539432614095357204--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L161" target="_top" title="Throwing exceptions can be a convenient way to handle errors. Storing exceptions in an `exception_ptr` makes it easy to handle exceptions in a different thread or at a later time. `exception_ptr` can also be used in a very generic result/exception wrapp..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L161" xlink:show="new" xlink:title="Throwing exceptions can be a convenient way to handle errors. Storing exceptions in an `exception_ptr` makes it easy to handle exceptions in a different thread or at a later time. `exception_ptr` can also be used in a very generic result/exception wrapp..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="688.2344" id="C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.5;" width="738" x="2347" y="3222"/><ellipse cx="2652.75" cy="3238" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2655.7188,3243.6406 Q2655.1406,3243.9375 2654.5,3244.0781 Q2653.8594,3244.2344 2653.1563,3244.2344 Q2650.6563,3244.2344 2649.3281,3242.5938 Q2648.0156,3240.9375 2648.0156,3237.8125 Q2648.0156,3234.6875 2649.3281,3233.0313 Q2650.6563,3231.375 2653.1563,3231.375 Q2653.8594,3231.375 2654.5,3231.5313 Q2655.1563,3231.6875 2655.7188,3231.9844 L2655.7188,3234.7031 Q2655.0938,3234.125 2654.5,3233.8594 Q2653.9063,3233.5781 2653.2813,3233.5781 Q2651.9375,3233.5781 2651.25,3234.6563 Q2650.5625,3235.7188 2650.5625,3237.8125 Q2650.5625,3239.9063 2651.25,3240.9844 Q2651.9375,3242.0469 2653.2813,3242.0469 Q2653.9063,3242.0469 2654.5,3241.7813 Q2655.0938,3241.5 2655.7188,3240.9219 L2655.7188,3243.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="118" x="2673.25" y="3242.1543">exception_wrapper</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2348" x2="3084" y1="3254" y2="3254"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L342" target="_top" title="vptr_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L342" xlink:show="new" xlink:title="vptr_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2353" y="3260"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3262"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L342" target="_top" title="vptr_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L342" xlink:show="new" xlink:title="vptr_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2367" y="3268.2104">vptr_ : const exception_wrapper::VTable *</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L205" target="_top" title="uninit_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L205" xlink:show="new" xlink:title="uninit_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2353" y="3272.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3274.8047"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L205" target="_top" title="uninit_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L205" xlink:show="new" xlink:title="uninit_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="237" x="2367" y="3281.0151">uninit_ : const exception_wrapper::VTable</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="2348" x2="3084" y1="3287.6094" y2="3287.6094"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3295.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="261" x="2367" y="3301.8198">onNoExceptionError(const char * name) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3308.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="365" x="2367" y="3314.6245">uninit_type_(const exception_wrapper * ) : const std::type_info *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3321.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="415" x="2367" y="3327.4292">as_exception_or_null_(const std::exception &amp; ex) : const std::exception *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3334.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="462" x="2367" y="3340.2339">as_exception_or_null_(exception_wrapper::AnyException ) : const std::exception *</text><ellipse cx="2358" cy="3349.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="414" x="2367" y="3353.0386">from_exception_ptr(const std::exception_ptr &amp; eptr) : exception_wrapper</text><ellipse cx="2358" cy="3362.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="389" x="2367" y="3365.8433">from_exception_ptr(std::exception_ptr &amp;&amp; eptr) : exception_wrapper</text><ellipse cx="2358" cy="3375.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2367" y="3378.6479">exception_wrapper() : void</text><ellipse cx="2358" cy="3388.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="2367" y="3391.4526">exception_wrapper(exception_wrapper &amp;&amp; that) : void</text><ellipse cx="2358" cy="3401.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2367" y="3404.2573">exception_wrapper(const exception_wrapper &amp; that) : void</text><ellipse cx="2358" cy="3413.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="2367" y="3417.062">operator=(exception_wrapper &amp;&amp; that) : exception_wrapper &amp;</text><ellipse cx="2358" cy="3426.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="2367" y="3429.8667">operator=(const exception_wrapper &amp; that) : exception_wrapper &amp;</text><ellipse cx="2358" cy="3439.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2367" y="3442.6714">~exception_wrapper() : void</text><ellipse cx="2358" cy="3452.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="2367" y="3455.4761">exception_wrapper(std::exception_ptr ptr) : void</text><ellipse cx="2358" cy="3465.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2367" y="3468.2808">swap(exception_wrapper &amp; that) : void</text><ellipse cx="2358" cy="3477.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2367" y="3481.0854">operator bool() const : bool</text><ellipse cx="2358" cy="3490.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2367" y="3493.8901">operator!() const : bool</text><ellipse cx="2358" cy="3503.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2367" y="3506.6948">reset() : void</text><ellipse cx="2358" cy="3516.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="2367" y="3519.4995">has_exception_ptr() const : bool</text><ellipse cx="2358" cy="3529.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2367" y="3532.3042">get_exception() : std::exception *</text><ellipse cx="2358" cy="3541.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="2367" y="3545.1089">get_exception() const : const std::exception *</text><ellipse cx="2358" cy="3554.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2367" y="3557.9136">to_exception_ptr() : std::exception_ptr</text><ellipse cx="2358" cy="3567.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2367" y="3570.7183">to_exception_ptr() const : std::exception_ptr</text><ellipse cx="2358" cy="3580.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="174" x="2367" y="3583.5229">none() : const std::type_info &amp;</text><ellipse cx="2358" cy="3593.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="2367" y="3596.3276">unknown() : const std::type_info &amp;</text><ellipse cx="2358" cy="3605.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2367" y="3609.1323">type() const : const std::type_info &amp;</text><ellipse cx="2358" cy="3618.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2367" y="3621.937">what() const : fbstring</text><ellipse cx="2358" cy="3631.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2367" y="3634.7417">class_name() const : fbstring</text><ellipse cx="2358" cy="3644.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="2367" y="3647.5464">throw_exception() const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3654.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="114" x="2367" y="3660.3511">noop_(Args... ) : Ret</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3666.9453"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="2367" y="3673.1558">exception_wrapper(exception_wrapper::ThrownTag , in_place_type_tag&lt;Ex&gt; , As &amp;&amp;... as) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3679.75"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="554" x="2367" y="3685.9604">exception_wrapper(exception_wrapper::OnHeapTag , in_place_type_tag&lt;Ex&gt; , As &amp;&amp;... as) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3692.5547"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="541" x="2367" y="3698.7651">exception_wrapper(exception_wrapper::InSituTag , in_place_type_tag&lt;Ex&gt; , As &amp;&amp;... as) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3705.3594"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="360" x="2367" y="3711.5698">handle_(std::false_type , This &amp; this_, CatchFns &amp;... fns) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3718.1641"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="355" x="2367" y="3724.3745">handle_(std::true_type , This &amp; this_, CatchFns &amp;... fns) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3730.9688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="251" x="2367" y="3737.1792">with_exception_(This &amp; this_, Fn fn_) : _Bool</text><ellipse cx="2358" cy="3746.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="2367" y="3749.9839">exception_wrapper(std::exception_ptr ptr, Ex &amp; ex) : void</text><ellipse cx="2358" cy="3759.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2367" y="3762.7886">exception_wrapper(Ex &amp;&amp; ex) : void</text><ellipse cx="2358" cy="3772.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="2367" y="3775.5933">exception_wrapper(in_place_t , Ex &amp;&amp; ex) : void</text><ellipse cx="2358" cy="3785.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="2367" y="3788.3979">exception_wrapper(in_place_type_tag&lt;Ex&gt; , As &amp;&amp;... as) : void</text><ellipse cx="2358" cy="3797.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2367" y="3801.2026">get_exception() : Ex *</text><ellipse cx="2358" cy="3810.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2367" y="3814.0073">get_exception() : const Ex *</text><ellipse cx="2358" cy="3823.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="2367" y="3826.812">is_compatible_with() : _Bool</text><ellipse cx="2358" cy="3836.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2367" y="3839.6167">throw_with_nested(Ex &amp;&amp; ex) : void</text><ellipse cx="2358" cy="3849.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2367" y="3852.4214">with_exception(Fn fn) : _Bool</text><ellipse cx="2358" cy="3862.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2367" y="3865.2261">with_exception(Fn fn) : _Bool</text><ellipse cx="2358" cy="3874.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2367" y="3878.0308">handle(CatchFns... fns) : void</text><ellipse cx="2358" cy="3887.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2367" y="3890.8354">handle(CatchFns... fns) : void</text><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L337" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L337" xlink:show="new" xlink:title="" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2353" y="3895.4297"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2355" y="3897.4297"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L337" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L337" xlink:show="new" xlink:title="" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="712" x="2367" y="3903.6401">: exception_wrapper::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/ExceptionWrapper.h:337:3)</text></a><!--MD5=[2d3a420fce14daecd921b0175e490cf5]
class C_0000135335628570802873--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L52" target="_top" title="Try" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L52" xlink:show="new" xlink:title="Try" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="611.4063" id="C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.5;" width="589" x="2671.5" y="2550"/><ellipse cx="2947.25" cy="2566" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2950.2188,2571.6406 Q2949.6406,2571.9375 2949,2572.0781 Q2948.3594,2572.2344 2947.6563,2572.2344 Q2945.1563,2572.2344 2943.8281,2570.5938 Q2942.5156,2568.9375 2942.5156,2565.8125 Q2942.5156,2562.6875 2943.8281,2561.0313 Q2945.1563,2559.375 2947.6563,2559.375 Q2948.3594,2559.375 2949,2559.5313 Q2949.6563,2559.6875 2950.2188,2559.9844 L2950.2188,2562.7031 Q2949.5938,2562.125 2949,2561.8594 Q2948.4063,2561.5781 2947.7813,2561.5781 Q2946.4375,2561.5781 2945.75,2562.6563 Q2945.0625,2563.7188 2945.0625,2565.8125 Q2945.0625,2567.9063 2945.75,2568.9844 Q2946.4375,2570.0469 2947.7813,2570.0469 Q2948.4063,2570.0469 2949,2569.7813 Q2949.5938,2569.5 2950.2188,2568.9219 L2950.2188,2571.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="18" x="2967.75" y="2570.1543">Try</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="3254.5" y="2547"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="3255.5" y="2559.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2672.5" x2="3259.5" y1="2582" y2="2582"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L356" target="_top" title="contains_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L356" xlink:show="new" xlink:title="contains_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2677.5" y="2588"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2679.5" y="2590"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L356" target="_top" title="contains_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L356" xlink:show="new" xlink:title="contains_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="2691.5" y="2596.2104">contains_ : Try::Contains</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="2672.5" x2="3259.5" y1="2602.8047" y2="2602.8047"/><ellipse cx="2682.5" cy="2613.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2691.5" y="2617.0151">Try&lt;T&gt;() : void</text><ellipse cx="2682.5" cy="2626.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2691.5" y="2629.8198">Try&lt;T&gt;(const T &amp; v) : void</text><ellipse cx="2682.5" cy="2639.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2691.5" y="2642.6245">Try&lt;T&gt;(T &amp;&amp; v) : void</text><ellipse cx="2682.5" cy="2652.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2691.5" y="2655.4292">Try&lt;T&gt;(exception_wrapper e) : void</text><ellipse cx="2682.5" cy="2665.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2691.5" y="2668.2339">Try&lt;T&gt;(Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="2682.5" cy="2677.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="2691.5" y="2681.0386">operator=(Try&lt;T&gt; &amp;&amp; t) : Try&lt;T&gt; &amp;</text><ellipse cx="2682.5" cy="2690.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2691.5" y="2693.8433">Try&lt;T&gt;(const Try&lt;T&gt; &amp; t) : void</text><ellipse cx="2682.5" cy="2703.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2691.5" y="2706.6479">operator=(const Try&lt;T&gt; &amp; t) : Try&lt;T&gt; &amp;</text><ellipse cx="2682.5" cy="2716.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2691.5" y="2719.4526">~Try&lt;T&gt;() : void</text><ellipse cx="2682.5" cy="2729.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2691.5" y="2732.2573">value() : T &amp;</text><ellipse cx="2682.5" cy="2741.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2691.5" y="2745.062">value() : T &amp;&amp;</text><ellipse cx="2682.5" cy="2754.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2691.5" y="2757.8667">value() const : const T &amp;</text><ellipse cx="2682.5" cy="2767.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="2691.5" y="2770.6714">value() const : const T &amp;&amp;</text><ellipse cx="2682.5" cy="2780.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2691.5" y="2783.4761">throwIfFailed() const : void</text><ellipse cx="2682.5" cy="2793.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2691.5" y="2796.2808">operator*() const : const T &amp;</text><ellipse cx="2682.5" cy="2805.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2691.5" y="2809.0854">operator*() : T &amp;</text><ellipse cx="2682.5" cy="2818.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2691.5" y="2821.8901">operator*() : T &amp;&amp;</text><ellipse cx="2682.5" cy="2831.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2691.5" y="2834.6948">operator*() const : const T &amp;&amp;</text><ellipse cx="2682.5" cy="2844.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="2691.5" y="2847.4995">operator-&gt;() const : const T *</text><ellipse cx="2682.5" cy="2857.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2691.5" y="2860.3042">operator-&gt;() : T *</text><ellipse cx="2682.5" cy="2869.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2691.5" y="2873.1089">hasValue() const : bool</text><ellipse cx="2682.5" cy="2882.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2691.5" y="2885.9136">hasException() const : bool</text><ellipse cx="2682.5" cy="2895.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2691.5" y="2898.7183">exception() : exception_wrapper &amp;</text><ellipse cx="2682.5" cy="2908.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2691.5" y="2911.5229">exception() : exception_wrapper &amp;&amp;</text><ellipse cx="2682.5" cy="2921.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2691.5" y="2924.3276">exception() const : const exception_wrapper &amp;</text><ellipse cx="2682.5" cy="2933.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="2691.5" y="2937.1323">exception() const : const exception_wrapper &amp;&amp;</text><ellipse cx="2682.5" cy="2946.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2691.5" y="2949.937">tryGetExceptionObject() : std::exception *</text><ellipse cx="2682.5" cy="2959.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="2691.5" y="2962.7417">tryGetExceptionObject() const : const std::exception *</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2679.5" y="2969.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2691.5" y="2975.5464">destroy() : void</text><ellipse cx="2682.5" cy="2985.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2691.5" y="2988.3511">Try&lt;T&gt;(in_place_t , Args &amp;&amp;... args) : void</text><ellipse cx="2682.5" cy="2997.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="563" x="2691.5" y="3001.1558">Try&lt;T&gt;(typename std::enable_if&lt;std::is_same&lt;Unit,T2&gt;::value,const Try&lt;void&gt; &amp;&gt;::type t) : void</text><ellipse cx="2682.5" cy="3010.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="2691.5" y="3013.9604">emplace(Args &amp;&amp;... args) : T &amp;</text><ellipse cx="2682.5" cy="3023.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="2691.5" y="3026.7651">emplaceException(Args &amp;&amp;... args) : class exception_wrapper &amp;</text><ellipse cx="2682.5" cy="3036.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2691.5" y="3039.5698">hasException() : _Bool</text><ellipse cx="2682.5" cy="3049.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2691.5" y="3052.3745">tryGetExceptionObject() : E *</text><ellipse cx="2682.5" cy="3061.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2691.5" y="3065.1792">tryGetExceptionObject() : const E *</text><ellipse cx="2682.5" cy="3074.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2691.5" y="3077.9839">withException(F func) : _Bool</text><ellipse cx="2682.5" cy="3087.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2691.5" y="3090.7886">withException(F func) : _Bool</text><ellipse cx="2682.5" cy="3100.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2691.5" y="3103.5933">withException(F func) : _Bool</text><ellipse cx="2682.5" cy="3113.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2691.5" y="3116.3979">withException(F func) : _Bool</text><ellipse cx="2682.5" cy="3125.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="2691.5" y="3129.2026">get() : typename std::enable_if&lt;isTry, R&gt;::type</text><ellipse cx="2682.5" cy="3138.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="2691.5" y="3142.0073">get() : typename std::enable_if&lt;!isTry, R&gt;::type</text><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L357" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L357" xlink:show="new" xlink:title="" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2677.5" y="3146.6016"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2679.5" y="3148.6016"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L357" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L357" xlink:show="new" xlink:title="" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="540" x="2691.5" y="3154.812">: Try::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/Try.h:357:3)</text></a><!--MD5=[ac8826442556fa4970d92afb9c42c86a]
class C_0000487431047047122182--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/detail/Core.h#L504" target="_top" title="Core" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/detail/Core.h#L504" xlink:show="new" xlink:title="Core" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="214.4609" id="C_0000487431047047122182" style="stroke: #A80036; stroke-width: 1.5;" width="724" x="1699" y="1884"/><ellipse cx="1988.75" cy="1900" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1991.7188,1905.6406 Q1991.1406,1905.9375 1990.5,1906.0781 Q1989.8594,1906.2344 1989.1563,1906.2344 Q1986.6563,1906.2344 1985.3281,1904.5938 Q1984.0156,1902.9375 1984.0156,1899.8125 Q1984.0156,1896.6875 1985.3281,1895.0313 Q1986.6563,1893.375 1989.1563,1893.375 Q1989.8594,1893.375 1990.5,1893.5313 Q1991.1563,1893.6875 1991.7188,1893.9844 L1991.7188,1896.7031 Q1991.0938,1896.125 1990.5,1895.8594 Q1989.9063,1895.5781 1989.2813,1895.5781 Q1987.9375,1895.5781 1987.25,1896.6563 Q1986.5625,1897.7188 1986.5625,1899.8125 Q1986.5625,1901.9063 1987.25,1902.9844 Q1987.9375,1904.0469 1989.2813,1904.0469 Q1989.9063,1904.0469 1990.5,1903.7813 Q1991.0938,1903.5 1991.7188,1902.9219 L1991.7188,1905.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="125" x="2009.25" y="1904.1543">futures::detail::Core</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="2417" y="1881"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="2418" y="1893.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1700" x2="2422" y1="1916" y2="1916"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1700" x2="2422" y1="1924" y2="1924"/><ellipse cx="1710" cy="1935" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="113" x="1719" y="1938.2104">make() : Core&lt;T&gt; *</text><ellipse cx="1710" cy="1947.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="188" x="1719" y="1951.0151">make(Try&lt;T&gt; &amp;&amp; t) : Core&lt;T&gt; *</text><ellipse cx="1710" cy="1960.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1719" y="1963.8198">getTry() : Try&lt;T&gt; &amp;</text><ellipse cx="1710" cy="1973.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="1719" y="1976.6245">getTry() const : const Try&lt;T&gt; &amp;</text><ellipse cx="1710" cy="1986.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="1719" y="1989.4292">setResult(Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="1710" cy="1999.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="1719" y="2002.2339">setResult(Executor::KeepAlive&lt;&gt; &amp;&amp; completingKA, Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="1710" cy="2011.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1719" y="2015.0386">setProxy(Core&lt;T&gt; * proxy) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1707" y="2021.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1719" y="2027.8433">Core&lt;T&gt;() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1707" y="2034.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1719" y="2040.6479">Core&lt;T&gt;(Try&lt;T&gt; &amp;&amp; t) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1707" y="2047.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1719" y="2053.4526">~Core&lt;T&gt;() : void</text><ellipse cx="1710" cy="2063.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="273" x="1719" y="2066.2573">make(in_place_t , Args &amp;&amp;... args) : Core&lt;T&gt; *</text><ellipse cx="1710" cy="2075.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="698" x="1719" y="2079.062">setCallback(F &amp;&amp; func, std::shared_ptr&lt;RequestContext&gt; &amp;&amp; context, futures::detail::InlineContinuation allowInline) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1707" y="2085.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="1719" y="2091.8667">Core&lt;T&gt;(in_place_t , Args &amp;&amp;... args) : void</text></a><!--MD5=[68e801f468b854e77c0329757b9e44c8]
class C_0001636747636195825603--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L68" target="_top" title="EmptyConstruct" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L68" xlink:show="new" xlink:title="EmptyConstruct" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="48" id="C_0001636747636195825603" style="stroke: #A80036; stroke-width: 1.5;" width="227" x="1230.5" y="2831.5"/><ellipse cx="1245.5" cy="2847.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1248.4688,2853.1406 Q1247.8906,2853.4375 1247.25,2853.5781 Q1246.6094,2853.7344 1245.9063,2853.7344 Q1243.4063,2853.7344 1242.0781,2852.0938 Q1240.7656,2850.4375 1240.7656,2847.3125 Q1240.7656,2844.1875 1242.0781,2842.5313 Q1243.4063,2840.875 1245.9063,2840.875 Q1246.6094,2840.875 1247.25,2841.0313 Q1247.9063,2841.1875 1248.4688,2841.4844 L1248.4688,2844.2031 Q1247.8438,2843.625 1247.25,2843.3594 Q1246.6563,2843.0781 1246.0313,2843.0781 Q1244.6875,2843.0781 1244,2844.1563 Q1243.3125,2845.2188 1243.3125,2847.3125 Q1243.3125,2849.4063 1244,2850.4844 Q1244.6875,2851.5469 1246.0313,2851.5469 Q1246.6563,2851.5469 1247.25,2851.2813 Q1247.8438,2851 1248.4688,2850.4219 L1248.4688,2853.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="195" x="1259.5" y="2851.6543">futures::detail::EmptyConstruct</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1231.5" x2="1456.5" y1="2863.5" y2="2863.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1231.5" x2="1456.5" y1="2871.5" y2="2871.5"/></a><!--MD5=[ca7e8c8eb79983d0e5cd66bab26ca64f]
class C_0000725183341054102552--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L116" target="_top" title="FutureBase" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L116" xlink:show="new" xlink:title="FutureBase" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="611.4063" id="C_0000725183341054102552" style="stroke: #A80036; stroke-width: 1.5;" width="880" x="929" y="155"/><ellipse cx="1275.25" cy="171" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1278.2188,176.6406 Q1277.6406,176.9375 1277,177.0781 Q1276.3594,177.2344 1275.6563,177.2344 Q1273.1563,177.2344 1271.8281,175.5938 Q1270.5156,173.9375 1270.5156,170.8125 Q1270.5156,167.6875 1271.8281,166.0313 Q1273.1563,164.375 1275.6563,164.375 Q1276.3594,164.375 1277,164.5313 Q1277.6563,164.6875 1278.2188,164.9844 L1278.2188,167.7031 Q1277.5938,167.125 1277,166.8594 Q1276.4063,166.5781 1275.7813,166.5781 Q1274.4375,166.5781 1273.75,167.6563 Q1273.0625,168.7188 1273.0625,170.8125 Q1273.0625,172.9063 1273.75,173.9844 Q1274.4375,175.0469 1275.7813,175.0469 Q1276.4063,175.0469 1277,174.7813 Q1277.5938,174.5 1278.2188,173.9219 L1278.2188,176.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="168" x="1295.75" y="175.1543">futures::detail::FutureBase</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="1803" y="152"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="1804" y="164.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="930" x2="1808" y1="187" y2="187"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L383" target="_top" title="core_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L383" xlink:show="new" xlink:title="core_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="935" y="193"/><polygon fill="none" points="940,193,944,197,940,201,936,197" style="stroke: #B38D22; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L383" target="_top" title="core_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L383" xlink:show="new" xlink:title="core_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="949" y="201.2104">core_ : futures::detail::FutureBase::Core *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="930" x2="1808" y1="207.8047" y2="207.8047"/><ellipse cx="940" cy="218.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="949" y="222.0151">FutureBase&lt;T&gt;(const FutureBase&lt;T&gt; &amp; ) : void</text><ellipse cx="940" cy="231.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="949" y="234.8198">FutureBase&lt;T&gt;(SemiFuture&lt;T&gt; &amp;&amp; ) : void</text><ellipse cx="940" cy="244.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="949" y="247.6245">FutureBase&lt;T&gt;(Future&lt;T&gt; &amp;&amp; ) : void</text><ellipse cx="940" cy="257.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="949" y="260.4292">FutureBase&lt;T&gt;(const Future&lt;T&gt; &amp; ) : void</text><ellipse cx="940" cy="270.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="949" y="273.2339">FutureBase&lt;T&gt;(const SemiFuture&lt;T&gt; &amp; ) : void</text><ellipse cx="940" cy="282.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="949" y="286.0386">~FutureBase&lt;T&gt;() : void</text><ellipse cx="940" cy="295.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="949" y="298.8433">valid() const : bool</text><ellipse cx="940" cy="308.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="949" y="311.6479">value() : T &amp;</text><ellipse cx="940" cy="321.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="949" y="324.4526">value() const : const T &amp;</text><ellipse cx="940" cy="334.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="949" y="337.2573">value() : T &amp;&amp;</text><ellipse cx="940" cy="346.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="949" y="350.062">value() const : const T &amp;&amp;</text><ellipse cx="940" cy="359.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="949" y="362.8667">result() : Try&lt;T&gt; &amp;</text><ellipse cx="940" cy="372.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="949" y="375.6714">result() const : const Try&lt;T&gt; &amp;</text><ellipse cx="940" cy="385.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="949" y="388.4761">result() : Try&lt;T&gt; &amp;&amp;</text><ellipse cx="940" cy="398.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="949" y="401.2808">result() const : const Try&lt;T&gt; &amp;&amp;</text><ellipse cx="940" cy="410.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="949" y="414.0854">isReady() const : bool</text><ellipse cx="940" cy="423.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="949" y="426.8901">hasValue() const : bool</text><ellipse cx="940" cy="436.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="949" y="439.6948">hasException() const : bool</text><ellipse cx="940" cy="449.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="949" y="452.4995">poll() : Optional&lt;Try&lt;T&gt;&gt;</text><ellipse cx="940" cy="462.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="949" y="465.3042">raise(exception_wrapper interrupt) : void</text><ellipse cx="940" cy="474.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="949" y="478.1089">cancel() : void</text><polygon fill="#FFFF44" points="940,482.7031,944,486.7031,940,490.7031,936,486.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="949" y="490.9136">getCore() : futures::detail::FutureBase::Core &amp;</text><polygon fill="#FFFF44" points="940,495.5078,944,499.5078,940,503.5078,936,499.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="949" y="503.7183">getCore() const : const futures::detail::FutureBase::Core &amp;</text><polygon fill="#FFFF44" points="940,508.3125,944,512.3125,940,516.3125,936,512.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="949" y="516.5229">getCoreTryChecked() : Try&lt;T&gt; &amp;</text><polygon fill="#FFFF44" points="940,521.1172,944,525.1172,940,529.1172,936,525.1172" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="949" y="529.3276">getCoreTryChecked() const : const Try&lt;T&gt; &amp;</text><polygon fill="#FFFF44" points="940,533.9219,944,537.9219,940,541.9219,936,537.9219" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="949" y="542.1323">FutureBase&lt;T&gt;(futures::detail::FutureBase::Core * obj) : void</text><polygon fill="#FFFF44" points="940,546.7266,944,550.7266,940,554.7266,936,550.7266" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="949" y="554.937">FutureBase&lt;T&gt;(futures::detail::EmptyConstruct ) : void</text><polygon fill="#FFFF44" points="940,559.5313,944,563.5313,940,567.5313,936,563.5313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="949" y="567.7417">detach() : void</text><polygon fill="#FFFF44" points="940,572.3359,944,576.3359,940,580.3359,936,576.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="949" y="580.5464">throwIfInvalid() const : void</text><polygon fill="#FFFF44" points="940,585.1406,944,589.1406,940,593.1406,936,589.1406" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="949" y="593.3511">throwIfContinued() const : void</text><polygon fill="#FFFF44" points="940,597.9453,944,601.9453,940,605.9453,936,601.9453" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="949" y="606.1558">assign(FutureBase&lt;T&gt; &amp;&amp; other) : void</text><polygon fill="#FFFF44" points="940,610.75,944,614.75,940,618.75,936,614.75" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="949" y="618.9604">getExecutor() const : Executor *</text><polygon fill="#FFFF44" points="940,623.5547,944,627.5547,940,631.5547,936,627.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="949" y="631.7651">getDeferredExecutor() const : futures::detail::DeferredExecutor *</text><polygon fill="#FFFF44" points="940,636.3594,944,640.3594,940,644.3594,936,640.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="326" x="949" y="644.5698">setExecutor(futures::detail::KeepAliveOrDeferred x) : void</text><ellipse cx="940" cy="654.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="949" y="657.3745">FutureBase&lt;T&gt;(T2 &amp;&amp; val) : void</text><ellipse cx="940" cy="666.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="504" x="949" y="670.1792">FutureBase&lt;T&gt;(typename std::enable_if&lt;std::is_same&lt;Unit,T2&gt;::value&gt;::type * ) : void</text><ellipse cx="940" cy="679.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="949" y="682.9839">FutureBase&lt;T&gt;(in_place_t , Args &amp;&amp;... args) : void</text><ellipse cx="940" cy="692.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="532" x="949" y="695.7886">setCallback_(F &amp;&amp; func, futures::detail::InlineContinuation  = InlineContinuation::forbid) : void</text><ellipse cx="940" cy="705.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="949" y="708.5933">raise(E &amp;&amp; exception) : void</text><polygon fill="#FFFF44" points="940,713.1875,944,717.1875,940,721.1875,936,717.1875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="230" x="949" y="721.3979">getCoreImpl(Self &amp; self) : decltype(auto)</text><polygon fill="#FFFF44" points="940,725.9922,944,729.9922,940,733.9922,936,729.9922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="272" x="949" y="734.2026">getCoreTryChecked(Self &amp; self) : decltype(auto)</text><polygon fill="#FFFF44" points="940,738.7969,944,742.7969,940,746.7969,936,742.7969" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="854" x="949" y="747.0073">thenImplementation(F &amp;&amp; func, R , futures::detail::InlineContinuation ) : typename std::enable_if&lt;!R::ReturnsFuture::value, typename R::Return&gt;::type</text><polygon fill="#FFFF44" points="940,751.6016,944,755.6016,940,759.6016,936,755.6016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="851" x="949" y="759.812">thenImplementation(F &amp;&amp; func, R , futures::detail::InlineContinuation ) : typename std::enable_if&lt;R::ReturnsFuture::value, typename R::Return&gt;::type</text><!--MD5=[f7c120b3138309e71b33687555c3dfdd]
class C_0001797157475442677168--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L104" target="_top" title="CoreCallbackState" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L104" xlink:show="new" xlink:title="CoreCallbackState" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="201.6563" id="C_0001797157475442677168" style="stroke: #A80036; stroke-width: 1.5;" width="820" x="2040" y="359.5"/><ellipse cx="2329.25" cy="375.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2332.2188,381.1406 Q2331.6406,381.4375 2331,381.5781 Q2330.3594,381.7344 2329.6563,381.7344 Q2327.1563,381.7344 2325.8281,380.0938 Q2324.5156,378.4375 2324.5156,375.3125 Q2324.5156,372.1875 2325.8281,370.5313 Q2327.1563,368.875 2329.6563,368.875 Q2330.3594,368.875 2331,369.0313 Q2331.6563,369.1875 2332.2188,369.4844 L2332.2188,372.2031 Q2331.5938,371.625 2331,371.3594 Q2330.4063,371.0781 2329.7813,371.0781 Q2328.4375,371.0781 2327.75,372.1563 Q2327.0625,373.2188 2327.0625,375.3125 Q2327.0625,377.4063 2327.75,378.4844 Q2328.4375,379.5469 2329.7813,379.5469 Q2330.4063,379.5469 2331,379.2813 Q2331.5938,379 2332.2188,378.4219 L2332.2188,381.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="211" x="2349.75" y="379.6543">futures::detail::CoreCallbackState</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="20" x="2843" y="356.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="18" x="2844" y="368.6387">T,F</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2041" x2="2859" y1="391.5" y2="391.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L162" target="_top" title="promise_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L162" xlink:show="new" xlink:title="promise_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2046" y="397.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2048" y="399.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L162" target="_top" title="promise_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L162" xlink:show="new" xlink:title="promise_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2060" y="405.7104">promise_ : Promise&lt;T&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="2041" x2="2859" y1="412.3047" y2="412.3047"/><ellipse cx="2051" cy="423.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="2060" y="426.5151">CoreCallbackState&lt;T, F&gt;(Promise&lt;T&gt; &amp;&amp; promise, F &amp;&amp; func) : void</text><ellipse cx="2051" cy="436.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="2060" y="439.3198">CoreCallbackState&lt;T, F&gt;(CoreCallbackState&lt;T,F&gt; &amp;&amp; that) : void</text><ellipse cx="2051" cy="448.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="2060" y="452.1245">operator=(CoreCallbackState&lt;T,F&gt; &amp;&amp; ) : CoreCallbackState&lt;T,F&gt; &amp;</text><ellipse cx="2051" cy="461.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2060" y="464.9292">~CoreCallbackState&lt;T, F&gt;() : void</text><ellipse cx="2051" cy="474.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="2060" y="477.7339">setTry(Executor::KeepAlive&lt;&gt; &amp;&amp; keepAlive, Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="2051" cy="487.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="484" x="2060" y="490.5386">setException(Executor::KeepAlive&lt;&gt; &amp;&amp; keepAlive, exception_wrapper &amp;&amp; ew) : void</text><ellipse cx="2051" cy="500.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2060" y="503.3433">stealPromise() : Promise&lt;T&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2048" y="509.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2060" y="516.1479">before_barrier() const : bool</text><ellipse cx="2051" cy="525.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2060" y="528.9526">invoke(Args &amp;&amp;... args) : auto</text><ellipse cx="2051" cy="538.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2060" y="541.7573">tryInvoke(Args &amp;&amp;... args) : auto</text><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L159" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L159" xlink:show="new" xlink:title="" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2046" y="546.3516"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2048" y="548.3516"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L159" target="_top" title="" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L159" xlink:show="new" xlink:title="" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="794" x="2060" y="554.562">: futures::detail::CoreCallbackState::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/futures/Future-inl.h:159:3)</text></a><!--MD5=[deaaab4a33ea538684a0da45c7befd05]
class C_0002242828088217415598--><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="48" id="C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.5;" width="154" x="1628" y="2831.5"/><ellipse cx="1643" cy="2847.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1645.9688,2853.1406 Q1645.3906,2853.4375 1644.75,2853.5781 Q1644.1094,2853.7344 1643.4063,2853.7344 Q1640.9063,2853.7344 1639.5781,2852.0938 Q1638.2656,2850.4375 1638.2656,2847.3125 Q1638.2656,2844.1875 1639.5781,2842.5313 Q1640.9063,2840.875 1643.4063,2840.875 Q1644.1094,2840.875 1644.75,2841.0313 Q1645.4063,2841.1875 1645.9688,2841.4844 L1645.9688,2844.2031 Q1645.3438,2843.625 1644.75,2843.3594 Q1644.1563,2843.0781 1643.5313,2843.0781 Q1642.1875,2843.0781 1641.5,2844.1563 Q1640.8125,2845.2188 1640.8125,2847.3125 Q1640.8125,2849.4063 1641.5,2850.4844 Q1642.1875,2851.5469 1643.5313,2851.5469 Q1644.1563,2851.5469 1644.75,2851.2813 Q1645.3438,2851 1645.9688,2850.4219 L1645.9688,2853.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="122" x="1657" y="2851.6543">Executor::KeepAlive</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1629" x2="1781" y1="2863.5" y2="2863.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1629" x2="1781" y1="2871.5" y2="2871.5"/><!--MD5=[5ce47a6e8371bf107ea8ee246178b48d]
class C_0001778078938283944881--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L147" target="_top" title="Promises and futures provide a potentially nonblocking mechanism   to execute a producer/consumer operation concurrently, with   threading/pools controlled via an executor. There are multiple potential   patterns for using promises and futures including..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L147" xlink:show="new" xlink:title="Promises and futures provide a potentially nonblocking mechanism   to execute a producer/consumer operation concurrently, with   threading/pools controlled via an executor. There are multiple potential   patterns for using promises and futures including..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="393.7266" id="C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.5;" width="610" x="2049" y="932.5"/><ellipse cx="2319.25" cy="948.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2322.2188,954.1406 Q2321.6406,954.4375 2321,954.5781 Q2320.3594,954.7344 2319.6563,954.7344 Q2317.1563,954.7344 2315.8281,953.0938 Q2314.5156,951.4375 2314.5156,948.3125 Q2314.5156,945.1875 2315.8281,943.5313 Q2317.1563,941.875 2319.6563,941.875 Q2320.3594,941.875 2321,942.0313 Q2321.6563,942.1875 2322.2188,942.4844 L2322.2188,945.2031 Q2321.5938,944.625 2321,944.3594 Q2320.4063,944.0781 2319.7813,944.0781 Q2318.4375,944.0781 2317.75,945.1563 Q2317.0625,946.2188 2317.0625,948.3125 Q2317.0625,950.4063 2317.75,951.4844 Q2318.4375,952.5469 2319.7813,952.5469 Q2320.4063,952.5469 2321,952.2813 Q2321.5938,952 2322.2188,951.4219 L2322.2188,954.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="2339.75" y="952.6543">Promise</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="2653" y="929.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="2654" y="941.6387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2050" x2="2658" y1="964.5" y2="964.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L418" target="_top" title="retrieved_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L418" xlink:show="new" xlink:title="retrieved_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2055" y="970.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="972.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L418" target="_top" title="retrieved_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L418" xlink:show="new" xlink:title="retrieved_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2069" y="978.7104">retrieved_ : bool</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L444" target="_top" title="core_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L444" xlink:show="new" xlink:title="core_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="2055" y="983.3047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="985.3047"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L444" target="_top" title="core_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L444" xlink:show="new" xlink:title="core_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2069" y="991.5151">core_ : Promise::Core *</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="2050" x2="2658" y1="998.1094" y2="998.1094"/><ellipse cx="2060" cy="1009.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="158" x="2069" y="1012.3198">makeEmpty() : Promise&lt;T&gt;</text><ellipse cx="2060" cy="1021.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2069" y="1025.1245">Promise&lt;T&gt;() : void</text><ellipse cx="2060" cy="1034.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="2069" y="1037.9292">~Promise&lt;T&gt;() : void</text><ellipse cx="2060" cy="1047.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="2069" y="1050.7339">Promise&lt;T&gt;(const Promise&lt;T&gt; &amp; ) : void</text><ellipse cx="2060" cy="1060.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="2069" y="1063.5386">operator=(const Promise&lt;T&gt; &amp; ) : Promise&lt;T&gt; &amp;</text><ellipse cx="2060" cy="1073.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="2069" y="1076.3433">Promise&lt;T&gt;(Promise&lt;T&gt; &amp;&amp; other) : void</text><ellipse cx="2060" cy="1085.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="2069" y="1089.1479">operator=(Promise&lt;T&gt; &amp;&amp; other) : Promise&lt;T&gt; &amp;</text><ellipse cx="2060" cy="1098.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="2069" y="1101.9526">getSemiFuture() : SemiFuture&lt;T&gt;</text><ellipse cx="2060" cy="1111.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2069" y="1114.7573">getFuture() : Future&lt;T&gt;</text><ellipse cx="2060" cy="1124.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="2069" y="1127.562">setException(exception_wrapper ew) : void</text><ellipse cx="2060" cy="1137.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2069" y="1140.3667">setTry(Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="2060" cy="1149.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2069" y="1153.1714">valid() const : bool</text><ellipse cx="2060" cy="1162.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2069" y="1165.9761">isFulfilled() const : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1172.5703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2069" y="1178.7808">getCore() : Promise::Core &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1185.375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="2069" y="1191.5854">getCore() const : const Promise::Core &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1198.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2069" y="1204.3901">setTry(Executor::KeepAlive&lt;&gt; &amp;&amp; ka, Try&lt;T&gt; &amp;&amp; t) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1210.9844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="2069" y="1217.1948">Promise&lt;T&gt;(futures::detail::EmptyConstruct ) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1223.7891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="2069" y="1229.9995">throwIfFulfilled() const : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1236.5938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2069" y="1242.8042">detach() : void</text><ellipse cx="2060" cy="1252.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="584" x="2069" y="1255.6089">setException(const E &amp; e) : typename std::enable_if&lt;std::is_base_of&lt;std::exception, E&gt;::value&gt;::type</text><ellipse cx="2060" cy="1265.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2069" y="1268.4136">setInterruptHandler(F &amp;&amp; fn) : void</text><ellipse cx="2060" cy="1278.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="2069" y="1281.2183">setValue() : typename std::enable_if&lt;std::is_same&lt;struct Unit, B&gt;::value, void&gt;::type</text><ellipse cx="2060" cy="1290.8125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2069" y="1294.0229">setValue(M &amp;&amp; value) : void</text><ellipse cx="2060" cy="1303.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="2069" y="1306.8276">setWith(F &amp;&amp; func) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2057" y="1313.4219"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="210" x="2069" y="1319.6323">getCoreImpl(CoreT * core) : CoreT &amp;</text><!--MD5=[e39d5cb1daa64537bcdef5f48ceb7e5e]
class C_0000481841646641149488--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" target="_top" title="DrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40" xlink:show="new" xlink:title="DrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="73.6094" id="C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.5;" width="229" x="533.5" y="2818.5"/><ellipse cx="590.75" cy="2834.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M590.8594,2829.8438 L589.7031,2834.9219 L592.0313,2834.9219 L590.8594,2829.8438 Z M589.375,2827.6094 L592.3594,2827.6094 L595.7188,2840 L593.2656,2840 L592.5,2836.9375 L589.2188,2836.9375 L588.4688,2840 L586.0313,2840 L589.375,2827.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="611.25" y="2838.6543">DrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="534.5" x2="761.5" y1="2850.5" y2="2850.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="534.5" x2="761.5" y1="2858.5" y2="2858.5"/><ellipse cx="544.5" cy="2869.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="553.5" y="2872.7104">~DrivableExecutor() = default : void</text><ellipse cx="544.5" cy="2882.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="97" x="553.5" y="2885.5151">drive() = 0 : void</text></a><!--MD5=[533c44690536949bf73673dd85860041]
class C_0000769434624932181431--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" target="_top" title="TimedDrivableExecutor" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30" xlink:show="new" xlink:title="TimedDrivableExecutor" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="240.0703" id="C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.5;" width="489" x="487.5" y="3446"/><ellipse cx="656.75" cy="3462" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M659.7188,3467.6406 Q659.1406,3467.9375 658.5,3468.0781 Q657.8594,3468.2344 657.1563,3468.2344 Q654.6563,3468.2344 653.3281,3466.5938 Q652.0156,3464.9375 652.0156,3461.8125 Q652.0156,3458.6875 653.3281,3457.0313 Q654.6563,3455.375 657.1563,3455.375 Q657.8594,3455.375 658.5,3455.5313 Q659.1563,3455.6875 659.7188,3455.9844 L659.7188,3458.7031 Q659.0938,3458.125 658.5,3457.8594 Q657.9063,3457.5781 657.2813,3457.5781 Q655.9375,3457.5781 655.25,3458.6563 Q654.5625,3459.7188 654.5625,3461.8125 Q654.5625,3463.9063 655.25,3464.9844 Q655.9375,3466.0469 657.2813,3466.0469 Q657.9063,3466.0469 658.5,3465.7813 Q659.0938,3465.5 659.7188,3464.9219 L659.7188,3467.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="142" x="677.25" y="3466.1543">TimedDrivableExecutor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="488.5" x2="975.5" y1="3478" y2="3478"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L99" target="_top" title="queue_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L99" xlink:show="new" xlink:title="queue_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="493.5" y="3484"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="495.5" y="3486"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L99" target="_top" title="queue_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L99" xlink:show="new" xlink:title="queue_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="507.5" y="3492.2104">queue_ : UMPSCQueue&lt;Func,true&gt;</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L100" target="_top" title="func_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L100" xlink:show="new" xlink:title="func_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="493.5" y="3496.8047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="495.5" y="3498.8047"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L100" target="_top" title="func_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L100" xlink:show="new" xlink:title="func_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="507.5" y="3505.0151">func_ : Func</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="488.5" x2="975.5" y1="3511.6094" y2="3511.6094"/><ellipse cx="498.5" cy="3522.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="507.5" y="3525.8198">TimedDrivableExecutor() : void</text><ellipse cx="498.5" cy="3535.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="507.5" y="3538.6245">~TimedDrivableExecutor() : void</text><ellipse cx="498.5" cy="3548.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="507.5" y="3551.4292">drive() : void</text><ellipse cx="498.5" cy="3561.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="507.5" y="3564.2339">try_drive() : bool</text><ellipse cx="498.5" cy="3573.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="507.5" y="3577.0386">add(Func ) : void</text><ellipse cx="498.5" cy="3586.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="507.5" y="3589.8433">run() : size_t</text><ellipse cx="498.5" cy="3599.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="507.5" y="3602.6479">drain() : size_t</text><ellipse cx="498.5" cy="3612.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="507.5" y="3615.4526">wait() : void</text><ellipse cx="498.5" cy="3625.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="507.5" y="3628.2573">try_wait() : bool</text><ellipse cx="498.5" cy="3637.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="507.5" y="3641.062">try_drive_for(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="498.5" cy="3650.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="463" x="507.5" y="3653.8667">try_drive_until(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text><ellipse cx="498.5" cy="3663.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="507.5" y="3666.6714">try_wait_for(const std::chrono::duration&lt;Rep,Period&gt; &amp; timeout) : _Bool</text><ellipse cx="498.5" cy="3676.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="507.5" y="3679.4761">try_wait_until(const std::chrono::time_point&lt;Clock,Duration&gt; &amp; deadline) : _Bool</text><!--MD5=[61dc80a935b7ebb58aafe537ed868864]
class C_0000156632990802225029--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L487" target="_top" title="The interface (along with Future) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it should u..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L487" xlink:show="new" xlink:title="The interface (along with Future) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it should u..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="572.9922" id="C_0000156632990802225029" style="stroke: #A80036; stroke-width: 1.5;" width="675" x="555.5" y="843"/><ellipse cx="847.75" cy="859" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M850.7188,864.6406 Q850.1406,864.9375 849.5,865.0781 Q848.8594,865.2344 848.1563,865.2344 Q845.6563,865.2344 844.3281,863.5938 Q843.0156,861.9375 843.0156,858.8125 Q843.0156,855.6875 844.3281,854.0313 Q845.6563,852.375 848.1563,852.375 Q848.8594,852.375 849.5,852.5313 Q850.1563,852.6875 850.7188,852.9844 L850.7188,855.7031 Q850.0938,855.125 849.5,854.8594 Q848.9063,854.5781 848.2813,854.5781 Q846.9375,854.5781 846.25,855.6563 Q845.5625,856.7188 845.5625,858.8125 Q845.5625,860.9063 846.25,861.9844 Q846.9375,863.0469 848.2813,863.0469 Q848.9063,863.0469 849.5,862.7813 Q850.0938,862.5 850.7188,861.9219 L850.7188,864.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="868.25" y="863.1543">SemiFuture</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="1224.5" y="840"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="1225.5" y="852.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="556.5" x2="1229.5" y1="875" y2="875"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="556.5" x2="1229.5" y1="883" y2="883"/><ellipse cx="566.5" cy="894" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="575.5" y="897.2104">~SemiFuture&lt;T&gt;() : void</text><ellipse cx="566.5" cy="906.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="176" x="575.5" y="910.0151">makeEmpty() : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="919.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="575.5" y="922.8198">SemiFuture&lt;T&gt;(const SemiFuture&lt;T&gt; &amp; ) : void</text><ellipse cx="566.5" cy="932.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="575.5" y="935.6245">SemiFuture&lt;T&gt;(SemiFuture&lt;T&gt; &amp;&amp; ) : void</text><ellipse cx="566.5" cy="945.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="575.5" y="948.4292">SemiFuture&lt;T&gt;(Future&lt;T&gt; &amp;&amp; ) : void</text><ellipse cx="566.5" cy="958.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="575.5" y="961.2339">operator=(const SemiFuture&lt;T&gt; &amp; ) : SemiFuture&lt;T&gt; &amp;</text><ellipse cx="566.5" cy="970.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="575.5" y="974.0386">operator=(SemiFuture&lt;T&gt; &amp;&amp; ) : SemiFuture&lt;T&gt; &amp;</text><ellipse cx="566.5" cy="983.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="575.5" y="986.8433">operator=(Future&lt;T&gt; &amp;&amp; ) : SemiFuture&lt;T&gt; &amp;</text><ellipse cx="566.5" cy="996.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="575.5" y="999.6479">get() : T</text><ellipse cx="566.5" cy="1009.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="575.5" y="1012.4526">get(HighResDuration dur) : T</text><ellipse cx="566.5" cy="1022.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="575.5" y="1025.2573">getTry() : Try&lt;T&gt;</text><ellipse cx="566.5" cy="1034.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="575.5" y="1038.062">getTry(HighResDuration dur) : Try&lt;T&gt;</text><ellipse cx="566.5" cy="1047.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="575.5" y="1050.8667">wait() : SemiFuture&lt;T&gt; &amp;</text><ellipse cx="566.5" cy="1060.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="575.5" y="1063.6714">wait() : SemiFuture&lt;T&gt; &amp;&amp;</text><ellipse cx="566.5" cy="1073.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="575.5" y="1076.4761">wait(HighResDuration dur) : bool</text><ellipse cx="566.5" cy="1086.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="575.5" y="1089.2808">via(Executor::KeepAlive&lt;&gt; executor) : Future&lt;T&gt;</text><ellipse cx="566.5" cy="1098.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="575.5" y="1102.0854">via(Executor::KeepAlive&lt;&gt; executor, int8_t priority) : Future&lt;T&gt;</text><ellipse cx="566.5" cy="1111.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="575.5" y="1114.8901">unit() : SemiFuture&lt;Unit&gt;</text><ellipse cx="566.5" cy="1124.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="575.5" y="1127.6948">within(HighResDuration dur, Timekeeper * tk = nullptr) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1137.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="423" x="575.5" y="1140.4995">delayed(HighResDuration dur, Timekeeper * tk = nullptr) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1150.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="575.5" y="1153.3042">toUnsafeFuture() : Future&lt;T&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="563.5" y="1159.8984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="575.5" y="1166.1089">SemiFuture&lt;T&gt;(SemiFuture::Core * obj) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="563.5" y="1172.7031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="575.5" y="1178.9136">SemiFuture&lt;T&gt;(futures::detail::EmptyConstruct ) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="563.5" y="1185.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="575.5" y="1191.7183">stealDeferredExecutor() : futures::detail::DeferredWrapper</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="563.5" y="1198.3125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="575.5" y="1204.5229">wait(HighResDuration dur) : SemiFuture&lt;T&gt; &amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="563.5" y="1211.1172"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="324" x="575.5" y="1217.3276">releaseDeferredExecutor(SemiFuture::Core * core) : void</text><ellipse cx="566.5" cy="1226.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="575.5" y="1230.1323">SemiFuture&lt;T&gt;(T2 &amp;&amp; val) : void</text><ellipse cx="566.5" cy="1239.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="564" x="575.5" y="1242.937">SemiFuture&lt;T&gt;(typename std::enable_if&lt;std::is_same&lt;Unit,T2&gt;::value&gt;::type * p = nullptr) : void</text><ellipse cx="566.5" cy="1252.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="575.5" y="1255.7417">SemiFuture&lt;T&gt;(in_place_t , Args &amp;&amp;... args) : void</text><ellipse cx="566.5" cy="1265.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="541" x="575.5" y="1268.5464">defer(F &amp;&amp; func) : SemiFuture&lt;typename futures::detail::tryCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="566.5" cy="1278.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="621" x="575.5" y="1281.3511">deferExTry(F &amp;&amp; func) : SemiFuture&lt;typename futures::detail::tryExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="566.5" cy="1290.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="575.5" y="1294.1558">defer(R (&amp;)(Args...) func) : auto</text><ellipse cx="566.5" cy="1303.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="575.5" y="1306.9604">deferValue(F &amp;&amp; func) : SemiFuture&lt;typename futures::detail::valueCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="566.5" cy="1316.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="649" x="575.5" y="1319.7651">deferExValue(F &amp;&amp; func) : SemiFuture&lt;typename futures::detail::valueExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="566.5" cy="1329.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="575.5" y="1332.5698">deferValue(R (&amp;)(Args...) func) : auto</text><ellipse cx="566.5" cy="1342.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="366" x="575.5" y="1345.3745">deferError(tag_t&lt;ExceptionType&gt; , F &amp;&amp; func) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1354.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="575.5" y="1358.1792">deferError(tag_t&lt;ExceptionType&gt; tag, R (&amp;)(Args...) func) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1367.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="575.5" y="1370.9839">deferError(F &amp;&amp; func) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1380.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="575.5" y="1383.7886">deferError(F &amp;&amp; func) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1393.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="575.5" y="1396.5933">deferError(R (&amp;)(Args...) func) : SemiFuture&lt;T&gt;</text><ellipse cx="566.5" cy="1406.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="438" x="575.5" y="1409.3979">within(HighResDuration dur, E e, Timekeeper * tk = nullptr) : SemiFuture&lt;T&gt;</text></a><!--MD5=[de35e8fd69a90587d1caa838690c71e4]
class C_0000432533400863196245--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1003" target="_top" title="The interface (along with SemiFuture) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it shou..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1003" xlink:show="new" xlink:title="The interface (along with SemiFuture) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it shou..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="995.5469" id="C_0000432533400863196245" style="stroke: #A80036; stroke-width: 1.5;" width="972" x="243" y="1493"/><ellipse cx="698.75" cy="1509" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M701.7188,1514.6406 Q701.1406,1514.9375 700.5,1515.0781 Q699.8594,1515.2344 699.1563,1515.2344 Q696.6563,1515.2344 695.3281,1513.5938 Q694.0156,1511.9375 694.0156,1508.8125 Q694.0156,1505.6875 695.3281,1504.0313 Q696.6563,1502.375 699.1563,1502.375 Q699.8594,1502.375 700.5,1502.5313 Q701.1563,1502.6875 701.7188,1502.9844 L701.7188,1505.7031 Q701.0938,1505.125 700.5,1504.8594 Q699.9063,1504.5781 699.2813,1504.5781 Q697.9375,1504.5781 697.25,1505.6563 Q696.5625,1506.7188 696.5625,1508.8125 Q696.5625,1510.9063 697.25,1511.9844 Q697.9375,1513.0469 699.2813,1513.0469 Q699.9063,1513.0469 700.5,1512.7813 Q701.0938,1512.5 701.7188,1511.9219 L701.7188,1514.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="719.25" y="1513.1543">Future</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="1209" y="1490"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="1210" y="1502.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="244" x2="1214" y1="1525" y2="1525"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="244" x2="1214" y1="1533" y2="1533"/><ellipse cx="254" cy="1544" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="263" y="1547.2104">Future&lt;T&gt;(const Future&lt;T&gt; &amp; ) : void</text><ellipse cx="254" cy="1556.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="263" y="1560.0151">Future&lt;T&gt;(Future&lt;T&gt; &amp;&amp; ) : void</text><ellipse cx="254" cy="1569.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="147" x="263" y="1572.8198">makeEmpty() : Future&lt;T&gt;</text><ellipse cx="254" cy="1582.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="263" y="1585.6245">operator=(const Future&lt;T&gt; &amp; ) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1595.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="263" y="1598.4292">operator=(Future&lt;T&gt; &amp;&amp; ) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1608.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="263" y="1611.2339">getVia(DrivableExecutor * e) : T</text><ellipse cx="254" cy="1620.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="338" x="263" y="1624.0386">getVia(TimedDrivableExecutor * e, HighResDuration dur) : T</text><ellipse cx="254" cy="1633.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="263" y="1636.8433">getTryVia(DrivableExecutor * e) : Try&lt;T&gt;</text><ellipse cx="254" cy="1646.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="263" y="1649.6479">getTryVia(TimedDrivableExecutor * e, HighResDuration dur) : Try&lt;T&gt;</text><ellipse cx="254" cy="1659.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="263" y="1662.4526">via(Executor::KeepAlive&lt;&gt; executor) : Future&lt;T&gt;</text><ellipse cx="254" cy="1672.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="263" y="1675.2573">via(Executor::KeepAlive&lt;&gt; executor, int8_t priority) : Future&lt;T&gt;</text><ellipse cx="254" cy="1684.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="263" y="1688.062">via(Executor::KeepAlive&lt;&gt; executor) : Future&lt;T&gt;</text><ellipse cx="254" cy="1697.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="263" y="1700.8667">via(Executor::KeepAlive&lt;&gt; executor, int8_t priority) : Future&lt;T&gt;</text><ellipse cx="254" cy="1710.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="263" y="1713.6714">then() : Future&lt;Unit&gt;</text><ellipse cx="254" cy="1723.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="263" y="1726.4761">unit() : Future&lt;Unit&gt;</text><ellipse cx="254" cy="1736.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="383" x="263" y="1739.2808">within(HighResDuration dur, Timekeeper * tk = nullptr) : Future&lt;T&gt;</text><ellipse cx="254" cy="1748.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="263" y="1752.0854">delayed(HighResDuration , Timekeeper *  = nullptr) : Future&lt;T&gt;</text><ellipse cx="254" cy="1761.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="263" y="1764.8901">get() : T</text><ellipse cx="254" cy="1774.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="263" y="1777.6948">get(HighResDuration dur) : T</text><ellipse cx="254" cy="1787.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="263" y="1790.4995">getTry() : Try&lt;T&gt;</text><ellipse cx="254" cy="1800.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="263" y="1803.3042">getTry(HighResDuration dur) : Try&lt;T&gt;</text><ellipse cx="254" cy="1812.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="263" y="1816.1089">wait() : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1825.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="263" y="1828.9136">wait() : Future&lt;T&gt; &amp;&amp;</text><ellipse cx="254" cy="1838.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="263" y="1841.7183">wait(HighResDuration dur) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1851.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="263" y="1854.5229">wait(HighResDuration dur) : Future&lt;T&gt; &amp;&amp;</text><ellipse cx="254" cy="1864.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="263" y="1867.3276">waitVia(DrivableExecutor * e) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1876.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="263" y="1880.1323">waitVia(DrivableExecutor * e) : Future&lt;T&gt; &amp;&amp;</text><ellipse cx="254" cy="1889.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="411" x="263" y="1892.937">waitVia(TimedDrivableExecutor * e, HighResDuration dur) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="1902.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="263" y="1905.7417">waitVia(TimedDrivableExecutor * e, HighResDuration dur) : Future&lt;T&gt; &amp;&amp;</text><ellipse cx="254" cy="1915.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="263" y="1918.5464">willEqual(Future&lt;T&gt; &amp; ) : Future&lt;bool&gt;</text><ellipse cx="254" cy="1928.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="263" y="1931.3511">semi() : SemiFuture&lt;T&gt;</text><polygon fill="#FFFF44" points="254,1935.9453,258,1939.9453,254,1943.9453,250,1939.9453" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="263" y="1944.1558">Future&lt;T&gt;(Future::Core * obj) : void</text><polygon fill="#FFFF44" points="254,1948.75,258,1952.75,254,1956.75,250,1952.75" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="263" y="1956.9604">Future&lt;T&gt;(futures::detail::EmptyConstruct ) : void</text><ellipse cx="254" cy="1966.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="263" y="1969.7651">Future&lt;T&gt;(T2 &amp;&amp; val) : void</text><ellipse cx="254" cy="1979.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="263" y="1982.5698">Future&lt;T&gt;(typename std::enable_if&lt;std::is_same&lt;Unit,T2&gt;::value&gt;::type * p = nullptr) : void</text><ellipse cx="254" cy="1992.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="263" y="1995.3745">Future&lt;T&gt;(in_place_t , Args &amp;&amp;... args) : void</text><ellipse cx="254" cy="2004.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="263" y="2008.1792">Future&lt;T&gt;(Future&lt;T2&gt; &amp;&amp; other) : void</text><ellipse cx="254" cy="2017.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="263" y="2020.9839">Future&lt;T&gt;(Future&lt;T2&gt; &amp;&amp; other) : void</text><ellipse cx="254" cy="2030.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="263" y="2033.7886">operator=(Future&lt;T2&gt; &amp;&amp; other) : Future&lt;T&gt; &amp;</text><ellipse cx="254" cy="2043.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="591" x="263" y="2046.5933">unwrap() : typename std::enable_if&lt;isFuture&lt;F&gt;::value, Future&lt;typename isFuture&lt;T&gt;::Inner&gt; &gt;::type</text><ellipse cx="254" cy="2056.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="507" x="263" y="2059.3979">then(F &amp;&amp; func) : Future&lt;typename futures::detail::tryCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2068.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="263" y="2072.2026">thenInline(F &amp;&amp; func) : Future&lt;typename futures::detail::tryCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2081.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="510" x="263" y="2085.0073">then(R (Caller::*)(Args...) func, Caller * instance) : Future&lt;typename isFuture&lt;R&gt;::Inner&gt;</text><ellipse cx="254" cy="2094.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="263" y="2097.812">then(Executor::KeepAlive&lt;&gt; x, Arg &amp;&amp; arg) : auto</text><ellipse cx="254" cy="2107.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="525" x="263" y="2110.6167">thenTry(F &amp;&amp; func) : Future&lt;typename futures::detail::tryCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2120.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="555" x="263" y="2123.4214">thenTryInline(F &amp;&amp; func) : Future&lt;typename futures::detail::tryCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2133.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="587" x="263" y="2136.2261">thenExTry(F &amp;&amp; func) : Future&lt;typename futures::detail::tryExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2145.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="617" x="263" y="2149.0308">thenExTryInline(F &amp;&amp; func) : Future&lt;typename futures::detail::tryExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2158.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="263" y="2161.8354">thenTry(R (&amp;)(Args...) func) : auto</text><ellipse cx="254" cy="2171.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="263" y="2174.6401">thenTryInline(R (&amp;)(Args...) func) : auto</text><ellipse cx="254" cy="2184.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="263" y="2187.4448">thenValue(F &amp;&amp; func) : Future&lt;typename futures::detail::valueCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2197.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="583" x="263" y="2200.2495">thenValueInline(F &amp;&amp; func) : Future&lt;typename futures::detail::valueCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2209.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="615" x="263" y="2213.0542">thenExValue(F &amp;&amp; func) : Future&lt;typename futures::detail::valueExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2222.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="645" x="263" y="2225.8589">thenExValueInline(F &amp;&amp; func) : Future&lt;typename futures::detail::valueExecutorCallableResult&lt;T, F&gt;::value_type&gt;</text><ellipse cx="254" cy="2235.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="263" y="2238.6636">thenValue(R (&amp;)(Args...) func) : auto</text><ellipse cx="254" cy="2248.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="263" y="2251.4683">thenValueInline(R (&amp;)(Args...) func) : auto</text><ellipse cx="254" cy="2261.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="914" x="263" y="2264.2729">thenError(tag_t&lt;ExceptionType&gt; , F &amp;&amp; func) : typename std::enable_if&lt;isFutureOrSemiFuture&lt;invoke_result_t&lt;F, ExceptionType&gt; &gt;::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2273.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="917" x="263" y="2277.0776">thenError(tag_t&lt;ExceptionType&gt; , F &amp;&amp; func) : typename std::enable_if&lt;!isFutureOrSemiFuture&lt;invoke_result_t&lt;F, ExceptionType&gt; &gt;::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2286.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="263" y="2289.8823">thenError(tag_t&lt;ExceptionType&gt; tag, R (&amp;)(Args...) func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2299.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="263" y="2302.687">thenError(F &amp;&amp; func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2312.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="835" x="263" y="2315.4917">thenError(F &amp;&amp; func) : typename std::enable_if&lt;isFutureOrSemiFuture&lt;invoke_result_t&lt;F, class exception_wrapper&gt; &gt;::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2325.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="838" x="263" y="2328.2964">thenError(F &amp;&amp; func) : typename std::enable_if&lt;!isFutureOrSemiFuture&lt;invoke_result_t&lt;F, class exception_wrapper&gt; &gt;::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2337.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="263" y="2341.1011">thenError(R (&amp;)(Args...) func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2350.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="946" x="263" y="2353.9058">onError(F &amp;&amp; func) : typename std::enable_if&lt;!is_invocable_v&lt;F, class exception_wrapper&gt; &amp;&amp; !futures::detail::Extract&lt;F&gt;::ReturnsFuture::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2363.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="943" x="263" y="2366.7104">onError(F &amp;&amp; func) : typename std::enable_if&lt;!is_invocable_v&lt;F, class exception_wrapper&gt; &amp;&amp; futures::detail::Extract&lt;F&gt;::ReturnsFuture::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2376.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="940" x="263" y="2379.5151">onError(F &amp;&amp; func) : typename std::enable_if&lt;is_invocable_v&lt;F, class exception_wrapper&gt; &amp;&amp; futures::detail::Extract&lt;F&gt;::ReturnsFuture::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2389.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="943" x="263" y="2392.3198">onError(F &amp;&amp; func) : typename std::enable_if&lt;is_invocable_v&lt;F, class exception_wrapper&gt; &amp;&amp; !futures::detail::Extract&lt;F&gt;::ReturnsFuture::value, Future&lt;T&gt; &gt;::type</text><ellipse cx="254" cy="2401.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="263" y="2405.1245">onError(R (&amp;)(Args...) func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2414.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="263" y="2417.9292">onError(F &amp;&amp; func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2427.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="263" y="2430.7339">ensure(F &amp;&amp; func) : Future&lt;T&gt;</text><ellipse cx="254" cy="2440.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="263" y="2443.5386">onTimeout(HighResDuration , F &amp;&amp; func, Timekeeper *  = nullptr) : Future&lt;T&gt;</text><ellipse cx="254" cy="2453.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="263" y="2456.3433">within(HighResDuration dur, E exception, Timekeeper * tk = nullptr) : Future&lt;T&gt;</text><ellipse cx="254" cy="2465.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="263" y="2469.1479">filter(F &amp;&amp; predicate) : Future&lt;T&gt;</text><ellipse cx="254" cy="2478.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="263" y="2481.9526">reduce(I &amp;&amp; initial, F &amp;&amp; func) : Future&lt;I&gt;</text></a><!--MD5=[2e8dd4ef6718ce57e779d0c1ad13f1f9]
class C_0001579326926673473295--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1973" target="_top" title="A Timekeeper handles the details of keeping time and fulfilling delay promises. The returned Future&lt;Unit&gt; will either complete after the elapsed time, or in the event of some kind of exceptional error may hold an exception. These Futures respond to canc..." xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1973" xlink:show="new" xlink:title="A Timekeeper handles the details of keeping time and fulfilling delay promises. The returned Future&lt;Unit&gt; will either complete after the elapsed time, or in the event of some kind of exceptional error may hold an exception. These Futures respond to canc..." xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="112.0234" id="C_0001579326926673473295" style="stroke: #A80036; stroke-width: 1.5;" width="424" x="6" y="2799.5"/><ellipse cx="177.25" cy="2815.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M177.3594,2810.8438 L176.2031,2815.9219 L178.5313,2815.9219 L177.3594,2810.8438 Z M175.875,2808.6094 L178.8594,2808.6094 L182.2188,2821 L179.7656,2821 L179,2817.9375 L175.7188,2817.9375 L174.9688,2821 L172.5313,2821 L175.875,2808.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="73" x="197.75" y="2819.6543">Timekeeper</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="429" y1="2831.5" y2="2831.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="429" y1="2839.5" y2="2839.5"/><ellipse cx="17" cy="2850.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="26" y="2853.7104">~Timekeeper() = default : void</text><ellipse cx="17" cy="2863.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="292" x="26" y="2866.5151">after(HighResDuration dur) = 0 : SemiFuture&lt;Unit&gt;</text><ellipse cx="17" cy="2876.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="26" y="2879.3198">afterUnsafe(HighResDuration dur) : Future&lt;Unit&gt;</text><ellipse cx="17" cy="2888.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="26" y="2892.1245">at(std::chrono::time_point&lt;Clock&gt; when) : SemiFuture&lt;struct Unit&gt;</text><ellipse cx="17" cy="2901.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="26" y="2904.9292">atUnsafe(std::chrono::time_point&lt;Clock&gt; when) : Future&lt;struct Unit&gt;</text></a><!--MD5=[0decdc676e23e2a8528b53be76608132]
class C_0000742750151299031844--><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="48" id="C_0000742750151299031844" style="stroke: #A80036; stroke-width: 1.5;" width="234" x="3808" y="1105.5"/><ellipse cx="3823" cy="1121.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3825.9688,1127.1406 Q3825.3906,1127.4375 3824.75,1127.5781 Q3824.1094,1127.7344 3823.4063,1127.7344 Q3820.9063,1127.7344 3819.5781,1126.0938 Q3818.2656,1124.4375 3818.2656,1121.3125 Q3818.2656,1118.1875 3819.5781,1116.5313 Q3820.9063,1114.875 3823.4063,1114.875 Q3824.1094,1114.875 3824.75,1115.0313 Q3825.4063,1115.1875 3825.9688,1115.4844 L3825.9688,1118.2031 Q3825.3438,1117.625 3824.75,1117.3594 Q3824.1563,1117.0781 3823.5313,1117.0781 Q3822.1875,1117.0781 3821.5,1118.1563 Q3820.8125,1119.2188 3820.8125,1121.3125 Q3820.8125,1123.4063 3821.5,1124.4844 Q3822.1875,1125.5469 3823.5313,1125.5469 Q3824.1563,1125.5469 3824.75,1125.2813 Q3825.3438,1125 3825.9688,1124.4219 L3825.9688,1127.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="164" x="3837" y="1125.6543">SharedPromise::Defaulted</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="36" x="4009" y="1102.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="34" x="4010" y="1114.6387">size_t</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3809" x2="4041" y1="1137.5" y2="1137.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3809" x2="4041" y1="1145.5" y2="1145.5"/><!--MD5=[3a289efd884d86cb5d4845d3010b5abf]
class C_0000616814101618455991--><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="48" id="C_0000616814101618455991" style="stroke: #A80036; stroke-width: 1.5;" width="246" x="3456" y="1105.5"/><ellipse cx="3471" cy="1121.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3473.9688,1127.1406 Q3473.3906,1127.4375 3472.75,1127.5781 Q3472.1094,1127.7344 3471.4063,1127.7344 Q3468.9063,1127.7344 3467.5781,1126.0938 Q3466.2656,1124.4375 3466.2656,1121.3125 Q3466.2656,1118.1875 3467.5781,1116.5313 Q3468.9063,1114.875 3471.4063,1114.875 Q3472.1094,1114.875 3472.75,1115.0313 Q3473.4063,1115.1875 3473.9688,1115.4844 L3473.9688,1118.2031 Q3473.3438,1117.625 3472.75,1117.3594 Q3472.1563,1117.0781 3471.5313,1117.0781 Q3470.1875,1117.0781 3469.5,1118.1563 Q3468.8125,1119.2188 3468.8125,1121.3125 Q3468.8125,1123.4063 3469.5,1124.4844 Q3470.1875,1125.5469 3471.5313,1125.5469 Q3472.1563,1125.5469 3472.75,1125.2813 Q3473.3438,1125 3473.9688,1124.4219 L3473.9688,1127.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="164" x="3485" y="1125.6543">SharedPromise::Defaulted</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="48" x="3657" y="1102.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="46" x="3658" y="1114.6387">Try&lt;T&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3457" x2="3701" y1="1137.5" y2="1137.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3457" x2="3701" y1="1145.5" y2="1145.5"/><!--MD5=[9672e2939a542d57339757f8e99f71ae]
class C_0000070676212088190880--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L41" target="_top" title="SharedPromise" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L41" xlink:show="new" xlink:title="SharedPromise" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="265.6797" id="C_0000070676212088190880" style="stroke: #A80036; stroke-width: 1.5;" width="603" x="3039.5" y="327.5"/><ellipse cx="3283.75" cy="343.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3286.7188,349.1406 Q3286.1406,349.4375 3285.5,349.5781 Q3284.8594,349.7344 3284.1563,349.7344 Q3281.6563,349.7344 3280.3281,348.0938 Q3279.0156,346.4375 3279.0156,343.3125 Q3279.0156,340.1875 3280.3281,338.5313 Q3281.6563,336.875 3284.1563,336.875 Q3284.8594,336.875 3285.5,337.0313 Q3286.1563,337.1875 3286.7188,337.4844 L3286.7188,340.2031 Q3286.0938,339.625 3285.5,339.3594 Q3284.9063,339.0781 3284.2813,339.0781 Q3282.9375,339.0781 3282.25,340.1563 Q3281.5625,341.2188 3281.5625,343.3125 Q3281.5625,345.4063 3282.25,346.4844 Q3282.9375,347.5469 3284.2813,347.5469 Q3284.9063,347.5469 3285.5,347.2813 Q3286.0938,347 3286.7188,346.4219 L3286.7188,349.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="95" x="3304.25" y="347.6543">SharedPromise</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="3636.5" y="324.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="3637.5" y="336.6387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3040.5" x2="3641.5" y1="359.5" y2="359.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L130" target="_top" title="mutex_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L130" xlink:show="new" xlink:title="mutex_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3045.5" y="365.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="367.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L130" target="_top" title="mutex_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L130" xlink:show="new" xlink:title="mutex_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="3059.5" y="373.7104">mutex_ : SharedPromise::Mutex</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L131" target="_top" title="size_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L131" xlink:show="new" xlink:title="size_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3045.5" y="378.3047"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="380.3047"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L131" target="_top" title="size_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L131" xlink:show="new" xlink:title="size_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3059.5" y="386.5151">size_ : Defaulted&lt;size_t&gt;</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L132" target="_top" title="try_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L132" xlink:show="new" xlink:title="try_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3045.5" y="391.1094"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="393.1094"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L132" target="_top" title="try_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L132" xlink:show="new" xlink:title="try_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3059.5" y="399.3198">try_ : Defaulted&lt;Try&lt;T&gt;&gt;</text></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L133" target="_top" title="promises_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L133" xlink:show="new" xlink:title="promises_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3045.5" y="403.9141"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="405.9141"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L133" target="_top" title="promises_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L133" xlink:show="new" xlink:title="promises_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="3059.5" y="412.1245">promises_ : std::vector&lt;Promise&lt;T&gt;&gt;</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3040.5" x2="3641.5" y1="418.7188" y2="418.7188"/><ellipse cx="3050.5" cy="429.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="3059.5" y="432.9292">getSemiFuture() const : SemiFuture&lt;T&gt;</text><ellipse cx="3050.5" cy="442.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3059.5" y="445.7339">getFuture() const : Future&lt;T&gt;</text><ellipse cx="3050.5" cy="455.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3059.5" y="458.5386">size() const : size_t</text><ellipse cx="3050.5" cy="468.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3059.5" y="471.3433">setException(exception_wrapper ew) : void</text><ellipse cx="3050.5" cy="480.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="438" x="3059.5" y="484.1479">setInterruptHandler(std::function&lt;void (const exception_wrapper &amp;)&gt; ) : void</text><ellipse cx="3050.5" cy="493.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3059.5" y="496.9526">setTry(Try&lt;T&gt; &amp;&amp; t) : void</text><ellipse cx="3050.5" cy="506.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3059.5" y="509.7573">isFulfilled() const : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="516.3516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3059.5" y="522.562">hasResult() const : bool</text><ellipse cx="3050.5" cy="532.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="577" x="3059.5" y="535.3667">setException(const E &amp; ) : typename std::enable_if&lt;std::is_base_of&lt;std::exception, E&gt;::value&gt;::type</text><ellipse cx="3050.5" cy="544.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="492" x="3059.5" y="548.1714">setValue() : typename std::enable_if&lt;std::is_same&lt;struct Unit, B&gt;::value, void&gt;::type</text><ellipse cx="3050.5" cy="557.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3059.5" y="560.9761">setValue(M &amp;&amp; value) : void</text><ellipse cx="3050.5" cy="570.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3059.5" y="573.7808">setWith(F &amp;&amp; func) : void</text><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L134" target="_top" title="interruptHandler_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L134" xlink:show="new" xlink:title="interruptHandler_" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3045.5" y="578.375"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3047.5" y="580.375"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L134" target="_top" title="interruptHandler_" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L134" xlink:show="new" xlink:title="interruptHandler_" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="391" x="3059.5" y="586.5854">interruptHandler_ : std::function&lt;void (const exception_wrapper &amp;)&gt;</text></a><!--MD5=[8f9fe92f0812d77ee2acf5c96e15b53f]
class C_0001000827240401510911--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L104" target="_top" title="SharedPromise##Mutex" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L104" xlink:show="new" xlink:title="SharedPromise##Mutex" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="86.4141" id="C_0001000827240401510911" style="stroke: #A80036; stroke-width: 1.5;" width="404" x="3139" y="8"/><ellipse cx="3266.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3269.7188,29.6406 Q3269.1406,29.9375 3268.5,30.0781 Q3267.8594,30.2344 3267.1563,30.2344 Q3264.6563,30.2344 3263.3281,28.5938 Q3262.0156,26.9375 3262.0156,23.8125 Q3262.0156,20.6875 3263.3281,19.0313 Q3264.6563,17.375 3267.1563,17.375 Q3267.8594,17.375 3268.5,17.5313 Q3269.1563,17.6875 3269.7188,17.9844 L3269.7188,20.7031 Q3269.0938,20.125 3268.5,19.8594 Q3267.9063,19.5781 3267.2813,19.5781 Q3265.9375,19.5781 3265.25,20.6563 Q3264.5625,21.7188 3264.5625,23.8125 Q3264.5625,25.9063 3265.25,26.9844 Q3265.9375,28.0469 3267.2813,28.0469 Q3267.9063,28.0469 3268.5,27.7813 Q3269.0938,27.5 3269.7188,26.9219 L3269.7188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="140" x="3287.25" y="28.1543">SharedPromise::Mutex</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3140" x2="3542" y1="40" y2="40"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3140" x2="3542" y1="48" y2="48"/><ellipse cx="3150" cy="59" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3159" y="62.2104">Mutex() = default : void</text><ellipse cx="3150" cy="71.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3159" y="75.0151">Mutex(SharedPromise::Mutex &amp;&amp; ) : void</text><ellipse cx="3150" cy="84.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="3159" y="87.8198">operator=(SharedPromise::Mutex &amp;&amp; ) : SharedPromise::Mutex &amp;</text></a><!--MD5=[27968ed9821c2c9c496d9f0429a33d40]
class C_0000764427108203128807--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L111" target="_top" title="SharedPromise##Defaulted" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L111" xlink:show="new" xlink:title="SharedPromise##Defaulted" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="99.2188" id="C_0000764427108203128807" style="stroke: #A80036; stroke-width: 1.5;" width="326" x="3592" y="1941.5"/><ellipse cx="3662.75" cy="1957.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3665.7188,1963.1406 Q3665.1406,1963.4375 3664.5,1963.5781 Q3663.8594,1963.7344 3663.1563,1963.7344 Q3660.6563,1963.7344 3659.3281,1962.0938 Q3658.0156,1960.4375 3658.0156,1957.3125 Q3658.0156,1954.1875 3659.3281,1952.5313 Q3660.6563,1950.875 3663.1563,1950.875 Q3663.8594,1950.875 3664.5,1951.0313 Q3665.1563,1951.1875 3665.7188,1951.4844 L3665.7188,1954.2031 Q3665.0938,1953.625 3664.5,1953.3594 Q3663.9063,1953.0781 3663.2813,1953.0781 Q3661.9375,1953.0781 3661.25,1954.1563 Q3660.5625,1955.2188 3660.5625,1957.3125 Q3660.5625,1959.4063 3661.25,1960.4844 Q3661.9375,1961.5469 3663.2813,1961.5469 Q3663.9063,1961.5469 3664.5,1961.2813 Q3665.0938,1961 3665.7188,1960.4219 L3665.7188,1963.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="164" x="3683.25" y="1961.6543">SharedPromise::Defaulted</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="10" x="3911" y="1938.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="8" x="3912" y="1950.6387">V</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3593" x2="3917" y1="1973.5" y2="1973.5"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L116" target="_top" title="value" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L116" xlink:show="new" xlink:title="value" xlink:type="simple"><rect fill="#FEFECE" height="10" style="stroke: none; stroke-width: 1.0;" width="20" x="3598" y="1979.5"/><ellipse cx="3603" cy="1984.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/></a><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L116" target="_top" title="value" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L116" xlink:show="new" xlink:title="value" xlink:type="simple"><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3612" y="1987.7104">value : V</text></a><line style="stroke: #A80036; stroke-width: 1.5;" x1="3593" x2="3917" y1="1994.3047" y2="1994.3047"/><ellipse cx="3603" cy="2005.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3612" y="2008.5151">Defaulted&lt;V&gt;() = default : void</text><ellipse cx="3603" cy="2018.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3612" y="2021.3198">Defaulted&lt;V&gt;(Defaulted&lt;V&gt; &amp;&amp; that) : void</text><ellipse cx="3603" cy="2030.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="3612" y="2034.1245">operator=(Defaulted&lt;V&gt; &amp;&amp; that) : Defaulted&lt;V&gt; &amp;</text><!--MD5=[dcef8def874ea4c97f4e6c974ac7f662]
class C_0000913905008779572763--><a href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L111" target="_top" title="FutureSplitter" xlink:actuate="onRequest" xlink:href="https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L111" xlink:show="new" xlink:title="FutureSplitter" xlink:type="simple"><rect fill="#FEFECE" filter="url(#f1pc2vtwu1560r)" height="48" id="C_0000913905008779572763" style="stroke: #A80036; stroke-width: 1.5;" width="129" x="3578.5" y="27"/><ellipse cx="3593.5" cy="43" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3596.4688,48.6406 Q3595.8906,48.9375 3595.25,49.0781 Q3594.6094,49.2344 3593.9063,49.2344 Q3591.4063,49.2344 3590.0781,47.5938 Q3588.7656,45.9375 3588.7656,42.8125 Q3588.7656,39.6875 3590.0781,38.0313 Q3591.4063,36.375 3593.9063,36.375 Q3594.6094,36.375 3595.25,36.5313 Q3595.9063,36.6875 3596.4688,36.9844 L3596.4688,39.7031 Q3595.8438,39.125 3595.25,38.8594 Q3594.6563,38.5781 3594.0313,38.5781 Q3592.6875,38.5781 3592,39.6563 Q3591.3125,40.7188 3591.3125,42.8125 Q3591.3125,44.9063 3592,45.9844 Q3592.6875,47.0469 3594.0313,47.0469 Q3594.6563,47.0469 3595.25,46.7813 Q3595.8438,46.5 3596.4688,45.9219 L3596.4688,48.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="3607.5" y="47.1543">FutureSplitter</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="9" x="3701.5" y="24"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="7" x="3702.5" y="36.1387">T</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3579.5" x2="3706.5" y1="59" y2="59"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3579.5" x2="3706.5" y1="67" y2="67"/></a><!--MD5=[04e56d142b5c6c782d478332b98c90f7]
link C_0000135335628570802873 to C_0001539432614095357204--><path d="M2858.53,3161.08 C2851.97,3179.66 2845.35,3198.43 2838.73,3217.18 " fill="none" id="C_0000135335628570802873-&gt;C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2837.05,3221.95,2843.8083,3214.7858,2838.7081,3217.2329,2836.261,3212.1328,2837.05,3221.95" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[de5c8ac46ca2a44d71384a7aa8fffd98]
link C_0000135335628570802873 to C_0000135335628570802873--><path d="M3260.5,2808.75 C3282.2,2819.24 3295.5,2834.83 3295.5,2855.5 C3295.5,2874.72 3284,2889.54 3264.95,2899.96 " fill="none" id="C_0000135335628570802873-&gt;C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3260.5,2902.25,3270.3329,2901.6896,3264.9461,2899.9626,3266.6731,2894.5758,3260.5,2902.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[72b1944e8cdaeeed37c9d6da0b8bbfb5]
link C_0000487431047047122182 to C_0000135335628570802873--><path d="M2172.42,2098.19 C2295.18,2215.19 2497.73,2408.22 2667.46,2569.98 " fill="none" id="C_0000487431047047122182-&gt;C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2671.21,2573.55,2667.4711,2564.4384,2667.5968,2570.0939,2661.9413,2570.2196,2671.21,2573.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4bc6c5bf92c3936341ddd0454187e104]
link C_0000487431047047122182 to C_0002242828088217415598--><path d="M2017.17,2098.19 C1935.13,2296.96 1762.5,2715.19 1716.48,2826.69 " fill="none" id="C_0000487431047047122182-&gt;C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1714.51,2831.46,1721.6281,2824.6532,1716.4087,2826.8345,1714.2273,2821.6152,1714.51,2831.46" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d5ce84ad139ba8b559154715269cb0ce]
link C_0000725183341054102552 to C_0000725183341054102552--><path d="M1809.1,419.86 C1831.06,429.97 1844,443.52 1844,460.5 C1844,476.15 1833,488.89 1814.08,498.71 " fill="none" id="C_0000725183341054102552-&gt;C_0000725183341054102552" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1809.1,501.14,1818.9428,500.7936,1813.5948,498.9499,1815.4385,493.6019,1809.1,501.14" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[77f9e3ab7735a27eb798d71f249201cb]
link C_0000725183341054102552 to C_0000156632990802225029--><path d="M1138.84,766.21 C1121.57,790.31 1104.25,814.6 1087.24,838.6 " fill="none" id="C_0000725183341054102552-&gt;C_0000156632990802225029" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1084.29,842.76,1092.7494,837.7163,1087.1745,838.676,1086.2149,833.1011,1084.29,842.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fa61ade088edfeabda52cc1e347b1878]
reverse link C_0000725183341054102552 to C_0000156632990802225029--><path d="M1153.3,782.66 C1139,802.73 1124.6,822.86 1110.3,842.76 " fill="none" id="C_0000725183341054102552&lt;-C_0000156632990802225029" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1147.7,778.45,1165,766.21,1159.11,786.56,1147.7,778.45" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1915eae47c2f462fd9e98cc141b1a583]
link C_0000725183341054102552 to C_0000432533400863196245--><path d="M1369.98,766.07 C1365.99,960.26 1342.19,1212.69 1249,1416 C1237.76,1440.52 1225.05,1464.68 1211.18,1488.39 " fill="none" id="C_0000725183341054102552-&gt;C_0000432533400863196245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1208.57,1492.81,1216.5859,1487.0876,1211.1088,1488.5025,1209.6939,1483.0255,1208.57,1492.81" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ba189f642304587b3450024c6af58441]
reverse link C_0000725183341054102552 to C_0000432533400863196245--><path d="M1399.96,786.18 C1399.28,977.46 1374.01,1219.64 1284,1416 C1264.81,1457.87 1241.34,1498.67 1215.03,1537.97 " fill="none" id="C_0000725183341054102552&lt;-C_0000432533400863196245" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1392.96,786.08,1399.94,766.07,1406.96,786.07,1392.96,786.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[cdc5b73497f11db363d91ef3599a82a5]
link C_0000725183341054102552 to C_0001539432614095357204--><path d="M1504.68,766 C1543.25,877.73 1575,1006.7 1575,1128.5 C1575,1128.5 1575,1128.5 1575,2856.5 C1575,2992.72 1525.67,3054.01 1610,3161 C1785.24,3383.33 2094.54,3483.34 2341.57,3528.31 " fill="none" id="C_0000725183341054102552-&gt;C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2346.67,3529.24,2338.5194,3523.7112,2341.7488,3528.3556,2337.1044,3531.585,2346.67,3529.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[83eb94b880bc5b008ba5dd7491fb2ec0]
link C_0000725183341054102552 to C_0000487431047047122182--><path d="M1737.62,766.18 C1757.3,790.86 1775.37,816.53 1791,843 C1992.15,1183.59 2043.47,1664 2056.54,1878.74 " fill="none" id="C_0000725183341054102552-&gt;C_0000487431047047122182" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2056.85,1883.76,2060.3022,1874.536,2056.5497,1878.769,2052.3167,1875.0165,2056.85,1883.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[83eb94b880bc5b008ba5dd7491fb2ec0]
link C_0000725183341054102552 to C_0000487431047047122182--><path d="M1587.26,766.34 C1592.12,776.21 1596.72,786.11 1601,796 C1713.04,1054.6 1633.52,1152.7 1734,1416 C1799.2,1586.85 1910.04,1767.55 1984.37,1879.55 " fill="none" id="C_0000725183341054102552-&gt;C_0000487431047047122182-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1987.22,1883.84,1985.5944,1874.1262,1984.463,1879.6688,1978.9204,1878.5374,1987.22,1883.84" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1740,1125.0664,1744,1129.0664,1740,1133.0664,1736,1129.0664" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="1747" y="1134.0669">core_</text><!--MD5=[46fe40ed9a05f66b0e491a9ec4c198a8]
link C_0000725183341054102552 to C_0001636747636195825603--><path d="M1410.45,766.07 C1411.02,781.92 1411.23,797.64 1411,813 C1399.44,1571.93 1387.56,1761.52 1359,2520 C1354.73,2633.39 1348.25,2768.35 1345.41,2826.05 " fill="none" id="C_0000725183341054102552-&gt;C_0001636747636195825603" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1345.15,2831.39,1349.5831,2822.5953,1345.3933,2826.3959,1341.5926,2822.206,1345.15,2831.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[abef1ee8f4f9191dcca99b897d5f3d47]
link C_0001797157475442677168 to C_0001778078938283944881--><path d="M2448.2,561.58 C2445.84,632.17 2440.42,728.77 2428,813 C2422.52,850.15 2414.87,889.38 2406.55,927.08 " fill="none" id="C_0001797157475442677168-&gt;C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2405.42,932.15,2411.282,924.2357,2406.5077,927.2697,2403.4736,922.4954,2405.42,932.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[796b2dd0ccc468789ca46d250b28cbb7]
reverse link C_0001797157475442677168 to C_0001778078938283944881--><path d="M2406.03,574.31 C2383.47,638.26 2358.38,720.37 2347,796 C2340.41,839.82 2338.4,887.25 2338.81,932.19 " fill="none" id="C_0001797157475442677168&lt;-C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2410.51,561.77,2404.7253,566.0755,2406.4748,573.0712,2412.2595,568.7657,2410.51,561.77" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2350" y="802.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="59" x="2360" y="809.0669">promise_</text><!--MD5=[3a377b62bd4046757bd4d4febc5eb75a]
link C_0001797157475442677168 to C_0002242828088217415598--><path d="M2257.51,561.51 C2139.03,622.24 1983.62,700.44 1844,766 C1766.72,802.29 1714.73,771.54 1668,843 C1554.66,1016.29 1683.04,2594.47 1702.58,2826.16 " fill="none" id="C_0001797157475442677168-&gt;C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1703.02,2831.38,1706.2588,2822.0789,1702.6048,2826.3973,1698.2864,2822.7433,1703.02,2831.38" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[acfed21556ac6a21aea474cd05bc77c6]
link C_0001797157475442677168 to C_0000135335628570802873--><path d="M2645.77,561.53 C2734.01,617.66 2829.73,696.55 2881,796 C2958.87,947.03 2967.97,2008 2967.49,2544.86 " fill="none" id="C_0001797157475442677168-&gt;C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2967.48,2549.97,2971.5057,2540.9815,2967.4943,2544.97,2963.5057,2540.9586,2967.48,2549.97" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[36627dbd37654e625891e8536244152a]
link C_0001797157475442677168 to C_0001539432614095357204--><path d="M2537.13,561.54 C2594.36,634.19 2664.14,737.83 2695,843 C2766.71,1087.36 2699.6,1161.37 2695,1416 C2680.98,2191.64 2594.99,2387.48 2654,3161 C2655.39,3179.19 2657.12,3197.8 2659.12,3216.56 " fill="none" id="C_0001797157475442677168-&gt;C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2659.69,3221.86,2662.6894,3212.479,2659.1472,3216.8895,2654.7367,3213.3474,2659.69,3221.86" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[644de8e4e15bef889ae252cb1e63a441]
link C_0001778078938283944881 to C_0001778078938283944881--><path d="M2659.21,1085.02 C2680.81,1095.14 2694,1109.96 2694,1129.5 C2694,1147.51 2682.79,1161.52 2664.11,1171.52 " fill="none" id="C_0001778078938283944881-&gt;C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2659.21,1173.98,2669.0493,1173.5454,2663.685,1171.7497,2665.4807,1166.3854,2659.21,1173.98" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a6146de6048728fe0d19ad692ed1d4fc]
link C_0001778078938283944881 to C_0001539432614095357204--><path d="M2443.96,1326.88 C2464.56,1379.78 2483.93,1437.7 2496,1493 C2657.28,2231.92 2450.13,2449.11 2592,3192 C2593.56,3200.19 2595.26,3208.44 2597.07,3216.74 " fill="none" id="C_0001778078938283944881-&gt;C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2598.22,3221.91,2600.1724,3212.2566,2597.1353,3217.0291,2592.3629,3213.992,2598.22,3221.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[af7ab0bf5ffc61d1ae7c54a1617e5e76]
link C_0001778078938283944881 to C_0000135335628570802873--><path d="M2505.05,1326.8 C2530.12,1365 2554.07,1405.72 2573,1446 C2742.04,1805.6 2851.29,2251.98 2910.66,2544.61 " fill="none" id="C_0001778078938283944881-&gt;C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2911.71,2549.77,2913.8565,2540.1579,2910.7239,2544.8682,2906.0136,2541.7356,2911.71,2549.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[81002a457275910f6a17a07d777d9bc2]
link C_0001778078938283944881 to C_0002242828088217415598--><path d="M2409.3,1326.55 C2421.98,1380.09 2433.61,1438.39 2440,1493 C2465.72,1712.83 2556.57,2300.85 2440,2489 C2294.2,2724.34 1946.43,2812.98 1787.18,2842.04 " fill="none" id="C_0001778078938283944881-&gt;C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1782.06,2842.97,1791.6333,2845.2833,1786.9782,2842.0693,1790.1922,2837.4141,1782.06,2842.97" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b3cfec4edbf19add9f7d3356861cc0b7]
link C_0001778078938283944881 to C_0001636747636195825603--><path d="M2048.96,1280.06 C1883.41,1363.8 1707.17,1458.2 1681,1493 C1400.32,1866.22 1584.47,2070.18 1459,2520 C1426.81,2635.41 1376.89,2769.2 1354.96,2826.32 " fill="none" id="C_0001778078938283944881-&gt;C_0001636747636195825603" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1353.05,2831.28,1360.0185,2824.3201,1354.8478,2826.6144,1352.5535,2821.4437,1353.05,2831.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[674a3125b93735fc840c5e3bc36ba30a]
link C_0001778078938283944881 to C_0000487431047047122182--><path d="M2287.15,1326.61 C2228.85,1497.62 2146.38,1739.54 2098.82,1879.06 " fill="none" id="C_0001778078938283944881-&gt;C_0000487431047047122182" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2097.14,1883.98,2103.8332,1876.755,2098.7554,1879.2481,2096.2622,1874.1703,2097.14,1883.98" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2246" y="1452.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="35" x="2256" y="1459.0669">core_</text><!--MD5=[6d6cc176091032b9e9a6d8f3477fd2ab]
reverse link C_0000481841646641149488 to C_0000769434624932181431--><path d="M654.65,2912.55 C668.25,3027.28 699.52,3291.07 717.87,3445.81 " fill="none" id="C_0000481841646641149488&lt;-C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="647.68,2913.29,652.28,2892.61,661.59,2911.65,647.68,2913.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6e8d4e68e4fde02a50bcc7bf588c2037]
link C_0000156632990802225029 to C_0000156632990802225029--><path d="M1230.77,1086.53 C1252.42,1096.59 1265.5,1110.91 1265.5,1129.5 C1265.5,1146.64 1254.38,1160.15 1235.68,1170.03 " fill="none" id="C_0000156632990802225029-&gt;C_0000156632990802225029" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1230.77,1172.47,1240.6109,1172.0731,1235.2535,1170.2568,1237.0697,1164.8995,1230.77,1172.47" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d14437bc767ffdcfff9e0894e7d7c7f3]
link C_0000156632990802225029 to C_0000432533400863196245--><path d="M838.5,1416.1 C834.07,1439.36 829.51,1463.26 824.89,1487.47 " fill="none" id="C_0000156632990802225029-&gt;C_0000432533400863196245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="823.9,1492.64,829.5242,1484.5549,824.8421,1487.7296,821.6675,1483.0475,823.9,1492.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f83c18a188ed6c690ef32d9c3fdc419]
link C_0000156632990802225029 to C_0002242828088217415598--><path d="M1230.73,1384.77 C1262.89,1418.62 1292.55,1454.9 1317,1493 C1355.75,1553.39 1646.76,2636.89 1697.47,2826.35 " fill="none" id="C_0000156632990802225029-&gt;C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1698.84,2831.44,1700.3627,2821.7096,1697.5401,2826.6119,1692.6378,2823.7894,1698.84,2831.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[07fb0e8dc352ec8842fde5c381c27d1c]
link C_0000156632990802225029 to C_0001579326926673473295--><path d="M555.18,1231.09 C428.82,1286.91 298.27,1370.59 225,1493 C-35.95,1928.96 136.38,2592.69 198.35,2794.33 " fill="none" id="C_0000156632990802225029-&gt;C_0001579326926673473295" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="199.89,2799.3,201.0602,2789.5209,198.4166,2794.522,193.4154,2791.8784,199.89,2799.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[68d6ebf002aab3867ca3f6448ffe52b6]
link C_0000156632990802225029 to C_0001636747636195825603--><path d="M1206.66,1416.27 C1223.32,1440.87 1238.07,1466.53 1250,1493 C1306.66,1618.74 1338.01,2641.95 1343.22,2826.15 " fill="none" id="C_0000156632990802225029-&gt;C_0001636747636195825603" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1343.37,2831.35,1347.1113,2822.2394,1343.2272,2826.352,1339.1146,2822.4679,1343.37,2831.35" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f33654ceff6a26b00161384e82bb482]
link C_0000432533400863196245 to C_0000432533400863196245--><path d="M1215.14,1929.47 C1237.14,1945.1 1250,1965.61 1250,1991 C1250,2014.81 1238.7,2034.32 1219.16,2049.54 " fill="none" id="C_0000432533400863196245-&gt;C_0000432533400863196245" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1215.14,2052.53,1224.7487,2050.3684,1219.152,2049.546,1219.9743,2043.9493,1215.14,2052.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[28aad39a20209e40e7d123e79cf29ceb]
link C_0000432533400863196245 to C_0000481841646641149488--><path d="M682.32,2489.03 C669.64,2624.08 657.79,2750.3 651.89,2813.06 " fill="none" id="C_0000432533400863196245-&gt;C_0000481841646641149488" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="651.41,2818.2,656.2395,2809.6165,651.8807,2813.2222,648.275,2808.8634,651.41,2818.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[47e8c33da7054571d37515fc3119e501]
link C_0000432533400863196245 to C_0000769434624932181431--><path d="M776.76,2489.26 C778,2509.77 779.09,2530.08 780,2550 C792.37,2821.27 796.05,2889.92 780,3161 C774.44,3255 761.65,3360.67 750.67,3440.35 " fill="none" id="C_0000432533400863196245-&gt;C_0000769434624932181431" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="749.95,3445.56,755.1455,3437.193,750.6351,3440.6072,747.2209,3436.0968,749.95,3445.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[46b48794b74f8863721a20e6e11bf83c]
link C_0000432533400863196245 to C_0002242828088217415598--><path d="M1215.11,2440.58 C1258.73,2469.97 1303.61,2496.97 1349,2520 C1400.33,2546.05 1426.81,2518.51 1475,2550 C1585.53,2622.23 1663.37,2766.56 1692.42,2826.94 " fill="none" id="C_0000432533400863196245-&gt;C_0002242828088217415598" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1694.59,2831.49,1694.3066,2821.6452,1692.4287,2826.9813,1687.0926,2825.1033,1694.59,2831.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1fc488ded4365452ca72f6f8aa328443]
link C_0000432533400863196245 to C_0001579326926673473295--><path d="M434.52,2489.03 C361.63,2612.07 293.07,2727.8 253.33,2794.86 " fill="none" id="C_0000432533400863196245-&gt;C_0001579326926673473295" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="250.76,2799.21,258.7842,2793.4993,253.3051,2794.9062,251.8981,2789.4271,250.76,2799.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[62abe11da37622e1188cb48df3e7b5ae]
link C_0000432533400863196245 to C_0001636747636195825603--><path d="M1083.41,2489.03 C1187.43,2634.92 1284.12,2770.53 1324.34,2826.93 " fill="none" id="C_0000432533400863196245-&gt;C_0001636747636195825603" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1327.37,2831.18,1325.4066,2821.5288,1324.4692,2827.1075,1318.8906,2826.1701,1327.37,2831.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13f9d367ce9f1190eeb84b4bba1091ae]
link C_0000742750151299031844 to C_0000764427108203128807--><path d="M3920.36,1153.94 C3898.35,1265.22 3803.98,1742.34 3768.53,1921.59 " fill="none" id="C_0000742750151299031844-&gt;C_0000764427108203128807" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3775.35,1923.17,3764.61,1941.44,3761.62,1920.46,3775.35,1923.17" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[70dc746d839bbde3bf053dba48137fa3]
link C_0000616814101618455991 to C_0000764427108203128807--><path d="M3583.8,1153.94 C3606.59,1265.22 3704.29,1742.34 3740.99,1921.59 " fill="none" id="C_0000616814101618455991-&gt;C_0000764427108203128807" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3747.9,1920.44,3745.06,1941.44,3734.19,1923.25,3747.9,1920.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f5e59c0115dd80ee2f322a63cca1dd13]
link C_0000070676212088190880 to C_0001539432614095357204--><path d="M3353.02,593.65 C3370.18,789.73 3400.88,1169.41 3412,1493 C3437.95,2248.05 3759.67,2552.13 3358,3192 C3294.69,3292.85 3193.48,3369.49 3089.96,3426.26 " fill="none" id="C_0000070676212088190880-&gt;C_0001539432614095357204" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="3085.34,3428.77,3095.1565,3427.9719,3089.7295,3426.3757,3091.3257,3420.9487,3085.34,3428.77" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f5e59c0115dd80ee2f322a63cca1dd13]
link C_0000070676212088190880 to C_0001539432614095357204--><path d="M3330.34,593.68 C3315.11,789.8 3287.87,1169.53 3278,1493 C3264.5,1935.46 3214.71,2050.88 3278,2489 C3282.04,2516.98 3291.96,2522.02 3296,2550 C3334.83,2818.77 3421.69,2920.28 3296,3161 C3249.13,3250.77 3172.21,3324.64 3089.48,3383.54 " fill="none" id="C_0000070676212088190880-&gt;C_0001539432614095357204-1" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3085.03,3386.69,3094.6889,3384.7651,3089.114,3383.8055,3090.0737,3378.2306,3085.03,3386.69" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3281" y="1988.5664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="112" x="3291" y="1995.5669">interruptHandler_</text><!--MD5=[19529699b380f971224f31ecdde00a87]
link C_0000070676212088190880 to C_0000135335628570802873--><path d="M3301.84,593.69 C3284.76,654.85 3265.58,728.7 3252,796 C3127.93,1411.06 3040.45,2140.39 2997.1,2544.92 " fill="none" id="C_0000070676212088190880-&gt;C_0000135335628570802873" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2996.56,2549.96,3001.4891,2541.4333,2997.0886,2544.988,2993.534,2540.5875,2996.56,2549.96" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0d2ec4c15152d521d61cef548f434e4c]
reverse link C_0000070676212088190880 to C_0000742750151299031844--><path d="M3569.98,601.41 C3644.45,655.22 3722.82,721.77 3781,796 C3860.16,897.01 3904.6,1048.17 3919.39,1105.42 " fill="none" id="C_0000070676212088190880&lt;-C_0000742750151299031844" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3559.02,593.57,3561.5645,600.3173,3568.7714,600.5636,3566.2269,593.8163,3559.02,593.57" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3795" y="802.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="32" x="3805" y="809.0669">size_</text><!--MD5=[dc7587d5214fd63d47c25e98ff1b6a82]
reverse link C_0000070676212088190880 to C_0000616814101618455991--><path d="M3392.69,606.37 C3451.52,771.23 3543.04,1027.72 3570.77,1105.43 " fill="none" id="C_0000070676212088190880&lt;-C_0000616814101618455991" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3388.16,593.68,3386.4105,600.6757,3392.1952,604.9812,3393.9447,597.9855,3388.16,593.68" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3466" y="802.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="24" x="3476" y="809.0669">try_</text><!--MD5=[7a5a92f5b8d52739059d3c75e4331e89]
link C_0000070676212088190880 to C_0001778078938283944881--><path d="M3177.45,593.65 C3091.04,661.63 2982.17,744.38 2881,813 C2811.88,859.88 2735.74,907.6 2663.33,951.26 " fill="none" id="C_0000070676212088190880-&gt;C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="2659.01,953.87,2668.7806,952.6311,2663.2873,951.2807,2664.6378,945.7874,2659.01,953.87" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[13c4d34014f920070260c65cfb8990b2]
reverse link C_0000070676212088190880 to C_0001778078938283944881--><path d="M3150.68,601.13 C3069.06,657.07 2971,719.2 2877,766 C2841.51,783.67 2827.87,777.15 2793,796 C2721.93,834.42 2649.95,883.71 2585.4,932.49 " fill="none" id="C_0000070676212088190880&lt;-C_0001778078938283944881" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3161.58,593.64,3154.3697,593.7499,3151.698,600.4479,3158.9083,600.3379,3161.58,593.64" style="stroke: #A80036; stroke-width: 1.0;"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2796" y="802.0664"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="66" x="2806" y="809.0669">promises_</text><!--MD5=[ea8682a620c7a2b6777c591d3cc09807]
link C_0001000827240401510911 to C_0000070676212088190880--><path d="M3341,94.07 C3341,145.26 3341,234.44 3341,311.89 " fill="none" id="C_0001000827240401510911-&gt;C_0000070676212088190880" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3341" cy="319.21" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3341" x2="3341" y1="311.21" y2="327.21"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3349" x2="3333" y1="319.21" y2="319.21"/><!--MD5=[1c5946bab4f5147cd76df61e291627d5]
link C_0000764427108203128807 to C_0000070676212088190880--><path d="M3758.2,1941.26 C3770.08,1749.1 3806.76,1044.65 3720,843 C3680.16,750.4 3606.51,668.05 3534.65,603.77 " fill="none" id="C_0000764427108203128807-&gt;C_0000070676212088190880" style="stroke: #A80036; stroke-width: 1.0;"/><ellipse cx="3529.1365" cy="598.9055" fill="#FFFFFF" rx="8" ry="8" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3535.133" x2="3523.14" y1="604.201" y2="593.61"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="3523.841" x2="3534.432" y1="604.902" y2="592.909"/><!--MD5=[78e6c0b5e16c63a6fc4933f14f98f227]
@startuml
class "exception_wrapper" as C_0001539432614095357204
class C_0001539432614095357204 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L161{Throwing exceptions can be a convenient way to handle errors. Storing exceptions in an `exception_ptr` makes it easy to handle exceptions in a different thread or at a later time. `exception_ptr` can also be used in a very generic result/exception wrapp...}]] {
{static} -onNoExceptionError(const char * name) : void
{static} -uninit_type_(const exception_wrapper * ) : const std::type_info *
{static} -as_exception_or_null_(const std::exception & ex) : const std::exception *
{static} -as_exception_or_null_(exception_wrapper::AnyException ) : const std::exception *
{static} +from_exception_ptr(const std::exception_ptr & eptr) : exception_wrapper
{static} +from_exception_ptr(std::exception_ptr && eptr) : exception_wrapper
+exception_wrapper() : void
+exception_wrapper(exception_wrapper && that) : void
+exception_wrapper(const exception_wrapper & that) : void
+operator=(exception_wrapper && that) : exception_wrapper &
+operator=(const exception_wrapper & that) : exception_wrapper &
+~exception_wrapper() : void
+exception_wrapper(std::exception_ptr ptr) : void
+swap(exception_wrapper & that) : void
+operator bool() const : bool
+operator!() const : bool
+reset() : void
+has_exception_ptr() const : bool
+get_exception() : std::exception *
+get_exception() const : const std::exception *
+to_exception_ptr() : std::exception_ptr
+to_exception_ptr() const : std::exception_ptr
{static} +none() : const std::type_info &
{static} +unknown() : const std::type_info &
+type() const : const std::type_info &
+what() const : fbstring
+class_name() const : fbstring
+throw_exception() const : void
{static} -noop_(Args... ) : Ret
-exception_wrapper(exception_wrapper::ThrownTag , in_place_type_tag<Ex> , As &&... as) : void
-exception_wrapper(exception_wrapper::OnHeapTag , in_place_type_tag<Ex> , As &&... as) : void
-exception_wrapper(exception_wrapper::InSituTag , in_place_type_tag<Ex> , As &&... as) : void
{static} -handle_(std::false_type , This & this_, CatchFns &... fns) : void
{static} -handle_(std::true_type , This & this_, CatchFns &... fns) : void
{static} -with_exception_(This & this_, Fn fn_) : _Bool
+exception_wrapper(std::exception_ptr ptr, Ex & ex) : void
+exception_wrapper(Ex && ex) : void
+exception_wrapper(in_place_t , Ex && ex) : void
+exception_wrapper(in_place_type_tag<Ex> , As &&... as) : void
+get_exception() : Ex *
+get_exception() : const Ex *
+is_compatible_with() : _Bool
+throw_with_nested(Ex && ex) : void
+with_exception(Fn fn) : _Bool
+with_exception(Fn fn) : _Bool
+handle(CatchFns... fns) : void
+handle(CatchFns... fns) : void
- : exception_wrapper::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/ExceptionWrapper.h:337:3) [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L337{}]]]
-vptr_ : const exception_wrapper::VTable * [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L342{vptr_}]]]
{static} -uninit_ : const exception_wrapper::VTable [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/ExceptionWrapper.h#L205{uninit_}]]]
}
class "Try<T>" as C_0000135335628570802873
class C_0000135335628570802873 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L52{Try}]] {
+Try<T>() : void
+Try<T>(const T & v) : void
+Try<T>(T && v) : void
+Try<T>(exception_wrapper e) : void
+Try<T>(Try<T> && t) : void
+operator=(Try<T> && t) : Try<T> &
+Try<T>(const Try<T> & t) : void
+operator=(const Try<T> & t) : Try<T> &
+~Try<T>() : void
+value() : T &
+value() : T &&
+value() const : const T &
+value() const : const T &&
+throwIfFailed() const : void
+operator*() const : const T &
+operator*() : T &
+operator*() : T &&
+operator*() const : const T &&
+operator->() const : const T *
+operator->() : T *
+hasValue() const : bool
+hasException() const : bool
+exception() : exception_wrapper &
+exception() : exception_wrapper &&
+exception() const : const exception_wrapper &
+exception() const : const exception_wrapper &&
+tryGetExceptionObject() : std::exception *
+tryGetExceptionObject() const : const std::exception *
-destroy() : void
+Try<T>(in_place_t , Args &&... args) : void
+Try<T>(typename std::enable_if<std::is_same<Unit,T2>::value,const Try<void> &>::type t) : void
+emplace(Args &&... args) : T &
+emplaceException(Args &&... args) : class exception_wrapper &
+hasException() : _Bool
+tryGetExceptionObject() : E *
+tryGetExceptionObject() : const E *
+withException(F func) : _Bool
+withException(F func) : _Bool
+withException(F func) : _Bool
+withException(F func) : _Bool
+get() : typename std::enable_if<isTry, R>::type
+get() : typename std::enable_if<!isTry, R>::type
-contains_ : Try::Contains [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L356{contains_}]]]
- : Try::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/Try.h:357:3) [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/Try.h#L357{}]]]
}
class "futures::detail::Core<T>" as C_0000487431047047122182
class C_0000487431047047122182 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/detail/Core.h#L504{Core}]] {
{static} +make() : Core<T> *
{static} +make(Try<T> && t) : Core<T> *
+getTry() : Try<T> &
+getTry() const : const Try<T> &
+setResult(Try<T> && t) : void
+setResult(Executor::KeepAlive<> && completingKA, Try<T> && t) : void
+setProxy(Core<T> * proxy) : void
-Core<T>() : void
-Core<T>(Try<T> && t) : void
-~Core<T>() : void
{static} +make(in_place_t , Args &&... args) : Core<T> *
+setCallback(F && func, std::shared_ptr<RequestContext> && context, futures::detail::InlineContinuation allowInline) : void
-Core<T>(in_place_t , Args &&... args) : void
}
class "futures::detail::EmptyConstruct" as C_0001636747636195825603
class C_0001636747636195825603 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L68{EmptyConstruct}]] {
}
class "futures::detail::FutureBase<T>" as C_0000725183341054102552
class C_0000725183341054102552 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L116{FutureBase}]] {
+FutureBase<T>(const FutureBase<T> & ) : void
+FutureBase<T>(SemiFuture<T> && ) : void
+FutureBase<T>(Future<T> && ) : void
+FutureBase<T>(const Future<T> & ) : void
+FutureBase<T>(const SemiFuture<T> & ) : void
+~FutureBase<T>() : void
+valid() const : bool
+value() : T &
+value() const : const T &
+value() : T &&
+value() const : const T &&
+result() : Try<T> &
+result() const : const Try<T> &
+result() : Try<T> &&
+result() const : const Try<T> &&
+isReady() const : bool
+hasValue() const : bool
+hasException() const : bool
+poll() : Optional<Try<T>>
+raise(exception_wrapper interrupt) : void
+cancel() : void
#getCore() : futures::detail::FutureBase::Core &
#getCore() const : const futures::detail::FutureBase::Core &
#getCoreTryChecked() : Try<T> &
#getCoreTryChecked() const : const Try<T> &
#FutureBase<T>(futures::detail::FutureBase::Core * obj) : void
#FutureBase<T>(futures::detail::EmptyConstruct ) : void
#detach() : void
#throwIfInvalid() const : void
#throwIfContinued() const : void
#assign(FutureBase<T> && other) : void
#getExecutor() const : Executor *
#getDeferredExecutor() const : futures::detail::DeferredExecutor *
#setExecutor(futures::detail::KeepAliveOrDeferred x) : void
+FutureBase<T>(T2 && val) : void
+FutureBase<T>(typename std::enable_if<std::is_same<Unit,T2>::value>::type * ) : void
+FutureBase<T>(in_place_t , Args &&... args) : void
+setCallback_(F && func, futures::detail::InlineContinuation  = InlineContinuation::forbid) : void
+raise(E && exception) : void
{static} #getCoreImpl(Self & self) : decltype(auto)
{static} #getCoreTryChecked(Self & self) : decltype(auto)
#thenImplementation(F && func, R , futures::detail::InlineContinuation ) : typename std::enable_if<!R::ReturnsFuture::value, typename R::Return>::type
#thenImplementation(F && func, R , futures::detail::InlineContinuation ) : typename std::enable_if<R::ReturnsFuture::value, typename R::Return>::type
#core_ : futures::detail::FutureBase::Core * [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L383{core_}]]]
}
class "futures::detail::CoreCallbackState<T,F>" as C_0001797157475442677168
class C_0001797157475442677168 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L104{CoreCallbackState}]] {
+CoreCallbackState<T, F>(Promise<T> && promise, F && func) : void
+CoreCallbackState<T, F>(CoreCallbackState<T,F> && that) : void
+operator=(CoreCallbackState<T,F> && ) : CoreCallbackState<T,F> &
+~CoreCallbackState<T, F>() : void
+setTry(Executor::KeepAlive<> && keepAlive, Try<T> && t) : void
+setException(Executor::KeepAlive<> && keepAlive, exception_wrapper && ew) : void
+stealPromise() : Promise<T>
-before_barrier() const : bool
+invoke(Args &&... args) : auto
+tryInvoke(Args &&... args) : auto
- : futures::detail::CoreCallbackState::(anonymous union at /home/bartek/devel/clang-uml-examples/folly/folly/folly/futures/Future-inl.h:159:3) [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L159{}]]]
-promise_ : Promise<T> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future-inl.h#L162{promise_}]]]
}
class "Executor::KeepAlive" as C_0002242828088217415598
class C_0002242828088217415598 {
}
class "Promise<T>" as C_0001778078938283944881
class C_0001778078938283944881 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L147{Promises and futures provide a potentially nonblocking mechanism   to execute a producer/consumer operation concurrently, with   threading/pools controlled via an executor. There are multiple potential   patterns for using promises and futures including...}]] {
{static} +makeEmpty() : Promise<T>
+Promise<T>() : void
+~Promise<T>() : void
+Promise<T>(const Promise<T> & ) : void
+operator=(const Promise<T> & ) : Promise<T> &
+Promise<T>(Promise<T> && other) : void
+operator=(Promise<T> && other) : Promise<T> &
+getSemiFuture() : SemiFuture<T>
+getFuture() : Future<T>
+setException(exception_wrapper ew) : void
+setTry(Try<T> && t) : void
+valid() const : bool
+isFulfilled() const : bool
-getCore() : Promise::Core &
-getCore() const : const Promise::Core &
-setTry(Executor::KeepAlive<> && ka, Try<T> && t) : void
-Promise<T>(futures::detail::EmptyConstruct ) : void
-throwIfFulfilled() const : void
-detach() : void
+setException(const E & e) : typename std::enable_if<std::is_base_of<std::exception, E>::value>::type
+setInterruptHandler(F && fn) : void
+setValue() : typename std::enable_if<std::is_same<struct Unit, B>::value, void>::type
+setValue(M && value) : void
+setWith(F && func) : void
{static} -getCoreImpl(CoreT * core) : CoreT &
-retrieved_ : bool [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L418{retrieved_}]]]
-core_ : Promise::Core * [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Promise.h#L444{core_}]]]
}
abstract "DrivableExecutor" as C_0000481841646641149488
abstract C_0000481841646641149488 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/DrivableExecutor.h#L40{DrivableExecutor}]] {
+~DrivableExecutor() = default : void
{abstract} +drive() = 0 : void
}
class "TimedDrivableExecutor" as C_0000769434624932181431
class C_0000769434624932181431 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L30{TimedDrivableExecutor}]] {
+TimedDrivableExecutor() : void
+~TimedDrivableExecutor() : void
+drive() : void
+try_drive() : bool
+add(Func ) : void
+run() : size_t
+drain() : size_t
+wait() : void
+try_wait() : bool
+try_drive_for(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_drive_until(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
+try_wait_for(const std::chrono::duration<Rep,Period> & timeout) : _Bool
+try_wait_until(const std::chrono::time_point<Clock,Duration> & deadline) : _Bool
-queue_ : UMPSCQueue<Func,true> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L99{queue_}]]]
-func_ : Func [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/executors/TimedDrivableExecutor.h#L100{func_}]]]
}
class "SemiFuture<T>" as C_0000156632990802225029
class C_0000156632990802225029 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L487{The interface (along with Future) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it should u...}]] {
+~SemiFuture<T>() : void
{static} +makeEmpty() : SemiFuture<T>
+SemiFuture<T>(const SemiFuture<T> & ) : void
+SemiFuture<T>(SemiFuture<T> && ) : void
+SemiFuture<T>(Future<T> && ) : void
+operator=(const SemiFuture<T> & ) : SemiFuture<T> &
+operator=(SemiFuture<T> && ) : SemiFuture<T> &
+operator=(Future<T> && ) : SemiFuture<T> &
+get() : T
+get(HighResDuration dur) : T
+getTry() : Try<T>
+getTry(HighResDuration dur) : Try<T>
+wait() : SemiFuture<T> &
+wait() : SemiFuture<T> &&
+wait(HighResDuration dur) : bool
+via(Executor::KeepAlive<> executor) : Future<T>
+via(Executor::KeepAlive<> executor, int8_t priority) : Future<T>
+unit() : SemiFuture<Unit>
+within(HighResDuration dur, Timekeeper * tk = nullptr) : SemiFuture<T>
+delayed(HighResDuration dur, Timekeeper * tk = nullptr) : SemiFuture<T>
+toUnsafeFuture() : Future<T>
-SemiFuture<T>(SemiFuture::Core * obj) : void
-SemiFuture<T>(futures::detail::EmptyConstruct ) : void
-stealDeferredExecutor() : futures::detail::DeferredWrapper
-wait(HighResDuration dur) : SemiFuture<T> &
{static} -releaseDeferredExecutor(SemiFuture::Core * core) : void
+SemiFuture<T>(T2 && val) : void
+SemiFuture<T>(typename std::enable_if<std::is_same<Unit,T2>::value>::type * p = nullptr) : void
+SemiFuture<T>(in_place_t , Args &&... args) : void
+defer(F && func) : SemiFuture<typename futures::detail::tryCallableResult<T, F>::value_type>
+deferExTry(F && func) : SemiFuture<typename futures::detail::tryExecutorCallableResult<T, F>::value_type>
+defer(R (&)(Args...) func) : auto
+deferValue(F && func) : SemiFuture<typename futures::detail::valueCallableResult<T, F>::value_type>
+deferExValue(F && func) : SemiFuture<typename futures::detail::valueExecutorCallableResult<T, F>::value_type>
+deferValue(R (&)(Args...) func) : auto
+deferError(tag_t<ExceptionType> , F && func) : SemiFuture<T>
+deferError(tag_t<ExceptionType> tag, R (&)(Args...) func) : SemiFuture<T>
+deferError(F && func) : SemiFuture<T>
+deferError(F && func) : SemiFuture<T>
+deferError(R (&)(Args...) func) : SemiFuture<T>
+within(HighResDuration dur, E e, Timekeeper * tk = nullptr) : SemiFuture<T>
}
class "Future<T>" as C_0000432533400863196245
class C_0000432533400863196245 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1003{The interface (along with SemiFuture) for the consumer-side of a   producer/consumer pair. Future vs. SemiFuture: - The consumer-side should generally start with a SemiFuture, not a Future. - Example, when a library creates and returns a future, it shou...}]] {
+Future<T>(const Future<T> & ) : void
+Future<T>(Future<T> && ) : void
{static} +makeEmpty() : Future<T>
+operator=(const Future<T> & ) : Future<T> &
+operator=(Future<T> && ) : Future<T> &
+getVia(DrivableExecutor * e) : T
+getVia(TimedDrivableExecutor * e, HighResDuration dur) : T
+getTryVia(DrivableExecutor * e) : Try<T>
+getTryVia(TimedDrivableExecutor * e, HighResDuration dur) : Try<T>
+via(Executor::KeepAlive<> executor) : Future<T>
+via(Executor::KeepAlive<> executor, int8_t priority) : Future<T>
+via(Executor::KeepAlive<> executor) : Future<T>
+via(Executor::KeepAlive<> executor, int8_t priority) : Future<T>
+then() : Future<Unit>
+unit() : Future<Unit>
+within(HighResDuration dur, Timekeeper * tk = nullptr) : Future<T>
+delayed(HighResDuration , Timekeeper *  = nullptr) : Future<T>
+get() : T
+get(HighResDuration dur) : T
+getTry() : Try<T>
+getTry(HighResDuration dur) : Try<T>
+wait() : Future<T> &
+wait() : Future<T> &&
+wait(HighResDuration dur) : Future<T> &
+wait(HighResDuration dur) : Future<T> &&
+waitVia(DrivableExecutor * e) : Future<T> &
+waitVia(DrivableExecutor * e) : Future<T> &&
+waitVia(TimedDrivableExecutor * e, HighResDuration dur) : Future<T> &
+waitVia(TimedDrivableExecutor * e, HighResDuration dur) : Future<T> &&
+willEqual(Future<T> & ) : Future<bool>
+semi() : SemiFuture<T>
#Future<T>(Future::Core * obj) : void
#Future<T>(futures::detail::EmptyConstruct ) : void
+Future<T>(T2 && val) : void
+Future<T>(typename std::enable_if<std::is_same<Unit,T2>::value>::type * p = nullptr) : void
+Future<T>(in_place_t , Args &&... args) : void
+Future<T>(Future<T2> && other) : void
+Future<T>(Future<T2> && other) : void
+operator=(Future<T2> && other) : Future<T> &
+unwrap() : typename std::enable_if<isFuture<F>::value, Future<typename isFuture<T>::Inner> >::type
+then(F && func) : Future<typename futures::detail::tryCallableResult<T, F>::value_type>
+thenInline(F && func) : Future<typename futures::detail::tryCallableResult<T, F>::value_type>
+then(R (Caller::*)(Args...) func, Caller * instance) : Future<typename isFuture<R>::Inner>
+then(Executor::KeepAlive<> x, Arg && arg) : auto
+thenTry(F && func) : Future<typename futures::detail::tryCallableResult<T, F>::value_type>
+thenTryInline(F && func) : Future<typename futures::detail::tryCallableResult<T, F>::value_type>
+thenExTry(F && func) : Future<typename futures::detail::tryExecutorCallableResult<T, F>::value_type>
+thenExTryInline(F && func) : Future<typename futures::detail::tryExecutorCallableResult<T, F>::value_type>
+thenTry(R (&)(Args...) func) : auto
+thenTryInline(R (&)(Args...) func) : auto
+thenValue(F && func) : Future<typename futures::detail::valueCallableResult<T, F>::value_type>
+thenValueInline(F && func) : Future<typename futures::detail::valueCallableResult<T, F>::value_type>
+thenExValue(F && func) : Future<typename futures::detail::valueExecutorCallableResult<T, F>::value_type>
+thenExValueInline(F && func) : Future<typename futures::detail::valueExecutorCallableResult<T, F>::value_type>
+thenValue(R (&)(Args...) func) : auto
+thenValueInline(R (&)(Args...) func) : auto
+thenError(tag_t<ExceptionType> , F && func) : typename std::enable_if<isFutureOrSemiFuture<invoke_result_t<F, ExceptionType> >::value, Future<T> >::type
+thenError(tag_t<ExceptionType> , F && func) : typename std::enable_if<!isFutureOrSemiFuture<invoke_result_t<F, ExceptionType> >::value, Future<T> >::type
+thenError(tag_t<ExceptionType> tag, R (&)(Args...) func) : Future<T>
+thenError(F && func) : Future<T>
+thenError(F && func) : typename std::enable_if<isFutureOrSemiFuture<invoke_result_t<F, class exception_wrapper> >::value, Future<T> >::type
+thenError(F && func) : typename std::enable_if<!isFutureOrSemiFuture<invoke_result_t<F, class exception_wrapper> >::value, Future<T> >::type
+thenError(R (&)(Args...) func) : Future<T>
+onError(F && func) : typename std::enable_if<!is_invocable_v<F, class exception_wrapper> && !futures::detail::Extract<F>::ReturnsFuture::value, Future<T> >::type
+onError(F && func) : typename std::enable_if<!is_invocable_v<F, class exception_wrapper> && futures::detail::Extract<F>::ReturnsFuture::value, Future<T> >::type
+onError(F && func) : typename std::enable_if<is_invocable_v<F, class exception_wrapper> && futures::detail::Extract<F>::ReturnsFuture::value, Future<T> >::type
+onError(F && func) : typename std::enable_if<is_invocable_v<F, class exception_wrapper> && !futures::detail::Extract<F>::ReturnsFuture::value, Future<T> >::type
+onError(R (&)(Args...) func) : Future<T>
+onError(F && func) : Future<T>
+ensure(F && func) : Future<T>
+onTimeout(HighResDuration , F && func, Timekeeper *  = nullptr) : Future<T>
+within(HighResDuration dur, E exception, Timekeeper * tk = nullptr) : Future<T>
+filter(F && predicate) : Future<T>
+reduce(I && initial, F && func) : Future<I>
}
abstract "Timekeeper" as C_0001579326926673473295
abstract C_0001579326926673473295 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L1973{A Timekeeper handles the details of keeping time and fulfilling delay promises. The returned Future<Unit> will either complete after the elapsed time, or in the event of some kind of exceptional error may hold an exception. These Futures respond to canc...}]] {
+~Timekeeper() = default : void
{abstract} +after(HighResDuration dur) = 0 : SemiFuture<Unit>
+afterUnsafe(HighResDuration dur) : Future<Unit>
+at(std::chrono::time_point<Clock> when) : SemiFuture<struct Unit>
+atUnsafe(std::chrono::time_point<Clock> when) : Future<struct Unit>
}
class "SharedPromise::Defaulted<size_t>" as C_0000742750151299031844
class C_0000742750151299031844 {
}
class "SharedPromise::Defaulted<Try<T>>" as C_0000616814101618455991
class C_0000616814101618455991 {
}
class "SharedPromise<T>" as C_0000070676212088190880
class C_0000070676212088190880 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L41{SharedPromise}]] {
+getSemiFuture() const : SemiFuture<T>
+getFuture() const : Future<T>
+size() const : size_t
+setException(exception_wrapper ew) : void
+setInterruptHandler(std::function<void (const exception_wrapper &)> ) : void
+setTry(Try<T> && t) : void
+isFulfilled() const : bool
-hasResult() const : bool
+setException(const E & ) : typename std::enable_if<std::is_base_of<std::exception, E>::value>::type
+setValue() : typename std::enable_if<std::is_same<struct Unit, B>::value, void>::type
+setValue(M && value) : void
+setWith(F && func) : void
-mutex_ : SharedPromise::Mutex [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L130{mutex_}]]]
-size_ : Defaulted<size_t> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L131{size_}]]]
-try_ : Defaulted<Try<T>> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L132{try_}]]]
-promises_ : std::vector<Promise<T>> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L133{promises_}]]]
-interruptHandler_ : std::function<void (const exception_wrapper &)> [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L134{interruptHandler_}]]]
}
class "SharedPromise::Mutex" as C_0001000827240401510911
class C_0001000827240401510911 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L104{SharedPromise##Mutex}]] {
+Mutex() = default : void
+Mutex(SharedPromise::Mutex && ) : void
+operator=(SharedPromise::Mutex && ) : SharedPromise::Mutex &
}
class "SharedPromise::Defaulted<V>" as C_0000764427108203128807
class C_0000764427108203128807 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L111{SharedPromise##Defaulted}]] {
+Defaulted<V>() = default : void
+Defaulted<V>(Defaulted<V> && that) : void
+operator=(Defaulted<V> && that) : Defaulted<V> &
+value : V [[[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/SharedPromise.h#L116{value}]]]
}
class "FutureSplitter<T>" as C_0000913905008779572763
class C_0000913905008779572763 [[https://github.com/facebook/folly/blob/c7166a677d17ff0a52cb14e02a84ad0a75821ca7/folly/futures/Future.h#L111{FutureSplitter}]] {
}
C_0000135335628570802873 ..> C_0001539432614095357204
C_0000135335628570802873 ..> C_0000135335628570802873
C_0000487431047047122182 ..> C_0000135335628570802873
C_0000487431047047122182 ..> C_0002242828088217415598
C_0000725183341054102552 ..> C_0000725183341054102552
C_0000725183341054102552 ..> C_0000156632990802225029
C_0000725183341054102552 ..> C_0000432533400863196245
C_0000725183341054102552 ..> C_0001539432614095357204
C_0000725183341054102552 ..> C_0000487431047047122182
C_0000725183341054102552 ..> C_0001636747636195825603
C_0000725183341054102552 - -> C_0000487431047047122182 : #core_
C_0001797157475442677168 ..> C_0001778078938283944881
C_0001797157475442677168 ..> C_0002242828088217415598
C_0001797157475442677168 ..> C_0000135335628570802873
C_0001797157475442677168 ..> C_0001539432614095357204
C_0001797157475442677168 o- - C_0001778078938283944881 : -promise_
C_0001778078938283944881 ..> C_0001778078938283944881
C_0001778078938283944881 ..> C_0001539432614095357204
C_0001778078938283944881 ..> C_0000135335628570802873
C_0001778078938283944881 ..> C_0002242828088217415598
C_0001778078938283944881 ..> C_0001636747636195825603
C_0001778078938283944881 - -> C_0000487431047047122182 : -core_
C_0000481841646641149488 <|- - C_0000769434624932181431
C_0000156632990802225029 ..> C_0000156632990802225029
C_0000156632990802225029 ..> C_0000432533400863196245
C_0000156632990802225029 ..> C_0002242828088217415598
C_0000156632990802225029 ..> C_0001579326926673473295
C_0000156632990802225029 ..> C_0001636747636195825603
C_0000725183341054102552 <|- - C_0000156632990802225029
C_0000432533400863196245 ..> C_0000432533400863196245
C_0000432533400863196245 ..> C_0000481841646641149488
C_0000432533400863196245 ..> C_0000769434624932181431
C_0000432533400863196245 ..> C_0002242828088217415598
C_0000432533400863196245 ..> C_0001579326926673473295
C_0000432533400863196245 ..> C_0001636747636195825603
C_0000725183341054102552 <|- - C_0000432533400863196245
C_0000742750151299031844 ..|> C_0000764427108203128807
C_0000616814101618455991 ..|> C_0000764427108203128807
C_0000070676212088190880 ..> C_0001539432614095357204
C_0000070676212088190880 ..> C_0000135335628570802873
C_0000070676212088190880 o- - C_0000742750151299031844 : -size_
C_0000070676212088190880 o- - C_0000616814101618455991 : -try_
C_0000070676212088190880 ..> C_0001778078938283944881
C_0000070676212088190880 o- - C_0001778078938283944881 : -promises_
C_0000070676212088190880 - -> C_0001539432614095357204 : -interruptHandler_
C_0001000827240401510911 - -+ C_0000070676212088190880
C_0000764427108203128807 - -+ C_0000070676212088190880
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.16+8-post-Ubuntu-0ubuntu122.04
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>